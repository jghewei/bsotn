/******************************************************************************
 *   COPYRIGHT (C) 2011 PMC-SIERRA, INC. ALL RIGHTS RESERVED.
 * --------------------------------------------------------------------------
 *  This software embodies materials and concepts which are proprietary and
 *  confidential to PMC-Sierra, Inc.
 *  PMC-Sierra distributes this software to its customers pursuant to the
 *  terms and conditions of the Software License Agreement
 *  contained in the text file software.lic that is distributed along with
 *  the software. This software can only be utilized if all
 *  terms and conditions of the Software License Agreement are
 *  accepted. If there are any questions, concerns, or if the
 *  Software License Agreement text file, software.lic, is missing please
 *  contact PMC-Sierra for assistance.
 * -------------------------------------------------------------------------
 *   DESCRIPTION:
 *     contains the inline implementation of all the field accessor functions
 *     and register accessor functions for the empei_i block
 * 
 *   NOTES:
 *     This file is generated by the script codegen.pm, version 1.1
 *     Do not modify this file.
 * 
 *     The input file is ../src/ioxml/pm30_60_205_map.xml
 *     block_uri "../xxx.xml"
 *     block_part_number "PM30_60_205"
 *     block_mnemonic "EMPEI120_I"
 * 
 *****************************************************************************/
#ifndef _EMPEI_I_IO_INLINE_H
#define _EMPEI_I_IO_INLINE_H

#include "empei_i_loc.h"
#include "empei_i_regs.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * ==================================================================================
 *               tsb level structure and access functions for empei_i
 * ==================================================================================
 */
/* if logging is disabled then so is IO_LOGGING */
#ifndef NO_IO_LOGGING
# ifdef LOGGING_DISABLED
#  define NO_IO_LOGGING
# endif
#endif

/* log messages in the generated files log the caller's file/line/function instead of itself.*/
#ifndef IOLOG
# ifdef NO_IO_LOGGING
#  define IOLOG(...)
# else
#  define IOLOG(...) vaLog( LOG_CALLER_ARGS __VA_ARGS__)
# endif
#endif
#ifndef IO_RANGE_CHECK
# ifdef NO_IO_LOGGING
#  define IO_RANGE_CHECK(...)
# else
#  define IO_RANGE_CHECK(...) vaLog( LOG_CALLER_ARGS "** ERROR: range check ** " __VA_ARGS__)
# endif
#endif
#ifndef IOLOG_DATA
# ifdef NO_IO_LOGGING
#  define IOLOG_DATA(...)
# else
#  define IOLOG_DATA(...) vaLogData( LOG_CALLER_ARGS __VA_ARGS__)
# endif
#endif
typedef struct {
    coalesce_buffer_t coalesce_handle[1]; /* only used if register coalescing is enabled */
    empei_i_handle_t * h;
    pmc_sys_handle_t sys_handle;
    const UINT32 base_address;
    /* maybe eventually need to add some fields here per io handle */
} empei_i_buffer_t;

#ifndef empei_i_buffer_init
#define empei_i_buffer_init( b, h ) \
       _empei_i_buffer_init( LOG_CALLER b, h )
#endif
static INLINE void _empei_i_buffer_init( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    b->h                        = h;
    b->sys_handle               = ((pmc_handle_t *)h)->sys_handle;
    *(UINT32 *)&b->base_address = ((pmc_handle_t *)h)->base_address;
    /* currently this just checks that the previous function remembered to flush. */
    l1sys_init( b->coalesce_handle, (void**)b->sys_handle );
    IOLOG( "%s", "empei_i_buffer_init");
    
}

#ifndef empei_i_buffer_flush
#define empei_i_buffer_flush( b ) \
       _empei_i_buffer_flush( LOG_CALLER b )
#endif

/*
* flush any changed fields to the register file and invalidate the read cache.
*/
static INLINE void _empei_i_buffer_flush( LOG_CALLER_DEFN empei_i_buffer_t *b )
{
    IOLOG( "empei_i_buffer_flush" );
    l1sys_flush( b->coalesce_handle );
}
static INLINE UINT32 empei_i_reg_read( empei_i_buffer_t *b,
                                       empei_i_handle_t *h,
                                       UINT32 mem_type,
                                       UINT32 reg )
{
    UINT32 value;
    if (b != NULL)
        value = l1sys_reg_read( b->coalesce_handle,
                                mem_type,
                                b->base_address,
                                reg);
    else
        value = l2sys_reg_read( ((pmc_handle_t *)h)->sys_handle,
                                mem_type,
                                ((pmc_handle_t *)h)->base_address + reg);
    return value;
}
static INLINE void empei_i_reg_write( empei_i_buffer_t *b,
                                      empei_i_handle_t *h,
                                      UINT32 mem_type,
                                      UINT32 reg,
                                      UINT32 value )
{
    if (b != NULL)
        l1sys_reg_write( b->coalesce_handle,
                         mem_type,
                         b->base_address,
                         reg,
                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h)->sys_handle,
                         mem_type,
                         ((pmc_handle_t *)h)->base_address + reg,
                         value);
}

static INLINE void empei_i_field_set( empei_i_buffer_t *b,
                                      empei_i_handle_t *h,
                                      UINT32 mem_type,
                                      UINT32 reg,
                                      UINT32 mask,
                                      UINT32 unused_mask,
                                      UINT32 ofs,
                                      UINT32 value )
{
    if (b != NULL)
        l1sys_field_set2( b->coalesce_handle,
                          mem_type,
                          b->base_address,
                          reg,
                          mask,
                          unused_mask,
                          ofs,
                          value);
    else
    {
        if ((mask | unused_mask) == 0xffffffff)
        {
            l2sys_reg_write( ((pmc_handle_t *)h)->sys_handle,
                             mem_type,
                             ((pmc_handle_t *)h)->base_address + reg,
                             value<<ofs);
        }
        else
        {
            l2sys_reg_read_modify_write( ((pmc_handle_t *)h)->sys_handle,
                                         mem_type,
                                         ((pmc_handle_t *)h)->base_address + reg,
                                         mask,
                                         value<<ofs);
        }
    }
}

static INLINE void empei_i_action_on_write_field_set( empei_i_buffer_t *b,
                                                      empei_i_handle_t *h,
                                                      UINT32 mem_type,
                                                      UINT32 reg,
                                                      UINT32 mask,
                                                      UINT32 ofs,
                                                      UINT32 value )
{
    if (b != NULL)
        l1sys_action_on_write_field_set( b->coalesce_handle,
                                         mem_type,
                                         b->base_address,
                                         reg,
                                         mask,
                                         ofs,
                                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h)->sys_handle,
                         mem_type,
                         ((pmc_handle_t *)h)->base_address + reg,
                         value<<ofs);
}

static INLINE void empei_i_burst_read( empei_i_buffer_t *b,
                                       empei_i_handle_t *h,
                                       UINT32 mem_type,
                                       UINT32 reg,
                                       UINT32 len,
                                       UINT32 *value )
{
    if (b != NULL)
        l1sys_burst_read( b->coalesce_handle,
                          mem_type,
                          b->base_address,
                          reg,
                          len,
                          value);
    else
        l2sys_burst_read( ((pmc_handle_t *)h)->sys_handle,
                          mem_type,
                          ((pmc_handle_t *)h)->base_address + reg,
                          len,
                          value);
}

static INLINE void empei_i_burst_write( empei_i_buffer_t *b,
                                        empei_i_handle_t *h,
                                        UINT32 mem_type,
                                        UINT32 reg,
                                        UINT32 len,
                                        UINT32 *value )
{
    if (b != NULL)
        l1sys_burst_write( b->coalesce_handle,
                           mem_type,
                           b->base_address,
                           reg,
                           len,
                           value);
    else
        l2sys_burst_write( ((pmc_handle_t *)h)->sys_handle,
                           mem_type,
                           ((pmc_handle_t *)h)->base_address + reg,
                           len,
                           value);
}

static INLINE PMC_ERROR empei_i_poll_bit( empei_i_buffer_t *b,
                                          empei_i_handle_t *h,
                                          UINT32 mem_type,
                                          UINT32 reg,
                                          UINT32 mask,
                                          UINT32 value,
                                          UINT32 max_count,
                                          UINT32 *num_failed_polls,
                                          UINT32 delay_between_polls_in_microseconds )
{
    if (b != NULL)
        return l1sys_poll_bit( b->coalesce_handle,
                               mem_type,
                               b->base_address,
                               reg,
                               mask,
                               value,
                               max_count,
                               num_failed_polls,
                               delay_between_polls_in_microseconds);
    else
        return l2sys_poll_bit( ((pmc_handle_t *)h)->sys_handle,
                               mem_type,
                               ((pmc_handle_t *)h)->base_address + reg,
                               mask,
                               value,
                               max_count,
                               num_failed_polls,
                               delay_between_polls_in_microseconds);
}

/*
 * ==================================================================================
 *                       register access functions for empei_i
 * ==================================================================================
 */

/**
 * accessor functions for register PMC_EMPEI120_I_REG_LINK_ENABLE
 *
 * Register: Link Enable Register
 * Offset: 0x00000004 LINK_ENABLE
 *
 * bits 11:0 default 0x000 LINK_ENABLE
 */

#ifndef empei_i_reg_LINK_ENABLE_write
#define empei_i_reg_LINK_ENABLE_write( b, h, value ) \
       _empei_i_reg_LINK_ENABLE_write( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_reg_LINK_ENABLE_write( LOG_CALLER_DEFN
                                                   empei_i_buffer_t *b,
                                                   empei_i_handle_t *h,
                                                   UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "empei_i_reg_LINK_ENABLE_write", value );
    empei_i_reg_write( b,
                       h,
                       MEM_TYPE_CONFIG,
                       PMC_EMPEI120_I_REG_LINK_ENABLE,
                       value);
}


#ifndef empei_i_reg_LINK_ENABLE_field_set
#define empei_i_reg_LINK_ENABLE_field_set( b, h, mask, ofs, value ) \
       _empei_i_reg_LINK_ENABLE_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _empei_i_reg_LINK_ENABLE_field_set( LOG_CALLER_DEFN
                                                       empei_i_buffer_t *b,
                                                       empei_i_handle_t *h,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "empei_i_reg_LINK_ENABLE_field_set", mask, ofs, value );
    empei_i_field_set( b,
                       h,
                       MEM_TYPE_CONFIG,
                       PMC_EMPEI120_I_REG_LINK_ENABLE,
                       mask,
                       PMC_EMPEI120_I_REG_LINK_ENABLE_UNUSED_MASK,
                       ofs,
                       value);

}


#ifndef empei_i_reg_LINK_ENABLE_read
#define empei_i_reg_LINK_ENABLE_read( b, h ) \
       _empei_i_reg_LINK_ENABLE_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_reg_LINK_ENABLE_read( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 reg_value;

    reg_value = empei_i_reg_read( b,
                                  h,
                                  MEM_TYPE_CONFIG,
                                  PMC_EMPEI120_I_REG_LINK_ENABLE);

    IOLOG( "%s -> 0x%08x;", "empei_i_reg_LINK_ENABLE_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_EMPEI120_I_REG_INT_CTRL
 *
 * Register: Interrupt Control Register
 * Offset: 0x00000008 INT_CTRL
 *
 * bits 0 default 1 WCI_MODE_CONTROL
 *
 * bits 8 default 0 CLR_INT_CONTROL
 */

#ifndef empei_i_reg_INT_CTRL_write
#define empei_i_reg_INT_CTRL_write( b, h, value ) \
       _empei_i_reg_INT_CTRL_write( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_reg_INT_CTRL_write( LOG_CALLER_DEFN
                                                empei_i_buffer_t *b,
                                                empei_i_handle_t *h,
                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "empei_i_reg_INT_CTRL_write", value );
    empei_i_reg_write( b,
                       h,
                       MEM_TYPE_CONFIG,
                       PMC_EMPEI120_I_REG_INT_CTRL,
                       value);
}


#ifndef empei_i_reg_INT_CTRL_field_set
#define empei_i_reg_INT_CTRL_field_set( b, h, mask, ofs, value ) \
       _empei_i_reg_INT_CTRL_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _empei_i_reg_INT_CTRL_field_set( LOG_CALLER_DEFN
                                                    empei_i_buffer_t *b,
                                                    empei_i_handle_t *h,
                                                    UINT32 mask,
                                                    UINT32 ofs,
                                                    UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "empei_i_reg_INT_CTRL_field_set", mask, ofs, value );
    empei_i_field_set( b,
                       h,
                       MEM_TYPE_CONFIG,
                       PMC_EMPEI120_I_REG_INT_CTRL,
                       mask,
                       PMC_EMPEI120_I_REG_INT_CTRL_UNUSED_MASK,
                       ofs,
                       value);

}


#ifndef empei_i_reg_INT_CTRL_read
#define empei_i_reg_INT_CTRL_read( b, h ) \
       _empei_i_reg_INT_CTRL_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_reg_INT_CTRL_read( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 reg_value;

    reg_value = empei_i_reg_read( b,
                                  h,
                                  MEM_TYPE_CONFIG,
                                  PMC_EMPEI120_I_REG_INT_CTRL);

    IOLOG( "%s -> 0x%08x;", "empei_i_reg_INT_CTRL_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_EMPEI120_I_REG_WRRPC
 *
 * Register: Weighted Round Robin Priority Configuration
 * Offset: 0x00000070 WRRPC
 *
 * bits 0  default 1 WRR0_CLIENTA_WEIGHT
 *
 * bits 1  default 1 WRR1_CLIENTA_WEIGHT
 *
 * bits 2  default 1 WRR2_CLIENTA_WEIGHT
 *
 * bits 3  default 1 WRR3_CLIENTA_WEIGHT
 *
 * bits 4  default 1 WRR4_CLIENTA_WEIGHT
 *
 * bits 5  default 1 WRR5_CLIENTA_WEIGHT
 *
 * bits 6  default 1 WRR6_CLIENTA_WEIGHT
 *
 * bits 7  default 1 WRR7_CLIENTA_WEIGHT
 *
 * bits 8  default 1 WRR8_CLIENTA_WEIGHT
 *
 * bits 9  default 1 WRR9_CLIENTA_WEIGHT
 *
 * bits 10 default 1 WRR10_CLIENTA_WEIGHT
 *
 * bits 11 default 1 WRR11_CLIENTA_WEIGHT
 *
 * bits 16 default 0 WRR0_CLIENTB_WEIGHT
 *
 * bits 17 default 0 WRR1_CLIENTB_WEIGHT
 *
 * bits 18 default 0 WRR2_CLIENTB_WEIGHT
 *
 * bits 19 default 0 WRR3_CLIENTB_WEIGHT
 *
 * bits 20 default 0 WRR4_CLIENTB_WEIGHT
 *
 * bits 21 default 0 WRR5_CLIENTB_WEIGHT
 *
 * bits 22 default 0 WRR6_CLIENTB_WEIGHT
 *
 * bits 23 default 0 WRR7_CLIENTB_WEIGHT
 *
 * bits 24 default 0 WRR8_CLIENTB_WEIGHT
 *
 * bits 25 default 0 WRR9_CLIENTB_WEIGHT
 *
 * bits 26 default 0 WRR10_CLIENTB_WEIGHT
 *
 * bits 27 default 0 WRR11_CLIENTB_WEIGHT
 */

#ifndef empei_i_reg_WRRPC_write
#define empei_i_reg_WRRPC_write( b, h, value ) \
       _empei_i_reg_WRRPC_write( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_reg_WRRPC_write( LOG_CALLER_DEFN
                                             empei_i_buffer_t *b,
                                             empei_i_handle_t *h,
                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "empei_i_reg_WRRPC_write", value );
    empei_i_reg_write( b,
                       h,
                       MEM_TYPE_CONFIG,
                       PMC_EMPEI120_I_REG_WRRPC,
                       value);
}


#ifndef empei_i_reg_WRRPC_field_set
#define empei_i_reg_WRRPC_field_set( b, h, mask, ofs, value ) \
       _empei_i_reg_WRRPC_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _empei_i_reg_WRRPC_field_set( LOG_CALLER_DEFN
                                                 empei_i_buffer_t *b,
                                                 empei_i_handle_t *h,
                                                 UINT32 mask,
                                                 UINT32 ofs,
                                                 UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "empei_i_reg_WRRPC_field_set", mask, ofs, value );
    empei_i_field_set( b,
                       h,
                       MEM_TYPE_CONFIG,
                       PMC_EMPEI120_I_REG_WRRPC,
                       mask,
                       PMC_EMPEI120_I_REG_WRRPC_UNUSED_MASK,
                       ofs,
                       value);

}


#ifndef empei_i_reg_WRRPC_read
#define empei_i_reg_WRRPC_read( b, h ) \
       _empei_i_reg_WRRPC_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_reg_WRRPC_read( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 reg_value;

    reg_value = empei_i_reg_read( b,
                                  h,
                                  MEM_TYPE_CONFIG,
                                  PMC_EMPEI120_I_REG_WRRPC);

    IOLOG( "%s -> 0x%08x;", "empei_i_reg_WRRPC_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_EMPEI120_I_REG_RAM_SD_CTRL
 *
 * Register: RAM Shut Down Control Register
 * Offset: 0x00000074 RAM_SD_CTRL
 *
 * bits 0 default 1 SD_CTRL
 */

#ifndef empei_i_reg_RAM_SD_CTRL_write
#define empei_i_reg_RAM_SD_CTRL_write( b, h, value ) \
       _empei_i_reg_RAM_SD_CTRL_write( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_reg_RAM_SD_CTRL_write( LOG_CALLER_DEFN
                                                   empei_i_buffer_t *b,
                                                   empei_i_handle_t *h,
                                                   UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "empei_i_reg_RAM_SD_CTRL_write", value );
    empei_i_reg_write( b,
                       h,
                       MEM_TYPE_CONFIG,
                       PMC_EMPEI120_I_REG_RAM_SD_CTRL,
                       value);
}


#ifndef empei_i_reg_RAM_SD_CTRL_field_set
#define empei_i_reg_RAM_SD_CTRL_field_set( b, h, mask, ofs, value ) \
       _empei_i_reg_RAM_SD_CTRL_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _empei_i_reg_RAM_SD_CTRL_field_set( LOG_CALLER_DEFN
                                                       empei_i_buffer_t *b,
                                                       empei_i_handle_t *h,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "empei_i_reg_RAM_SD_CTRL_field_set", mask, ofs, value );
    empei_i_field_set( b,
                       h,
                       MEM_TYPE_CONFIG,
                       PMC_EMPEI120_I_REG_RAM_SD_CTRL,
                       mask,
                       PMC_EMPEI120_I_REG_RAM_SD_CTRL_UNUSED_MASK,
                       ofs,
                       value);

}


#ifndef empei_i_reg_RAM_SD_CTRL_read
#define empei_i_reg_RAM_SD_CTRL_read( b, h ) \
       _empei_i_reg_RAM_SD_CTRL_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_reg_RAM_SD_CTRL_read( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 reg_value;

    reg_value = empei_i_reg_read( b,
                                  h,
                                  MEM_TYPE_CONFIG,
                                  PMC_EMPEI120_I_REG_RAM_SD_CTRL);

    IOLOG( "%s -> 0x%08x;", "empei_i_reg_RAM_SD_CTRL_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_EMPEI120_I_REG_CPB_LSC_LOW
 *
 * Register: CPB Link Scheduler , Configuration for Lower Word
 * Offset: 0x00000080 CPB_LSC_LOW
 *
 * bits 3:0   default 0x0 CPB_LINK_SCH_TS0
 *
 * bits 7:4   default 0x0 CPB_LINK_SCH_TS1
 *
 * bits 11:8  default 0x0 CPB_LINK_SCH_TS2
 *
 * bits 15:12 default 0x0 CPB_LINK_SCH_TS3
 *
 * bits 19:16 default 0x0 CPB_LINK_SCH_TS4
 *
 * bits 23:20 default 0x0 CPB_LINK_SCH_TS5
 *
 * bits 27:24 default 0x0 CPB_LINK_SCH_TS6
 *
 * bits 31:28 default 0x0 CPB_LINK_SCH_TS7
 */

#ifndef empei_i_reg_CPB_LSC_LOW_write
#define empei_i_reg_CPB_LSC_LOW_write( b, h, value ) \
       _empei_i_reg_CPB_LSC_LOW_write( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_reg_CPB_LSC_LOW_write( LOG_CALLER_DEFN
                                                   empei_i_buffer_t *b,
                                                   empei_i_handle_t *h,
                                                   UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "empei_i_reg_CPB_LSC_LOW_write", value );
    empei_i_reg_write( b,
                       h,
                       MEM_TYPE_CONFIG,
                       PMC_EMPEI120_I_REG_CPB_LSC_LOW,
                       value);
}


#ifndef empei_i_reg_CPB_LSC_LOW_field_set
#define empei_i_reg_CPB_LSC_LOW_field_set( b, h, mask, ofs, value ) \
       _empei_i_reg_CPB_LSC_LOW_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _empei_i_reg_CPB_LSC_LOW_field_set( LOG_CALLER_DEFN
                                                       empei_i_buffer_t *b,
                                                       empei_i_handle_t *h,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "empei_i_reg_CPB_LSC_LOW_field_set", mask, ofs, value );
    empei_i_field_set( b,
                       h,
                       MEM_TYPE_CONFIG,
                       PMC_EMPEI120_I_REG_CPB_LSC_LOW,
                       mask,
                       PMC_EMPEI120_I_REG_CPB_LSC_LOW_UNUSED_MASK,
                       ofs,
                       value);

}


#ifndef empei_i_reg_CPB_LSC_LOW_read
#define empei_i_reg_CPB_LSC_LOW_read( b, h ) \
       _empei_i_reg_CPB_LSC_LOW_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_reg_CPB_LSC_LOW_read( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 reg_value;

    reg_value = empei_i_reg_read( b,
                                  h,
                                  MEM_TYPE_CONFIG,
                                  PMC_EMPEI120_I_REG_CPB_LSC_LOW);

    IOLOG( "%s -> 0x%08x;", "empei_i_reg_CPB_LSC_LOW_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_EMPEI120_I_REG_CPB_USC_HIGH
 *
 * Register: CPB Link Scheduler Configuration for Upper Word
 * Offset: 0x00000084 CPB_USC_HIGH
 *
 * bits 3:0   default 0x0 CPB_LINK_SCH_TS8
 *
 * bits 7:4   default 0x0 CPB_LINK_SCH_TS9
 *
 * bits 11:8  default 0x0 CPB_LINK_SCH_TS10
 *
 * bits 15:12 default 0x0 CPB_LINK_SCH_TS11
 *
 * bits 19:16 default 0x0 CPB_LINK_SCH_OFFSET_EXTRACT
 *
 * bits 31:28 default 0xB CPB_LINK_SCH_LAST_TIMESLOT
 */

#ifndef empei_i_reg_CPB_USC_HIGH_write
#define empei_i_reg_CPB_USC_HIGH_write( b, h, value ) \
       _empei_i_reg_CPB_USC_HIGH_write( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_reg_CPB_USC_HIGH_write( LOG_CALLER_DEFN
                                                    empei_i_buffer_t *b,
                                                    empei_i_handle_t *h,
                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "empei_i_reg_CPB_USC_HIGH_write", value );
    empei_i_reg_write( b,
                       h,
                       MEM_TYPE_CONFIG,
                       PMC_EMPEI120_I_REG_CPB_USC_HIGH,
                       value);
}


#ifndef empei_i_reg_CPB_USC_HIGH_field_set
#define empei_i_reg_CPB_USC_HIGH_field_set( b, h, mask, ofs, value ) \
       _empei_i_reg_CPB_USC_HIGH_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _empei_i_reg_CPB_USC_HIGH_field_set( LOG_CALLER_DEFN
                                                        empei_i_buffer_t *b,
                                                        empei_i_handle_t *h,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "empei_i_reg_CPB_USC_HIGH_field_set", mask, ofs, value );
    empei_i_field_set( b,
                       h,
                       MEM_TYPE_CONFIG,
                       PMC_EMPEI120_I_REG_CPB_USC_HIGH,
                       mask,
                       PMC_EMPEI120_I_REG_CPB_USC_HIGH_UNUSED_MASK,
                       ofs,
                       value);

}


#ifndef empei_i_reg_CPB_USC_HIGH_read
#define empei_i_reg_CPB_USC_HIGH_read( b, h ) \
       _empei_i_reg_CPB_USC_HIGH_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_reg_CPB_USC_HIGH_read( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 reg_value;

    reg_value = empei_i_reg_read( b,
                                  h,
                                  MEM_TYPE_CONFIG,
                                  PMC_EMPEI120_I_REG_CPB_USC_HIGH);

    IOLOG( "%s -> 0x%08x;", "empei_i_reg_CPB_USC_HIGH_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_EMPEI120_I_REG_INTL_LSC_LOW
 *
 * Register: Internal Link Scheduler Configuration for Lower Word
 * Offset: 0x00000088 INTL_LSC_LOW
 *
 * bits 3:0   default 0x0 INTL_LINK_SCH_TS0
 *
 * bits 7:4   default 0x0 INTL_LINK_SCH_TS1
 *
 * bits 11:8  default 0x0 INTL_LINK_SCH_TS2
 *
 * bits 15:12 default 0x0 INTL_LINK_SCH_TS3
 *
 * bits 19:16 default 0x0 INTL_LINK_SCH_TS4
 *
 * bits 23:20 default 0x0 INTL_LINK_SCH_TS5
 *
 * bits 27:24 default 0x0 INTL_LINK_SCH_TS6
 *
 * bits 31:28 default 0x0 INTL_LINK_SCH_TS7
 */

#ifndef empei_i_reg_INTL_LSC_LOW_write
#define empei_i_reg_INTL_LSC_LOW_write( b, h, value ) \
       _empei_i_reg_INTL_LSC_LOW_write( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_reg_INTL_LSC_LOW_write( LOG_CALLER_DEFN
                                                    empei_i_buffer_t *b,
                                                    empei_i_handle_t *h,
                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "empei_i_reg_INTL_LSC_LOW_write", value );
    empei_i_reg_write( b,
                       h,
                       MEM_TYPE_CONFIG,
                       PMC_EMPEI120_I_REG_INTL_LSC_LOW,
                       value);
}


#ifndef empei_i_reg_INTL_LSC_LOW_field_set
#define empei_i_reg_INTL_LSC_LOW_field_set( b, h, mask, ofs, value ) \
       _empei_i_reg_INTL_LSC_LOW_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _empei_i_reg_INTL_LSC_LOW_field_set( LOG_CALLER_DEFN
                                                        empei_i_buffer_t *b,
                                                        empei_i_handle_t *h,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "empei_i_reg_INTL_LSC_LOW_field_set", mask, ofs, value );
    empei_i_field_set( b,
                       h,
                       MEM_TYPE_CONFIG,
                       PMC_EMPEI120_I_REG_INTL_LSC_LOW,
                       mask,
                       PMC_EMPEI120_I_REG_INTL_LSC_LOW_UNUSED_MASK,
                       ofs,
                       value);

}


#ifndef empei_i_reg_INTL_LSC_LOW_read
#define empei_i_reg_INTL_LSC_LOW_read( b, h ) \
       _empei_i_reg_INTL_LSC_LOW_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_reg_INTL_LSC_LOW_read( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 reg_value;

    reg_value = empei_i_reg_read( b,
                                  h,
                                  MEM_TYPE_CONFIG,
                                  PMC_EMPEI120_I_REG_INTL_LSC_LOW);

    IOLOG( "%s -> 0x%08x;", "empei_i_reg_INTL_LSC_LOW_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_EMPEI120_I_REG_INTL_USC_HIGH
 *
 * Register: Internal Link Scheduler Configuration for Upper Word
 * Offset: 0x0000008c INTL_USC_HIGH
 *
 * bits 3:0   default 0x0 INTL_LINK_SCH_TS8
 *
 * bits 7:4   default 0x0 INTL_LINK_SCH_TS9
 *
 * bits 11:8  default 0x0 INTL_LINK_SCH_TS10
 *
 * bits 15:12 default 0x0 INTL_LINK_SCH_TS11
 *
 * bits 27:24 default 0xB INTL_LINK_SCH_LAST_TIMESLOT
 */

#ifndef empei_i_reg_INTL_USC_HIGH_write
#define empei_i_reg_INTL_USC_HIGH_write( b, h, value ) \
       _empei_i_reg_INTL_USC_HIGH_write( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_reg_INTL_USC_HIGH_write( LOG_CALLER_DEFN
                                                     empei_i_buffer_t *b,
                                                     empei_i_handle_t *h,
                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "empei_i_reg_INTL_USC_HIGH_write", value );
    empei_i_reg_write( b,
                       h,
                       MEM_TYPE_CONFIG,
                       PMC_EMPEI120_I_REG_INTL_USC_HIGH,
                       value);
}


#ifndef empei_i_reg_INTL_USC_HIGH_field_set
#define empei_i_reg_INTL_USC_HIGH_field_set( b, h, mask, ofs, value ) \
       _empei_i_reg_INTL_USC_HIGH_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _empei_i_reg_INTL_USC_HIGH_field_set( LOG_CALLER_DEFN
                                                         empei_i_buffer_t *b,
                                                         empei_i_handle_t *h,
                                                         UINT32 mask,
                                                         UINT32 ofs,
                                                         UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "empei_i_reg_INTL_USC_HIGH_field_set", mask, ofs, value );
    empei_i_field_set( b,
                       h,
                       MEM_TYPE_CONFIG,
                       PMC_EMPEI120_I_REG_INTL_USC_HIGH,
                       mask,
                       PMC_EMPEI120_I_REG_INTL_USC_HIGH_UNUSED_MASK,
                       ofs,
                       value);

}


#ifndef empei_i_reg_INTL_USC_HIGH_read
#define empei_i_reg_INTL_USC_HIGH_read( b, h ) \
       _empei_i_reg_INTL_USC_HIGH_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_reg_INTL_USC_HIGH_read( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 reg_value;

    reg_value = empei_i_reg_read( b,
                                  h,
                                  MEM_TYPE_CONFIG,
                                  PMC_EMPEI120_I_REG_INTL_USC_HIGH);

    IOLOG( "%s -> 0x%08x;", "empei_i_reg_INTL_USC_HIGH_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_EMPEI120_I_REG_CPB_PF_ENABLE
 *
 * Register: CPB Pause Frame Enable
 * Offset: 0x00000098 CPB_PF_ENABLE
 *
 * bits 11:0 default 0x000 SYS_ZONE_ENABLE
 */

#ifndef empei_i_reg_CPB_PF_ENABLE_write
#define empei_i_reg_CPB_PF_ENABLE_write( b, h, value ) \
       _empei_i_reg_CPB_PF_ENABLE_write( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_reg_CPB_PF_ENABLE_write( LOG_CALLER_DEFN
                                                     empei_i_buffer_t *b,
                                                     empei_i_handle_t *h,
                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "empei_i_reg_CPB_PF_ENABLE_write", value );
    empei_i_reg_write( b,
                       h,
                       MEM_TYPE_CONFIG,
                       PMC_EMPEI120_I_REG_CPB_PF_ENABLE,
                       value);
}


#ifndef empei_i_reg_CPB_PF_ENABLE_field_set
#define empei_i_reg_CPB_PF_ENABLE_field_set( b, h, mask, ofs, value ) \
       _empei_i_reg_CPB_PF_ENABLE_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _empei_i_reg_CPB_PF_ENABLE_field_set( LOG_CALLER_DEFN
                                                         empei_i_buffer_t *b,
                                                         empei_i_handle_t *h,
                                                         UINT32 mask,
                                                         UINT32 ofs,
                                                         UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "empei_i_reg_CPB_PF_ENABLE_field_set", mask, ofs, value );
    empei_i_field_set( b,
                       h,
                       MEM_TYPE_CONFIG,
                       PMC_EMPEI120_I_REG_CPB_PF_ENABLE,
                       mask,
                       PMC_EMPEI120_I_REG_CPB_PF_ENABLE_UNUSED_MASK,
                       ofs,
                       value);

}


#ifndef empei_i_reg_CPB_PF_ENABLE_read
#define empei_i_reg_CPB_PF_ENABLE_read( b, h ) \
       _empei_i_reg_CPB_PF_ENABLE_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_reg_CPB_PF_ENABLE_read( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 reg_value;

    reg_value = empei_i_reg_read( b,
                                  h,
                                  MEM_TYPE_CONFIG,
                                  PMC_EMPEI120_I_REG_CPB_PF_ENABLE);

    IOLOG( "%s -> 0x%08x;", "empei_i_reg_CPB_PF_ENABLE_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_EMPEI120_I_REG_LINK_TYPE
 *
 * Register: Link Type
 * Offset: (0x00000580 + (N) * 4) LINK_TYPE
 *
 * bits 15:0 default 0x0000 LINK_TYPE
 */

#ifndef empei_i_reg_LINK_TYPE_array_burst_write
#define empei_i_reg_LINK_TYPE_array_burst_write( b, h, ofs, len, value ) \
       _empei_i_reg_LINK_TYPE_array_burst_write( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _empei_i_reg_LINK_TYPE_array_burst_write( LOG_CALLER_DEFN
                                                             empei_i_buffer_t *b,
                                                             empei_i_handle_t *h,
                                                             UINT32 ofs,
                                                             UINT32 len,
                                                             UINT32 *value )
{
    if (len + ofs > 12)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "empei_i_reg_LINK_TYPE_array_burst_write", ofs, len, 12 );
    IOLOG( "%s of %d words ofs=%d len=%d", "empei_i_reg_LINK_TYPE_array_burst_write", 12, ofs, len);
    empei_i_burst_write( b,
                         h,
                         MEM_TYPE_CONFIG,
                         PMC_EMPEI120_I_REG_LINK_TYPE(ofs),
                         len,
                         value);

}


#ifndef empei_i_reg_LINK_TYPE_array_field_set
#define empei_i_reg_LINK_TYPE_array_field_set( b, h, N, mask, ofs, value ) \
       _empei_i_reg_LINK_TYPE_array_field_set( LOG_CALLER b, h, N, mask, ofs, value )
#endif
static INLINE void _empei_i_reg_LINK_TYPE_array_field_set( LOG_CALLER_DEFN
                                                           empei_i_buffer_t *b,
                                                           empei_i_handle_t *h,
                                                           UINT32 N,
                                                           UINT32 mask,
                                                           UINT32 ofs,
                                                           UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "empei_i_reg_LINK_TYPE_array_field_set", mask, ofs, value );
    empei_i_field_set( b,
                       h,
                       MEM_TYPE_CONFIG,
                       PMC_EMPEI120_I_REG_LINK_TYPE(N),
                       mask,
                       PMC_EMPEI120_I_REG_LINK_TYPE_UNUSED_MASK,
                       ofs,
                       value);

}


#ifndef empei_i_reg_LINK_TYPE_array_burst_read
#define empei_i_reg_LINK_TYPE_array_burst_read( b, h, ofs, len, value ) \
       _empei_i_reg_LINK_TYPE_array_burst_read( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _empei_i_reg_LINK_TYPE_array_burst_read( LOG_CALLER_DEFN
                                                            empei_i_buffer_t *b,
                                                            empei_i_handle_t *h,
                                                            UINT32 ofs,
                                                            UINT32 len,
                                                            UINT32 *value )
{
    if (len + ofs > 12)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "empei_i_reg_LINK_TYPE_array_burst_read", ofs, len, 12 );
    empei_i_burst_read( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_EMPEI120_I_REG_LINK_TYPE(ofs),
                        len,
                        value);

    IOLOG( "%s of %d words ofs=%d len=%d", "empei_i_reg_LINK_TYPE_array_burst_read", 12, ofs, len);
}


#ifndef empei_i_reg_LINK_TYPE_array_read
#define empei_i_reg_LINK_TYPE_array_read( b, h, N ) \
       _empei_i_reg_LINK_TYPE_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _empei_i_reg_LINK_TYPE_array_read( LOG_CALLER_DEFN
                                                        empei_i_buffer_t *b,
                                                        empei_i_handle_t *h,
                                                        UINT32 N )
{
    UINT32 reg_value;

    reg_value = empei_i_reg_read( b,
                                  h,
                                  MEM_TYPE_CONFIG,
                                  PMC_EMPEI120_I_REG_LINK_TYPE(N));

    IOLOG( "%s -> 0x%08x;", "empei_i_reg_LINK_TYPE_array_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_EMPEI120_I_REG_CHAN_MAP
 *
 * Register: Channel Mapper
 * Offset: (0x00000500 + (N) * 4) CHAN_MAP
 *
 * bits 2:0   default 000 PRIORITY_0_CHAN_MAP
 *
 * bits 6:4   default 000 PRIORITY_1_CHAN_MAP
 *
 * bits 10:8  default 000 PRIORITY_2_CHAN_MAP
 *
 * bits 14:12 default 000 PRIORITY_3_CHAN_MAP
 *
 * bits 18:16 default 000 PRIORITY_4_CHAN_MAP
 *
 * bits 22:20 default 000 PRIORITY_5_CHAN_MAP
 *
 * bits 26:24 default 000 PRIORITY_6_CHAN_MAP
 *
 * bits 30:28 default 000 PRIORITY_7_CHAN_MAP
 */

#ifndef empei_i_reg_CHAN_MAP_array_write
#define empei_i_reg_CHAN_MAP_array_write( b, h, N, value ) \
       _empei_i_reg_CHAN_MAP_array_write( LOG_CALLER b, h, N, value )
#endif
static INLINE void _empei_i_reg_CHAN_MAP_array_write( LOG_CALLER_DEFN
                                                      empei_i_buffer_t *b,
                                                      empei_i_handle_t *h,
                                                      UINT32  N,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "empei_i_reg_CHAN_MAP_array_write", value );
    empei_i_reg_write( b,
                       h,
                       MEM_TYPE_CONFIG,
                       PMC_EMPEI120_I_REG_CHAN_MAP(N),
                       value);
}


#ifndef empei_i_reg_CHAN_MAP_array_field_set
#define empei_i_reg_CHAN_MAP_array_field_set( b, h, N, mask, ofs, value ) \
       _empei_i_reg_CHAN_MAP_array_field_set( LOG_CALLER b, h, N, mask, ofs, value )
#endif
static INLINE void _empei_i_reg_CHAN_MAP_array_field_set( LOG_CALLER_DEFN
                                                          empei_i_buffer_t *b,
                                                          empei_i_handle_t *h,
                                                          UINT32  N,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "empei_i_reg_CHAN_MAP_array_field_set", N, mask, ofs, value );
    empei_i_field_set( b,
                       h,
                       MEM_TYPE_CONFIG,
                       PMC_EMPEI120_I_REG_CHAN_MAP(N),
                       mask,
                       PMC_EMPEI120_I_REG_CHAN_MAP_UNUSED_MASK,
                       ofs,
                       value);

}


#ifndef empei_i_reg_CHAN_MAP_array_read
#define empei_i_reg_CHAN_MAP_array_read( b, h, N ) \
       _empei_i_reg_CHAN_MAP_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _empei_i_reg_CHAN_MAP_array_read( LOG_CALLER_DEFN
                                                       empei_i_buffer_t *b,
                                                       empei_i_handle_t *h,
                                                       UINT32  N )
{
    UINT32 reg_value;

    reg_value = empei_i_reg_read( b,
                                  h,
                                  MEM_TYPE_CONFIG,
                                  PMC_EMPEI120_I_REG_CHAN_MAP(N));

    IOLOG( "%s -> 0x%08x; N=%d", "empei_i_reg_CHAN_MAP_array_read", reg_value, N);
    return reg_value;
}

/**
 * accessor functions for register PMC_EMPEI120_I_REG_EXT_PMON_CONFIG
 *
 * Register: Extract PMON Block Configuration
 * Offset: (0x00000a00 + (N) * 4) EXT_PMON_CONFIG
 *
 * bits 8:0 default 111100000 EXT_PMON_CFG
 *
 * bits 9   default 0         EXT_PMON_EN
 */

#ifndef empei_i_reg_EXT_PMON_CONFIG_array_write
#define empei_i_reg_EXT_PMON_CONFIG_array_write( b, h, N, value ) \
       _empei_i_reg_EXT_PMON_CONFIG_array_write( LOG_CALLER b, h, N, value )
#endif
static INLINE void _empei_i_reg_EXT_PMON_CONFIG_array_write( LOG_CALLER_DEFN
                                                             empei_i_buffer_t *b,
                                                             empei_i_handle_t *h,
                                                             UINT32  N,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "empei_i_reg_EXT_PMON_CONFIG_array_write", value );
    empei_i_reg_write( b,
                       h,
                       MEM_TYPE_CONFIG,
                       PMC_EMPEI120_I_REG_EXT_PMON_CONFIG(N),
                       value);
}


#ifndef empei_i_reg_EXT_PMON_CONFIG_array_field_set
#define empei_i_reg_EXT_PMON_CONFIG_array_field_set( b, h, N, mask, ofs, value ) \
       _empei_i_reg_EXT_PMON_CONFIG_array_field_set( LOG_CALLER b, h, N, mask, ofs, value )
#endif
static INLINE void _empei_i_reg_EXT_PMON_CONFIG_array_field_set( LOG_CALLER_DEFN
                                                                 empei_i_buffer_t *b,
                                                                 empei_i_handle_t *h,
                                                                 UINT32  N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "empei_i_reg_EXT_PMON_CONFIG_array_field_set", N, mask, ofs, value );
    empei_i_field_set( b,
                       h,
                       MEM_TYPE_CONFIG,
                       PMC_EMPEI120_I_REG_EXT_PMON_CONFIG(N),
                       mask,
                       PMC_EMPEI120_I_REG_EXT_PMON_CONFIG_UNUSED_MASK,
                       ofs,
                       value);

}


#ifndef empei_i_reg_EXT_PMON_CONFIG_array_read
#define empei_i_reg_EXT_PMON_CONFIG_array_read( b, h, N ) \
       _empei_i_reg_EXT_PMON_CONFIG_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _empei_i_reg_EXT_PMON_CONFIG_array_read( LOG_CALLER_DEFN
                                                              empei_i_buffer_t *b,
                                                              empei_i_handle_t *h,
                                                              UINT32  N )
{
    UINT32 reg_value;

    reg_value = empei_i_reg_read( b,
                                  h,
                                  MEM_TYPE_CONFIG,
                                  PMC_EMPEI120_I_REG_EXT_PMON_CONFIG(N));

    IOLOG( "%s -> 0x%08x; N=%d", "empei_i_reg_EXT_PMON_CONFIG_array_read", reg_value, N);
    return reg_value;
}

/**
 * accessor functions for register PMC_EMPEI120_I_REG_SYS_MAP_TBL
 *
 * Register: System Channel to Priority Mapper
 * Offset: (0x00000700 + (N) * 4) SYS_MAP_TBL
 *
 * bits 7:0   default 0x00 SYS_MAP_TBL
 *
 * bits 17:16 default 00   SYS_ZONE_THRESH
 */

#ifndef empei_i_reg_SYS_MAP_TBL_array_write
#define empei_i_reg_SYS_MAP_TBL_array_write( b, h, N, value ) \
       _empei_i_reg_SYS_MAP_TBL_array_write( LOG_CALLER b, h, N, value )
#endif
static INLINE void _empei_i_reg_SYS_MAP_TBL_array_write( LOG_CALLER_DEFN
                                                         empei_i_buffer_t *b,
                                                         empei_i_handle_t *h,
                                                         UINT32  N,
                                                         UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "empei_i_reg_SYS_MAP_TBL_array_write", value );
    empei_i_reg_write( b,
                       h,
                       MEM_TYPE_CONFIG,
                       PMC_EMPEI120_I_REG_SYS_MAP_TBL(N),
                       value);
}


#ifndef empei_i_reg_SYS_MAP_TBL_array_field_set
#define empei_i_reg_SYS_MAP_TBL_array_field_set( b, h, N, mask, ofs, value ) \
       _empei_i_reg_SYS_MAP_TBL_array_field_set( LOG_CALLER b, h, N, mask, ofs, value )
#endif
static INLINE void _empei_i_reg_SYS_MAP_TBL_array_field_set( LOG_CALLER_DEFN
                                                             empei_i_buffer_t *b,
                                                             empei_i_handle_t *h,
                                                             UINT32  N,
                                                             UINT32 mask,
                                                             UINT32 ofs,
                                                             UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "empei_i_reg_SYS_MAP_TBL_array_field_set", N, mask, ofs, value );
    empei_i_field_set( b,
                       h,
                       MEM_TYPE_CONFIG,
                       PMC_EMPEI120_I_REG_SYS_MAP_TBL(N),
                       mask,
                       PMC_EMPEI120_I_REG_SYS_MAP_TBL_UNUSED_MASK,
                       ofs,
                       value);

}


#ifndef empei_i_reg_SYS_MAP_TBL_array_read
#define empei_i_reg_SYS_MAP_TBL_array_read( b, h, N ) \
       _empei_i_reg_SYS_MAP_TBL_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _empei_i_reg_SYS_MAP_TBL_array_read( LOG_CALLER_DEFN
                                                          empei_i_buffer_t *b,
                                                          empei_i_handle_t *h,
                                                          UINT32  N )
{
    UINT32 reg_value;

    reg_value = empei_i_reg_read( b,
                                  h,
                                  MEM_TYPE_CONFIG,
                                  PMC_EMPEI120_I_REG_SYS_MAP_TBL(N));

    IOLOG( "%s -> 0x%08x; N=%d", "empei_i_reg_SYS_MAP_TBL_array_read", reg_value, N);
    return reg_value;
}

/**
 * accessor functions for register PMC_EMPEI120_I_REG_UPD_LSC
 *
 * Register: Update Link Scheduler Configuration
 * Offset: 0x00000090 UPD_LSC
 *
 * bits 0 default 0 EXTRACT_LS_UPDATE
 *
 * bits 1 default 0 INTL_LS_UPDATE
 */

#ifndef empei_i_reg_UPD_LSC_write
#define empei_i_reg_UPD_LSC_write( b, h, value ) \
       _empei_i_reg_UPD_LSC_write( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_reg_UPD_LSC_write( LOG_CALLER_DEFN
                                               empei_i_buffer_t *b,
                                               empei_i_handle_t *h,
                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "empei_i_reg_UPD_LSC_write", value );
    empei_i_reg_write( b,
                       h,
                       MEM_TYPE_STATUS,
                       PMC_EMPEI120_I_REG_UPD_LSC,
                       value);
}


#ifndef empei_i_reg_UPD_LSC_field_set
#define empei_i_reg_UPD_LSC_field_set( b, h, mask, ofs, value ) \
       _empei_i_reg_UPD_LSC_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _empei_i_reg_UPD_LSC_field_set( LOG_CALLER_DEFN
                                                   empei_i_buffer_t *b,
                                                   empei_i_handle_t *h,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "empei_i_reg_UPD_LSC_field_set", mask, ofs, value );
    empei_i_field_set( b,
                       h,
                       MEM_TYPE_STATUS,
                       PMC_EMPEI120_I_REG_UPD_LSC,
                       mask,
                       PMC_EMPEI120_I_REG_UPD_LSC_UNUSED_MASK,
                       ofs,
                       value);

}


#ifndef empei_i_reg_UPD_LSC_read
#define empei_i_reg_UPD_LSC_read( b, h ) \
       _empei_i_reg_UPD_LSC_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_reg_UPD_LSC_read( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 reg_value;

    reg_value = empei_i_reg_read( b,
                                  h,
                                  MEM_TYPE_STATUS,
                                  PMC_EMPEI120_I_REG_UPD_LSC);

    IOLOG( "%s -> 0x%08x;", "empei_i_reg_UPD_LSC_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_EMPEI120_I_REG_PMON_CNTR_CLR
 *
 * Register: PMON Counter Clear
 * Offset: 0x000000a0 PMON_CNTR_CLR
 *
 * bits 0 default 0 PMON_CNT_CLR
 */

#ifndef empei_i_reg_PMON_CNTR_CLR_write
#define empei_i_reg_PMON_CNTR_CLR_write( b, h, value ) \
       _empei_i_reg_PMON_CNTR_CLR_write( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_reg_PMON_CNTR_CLR_write( LOG_CALLER_DEFN
                                                     empei_i_buffer_t *b,
                                                     empei_i_handle_t *h,
                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "empei_i_reg_PMON_CNTR_CLR_write", value );
    empei_i_reg_write( b,
                       h,
                       MEM_TYPE_STATUS,
                       PMC_EMPEI120_I_REG_PMON_CNTR_CLR,
                       value);
}


#ifndef empei_i_reg_PMON_CNTR_CLR_field_set
#define empei_i_reg_PMON_CNTR_CLR_field_set( b, h, mask, ofs, value ) \
       _empei_i_reg_PMON_CNTR_CLR_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _empei_i_reg_PMON_CNTR_CLR_field_set( LOG_CALLER_DEFN
                                                         empei_i_buffer_t *b,
                                                         empei_i_handle_t *h,
                                                         UINT32 mask,
                                                         UINT32 ofs,
                                                         UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "empei_i_reg_PMON_CNTR_CLR_field_set", mask, ofs, value );
    empei_i_field_set( b,
                       h,
                       MEM_TYPE_STATUS,
                       PMC_EMPEI120_I_REG_PMON_CNTR_CLR,
                       mask,
                       PMC_EMPEI120_I_REG_PMON_CNTR_CLR_UNUSED_MASK,
                       ofs,
                       value);

}


#ifndef empei_i_reg_PMON_CNTR_CLR_read
#define empei_i_reg_PMON_CNTR_CLR_read( b, h ) \
       _empei_i_reg_PMON_CNTR_CLR_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_reg_PMON_CNTR_CLR_read( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 reg_value;

    reg_value = empei_i_reg_read( b,
                                  h,
                                  MEM_TYPE_STATUS,
                                  PMC_EMPEI120_I_REG_PMON_CNTR_CLR);

    IOLOG( "%s -> 0x%08x;", "empei_i_reg_PMON_CNTR_CLR_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_EMPEI120_I_REG_LINK_RESET
 *
 * Register: Link Reset Register
 * Offset: 0x000000f8 LINK_RESET
 *
 * bits 11:0 default 0x000 LINK_RESET
 */

#ifndef empei_i_reg_LINK_RESET_write
#define empei_i_reg_LINK_RESET_write( b, h, value ) \
       _empei_i_reg_LINK_RESET_write( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_reg_LINK_RESET_write( LOG_CALLER_DEFN
                                                  empei_i_buffer_t *b,
                                                  empei_i_handle_t *h,
                                                  UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "empei_i_reg_LINK_RESET_write", value );
    empei_i_reg_write( b,
                       h,
                       MEM_TYPE_STATUS,
                       PMC_EMPEI120_I_REG_LINK_RESET,
                       value);
}


#ifndef empei_i_reg_LINK_RESET_field_set
#define empei_i_reg_LINK_RESET_field_set( b, h, mask, ofs, value ) \
       _empei_i_reg_LINK_RESET_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _empei_i_reg_LINK_RESET_field_set( LOG_CALLER_DEFN
                                                      empei_i_buffer_t *b,
                                                      empei_i_handle_t *h,
                                                      UINT32 mask,
                                                      UINT32 ofs,
                                                      UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "empei_i_reg_LINK_RESET_field_set", mask, ofs, value );
    empei_i_field_set( b,
                       h,
                       MEM_TYPE_STATUS,
                       PMC_EMPEI120_I_REG_LINK_RESET,
                       mask,
                       PMC_EMPEI120_I_REG_LINK_RESET_UNUSED_MASK,
                       ofs,
                       value);

}


#ifndef empei_i_reg_LINK_RESET_read
#define empei_i_reg_LINK_RESET_read( b, h ) \
       _empei_i_reg_LINK_RESET_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_reg_LINK_RESET_read( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 reg_value;

    reg_value = empei_i_reg_read( b,
                                  h,
                                  MEM_TYPE_STATUS,
                                  PMC_EMPEI120_I_REG_LINK_RESET);

    IOLOG( "%s -> 0x%08x;", "empei_i_reg_LINK_RESET_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_EMPEI120_I_REG_INS_EXT_OF_INT_EN
 *
 * Register: Insert and Extract Queue Overflow Enable Register
 * Offset: 0x00000038 INS_EXT_OF_INT_EN
 *
 * bits 11:0  default 0x000 INS_Q_OVERFLOW_INT_E
 *
 * bits 23:12 default 0x000 EXT_Q_OVERFLOW_INT_E
 */

#ifndef empei_i_reg_INS_EXT_OF_INT_EN_write
#define empei_i_reg_INS_EXT_OF_INT_EN_write( b, h, value ) \
       _empei_i_reg_INS_EXT_OF_INT_EN_write( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_reg_INS_EXT_OF_INT_EN_write( LOG_CALLER_DEFN
                                                         empei_i_buffer_t *b,
                                                         empei_i_handle_t *h,
                                                         UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "empei_i_reg_INS_EXT_OF_INT_EN_write", value );
    empei_i_reg_write( b,
                       h,
                       MEM_TYPE_STATUS,
                       PMC_EMPEI120_I_REG_INS_EXT_OF_INT_EN,
                       value);
}


#ifndef empei_i_reg_INS_EXT_OF_INT_EN_field_set
#define empei_i_reg_INS_EXT_OF_INT_EN_field_set( b, h, mask, ofs, value ) \
       _empei_i_reg_INS_EXT_OF_INT_EN_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _empei_i_reg_INS_EXT_OF_INT_EN_field_set( LOG_CALLER_DEFN
                                                             empei_i_buffer_t *b,
                                                             empei_i_handle_t *h,
                                                             UINT32 mask,
                                                             UINT32 ofs,
                                                             UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "empei_i_reg_INS_EXT_OF_INT_EN_field_set", mask, ofs, value );
    empei_i_field_set( b,
                       h,
                       MEM_TYPE_STATUS,
                       PMC_EMPEI120_I_REG_INS_EXT_OF_INT_EN,
                       mask,
                       PMC_EMPEI120_I_REG_INS_EXT_OF_INT_EN_UNUSED_MASK,
                       ofs,
                       value);

}


#ifndef empei_i_reg_INS_EXT_OF_INT_EN_read
#define empei_i_reg_INS_EXT_OF_INT_EN_read( b, h ) \
       _empei_i_reg_INS_EXT_OF_INT_EN_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_reg_INS_EXT_OF_INT_EN_read( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 reg_value;

    reg_value = empei_i_reg_read( b,
                                  h,
                                  MEM_TYPE_STATUS,
                                  PMC_EMPEI120_I_REG_INS_EXT_OF_INT_EN);

    IOLOG( "%s -> 0x%08x;", "empei_i_reg_INS_EXT_OF_INT_EN_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT_EN
 *
 * Register: System Data and Internal Queue Overflow Enable Register
 * Offset: 0x0000003c SYS_INTL_OF_INT_EN
 *
 * bits 11:0  default 0x000 SYS_Q_OVERFLOW_INT_E
 *
 * bits 23:12 default 0x000 INTL_Q_OVERFLOW_INT_E
 */

#ifndef empei_i_reg_SYS_INTL_OF_INT_EN_write
#define empei_i_reg_SYS_INTL_OF_INT_EN_write( b, h, value ) \
       _empei_i_reg_SYS_INTL_OF_INT_EN_write( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_reg_SYS_INTL_OF_INT_EN_write( LOG_CALLER_DEFN
                                                          empei_i_buffer_t *b,
                                                          empei_i_handle_t *h,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "empei_i_reg_SYS_INTL_OF_INT_EN_write", value );
    empei_i_reg_write( b,
                       h,
                       MEM_TYPE_STATUS,
                       PMC_EMPEI120_I_REG_SYS_INTL_OF_INT_EN,
                       value);
}


#ifndef empei_i_reg_SYS_INTL_OF_INT_EN_field_set
#define empei_i_reg_SYS_INTL_OF_INT_EN_field_set( b, h, mask, ofs, value ) \
       _empei_i_reg_SYS_INTL_OF_INT_EN_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _empei_i_reg_SYS_INTL_OF_INT_EN_field_set( LOG_CALLER_DEFN
                                                              empei_i_buffer_t *b,
                                                              empei_i_handle_t *h,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "empei_i_reg_SYS_INTL_OF_INT_EN_field_set", mask, ofs, value );
    empei_i_field_set( b,
                       h,
                       MEM_TYPE_STATUS,
                       PMC_EMPEI120_I_REG_SYS_INTL_OF_INT_EN,
                       mask,
                       PMC_EMPEI120_I_REG_SYS_INTL_OF_INT_EN_UNUSED_MASK,
                       ofs,
                       value);

}


#ifndef empei_i_reg_SYS_INTL_OF_INT_EN_read
#define empei_i_reg_SYS_INTL_OF_INT_EN_read( b, h ) \
       _empei_i_reg_SYS_INTL_OF_INT_EN_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_reg_SYS_INTL_OF_INT_EN_read( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 reg_value;

    reg_value = empei_i_reg_read( b,
                                  h,
                                  MEM_TYPE_STATUS,
                                  PMC_EMPEI120_I_REG_SYS_INTL_OF_INT_EN);

    IOLOG( "%s -> 0x%08x;", "empei_i_reg_SYS_INTL_OF_INT_EN_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_EMPEI120_I_REG_SYS_INS_UR_INT_EN
 *
 * Register: System Data and Insert Queue underrun Enable Register
 * Offset: 0x00000040 SYS_INS_UR_INT_EN
 *
 * bits 11:0  default 0x000 SYS_Q_UNDERRUN_INT_E
 *
 * bits 23:12 default 0x000 INS_Q_UNDERRUN_INT_E
 */

#ifndef empei_i_reg_SYS_INS_UR_INT_EN_write
#define empei_i_reg_SYS_INS_UR_INT_EN_write( b, h, value ) \
       _empei_i_reg_SYS_INS_UR_INT_EN_write( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_reg_SYS_INS_UR_INT_EN_write( LOG_CALLER_DEFN
                                                         empei_i_buffer_t *b,
                                                         empei_i_handle_t *h,
                                                         UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "empei_i_reg_SYS_INS_UR_INT_EN_write", value );
    empei_i_reg_write( b,
                       h,
                       MEM_TYPE_STATUS,
                       PMC_EMPEI120_I_REG_SYS_INS_UR_INT_EN,
                       value);
}


#ifndef empei_i_reg_SYS_INS_UR_INT_EN_field_set
#define empei_i_reg_SYS_INS_UR_INT_EN_field_set( b, h, mask, ofs, value ) \
       _empei_i_reg_SYS_INS_UR_INT_EN_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _empei_i_reg_SYS_INS_UR_INT_EN_field_set( LOG_CALLER_DEFN
                                                             empei_i_buffer_t *b,
                                                             empei_i_handle_t *h,
                                                             UINT32 mask,
                                                             UINT32 ofs,
                                                             UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "empei_i_reg_SYS_INS_UR_INT_EN_field_set", mask, ofs, value );
    empei_i_field_set( b,
                       h,
                       MEM_TYPE_STATUS,
                       PMC_EMPEI120_I_REG_SYS_INS_UR_INT_EN,
                       mask,
                       PMC_EMPEI120_I_REG_SYS_INS_UR_INT_EN_UNUSED_MASK,
                       ofs,
                       value);

}


#ifndef empei_i_reg_SYS_INS_UR_INT_EN_read
#define empei_i_reg_SYS_INS_UR_INT_EN_read( b, h ) \
       _empei_i_reg_SYS_INS_UR_INT_EN_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_reg_SYS_INS_UR_INT_EN_read( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 reg_value;

    reg_value = empei_i_reg_read( b,
                                  h,
                                  MEM_TYPE_STATUS,
                                  PMC_EMPEI120_I_REG_SYS_INS_UR_INT_EN);

    IOLOG( "%s -> 0x%08x;", "empei_i_reg_SYS_INS_UR_INT_EN_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN
 *
 * Register: System Data and Insert Queue Resynchronization Enable Register
 * Offset: 0x00000044 SYS_INS_Q_RSYNC_INT_EN
 *
 * bits 11:0  default 0x000 SYS_Q_RESYNC_INT_E
 *
 * bits 23:12 default 0x000 INS_Q_RESYNC_INT_E
 */

#ifndef empei_i_reg_SYS_INS_Q_RSYNC_INT_EN_write
#define empei_i_reg_SYS_INS_Q_RSYNC_INT_EN_write( b, h, value ) \
       _empei_i_reg_SYS_INS_Q_RSYNC_INT_EN_write( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_reg_SYS_INS_Q_RSYNC_INT_EN_write( LOG_CALLER_DEFN
                                                              empei_i_buffer_t *b,
                                                              empei_i_handle_t *h,
                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "empei_i_reg_SYS_INS_Q_RSYNC_INT_EN_write", value );
    empei_i_reg_write( b,
                       h,
                       MEM_TYPE_STATUS,
                       PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN,
                       value);
}


#ifndef empei_i_reg_SYS_INS_Q_RSYNC_INT_EN_field_set
#define empei_i_reg_SYS_INS_Q_RSYNC_INT_EN_field_set( b, h, mask, ofs, value ) \
       _empei_i_reg_SYS_INS_Q_RSYNC_INT_EN_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _empei_i_reg_SYS_INS_Q_RSYNC_INT_EN_field_set( LOG_CALLER_DEFN
                                                                  empei_i_buffer_t *b,
                                                                  empei_i_handle_t *h,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "empei_i_reg_SYS_INS_Q_RSYNC_INT_EN_field_set", mask, ofs, value );
    empei_i_field_set( b,
                       h,
                       MEM_TYPE_STATUS,
                       PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN,
                       mask,
                       PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN_UNUSED_MASK,
                       ofs,
                       value);

}


#ifndef empei_i_reg_SYS_INS_Q_RSYNC_INT_EN_read
#define empei_i_reg_SYS_INS_Q_RSYNC_INT_EN_read( b, h ) \
       _empei_i_reg_SYS_INS_Q_RSYNC_INT_EN_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_reg_SYS_INS_Q_RSYNC_INT_EN_read( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 reg_value;

    reg_value = empei_i_reg_read( b,
                                  h,
                                  MEM_TYPE_STATUS,
                                  PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN);

    IOLOG( "%s -> 0x%08x;", "empei_i_reg_SYS_INS_Q_RSYNC_INT_EN_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_EMPEI120_I_REG_EXT_Q_RSYNC_INT_EN
 *
 * Register: Extract Queue Resynchronization Enable Register
 * Offset: 0x00000048 EXT_Q_RSYNC_INT_EN
 *
 * bits 11:0 default 0x000 EXT_Q_RESYNC_INT_E
 */

#ifndef empei_i_reg_EXT_Q_RSYNC_INT_EN_write
#define empei_i_reg_EXT_Q_RSYNC_INT_EN_write( b, h, value ) \
       _empei_i_reg_EXT_Q_RSYNC_INT_EN_write( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_reg_EXT_Q_RSYNC_INT_EN_write( LOG_CALLER_DEFN
                                                          empei_i_buffer_t *b,
                                                          empei_i_handle_t *h,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "empei_i_reg_EXT_Q_RSYNC_INT_EN_write", value );
    empei_i_reg_write( b,
                       h,
                       MEM_TYPE_STATUS,
                       PMC_EMPEI120_I_REG_EXT_Q_RSYNC_INT_EN,
                       value);
}


#ifndef empei_i_reg_EXT_Q_RSYNC_INT_EN_field_set
#define empei_i_reg_EXT_Q_RSYNC_INT_EN_field_set( b, h, mask, ofs, value ) \
       _empei_i_reg_EXT_Q_RSYNC_INT_EN_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _empei_i_reg_EXT_Q_RSYNC_INT_EN_field_set( LOG_CALLER_DEFN
                                                              empei_i_buffer_t *b,
                                                              empei_i_handle_t *h,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "empei_i_reg_EXT_Q_RSYNC_INT_EN_field_set", mask, ofs, value );
    empei_i_field_set( b,
                       h,
                       MEM_TYPE_STATUS,
                       PMC_EMPEI120_I_REG_EXT_Q_RSYNC_INT_EN,
                       mask,
                       PMC_EMPEI120_I_REG_EXT_Q_RSYNC_INT_EN_UNUSED_MASK,
                       ofs,
                       value);

}


#ifndef empei_i_reg_EXT_Q_RSYNC_INT_EN_read
#define empei_i_reg_EXT_Q_RSYNC_INT_EN_read( b, h ) \
       _empei_i_reg_EXT_Q_RSYNC_INT_EN_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_reg_EXT_Q_RSYNC_INT_EN_read( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 reg_value;

    reg_value = empei_i_reg_read( b,
                                  h,
                                  MEM_TYPE_STATUS,
                                  PMC_EMPEI120_I_REG_EXT_Q_RSYNC_INT_EN);

    IOLOG( "%s -> 0x%08x;", "empei_i_reg_EXT_Q_RSYNC_INT_EN_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_EMPEI120_I_REG_INS_EXT_OF_INT
 *
 * Register: Insert and Extract Queue Overflow Interrupt Register
 * Offset: 0x00000018 INS_EXT_OF_INT
 *
 * bits 11:0  default 0x000 INS_Q_OVERFLOW_INT_I
 * attribute: int_edge=level
 * attribute: clk=cpb_sys_clk
 *
 * bits 23:12 default 0x000 EXT_Q_OVERFLOW_INT_I
 * attribute: int_edge=level
 * attribute: clk=cpb_sys_clk
 */

#ifndef empei_i_reg_INS_EXT_OF_INT_write
#define empei_i_reg_INS_EXT_OF_INT_write( b, h, value ) \
       _empei_i_reg_INS_EXT_OF_INT_write( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_reg_INS_EXT_OF_INT_write( LOG_CALLER_DEFN
                                                      empei_i_buffer_t *b,
                                                      empei_i_handle_t *h,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "empei_i_reg_INS_EXT_OF_INT_write", value );
    empei_i_reg_write( b,
                       h,
                       MEM_TYPE_STATUS,
                       PMC_EMPEI120_I_REG_INS_EXT_OF_INT,
                       value);
}


#ifndef empei_i_reg_INS_EXT_OF_INT_action_on_write_field_set
#define empei_i_reg_INS_EXT_OF_INT_action_on_write_field_set( b, h, mask, ofs, value ) \
       _empei_i_reg_INS_EXT_OF_INT_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _empei_i_reg_INS_EXT_OF_INT_action_on_write_field_set( LOG_CALLER_DEFN
                                                                          empei_i_buffer_t *b,
                                                                          empei_i_handle_t *h,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "empei_i_reg_INS_EXT_OF_INT_action_on_write_field_set", mask, ofs, value );
    empei_i_action_on_write_field_set( b,
                                       h,
                                       MEM_TYPE_STATUS,
                                       PMC_EMPEI120_I_REG_INS_EXT_OF_INT,
                                       mask,
                                       ofs,
                                       value);

}


#ifndef empei_i_reg_INS_EXT_OF_INT_read
#define empei_i_reg_INS_EXT_OF_INT_read( b, h ) \
       _empei_i_reg_INS_EXT_OF_INT_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_reg_INS_EXT_OF_INT_read( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 reg_value;

    reg_value = empei_i_reg_read( b,
                                  h,
                                  MEM_TYPE_STATUS,
                                  PMC_EMPEI120_I_REG_INS_EXT_OF_INT);

    IOLOG( "%s -> 0x%08x;", "empei_i_reg_INS_EXT_OF_INT_read", reg_value);
    return reg_value;
}

#ifndef empei_i_reg_INS_EXT_OF_INT_poll_bit
#define empei_i_reg_INS_EXT_OF_INT_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_reg_INS_EXT_OF_INT_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_reg_INS_EXT_OF_INT_poll_bit( LOG_CALLER_DEFN
                                                              empei_i_buffer_t *b,
                                                              empei_i_handle_t *h,
                                                              UINT32 mask,
                                                              UINT32 value,
                                                              UINT32 max_count,
                                                              UINT32 *num_failed_polls,
                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "empei_i_reg_INS_EXT_OF_INT_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return empei_i_poll_bit( b,
                             h,
                             MEM_TYPE_STATUS,
                             PMC_EMPEI120_I_REG_INS_EXT_OF_INT,
                             mask,
                             value,
                             max_count,
                             num_failed_polls,
                             delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT
 *
 * Register: System Data and Internal Queue Overflow Interrupt Register
 * Offset: 0x0000001c SYS_INTL_OF_INT
 *
 * bits 11:0  default 0x000 SYS_Q_OVERFLOW_INT_I
 * attribute: int_edge=level
 * attribute: clk=cpb_sys_clk
 *
 * bits 23:12 default 0x000 INTL_Q_OVERFLOW_INT_I
 * attribute: int_edge=level
 * attribute: clk=cpb_sys_clk
 */

#ifndef empei_i_reg_SYS_INTL_OF_INT_write
#define empei_i_reg_SYS_INTL_OF_INT_write( b, h, value ) \
       _empei_i_reg_SYS_INTL_OF_INT_write( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_reg_SYS_INTL_OF_INT_write( LOG_CALLER_DEFN
                                                       empei_i_buffer_t *b,
                                                       empei_i_handle_t *h,
                                                       UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "empei_i_reg_SYS_INTL_OF_INT_write", value );
    empei_i_reg_write( b,
                       h,
                       MEM_TYPE_STATUS,
                       PMC_EMPEI120_I_REG_SYS_INTL_OF_INT,
                       value);
}


#ifndef empei_i_reg_SYS_INTL_OF_INT_action_on_write_field_set
#define empei_i_reg_SYS_INTL_OF_INT_action_on_write_field_set( b, h, mask, ofs, value ) \
       _empei_i_reg_SYS_INTL_OF_INT_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _empei_i_reg_SYS_INTL_OF_INT_action_on_write_field_set( LOG_CALLER_DEFN
                                                                           empei_i_buffer_t *b,
                                                                           empei_i_handle_t *h,
                                                                           UINT32 mask,
                                                                           UINT32 ofs,
                                                                           UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "empei_i_reg_SYS_INTL_OF_INT_action_on_write_field_set", mask, ofs, value );
    empei_i_action_on_write_field_set( b,
                                       h,
                                       MEM_TYPE_STATUS,
                                       PMC_EMPEI120_I_REG_SYS_INTL_OF_INT,
                                       mask,
                                       ofs,
                                       value);

}


#ifndef empei_i_reg_SYS_INTL_OF_INT_read
#define empei_i_reg_SYS_INTL_OF_INT_read( b, h ) \
       _empei_i_reg_SYS_INTL_OF_INT_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_reg_SYS_INTL_OF_INT_read( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 reg_value;

    reg_value = empei_i_reg_read( b,
                                  h,
                                  MEM_TYPE_STATUS,
                                  PMC_EMPEI120_I_REG_SYS_INTL_OF_INT);

    IOLOG( "%s -> 0x%08x;", "empei_i_reg_SYS_INTL_OF_INT_read", reg_value);
    return reg_value;
}

#ifndef empei_i_reg_SYS_INTL_OF_INT_poll_bit
#define empei_i_reg_SYS_INTL_OF_INT_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_reg_SYS_INTL_OF_INT_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_reg_SYS_INTL_OF_INT_poll_bit( LOG_CALLER_DEFN
                                                               empei_i_buffer_t *b,
                                                               empei_i_handle_t *h,
                                                               UINT32 mask,
                                                               UINT32 value,
                                                               UINT32 max_count,
                                                               UINT32 *num_failed_polls,
                                                               UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "empei_i_reg_SYS_INTL_OF_INT_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return empei_i_poll_bit( b,
                             h,
                             MEM_TYPE_STATUS,
                             PMC_EMPEI120_I_REG_SYS_INTL_OF_INT,
                             mask,
                             value,
                             max_count,
                             num_failed_polls,
                             delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_EMPEI120_I_REG_SYS_INS_UR_INT
 *
 * Register: System Data and Insert Queue Underrun Interrupt Register
 * Offset: 0x00000020 SYS_INS_UR_INT
 *
 * bits 11:0  default 0x000 SYS_Q_UNDERRUN_INT_I
 * attribute: int_edge=level
 * attribute: clk=cpb_sys_clk
 *
 * bits 23:12 default 0x000 INS_Q_UNDERRUN_INT_I
 * attribute: int_edge=level
 * attribute: clk=cpb_sys_clk
 */

#ifndef empei_i_reg_SYS_INS_UR_INT_write
#define empei_i_reg_SYS_INS_UR_INT_write( b, h, value ) \
       _empei_i_reg_SYS_INS_UR_INT_write( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_reg_SYS_INS_UR_INT_write( LOG_CALLER_DEFN
                                                      empei_i_buffer_t *b,
                                                      empei_i_handle_t *h,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "empei_i_reg_SYS_INS_UR_INT_write", value );
    empei_i_reg_write( b,
                       h,
                       MEM_TYPE_STATUS,
                       PMC_EMPEI120_I_REG_SYS_INS_UR_INT,
                       value);
}


#ifndef empei_i_reg_SYS_INS_UR_INT_action_on_write_field_set
#define empei_i_reg_SYS_INS_UR_INT_action_on_write_field_set( b, h, mask, ofs, value ) \
       _empei_i_reg_SYS_INS_UR_INT_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _empei_i_reg_SYS_INS_UR_INT_action_on_write_field_set( LOG_CALLER_DEFN
                                                                          empei_i_buffer_t *b,
                                                                          empei_i_handle_t *h,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "empei_i_reg_SYS_INS_UR_INT_action_on_write_field_set", mask, ofs, value );
    empei_i_action_on_write_field_set( b,
                                       h,
                                       MEM_TYPE_STATUS,
                                       PMC_EMPEI120_I_REG_SYS_INS_UR_INT,
                                       mask,
                                       ofs,
                                       value);

}


#ifndef empei_i_reg_SYS_INS_UR_INT_read
#define empei_i_reg_SYS_INS_UR_INT_read( b, h ) \
       _empei_i_reg_SYS_INS_UR_INT_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_reg_SYS_INS_UR_INT_read( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 reg_value;

    reg_value = empei_i_reg_read( b,
                                  h,
                                  MEM_TYPE_STATUS,
                                  PMC_EMPEI120_I_REG_SYS_INS_UR_INT);

    IOLOG( "%s -> 0x%08x;", "empei_i_reg_SYS_INS_UR_INT_read", reg_value);
    return reg_value;
}

#ifndef empei_i_reg_SYS_INS_UR_INT_poll_bit
#define empei_i_reg_SYS_INS_UR_INT_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_reg_SYS_INS_UR_INT_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_reg_SYS_INS_UR_INT_poll_bit( LOG_CALLER_DEFN
                                                              empei_i_buffer_t *b,
                                                              empei_i_handle_t *h,
                                                              UINT32 mask,
                                                              UINT32 value,
                                                              UINT32 max_count,
                                                              UINT32 *num_failed_polls,
                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "empei_i_reg_SYS_INS_UR_INT_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return empei_i_poll_bit( b,
                             h,
                             MEM_TYPE_STATUS,
                             PMC_EMPEI120_I_REG_SYS_INS_UR_INT,
                             mask,
                             value,
                             max_count,
                             num_failed_polls,
                             delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT
 *
 * Register: System Data and Insert Queue Resynchronization Interrupt Register
 * Offset: 0x00000024 SYS_INS_Q_RSYNC_INT
 *
 * bits 11:0  default 0x000 SYS_Q_RESYNC_INT_I
 * attribute: int_edge=level
 * attribute: clk=cpb_sys_clk
 *
 * bits 23:12 default 0x000 INS_Q_RESYNC_INT_I
 * attribute: int_edge=level
 * attribute: clk=cpb_sys_clk
 */

#ifndef empei_i_reg_SYS_INS_Q_RSYNC_INT_write
#define empei_i_reg_SYS_INS_Q_RSYNC_INT_write( b, h, value ) \
       _empei_i_reg_SYS_INS_Q_RSYNC_INT_write( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_reg_SYS_INS_Q_RSYNC_INT_write( LOG_CALLER_DEFN
                                                           empei_i_buffer_t *b,
                                                           empei_i_handle_t *h,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "empei_i_reg_SYS_INS_Q_RSYNC_INT_write", value );
    empei_i_reg_write( b,
                       h,
                       MEM_TYPE_STATUS,
                       PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT,
                       value);
}


#ifndef empei_i_reg_SYS_INS_Q_RSYNC_INT_action_on_write_field_set
#define empei_i_reg_SYS_INS_Q_RSYNC_INT_action_on_write_field_set( b, h, mask, ofs, value ) \
       _empei_i_reg_SYS_INS_Q_RSYNC_INT_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _empei_i_reg_SYS_INS_Q_RSYNC_INT_action_on_write_field_set( LOG_CALLER_DEFN
                                                                               empei_i_buffer_t *b,
                                                                               empei_i_handle_t *h,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "empei_i_reg_SYS_INS_Q_RSYNC_INT_action_on_write_field_set", mask, ofs, value );
    empei_i_action_on_write_field_set( b,
                                       h,
                                       MEM_TYPE_STATUS,
                                       PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT,
                                       mask,
                                       ofs,
                                       value);

}


#ifndef empei_i_reg_SYS_INS_Q_RSYNC_INT_read
#define empei_i_reg_SYS_INS_Q_RSYNC_INT_read( b, h ) \
       _empei_i_reg_SYS_INS_Q_RSYNC_INT_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_reg_SYS_INS_Q_RSYNC_INT_read( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 reg_value;

    reg_value = empei_i_reg_read( b,
                                  h,
                                  MEM_TYPE_STATUS,
                                  PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT);

    IOLOG( "%s -> 0x%08x;", "empei_i_reg_SYS_INS_Q_RSYNC_INT_read", reg_value);
    return reg_value;
}

#ifndef empei_i_reg_SYS_INS_Q_RSYNC_INT_poll_bit
#define empei_i_reg_SYS_INS_Q_RSYNC_INT_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_reg_SYS_INS_Q_RSYNC_INT_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_reg_SYS_INS_Q_RSYNC_INT_poll_bit( LOG_CALLER_DEFN
                                                                   empei_i_buffer_t *b,
                                                                   empei_i_handle_t *h,
                                                                   UINT32 mask,
                                                                   UINT32 value,
                                                                   UINT32 max_count,
                                                                   UINT32 *num_failed_polls,
                                                                   UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "empei_i_reg_SYS_INS_Q_RSYNC_INT_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return empei_i_poll_bit( b,
                             h,
                             MEM_TYPE_STATUS,
                             PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT,
                             mask,
                             value,
                             max_count,
                             num_failed_polls,
                             delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_EMPEI120_I_REG_EXT_Q_RSYNC_INT
 *
 * Register: Extract Queue Resynchronization Interrupt Register
 * Offset: 0x00000028 EXT_Q_RSYNC_INT
 *
 * bits 11:0 default 0x000 EXT_Q_RESYNC_INT_I
 * attribute: int_edge=level
 * attribute: clk=cpb_sys_clk
 */

#ifndef empei_i_reg_EXT_Q_RSYNC_INT_write
#define empei_i_reg_EXT_Q_RSYNC_INT_write( b, h, value ) \
       _empei_i_reg_EXT_Q_RSYNC_INT_write( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_reg_EXT_Q_RSYNC_INT_write( LOG_CALLER_DEFN
                                                       empei_i_buffer_t *b,
                                                       empei_i_handle_t *h,
                                                       UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "empei_i_reg_EXT_Q_RSYNC_INT_write", value );
    empei_i_reg_write( b,
                       h,
                       MEM_TYPE_STATUS,
                       PMC_EMPEI120_I_REG_EXT_Q_RSYNC_INT,
                       value);
}


#ifndef empei_i_reg_EXT_Q_RSYNC_INT_action_on_write_field_set
#define empei_i_reg_EXT_Q_RSYNC_INT_action_on_write_field_set( b, h, mask, ofs, value ) \
       _empei_i_reg_EXT_Q_RSYNC_INT_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _empei_i_reg_EXT_Q_RSYNC_INT_action_on_write_field_set( LOG_CALLER_DEFN
                                                                           empei_i_buffer_t *b,
                                                                           empei_i_handle_t *h,
                                                                           UINT32 mask,
                                                                           UINT32 ofs,
                                                                           UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "empei_i_reg_EXT_Q_RSYNC_INT_action_on_write_field_set", mask, ofs, value );
    empei_i_action_on_write_field_set( b,
                                       h,
                                       MEM_TYPE_STATUS,
                                       PMC_EMPEI120_I_REG_EXT_Q_RSYNC_INT,
                                       mask,
                                       ofs,
                                       value);

}


#ifndef empei_i_reg_EXT_Q_RSYNC_INT_read
#define empei_i_reg_EXT_Q_RSYNC_INT_read( b, h ) \
       _empei_i_reg_EXT_Q_RSYNC_INT_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_reg_EXT_Q_RSYNC_INT_read( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 reg_value;

    reg_value = empei_i_reg_read( b,
                                  h,
                                  MEM_TYPE_STATUS,
                                  PMC_EMPEI120_I_REG_EXT_Q_RSYNC_INT);

    IOLOG( "%s -> 0x%08x;", "empei_i_reg_EXT_Q_RSYNC_INT_read", reg_value);
    return reg_value;
}

#ifndef empei_i_reg_EXT_Q_RSYNC_INT_poll_bit
#define empei_i_reg_EXT_Q_RSYNC_INT_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_reg_EXT_Q_RSYNC_INT_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_reg_EXT_Q_RSYNC_INT_poll_bit( LOG_CALLER_DEFN
                                                               empei_i_buffer_t *b,
                                                               empei_i_handle_t *h,
                                                               UINT32 mask,
                                                               UINT32 value,
                                                               UINT32 max_count,
                                                               UINT32 *num_failed_polls,
                                                               UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "empei_i_reg_EXT_Q_RSYNC_INT_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return empei_i_poll_bit( b,
                             h,
                             MEM_TYPE_STATUS,
                             PMC_EMPEI120_I_REG_EXT_Q_RSYNC_INT,
                             mask,
                             value,
                             max_count,
                             num_failed_polls,
                             delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_EMPEI120_I_REG_INS_EXT_OF_INT_VAL
 *
 * Register: Insert and Extract Overflow Interrupt Value Register
 * Offset: 0x00000058 INS_EXT_OF_INT_VAL
 *
 * bits 11:0  default 0x000 INS_Q_OVERFLOW_INT_V
 *
 * bits 23:12 default 0x000 EXT_Q_OVERFLOW_INT_V
 */

#ifndef empei_i_reg_INS_EXT_OF_INT_VAL_read
#define empei_i_reg_INS_EXT_OF_INT_VAL_read( b, h ) \
       _empei_i_reg_INS_EXT_OF_INT_VAL_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_reg_INS_EXT_OF_INT_VAL_read( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 reg_value;

    reg_value = empei_i_reg_read( b,
                                  h,
                                  MEM_TYPE_STATUS,
                                  PMC_EMPEI120_I_REG_INS_EXT_OF_INT_VAL);

    IOLOG( "%s -> 0x%08x;", "empei_i_reg_INS_EXT_OF_INT_VAL_read", reg_value);
    return reg_value;
}

#ifndef empei_i_reg_INS_EXT_OF_INT_VAL_poll_bit
#define empei_i_reg_INS_EXT_OF_INT_VAL_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_reg_INS_EXT_OF_INT_VAL_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_reg_INS_EXT_OF_INT_VAL_poll_bit( LOG_CALLER_DEFN
                                                                  empei_i_buffer_t *b,
                                                                  empei_i_handle_t *h,
                                                                  UINT32 mask,
                                                                  UINT32 value,
                                                                  UINT32 max_count,
                                                                  UINT32 *num_failed_polls,
                                                                  UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "empei_i_reg_INS_EXT_OF_INT_VAL_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return empei_i_poll_bit( b,
                             h,
                             MEM_TYPE_STATUS,
                             PMC_EMPEI120_I_REG_INS_EXT_OF_INT_VAL,
                             mask,
                             value,
                             max_count,
                             num_failed_polls,
                             delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT_VAL
 *
 * Register: System Data and Internal Queue Overflow Interrupt Value Register
 * Offset: 0x0000005c SYS_INTL_OF_INT_VAL
 *
 * bits 11:0  default 0x000 SYS_Q_OVERFLOW_INT_V
 *
 * bits 23:12 default 0x000 INTL_Q_OVERFLOW_INT_V
 */

#ifndef empei_i_reg_SYS_INTL_OF_INT_VAL_read
#define empei_i_reg_SYS_INTL_OF_INT_VAL_read( b, h ) \
       _empei_i_reg_SYS_INTL_OF_INT_VAL_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_reg_SYS_INTL_OF_INT_VAL_read( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 reg_value;

    reg_value = empei_i_reg_read( b,
                                  h,
                                  MEM_TYPE_STATUS,
                                  PMC_EMPEI120_I_REG_SYS_INTL_OF_INT_VAL);

    IOLOG( "%s -> 0x%08x;", "empei_i_reg_SYS_INTL_OF_INT_VAL_read", reg_value);
    return reg_value;
}

#ifndef empei_i_reg_SYS_INTL_OF_INT_VAL_poll_bit
#define empei_i_reg_SYS_INTL_OF_INT_VAL_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_reg_SYS_INTL_OF_INT_VAL_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_reg_SYS_INTL_OF_INT_VAL_poll_bit( LOG_CALLER_DEFN
                                                                   empei_i_buffer_t *b,
                                                                   empei_i_handle_t *h,
                                                                   UINT32 mask,
                                                                   UINT32 value,
                                                                   UINT32 max_count,
                                                                   UINT32 *num_failed_polls,
                                                                   UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "empei_i_reg_SYS_INTL_OF_INT_VAL_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return empei_i_poll_bit( b,
                             h,
                             MEM_TYPE_STATUS,
                             PMC_EMPEI120_I_REG_SYS_INTL_OF_INT_VAL,
                             mask,
                             value,
                             max_count,
                             num_failed_polls,
                             delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_EMPEI120_I_REG_SYS_INS_UR_INT_VAL
 *
 * Register: System Data and Insert Queue Underrun Interrupt Value Register
 * Offset: 0x00000060 SYS_INS_UR_INT_VAL
 *
 * bits 11:0  default 0x000 SYS_Q_UNDERRUN_INT_V
 *
 * bits 23:12 default 0x000 INS_Q_UNDERRUN_INT_V
 */

#ifndef empei_i_reg_SYS_INS_UR_INT_VAL_read
#define empei_i_reg_SYS_INS_UR_INT_VAL_read( b, h ) \
       _empei_i_reg_SYS_INS_UR_INT_VAL_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_reg_SYS_INS_UR_INT_VAL_read( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 reg_value;

    reg_value = empei_i_reg_read( b,
                                  h,
                                  MEM_TYPE_STATUS,
                                  PMC_EMPEI120_I_REG_SYS_INS_UR_INT_VAL);

    IOLOG( "%s -> 0x%08x;", "empei_i_reg_SYS_INS_UR_INT_VAL_read", reg_value);
    return reg_value;
}

#ifndef empei_i_reg_SYS_INS_UR_INT_VAL_poll_bit
#define empei_i_reg_SYS_INS_UR_INT_VAL_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_reg_SYS_INS_UR_INT_VAL_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_reg_SYS_INS_UR_INT_VAL_poll_bit( LOG_CALLER_DEFN
                                                                  empei_i_buffer_t *b,
                                                                  empei_i_handle_t *h,
                                                                  UINT32 mask,
                                                                  UINT32 value,
                                                                  UINT32 max_count,
                                                                  UINT32 *num_failed_polls,
                                                                  UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "empei_i_reg_SYS_INS_UR_INT_VAL_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return empei_i_poll_bit( b,
                             h,
                             MEM_TYPE_STATUS,
                             PMC_EMPEI120_I_REG_SYS_INS_UR_INT_VAL,
                             mask,
                             value,
                             max_count,
                             num_failed_polls,
                             delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_EMPEI120_I_REG_EXT_PMON_DRP_CNT
 *
 * Register: Extract PMON Drop Count
 * Offset: (0x00000c00 + (N) * 4) EXT_PMON_DRP_CNT
 *
 * bits 11:0 default 0x000 EXT_PMON_DRP_CNT
 */

#ifndef empei_i_reg_EXT_PMON_DRP_CNT_array_burst_read
#define empei_i_reg_EXT_PMON_DRP_CNT_array_burst_read( b, h, ofs, len, value ) \
       _empei_i_reg_EXT_PMON_DRP_CNT_array_burst_read( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _empei_i_reg_EXT_PMON_DRP_CNT_array_burst_read( LOG_CALLER_DEFN
                                                                   empei_i_buffer_t *b,
                                                                   empei_i_handle_t *h,
                                                                   UINT32 ofs,
                                                                   UINT32 len,
                                                                   UINT32 *value )
{
    if (len + ofs > 12)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "empei_i_reg_EXT_PMON_DRP_CNT_array_burst_read", ofs, len, 12 );
    empei_i_burst_read( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_EMPEI120_I_REG_EXT_PMON_DRP_CNT(ofs),
                        len,
                        value);

    IOLOG( "%s of %d words ofs=%d len=%d", "empei_i_reg_EXT_PMON_DRP_CNT_array_burst_read", 12, ofs, len);
}


#ifndef empei_i_reg_EXT_PMON_DRP_CNT_array_read
#define empei_i_reg_EXT_PMON_DRP_CNT_array_read( b, h, N ) \
       _empei_i_reg_EXT_PMON_DRP_CNT_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _empei_i_reg_EXT_PMON_DRP_CNT_array_read( LOG_CALLER_DEFN
                                                               empei_i_buffer_t *b,
                                                               empei_i_handle_t *h,
                                                               UINT32 N )
{
    UINT32 reg_value;

    reg_value = empei_i_reg_read( b,
                                  h,
                                  MEM_TYPE_STATUS,
                                  PMC_EMPEI120_I_REG_EXT_PMON_DRP_CNT(N));

    IOLOG( "%s -> 0x%08x;", "empei_i_reg_EXT_PMON_DRP_CNT_array_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_EMPEI120_I_REG_SYS_PMON_DRP_CNT
 *
 * Register: System Data PMON Drop Count
 * Offset: (0x00000d00 + (N) * 4) SYS_PMON_DRP_CNT
 *
 * bits 23:0 default 0x000000 SYS_PMON_DRP_CNT
 */

#ifndef empei_i_reg_SYS_PMON_DRP_CNT_array_burst_read
#define empei_i_reg_SYS_PMON_DRP_CNT_array_burst_read( b, h, ofs, len, value ) \
       _empei_i_reg_SYS_PMON_DRP_CNT_array_burst_read( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _empei_i_reg_SYS_PMON_DRP_CNT_array_burst_read( LOG_CALLER_DEFN
                                                                   empei_i_buffer_t *b,
                                                                   empei_i_handle_t *h,
                                                                   UINT32 ofs,
                                                                   UINT32 len,
                                                                   UINT32 *value )
{
    if (len + ofs > 12)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "empei_i_reg_SYS_PMON_DRP_CNT_array_burst_read", ofs, len, 12 );
    empei_i_burst_read( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_EMPEI120_I_REG_SYS_PMON_DRP_CNT(ofs),
                        len,
                        value);

    IOLOG( "%s of %d words ofs=%d len=%d", "empei_i_reg_SYS_PMON_DRP_CNT_array_burst_read", 12, ofs, len);
}


#ifndef empei_i_reg_SYS_PMON_DRP_CNT_array_read
#define empei_i_reg_SYS_PMON_DRP_CNT_array_read( b, h, N ) \
       _empei_i_reg_SYS_PMON_DRP_CNT_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _empei_i_reg_SYS_PMON_DRP_CNT_array_read( LOG_CALLER_DEFN
                                                               empei_i_buffer_t *b,
                                                               empei_i_handle_t *h,
                                                               UINT32 N )
{
    UINT32 reg_value;

    reg_value = empei_i_reg_read( b,
                                  h,
                                  MEM_TYPE_STATUS,
                                  PMC_EMPEI120_I_REG_SYS_PMON_DRP_CNT(N));

    IOLOG( "%s -> 0x%08x;", "empei_i_reg_SYS_PMON_DRP_CNT_array_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_EMPEI120_I_REG_INS_PMON_PKT_CNT
 *
 * Register: Insert PMON Packet Count
 * Offset: (0x00000c80 + (N) * 4) INS_PMON_PKT_CNT
 *
 * bits 19:0 default 00000000000000000000 INS_PMON_PKT_CNT
 */

#ifndef empei_i_reg_INS_PMON_PKT_CNT_array_burst_read
#define empei_i_reg_INS_PMON_PKT_CNT_array_burst_read( b, h, ofs, len, value ) \
       _empei_i_reg_INS_PMON_PKT_CNT_array_burst_read( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _empei_i_reg_INS_PMON_PKT_CNT_array_burst_read( LOG_CALLER_DEFN
                                                                   empei_i_buffer_t *b,
                                                                   empei_i_handle_t *h,
                                                                   UINT32 ofs,
                                                                   UINT32 len,
                                                                   UINT32 *value )
{
    if (len + ofs > 24)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "empei_i_reg_INS_PMON_PKT_CNT_array_burst_read", ofs, len, 24 );
    empei_i_burst_read( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_EMPEI120_I_REG_INS_PMON_PKT_CNT(ofs),
                        len,
                        value);

    IOLOG( "%s of %d words ofs=%d len=%d", "empei_i_reg_INS_PMON_PKT_CNT_array_burst_read", 24, ofs, len);
}


#ifndef empei_i_reg_INS_PMON_PKT_CNT_array_read
#define empei_i_reg_INS_PMON_PKT_CNT_array_read( b, h, N ) \
       _empei_i_reg_INS_PMON_PKT_CNT_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _empei_i_reg_INS_PMON_PKT_CNT_array_read( LOG_CALLER_DEFN
                                                               empei_i_buffer_t *b,
                                                               empei_i_handle_t *h,
                                                               UINT32 N )
{
    UINT32 reg_value;

    reg_value = empei_i_reg_read( b,
                                  h,
                                  MEM_TYPE_STATUS,
                                  PMC_EMPEI120_I_REG_INS_PMON_PKT_CNT(N));

    IOLOG( "%s -> 0x%08x;", "empei_i_reg_INS_PMON_PKT_CNT_array_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_EMPEI120_I_REG_EXT_PMON_PKT_CNT
 *
 * Register: Extract PMON Packet Count
 * Offset: (0x00000b00 + (N) * 4) EXT_PMON_PKT_CNT
 *
 * bits 16:0 default 00000000000000000 EXT_PMON_PKT_CNT
 */

#ifndef empei_i_reg_EXT_PMON_PKT_CNT_array_burst_read
#define empei_i_reg_EXT_PMON_PKT_CNT_array_burst_read( b, h, ofs, len, value ) \
       _empei_i_reg_EXT_PMON_PKT_CNT_array_burst_read( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _empei_i_reg_EXT_PMON_PKT_CNT_array_burst_read( LOG_CALLER_DEFN
                                                                   empei_i_buffer_t *b,
                                                                   empei_i_handle_t *h,
                                                                   UINT32 ofs,
                                                                   UINT32 len,
                                                                   UINT32 *value )
{
    if (len + ofs > 64)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "empei_i_reg_EXT_PMON_PKT_CNT_array_burst_read", ofs, len, 64 );
    empei_i_burst_read( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_EMPEI120_I_REG_EXT_PMON_PKT_CNT(ofs),
                        len,
                        value);

    IOLOG( "%s of %d words ofs=%d len=%d", "empei_i_reg_EXT_PMON_PKT_CNT_array_burst_read", 64, ofs, len);
}


#ifndef empei_i_reg_EXT_PMON_PKT_CNT_array_read
#define empei_i_reg_EXT_PMON_PKT_CNT_array_read( b, h, N ) \
       _empei_i_reg_EXT_PMON_PKT_CNT_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _empei_i_reg_EXT_PMON_PKT_CNT_array_read( LOG_CALLER_DEFN
                                                               empei_i_buffer_t *b,
                                                               empei_i_handle_t *h,
                                                               UINT32 N )
{
    UINT32 reg_value;

    reg_value = empei_i_reg_read( b,
                                  h,
                                  MEM_TYPE_STATUS,
                                  PMC_EMPEI120_I_REG_EXT_PMON_PKT_CNT(N));

    IOLOG( "%s -> 0x%08x;", "empei_i_reg_EXT_PMON_PKT_CNT_array_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_EMPEI120_I_REG_SW_RESET
 *
 * Register: Software Reset Register
 * Offset: 0x00000000 SW_RESET
 *
 * bits 0 default 1 SW_RESET_ECLASS_CORE
 *
 * bits 1 default 1 SW_RESET_ECLASS_NREG
 */

#ifndef empei_i_reg_SW_RESET_write
#define empei_i_reg_SW_RESET_write( b, h, value ) \
       _empei_i_reg_SW_RESET_write( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_reg_SW_RESET_write( LOG_CALLER_DEFN
                                                empei_i_buffer_t *b,
                                                empei_i_handle_t *h,
                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "empei_i_reg_SW_RESET_write", value );
    empei_i_reg_write( b,
                       h,
                       MEM_TYPE_STATUS,
                       PMC_EMPEI120_I_REG_SW_RESET,
                       value);
}


#ifndef empei_i_reg_SW_RESET_field_set
#define empei_i_reg_SW_RESET_field_set( b, h, mask, ofs, value ) \
       _empei_i_reg_SW_RESET_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _empei_i_reg_SW_RESET_field_set( LOG_CALLER_DEFN
                                                    empei_i_buffer_t *b,
                                                    empei_i_handle_t *h,
                                                    UINT32 mask,
                                                    UINT32 ofs,
                                                    UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "empei_i_reg_SW_RESET_field_set", mask, ofs, value );
    empei_i_field_set( b,
                       h,
                       MEM_TYPE_STATUS,
                       PMC_EMPEI120_I_REG_SW_RESET,
                       mask,
                       PMC_EMPEI120_I_REG_SW_RESET_UNUSED_MASK,
                       ofs,
                       value);

}


#ifndef empei_i_reg_SW_RESET_read
#define empei_i_reg_SW_RESET_read( b, h ) \
       _empei_i_reg_SW_RESET_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_reg_SW_RESET_read( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 reg_value;

    reg_value = empei_i_reg_read( b,
                                  h,
                                  MEM_TYPE_STATUS,
                                  PMC_EMPEI120_I_REG_SW_RESET);

    IOLOG( "%s -> 0x%08x;", "empei_i_reg_SW_RESET_read", reg_value);
    return reg_value;
}

/*
 * ==================================================================================
 *                  Parameter Access Functions for Paramset config
 * ==================================================================================
 */

#ifndef empei_i_field_LINK_ENABLE_set
#define empei_i_field_LINK_ENABLE_set( b, h, value ) \
       _empei_i_field_LINK_ENABLE_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_LINK_ENABLE_set( LOG_CALLER_DEFN
                                                   empei_i_buffer_t *b,
                                                   empei_i_handle_t *h,
                                                   UINT32 value )
{
    if (value > 4095)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_LINK_ENABLE_set", value, 4095);
    IOLOG( "%s <= 0x%08x", "empei_i_field_LINK_ENABLE_set", value );

    /* (0x00000004 bits 11:0) field LINK_ENABLE of register PMC_EMPEI120_I_REG_LINK_ENABLE */
    _empei_i_reg_LINK_ENABLE_field_set( LOG_CALLER_ARGS
                                        b,
                                        h,
                                        EMPEI120_I_REG_LINK_ENABLE_BIT_LINK_ENABLE_MSK,
                                        EMPEI120_I_REG_LINK_ENABLE_BIT_LINK_ENABLE_OFF,
                                        value);
}


#ifndef empei_i_field_LINK_ENABLE_get
#define empei_i_field_LINK_ENABLE_get( b, h ) \
       _empei_i_field_LINK_ENABLE_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_LINK_ENABLE_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000004 bits 11:0) field LINK_ENABLE of register PMC_EMPEI120_I_REG_LINK_ENABLE */
    reg_value = _empei_i_reg_LINK_ENABLE_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_LINK_ENABLE_BIT_LINK_ENABLE_MSK) >> EMPEI120_I_REG_LINK_ENABLE_BIT_LINK_ENABLE_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_LINK_ENABLE_get", value );

    return value;
}

#ifndef empei_i_field_range_LINK_ENABLE_set
#define empei_i_field_range_LINK_ENABLE_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_LINK_ENABLE_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_LINK_ENABLE_set( LOG_CALLER_DEFN
                                                         empei_i_buffer_t *b,
                                                         empei_i_handle_t *h,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_LINK_ENABLE_set", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_LINK_ENABLE_set", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_LINK_ENABLE_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000004 bits 11:0) field LINK_ENABLE of register PMC_EMPEI120_I_REG_LINK_ENABLE */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000004 bits 11:0) field LINK_ENABLE of register PMC_EMPEI120_I_REG_LINK_ENABLE */
        _empei_i_reg_LINK_ENABLE_field_set( LOG_CALLER_ARGS
                                            b,
                                            h,
                                            subfield_mask << (EMPEI120_I_REG_LINK_ENABLE_BIT_LINK_ENABLE_OFF + subfield_offset),
                                            EMPEI120_I_REG_LINK_ENABLE_BIT_LINK_ENABLE_OFF + subfield_offset,
                                            value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_LINK_ENABLE_get
#define empei_i_field_range_LINK_ENABLE_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_LINK_ENABLE_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_LINK_ENABLE_get( LOG_CALLER_DEFN
                                                           empei_i_buffer_t *b,
                                                           empei_i_handle_t *h,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_LINK_ENABLE_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_LINK_ENABLE_get", stop_bit, 11 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 11) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 11;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000004 bits 11:0) field LINK_ENABLE of register PMC_EMPEI120_I_REG_LINK_ENABLE */
    reg_value = _empei_i_reg_LINK_ENABLE_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_LINK_ENABLE_BIT_LINK_ENABLE_MSK)
                  >> EMPEI120_I_REG_LINK_ENABLE_BIT_LINK_ENABLE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_LINK_ENABLE_BIT_LINK_ENABLE_MSK, EMPEI120_I_REG_LINK_ENABLE_BIT_LINK_ENABLE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_LINK_ENABLE_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_WCI_MODE_CONTROL_set
#define empei_i_field_WCI_MODE_CONTROL_set( b, h, value ) \
       _empei_i_field_WCI_MODE_CONTROL_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_WCI_MODE_CONTROL_set( LOG_CALLER_DEFN
                                                        empei_i_buffer_t *b,
                                                        empei_i_handle_t *h,
                                                        UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_WCI_MODE_CONTROL_set", value, 1);
    IOLOG( "%s <= 0x%08x", "empei_i_field_WCI_MODE_CONTROL_set", value );

    /* (0x00000008 bits 0) field WCI_MODE_CONTROL of register PMC_EMPEI120_I_REG_INT_CTRL */
    _empei_i_reg_INT_CTRL_field_set( LOG_CALLER_ARGS
                                     b,
                                     h,
                                     EMPEI120_I_REG_INT_CTRL_BIT_WCI_MODE_CONTROL_MSK,
                                     EMPEI120_I_REG_INT_CTRL_BIT_WCI_MODE_CONTROL_OFF,
                                     value);
}


#ifndef empei_i_field_WCI_MODE_CONTROL_get
#define empei_i_field_WCI_MODE_CONTROL_get( b, h ) \
       _empei_i_field_WCI_MODE_CONTROL_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_WCI_MODE_CONTROL_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 0) field WCI_MODE_CONTROL of register PMC_EMPEI120_I_REG_INT_CTRL */
    reg_value = _empei_i_reg_INT_CTRL_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_INT_CTRL_BIT_WCI_MODE_CONTROL_MSK) >> EMPEI120_I_REG_INT_CTRL_BIT_WCI_MODE_CONTROL_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_WCI_MODE_CONTROL_get", value );

    return value;
}

#ifndef empei_i_field_CLR_INT_CONTROL_set
#define empei_i_field_CLR_INT_CONTROL_set( b, h, value ) \
       _empei_i_field_CLR_INT_CONTROL_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_CLR_INT_CONTROL_set( LOG_CALLER_DEFN
                                                       empei_i_buffer_t *b,
                                                       empei_i_handle_t *h,
                                                       UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_CLR_INT_CONTROL_set", value, 1);
    IOLOG( "%s <= 0x%08x", "empei_i_field_CLR_INT_CONTROL_set", value );

    /* (0x00000008 bits 8) field CLR_INT_CONTROL of register PMC_EMPEI120_I_REG_INT_CTRL */
    _empei_i_reg_INT_CTRL_field_set( LOG_CALLER_ARGS
                                     b,
                                     h,
                                     EMPEI120_I_REG_INT_CTRL_BIT_CLR_INT_CONTROL_MSK,
                                     EMPEI120_I_REG_INT_CTRL_BIT_CLR_INT_CONTROL_OFF,
                                     value);
}


#ifndef empei_i_field_CLR_INT_CONTROL_get
#define empei_i_field_CLR_INT_CONTROL_get( b, h ) \
       _empei_i_field_CLR_INT_CONTROL_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_CLR_INT_CONTROL_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 8) field CLR_INT_CONTROL of register PMC_EMPEI120_I_REG_INT_CTRL */
    reg_value = _empei_i_reg_INT_CTRL_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_INT_CTRL_BIT_CLR_INT_CONTROL_MSK) >> EMPEI120_I_REG_INT_CTRL_BIT_CLR_INT_CONTROL_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_CLR_INT_CONTROL_get", value );

    return value;
}

#ifndef empei_i_field_WRR0_CLIENTA_WEIGHT_set
#define empei_i_field_WRR0_CLIENTA_WEIGHT_set( b, h, value ) \
       _empei_i_field_WRR0_CLIENTA_WEIGHT_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_WRR0_CLIENTA_WEIGHT_set( LOG_CALLER_DEFN
                                                           empei_i_buffer_t *b,
                                                           empei_i_handle_t *h,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_WRR0_CLIENTA_WEIGHT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "empei_i_field_WRR0_CLIENTA_WEIGHT_set", value );

    /* (0x00000070 bits 0) field WRR0_CLIENTA_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    _empei_i_reg_WRRPC_field_set( LOG_CALLER_ARGS
                                  b,
                                  h,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR0_CLIENTA_WEIGHT_MSK,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR0_CLIENTA_WEIGHT_OFF,
                                  value);
}


#ifndef empei_i_field_WRR0_CLIENTA_WEIGHT_get
#define empei_i_field_WRR0_CLIENTA_WEIGHT_get( b, h ) \
       _empei_i_field_WRR0_CLIENTA_WEIGHT_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_WRR0_CLIENTA_WEIGHT_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000070 bits 0) field WRR0_CLIENTA_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    reg_value = _empei_i_reg_WRRPC_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_WRRPC_BIT_WRR0_CLIENTA_WEIGHT_MSK) >> EMPEI120_I_REG_WRRPC_BIT_WRR0_CLIENTA_WEIGHT_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_WRR0_CLIENTA_WEIGHT_get", value );

    return value;
}

#ifndef empei_i_field_WRR1_CLIENTA_WEIGHT_set
#define empei_i_field_WRR1_CLIENTA_WEIGHT_set( b, h, value ) \
       _empei_i_field_WRR1_CLIENTA_WEIGHT_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_WRR1_CLIENTA_WEIGHT_set( LOG_CALLER_DEFN
                                                           empei_i_buffer_t *b,
                                                           empei_i_handle_t *h,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_WRR1_CLIENTA_WEIGHT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "empei_i_field_WRR1_CLIENTA_WEIGHT_set", value );

    /* (0x00000070 bits 1) field WRR1_CLIENTA_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    _empei_i_reg_WRRPC_field_set( LOG_CALLER_ARGS
                                  b,
                                  h,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR1_CLIENTA_WEIGHT_MSK,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR1_CLIENTA_WEIGHT_OFF,
                                  value);
}


#ifndef empei_i_field_WRR1_CLIENTA_WEIGHT_get
#define empei_i_field_WRR1_CLIENTA_WEIGHT_get( b, h ) \
       _empei_i_field_WRR1_CLIENTA_WEIGHT_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_WRR1_CLIENTA_WEIGHT_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000070 bits 1) field WRR1_CLIENTA_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    reg_value = _empei_i_reg_WRRPC_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_WRRPC_BIT_WRR1_CLIENTA_WEIGHT_MSK) >> EMPEI120_I_REG_WRRPC_BIT_WRR1_CLIENTA_WEIGHT_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_WRR1_CLIENTA_WEIGHT_get", value );

    return value;
}

#ifndef empei_i_field_WRR2_CLIENTA_WEIGHT_set
#define empei_i_field_WRR2_CLIENTA_WEIGHT_set( b, h, value ) \
       _empei_i_field_WRR2_CLIENTA_WEIGHT_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_WRR2_CLIENTA_WEIGHT_set( LOG_CALLER_DEFN
                                                           empei_i_buffer_t *b,
                                                           empei_i_handle_t *h,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_WRR2_CLIENTA_WEIGHT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "empei_i_field_WRR2_CLIENTA_WEIGHT_set", value );

    /* (0x00000070 bits 2) field WRR2_CLIENTA_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    _empei_i_reg_WRRPC_field_set( LOG_CALLER_ARGS
                                  b,
                                  h,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR2_CLIENTA_WEIGHT_MSK,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR2_CLIENTA_WEIGHT_OFF,
                                  value);
}


#ifndef empei_i_field_WRR2_CLIENTA_WEIGHT_get
#define empei_i_field_WRR2_CLIENTA_WEIGHT_get( b, h ) \
       _empei_i_field_WRR2_CLIENTA_WEIGHT_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_WRR2_CLIENTA_WEIGHT_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000070 bits 2) field WRR2_CLIENTA_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    reg_value = _empei_i_reg_WRRPC_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_WRRPC_BIT_WRR2_CLIENTA_WEIGHT_MSK) >> EMPEI120_I_REG_WRRPC_BIT_WRR2_CLIENTA_WEIGHT_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_WRR2_CLIENTA_WEIGHT_get", value );

    return value;
}

#ifndef empei_i_field_WRR3_CLIENTA_WEIGHT_set
#define empei_i_field_WRR3_CLIENTA_WEIGHT_set( b, h, value ) \
       _empei_i_field_WRR3_CLIENTA_WEIGHT_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_WRR3_CLIENTA_WEIGHT_set( LOG_CALLER_DEFN
                                                           empei_i_buffer_t *b,
                                                           empei_i_handle_t *h,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_WRR3_CLIENTA_WEIGHT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "empei_i_field_WRR3_CLIENTA_WEIGHT_set", value );

    /* (0x00000070 bits 3) field WRR3_CLIENTA_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    _empei_i_reg_WRRPC_field_set( LOG_CALLER_ARGS
                                  b,
                                  h,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR3_CLIENTA_WEIGHT_MSK,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR3_CLIENTA_WEIGHT_OFF,
                                  value);
}


#ifndef empei_i_field_WRR3_CLIENTA_WEIGHT_get
#define empei_i_field_WRR3_CLIENTA_WEIGHT_get( b, h ) \
       _empei_i_field_WRR3_CLIENTA_WEIGHT_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_WRR3_CLIENTA_WEIGHT_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000070 bits 3) field WRR3_CLIENTA_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    reg_value = _empei_i_reg_WRRPC_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_WRRPC_BIT_WRR3_CLIENTA_WEIGHT_MSK) >> EMPEI120_I_REG_WRRPC_BIT_WRR3_CLIENTA_WEIGHT_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_WRR3_CLIENTA_WEIGHT_get", value );

    return value;
}

#ifndef empei_i_field_WRR4_CLIENTA_WEIGHT_set
#define empei_i_field_WRR4_CLIENTA_WEIGHT_set( b, h, value ) \
       _empei_i_field_WRR4_CLIENTA_WEIGHT_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_WRR4_CLIENTA_WEIGHT_set( LOG_CALLER_DEFN
                                                           empei_i_buffer_t *b,
                                                           empei_i_handle_t *h,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_WRR4_CLIENTA_WEIGHT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "empei_i_field_WRR4_CLIENTA_WEIGHT_set", value );

    /* (0x00000070 bits 4) field WRR4_CLIENTA_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    _empei_i_reg_WRRPC_field_set( LOG_CALLER_ARGS
                                  b,
                                  h,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR4_CLIENTA_WEIGHT_MSK,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR4_CLIENTA_WEIGHT_OFF,
                                  value);
}


#ifndef empei_i_field_WRR4_CLIENTA_WEIGHT_get
#define empei_i_field_WRR4_CLIENTA_WEIGHT_get( b, h ) \
       _empei_i_field_WRR4_CLIENTA_WEIGHT_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_WRR4_CLIENTA_WEIGHT_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000070 bits 4) field WRR4_CLIENTA_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    reg_value = _empei_i_reg_WRRPC_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_WRRPC_BIT_WRR4_CLIENTA_WEIGHT_MSK) >> EMPEI120_I_REG_WRRPC_BIT_WRR4_CLIENTA_WEIGHT_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_WRR4_CLIENTA_WEIGHT_get", value );

    return value;
}

#ifndef empei_i_field_WRR5_CLIENTA_WEIGHT_set
#define empei_i_field_WRR5_CLIENTA_WEIGHT_set( b, h, value ) \
       _empei_i_field_WRR5_CLIENTA_WEIGHT_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_WRR5_CLIENTA_WEIGHT_set( LOG_CALLER_DEFN
                                                           empei_i_buffer_t *b,
                                                           empei_i_handle_t *h,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_WRR5_CLIENTA_WEIGHT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "empei_i_field_WRR5_CLIENTA_WEIGHT_set", value );

    /* (0x00000070 bits 5) field WRR5_CLIENTA_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    _empei_i_reg_WRRPC_field_set( LOG_CALLER_ARGS
                                  b,
                                  h,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR5_CLIENTA_WEIGHT_MSK,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR5_CLIENTA_WEIGHT_OFF,
                                  value);
}


#ifndef empei_i_field_WRR5_CLIENTA_WEIGHT_get
#define empei_i_field_WRR5_CLIENTA_WEIGHT_get( b, h ) \
       _empei_i_field_WRR5_CLIENTA_WEIGHT_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_WRR5_CLIENTA_WEIGHT_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000070 bits 5) field WRR5_CLIENTA_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    reg_value = _empei_i_reg_WRRPC_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_WRRPC_BIT_WRR5_CLIENTA_WEIGHT_MSK) >> EMPEI120_I_REG_WRRPC_BIT_WRR5_CLIENTA_WEIGHT_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_WRR5_CLIENTA_WEIGHT_get", value );

    return value;
}

#ifndef empei_i_field_WRR6_CLIENTA_WEIGHT_set
#define empei_i_field_WRR6_CLIENTA_WEIGHT_set( b, h, value ) \
       _empei_i_field_WRR6_CLIENTA_WEIGHT_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_WRR6_CLIENTA_WEIGHT_set( LOG_CALLER_DEFN
                                                           empei_i_buffer_t *b,
                                                           empei_i_handle_t *h,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_WRR6_CLIENTA_WEIGHT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "empei_i_field_WRR6_CLIENTA_WEIGHT_set", value );

    /* (0x00000070 bits 6) field WRR6_CLIENTA_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    _empei_i_reg_WRRPC_field_set( LOG_CALLER_ARGS
                                  b,
                                  h,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR6_CLIENTA_WEIGHT_MSK,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR6_CLIENTA_WEIGHT_OFF,
                                  value);
}


#ifndef empei_i_field_WRR6_CLIENTA_WEIGHT_get
#define empei_i_field_WRR6_CLIENTA_WEIGHT_get( b, h ) \
       _empei_i_field_WRR6_CLIENTA_WEIGHT_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_WRR6_CLIENTA_WEIGHT_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000070 bits 6) field WRR6_CLIENTA_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    reg_value = _empei_i_reg_WRRPC_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_WRRPC_BIT_WRR6_CLIENTA_WEIGHT_MSK) >> EMPEI120_I_REG_WRRPC_BIT_WRR6_CLIENTA_WEIGHT_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_WRR6_CLIENTA_WEIGHT_get", value );

    return value;
}

#ifndef empei_i_field_WRR7_CLIENTA_WEIGHT_set
#define empei_i_field_WRR7_CLIENTA_WEIGHT_set( b, h, value ) \
       _empei_i_field_WRR7_CLIENTA_WEIGHT_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_WRR7_CLIENTA_WEIGHT_set( LOG_CALLER_DEFN
                                                           empei_i_buffer_t *b,
                                                           empei_i_handle_t *h,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_WRR7_CLIENTA_WEIGHT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "empei_i_field_WRR7_CLIENTA_WEIGHT_set", value );

    /* (0x00000070 bits 7) field WRR7_CLIENTA_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    _empei_i_reg_WRRPC_field_set( LOG_CALLER_ARGS
                                  b,
                                  h,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR7_CLIENTA_WEIGHT_MSK,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR7_CLIENTA_WEIGHT_OFF,
                                  value);
}


#ifndef empei_i_field_WRR7_CLIENTA_WEIGHT_get
#define empei_i_field_WRR7_CLIENTA_WEIGHT_get( b, h ) \
       _empei_i_field_WRR7_CLIENTA_WEIGHT_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_WRR7_CLIENTA_WEIGHT_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000070 bits 7) field WRR7_CLIENTA_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    reg_value = _empei_i_reg_WRRPC_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_WRRPC_BIT_WRR7_CLIENTA_WEIGHT_MSK) >> EMPEI120_I_REG_WRRPC_BIT_WRR7_CLIENTA_WEIGHT_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_WRR7_CLIENTA_WEIGHT_get", value );

    return value;
}

#ifndef empei_i_field_WRR8_CLIENTA_WEIGHT_set
#define empei_i_field_WRR8_CLIENTA_WEIGHT_set( b, h, value ) \
       _empei_i_field_WRR8_CLIENTA_WEIGHT_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_WRR8_CLIENTA_WEIGHT_set( LOG_CALLER_DEFN
                                                           empei_i_buffer_t *b,
                                                           empei_i_handle_t *h,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_WRR8_CLIENTA_WEIGHT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "empei_i_field_WRR8_CLIENTA_WEIGHT_set", value );

    /* (0x00000070 bits 8) field WRR8_CLIENTA_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    _empei_i_reg_WRRPC_field_set( LOG_CALLER_ARGS
                                  b,
                                  h,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR8_CLIENTA_WEIGHT_MSK,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR8_CLIENTA_WEIGHT_OFF,
                                  value);
}


#ifndef empei_i_field_WRR8_CLIENTA_WEIGHT_get
#define empei_i_field_WRR8_CLIENTA_WEIGHT_get( b, h ) \
       _empei_i_field_WRR8_CLIENTA_WEIGHT_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_WRR8_CLIENTA_WEIGHT_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000070 bits 8) field WRR8_CLIENTA_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    reg_value = _empei_i_reg_WRRPC_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_WRRPC_BIT_WRR8_CLIENTA_WEIGHT_MSK) >> EMPEI120_I_REG_WRRPC_BIT_WRR8_CLIENTA_WEIGHT_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_WRR8_CLIENTA_WEIGHT_get", value );

    return value;
}

#ifndef empei_i_field_WRR9_CLIENTA_WEIGHT_set
#define empei_i_field_WRR9_CLIENTA_WEIGHT_set( b, h, value ) \
       _empei_i_field_WRR9_CLIENTA_WEIGHT_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_WRR9_CLIENTA_WEIGHT_set( LOG_CALLER_DEFN
                                                           empei_i_buffer_t *b,
                                                           empei_i_handle_t *h,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_WRR9_CLIENTA_WEIGHT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "empei_i_field_WRR9_CLIENTA_WEIGHT_set", value );

    /* (0x00000070 bits 9) field WRR9_CLIENTA_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    _empei_i_reg_WRRPC_field_set( LOG_CALLER_ARGS
                                  b,
                                  h,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR9_CLIENTA_WEIGHT_MSK,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR9_CLIENTA_WEIGHT_OFF,
                                  value);
}


#ifndef empei_i_field_WRR9_CLIENTA_WEIGHT_get
#define empei_i_field_WRR9_CLIENTA_WEIGHT_get( b, h ) \
       _empei_i_field_WRR9_CLIENTA_WEIGHT_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_WRR9_CLIENTA_WEIGHT_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000070 bits 9) field WRR9_CLIENTA_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    reg_value = _empei_i_reg_WRRPC_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_WRRPC_BIT_WRR9_CLIENTA_WEIGHT_MSK) >> EMPEI120_I_REG_WRRPC_BIT_WRR9_CLIENTA_WEIGHT_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_WRR9_CLIENTA_WEIGHT_get", value );

    return value;
}

#ifndef empei_i_field_WRR10_CLIENTA_WEIGHT_set
#define empei_i_field_WRR10_CLIENTA_WEIGHT_set( b, h, value ) \
       _empei_i_field_WRR10_CLIENTA_WEIGHT_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_WRR10_CLIENTA_WEIGHT_set( LOG_CALLER_DEFN
                                                            empei_i_buffer_t *b,
                                                            empei_i_handle_t *h,
                                                            UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_WRR10_CLIENTA_WEIGHT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "empei_i_field_WRR10_CLIENTA_WEIGHT_set", value );

    /* (0x00000070 bits 10) field WRR10_CLIENTA_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    _empei_i_reg_WRRPC_field_set( LOG_CALLER_ARGS
                                  b,
                                  h,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR10_CLIENTA_WEIGHT_MSK,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR10_CLIENTA_WEIGHT_OFF,
                                  value);
}


#ifndef empei_i_field_WRR10_CLIENTA_WEIGHT_get
#define empei_i_field_WRR10_CLIENTA_WEIGHT_get( b, h ) \
       _empei_i_field_WRR10_CLIENTA_WEIGHT_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_WRR10_CLIENTA_WEIGHT_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000070 bits 10) field WRR10_CLIENTA_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    reg_value = _empei_i_reg_WRRPC_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_WRRPC_BIT_WRR10_CLIENTA_WEIGHT_MSK) >> EMPEI120_I_REG_WRRPC_BIT_WRR10_CLIENTA_WEIGHT_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_WRR10_CLIENTA_WEIGHT_get", value );

    return value;
}

#ifndef empei_i_field_WRR11_CLIENTA_WEIGHT_set
#define empei_i_field_WRR11_CLIENTA_WEIGHT_set( b, h, value ) \
       _empei_i_field_WRR11_CLIENTA_WEIGHT_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_WRR11_CLIENTA_WEIGHT_set( LOG_CALLER_DEFN
                                                            empei_i_buffer_t *b,
                                                            empei_i_handle_t *h,
                                                            UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_WRR11_CLIENTA_WEIGHT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "empei_i_field_WRR11_CLIENTA_WEIGHT_set", value );

    /* (0x00000070 bits 11) field WRR11_CLIENTA_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    _empei_i_reg_WRRPC_field_set( LOG_CALLER_ARGS
                                  b,
                                  h,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR11_CLIENTA_WEIGHT_MSK,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR11_CLIENTA_WEIGHT_OFF,
                                  value);
}


#ifndef empei_i_field_WRR11_CLIENTA_WEIGHT_get
#define empei_i_field_WRR11_CLIENTA_WEIGHT_get( b, h ) \
       _empei_i_field_WRR11_CLIENTA_WEIGHT_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_WRR11_CLIENTA_WEIGHT_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000070 bits 11) field WRR11_CLIENTA_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    reg_value = _empei_i_reg_WRRPC_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_WRRPC_BIT_WRR11_CLIENTA_WEIGHT_MSK) >> EMPEI120_I_REG_WRRPC_BIT_WRR11_CLIENTA_WEIGHT_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_WRR11_CLIENTA_WEIGHT_get", value );

    return value;
}

#ifndef empei_i_field_WRR0_CLIENTB_WEIGHT_set
#define empei_i_field_WRR0_CLIENTB_WEIGHT_set( b, h, value ) \
       _empei_i_field_WRR0_CLIENTB_WEIGHT_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_WRR0_CLIENTB_WEIGHT_set( LOG_CALLER_DEFN
                                                           empei_i_buffer_t *b,
                                                           empei_i_handle_t *h,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_WRR0_CLIENTB_WEIGHT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "empei_i_field_WRR0_CLIENTB_WEIGHT_set", value );

    /* (0x00000070 bits 16) field WRR0_CLIENTB_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    _empei_i_reg_WRRPC_field_set( LOG_CALLER_ARGS
                                  b,
                                  h,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR0_CLIENTB_WEIGHT_MSK,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR0_CLIENTB_WEIGHT_OFF,
                                  value);
}


#ifndef empei_i_field_WRR0_CLIENTB_WEIGHT_get
#define empei_i_field_WRR0_CLIENTB_WEIGHT_get( b, h ) \
       _empei_i_field_WRR0_CLIENTB_WEIGHT_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_WRR0_CLIENTB_WEIGHT_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000070 bits 16) field WRR0_CLIENTB_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    reg_value = _empei_i_reg_WRRPC_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_WRRPC_BIT_WRR0_CLIENTB_WEIGHT_MSK) >> EMPEI120_I_REG_WRRPC_BIT_WRR0_CLIENTB_WEIGHT_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_WRR0_CLIENTB_WEIGHT_get", value );

    return value;
}

#ifndef empei_i_field_WRR1_CLIENTB_WEIGHT_set
#define empei_i_field_WRR1_CLIENTB_WEIGHT_set( b, h, value ) \
       _empei_i_field_WRR1_CLIENTB_WEIGHT_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_WRR1_CLIENTB_WEIGHT_set( LOG_CALLER_DEFN
                                                           empei_i_buffer_t *b,
                                                           empei_i_handle_t *h,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_WRR1_CLIENTB_WEIGHT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "empei_i_field_WRR1_CLIENTB_WEIGHT_set", value );

    /* (0x00000070 bits 17) field WRR1_CLIENTB_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    _empei_i_reg_WRRPC_field_set( LOG_CALLER_ARGS
                                  b,
                                  h,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR1_CLIENTB_WEIGHT_MSK,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR1_CLIENTB_WEIGHT_OFF,
                                  value);
}


#ifndef empei_i_field_WRR1_CLIENTB_WEIGHT_get
#define empei_i_field_WRR1_CLIENTB_WEIGHT_get( b, h ) \
       _empei_i_field_WRR1_CLIENTB_WEIGHT_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_WRR1_CLIENTB_WEIGHT_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000070 bits 17) field WRR1_CLIENTB_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    reg_value = _empei_i_reg_WRRPC_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_WRRPC_BIT_WRR1_CLIENTB_WEIGHT_MSK) >> EMPEI120_I_REG_WRRPC_BIT_WRR1_CLIENTB_WEIGHT_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_WRR1_CLIENTB_WEIGHT_get", value );

    return value;
}

#ifndef empei_i_field_WRR2_CLIENTB_WEIGHT_set
#define empei_i_field_WRR2_CLIENTB_WEIGHT_set( b, h, value ) \
       _empei_i_field_WRR2_CLIENTB_WEIGHT_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_WRR2_CLIENTB_WEIGHT_set( LOG_CALLER_DEFN
                                                           empei_i_buffer_t *b,
                                                           empei_i_handle_t *h,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_WRR2_CLIENTB_WEIGHT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "empei_i_field_WRR2_CLIENTB_WEIGHT_set", value );

    /* (0x00000070 bits 18) field WRR2_CLIENTB_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    _empei_i_reg_WRRPC_field_set( LOG_CALLER_ARGS
                                  b,
                                  h,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR2_CLIENTB_WEIGHT_MSK,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR2_CLIENTB_WEIGHT_OFF,
                                  value);
}


#ifndef empei_i_field_WRR2_CLIENTB_WEIGHT_get
#define empei_i_field_WRR2_CLIENTB_WEIGHT_get( b, h ) \
       _empei_i_field_WRR2_CLIENTB_WEIGHT_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_WRR2_CLIENTB_WEIGHT_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000070 bits 18) field WRR2_CLIENTB_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    reg_value = _empei_i_reg_WRRPC_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_WRRPC_BIT_WRR2_CLIENTB_WEIGHT_MSK) >> EMPEI120_I_REG_WRRPC_BIT_WRR2_CLIENTB_WEIGHT_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_WRR2_CLIENTB_WEIGHT_get", value );

    return value;
}

#ifndef empei_i_field_WRR3_CLIENTB_WEIGHT_set
#define empei_i_field_WRR3_CLIENTB_WEIGHT_set( b, h, value ) \
       _empei_i_field_WRR3_CLIENTB_WEIGHT_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_WRR3_CLIENTB_WEIGHT_set( LOG_CALLER_DEFN
                                                           empei_i_buffer_t *b,
                                                           empei_i_handle_t *h,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_WRR3_CLIENTB_WEIGHT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "empei_i_field_WRR3_CLIENTB_WEIGHT_set", value );

    /* (0x00000070 bits 19) field WRR3_CLIENTB_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    _empei_i_reg_WRRPC_field_set( LOG_CALLER_ARGS
                                  b,
                                  h,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR3_CLIENTB_WEIGHT_MSK,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR3_CLIENTB_WEIGHT_OFF,
                                  value);
}


#ifndef empei_i_field_WRR3_CLIENTB_WEIGHT_get
#define empei_i_field_WRR3_CLIENTB_WEIGHT_get( b, h ) \
       _empei_i_field_WRR3_CLIENTB_WEIGHT_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_WRR3_CLIENTB_WEIGHT_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000070 bits 19) field WRR3_CLIENTB_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    reg_value = _empei_i_reg_WRRPC_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_WRRPC_BIT_WRR3_CLIENTB_WEIGHT_MSK) >> EMPEI120_I_REG_WRRPC_BIT_WRR3_CLIENTB_WEIGHT_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_WRR3_CLIENTB_WEIGHT_get", value );

    return value;
}

#ifndef empei_i_field_WRR4_CLIENTB_WEIGHT_set
#define empei_i_field_WRR4_CLIENTB_WEIGHT_set( b, h, value ) \
       _empei_i_field_WRR4_CLIENTB_WEIGHT_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_WRR4_CLIENTB_WEIGHT_set( LOG_CALLER_DEFN
                                                           empei_i_buffer_t *b,
                                                           empei_i_handle_t *h,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_WRR4_CLIENTB_WEIGHT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "empei_i_field_WRR4_CLIENTB_WEIGHT_set", value );

    /* (0x00000070 bits 20) field WRR4_CLIENTB_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    _empei_i_reg_WRRPC_field_set( LOG_CALLER_ARGS
                                  b,
                                  h,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR4_CLIENTB_WEIGHT_MSK,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR4_CLIENTB_WEIGHT_OFF,
                                  value);
}


#ifndef empei_i_field_WRR4_CLIENTB_WEIGHT_get
#define empei_i_field_WRR4_CLIENTB_WEIGHT_get( b, h ) \
       _empei_i_field_WRR4_CLIENTB_WEIGHT_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_WRR4_CLIENTB_WEIGHT_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000070 bits 20) field WRR4_CLIENTB_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    reg_value = _empei_i_reg_WRRPC_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_WRRPC_BIT_WRR4_CLIENTB_WEIGHT_MSK) >> EMPEI120_I_REG_WRRPC_BIT_WRR4_CLIENTB_WEIGHT_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_WRR4_CLIENTB_WEIGHT_get", value );

    return value;
}

#ifndef empei_i_field_WRR5_CLIENTB_WEIGHT_set
#define empei_i_field_WRR5_CLIENTB_WEIGHT_set( b, h, value ) \
       _empei_i_field_WRR5_CLIENTB_WEIGHT_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_WRR5_CLIENTB_WEIGHT_set( LOG_CALLER_DEFN
                                                           empei_i_buffer_t *b,
                                                           empei_i_handle_t *h,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_WRR5_CLIENTB_WEIGHT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "empei_i_field_WRR5_CLIENTB_WEIGHT_set", value );

    /* (0x00000070 bits 21) field WRR5_CLIENTB_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    _empei_i_reg_WRRPC_field_set( LOG_CALLER_ARGS
                                  b,
                                  h,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR5_CLIENTB_WEIGHT_MSK,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR5_CLIENTB_WEIGHT_OFF,
                                  value);
}


#ifndef empei_i_field_WRR5_CLIENTB_WEIGHT_get
#define empei_i_field_WRR5_CLIENTB_WEIGHT_get( b, h ) \
       _empei_i_field_WRR5_CLIENTB_WEIGHT_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_WRR5_CLIENTB_WEIGHT_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000070 bits 21) field WRR5_CLIENTB_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    reg_value = _empei_i_reg_WRRPC_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_WRRPC_BIT_WRR5_CLIENTB_WEIGHT_MSK) >> EMPEI120_I_REG_WRRPC_BIT_WRR5_CLIENTB_WEIGHT_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_WRR5_CLIENTB_WEIGHT_get", value );

    return value;
}

#ifndef empei_i_field_WRR6_CLIENTB_WEIGHT_set
#define empei_i_field_WRR6_CLIENTB_WEIGHT_set( b, h, value ) \
       _empei_i_field_WRR6_CLIENTB_WEIGHT_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_WRR6_CLIENTB_WEIGHT_set( LOG_CALLER_DEFN
                                                           empei_i_buffer_t *b,
                                                           empei_i_handle_t *h,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_WRR6_CLIENTB_WEIGHT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "empei_i_field_WRR6_CLIENTB_WEIGHT_set", value );

    /* (0x00000070 bits 22) field WRR6_CLIENTB_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    _empei_i_reg_WRRPC_field_set( LOG_CALLER_ARGS
                                  b,
                                  h,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR6_CLIENTB_WEIGHT_MSK,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR6_CLIENTB_WEIGHT_OFF,
                                  value);
}


#ifndef empei_i_field_WRR6_CLIENTB_WEIGHT_get
#define empei_i_field_WRR6_CLIENTB_WEIGHT_get( b, h ) \
       _empei_i_field_WRR6_CLIENTB_WEIGHT_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_WRR6_CLIENTB_WEIGHT_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000070 bits 22) field WRR6_CLIENTB_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    reg_value = _empei_i_reg_WRRPC_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_WRRPC_BIT_WRR6_CLIENTB_WEIGHT_MSK) >> EMPEI120_I_REG_WRRPC_BIT_WRR6_CLIENTB_WEIGHT_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_WRR6_CLIENTB_WEIGHT_get", value );

    return value;
}

#ifndef empei_i_field_WRR7_CLIENTB_WEIGHT_set
#define empei_i_field_WRR7_CLIENTB_WEIGHT_set( b, h, value ) \
       _empei_i_field_WRR7_CLIENTB_WEIGHT_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_WRR7_CLIENTB_WEIGHT_set( LOG_CALLER_DEFN
                                                           empei_i_buffer_t *b,
                                                           empei_i_handle_t *h,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_WRR7_CLIENTB_WEIGHT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "empei_i_field_WRR7_CLIENTB_WEIGHT_set", value );

    /* (0x00000070 bits 23) field WRR7_CLIENTB_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    _empei_i_reg_WRRPC_field_set( LOG_CALLER_ARGS
                                  b,
                                  h,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR7_CLIENTB_WEIGHT_MSK,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR7_CLIENTB_WEIGHT_OFF,
                                  value);
}


#ifndef empei_i_field_WRR7_CLIENTB_WEIGHT_get
#define empei_i_field_WRR7_CLIENTB_WEIGHT_get( b, h ) \
       _empei_i_field_WRR7_CLIENTB_WEIGHT_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_WRR7_CLIENTB_WEIGHT_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000070 bits 23) field WRR7_CLIENTB_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    reg_value = _empei_i_reg_WRRPC_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_WRRPC_BIT_WRR7_CLIENTB_WEIGHT_MSK) >> EMPEI120_I_REG_WRRPC_BIT_WRR7_CLIENTB_WEIGHT_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_WRR7_CLIENTB_WEIGHT_get", value );

    return value;
}

#ifndef empei_i_field_WRR8_CLIENTB_WEIGHT_set
#define empei_i_field_WRR8_CLIENTB_WEIGHT_set( b, h, value ) \
       _empei_i_field_WRR8_CLIENTB_WEIGHT_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_WRR8_CLIENTB_WEIGHT_set( LOG_CALLER_DEFN
                                                           empei_i_buffer_t *b,
                                                           empei_i_handle_t *h,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_WRR8_CLIENTB_WEIGHT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "empei_i_field_WRR8_CLIENTB_WEIGHT_set", value );

    /* (0x00000070 bits 24) field WRR8_CLIENTB_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    _empei_i_reg_WRRPC_field_set( LOG_CALLER_ARGS
                                  b,
                                  h,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR8_CLIENTB_WEIGHT_MSK,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR8_CLIENTB_WEIGHT_OFF,
                                  value);
}


#ifndef empei_i_field_WRR8_CLIENTB_WEIGHT_get
#define empei_i_field_WRR8_CLIENTB_WEIGHT_get( b, h ) \
       _empei_i_field_WRR8_CLIENTB_WEIGHT_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_WRR8_CLIENTB_WEIGHT_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000070 bits 24) field WRR8_CLIENTB_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    reg_value = _empei_i_reg_WRRPC_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_WRRPC_BIT_WRR8_CLIENTB_WEIGHT_MSK) >> EMPEI120_I_REG_WRRPC_BIT_WRR8_CLIENTB_WEIGHT_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_WRR8_CLIENTB_WEIGHT_get", value );

    return value;
}

#ifndef empei_i_field_WRR9_CLIENTB_WEIGHT_set
#define empei_i_field_WRR9_CLIENTB_WEIGHT_set( b, h, value ) \
       _empei_i_field_WRR9_CLIENTB_WEIGHT_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_WRR9_CLIENTB_WEIGHT_set( LOG_CALLER_DEFN
                                                           empei_i_buffer_t *b,
                                                           empei_i_handle_t *h,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_WRR9_CLIENTB_WEIGHT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "empei_i_field_WRR9_CLIENTB_WEIGHT_set", value );

    /* (0x00000070 bits 25) field WRR9_CLIENTB_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    _empei_i_reg_WRRPC_field_set( LOG_CALLER_ARGS
                                  b,
                                  h,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR9_CLIENTB_WEIGHT_MSK,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR9_CLIENTB_WEIGHT_OFF,
                                  value);
}


#ifndef empei_i_field_WRR9_CLIENTB_WEIGHT_get
#define empei_i_field_WRR9_CLIENTB_WEIGHT_get( b, h ) \
       _empei_i_field_WRR9_CLIENTB_WEIGHT_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_WRR9_CLIENTB_WEIGHT_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000070 bits 25) field WRR9_CLIENTB_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    reg_value = _empei_i_reg_WRRPC_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_WRRPC_BIT_WRR9_CLIENTB_WEIGHT_MSK) >> EMPEI120_I_REG_WRRPC_BIT_WRR9_CLIENTB_WEIGHT_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_WRR9_CLIENTB_WEIGHT_get", value );

    return value;
}

#ifndef empei_i_field_WRR10_CLIENTB_WEIGHT_set
#define empei_i_field_WRR10_CLIENTB_WEIGHT_set( b, h, value ) \
       _empei_i_field_WRR10_CLIENTB_WEIGHT_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_WRR10_CLIENTB_WEIGHT_set( LOG_CALLER_DEFN
                                                            empei_i_buffer_t *b,
                                                            empei_i_handle_t *h,
                                                            UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_WRR10_CLIENTB_WEIGHT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "empei_i_field_WRR10_CLIENTB_WEIGHT_set", value );

    /* (0x00000070 bits 26) field WRR10_CLIENTB_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    _empei_i_reg_WRRPC_field_set( LOG_CALLER_ARGS
                                  b,
                                  h,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR10_CLIENTB_WEIGHT_MSK,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR10_CLIENTB_WEIGHT_OFF,
                                  value);
}


#ifndef empei_i_field_WRR10_CLIENTB_WEIGHT_get
#define empei_i_field_WRR10_CLIENTB_WEIGHT_get( b, h ) \
       _empei_i_field_WRR10_CLIENTB_WEIGHT_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_WRR10_CLIENTB_WEIGHT_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000070 bits 26) field WRR10_CLIENTB_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    reg_value = _empei_i_reg_WRRPC_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_WRRPC_BIT_WRR10_CLIENTB_WEIGHT_MSK) >> EMPEI120_I_REG_WRRPC_BIT_WRR10_CLIENTB_WEIGHT_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_WRR10_CLIENTB_WEIGHT_get", value );

    return value;
}

#ifndef empei_i_field_WRR11_CLIENTB_WEIGHT_set
#define empei_i_field_WRR11_CLIENTB_WEIGHT_set( b, h, value ) \
       _empei_i_field_WRR11_CLIENTB_WEIGHT_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_WRR11_CLIENTB_WEIGHT_set( LOG_CALLER_DEFN
                                                            empei_i_buffer_t *b,
                                                            empei_i_handle_t *h,
                                                            UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_WRR11_CLIENTB_WEIGHT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "empei_i_field_WRR11_CLIENTB_WEIGHT_set", value );

    /* (0x00000070 bits 27) field WRR11_CLIENTB_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    _empei_i_reg_WRRPC_field_set( LOG_CALLER_ARGS
                                  b,
                                  h,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR11_CLIENTB_WEIGHT_MSK,
                                  EMPEI120_I_REG_WRRPC_BIT_WRR11_CLIENTB_WEIGHT_OFF,
                                  value);
}


#ifndef empei_i_field_WRR11_CLIENTB_WEIGHT_get
#define empei_i_field_WRR11_CLIENTB_WEIGHT_get( b, h ) \
       _empei_i_field_WRR11_CLIENTB_WEIGHT_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_WRR11_CLIENTB_WEIGHT_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000070 bits 27) field WRR11_CLIENTB_WEIGHT of register PMC_EMPEI120_I_REG_WRRPC */
    reg_value = _empei_i_reg_WRRPC_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_WRRPC_BIT_WRR11_CLIENTB_WEIGHT_MSK) >> EMPEI120_I_REG_WRRPC_BIT_WRR11_CLIENTB_WEIGHT_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_WRR11_CLIENTB_WEIGHT_get", value );

    return value;
}

#ifndef empei_i_field_SD_CTRL_set
#define empei_i_field_SD_CTRL_set( b, h, value ) \
       _empei_i_field_SD_CTRL_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_SD_CTRL_set( LOG_CALLER_DEFN
                                               empei_i_buffer_t *b,
                                               empei_i_handle_t *h,
                                               UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_SD_CTRL_set", value, 1);
    IOLOG( "%s <= 0x%08x", "empei_i_field_SD_CTRL_set", value );

    /* (0x00000074 bits 0) field SD_CTRL of register PMC_EMPEI120_I_REG_RAM_SD_CTRL */
    _empei_i_reg_RAM_SD_CTRL_field_set( LOG_CALLER_ARGS
                                        b,
                                        h,
                                        EMPEI120_I_REG_RAM_SD_CTRL_BIT_SD_CTRL_MSK,
                                        EMPEI120_I_REG_RAM_SD_CTRL_BIT_SD_CTRL_OFF,
                                        value);
}


#ifndef empei_i_field_SD_CTRL_get
#define empei_i_field_SD_CTRL_get( b, h ) \
       _empei_i_field_SD_CTRL_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_SD_CTRL_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000074 bits 0) field SD_CTRL of register PMC_EMPEI120_I_REG_RAM_SD_CTRL */
    reg_value = _empei_i_reg_RAM_SD_CTRL_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_RAM_SD_CTRL_BIT_SD_CTRL_MSK) >> EMPEI120_I_REG_RAM_SD_CTRL_BIT_SD_CTRL_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_SD_CTRL_get", value );

    return value;
}

#ifndef empei_i_field_CPB_LINK_SCH_TS0_set
#define empei_i_field_CPB_LINK_SCH_TS0_set( b, h, value ) \
       _empei_i_field_CPB_LINK_SCH_TS0_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_CPB_LINK_SCH_TS0_set( LOG_CALLER_DEFN
                                                        empei_i_buffer_t *b,
                                                        empei_i_handle_t *h,
                                                        UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_CPB_LINK_SCH_TS0_set", value, 15);
    IOLOG( "%s <= 0x%08x", "empei_i_field_CPB_LINK_SCH_TS0_set", value );

    /* (0x00000080 bits 3:0) field CPB_LINK_SCH_TS0 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
    _empei_i_reg_CPB_LSC_LOW_field_set( LOG_CALLER_ARGS
                                        b,
                                        h,
                                        EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS0_MSK,
                                        EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS0_OFF,
                                        value);
}


#ifndef empei_i_field_CPB_LINK_SCH_TS0_get
#define empei_i_field_CPB_LINK_SCH_TS0_get( b, h ) \
       _empei_i_field_CPB_LINK_SCH_TS0_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_CPB_LINK_SCH_TS0_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000080 bits 3:0) field CPB_LINK_SCH_TS0 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
    reg_value = _empei_i_reg_CPB_LSC_LOW_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS0_MSK) >> EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS0_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_CPB_LINK_SCH_TS0_get", value );

    return value;
}

#ifndef empei_i_field_range_CPB_LINK_SCH_TS0_set
#define empei_i_field_range_CPB_LINK_SCH_TS0_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_CPB_LINK_SCH_TS0_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_CPB_LINK_SCH_TS0_set( LOG_CALLER_DEFN
                                                              empei_i_buffer_t *b,
                                                              empei_i_handle_t *h,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_CPB_LINK_SCH_TS0_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_CPB_LINK_SCH_TS0_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_CPB_LINK_SCH_TS0_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000080 bits 3:0) field CPB_LINK_SCH_TS0 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000080 bits 3:0) field CPB_LINK_SCH_TS0 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
        _empei_i_reg_CPB_LSC_LOW_field_set( LOG_CALLER_ARGS
                                            b,
                                            h,
                                            subfield_mask << (EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS0_OFF + subfield_offset),
                                            EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS0_OFF + subfield_offset,
                                            value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_CPB_LINK_SCH_TS0_get
#define empei_i_field_range_CPB_LINK_SCH_TS0_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_CPB_LINK_SCH_TS0_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_CPB_LINK_SCH_TS0_get( LOG_CALLER_DEFN
                                                                empei_i_buffer_t *b,
                                                                empei_i_handle_t *h,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_CPB_LINK_SCH_TS0_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_CPB_LINK_SCH_TS0_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000080 bits 3:0) field CPB_LINK_SCH_TS0 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
    reg_value = _empei_i_reg_CPB_LSC_LOW_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS0_MSK)
                  >> EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS0_MSK, EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_CPB_LINK_SCH_TS0_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_CPB_LINK_SCH_TS1_set
#define empei_i_field_CPB_LINK_SCH_TS1_set( b, h, value ) \
       _empei_i_field_CPB_LINK_SCH_TS1_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_CPB_LINK_SCH_TS1_set( LOG_CALLER_DEFN
                                                        empei_i_buffer_t *b,
                                                        empei_i_handle_t *h,
                                                        UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_CPB_LINK_SCH_TS1_set", value, 15);
    IOLOG( "%s <= 0x%08x", "empei_i_field_CPB_LINK_SCH_TS1_set", value );

    /* (0x00000080 bits 7:4) field CPB_LINK_SCH_TS1 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
    _empei_i_reg_CPB_LSC_LOW_field_set( LOG_CALLER_ARGS
                                        b,
                                        h,
                                        EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS1_MSK,
                                        EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS1_OFF,
                                        value);
}


#ifndef empei_i_field_CPB_LINK_SCH_TS1_get
#define empei_i_field_CPB_LINK_SCH_TS1_get( b, h ) \
       _empei_i_field_CPB_LINK_SCH_TS1_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_CPB_LINK_SCH_TS1_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000080 bits 7:4) field CPB_LINK_SCH_TS1 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
    reg_value = _empei_i_reg_CPB_LSC_LOW_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS1_MSK) >> EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS1_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_CPB_LINK_SCH_TS1_get", value );

    return value;
}

#ifndef empei_i_field_range_CPB_LINK_SCH_TS1_set
#define empei_i_field_range_CPB_LINK_SCH_TS1_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_CPB_LINK_SCH_TS1_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_CPB_LINK_SCH_TS1_set( LOG_CALLER_DEFN
                                                              empei_i_buffer_t *b,
                                                              empei_i_handle_t *h,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_CPB_LINK_SCH_TS1_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_CPB_LINK_SCH_TS1_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_CPB_LINK_SCH_TS1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000080 bits 7:4) field CPB_LINK_SCH_TS1 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 4) {
            subfield_offset = start_bit - 4;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  4 - start_bit;
            subfield_start_bit = 4;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000080 bits 7:4) field CPB_LINK_SCH_TS1 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
        _empei_i_reg_CPB_LSC_LOW_field_set( LOG_CALLER_ARGS
                                            b,
                                            h,
                                            subfield_mask << (EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS1_OFF + subfield_offset),
                                            EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS1_OFF + subfield_offset,
                                            value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_CPB_LINK_SCH_TS1_get
#define empei_i_field_range_CPB_LINK_SCH_TS1_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_CPB_LINK_SCH_TS1_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_CPB_LINK_SCH_TS1_get( LOG_CALLER_DEFN
                                                                empei_i_buffer_t *b,
                                                                empei_i_handle_t *h,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_CPB_LINK_SCH_TS1_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_CPB_LINK_SCH_TS1_get", stop_bit, 3 );
    if (start_bit > 4) {
        subfield_offset = start_bit - 4;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 4 - start_bit;
        subfield_start_bit = 4;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000080 bits 7:4) field CPB_LINK_SCH_TS1 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
    reg_value = _empei_i_reg_CPB_LSC_LOW_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS1_MSK)
                  >> EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS1_MSK, EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_CPB_LINK_SCH_TS1_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_CPB_LINK_SCH_TS2_set
#define empei_i_field_CPB_LINK_SCH_TS2_set( b, h, value ) \
       _empei_i_field_CPB_LINK_SCH_TS2_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_CPB_LINK_SCH_TS2_set( LOG_CALLER_DEFN
                                                        empei_i_buffer_t *b,
                                                        empei_i_handle_t *h,
                                                        UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_CPB_LINK_SCH_TS2_set", value, 15);
    IOLOG( "%s <= 0x%08x", "empei_i_field_CPB_LINK_SCH_TS2_set", value );

    /* (0x00000080 bits 11:8) field CPB_LINK_SCH_TS2 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
    _empei_i_reg_CPB_LSC_LOW_field_set( LOG_CALLER_ARGS
                                        b,
                                        h,
                                        EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS2_MSK,
                                        EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS2_OFF,
                                        value);
}


#ifndef empei_i_field_CPB_LINK_SCH_TS2_get
#define empei_i_field_CPB_LINK_SCH_TS2_get( b, h ) \
       _empei_i_field_CPB_LINK_SCH_TS2_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_CPB_LINK_SCH_TS2_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000080 bits 11:8) field CPB_LINK_SCH_TS2 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
    reg_value = _empei_i_reg_CPB_LSC_LOW_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS2_MSK) >> EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS2_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_CPB_LINK_SCH_TS2_get", value );

    return value;
}

#ifndef empei_i_field_range_CPB_LINK_SCH_TS2_set
#define empei_i_field_range_CPB_LINK_SCH_TS2_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_CPB_LINK_SCH_TS2_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_CPB_LINK_SCH_TS2_set( LOG_CALLER_DEFN
                                                              empei_i_buffer_t *b,
                                                              empei_i_handle_t *h,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_CPB_LINK_SCH_TS2_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_CPB_LINK_SCH_TS2_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_CPB_LINK_SCH_TS2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000080 bits 11:8) field CPB_LINK_SCH_TS2 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 8) {
            subfield_offset = start_bit - 8;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  8 - start_bit;
            subfield_start_bit = 8;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000080 bits 11:8) field CPB_LINK_SCH_TS2 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
        _empei_i_reg_CPB_LSC_LOW_field_set( LOG_CALLER_ARGS
                                            b,
                                            h,
                                            subfield_mask << (EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS2_OFF + subfield_offset),
                                            EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS2_OFF + subfield_offset,
                                            value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_CPB_LINK_SCH_TS2_get
#define empei_i_field_range_CPB_LINK_SCH_TS2_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_CPB_LINK_SCH_TS2_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_CPB_LINK_SCH_TS2_get( LOG_CALLER_DEFN
                                                                empei_i_buffer_t *b,
                                                                empei_i_handle_t *h,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_CPB_LINK_SCH_TS2_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_CPB_LINK_SCH_TS2_get", stop_bit, 3 );
    if (start_bit > 8) {
        subfield_offset = start_bit - 8;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 8 - start_bit;
        subfield_start_bit = 8;
    }
    if (stop_bit < 11) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 11;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000080 bits 11:8) field CPB_LINK_SCH_TS2 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
    reg_value = _empei_i_reg_CPB_LSC_LOW_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS2_MSK)
                  >> EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS2_MSK, EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_CPB_LINK_SCH_TS2_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_CPB_LINK_SCH_TS3_set
#define empei_i_field_CPB_LINK_SCH_TS3_set( b, h, value ) \
       _empei_i_field_CPB_LINK_SCH_TS3_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_CPB_LINK_SCH_TS3_set( LOG_CALLER_DEFN
                                                        empei_i_buffer_t *b,
                                                        empei_i_handle_t *h,
                                                        UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_CPB_LINK_SCH_TS3_set", value, 15);
    IOLOG( "%s <= 0x%08x", "empei_i_field_CPB_LINK_SCH_TS3_set", value );

    /* (0x00000080 bits 15:12) field CPB_LINK_SCH_TS3 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
    _empei_i_reg_CPB_LSC_LOW_field_set( LOG_CALLER_ARGS
                                        b,
                                        h,
                                        EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS3_MSK,
                                        EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS3_OFF,
                                        value);
}


#ifndef empei_i_field_CPB_LINK_SCH_TS3_get
#define empei_i_field_CPB_LINK_SCH_TS3_get( b, h ) \
       _empei_i_field_CPB_LINK_SCH_TS3_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_CPB_LINK_SCH_TS3_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000080 bits 15:12) field CPB_LINK_SCH_TS3 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
    reg_value = _empei_i_reg_CPB_LSC_LOW_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS3_MSK) >> EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS3_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_CPB_LINK_SCH_TS3_get", value );

    return value;
}

#ifndef empei_i_field_range_CPB_LINK_SCH_TS3_set
#define empei_i_field_range_CPB_LINK_SCH_TS3_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_CPB_LINK_SCH_TS3_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_CPB_LINK_SCH_TS3_set( LOG_CALLER_DEFN
                                                              empei_i_buffer_t *b,
                                                              empei_i_handle_t *h,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_CPB_LINK_SCH_TS3_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_CPB_LINK_SCH_TS3_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_CPB_LINK_SCH_TS3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000080 bits 15:12) field CPB_LINK_SCH_TS3 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 12) {
            subfield_offset = start_bit - 12;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  12 - start_bit;
            subfield_start_bit = 12;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000080 bits 15:12) field CPB_LINK_SCH_TS3 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
        _empei_i_reg_CPB_LSC_LOW_field_set( LOG_CALLER_ARGS
                                            b,
                                            h,
                                            subfield_mask << (EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS3_OFF + subfield_offset),
                                            EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS3_OFF + subfield_offset,
                                            value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_CPB_LINK_SCH_TS3_get
#define empei_i_field_range_CPB_LINK_SCH_TS3_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_CPB_LINK_SCH_TS3_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_CPB_LINK_SCH_TS3_get( LOG_CALLER_DEFN
                                                                empei_i_buffer_t *b,
                                                                empei_i_handle_t *h,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_CPB_LINK_SCH_TS3_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_CPB_LINK_SCH_TS3_get", stop_bit, 3 );
    if (start_bit > 12) {
        subfield_offset = start_bit - 12;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 12 - start_bit;
        subfield_start_bit = 12;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000080 bits 15:12) field CPB_LINK_SCH_TS3 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
    reg_value = _empei_i_reg_CPB_LSC_LOW_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS3_MSK)
                  >> EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS3_MSK, EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_CPB_LINK_SCH_TS3_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_CPB_LINK_SCH_TS4_set
#define empei_i_field_CPB_LINK_SCH_TS4_set( b, h, value ) \
       _empei_i_field_CPB_LINK_SCH_TS4_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_CPB_LINK_SCH_TS4_set( LOG_CALLER_DEFN
                                                        empei_i_buffer_t *b,
                                                        empei_i_handle_t *h,
                                                        UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_CPB_LINK_SCH_TS4_set", value, 15);
    IOLOG( "%s <= 0x%08x", "empei_i_field_CPB_LINK_SCH_TS4_set", value );

    /* (0x00000080 bits 19:16) field CPB_LINK_SCH_TS4 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
    _empei_i_reg_CPB_LSC_LOW_field_set( LOG_CALLER_ARGS
                                        b,
                                        h,
                                        EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS4_MSK,
                                        EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS4_OFF,
                                        value);
}


#ifndef empei_i_field_CPB_LINK_SCH_TS4_get
#define empei_i_field_CPB_LINK_SCH_TS4_get( b, h ) \
       _empei_i_field_CPB_LINK_SCH_TS4_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_CPB_LINK_SCH_TS4_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000080 bits 19:16) field CPB_LINK_SCH_TS4 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
    reg_value = _empei_i_reg_CPB_LSC_LOW_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS4_MSK) >> EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS4_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_CPB_LINK_SCH_TS4_get", value );

    return value;
}

#ifndef empei_i_field_range_CPB_LINK_SCH_TS4_set
#define empei_i_field_range_CPB_LINK_SCH_TS4_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_CPB_LINK_SCH_TS4_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_CPB_LINK_SCH_TS4_set( LOG_CALLER_DEFN
                                                              empei_i_buffer_t *b,
                                                              empei_i_handle_t *h,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_CPB_LINK_SCH_TS4_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_CPB_LINK_SCH_TS4_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_CPB_LINK_SCH_TS4_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000080 bits 19:16) field CPB_LINK_SCH_TS4 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 16) {
            subfield_offset = start_bit - 16;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  16 - start_bit;
            subfield_start_bit = 16;
        }
        if (stop_bit < 19) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 19;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000080 bits 19:16) field CPB_LINK_SCH_TS4 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
        _empei_i_reg_CPB_LSC_LOW_field_set( LOG_CALLER_ARGS
                                            b,
                                            h,
                                            subfield_mask << (EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS4_OFF + subfield_offset),
                                            EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS4_OFF + subfield_offset,
                                            value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_CPB_LINK_SCH_TS4_get
#define empei_i_field_range_CPB_LINK_SCH_TS4_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_CPB_LINK_SCH_TS4_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_CPB_LINK_SCH_TS4_get( LOG_CALLER_DEFN
                                                                empei_i_buffer_t *b,
                                                                empei_i_handle_t *h,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_CPB_LINK_SCH_TS4_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_CPB_LINK_SCH_TS4_get", stop_bit, 3 );
    if (start_bit > 16) {
        subfield_offset = start_bit - 16;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 16 - start_bit;
        subfield_start_bit = 16;
    }
    if (stop_bit < 19) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 19;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000080 bits 19:16) field CPB_LINK_SCH_TS4 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
    reg_value = _empei_i_reg_CPB_LSC_LOW_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS4_MSK)
                  >> EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS4_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS4_MSK, EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS4_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_CPB_LINK_SCH_TS4_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_CPB_LINK_SCH_TS5_set
#define empei_i_field_CPB_LINK_SCH_TS5_set( b, h, value ) \
       _empei_i_field_CPB_LINK_SCH_TS5_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_CPB_LINK_SCH_TS5_set( LOG_CALLER_DEFN
                                                        empei_i_buffer_t *b,
                                                        empei_i_handle_t *h,
                                                        UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_CPB_LINK_SCH_TS5_set", value, 15);
    IOLOG( "%s <= 0x%08x", "empei_i_field_CPB_LINK_SCH_TS5_set", value );

    /* (0x00000080 bits 23:20) field CPB_LINK_SCH_TS5 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
    _empei_i_reg_CPB_LSC_LOW_field_set( LOG_CALLER_ARGS
                                        b,
                                        h,
                                        EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS5_MSK,
                                        EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS5_OFF,
                                        value);
}


#ifndef empei_i_field_CPB_LINK_SCH_TS5_get
#define empei_i_field_CPB_LINK_SCH_TS5_get( b, h ) \
       _empei_i_field_CPB_LINK_SCH_TS5_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_CPB_LINK_SCH_TS5_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000080 bits 23:20) field CPB_LINK_SCH_TS5 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
    reg_value = _empei_i_reg_CPB_LSC_LOW_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS5_MSK) >> EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS5_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_CPB_LINK_SCH_TS5_get", value );

    return value;
}

#ifndef empei_i_field_range_CPB_LINK_SCH_TS5_set
#define empei_i_field_range_CPB_LINK_SCH_TS5_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_CPB_LINK_SCH_TS5_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_CPB_LINK_SCH_TS5_set( LOG_CALLER_DEFN
                                                              empei_i_buffer_t *b,
                                                              empei_i_handle_t *h,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_CPB_LINK_SCH_TS5_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_CPB_LINK_SCH_TS5_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_CPB_LINK_SCH_TS5_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000080 bits 23:20) field CPB_LINK_SCH_TS5 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 20) {
            subfield_offset = start_bit - 20;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  20 - start_bit;
            subfield_start_bit = 20;
        }
        if (stop_bit < 23) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 23;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000080 bits 23:20) field CPB_LINK_SCH_TS5 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
        _empei_i_reg_CPB_LSC_LOW_field_set( LOG_CALLER_ARGS
                                            b,
                                            h,
                                            subfield_mask << (EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS5_OFF + subfield_offset),
                                            EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS5_OFF + subfield_offset,
                                            value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_CPB_LINK_SCH_TS5_get
#define empei_i_field_range_CPB_LINK_SCH_TS5_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_CPB_LINK_SCH_TS5_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_CPB_LINK_SCH_TS5_get( LOG_CALLER_DEFN
                                                                empei_i_buffer_t *b,
                                                                empei_i_handle_t *h,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_CPB_LINK_SCH_TS5_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_CPB_LINK_SCH_TS5_get", stop_bit, 3 );
    if (start_bit > 20) {
        subfield_offset = start_bit - 20;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 20 - start_bit;
        subfield_start_bit = 20;
    }
    if (stop_bit < 23) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 23;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000080 bits 23:20) field CPB_LINK_SCH_TS5 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
    reg_value = _empei_i_reg_CPB_LSC_LOW_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS5_MSK)
                  >> EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS5_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS5_MSK, EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS5_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_CPB_LINK_SCH_TS5_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_CPB_LINK_SCH_TS6_set
#define empei_i_field_CPB_LINK_SCH_TS6_set( b, h, value ) \
       _empei_i_field_CPB_LINK_SCH_TS6_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_CPB_LINK_SCH_TS6_set( LOG_CALLER_DEFN
                                                        empei_i_buffer_t *b,
                                                        empei_i_handle_t *h,
                                                        UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_CPB_LINK_SCH_TS6_set", value, 15);
    IOLOG( "%s <= 0x%08x", "empei_i_field_CPB_LINK_SCH_TS6_set", value );

    /* (0x00000080 bits 27:24) field CPB_LINK_SCH_TS6 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
    _empei_i_reg_CPB_LSC_LOW_field_set( LOG_CALLER_ARGS
                                        b,
                                        h,
                                        EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS6_MSK,
                                        EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS6_OFF,
                                        value);
}


#ifndef empei_i_field_CPB_LINK_SCH_TS6_get
#define empei_i_field_CPB_LINK_SCH_TS6_get( b, h ) \
       _empei_i_field_CPB_LINK_SCH_TS6_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_CPB_LINK_SCH_TS6_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000080 bits 27:24) field CPB_LINK_SCH_TS6 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
    reg_value = _empei_i_reg_CPB_LSC_LOW_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS6_MSK) >> EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS6_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_CPB_LINK_SCH_TS6_get", value );

    return value;
}

#ifndef empei_i_field_range_CPB_LINK_SCH_TS6_set
#define empei_i_field_range_CPB_LINK_SCH_TS6_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_CPB_LINK_SCH_TS6_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_CPB_LINK_SCH_TS6_set( LOG_CALLER_DEFN
                                                              empei_i_buffer_t *b,
                                                              empei_i_handle_t *h,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_CPB_LINK_SCH_TS6_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_CPB_LINK_SCH_TS6_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_CPB_LINK_SCH_TS6_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000080 bits 27:24) field CPB_LINK_SCH_TS6 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 24) {
            subfield_offset = start_bit - 24;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  24 - start_bit;
            subfield_start_bit = 24;
        }
        if (stop_bit < 27) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 27;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000080 bits 27:24) field CPB_LINK_SCH_TS6 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
        _empei_i_reg_CPB_LSC_LOW_field_set( LOG_CALLER_ARGS
                                            b,
                                            h,
                                            subfield_mask << (EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS6_OFF + subfield_offset),
                                            EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS6_OFF + subfield_offset,
                                            value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_CPB_LINK_SCH_TS6_get
#define empei_i_field_range_CPB_LINK_SCH_TS6_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_CPB_LINK_SCH_TS6_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_CPB_LINK_SCH_TS6_get( LOG_CALLER_DEFN
                                                                empei_i_buffer_t *b,
                                                                empei_i_handle_t *h,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_CPB_LINK_SCH_TS6_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_CPB_LINK_SCH_TS6_get", stop_bit, 3 );
    if (start_bit > 24) {
        subfield_offset = start_bit - 24;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 24 - start_bit;
        subfield_start_bit = 24;
    }
    if (stop_bit < 27) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 27;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000080 bits 27:24) field CPB_LINK_SCH_TS6 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
    reg_value = _empei_i_reg_CPB_LSC_LOW_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS6_MSK)
                  >> EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS6_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS6_MSK, EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS6_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_CPB_LINK_SCH_TS6_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_CPB_LINK_SCH_TS7_set
#define empei_i_field_CPB_LINK_SCH_TS7_set( b, h, value ) \
       _empei_i_field_CPB_LINK_SCH_TS7_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_CPB_LINK_SCH_TS7_set( LOG_CALLER_DEFN
                                                        empei_i_buffer_t *b,
                                                        empei_i_handle_t *h,
                                                        UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_CPB_LINK_SCH_TS7_set", value, 15);
    IOLOG( "%s <= 0x%08x", "empei_i_field_CPB_LINK_SCH_TS7_set", value );

    /* (0x00000080 bits 31:28) field CPB_LINK_SCH_TS7 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
    _empei_i_reg_CPB_LSC_LOW_field_set( LOG_CALLER_ARGS
                                        b,
                                        h,
                                        EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS7_MSK,
                                        EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS7_OFF,
                                        value);
}


#ifndef empei_i_field_CPB_LINK_SCH_TS7_get
#define empei_i_field_CPB_LINK_SCH_TS7_get( b, h ) \
       _empei_i_field_CPB_LINK_SCH_TS7_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_CPB_LINK_SCH_TS7_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000080 bits 31:28) field CPB_LINK_SCH_TS7 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
    reg_value = _empei_i_reg_CPB_LSC_LOW_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS7_MSK) >> EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS7_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_CPB_LINK_SCH_TS7_get", value );

    return value;
}

#ifndef empei_i_field_range_CPB_LINK_SCH_TS7_set
#define empei_i_field_range_CPB_LINK_SCH_TS7_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_CPB_LINK_SCH_TS7_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_CPB_LINK_SCH_TS7_set( LOG_CALLER_DEFN
                                                              empei_i_buffer_t *b,
                                                              empei_i_handle_t *h,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_CPB_LINK_SCH_TS7_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_CPB_LINK_SCH_TS7_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_CPB_LINK_SCH_TS7_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000080 bits 31:28) field CPB_LINK_SCH_TS7 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 28) {
            subfield_offset = start_bit - 28;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  28 - start_bit;
            subfield_start_bit = 28;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000080 bits 31:28) field CPB_LINK_SCH_TS7 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
        _empei_i_reg_CPB_LSC_LOW_field_set( LOG_CALLER_ARGS
                                            b,
                                            h,
                                            subfield_mask << (EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS7_OFF + subfield_offset),
                                            EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS7_OFF + subfield_offset,
                                            value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_CPB_LINK_SCH_TS7_get
#define empei_i_field_range_CPB_LINK_SCH_TS7_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_CPB_LINK_SCH_TS7_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_CPB_LINK_SCH_TS7_get( LOG_CALLER_DEFN
                                                                empei_i_buffer_t *b,
                                                                empei_i_handle_t *h,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_CPB_LINK_SCH_TS7_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_CPB_LINK_SCH_TS7_get", stop_bit, 3 );
    if (start_bit > 28) {
        subfield_offset = start_bit - 28;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 28 - start_bit;
        subfield_start_bit = 28;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000080 bits 31:28) field CPB_LINK_SCH_TS7 of register PMC_EMPEI120_I_REG_CPB_LSC_LOW */
    reg_value = _empei_i_reg_CPB_LSC_LOW_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS7_MSK)
                  >> EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS7_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS7_MSK, EMPEI120_I_REG_CPB_LSC_LOW_BIT_CPB_LINK_SCH_TS7_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_CPB_LINK_SCH_TS7_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_CPB_LINK_SCH_TS8_set
#define empei_i_field_CPB_LINK_SCH_TS8_set( b, h, value ) \
       _empei_i_field_CPB_LINK_SCH_TS8_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_CPB_LINK_SCH_TS8_set( LOG_CALLER_DEFN
                                                        empei_i_buffer_t *b,
                                                        empei_i_handle_t *h,
                                                        UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_CPB_LINK_SCH_TS8_set", value, 15);
    IOLOG( "%s <= 0x%08x", "empei_i_field_CPB_LINK_SCH_TS8_set", value );

    /* (0x00000084 bits 3:0) field CPB_LINK_SCH_TS8 of register PMC_EMPEI120_I_REG_CPB_USC_HIGH */
    _empei_i_reg_CPB_USC_HIGH_field_set( LOG_CALLER_ARGS
                                         b,
                                         h,
                                         EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS8_MSK,
                                         EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS8_OFF,
                                         value);
}


#ifndef empei_i_field_CPB_LINK_SCH_TS8_get
#define empei_i_field_CPB_LINK_SCH_TS8_get( b, h ) \
       _empei_i_field_CPB_LINK_SCH_TS8_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_CPB_LINK_SCH_TS8_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000084 bits 3:0) field CPB_LINK_SCH_TS8 of register PMC_EMPEI120_I_REG_CPB_USC_HIGH */
    reg_value = _empei_i_reg_CPB_USC_HIGH_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS8_MSK) >> EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS8_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_CPB_LINK_SCH_TS8_get", value );

    return value;
}

#ifndef empei_i_field_range_CPB_LINK_SCH_TS8_set
#define empei_i_field_range_CPB_LINK_SCH_TS8_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_CPB_LINK_SCH_TS8_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_CPB_LINK_SCH_TS8_set( LOG_CALLER_DEFN
                                                              empei_i_buffer_t *b,
                                                              empei_i_handle_t *h,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_CPB_LINK_SCH_TS8_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_CPB_LINK_SCH_TS8_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_CPB_LINK_SCH_TS8_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000084 bits 3:0) field CPB_LINK_SCH_TS8 of register PMC_EMPEI120_I_REG_CPB_USC_HIGH */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000084 bits 3:0) field CPB_LINK_SCH_TS8 of register PMC_EMPEI120_I_REG_CPB_USC_HIGH */
        _empei_i_reg_CPB_USC_HIGH_field_set( LOG_CALLER_ARGS
                                             b,
                                             h,
                                             subfield_mask << (EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS8_OFF + subfield_offset),
                                             EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS8_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_CPB_LINK_SCH_TS8_get
#define empei_i_field_range_CPB_LINK_SCH_TS8_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_CPB_LINK_SCH_TS8_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_CPB_LINK_SCH_TS8_get( LOG_CALLER_DEFN
                                                                empei_i_buffer_t *b,
                                                                empei_i_handle_t *h,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_CPB_LINK_SCH_TS8_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_CPB_LINK_SCH_TS8_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000084 bits 3:0) field CPB_LINK_SCH_TS8 of register PMC_EMPEI120_I_REG_CPB_USC_HIGH */
    reg_value = _empei_i_reg_CPB_USC_HIGH_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS8_MSK)
                  >> EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS8_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS8_MSK, EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS8_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_CPB_LINK_SCH_TS8_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_CPB_LINK_SCH_TS9_set
#define empei_i_field_CPB_LINK_SCH_TS9_set( b, h, value ) \
       _empei_i_field_CPB_LINK_SCH_TS9_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_CPB_LINK_SCH_TS9_set( LOG_CALLER_DEFN
                                                        empei_i_buffer_t *b,
                                                        empei_i_handle_t *h,
                                                        UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_CPB_LINK_SCH_TS9_set", value, 15);
    IOLOG( "%s <= 0x%08x", "empei_i_field_CPB_LINK_SCH_TS9_set", value );

    /* (0x00000084 bits 7:4) field CPB_LINK_SCH_TS9 of register PMC_EMPEI120_I_REG_CPB_USC_HIGH */
    _empei_i_reg_CPB_USC_HIGH_field_set( LOG_CALLER_ARGS
                                         b,
                                         h,
                                         EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS9_MSK,
                                         EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS9_OFF,
                                         value);
}


#ifndef empei_i_field_CPB_LINK_SCH_TS9_get
#define empei_i_field_CPB_LINK_SCH_TS9_get( b, h ) \
       _empei_i_field_CPB_LINK_SCH_TS9_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_CPB_LINK_SCH_TS9_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000084 bits 7:4) field CPB_LINK_SCH_TS9 of register PMC_EMPEI120_I_REG_CPB_USC_HIGH */
    reg_value = _empei_i_reg_CPB_USC_HIGH_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS9_MSK) >> EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS9_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_CPB_LINK_SCH_TS9_get", value );

    return value;
}

#ifndef empei_i_field_range_CPB_LINK_SCH_TS9_set
#define empei_i_field_range_CPB_LINK_SCH_TS9_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_CPB_LINK_SCH_TS9_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_CPB_LINK_SCH_TS9_set( LOG_CALLER_DEFN
                                                              empei_i_buffer_t *b,
                                                              empei_i_handle_t *h,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_CPB_LINK_SCH_TS9_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_CPB_LINK_SCH_TS9_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_CPB_LINK_SCH_TS9_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000084 bits 7:4) field CPB_LINK_SCH_TS9 of register PMC_EMPEI120_I_REG_CPB_USC_HIGH */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 4) {
            subfield_offset = start_bit - 4;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  4 - start_bit;
            subfield_start_bit = 4;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000084 bits 7:4) field CPB_LINK_SCH_TS9 of register PMC_EMPEI120_I_REG_CPB_USC_HIGH */
        _empei_i_reg_CPB_USC_HIGH_field_set( LOG_CALLER_ARGS
                                             b,
                                             h,
                                             subfield_mask << (EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS9_OFF + subfield_offset),
                                             EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS9_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_CPB_LINK_SCH_TS9_get
#define empei_i_field_range_CPB_LINK_SCH_TS9_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_CPB_LINK_SCH_TS9_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_CPB_LINK_SCH_TS9_get( LOG_CALLER_DEFN
                                                                empei_i_buffer_t *b,
                                                                empei_i_handle_t *h,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_CPB_LINK_SCH_TS9_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_CPB_LINK_SCH_TS9_get", stop_bit, 3 );
    if (start_bit > 4) {
        subfield_offset = start_bit - 4;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 4 - start_bit;
        subfield_start_bit = 4;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000084 bits 7:4) field CPB_LINK_SCH_TS9 of register PMC_EMPEI120_I_REG_CPB_USC_HIGH */
    reg_value = _empei_i_reg_CPB_USC_HIGH_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS9_MSK)
                  >> EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS9_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS9_MSK, EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS9_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_CPB_LINK_SCH_TS9_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_CPB_LINK_SCH_TS10_set
#define empei_i_field_CPB_LINK_SCH_TS10_set( b, h, value ) \
       _empei_i_field_CPB_LINK_SCH_TS10_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_CPB_LINK_SCH_TS10_set( LOG_CALLER_DEFN
                                                         empei_i_buffer_t *b,
                                                         empei_i_handle_t *h,
                                                         UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_CPB_LINK_SCH_TS10_set", value, 15);
    IOLOG( "%s <= 0x%08x", "empei_i_field_CPB_LINK_SCH_TS10_set", value );

    /* (0x00000084 bits 11:8) field CPB_LINK_SCH_TS10 of register PMC_EMPEI120_I_REG_CPB_USC_HIGH */
    _empei_i_reg_CPB_USC_HIGH_field_set( LOG_CALLER_ARGS
                                         b,
                                         h,
                                         EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS10_MSK,
                                         EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS10_OFF,
                                         value);
}


#ifndef empei_i_field_CPB_LINK_SCH_TS10_get
#define empei_i_field_CPB_LINK_SCH_TS10_get( b, h ) \
       _empei_i_field_CPB_LINK_SCH_TS10_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_CPB_LINK_SCH_TS10_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000084 bits 11:8) field CPB_LINK_SCH_TS10 of register PMC_EMPEI120_I_REG_CPB_USC_HIGH */
    reg_value = _empei_i_reg_CPB_USC_HIGH_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS10_MSK) >> EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS10_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_CPB_LINK_SCH_TS10_get", value );

    return value;
}

#ifndef empei_i_field_range_CPB_LINK_SCH_TS10_set
#define empei_i_field_range_CPB_LINK_SCH_TS10_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_CPB_LINK_SCH_TS10_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_CPB_LINK_SCH_TS10_set( LOG_CALLER_DEFN
                                                               empei_i_buffer_t *b,
                                                               empei_i_handle_t *h,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_CPB_LINK_SCH_TS10_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_CPB_LINK_SCH_TS10_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_CPB_LINK_SCH_TS10_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000084 bits 11:8) field CPB_LINK_SCH_TS10 of register PMC_EMPEI120_I_REG_CPB_USC_HIGH */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 8) {
            subfield_offset = start_bit - 8;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  8 - start_bit;
            subfield_start_bit = 8;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000084 bits 11:8) field CPB_LINK_SCH_TS10 of register PMC_EMPEI120_I_REG_CPB_USC_HIGH */
        _empei_i_reg_CPB_USC_HIGH_field_set( LOG_CALLER_ARGS
                                             b,
                                             h,
                                             subfield_mask << (EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS10_OFF + subfield_offset),
                                             EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS10_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_CPB_LINK_SCH_TS10_get
#define empei_i_field_range_CPB_LINK_SCH_TS10_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_CPB_LINK_SCH_TS10_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_CPB_LINK_SCH_TS10_get( LOG_CALLER_DEFN
                                                                 empei_i_buffer_t *b,
                                                                 empei_i_handle_t *h,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_CPB_LINK_SCH_TS10_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_CPB_LINK_SCH_TS10_get", stop_bit, 3 );
    if (start_bit > 8) {
        subfield_offset = start_bit - 8;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 8 - start_bit;
        subfield_start_bit = 8;
    }
    if (stop_bit < 11) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 11;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000084 bits 11:8) field CPB_LINK_SCH_TS10 of register PMC_EMPEI120_I_REG_CPB_USC_HIGH */
    reg_value = _empei_i_reg_CPB_USC_HIGH_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS10_MSK)
                  >> EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS10_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS10_MSK, EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS10_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_CPB_LINK_SCH_TS10_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_CPB_LINK_SCH_TS11_set
#define empei_i_field_CPB_LINK_SCH_TS11_set( b, h, value ) \
       _empei_i_field_CPB_LINK_SCH_TS11_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_CPB_LINK_SCH_TS11_set( LOG_CALLER_DEFN
                                                         empei_i_buffer_t *b,
                                                         empei_i_handle_t *h,
                                                         UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_CPB_LINK_SCH_TS11_set", value, 15);
    IOLOG( "%s <= 0x%08x", "empei_i_field_CPB_LINK_SCH_TS11_set", value );

    /* (0x00000084 bits 15:12) field CPB_LINK_SCH_TS11 of register PMC_EMPEI120_I_REG_CPB_USC_HIGH */
    _empei_i_reg_CPB_USC_HIGH_field_set( LOG_CALLER_ARGS
                                         b,
                                         h,
                                         EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS11_MSK,
                                         EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS11_OFF,
                                         value);
}


#ifndef empei_i_field_CPB_LINK_SCH_TS11_get
#define empei_i_field_CPB_LINK_SCH_TS11_get( b, h ) \
       _empei_i_field_CPB_LINK_SCH_TS11_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_CPB_LINK_SCH_TS11_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000084 bits 15:12) field CPB_LINK_SCH_TS11 of register PMC_EMPEI120_I_REG_CPB_USC_HIGH */
    reg_value = _empei_i_reg_CPB_USC_HIGH_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS11_MSK) >> EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS11_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_CPB_LINK_SCH_TS11_get", value );

    return value;
}

#ifndef empei_i_field_range_CPB_LINK_SCH_TS11_set
#define empei_i_field_range_CPB_LINK_SCH_TS11_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_CPB_LINK_SCH_TS11_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_CPB_LINK_SCH_TS11_set( LOG_CALLER_DEFN
                                                               empei_i_buffer_t *b,
                                                               empei_i_handle_t *h,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_CPB_LINK_SCH_TS11_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_CPB_LINK_SCH_TS11_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_CPB_LINK_SCH_TS11_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000084 bits 15:12) field CPB_LINK_SCH_TS11 of register PMC_EMPEI120_I_REG_CPB_USC_HIGH */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 12) {
            subfield_offset = start_bit - 12;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  12 - start_bit;
            subfield_start_bit = 12;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000084 bits 15:12) field CPB_LINK_SCH_TS11 of register PMC_EMPEI120_I_REG_CPB_USC_HIGH */
        _empei_i_reg_CPB_USC_HIGH_field_set( LOG_CALLER_ARGS
                                             b,
                                             h,
                                             subfield_mask << (EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS11_OFF + subfield_offset),
                                             EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS11_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_CPB_LINK_SCH_TS11_get
#define empei_i_field_range_CPB_LINK_SCH_TS11_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_CPB_LINK_SCH_TS11_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_CPB_LINK_SCH_TS11_get( LOG_CALLER_DEFN
                                                                 empei_i_buffer_t *b,
                                                                 empei_i_handle_t *h,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_CPB_LINK_SCH_TS11_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_CPB_LINK_SCH_TS11_get", stop_bit, 3 );
    if (start_bit > 12) {
        subfield_offset = start_bit - 12;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 12 - start_bit;
        subfield_start_bit = 12;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000084 bits 15:12) field CPB_LINK_SCH_TS11 of register PMC_EMPEI120_I_REG_CPB_USC_HIGH */
    reg_value = _empei_i_reg_CPB_USC_HIGH_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS11_MSK)
                  >> EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS11_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS11_MSK, EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_TS11_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_CPB_LINK_SCH_TS11_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_CPB_LINK_SCH_OFFSET_EXTRACT_set
#define empei_i_field_CPB_LINK_SCH_OFFSET_EXTRACT_set( b, h, value ) \
       _empei_i_field_CPB_LINK_SCH_OFFSET_EXTRACT_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_CPB_LINK_SCH_OFFSET_EXTRACT_set( LOG_CALLER_DEFN
                                                                   empei_i_buffer_t *b,
                                                                   empei_i_handle_t *h,
                                                                   UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_CPB_LINK_SCH_OFFSET_EXTRACT_set", value, 15);
    IOLOG( "%s <= 0x%08x", "empei_i_field_CPB_LINK_SCH_OFFSET_EXTRACT_set", value );

    /* (0x00000084 bits 19:16) field CPB_LINK_SCH_OFFSET_EXTRACT of register PMC_EMPEI120_I_REG_CPB_USC_HIGH */
    _empei_i_reg_CPB_USC_HIGH_field_set( LOG_CALLER_ARGS
                                         b,
                                         h,
                                         EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_OFFSET_EXTRACT_MSK,
                                         EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_OFFSET_EXTRACT_OFF,
                                         value);
}


#ifndef empei_i_field_CPB_LINK_SCH_OFFSET_EXTRACT_get
#define empei_i_field_CPB_LINK_SCH_OFFSET_EXTRACT_get( b, h ) \
       _empei_i_field_CPB_LINK_SCH_OFFSET_EXTRACT_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_CPB_LINK_SCH_OFFSET_EXTRACT_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000084 bits 19:16) field CPB_LINK_SCH_OFFSET_EXTRACT of register PMC_EMPEI120_I_REG_CPB_USC_HIGH */
    reg_value = _empei_i_reg_CPB_USC_HIGH_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_OFFSET_EXTRACT_MSK) >> EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_OFFSET_EXTRACT_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_CPB_LINK_SCH_OFFSET_EXTRACT_get", value );

    return value;
}

#ifndef empei_i_field_range_CPB_LINK_SCH_OFFSET_EXTRACT_set
#define empei_i_field_range_CPB_LINK_SCH_OFFSET_EXTRACT_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_CPB_LINK_SCH_OFFSET_EXTRACT_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_CPB_LINK_SCH_OFFSET_EXTRACT_set( LOG_CALLER_DEFN
                                                                         empei_i_buffer_t *b,
                                                                         empei_i_handle_t *h,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_CPB_LINK_SCH_OFFSET_EXTRACT_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_CPB_LINK_SCH_OFFSET_EXTRACT_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_CPB_LINK_SCH_OFFSET_EXTRACT_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000084 bits 19:16) field CPB_LINK_SCH_OFFSET_EXTRACT of register PMC_EMPEI120_I_REG_CPB_USC_HIGH */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 16) {
            subfield_offset = start_bit - 16;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  16 - start_bit;
            subfield_start_bit = 16;
        }
        if (stop_bit < 19) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 19;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000084 bits 19:16) field CPB_LINK_SCH_OFFSET_EXTRACT of register PMC_EMPEI120_I_REG_CPB_USC_HIGH */
        _empei_i_reg_CPB_USC_HIGH_field_set( LOG_CALLER_ARGS
                                             b,
                                             h,
                                             subfield_mask << (EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_OFFSET_EXTRACT_OFF + subfield_offset),
                                             EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_OFFSET_EXTRACT_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_CPB_LINK_SCH_OFFSET_EXTRACT_get
#define empei_i_field_range_CPB_LINK_SCH_OFFSET_EXTRACT_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_CPB_LINK_SCH_OFFSET_EXTRACT_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_CPB_LINK_SCH_OFFSET_EXTRACT_get( LOG_CALLER_DEFN
                                                                           empei_i_buffer_t *b,
                                                                           empei_i_handle_t *h,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_CPB_LINK_SCH_OFFSET_EXTRACT_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_CPB_LINK_SCH_OFFSET_EXTRACT_get", stop_bit, 3 );
    if (start_bit > 16) {
        subfield_offset = start_bit - 16;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 16 - start_bit;
        subfield_start_bit = 16;
    }
    if (stop_bit < 19) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 19;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000084 bits 19:16) field CPB_LINK_SCH_OFFSET_EXTRACT of register PMC_EMPEI120_I_REG_CPB_USC_HIGH */
    reg_value = _empei_i_reg_CPB_USC_HIGH_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_OFFSET_EXTRACT_MSK)
                  >> EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_OFFSET_EXTRACT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_OFFSET_EXTRACT_MSK, EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_OFFSET_EXTRACT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_CPB_LINK_SCH_OFFSET_EXTRACT_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_CPB_LINK_SCH_LAST_TIMESLOT_set
#define empei_i_field_CPB_LINK_SCH_LAST_TIMESLOT_set( b, h, value ) \
       _empei_i_field_CPB_LINK_SCH_LAST_TIMESLOT_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_CPB_LINK_SCH_LAST_TIMESLOT_set( LOG_CALLER_DEFN
                                                                  empei_i_buffer_t *b,
                                                                  empei_i_handle_t *h,
                                                                  UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_CPB_LINK_SCH_LAST_TIMESLOT_set", value, 15);
    IOLOG( "%s <= 0x%08x", "empei_i_field_CPB_LINK_SCH_LAST_TIMESLOT_set", value );

    /* (0x00000084 bits 31:28) field CPB_LINK_SCH_LAST_TIMESLOT of register PMC_EMPEI120_I_REG_CPB_USC_HIGH */
    _empei_i_reg_CPB_USC_HIGH_field_set( LOG_CALLER_ARGS
                                         b,
                                         h,
                                         EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_LAST_TIMESLOT_MSK,
                                         EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_LAST_TIMESLOT_OFF,
                                         value);
}


#ifndef empei_i_field_CPB_LINK_SCH_LAST_TIMESLOT_get
#define empei_i_field_CPB_LINK_SCH_LAST_TIMESLOT_get( b, h ) \
       _empei_i_field_CPB_LINK_SCH_LAST_TIMESLOT_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_CPB_LINK_SCH_LAST_TIMESLOT_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000084 bits 31:28) field CPB_LINK_SCH_LAST_TIMESLOT of register PMC_EMPEI120_I_REG_CPB_USC_HIGH */
    reg_value = _empei_i_reg_CPB_USC_HIGH_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_LAST_TIMESLOT_MSK) >> EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_LAST_TIMESLOT_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_CPB_LINK_SCH_LAST_TIMESLOT_get", value );

    return value;
}

#ifndef empei_i_field_range_CPB_LINK_SCH_LAST_TIMESLOT_set
#define empei_i_field_range_CPB_LINK_SCH_LAST_TIMESLOT_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_CPB_LINK_SCH_LAST_TIMESLOT_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_CPB_LINK_SCH_LAST_TIMESLOT_set( LOG_CALLER_DEFN
                                                                        empei_i_buffer_t *b,
                                                                        empei_i_handle_t *h,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit,
                                                                        UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_CPB_LINK_SCH_LAST_TIMESLOT_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_CPB_LINK_SCH_LAST_TIMESLOT_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_CPB_LINK_SCH_LAST_TIMESLOT_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000084 bits 31:28) field CPB_LINK_SCH_LAST_TIMESLOT of register PMC_EMPEI120_I_REG_CPB_USC_HIGH */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 28) {
            subfield_offset = start_bit - 28;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  28 - start_bit;
            subfield_start_bit = 28;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000084 bits 31:28) field CPB_LINK_SCH_LAST_TIMESLOT of register PMC_EMPEI120_I_REG_CPB_USC_HIGH */
        _empei_i_reg_CPB_USC_HIGH_field_set( LOG_CALLER_ARGS
                                             b,
                                             h,
                                             subfield_mask << (EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_LAST_TIMESLOT_OFF + subfield_offset),
                                             EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_LAST_TIMESLOT_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_CPB_LINK_SCH_LAST_TIMESLOT_get
#define empei_i_field_range_CPB_LINK_SCH_LAST_TIMESLOT_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_CPB_LINK_SCH_LAST_TIMESLOT_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_CPB_LINK_SCH_LAST_TIMESLOT_get( LOG_CALLER_DEFN
                                                                          empei_i_buffer_t *b,
                                                                          empei_i_handle_t *h,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_CPB_LINK_SCH_LAST_TIMESLOT_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_CPB_LINK_SCH_LAST_TIMESLOT_get", stop_bit, 3 );
    if (start_bit > 28) {
        subfield_offset = start_bit - 28;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 28 - start_bit;
        subfield_start_bit = 28;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000084 bits 31:28) field CPB_LINK_SCH_LAST_TIMESLOT of register PMC_EMPEI120_I_REG_CPB_USC_HIGH */
    reg_value = _empei_i_reg_CPB_USC_HIGH_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_LAST_TIMESLOT_MSK)
                  >> EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_LAST_TIMESLOT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_LAST_TIMESLOT_MSK, EMPEI120_I_REG_CPB_USC_HIGH_BIT_CPB_LINK_SCH_LAST_TIMESLOT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_CPB_LINK_SCH_LAST_TIMESLOT_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_INTL_LINK_SCH_TS0_set
#define empei_i_field_INTL_LINK_SCH_TS0_set( b, h, value ) \
       _empei_i_field_INTL_LINK_SCH_TS0_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_INTL_LINK_SCH_TS0_set( LOG_CALLER_DEFN
                                                         empei_i_buffer_t *b,
                                                         empei_i_handle_t *h,
                                                         UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_INTL_LINK_SCH_TS0_set", value, 15);
    IOLOG( "%s <= 0x%08x", "empei_i_field_INTL_LINK_SCH_TS0_set", value );

    /* (0x00000088 bits 3:0) field INTL_LINK_SCH_TS0 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
    _empei_i_reg_INTL_LSC_LOW_field_set( LOG_CALLER_ARGS
                                         b,
                                         h,
                                         EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS0_MSK,
                                         EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS0_OFF,
                                         value);
}


#ifndef empei_i_field_INTL_LINK_SCH_TS0_get
#define empei_i_field_INTL_LINK_SCH_TS0_get( b, h ) \
       _empei_i_field_INTL_LINK_SCH_TS0_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_INTL_LINK_SCH_TS0_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000088 bits 3:0) field INTL_LINK_SCH_TS0 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
    reg_value = _empei_i_reg_INTL_LSC_LOW_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS0_MSK) >> EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS0_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_INTL_LINK_SCH_TS0_get", value );

    return value;
}

#ifndef empei_i_field_range_INTL_LINK_SCH_TS0_set
#define empei_i_field_range_INTL_LINK_SCH_TS0_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_INTL_LINK_SCH_TS0_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_INTL_LINK_SCH_TS0_set( LOG_CALLER_DEFN
                                                               empei_i_buffer_t *b,
                                                               empei_i_handle_t *h,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INTL_LINK_SCH_TS0_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INTL_LINK_SCH_TS0_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INTL_LINK_SCH_TS0_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000088 bits 3:0) field INTL_LINK_SCH_TS0 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000088 bits 3:0) field INTL_LINK_SCH_TS0 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
        _empei_i_reg_INTL_LSC_LOW_field_set( LOG_CALLER_ARGS
                                             b,
                                             h,
                                             subfield_mask << (EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS0_OFF + subfield_offset),
                                             EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS0_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_INTL_LINK_SCH_TS0_get
#define empei_i_field_range_INTL_LINK_SCH_TS0_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_INTL_LINK_SCH_TS0_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_INTL_LINK_SCH_TS0_get( LOG_CALLER_DEFN
                                                                 empei_i_buffer_t *b,
                                                                 empei_i_handle_t *h,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INTL_LINK_SCH_TS0_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INTL_LINK_SCH_TS0_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000088 bits 3:0) field INTL_LINK_SCH_TS0 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
    reg_value = _empei_i_reg_INTL_LSC_LOW_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS0_MSK)
                  >> EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS0_MSK, EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INTL_LINK_SCH_TS0_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_INTL_LINK_SCH_TS1_set
#define empei_i_field_INTL_LINK_SCH_TS1_set( b, h, value ) \
       _empei_i_field_INTL_LINK_SCH_TS1_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_INTL_LINK_SCH_TS1_set( LOG_CALLER_DEFN
                                                         empei_i_buffer_t *b,
                                                         empei_i_handle_t *h,
                                                         UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_INTL_LINK_SCH_TS1_set", value, 15);
    IOLOG( "%s <= 0x%08x", "empei_i_field_INTL_LINK_SCH_TS1_set", value );

    /* (0x00000088 bits 7:4) field INTL_LINK_SCH_TS1 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
    _empei_i_reg_INTL_LSC_LOW_field_set( LOG_CALLER_ARGS
                                         b,
                                         h,
                                         EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS1_MSK,
                                         EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS1_OFF,
                                         value);
}


#ifndef empei_i_field_INTL_LINK_SCH_TS1_get
#define empei_i_field_INTL_LINK_SCH_TS1_get( b, h ) \
       _empei_i_field_INTL_LINK_SCH_TS1_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_INTL_LINK_SCH_TS1_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000088 bits 7:4) field INTL_LINK_SCH_TS1 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
    reg_value = _empei_i_reg_INTL_LSC_LOW_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS1_MSK) >> EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS1_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_INTL_LINK_SCH_TS1_get", value );

    return value;
}

#ifndef empei_i_field_range_INTL_LINK_SCH_TS1_set
#define empei_i_field_range_INTL_LINK_SCH_TS1_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_INTL_LINK_SCH_TS1_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_INTL_LINK_SCH_TS1_set( LOG_CALLER_DEFN
                                                               empei_i_buffer_t *b,
                                                               empei_i_handle_t *h,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INTL_LINK_SCH_TS1_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INTL_LINK_SCH_TS1_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INTL_LINK_SCH_TS1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000088 bits 7:4) field INTL_LINK_SCH_TS1 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 4) {
            subfield_offset = start_bit - 4;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  4 - start_bit;
            subfield_start_bit = 4;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000088 bits 7:4) field INTL_LINK_SCH_TS1 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
        _empei_i_reg_INTL_LSC_LOW_field_set( LOG_CALLER_ARGS
                                             b,
                                             h,
                                             subfield_mask << (EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS1_OFF + subfield_offset),
                                             EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS1_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_INTL_LINK_SCH_TS1_get
#define empei_i_field_range_INTL_LINK_SCH_TS1_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_INTL_LINK_SCH_TS1_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_INTL_LINK_SCH_TS1_get( LOG_CALLER_DEFN
                                                                 empei_i_buffer_t *b,
                                                                 empei_i_handle_t *h,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INTL_LINK_SCH_TS1_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INTL_LINK_SCH_TS1_get", stop_bit, 3 );
    if (start_bit > 4) {
        subfield_offset = start_bit - 4;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 4 - start_bit;
        subfield_start_bit = 4;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000088 bits 7:4) field INTL_LINK_SCH_TS1 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
    reg_value = _empei_i_reg_INTL_LSC_LOW_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS1_MSK)
                  >> EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS1_MSK, EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INTL_LINK_SCH_TS1_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_INTL_LINK_SCH_TS2_set
#define empei_i_field_INTL_LINK_SCH_TS2_set( b, h, value ) \
       _empei_i_field_INTL_LINK_SCH_TS2_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_INTL_LINK_SCH_TS2_set( LOG_CALLER_DEFN
                                                         empei_i_buffer_t *b,
                                                         empei_i_handle_t *h,
                                                         UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_INTL_LINK_SCH_TS2_set", value, 15);
    IOLOG( "%s <= 0x%08x", "empei_i_field_INTL_LINK_SCH_TS2_set", value );

    /* (0x00000088 bits 11:8) field INTL_LINK_SCH_TS2 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
    _empei_i_reg_INTL_LSC_LOW_field_set( LOG_CALLER_ARGS
                                         b,
                                         h,
                                         EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS2_MSK,
                                         EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS2_OFF,
                                         value);
}


#ifndef empei_i_field_INTL_LINK_SCH_TS2_get
#define empei_i_field_INTL_LINK_SCH_TS2_get( b, h ) \
       _empei_i_field_INTL_LINK_SCH_TS2_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_INTL_LINK_SCH_TS2_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000088 bits 11:8) field INTL_LINK_SCH_TS2 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
    reg_value = _empei_i_reg_INTL_LSC_LOW_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS2_MSK) >> EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS2_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_INTL_LINK_SCH_TS2_get", value );

    return value;
}

#ifndef empei_i_field_range_INTL_LINK_SCH_TS2_set
#define empei_i_field_range_INTL_LINK_SCH_TS2_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_INTL_LINK_SCH_TS2_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_INTL_LINK_SCH_TS2_set( LOG_CALLER_DEFN
                                                               empei_i_buffer_t *b,
                                                               empei_i_handle_t *h,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INTL_LINK_SCH_TS2_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INTL_LINK_SCH_TS2_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INTL_LINK_SCH_TS2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000088 bits 11:8) field INTL_LINK_SCH_TS2 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 8) {
            subfield_offset = start_bit - 8;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  8 - start_bit;
            subfield_start_bit = 8;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000088 bits 11:8) field INTL_LINK_SCH_TS2 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
        _empei_i_reg_INTL_LSC_LOW_field_set( LOG_CALLER_ARGS
                                             b,
                                             h,
                                             subfield_mask << (EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS2_OFF + subfield_offset),
                                             EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS2_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_INTL_LINK_SCH_TS2_get
#define empei_i_field_range_INTL_LINK_SCH_TS2_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_INTL_LINK_SCH_TS2_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_INTL_LINK_SCH_TS2_get( LOG_CALLER_DEFN
                                                                 empei_i_buffer_t *b,
                                                                 empei_i_handle_t *h,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INTL_LINK_SCH_TS2_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INTL_LINK_SCH_TS2_get", stop_bit, 3 );
    if (start_bit > 8) {
        subfield_offset = start_bit - 8;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 8 - start_bit;
        subfield_start_bit = 8;
    }
    if (stop_bit < 11) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 11;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000088 bits 11:8) field INTL_LINK_SCH_TS2 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
    reg_value = _empei_i_reg_INTL_LSC_LOW_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS2_MSK)
                  >> EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS2_MSK, EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INTL_LINK_SCH_TS2_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_INTL_LINK_SCH_TS3_set
#define empei_i_field_INTL_LINK_SCH_TS3_set( b, h, value ) \
       _empei_i_field_INTL_LINK_SCH_TS3_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_INTL_LINK_SCH_TS3_set( LOG_CALLER_DEFN
                                                         empei_i_buffer_t *b,
                                                         empei_i_handle_t *h,
                                                         UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_INTL_LINK_SCH_TS3_set", value, 15);
    IOLOG( "%s <= 0x%08x", "empei_i_field_INTL_LINK_SCH_TS3_set", value );

    /* (0x00000088 bits 15:12) field INTL_LINK_SCH_TS3 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
    _empei_i_reg_INTL_LSC_LOW_field_set( LOG_CALLER_ARGS
                                         b,
                                         h,
                                         EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS3_MSK,
                                         EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS3_OFF,
                                         value);
}


#ifndef empei_i_field_INTL_LINK_SCH_TS3_get
#define empei_i_field_INTL_LINK_SCH_TS3_get( b, h ) \
       _empei_i_field_INTL_LINK_SCH_TS3_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_INTL_LINK_SCH_TS3_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000088 bits 15:12) field INTL_LINK_SCH_TS3 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
    reg_value = _empei_i_reg_INTL_LSC_LOW_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS3_MSK) >> EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS3_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_INTL_LINK_SCH_TS3_get", value );

    return value;
}

#ifndef empei_i_field_range_INTL_LINK_SCH_TS3_set
#define empei_i_field_range_INTL_LINK_SCH_TS3_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_INTL_LINK_SCH_TS3_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_INTL_LINK_SCH_TS3_set( LOG_CALLER_DEFN
                                                               empei_i_buffer_t *b,
                                                               empei_i_handle_t *h,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INTL_LINK_SCH_TS3_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INTL_LINK_SCH_TS3_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INTL_LINK_SCH_TS3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000088 bits 15:12) field INTL_LINK_SCH_TS3 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 12) {
            subfield_offset = start_bit - 12;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  12 - start_bit;
            subfield_start_bit = 12;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000088 bits 15:12) field INTL_LINK_SCH_TS3 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
        _empei_i_reg_INTL_LSC_LOW_field_set( LOG_CALLER_ARGS
                                             b,
                                             h,
                                             subfield_mask << (EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS3_OFF + subfield_offset),
                                             EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS3_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_INTL_LINK_SCH_TS3_get
#define empei_i_field_range_INTL_LINK_SCH_TS3_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_INTL_LINK_SCH_TS3_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_INTL_LINK_SCH_TS3_get( LOG_CALLER_DEFN
                                                                 empei_i_buffer_t *b,
                                                                 empei_i_handle_t *h,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INTL_LINK_SCH_TS3_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INTL_LINK_SCH_TS3_get", stop_bit, 3 );
    if (start_bit > 12) {
        subfield_offset = start_bit - 12;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 12 - start_bit;
        subfield_start_bit = 12;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000088 bits 15:12) field INTL_LINK_SCH_TS3 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
    reg_value = _empei_i_reg_INTL_LSC_LOW_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS3_MSK)
                  >> EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS3_MSK, EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INTL_LINK_SCH_TS3_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_INTL_LINK_SCH_TS4_set
#define empei_i_field_INTL_LINK_SCH_TS4_set( b, h, value ) \
       _empei_i_field_INTL_LINK_SCH_TS4_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_INTL_LINK_SCH_TS4_set( LOG_CALLER_DEFN
                                                         empei_i_buffer_t *b,
                                                         empei_i_handle_t *h,
                                                         UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_INTL_LINK_SCH_TS4_set", value, 15);
    IOLOG( "%s <= 0x%08x", "empei_i_field_INTL_LINK_SCH_TS4_set", value );

    /* (0x00000088 bits 19:16) field INTL_LINK_SCH_TS4 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
    _empei_i_reg_INTL_LSC_LOW_field_set( LOG_CALLER_ARGS
                                         b,
                                         h,
                                         EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS4_MSK,
                                         EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS4_OFF,
                                         value);
}


#ifndef empei_i_field_INTL_LINK_SCH_TS4_get
#define empei_i_field_INTL_LINK_SCH_TS4_get( b, h ) \
       _empei_i_field_INTL_LINK_SCH_TS4_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_INTL_LINK_SCH_TS4_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000088 bits 19:16) field INTL_LINK_SCH_TS4 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
    reg_value = _empei_i_reg_INTL_LSC_LOW_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS4_MSK) >> EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS4_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_INTL_LINK_SCH_TS4_get", value );

    return value;
}

#ifndef empei_i_field_range_INTL_LINK_SCH_TS4_set
#define empei_i_field_range_INTL_LINK_SCH_TS4_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_INTL_LINK_SCH_TS4_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_INTL_LINK_SCH_TS4_set( LOG_CALLER_DEFN
                                                               empei_i_buffer_t *b,
                                                               empei_i_handle_t *h,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INTL_LINK_SCH_TS4_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INTL_LINK_SCH_TS4_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INTL_LINK_SCH_TS4_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000088 bits 19:16) field INTL_LINK_SCH_TS4 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 16) {
            subfield_offset = start_bit - 16;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  16 - start_bit;
            subfield_start_bit = 16;
        }
        if (stop_bit < 19) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 19;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000088 bits 19:16) field INTL_LINK_SCH_TS4 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
        _empei_i_reg_INTL_LSC_LOW_field_set( LOG_CALLER_ARGS
                                             b,
                                             h,
                                             subfield_mask << (EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS4_OFF + subfield_offset),
                                             EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS4_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_INTL_LINK_SCH_TS4_get
#define empei_i_field_range_INTL_LINK_SCH_TS4_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_INTL_LINK_SCH_TS4_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_INTL_LINK_SCH_TS4_get( LOG_CALLER_DEFN
                                                                 empei_i_buffer_t *b,
                                                                 empei_i_handle_t *h,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INTL_LINK_SCH_TS4_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INTL_LINK_SCH_TS4_get", stop_bit, 3 );
    if (start_bit > 16) {
        subfield_offset = start_bit - 16;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 16 - start_bit;
        subfield_start_bit = 16;
    }
    if (stop_bit < 19) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 19;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000088 bits 19:16) field INTL_LINK_SCH_TS4 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
    reg_value = _empei_i_reg_INTL_LSC_LOW_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS4_MSK)
                  >> EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS4_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS4_MSK, EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS4_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INTL_LINK_SCH_TS4_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_INTL_LINK_SCH_TS5_set
#define empei_i_field_INTL_LINK_SCH_TS5_set( b, h, value ) \
       _empei_i_field_INTL_LINK_SCH_TS5_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_INTL_LINK_SCH_TS5_set( LOG_CALLER_DEFN
                                                         empei_i_buffer_t *b,
                                                         empei_i_handle_t *h,
                                                         UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_INTL_LINK_SCH_TS5_set", value, 15);
    IOLOG( "%s <= 0x%08x", "empei_i_field_INTL_LINK_SCH_TS5_set", value );

    /* (0x00000088 bits 23:20) field INTL_LINK_SCH_TS5 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
    _empei_i_reg_INTL_LSC_LOW_field_set( LOG_CALLER_ARGS
                                         b,
                                         h,
                                         EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS5_MSK,
                                         EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS5_OFF,
                                         value);
}


#ifndef empei_i_field_INTL_LINK_SCH_TS5_get
#define empei_i_field_INTL_LINK_SCH_TS5_get( b, h ) \
       _empei_i_field_INTL_LINK_SCH_TS5_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_INTL_LINK_SCH_TS5_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000088 bits 23:20) field INTL_LINK_SCH_TS5 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
    reg_value = _empei_i_reg_INTL_LSC_LOW_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS5_MSK) >> EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS5_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_INTL_LINK_SCH_TS5_get", value );

    return value;
}

#ifndef empei_i_field_range_INTL_LINK_SCH_TS5_set
#define empei_i_field_range_INTL_LINK_SCH_TS5_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_INTL_LINK_SCH_TS5_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_INTL_LINK_SCH_TS5_set( LOG_CALLER_DEFN
                                                               empei_i_buffer_t *b,
                                                               empei_i_handle_t *h,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INTL_LINK_SCH_TS5_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INTL_LINK_SCH_TS5_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INTL_LINK_SCH_TS5_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000088 bits 23:20) field INTL_LINK_SCH_TS5 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 20) {
            subfield_offset = start_bit - 20;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  20 - start_bit;
            subfield_start_bit = 20;
        }
        if (stop_bit < 23) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 23;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000088 bits 23:20) field INTL_LINK_SCH_TS5 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
        _empei_i_reg_INTL_LSC_LOW_field_set( LOG_CALLER_ARGS
                                             b,
                                             h,
                                             subfield_mask << (EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS5_OFF + subfield_offset),
                                             EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS5_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_INTL_LINK_SCH_TS5_get
#define empei_i_field_range_INTL_LINK_SCH_TS5_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_INTL_LINK_SCH_TS5_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_INTL_LINK_SCH_TS5_get( LOG_CALLER_DEFN
                                                                 empei_i_buffer_t *b,
                                                                 empei_i_handle_t *h,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INTL_LINK_SCH_TS5_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INTL_LINK_SCH_TS5_get", stop_bit, 3 );
    if (start_bit > 20) {
        subfield_offset = start_bit - 20;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 20 - start_bit;
        subfield_start_bit = 20;
    }
    if (stop_bit < 23) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 23;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000088 bits 23:20) field INTL_LINK_SCH_TS5 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
    reg_value = _empei_i_reg_INTL_LSC_LOW_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS5_MSK)
                  >> EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS5_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS5_MSK, EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS5_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INTL_LINK_SCH_TS5_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_INTL_LINK_SCH_TS6_set
#define empei_i_field_INTL_LINK_SCH_TS6_set( b, h, value ) \
       _empei_i_field_INTL_LINK_SCH_TS6_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_INTL_LINK_SCH_TS6_set( LOG_CALLER_DEFN
                                                         empei_i_buffer_t *b,
                                                         empei_i_handle_t *h,
                                                         UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_INTL_LINK_SCH_TS6_set", value, 15);
    IOLOG( "%s <= 0x%08x", "empei_i_field_INTL_LINK_SCH_TS6_set", value );

    /* (0x00000088 bits 27:24) field INTL_LINK_SCH_TS6 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
    _empei_i_reg_INTL_LSC_LOW_field_set( LOG_CALLER_ARGS
                                         b,
                                         h,
                                         EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS6_MSK,
                                         EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS6_OFF,
                                         value);
}


#ifndef empei_i_field_INTL_LINK_SCH_TS6_get
#define empei_i_field_INTL_LINK_SCH_TS6_get( b, h ) \
       _empei_i_field_INTL_LINK_SCH_TS6_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_INTL_LINK_SCH_TS6_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000088 bits 27:24) field INTL_LINK_SCH_TS6 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
    reg_value = _empei_i_reg_INTL_LSC_LOW_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS6_MSK) >> EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS6_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_INTL_LINK_SCH_TS6_get", value );

    return value;
}

#ifndef empei_i_field_range_INTL_LINK_SCH_TS6_set
#define empei_i_field_range_INTL_LINK_SCH_TS6_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_INTL_LINK_SCH_TS6_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_INTL_LINK_SCH_TS6_set( LOG_CALLER_DEFN
                                                               empei_i_buffer_t *b,
                                                               empei_i_handle_t *h,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INTL_LINK_SCH_TS6_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INTL_LINK_SCH_TS6_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INTL_LINK_SCH_TS6_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000088 bits 27:24) field INTL_LINK_SCH_TS6 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 24) {
            subfield_offset = start_bit - 24;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  24 - start_bit;
            subfield_start_bit = 24;
        }
        if (stop_bit < 27) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 27;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000088 bits 27:24) field INTL_LINK_SCH_TS6 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
        _empei_i_reg_INTL_LSC_LOW_field_set( LOG_CALLER_ARGS
                                             b,
                                             h,
                                             subfield_mask << (EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS6_OFF + subfield_offset),
                                             EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS6_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_INTL_LINK_SCH_TS6_get
#define empei_i_field_range_INTL_LINK_SCH_TS6_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_INTL_LINK_SCH_TS6_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_INTL_LINK_SCH_TS6_get( LOG_CALLER_DEFN
                                                                 empei_i_buffer_t *b,
                                                                 empei_i_handle_t *h,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INTL_LINK_SCH_TS6_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INTL_LINK_SCH_TS6_get", stop_bit, 3 );
    if (start_bit > 24) {
        subfield_offset = start_bit - 24;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 24 - start_bit;
        subfield_start_bit = 24;
    }
    if (stop_bit < 27) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 27;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000088 bits 27:24) field INTL_LINK_SCH_TS6 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
    reg_value = _empei_i_reg_INTL_LSC_LOW_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS6_MSK)
                  >> EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS6_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS6_MSK, EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS6_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INTL_LINK_SCH_TS6_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_INTL_LINK_SCH_TS7_set
#define empei_i_field_INTL_LINK_SCH_TS7_set( b, h, value ) \
       _empei_i_field_INTL_LINK_SCH_TS7_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_INTL_LINK_SCH_TS7_set( LOG_CALLER_DEFN
                                                         empei_i_buffer_t *b,
                                                         empei_i_handle_t *h,
                                                         UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_INTL_LINK_SCH_TS7_set", value, 15);
    IOLOG( "%s <= 0x%08x", "empei_i_field_INTL_LINK_SCH_TS7_set", value );

    /* (0x00000088 bits 31:28) field INTL_LINK_SCH_TS7 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
    _empei_i_reg_INTL_LSC_LOW_field_set( LOG_CALLER_ARGS
                                         b,
                                         h,
                                         EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS7_MSK,
                                         EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS7_OFF,
                                         value);
}


#ifndef empei_i_field_INTL_LINK_SCH_TS7_get
#define empei_i_field_INTL_LINK_SCH_TS7_get( b, h ) \
       _empei_i_field_INTL_LINK_SCH_TS7_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_INTL_LINK_SCH_TS7_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000088 bits 31:28) field INTL_LINK_SCH_TS7 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
    reg_value = _empei_i_reg_INTL_LSC_LOW_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS7_MSK) >> EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS7_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_INTL_LINK_SCH_TS7_get", value );

    return value;
}

#ifndef empei_i_field_range_INTL_LINK_SCH_TS7_set
#define empei_i_field_range_INTL_LINK_SCH_TS7_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_INTL_LINK_SCH_TS7_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_INTL_LINK_SCH_TS7_set( LOG_CALLER_DEFN
                                                               empei_i_buffer_t *b,
                                                               empei_i_handle_t *h,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INTL_LINK_SCH_TS7_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INTL_LINK_SCH_TS7_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INTL_LINK_SCH_TS7_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000088 bits 31:28) field INTL_LINK_SCH_TS7 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 28) {
            subfield_offset = start_bit - 28;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  28 - start_bit;
            subfield_start_bit = 28;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000088 bits 31:28) field INTL_LINK_SCH_TS7 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
        _empei_i_reg_INTL_LSC_LOW_field_set( LOG_CALLER_ARGS
                                             b,
                                             h,
                                             subfield_mask << (EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS7_OFF + subfield_offset),
                                             EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS7_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_INTL_LINK_SCH_TS7_get
#define empei_i_field_range_INTL_LINK_SCH_TS7_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_INTL_LINK_SCH_TS7_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_INTL_LINK_SCH_TS7_get( LOG_CALLER_DEFN
                                                                 empei_i_buffer_t *b,
                                                                 empei_i_handle_t *h,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INTL_LINK_SCH_TS7_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INTL_LINK_SCH_TS7_get", stop_bit, 3 );
    if (start_bit > 28) {
        subfield_offset = start_bit - 28;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 28 - start_bit;
        subfield_start_bit = 28;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000088 bits 31:28) field INTL_LINK_SCH_TS7 of register PMC_EMPEI120_I_REG_INTL_LSC_LOW */
    reg_value = _empei_i_reg_INTL_LSC_LOW_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS7_MSK)
                  >> EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS7_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS7_MSK, EMPEI120_I_REG_INTL_LSC_LOW_BIT_INTL_LINK_SCH_TS7_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INTL_LINK_SCH_TS7_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_INTL_LINK_SCH_TS8_set
#define empei_i_field_INTL_LINK_SCH_TS8_set( b, h, value ) \
       _empei_i_field_INTL_LINK_SCH_TS8_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_INTL_LINK_SCH_TS8_set( LOG_CALLER_DEFN
                                                         empei_i_buffer_t *b,
                                                         empei_i_handle_t *h,
                                                         UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_INTL_LINK_SCH_TS8_set", value, 15);
    IOLOG( "%s <= 0x%08x", "empei_i_field_INTL_LINK_SCH_TS8_set", value );

    /* (0x0000008c bits 3:0) field INTL_LINK_SCH_TS8 of register PMC_EMPEI120_I_REG_INTL_USC_HIGH */
    _empei_i_reg_INTL_USC_HIGH_field_set( LOG_CALLER_ARGS
                                          b,
                                          h,
                                          EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS8_MSK,
                                          EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS8_OFF,
                                          value);
}


#ifndef empei_i_field_INTL_LINK_SCH_TS8_get
#define empei_i_field_INTL_LINK_SCH_TS8_get( b, h ) \
       _empei_i_field_INTL_LINK_SCH_TS8_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_INTL_LINK_SCH_TS8_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000008c bits 3:0) field INTL_LINK_SCH_TS8 of register PMC_EMPEI120_I_REG_INTL_USC_HIGH */
    reg_value = _empei_i_reg_INTL_USC_HIGH_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS8_MSK) >> EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS8_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_INTL_LINK_SCH_TS8_get", value );

    return value;
}

#ifndef empei_i_field_range_INTL_LINK_SCH_TS8_set
#define empei_i_field_range_INTL_LINK_SCH_TS8_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_INTL_LINK_SCH_TS8_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_INTL_LINK_SCH_TS8_set( LOG_CALLER_DEFN
                                                               empei_i_buffer_t *b,
                                                               empei_i_handle_t *h,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INTL_LINK_SCH_TS8_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INTL_LINK_SCH_TS8_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INTL_LINK_SCH_TS8_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x0000008c bits 3:0) field INTL_LINK_SCH_TS8 of register PMC_EMPEI120_I_REG_INTL_USC_HIGH */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000008c bits 3:0) field INTL_LINK_SCH_TS8 of register PMC_EMPEI120_I_REG_INTL_USC_HIGH */
        _empei_i_reg_INTL_USC_HIGH_field_set( LOG_CALLER_ARGS
                                              b,
                                              h,
                                              subfield_mask << (EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS8_OFF + subfield_offset),
                                              EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS8_OFF + subfield_offset,
                                              value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_INTL_LINK_SCH_TS8_get
#define empei_i_field_range_INTL_LINK_SCH_TS8_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_INTL_LINK_SCH_TS8_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_INTL_LINK_SCH_TS8_get( LOG_CALLER_DEFN
                                                                 empei_i_buffer_t *b,
                                                                 empei_i_handle_t *h,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INTL_LINK_SCH_TS8_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INTL_LINK_SCH_TS8_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000008c bits 3:0) field INTL_LINK_SCH_TS8 of register PMC_EMPEI120_I_REG_INTL_USC_HIGH */
    reg_value = _empei_i_reg_INTL_USC_HIGH_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS8_MSK)
                  >> EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS8_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS8_MSK, EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS8_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INTL_LINK_SCH_TS8_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_INTL_LINK_SCH_TS9_set
#define empei_i_field_INTL_LINK_SCH_TS9_set( b, h, value ) \
       _empei_i_field_INTL_LINK_SCH_TS9_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_INTL_LINK_SCH_TS9_set( LOG_CALLER_DEFN
                                                         empei_i_buffer_t *b,
                                                         empei_i_handle_t *h,
                                                         UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_INTL_LINK_SCH_TS9_set", value, 15);
    IOLOG( "%s <= 0x%08x", "empei_i_field_INTL_LINK_SCH_TS9_set", value );

    /* (0x0000008c bits 7:4) field INTL_LINK_SCH_TS9 of register PMC_EMPEI120_I_REG_INTL_USC_HIGH */
    _empei_i_reg_INTL_USC_HIGH_field_set( LOG_CALLER_ARGS
                                          b,
                                          h,
                                          EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS9_MSK,
                                          EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS9_OFF,
                                          value);
}


#ifndef empei_i_field_INTL_LINK_SCH_TS9_get
#define empei_i_field_INTL_LINK_SCH_TS9_get( b, h ) \
       _empei_i_field_INTL_LINK_SCH_TS9_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_INTL_LINK_SCH_TS9_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000008c bits 7:4) field INTL_LINK_SCH_TS9 of register PMC_EMPEI120_I_REG_INTL_USC_HIGH */
    reg_value = _empei_i_reg_INTL_USC_HIGH_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS9_MSK) >> EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS9_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_INTL_LINK_SCH_TS9_get", value );

    return value;
}

#ifndef empei_i_field_range_INTL_LINK_SCH_TS9_set
#define empei_i_field_range_INTL_LINK_SCH_TS9_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_INTL_LINK_SCH_TS9_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_INTL_LINK_SCH_TS9_set( LOG_CALLER_DEFN
                                                               empei_i_buffer_t *b,
                                                               empei_i_handle_t *h,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INTL_LINK_SCH_TS9_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INTL_LINK_SCH_TS9_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INTL_LINK_SCH_TS9_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x0000008c bits 7:4) field INTL_LINK_SCH_TS9 of register PMC_EMPEI120_I_REG_INTL_USC_HIGH */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 4) {
            subfield_offset = start_bit - 4;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  4 - start_bit;
            subfield_start_bit = 4;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000008c bits 7:4) field INTL_LINK_SCH_TS9 of register PMC_EMPEI120_I_REG_INTL_USC_HIGH */
        _empei_i_reg_INTL_USC_HIGH_field_set( LOG_CALLER_ARGS
                                              b,
                                              h,
                                              subfield_mask << (EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS9_OFF + subfield_offset),
                                              EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS9_OFF + subfield_offset,
                                              value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_INTL_LINK_SCH_TS9_get
#define empei_i_field_range_INTL_LINK_SCH_TS9_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_INTL_LINK_SCH_TS9_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_INTL_LINK_SCH_TS9_get( LOG_CALLER_DEFN
                                                                 empei_i_buffer_t *b,
                                                                 empei_i_handle_t *h,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INTL_LINK_SCH_TS9_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INTL_LINK_SCH_TS9_get", stop_bit, 3 );
    if (start_bit > 4) {
        subfield_offset = start_bit - 4;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 4 - start_bit;
        subfield_start_bit = 4;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000008c bits 7:4) field INTL_LINK_SCH_TS9 of register PMC_EMPEI120_I_REG_INTL_USC_HIGH */
    reg_value = _empei_i_reg_INTL_USC_HIGH_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS9_MSK)
                  >> EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS9_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS9_MSK, EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS9_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INTL_LINK_SCH_TS9_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_INTL_LINK_SCH_TS10_set
#define empei_i_field_INTL_LINK_SCH_TS10_set( b, h, value ) \
       _empei_i_field_INTL_LINK_SCH_TS10_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_INTL_LINK_SCH_TS10_set( LOG_CALLER_DEFN
                                                          empei_i_buffer_t *b,
                                                          empei_i_handle_t *h,
                                                          UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_INTL_LINK_SCH_TS10_set", value, 15);
    IOLOG( "%s <= 0x%08x", "empei_i_field_INTL_LINK_SCH_TS10_set", value );

    /* (0x0000008c bits 11:8) field INTL_LINK_SCH_TS10 of register PMC_EMPEI120_I_REG_INTL_USC_HIGH */
    _empei_i_reg_INTL_USC_HIGH_field_set( LOG_CALLER_ARGS
                                          b,
                                          h,
                                          EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS10_MSK,
                                          EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS10_OFF,
                                          value);
}


#ifndef empei_i_field_INTL_LINK_SCH_TS10_get
#define empei_i_field_INTL_LINK_SCH_TS10_get( b, h ) \
       _empei_i_field_INTL_LINK_SCH_TS10_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_INTL_LINK_SCH_TS10_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000008c bits 11:8) field INTL_LINK_SCH_TS10 of register PMC_EMPEI120_I_REG_INTL_USC_HIGH */
    reg_value = _empei_i_reg_INTL_USC_HIGH_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS10_MSK) >> EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS10_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_INTL_LINK_SCH_TS10_get", value );

    return value;
}

#ifndef empei_i_field_range_INTL_LINK_SCH_TS10_set
#define empei_i_field_range_INTL_LINK_SCH_TS10_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_INTL_LINK_SCH_TS10_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_INTL_LINK_SCH_TS10_set( LOG_CALLER_DEFN
                                                                empei_i_buffer_t *b,
                                                                empei_i_handle_t *h,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INTL_LINK_SCH_TS10_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INTL_LINK_SCH_TS10_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INTL_LINK_SCH_TS10_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x0000008c bits 11:8) field INTL_LINK_SCH_TS10 of register PMC_EMPEI120_I_REG_INTL_USC_HIGH */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 8) {
            subfield_offset = start_bit - 8;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  8 - start_bit;
            subfield_start_bit = 8;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000008c bits 11:8) field INTL_LINK_SCH_TS10 of register PMC_EMPEI120_I_REG_INTL_USC_HIGH */
        _empei_i_reg_INTL_USC_HIGH_field_set( LOG_CALLER_ARGS
                                              b,
                                              h,
                                              subfield_mask << (EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS10_OFF + subfield_offset),
                                              EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS10_OFF + subfield_offset,
                                              value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_INTL_LINK_SCH_TS10_get
#define empei_i_field_range_INTL_LINK_SCH_TS10_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_INTL_LINK_SCH_TS10_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_INTL_LINK_SCH_TS10_get( LOG_CALLER_DEFN
                                                                  empei_i_buffer_t *b,
                                                                  empei_i_handle_t *h,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INTL_LINK_SCH_TS10_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INTL_LINK_SCH_TS10_get", stop_bit, 3 );
    if (start_bit > 8) {
        subfield_offset = start_bit - 8;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 8 - start_bit;
        subfield_start_bit = 8;
    }
    if (stop_bit < 11) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 11;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000008c bits 11:8) field INTL_LINK_SCH_TS10 of register PMC_EMPEI120_I_REG_INTL_USC_HIGH */
    reg_value = _empei_i_reg_INTL_USC_HIGH_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS10_MSK)
                  >> EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS10_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS10_MSK, EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS10_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INTL_LINK_SCH_TS10_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_INTL_LINK_SCH_TS11_set
#define empei_i_field_INTL_LINK_SCH_TS11_set( b, h, value ) \
       _empei_i_field_INTL_LINK_SCH_TS11_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_INTL_LINK_SCH_TS11_set( LOG_CALLER_DEFN
                                                          empei_i_buffer_t *b,
                                                          empei_i_handle_t *h,
                                                          UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_INTL_LINK_SCH_TS11_set", value, 15);
    IOLOG( "%s <= 0x%08x", "empei_i_field_INTL_LINK_SCH_TS11_set", value );

    /* (0x0000008c bits 15:12) field INTL_LINK_SCH_TS11 of register PMC_EMPEI120_I_REG_INTL_USC_HIGH */
    _empei_i_reg_INTL_USC_HIGH_field_set( LOG_CALLER_ARGS
                                          b,
                                          h,
                                          EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS11_MSK,
                                          EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS11_OFF,
                                          value);
}


#ifndef empei_i_field_INTL_LINK_SCH_TS11_get
#define empei_i_field_INTL_LINK_SCH_TS11_get( b, h ) \
       _empei_i_field_INTL_LINK_SCH_TS11_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_INTL_LINK_SCH_TS11_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000008c bits 15:12) field INTL_LINK_SCH_TS11 of register PMC_EMPEI120_I_REG_INTL_USC_HIGH */
    reg_value = _empei_i_reg_INTL_USC_HIGH_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS11_MSK) >> EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS11_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_INTL_LINK_SCH_TS11_get", value );

    return value;
}

#ifndef empei_i_field_range_INTL_LINK_SCH_TS11_set
#define empei_i_field_range_INTL_LINK_SCH_TS11_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_INTL_LINK_SCH_TS11_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_INTL_LINK_SCH_TS11_set( LOG_CALLER_DEFN
                                                                empei_i_buffer_t *b,
                                                                empei_i_handle_t *h,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INTL_LINK_SCH_TS11_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INTL_LINK_SCH_TS11_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INTL_LINK_SCH_TS11_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x0000008c bits 15:12) field INTL_LINK_SCH_TS11 of register PMC_EMPEI120_I_REG_INTL_USC_HIGH */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 12) {
            subfield_offset = start_bit - 12;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  12 - start_bit;
            subfield_start_bit = 12;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000008c bits 15:12) field INTL_LINK_SCH_TS11 of register PMC_EMPEI120_I_REG_INTL_USC_HIGH */
        _empei_i_reg_INTL_USC_HIGH_field_set( LOG_CALLER_ARGS
                                              b,
                                              h,
                                              subfield_mask << (EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS11_OFF + subfield_offset),
                                              EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS11_OFF + subfield_offset,
                                              value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_INTL_LINK_SCH_TS11_get
#define empei_i_field_range_INTL_LINK_SCH_TS11_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_INTL_LINK_SCH_TS11_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_INTL_LINK_SCH_TS11_get( LOG_CALLER_DEFN
                                                                  empei_i_buffer_t *b,
                                                                  empei_i_handle_t *h,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INTL_LINK_SCH_TS11_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INTL_LINK_SCH_TS11_get", stop_bit, 3 );
    if (start_bit > 12) {
        subfield_offset = start_bit - 12;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 12 - start_bit;
        subfield_start_bit = 12;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000008c bits 15:12) field INTL_LINK_SCH_TS11 of register PMC_EMPEI120_I_REG_INTL_USC_HIGH */
    reg_value = _empei_i_reg_INTL_USC_HIGH_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS11_MSK)
                  >> EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS11_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS11_MSK, EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_TS11_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INTL_LINK_SCH_TS11_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_INTL_LINK_SCH_LAST_TIMESLOT_set
#define empei_i_field_INTL_LINK_SCH_LAST_TIMESLOT_set( b, h, value ) \
       _empei_i_field_INTL_LINK_SCH_LAST_TIMESLOT_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_INTL_LINK_SCH_LAST_TIMESLOT_set( LOG_CALLER_DEFN
                                                                   empei_i_buffer_t *b,
                                                                   empei_i_handle_t *h,
                                                                   UINT32 value )
{
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_INTL_LINK_SCH_LAST_TIMESLOT_set", value, 15);
    IOLOG( "%s <= 0x%08x", "empei_i_field_INTL_LINK_SCH_LAST_TIMESLOT_set", value );

    /* (0x0000008c bits 27:24) field INTL_LINK_SCH_LAST_TIMESLOT of register PMC_EMPEI120_I_REG_INTL_USC_HIGH */
    _empei_i_reg_INTL_USC_HIGH_field_set( LOG_CALLER_ARGS
                                          b,
                                          h,
                                          EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_LAST_TIMESLOT_MSK,
                                          EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_LAST_TIMESLOT_OFF,
                                          value);
}


#ifndef empei_i_field_INTL_LINK_SCH_LAST_TIMESLOT_get
#define empei_i_field_INTL_LINK_SCH_LAST_TIMESLOT_get( b, h ) \
       _empei_i_field_INTL_LINK_SCH_LAST_TIMESLOT_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_INTL_LINK_SCH_LAST_TIMESLOT_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000008c bits 27:24) field INTL_LINK_SCH_LAST_TIMESLOT of register PMC_EMPEI120_I_REG_INTL_USC_HIGH */
    reg_value = _empei_i_reg_INTL_USC_HIGH_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_LAST_TIMESLOT_MSK) >> EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_LAST_TIMESLOT_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_INTL_LINK_SCH_LAST_TIMESLOT_get", value );

    return value;
}

#ifndef empei_i_field_range_INTL_LINK_SCH_LAST_TIMESLOT_set
#define empei_i_field_range_INTL_LINK_SCH_LAST_TIMESLOT_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_INTL_LINK_SCH_LAST_TIMESLOT_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_INTL_LINK_SCH_LAST_TIMESLOT_set( LOG_CALLER_DEFN
                                                                         empei_i_buffer_t *b,
                                                                         empei_i_handle_t *h,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INTL_LINK_SCH_LAST_TIMESLOT_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INTL_LINK_SCH_LAST_TIMESLOT_set", stop_bit, 3 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INTL_LINK_SCH_LAST_TIMESLOT_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x0000008c bits 27:24) field INTL_LINK_SCH_LAST_TIMESLOT of register PMC_EMPEI120_I_REG_INTL_USC_HIGH */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 24) {
            subfield_offset = start_bit - 24;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  24 - start_bit;
            subfield_start_bit = 24;
        }
        if (stop_bit < 27) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 27;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000008c bits 27:24) field INTL_LINK_SCH_LAST_TIMESLOT of register PMC_EMPEI120_I_REG_INTL_USC_HIGH */
        _empei_i_reg_INTL_USC_HIGH_field_set( LOG_CALLER_ARGS
                                              b,
                                              h,
                                              subfield_mask << (EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_LAST_TIMESLOT_OFF + subfield_offset),
                                              EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_LAST_TIMESLOT_OFF + subfield_offset,
                                              value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_INTL_LINK_SCH_LAST_TIMESLOT_get
#define empei_i_field_range_INTL_LINK_SCH_LAST_TIMESLOT_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_INTL_LINK_SCH_LAST_TIMESLOT_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_INTL_LINK_SCH_LAST_TIMESLOT_get( LOG_CALLER_DEFN
                                                                           empei_i_buffer_t *b,
                                                                           empei_i_handle_t *h,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INTL_LINK_SCH_LAST_TIMESLOT_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INTL_LINK_SCH_LAST_TIMESLOT_get", stop_bit, 3 );
    if (start_bit > 24) {
        subfield_offset = start_bit - 24;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 24 - start_bit;
        subfield_start_bit = 24;
    }
    if (stop_bit < 27) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 27;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000008c bits 27:24) field INTL_LINK_SCH_LAST_TIMESLOT of register PMC_EMPEI120_I_REG_INTL_USC_HIGH */
    reg_value = _empei_i_reg_INTL_USC_HIGH_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_LAST_TIMESLOT_MSK)
                  >> EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_LAST_TIMESLOT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_LAST_TIMESLOT_MSK, EMPEI120_I_REG_INTL_USC_HIGH_BIT_INTL_LINK_SCH_LAST_TIMESLOT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INTL_LINK_SCH_LAST_TIMESLOT_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_SYS_ZONE_ENABLE_set
#define empei_i_field_SYS_ZONE_ENABLE_set( b, h, value ) \
       _empei_i_field_SYS_ZONE_ENABLE_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_SYS_ZONE_ENABLE_set( LOG_CALLER_DEFN
                                                       empei_i_buffer_t *b,
                                                       empei_i_handle_t *h,
                                                       UINT32 value )
{
    if (value > 4095)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_SYS_ZONE_ENABLE_set", value, 4095);
    IOLOG( "%s <= 0x%08x", "empei_i_field_SYS_ZONE_ENABLE_set", value );

    /* (0x00000098 bits 11:0) field SYS_ZONE_ENABLE of register PMC_EMPEI120_I_REG_CPB_PF_ENABLE */
    _empei_i_reg_CPB_PF_ENABLE_field_set( LOG_CALLER_ARGS
                                          b,
                                          h,
                                          EMPEI120_I_REG_CPB_PF_ENABLE_BIT_SYS_ZONE_ENABLE_MSK,
                                          EMPEI120_I_REG_CPB_PF_ENABLE_BIT_SYS_ZONE_ENABLE_OFF,
                                          value);
}


#ifndef empei_i_field_SYS_ZONE_ENABLE_get
#define empei_i_field_SYS_ZONE_ENABLE_get( b, h ) \
       _empei_i_field_SYS_ZONE_ENABLE_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_SYS_ZONE_ENABLE_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000098 bits 11:0) field SYS_ZONE_ENABLE of register PMC_EMPEI120_I_REG_CPB_PF_ENABLE */
    reg_value = _empei_i_reg_CPB_PF_ENABLE_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_CPB_PF_ENABLE_BIT_SYS_ZONE_ENABLE_MSK) >> EMPEI120_I_REG_CPB_PF_ENABLE_BIT_SYS_ZONE_ENABLE_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_SYS_ZONE_ENABLE_get", value );

    return value;
}

#ifndef empei_i_field_range_SYS_ZONE_ENABLE_set
#define empei_i_field_range_SYS_ZONE_ENABLE_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_SYS_ZONE_ENABLE_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_SYS_ZONE_ENABLE_set( LOG_CALLER_DEFN
                                                             empei_i_buffer_t *b,
                                                             empei_i_handle_t *h,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_SYS_ZONE_ENABLE_set", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_SYS_ZONE_ENABLE_set", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_SYS_ZONE_ENABLE_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000098 bits 11:0) field SYS_ZONE_ENABLE of register PMC_EMPEI120_I_REG_CPB_PF_ENABLE */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000098 bits 11:0) field SYS_ZONE_ENABLE of register PMC_EMPEI120_I_REG_CPB_PF_ENABLE */
        _empei_i_reg_CPB_PF_ENABLE_field_set( LOG_CALLER_ARGS
                                              b,
                                              h,
                                              subfield_mask << (EMPEI120_I_REG_CPB_PF_ENABLE_BIT_SYS_ZONE_ENABLE_OFF + subfield_offset),
                                              EMPEI120_I_REG_CPB_PF_ENABLE_BIT_SYS_ZONE_ENABLE_OFF + subfield_offset,
                                              value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_SYS_ZONE_ENABLE_get
#define empei_i_field_range_SYS_ZONE_ENABLE_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_SYS_ZONE_ENABLE_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_SYS_ZONE_ENABLE_get( LOG_CALLER_DEFN
                                                               empei_i_buffer_t *b,
                                                               empei_i_handle_t *h,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_SYS_ZONE_ENABLE_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_SYS_ZONE_ENABLE_get", stop_bit, 11 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 11) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 11;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000098 bits 11:0) field SYS_ZONE_ENABLE of register PMC_EMPEI120_I_REG_CPB_PF_ENABLE */
    reg_value = _empei_i_reg_CPB_PF_ENABLE_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_CPB_PF_ENABLE_BIT_SYS_ZONE_ENABLE_MSK)
                  >> EMPEI120_I_REG_CPB_PF_ENABLE_BIT_SYS_ZONE_ENABLE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_CPB_PF_ENABLE_BIT_SYS_ZONE_ENABLE_MSK, EMPEI120_I_REG_CPB_PF_ENABLE_BIT_SYS_ZONE_ENABLE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_SYS_ZONE_ENABLE_get", start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 *           Parameter Access Functions for Paramset config_N_burstsize12
 * ==================================================================================
 */

#ifndef empei_i_lfield_LINK_TYPE_set
#define empei_i_lfield_LINK_TYPE_set( b, h, value ) \
       _empei_i_lfield_LINK_TYPE_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_lfield_LINK_TYPE_set( LOG_CALLER_DEFN
                                                  empei_i_buffer_t *b,
                                                  empei_i_handle_t *h,
                                                  UINT32 value[12] )
{
    IOLOG( "%s ", "empei_i_lfield_LINK_TYPE_set");
    _empei_i_reg_LINK_TYPE_array_burst_write( LOG_CALLER_ARGS b, h, 0, 12, value);
}


#ifndef empei_i_lfield_LINK_TYPE_get
#define empei_i_lfield_LINK_TYPE_get( b, h, value ) \
       _empei_i_lfield_LINK_TYPE_get( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_lfield_LINK_TYPE_get( LOG_CALLER_DEFN
                                                  empei_i_buffer_t *b,
                                                  empei_i_handle_t *h,
                                                  UINT32 value[12] )
{
    IOLOG( "%s ", "empei_i_lfield_LINK_TYPE_get");
    _empei_i_reg_LINK_TYPE_array_burst_read( LOG_CALLER_ARGS
                                             b,
                                             h,
                                             0,
                                             12,
                                             (UINT32 *)value);
}


#ifndef empei_i_lfield_range_LINK_TYPE_set
#define empei_i_lfield_range_LINK_TYPE_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_lfield_range_LINK_TYPE_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_lfield_range_LINK_TYPE_set( LOG_CALLER_DEFN
                                                        empei_i_buffer_t *b,
                                                        empei_i_handle_t *h,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "empei_i_lfield_range_LINK_TYPE_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "empei_i_lfield_range_LINK_TYPE_set", start_bit, stop_bit, value);
    _empei_i_reg_LINK_TYPE_array_field_set( LOG_CALLER_ARGS
                                            b,
                                            h,
                                            word_number,
                                            mask,
                                            field_ofs,
                                            value);
}


#ifndef empei_i_lfield_range_LINK_TYPE_get
#define empei_i_lfield_range_LINK_TYPE_get( b, h, start_bit, stop_bit ) \
       _empei_i_lfield_range_LINK_TYPE_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_lfield_range_LINK_TYPE_get( LOG_CALLER_DEFN
                                                          empei_i_buffer_t *b,
                                                          empei_i_handle_t *h,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = 0xffffffff >> (32-num_bits);
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "empei_i_lfield_range_LINK_TYPE_get", start_bit, stop_bit );
    }
    reg_value = _empei_i_reg_LINK_TYPE_array_read( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "empei_i_lfield_range_LINK_TYPE_get", start_bit, stop_bit, value );
    return value;
}


/*
 * ==================================================================================
 *             Parameter Access Functions for Paramset config_N_size12
 * ==================================================================================
 */

#ifndef empei_i_field_PRIORITY_0_CHAN_MAP_set
#define empei_i_field_PRIORITY_0_CHAN_MAP_set( b, h, N, value ) \
       _empei_i_field_PRIORITY_0_CHAN_MAP_set( LOG_CALLER b, h, N, value )
#endif
static INLINE void _empei_i_field_PRIORITY_0_CHAN_MAP_set( LOG_CALLER_DEFN
                                                           empei_i_buffer_t *b,
                                                           empei_i_handle_t *h,
                                                           UINT32  N,
                                                           UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_PRIORITY_0_CHAN_MAP_set", N, 11);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_PRIORITY_0_CHAN_MAP_set", value, 7);
    IOLOG( "%s <= N=%d 0x%08x", "empei_i_field_PRIORITY_0_CHAN_MAP_set", N, value );

    /* ((0x00000500 + (N) * 4) bits 2:0) field PRIORITY_0_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
    _empei_i_reg_CHAN_MAP_array_field_set( LOG_CALLER_ARGS
                                           b,
                                           h,
                                           N,
                                           EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_0_CHAN_MAP_MSK,
                                           EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_0_CHAN_MAP_OFF,
                                           value);
}


#ifndef empei_i_field_PRIORITY_0_CHAN_MAP_get
#define empei_i_field_PRIORITY_0_CHAN_MAP_get( b, h, N ) \
       _empei_i_field_PRIORITY_0_CHAN_MAP_get( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _empei_i_field_PRIORITY_0_CHAN_MAP_get( LOG_CALLER_DEFN
                                                             empei_i_buffer_t *b,
                                                             empei_i_handle_t *h,
                                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_PRIORITY_0_CHAN_MAP_get", N, 11);
    /* ((0x00000500 + (N) * 4) bits 2:0) field PRIORITY_0_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
    reg_value = _empei_i_reg_CHAN_MAP_array_read( LOG_CALLER_ARGS b, h, N);
    value = (reg_value & EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_0_CHAN_MAP_MSK) >> EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_0_CHAN_MAP_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "empei_i_field_PRIORITY_0_CHAN_MAP_get", N, value );

    return value;
}

#ifndef empei_i_field_range_PRIORITY_0_CHAN_MAP_set
#define empei_i_field_range_PRIORITY_0_CHAN_MAP_set( b, h, N, start_bit, stop_bit, value ) \
       _empei_i_field_range_PRIORITY_0_CHAN_MAP_set( LOG_CALLER b, h, N, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_PRIORITY_0_CHAN_MAP_set( LOG_CALLER_DEFN
                                                                 empei_i_buffer_t *b,
                                                                 empei_i_handle_t *h,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_range_PRIORITY_0_CHAN_MAP_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_PRIORITY_0_CHAN_MAP_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_PRIORITY_0_CHAN_MAP_set", stop_bit, 2 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_PRIORITY_0_CHAN_MAP_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* ((0x00000500 + (N) * 4) bits 2:0) field PRIORITY_0_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000500 + (N) * 4) bits 2:0) field PRIORITY_0_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
        _empei_i_reg_CHAN_MAP_array_field_set( LOG_CALLER_ARGS
                                               b,
                                               h,
                                               N,
                                               subfield_mask << (EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_0_CHAN_MAP_OFF + subfield_offset),
                                               EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_0_CHAN_MAP_OFF + subfield_offset,
                                               value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_PRIORITY_0_CHAN_MAP_get
#define empei_i_field_range_PRIORITY_0_CHAN_MAP_get( b, h, N, start_bit, stop_bit ) \
       _empei_i_field_range_PRIORITY_0_CHAN_MAP_get( LOG_CALLER b, h, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_PRIORITY_0_CHAN_MAP_get( LOG_CALLER_DEFN
                                                                   empei_i_buffer_t *b,
                                                                   empei_i_handle_t *h,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_range_PRIORITY_0_CHAN_MAP_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_PRIORITY_0_CHAN_MAP_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_PRIORITY_0_CHAN_MAP_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000500 + (N) * 4) bits 2:0) field PRIORITY_0_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
    reg_value = _empei_i_reg_CHAN_MAP_array_read( LOG_CALLER_ARGS b, h, N);
    field_value = (reg_value & EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_0_CHAN_MAP_MSK)
                  >> EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_0_CHAN_MAP_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_0_CHAN_MAP_MSK, EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_0_CHAN_MAP_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_PRIORITY_0_CHAN_MAP_get", N, start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_PRIORITY_1_CHAN_MAP_set
#define empei_i_field_PRIORITY_1_CHAN_MAP_set( b, h, N, value ) \
       _empei_i_field_PRIORITY_1_CHAN_MAP_set( LOG_CALLER b, h, N, value )
#endif
static INLINE void _empei_i_field_PRIORITY_1_CHAN_MAP_set( LOG_CALLER_DEFN
                                                           empei_i_buffer_t *b,
                                                           empei_i_handle_t *h,
                                                           UINT32  N,
                                                           UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_PRIORITY_1_CHAN_MAP_set", N, 11);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_PRIORITY_1_CHAN_MAP_set", value, 7);
    IOLOG( "%s <= N=%d 0x%08x", "empei_i_field_PRIORITY_1_CHAN_MAP_set", N, value );

    /* ((0x00000500 + (N) * 4) bits 6:4) field PRIORITY_1_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
    _empei_i_reg_CHAN_MAP_array_field_set( LOG_CALLER_ARGS
                                           b,
                                           h,
                                           N,
                                           EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_1_CHAN_MAP_MSK,
                                           EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_1_CHAN_MAP_OFF,
                                           value);
}


#ifndef empei_i_field_PRIORITY_1_CHAN_MAP_get
#define empei_i_field_PRIORITY_1_CHAN_MAP_get( b, h, N ) \
       _empei_i_field_PRIORITY_1_CHAN_MAP_get( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _empei_i_field_PRIORITY_1_CHAN_MAP_get( LOG_CALLER_DEFN
                                                             empei_i_buffer_t *b,
                                                             empei_i_handle_t *h,
                                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_PRIORITY_1_CHAN_MAP_get", N, 11);
    /* ((0x00000500 + (N) * 4) bits 6:4) field PRIORITY_1_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
    reg_value = _empei_i_reg_CHAN_MAP_array_read( LOG_CALLER_ARGS b, h, N);
    value = (reg_value & EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_1_CHAN_MAP_MSK) >> EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_1_CHAN_MAP_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "empei_i_field_PRIORITY_1_CHAN_MAP_get", N, value );

    return value;
}

#ifndef empei_i_field_range_PRIORITY_1_CHAN_MAP_set
#define empei_i_field_range_PRIORITY_1_CHAN_MAP_set( b, h, N, start_bit, stop_bit, value ) \
       _empei_i_field_range_PRIORITY_1_CHAN_MAP_set( LOG_CALLER b, h, N, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_PRIORITY_1_CHAN_MAP_set( LOG_CALLER_DEFN
                                                                 empei_i_buffer_t *b,
                                                                 empei_i_handle_t *h,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_range_PRIORITY_1_CHAN_MAP_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_PRIORITY_1_CHAN_MAP_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_PRIORITY_1_CHAN_MAP_set", stop_bit, 2 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_PRIORITY_1_CHAN_MAP_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* ((0x00000500 + (N) * 4) bits 6:4) field PRIORITY_1_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 4) {
            subfield_offset = start_bit - 4;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  4 - start_bit;
            subfield_start_bit = 4;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000500 + (N) * 4) bits 6:4) field PRIORITY_1_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
        _empei_i_reg_CHAN_MAP_array_field_set( LOG_CALLER_ARGS
                                               b,
                                               h,
                                               N,
                                               subfield_mask << (EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_1_CHAN_MAP_OFF + subfield_offset),
                                               EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_1_CHAN_MAP_OFF + subfield_offset,
                                               value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_PRIORITY_1_CHAN_MAP_get
#define empei_i_field_range_PRIORITY_1_CHAN_MAP_get( b, h, N, start_bit, stop_bit ) \
       _empei_i_field_range_PRIORITY_1_CHAN_MAP_get( LOG_CALLER b, h, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_PRIORITY_1_CHAN_MAP_get( LOG_CALLER_DEFN
                                                                   empei_i_buffer_t *b,
                                                                   empei_i_handle_t *h,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_range_PRIORITY_1_CHAN_MAP_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_PRIORITY_1_CHAN_MAP_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_PRIORITY_1_CHAN_MAP_get", stop_bit, 2 );
    if (start_bit > 4) {
        subfield_offset = start_bit - 4;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 4 - start_bit;
        subfield_start_bit = 4;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000500 + (N) * 4) bits 6:4) field PRIORITY_1_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
    reg_value = _empei_i_reg_CHAN_MAP_array_read( LOG_CALLER_ARGS b, h, N);
    field_value = (reg_value & EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_1_CHAN_MAP_MSK)
                  >> EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_1_CHAN_MAP_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_1_CHAN_MAP_MSK, EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_1_CHAN_MAP_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_PRIORITY_1_CHAN_MAP_get", N, start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_PRIORITY_2_CHAN_MAP_set
#define empei_i_field_PRIORITY_2_CHAN_MAP_set( b, h, N, value ) \
       _empei_i_field_PRIORITY_2_CHAN_MAP_set( LOG_CALLER b, h, N, value )
#endif
static INLINE void _empei_i_field_PRIORITY_2_CHAN_MAP_set( LOG_CALLER_DEFN
                                                           empei_i_buffer_t *b,
                                                           empei_i_handle_t *h,
                                                           UINT32  N,
                                                           UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_PRIORITY_2_CHAN_MAP_set", N, 11);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_PRIORITY_2_CHAN_MAP_set", value, 7);
    IOLOG( "%s <= N=%d 0x%08x", "empei_i_field_PRIORITY_2_CHAN_MAP_set", N, value );

    /* ((0x00000500 + (N) * 4) bits 10:8) field PRIORITY_2_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
    _empei_i_reg_CHAN_MAP_array_field_set( LOG_CALLER_ARGS
                                           b,
                                           h,
                                           N,
                                           EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_2_CHAN_MAP_MSK,
                                           EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_2_CHAN_MAP_OFF,
                                           value);
}


#ifndef empei_i_field_PRIORITY_2_CHAN_MAP_get
#define empei_i_field_PRIORITY_2_CHAN_MAP_get( b, h, N ) \
       _empei_i_field_PRIORITY_2_CHAN_MAP_get( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _empei_i_field_PRIORITY_2_CHAN_MAP_get( LOG_CALLER_DEFN
                                                             empei_i_buffer_t *b,
                                                             empei_i_handle_t *h,
                                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_PRIORITY_2_CHAN_MAP_get", N, 11);
    /* ((0x00000500 + (N) * 4) bits 10:8) field PRIORITY_2_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
    reg_value = _empei_i_reg_CHAN_MAP_array_read( LOG_CALLER_ARGS b, h, N);
    value = (reg_value & EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_2_CHAN_MAP_MSK) >> EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_2_CHAN_MAP_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "empei_i_field_PRIORITY_2_CHAN_MAP_get", N, value );

    return value;
}

#ifndef empei_i_field_range_PRIORITY_2_CHAN_MAP_set
#define empei_i_field_range_PRIORITY_2_CHAN_MAP_set( b, h, N, start_bit, stop_bit, value ) \
       _empei_i_field_range_PRIORITY_2_CHAN_MAP_set( LOG_CALLER b, h, N, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_PRIORITY_2_CHAN_MAP_set( LOG_CALLER_DEFN
                                                                 empei_i_buffer_t *b,
                                                                 empei_i_handle_t *h,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_range_PRIORITY_2_CHAN_MAP_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_PRIORITY_2_CHAN_MAP_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_PRIORITY_2_CHAN_MAP_set", stop_bit, 2 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_PRIORITY_2_CHAN_MAP_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* ((0x00000500 + (N) * 4) bits 10:8) field PRIORITY_2_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 8) {
            subfield_offset = start_bit - 8;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  8 - start_bit;
            subfield_start_bit = 8;
        }
        if (stop_bit < 10) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 10;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000500 + (N) * 4) bits 10:8) field PRIORITY_2_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
        _empei_i_reg_CHAN_MAP_array_field_set( LOG_CALLER_ARGS
                                               b,
                                               h,
                                               N,
                                               subfield_mask << (EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_2_CHAN_MAP_OFF + subfield_offset),
                                               EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_2_CHAN_MAP_OFF + subfield_offset,
                                               value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_PRIORITY_2_CHAN_MAP_get
#define empei_i_field_range_PRIORITY_2_CHAN_MAP_get( b, h, N, start_bit, stop_bit ) \
       _empei_i_field_range_PRIORITY_2_CHAN_MAP_get( LOG_CALLER b, h, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_PRIORITY_2_CHAN_MAP_get( LOG_CALLER_DEFN
                                                                   empei_i_buffer_t *b,
                                                                   empei_i_handle_t *h,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_range_PRIORITY_2_CHAN_MAP_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_PRIORITY_2_CHAN_MAP_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_PRIORITY_2_CHAN_MAP_get", stop_bit, 2 );
    if (start_bit > 8) {
        subfield_offset = start_bit - 8;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 8 - start_bit;
        subfield_start_bit = 8;
    }
    if (stop_bit < 10) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 10;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000500 + (N) * 4) bits 10:8) field PRIORITY_2_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
    reg_value = _empei_i_reg_CHAN_MAP_array_read( LOG_CALLER_ARGS b, h, N);
    field_value = (reg_value & EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_2_CHAN_MAP_MSK)
                  >> EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_2_CHAN_MAP_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_2_CHAN_MAP_MSK, EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_2_CHAN_MAP_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_PRIORITY_2_CHAN_MAP_get", N, start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_PRIORITY_3_CHAN_MAP_set
#define empei_i_field_PRIORITY_3_CHAN_MAP_set( b, h, N, value ) \
       _empei_i_field_PRIORITY_3_CHAN_MAP_set( LOG_CALLER b, h, N, value )
#endif
static INLINE void _empei_i_field_PRIORITY_3_CHAN_MAP_set( LOG_CALLER_DEFN
                                                           empei_i_buffer_t *b,
                                                           empei_i_handle_t *h,
                                                           UINT32  N,
                                                           UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_PRIORITY_3_CHAN_MAP_set", N, 11);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_PRIORITY_3_CHAN_MAP_set", value, 7);
    IOLOG( "%s <= N=%d 0x%08x", "empei_i_field_PRIORITY_3_CHAN_MAP_set", N, value );

    /* ((0x00000500 + (N) * 4) bits 14:12) field PRIORITY_3_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
    _empei_i_reg_CHAN_MAP_array_field_set( LOG_CALLER_ARGS
                                           b,
                                           h,
                                           N,
                                           EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_3_CHAN_MAP_MSK,
                                           EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_3_CHAN_MAP_OFF,
                                           value);
}


#ifndef empei_i_field_PRIORITY_3_CHAN_MAP_get
#define empei_i_field_PRIORITY_3_CHAN_MAP_get( b, h, N ) \
       _empei_i_field_PRIORITY_3_CHAN_MAP_get( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _empei_i_field_PRIORITY_3_CHAN_MAP_get( LOG_CALLER_DEFN
                                                             empei_i_buffer_t *b,
                                                             empei_i_handle_t *h,
                                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_PRIORITY_3_CHAN_MAP_get", N, 11);
    /* ((0x00000500 + (N) * 4) bits 14:12) field PRIORITY_3_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
    reg_value = _empei_i_reg_CHAN_MAP_array_read( LOG_CALLER_ARGS b, h, N);
    value = (reg_value & EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_3_CHAN_MAP_MSK) >> EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_3_CHAN_MAP_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "empei_i_field_PRIORITY_3_CHAN_MAP_get", N, value );

    return value;
}

#ifndef empei_i_field_range_PRIORITY_3_CHAN_MAP_set
#define empei_i_field_range_PRIORITY_3_CHAN_MAP_set( b, h, N, start_bit, stop_bit, value ) \
       _empei_i_field_range_PRIORITY_3_CHAN_MAP_set( LOG_CALLER b, h, N, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_PRIORITY_3_CHAN_MAP_set( LOG_CALLER_DEFN
                                                                 empei_i_buffer_t *b,
                                                                 empei_i_handle_t *h,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_range_PRIORITY_3_CHAN_MAP_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_PRIORITY_3_CHAN_MAP_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_PRIORITY_3_CHAN_MAP_set", stop_bit, 2 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_PRIORITY_3_CHAN_MAP_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* ((0x00000500 + (N) * 4) bits 14:12) field PRIORITY_3_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 12) {
            subfield_offset = start_bit - 12;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  12 - start_bit;
            subfield_start_bit = 12;
        }
        if (stop_bit < 14) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 14;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000500 + (N) * 4) bits 14:12) field PRIORITY_3_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
        _empei_i_reg_CHAN_MAP_array_field_set( LOG_CALLER_ARGS
                                               b,
                                               h,
                                               N,
                                               subfield_mask << (EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_3_CHAN_MAP_OFF + subfield_offset),
                                               EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_3_CHAN_MAP_OFF + subfield_offset,
                                               value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_PRIORITY_3_CHAN_MAP_get
#define empei_i_field_range_PRIORITY_3_CHAN_MAP_get( b, h, N, start_bit, stop_bit ) \
       _empei_i_field_range_PRIORITY_3_CHAN_MAP_get( LOG_CALLER b, h, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_PRIORITY_3_CHAN_MAP_get( LOG_CALLER_DEFN
                                                                   empei_i_buffer_t *b,
                                                                   empei_i_handle_t *h,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_range_PRIORITY_3_CHAN_MAP_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_PRIORITY_3_CHAN_MAP_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_PRIORITY_3_CHAN_MAP_get", stop_bit, 2 );
    if (start_bit > 12) {
        subfield_offset = start_bit - 12;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 12 - start_bit;
        subfield_start_bit = 12;
    }
    if (stop_bit < 14) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 14;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000500 + (N) * 4) bits 14:12) field PRIORITY_3_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
    reg_value = _empei_i_reg_CHAN_MAP_array_read( LOG_CALLER_ARGS b, h, N);
    field_value = (reg_value & EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_3_CHAN_MAP_MSK)
                  >> EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_3_CHAN_MAP_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_3_CHAN_MAP_MSK, EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_3_CHAN_MAP_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_PRIORITY_3_CHAN_MAP_get", N, start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_PRIORITY_4_CHAN_MAP_set
#define empei_i_field_PRIORITY_4_CHAN_MAP_set( b, h, N, value ) \
       _empei_i_field_PRIORITY_4_CHAN_MAP_set( LOG_CALLER b, h, N, value )
#endif
static INLINE void _empei_i_field_PRIORITY_4_CHAN_MAP_set( LOG_CALLER_DEFN
                                                           empei_i_buffer_t *b,
                                                           empei_i_handle_t *h,
                                                           UINT32  N,
                                                           UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_PRIORITY_4_CHAN_MAP_set", N, 11);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_PRIORITY_4_CHAN_MAP_set", value, 7);
    IOLOG( "%s <= N=%d 0x%08x", "empei_i_field_PRIORITY_4_CHAN_MAP_set", N, value );

    /* ((0x00000500 + (N) * 4) bits 18:16) field PRIORITY_4_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
    _empei_i_reg_CHAN_MAP_array_field_set( LOG_CALLER_ARGS
                                           b,
                                           h,
                                           N,
                                           EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_4_CHAN_MAP_MSK,
                                           EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_4_CHAN_MAP_OFF,
                                           value);
}


#ifndef empei_i_field_PRIORITY_4_CHAN_MAP_get
#define empei_i_field_PRIORITY_4_CHAN_MAP_get( b, h, N ) \
       _empei_i_field_PRIORITY_4_CHAN_MAP_get( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _empei_i_field_PRIORITY_4_CHAN_MAP_get( LOG_CALLER_DEFN
                                                             empei_i_buffer_t *b,
                                                             empei_i_handle_t *h,
                                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_PRIORITY_4_CHAN_MAP_get", N, 11);
    /* ((0x00000500 + (N) * 4) bits 18:16) field PRIORITY_4_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
    reg_value = _empei_i_reg_CHAN_MAP_array_read( LOG_CALLER_ARGS b, h, N);
    value = (reg_value & EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_4_CHAN_MAP_MSK) >> EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_4_CHAN_MAP_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "empei_i_field_PRIORITY_4_CHAN_MAP_get", N, value );

    return value;
}

#ifndef empei_i_field_range_PRIORITY_4_CHAN_MAP_set
#define empei_i_field_range_PRIORITY_4_CHAN_MAP_set( b, h, N, start_bit, stop_bit, value ) \
       _empei_i_field_range_PRIORITY_4_CHAN_MAP_set( LOG_CALLER b, h, N, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_PRIORITY_4_CHAN_MAP_set( LOG_CALLER_DEFN
                                                                 empei_i_buffer_t *b,
                                                                 empei_i_handle_t *h,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_range_PRIORITY_4_CHAN_MAP_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_PRIORITY_4_CHAN_MAP_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_PRIORITY_4_CHAN_MAP_set", stop_bit, 2 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_PRIORITY_4_CHAN_MAP_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* ((0x00000500 + (N) * 4) bits 18:16) field PRIORITY_4_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 16) {
            subfield_offset = start_bit - 16;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  16 - start_bit;
            subfield_start_bit = 16;
        }
        if (stop_bit < 18) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 18;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000500 + (N) * 4) bits 18:16) field PRIORITY_4_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
        _empei_i_reg_CHAN_MAP_array_field_set( LOG_CALLER_ARGS
                                               b,
                                               h,
                                               N,
                                               subfield_mask << (EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_4_CHAN_MAP_OFF + subfield_offset),
                                               EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_4_CHAN_MAP_OFF + subfield_offset,
                                               value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_PRIORITY_4_CHAN_MAP_get
#define empei_i_field_range_PRIORITY_4_CHAN_MAP_get( b, h, N, start_bit, stop_bit ) \
       _empei_i_field_range_PRIORITY_4_CHAN_MAP_get( LOG_CALLER b, h, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_PRIORITY_4_CHAN_MAP_get( LOG_CALLER_DEFN
                                                                   empei_i_buffer_t *b,
                                                                   empei_i_handle_t *h,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_range_PRIORITY_4_CHAN_MAP_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_PRIORITY_4_CHAN_MAP_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_PRIORITY_4_CHAN_MAP_get", stop_bit, 2 );
    if (start_bit > 16) {
        subfield_offset = start_bit - 16;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 16 - start_bit;
        subfield_start_bit = 16;
    }
    if (stop_bit < 18) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 18;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000500 + (N) * 4) bits 18:16) field PRIORITY_4_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
    reg_value = _empei_i_reg_CHAN_MAP_array_read( LOG_CALLER_ARGS b, h, N);
    field_value = (reg_value & EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_4_CHAN_MAP_MSK)
                  >> EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_4_CHAN_MAP_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_4_CHAN_MAP_MSK, EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_4_CHAN_MAP_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_PRIORITY_4_CHAN_MAP_get", N, start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_PRIORITY_5_CHAN_MAP_set
#define empei_i_field_PRIORITY_5_CHAN_MAP_set( b, h, N, value ) \
       _empei_i_field_PRIORITY_5_CHAN_MAP_set( LOG_CALLER b, h, N, value )
#endif
static INLINE void _empei_i_field_PRIORITY_5_CHAN_MAP_set( LOG_CALLER_DEFN
                                                           empei_i_buffer_t *b,
                                                           empei_i_handle_t *h,
                                                           UINT32  N,
                                                           UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_PRIORITY_5_CHAN_MAP_set", N, 11);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_PRIORITY_5_CHAN_MAP_set", value, 7);
    IOLOG( "%s <= N=%d 0x%08x", "empei_i_field_PRIORITY_5_CHAN_MAP_set", N, value );

    /* ((0x00000500 + (N) * 4) bits 22:20) field PRIORITY_5_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
    _empei_i_reg_CHAN_MAP_array_field_set( LOG_CALLER_ARGS
                                           b,
                                           h,
                                           N,
                                           EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_5_CHAN_MAP_MSK,
                                           EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_5_CHAN_MAP_OFF,
                                           value);
}


#ifndef empei_i_field_PRIORITY_5_CHAN_MAP_get
#define empei_i_field_PRIORITY_5_CHAN_MAP_get( b, h, N ) \
       _empei_i_field_PRIORITY_5_CHAN_MAP_get( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _empei_i_field_PRIORITY_5_CHAN_MAP_get( LOG_CALLER_DEFN
                                                             empei_i_buffer_t *b,
                                                             empei_i_handle_t *h,
                                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_PRIORITY_5_CHAN_MAP_get", N, 11);
    /* ((0x00000500 + (N) * 4) bits 22:20) field PRIORITY_5_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
    reg_value = _empei_i_reg_CHAN_MAP_array_read( LOG_CALLER_ARGS b, h, N);
    value = (reg_value & EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_5_CHAN_MAP_MSK) >> EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_5_CHAN_MAP_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "empei_i_field_PRIORITY_5_CHAN_MAP_get", N, value );

    return value;
}

#ifndef empei_i_field_range_PRIORITY_5_CHAN_MAP_set
#define empei_i_field_range_PRIORITY_5_CHAN_MAP_set( b, h, N, start_bit, stop_bit, value ) \
       _empei_i_field_range_PRIORITY_5_CHAN_MAP_set( LOG_CALLER b, h, N, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_PRIORITY_5_CHAN_MAP_set( LOG_CALLER_DEFN
                                                                 empei_i_buffer_t *b,
                                                                 empei_i_handle_t *h,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_range_PRIORITY_5_CHAN_MAP_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_PRIORITY_5_CHAN_MAP_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_PRIORITY_5_CHAN_MAP_set", stop_bit, 2 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_PRIORITY_5_CHAN_MAP_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* ((0x00000500 + (N) * 4) bits 22:20) field PRIORITY_5_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 20) {
            subfield_offset = start_bit - 20;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  20 - start_bit;
            subfield_start_bit = 20;
        }
        if (stop_bit < 22) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 22;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000500 + (N) * 4) bits 22:20) field PRIORITY_5_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
        _empei_i_reg_CHAN_MAP_array_field_set( LOG_CALLER_ARGS
                                               b,
                                               h,
                                               N,
                                               subfield_mask << (EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_5_CHAN_MAP_OFF + subfield_offset),
                                               EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_5_CHAN_MAP_OFF + subfield_offset,
                                               value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_PRIORITY_5_CHAN_MAP_get
#define empei_i_field_range_PRIORITY_5_CHAN_MAP_get( b, h, N, start_bit, stop_bit ) \
       _empei_i_field_range_PRIORITY_5_CHAN_MAP_get( LOG_CALLER b, h, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_PRIORITY_5_CHAN_MAP_get( LOG_CALLER_DEFN
                                                                   empei_i_buffer_t *b,
                                                                   empei_i_handle_t *h,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_range_PRIORITY_5_CHAN_MAP_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_PRIORITY_5_CHAN_MAP_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_PRIORITY_5_CHAN_MAP_get", stop_bit, 2 );
    if (start_bit > 20) {
        subfield_offset = start_bit - 20;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 20 - start_bit;
        subfield_start_bit = 20;
    }
    if (stop_bit < 22) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 22;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000500 + (N) * 4) bits 22:20) field PRIORITY_5_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
    reg_value = _empei_i_reg_CHAN_MAP_array_read( LOG_CALLER_ARGS b, h, N);
    field_value = (reg_value & EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_5_CHAN_MAP_MSK)
                  >> EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_5_CHAN_MAP_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_5_CHAN_MAP_MSK, EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_5_CHAN_MAP_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_PRIORITY_5_CHAN_MAP_get", N, start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_PRIORITY_6_CHAN_MAP_set
#define empei_i_field_PRIORITY_6_CHAN_MAP_set( b, h, N, value ) \
       _empei_i_field_PRIORITY_6_CHAN_MAP_set( LOG_CALLER b, h, N, value )
#endif
static INLINE void _empei_i_field_PRIORITY_6_CHAN_MAP_set( LOG_CALLER_DEFN
                                                           empei_i_buffer_t *b,
                                                           empei_i_handle_t *h,
                                                           UINT32  N,
                                                           UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_PRIORITY_6_CHAN_MAP_set", N, 11);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_PRIORITY_6_CHAN_MAP_set", value, 7);
    IOLOG( "%s <= N=%d 0x%08x", "empei_i_field_PRIORITY_6_CHAN_MAP_set", N, value );

    /* ((0x00000500 + (N) * 4) bits 26:24) field PRIORITY_6_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
    _empei_i_reg_CHAN_MAP_array_field_set( LOG_CALLER_ARGS
                                           b,
                                           h,
                                           N,
                                           EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_6_CHAN_MAP_MSK,
                                           EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_6_CHAN_MAP_OFF,
                                           value);
}


#ifndef empei_i_field_PRIORITY_6_CHAN_MAP_get
#define empei_i_field_PRIORITY_6_CHAN_MAP_get( b, h, N ) \
       _empei_i_field_PRIORITY_6_CHAN_MAP_get( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _empei_i_field_PRIORITY_6_CHAN_MAP_get( LOG_CALLER_DEFN
                                                             empei_i_buffer_t *b,
                                                             empei_i_handle_t *h,
                                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_PRIORITY_6_CHAN_MAP_get", N, 11);
    /* ((0x00000500 + (N) * 4) bits 26:24) field PRIORITY_6_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
    reg_value = _empei_i_reg_CHAN_MAP_array_read( LOG_CALLER_ARGS b, h, N);
    value = (reg_value & EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_6_CHAN_MAP_MSK) >> EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_6_CHAN_MAP_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "empei_i_field_PRIORITY_6_CHAN_MAP_get", N, value );

    return value;
}

#ifndef empei_i_field_range_PRIORITY_6_CHAN_MAP_set
#define empei_i_field_range_PRIORITY_6_CHAN_MAP_set( b, h, N, start_bit, stop_bit, value ) \
       _empei_i_field_range_PRIORITY_6_CHAN_MAP_set( LOG_CALLER b, h, N, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_PRIORITY_6_CHAN_MAP_set( LOG_CALLER_DEFN
                                                                 empei_i_buffer_t *b,
                                                                 empei_i_handle_t *h,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_range_PRIORITY_6_CHAN_MAP_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_PRIORITY_6_CHAN_MAP_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_PRIORITY_6_CHAN_MAP_set", stop_bit, 2 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_PRIORITY_6_CHAN_MAP_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* ((0x00000500 + (N) * 4) bits 26:24) field PRIORITY_6_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 24) {
            subfield_offset = start_bit - 24;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  24 - start_bit;
            subfield_start_bit = 24;
        }
        if (stop_bit < 26) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 26;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000500 + (N) * 4) bits 26:24) field PRIORITY_6_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
        _empei_i_reg_CHAN_MAP_array_field_set( LOG_CALLER_ARGS
                                               b,
                                               h,
                                               N,
                                               subfield_mask << (EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_6_CHAN_MAP_OFF + subfield_offset),
                                               EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_6_CHAN_MAP_OFF + subfield_offset,
                                               value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_PRIORITY_6_CHAN_MAP_get
#define empei_i_field_range_PRIORITY_6_CHAN_MAP_get( b, h, N, start_bit, stop_bit ) \
       _empei_i_field_range_PRIORITY_6_CHAN_MAP_get( LOG_CALLER b, h, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_PRIORITY_6_CHAN_MAP_get( LOG_CALLER_DEFN
                                                                   empei_i_buffer_t *b,
                                                                   empei_i_handle_t *h,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_range_PRIORITY_6_CHAN_MAP_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_PRIORITY_6_CHAN_MAP_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_PRIORITY_6_CHAN_MAP_get", stop_bit, 2 );
    if (start_bit > 24) {
        subfield_offset = start_bit - 24;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 24 - start_bit;
        subfield_start_bit = 24;
    }
    if (stop_bit < 26) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 26;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000500 + (N) * 4) bits 26:24) field PRIORITY_6_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
    reg_value = _empei_i_reg_CHAN_MAP_array_read( LOG_CALLER_ARGS b, h, N);
    field_value = (reg_value & EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_6_CHAN_MAP_MSK)
                  >> EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_6_CHAN_MAP_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_6_CHAN_MAP_MSK, EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_6_CHAN_MAP_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_PRIORITY_6_CHAN_MAP_get", N, start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_PRIORITY_7_CHAN_MAP_set
#define empei_i_field_PRIORITY_7_CHAN_MAP_set( b, h, N, value ) \
       _empei_i_field_PRIORITY_7_CHAN_MAP_set( LOG_CALLER b, h, N, value )
#endif
static INLINE void _empei_i_field_PRIORITY_7_CHAN_MAP_set( LOG_CALLER_DEFN
                                                           empei_i_buffer_t *b,
                                                           empei_i_handle_t *h,
                                                           UINT32  N,
                                                           UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_PRIORITY_7_CHAN_MAP_set", N, 11);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_PRIORITY_7_CHAN_MAP_set", value, 7);
    IOLOG( "%s <= N=%d 0x%08x", "empei_i_field_PRIORITY_7_CHAN_MAP_set", N, value );

    /* ((0x00000500 + (N) * 4) bits 30:28) field PRIORITY_7_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
    _empei_i_reg_CHAN_MAP_array_field_set( LOG_CALLER_ARGS
                                           b,
                                           h,
                                           N,
                                           EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_7_CHAN_MAP_MSK,
                                           EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_7_CHAN_MAP_OFF,
                                           value);
}


#ifndef empei_i_field_PRIORITY_7_CHAN_MAP_get
#define empei_i_field_PRIORITY_7_CHAN_MAP_get( b, h, N ) \
       _empei_i_field_PRIORITY_7_CHAN_MAP_get( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _empei_i_field_PRIORITY_7_CHAN_MAP_get( LOG_CALLER_DEFN
                                                             empei_i_buffer_t *b,
                                                             empei_i_handle_t *h,
                                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_PRIORITY_7_CHAN_MAP_get", N, 11);
    /* ((0x00000500 + (N) * 4) bits 30:28) field PRIORITY_7_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
    reg_value = _empei_i_reg_CHAN_MAP_array_read( LOG_CALLER_ARGS b, h, N);
    value = (reg_value & EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_7_CHAN_MAP_MSK) >> EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_7_CHAN_MAP_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "empei_i_field_PRIORITY_7_CHAN_MAP_get", N, value );

    return value;
}

#ifndef empei_i_field_range_PRIORITY_7_CHAN_MAP_set
#define empei_i_field_range_PRIORITY_7_CHAN_MAP_set( b, h, N, start_bit, stop_bit, value ) \
       _empei_i_field_range_PRIORITY_7_CHAN_MAP_set( LOG_CALLER b, h, N, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_PRIORITY_7_CHAN_MAP_set( LOG_CALLER_DEFN
                                                                 empei_i_buffer_t *b,
                                                                 empei_i_handle_t *h,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_range_PRIORITY_7_CHAN_MAP_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_PRIORITY_7_CHAN_MAP_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_PRIORITY_7_CHAN_MAP_set", stop_bit, 2 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_PRIORITY_7_CHAN_MAP_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* ((0x00000500 + (N) * 4) bits 30:28) field PRIORITY_7_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 28) {
            subfield_offset = start_bit - 28;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  28 - start_bit;
            subfield_start_bit = 28;
        }
        if (stop_bit < 30) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 30;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000500 + (N) * 4) bits 30:28) field PRIORITY_7_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
        _empei_i_reg_CHAN_MAP_array_field_set( LOG_CALLER_ARGS
                                               b,
                                               h,
                                               N,
                                               subfield_mask << (EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_7_CHAN_MAP_OFF + subfield_offset),
                                               EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_7_CHAN_MAP_OFF + subfield_offset,
                                               value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_PRIORITY_7_CHAN_MAP_get
#define empei_i_field_range_PRIORITY_7_CHAN_MAP_get( b, h, N, start_bit, stop_bit ) \
       _empei_i_field_range_PRIORITY_7_CHAN_MAP_get( LOG_CALLER b, h, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_PRIORITY_7_CHAN_MAP_get( LOG_CALLER_DEFN
                                                                   empei_i_buffer_t *b,
                                                                   empei_i_handle_t *h,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_range_PRIORITY_7_CHAN_MAP_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_PRIORITY_7_CHAN_MAP_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_PRIORITY_7_CHAN_MAP_get", stop_bit, 2 );
    if (start_bit > 28) {
        subfield_offset = start_bit - 28;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 28 - start_bit;
        subfield_start_bit = 28;
    }
    if (stop_bit < 30) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 30;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000500 + (N) * 4) bits 30:28) field PRIORITY_7_CHAN_MAP of register PMC_EMPEI120_I_REG_CHAN_MAP index N=0..11 */
    reg_value = _empei_i_reg_CHAN_MAP_array_read( LOG_CALLER_ARGS b, h, N);
    field_value = (reg_value & EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_7_CHAN_MAP_MSK)
                  >> EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_7_CHAN_MAP_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_7_CHAN_MAP_MSK, EMPEI120_I_REG_CHAN_MAP_BIT_PRIORITY_7_CHAN_MAP_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_PRIORITY_7_CHAN_MAP_get", N, start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 *             Parameter Access Functions for Paramset config_N_size64
 * ==================================================================================
 */

#ifndef empei_i_field_EXT_PMON_CFG_set
#define empei_i_field_EXT_PMON_CFG_set( b, h, N, value ) \
       _empei_i_field_EXT_PMON_CFG_set( LOG_CALLER b, h, N, value )
#endif
static INLINE void _empei_i_field_EXT_PMON_CFG_set( LOG_CALLER_DEFN
                                                    empei_i_buffer_t *b,
                                                    empei_i_handle_t *h,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (N > 63)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_EXT_PMON_CFG_set", N, 63);
    if (value > 511)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_EXT_PMON_CFG_set", value, 511);
    IOLOG( "%s <= N=%d 0x%08x", "empei_i_field_EXT_PMON_CFG_set", N, value );

    /* ((0x00000a00 + (N) * 4) bits 8:0) field EXT_PMON_CFG of register PMC_EMPEI120_I_REG_EXT_PMON_CONFIG index N=0..63 */
    _empei_i_reg_EXT_PMON_CONFIG_array_field_set( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  N,
                                                  EMPEI120_I_REG_EXT_PMON_CONFIG_BIT_EXT_PMON_CFG_MSK,
                                                  EMPEI120_I_REG_EXT_PMON_CONFIG_BIT_EXT_PMON_CFG_OFF,
                                                  value);
}


#ifndef empei_i_field_EXT_PMON_CFG_get
#define empei_i_field_EXT_PMON_CFG_get( b, h, N ) \
       _empei_i_field_EXT_PMON_CFG_get( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _empei_i_field_EXT_PMON_CFG_get( LOG_CALLER_DEFN
                                                      empei_i_buffer_t *b,
                                                      empei_i_handle_t *h,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 63)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_EXT_PMON_CFG_get", N, 63);
    /* ((0x00000a00 + (N) * 4) bits 8:0) field EXT_PMON_CFG of register PMC_EMPEI120_I_REG_EXT_PMON_CONFIG index N=0..63 */
    reg_value = _empei_i_reg_EXT_PMON_CONFIG_array_read( LOG_CALLER_ARGS b, h, N);
    value = (reg_value & EMPEI120_I_REG_EXT_PMON_CONFIG_BIT_EXT_PMON_CFG_MSK) >> EMPEI120_I_REG_EXT_PMON_CONFIG_BIT_EXT_PMON_CFG_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "empei_i_field_EXT_PMON_CFG_get", N, value );

    return value;
}

#ifndef empei_i_field_range_EXT_PMON_CFG_set
#define empei_i_field_range_EXT_PMON_CFG_set( b, h, N, start_bit, stop_bit, value ) \
       _empei_i_field_range_EXT_PMON_CFG_set( LOG_CALLER b, h, N, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_EXT_PMON_CFG_set( LOG_CALLER_DEFN
                                                          empei_i_buffer_t *b,
                                                          empei_i_handle_t *h,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (N > 63)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_range_EXT_PMON_CFG_set", N, 63);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_EXT_PMON_CFG_set", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_EXT_PMON_CFG_set", stop_bit, 8 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_EXT_PMON_CFG_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* ((0x00000a00 + (N) * 4) bits 8:0) field EXT_PMON_CFG of register PMC_EMPEI120_I_REG_EXT_PMON_CONFIG index N=0..63 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 8) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 8;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000a00 + (N) * 4) bits 8:0) field EXT_PMON_CFG of register PMC_EMPEI120_I_REG_EXT_PMON_CONFIG index N=0..63 */
        _empei_i_reg_EXT_PMON_CONFIG_array_field_set( LOG_CALLER_ARGS
                                                      b,
                                                      h,
                                                      N,
                                                      subfield_mask << (EMPEI120_I_REG_EXT_PMON_CONFIG_BIT_EXT_PMON_CFG_OFF + subfield_offset),
                                                      EMPEI120_I_REG_EXT_PMON_CONFIG_BIT_EXT_PMON_CFG_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_EXT_PMON_CFG_get
#define empei_i_field_range_EXT_PMON_CFG_get( b, h, N, start_bit, stop_bit ) \
       _empei_i_field_range_EXT_PMON_CFG_get( LOG_CALLER b, h, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_EXT_PMON_CFG_get( LOG_CALLER_DEFN
                                                            empei_i_buffer_t *b,
                                                            empei_i_handle_t *h,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 63)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_range_EXT_PMON_CFG_get", N, 63);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_EXT_PMON_CFG_get", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_EXT_PMON_CFG_get", stop_bit, 8 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 8) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 8;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000a00 + (N) * 4) bits 8:0) field EXT_PMON_CFG of register PMC_EMPEI120_I_REG_EXT_PMON_CONFIG index N=0..63 */
    reg_value = _empei_i_reg_EXT_PMON_CONFIG_array_read( LOG_CALLER_ARGS b, h, N);
    field_value = (reg_value & EMPEI120_I_REG_EXT_PMON_CONFIG_BIT_EXT_PMON_CFG_MSK)
                  >> EMPEI120_I_REG_EXT_PMON_CONFIG_BIT_EXT_PMON_CFG_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_EXT_PMON_CONFIG_BIT_EXT_PMON_CFG_MSK, EMPEI120_I_REG_EXT_PMON_CONFIG_BIT_EXT_PMON_CFG_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_EXT_PMON_CFG_get", N, start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_EXT_PMON_EN_set
#define empei_i_field_EXT_PMON_EN_set( b, h, N, value ) \
       _empei_i_field_EXT_PMON_EN_set( LOG_CALLER b, h, N, value )
#endif
static INLINE void _empei_i_field_EXT_PMON_EN_set( LOG_CALLER_DEFN
                                                   empei_i_buffer_t *b,
                                                   empei_i_handle_t *h,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 63)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_EXT_PMON_EN_set", N, 63);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_EXT_PMON_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "empei_i_field_EXT_PMON_EN_set", N, value );

    /* ((0x00000a00 + (N) * 4) bits 9) field EXT_PMON_EN of register PMC_EMPEI120_I_REG_EXT_PMON_CONFIG index N=0..63 */
    _empei_i_reg_EXT_PMON_CONFIG_array_field_set( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  N,
                                                  EMPEI120_I_REG_EXT_PMON_CONFIG_BIT_EXT_PMON_EN_MSK,
                                                  EMPEI120_I_REG_EXT_PMON_CONFIG_BIT_EXT_PMON_EN_OFF,
                                                  value);
}


#ifndef empei_i_field_EXT_PMON_EN_get
#define empei_i_field_EXT_PMON_EN_get( b, h, N ) \
       _empei_i_field_EXT_PMON_EN_get( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _empei_i_field_EXT_PMON_EN_get( LOG_CALLER_DEFN
                                                     empei_i_buffer_t *b,
                                                     empei_i_handle_t *h,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 63)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_EXT_PMON_EN_get", N, 63);
    /* ((0x00000a00 + (N) * 4) bits 9) field EXT_PMON_EN of register PMC_EMPEI120_I_REG_EXT_PMON_CONFIG index N=0..63 */
    reg_value = _empei_i_reg_EXT_PMON_CONFIG_array_read( LOG_CALLER_ARGS b, h, N);
    value = (reg_value & EMPEI120_I_REG_EXT_PMON_CONFIG_BIT_EXT_PMON_EN_MSK) >> EMPEI120_I_REG_EXT_PMON_CONFIG_BIT_EXT_PMON_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "empei_i_field_EXT_PMON_EN_get", N, value );

    return value;
}

/*
 * ==================================================================================
 *             Parameter Access Functions for Paramset config_N_size96
 * ==================================================================================
 */

#ifndef empei_i_field_SYS_MAP_TBL_set
#define empei_i_field_SYS_MAP_TBL_set( b, h, N, value ) \
       _empei_i_field_SYS_MAP_TBL_set( LOG_CALLER b, h, N, value )
#endif
static INLINE void _empei_i_field_SYS_MAP_TBL_set( LOG_CALLER_DEFN
                                                   empei_i_buffer_t *b,
                                                   empei_i_handle_t *h,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_SYS_MAP_TBL_set", N, 95);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_SYS_MAP_TBL_set", value, 255);
    IOLOG( "%s <= N=%d 0x%08x", "empei_i_field_SYS_MAP_TBL_set", N, value );

    /* ((0x00000700 + (N) * 4) bits 7:0) field SYS_MAP_TBL of register PMC_EMPEI120_I_REG_SYS_MAP_TBL index N=0..95 */
    _empei_i_reg_SYS_MAP_TBL_array_field_set( LOG_CALLER_ARGS
                                              b,
                                              h,
                                              N,
                                              EMPEI120_I_REG_SYS_MAP_TBL_BIT_SYS_MAP_TBL_MSK,
                                              EMPEI120_I_REG_SYS_MAP_TBL_BIT_SYS_MAP_TBL_OFF,
                                              value);
}


#ifndef empei_i_field_SYS_MAP_TBL_get
#define empei_i_field_SYS_MAP_TBL_get( b, h, N ) \
       _empei_i_field_SYS_MAP_TBL_get( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _empei_i_field_SYS_MAP_TBL_get( LOG_CALLER_DEFN
                                                     empei_i_buffer_t *b,
                                                     empei_i_handle_t *h,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_SYS_MAP_TBL_get", N, 95);
    /* ((0x00000700 + (N) * 4) bits 7:0) field SYS_MAP_TBL of register PMC_EMPEI120_I_REG_SYS_MAP_TBL index N=0..95 */
    reg_value = _empei_i_reg_SYS_MAP_TBL_array_read( LOG_CALLER_ARGS b, h, N);
    value = (reg_value & EMPEI120_I_REG_SYS_MAP_TBL_BIT_SYS_MAP_TBL_MSK) >> EMPEI120_I_REG_SYS_MAP_TBL_BIT_SYS_MAP_TBL_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "empei_i_field_SYS_MAP_TBL_get", N, value );

    return value;
}

#ifndef empei_i_field_range_SYS_MAP_TBL_set
#define empei_i_field_range_SYS_MAP_TBL_set( b, h, N, start_bit, stop_bit, value ) \
       _empei_i_field_range_SYS_MAP_TBL_set( LOG_CALLER b, h, N, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_SYS_MAP_TBL_set( LOG_CALLER_DEFN
                                                         empei_i_buffer_t *b,
                                                         empei_i_handle_t *h,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_range_SYS_MAP_TBL_set", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_SYS_MAP_TBL_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_SYS_MAP_TBL_set", stop_bit, 7 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_SYS_MAP_TBL_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* ((0x00000700 + (N) * 4) bits 7:0) field SYS_MAP_TBL of register PMC_EMPEI120_I_REG_SYS_MAP_TBL index N=0..95 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000700 + (N) * 4) bits 7:0) field SYS_MAP_TBL of register PMC_EMPEI120_I_REG_SYS_MAP_TBL index N=0..95 */
        _empei_i_reg_SYS_MAP_TBL_array_field_set( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  N,
                                                  subfield_mask << (EMPEI120_I_REG_SYS_MAP_TBL_BIT_SYS_MAP_TBL_OFF + subfield_offset),
                                                  EMPEI120_I_REG_SYS_MAP_TBL_BIT_SYS_MAP_TBL_OFF + subfield_offset,
                                                  value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_SYS_MAP_TBL_get
#define empei_i_field_range_SYS_MAP_TBL_get( b, h, N, start_bit, stop_bit ) \
       _empei_i_field_range_SYS_MAP_TBL_get( LOG_CALLER b, h, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_SYS_MAP_TBL_get( LOG_CALLER_DEFN
                                                           empei_i_buffer_t *b,
                                                           empei_i_handle_t *h,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_range_SYS_MAP_TBL_get", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_SYS_MAP_TBL_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_SYS_MAP_TBL_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000700 + (N) * 4) bits 7:0) field SYS_MAP_TBL of register PMC_EMPEI120_I_REG_SYS_MAP_TBL index N=0..95 */
    reg_value = _empei_i_reg_SYS_MAP_TBL_array_read( LOG_CALLER_ARGS b, h, N);
    field_value = (reg_value & EMPEI120_I_REG_SYS_MAP_TBL_BIT_SYS_MAP_TBL_MSK)
                  >> EMPEI120_I_REG_SYS_MAP_TBL_BIT_SYS_MAP_TBL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_SYS_MAP_TBL_BIT_SYS_MAP_TBL_MSK, EMPEI120_I_REG_SYS_MAP_TBL_BIT_SYS_MAP_TBL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_SYS_MAP_TBL_get", N, start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_SYS_ZONE_THRESH_set
#define empei_i_field_SYS_ZONE_THRESH_set( b, h, N, value ) \
       _empei_i_field_SYS_ZONE_THRESH_set( LOG_CALLER b, h, N, value )
#endif
static INLINE void _empei_i_field_SYS_ZONE_THRESH_set( LOG_CALLER_DEFN
                                                       empei_i_buffer_t *b,
                                                       empei_i_handle_t *h,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_SYS_ZONE_THRESH_set", N, 95);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_SYS_ZONE_THRESH_set", value, 3);
    IOLOG( "%s <= N=%d 0x%08x", "empei_i_field_SYS_ZONE_THRESH_set", N, value );

    /* ((0x00000700 + (N) * 4) bits 17:16) field SYS_ZONE_THRESH of register PMC_EMPEI120_I_REG_SYS_MAP_TBL index N=0..95 */
    _empei_i_reg_SYS_MAP_TBL_array_field_set( LOG_CALLER_ARGS
                                              b,
                                              h,
                                              N,
                                              EMPEI120_I_REG_SYS_MAP_TBL_BIT_SYS_ZONE_THRESH_MSK,
                                              EMPEI120_I_REG_SYS_MAP_TBL_BIT_SYS_ZONE_THRESH_OFF,
                                              value);
}


#ifndef empei_i_field_SYS_ZONE_THRESH_get
#define empei_i_field_SYS_ZONE_THRESH_get( b, h, N ) \
       _empei_i_field_SYS_ZONE_THRESH_get( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _empei_i_field_SYS_ZONE_THRESH_get( LOG_CALLER_DEFN
                                                         empei_i_buffer_t *b,
                                                         empei_i_handle_t *h,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_SYS_ZONE_THRESH_get", N, 95);
    /* ((0x00000700 + (N) * 4) bits 17:16) field SYS_ZONE_THRESH of register PMC_EMPEI120_I_REG_SYS_MAP_TBL index N=0..95 */
    reg_value = _empei_i_reg_SYS_MAP_TBL_array_read( LOG_CALLER_ARGS b, h, N);
    value = (reg_value & EMPEI120_I_REG_SYS_MAP_TBL_BIT_SYS_ZONE_THRESH_MSK) >> EMPEI120_I_REG_SYS_MAP_TBL_BIT_SYS_ZONE_THRESH_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "empei_i_field_SYS_ZONE_THRESH_get", N, value );

    return value;
}

#ifndef empei_i_field_range_SYS_ZONE_THRESH_set
#define empei_i_field_range_SYS_ZONE_THRESH_set( b, h, N, start_bit, stop_bit, value ) \
       _empei_i_field_range_SYS_ZONE_THRESH_set( LOG_CALLER b, h, N, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_SYS_ZONE_THRESH_set( LOG_CALLER_DEFN
                                                             empei_i_buffer_t *b,
                                                             empei_i_handle_t *h,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_range_SYS_ZONE_THRESH_set", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_SYS_ZONE_THRESH_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_SYS_ZONE_THRESH_set", stop_bit, 1 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_SYS_ZONE_THRESH_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* ((0x00000700 + (N) * 4) bits 17:16) field SYS_ZONE_THRESH of register PMC_EMPEI120_I_REG_SYS_MAP_TBL index N=0..95 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 16) {
            subfield_offset = start_bit - 16;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  16 - start_bit;
            subfield_start_bit = 16;
        }
        if (stop_bit < 17) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 17;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000700 + (N) * 4) bits 17:16) field SYS_ZONE_THRESH of register PMC_EMPEI120_I_REG_SYS_MAP_TBL index N=0..95 */
        _empei_i_reg_SYS_MAP_TBL_array_field_set( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  N,
                                                  subfield_mask << (EMPEI120_I_REG_SYS_MAP_TBL_BIT_SYS_ZONE_THRESH_OFF + subfield_offset),
                                                  EMPEI120_I_REG_SYS_MAP_TBL_BIT_SYS_ZONE_THRESH_OFF + subfield_offset,
                                                  value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_SYS_ZONE_THRESH_get
#define empei_i_field_range_SYS_ZONE_THRESH_get( b, h, N, start_bit, stop_bit ) \
       _empei_i_field_range_SYS_ZONE_THRESH_get( LOG_CALLER b, h, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_SYS_ZONE_THRESH_get( LOG_CALLER_DEFN
                                                               empei_i_buffer_t *b,
                                                               empei_i_handle_t *h,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 95)
        IO_RANGE_CHECK("%s N is %d but max is %d", "empei_i_field_range_SYS_ZONE_THRESH_get", N, 95);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_SYS_ZONE_THRESH_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_SYS_ZONE_THRESH_get", stop_bit, 1 );
    if (start_bit > 16) {
        subfield_offset = start_bit - 16;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 16 - start_bit;
        subfield_start_bit = 16;
    }
    if (stop_bit < 17) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 17;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000700 + (N) * 4) bits 17:16) field SYS_ZONE_THRESH of register PMC_EMPEI120_I_REG_SYS_MAP_TBL index N=0..95 */
    reg_value = _empei_i_reg_SYS_MAP_TBL_array_read( LOG_CALLER_ARGS b, h, N);
    field_value = (reg_value & EMPEI120_I_REG_SYS_MAP_TBL_BIT_SYS_ZONE_THRESH_MSK)
                  >> EMPEI120_I_REG_SYS_MAP_TBL_BIT_SYS_ZONE_THRESH_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_SYS_MAP_TBL_BIT_SYS_ZONE_THRESH_MSK, EMPEI120_I_REG_SYS_MAP_TBL_BIT_SYS_ZONE_THRESH_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_SYS_ZONE_THRESH_get", N, start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 *               Parameter Access Functions for Paramset config_edge
 * ==================================================================================
 */

#ifndef empei_i_field_EXTRACT_LS_UPDATE_set
#define empei_i_field_EXTRACT_LS_UPDATE_set( b, h, value ) \
       _empei_i_field_EXTRACT_LS_UPDATE_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_EXTRACT_LS_UPDATE_set( LOG_CALLER_DEFN
                                                         empei_i_buffer_t *b,
                                                         empei_i_handle_t *h,
                                                         UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_EXTRACT_LS_UPDATE_set", value, 1);
    IOLOG( "%s <= 0x%08x", "empei_i_field_EXTRACT_LS_UPDATE_set", value );

    /* (0x00000090 bits 0) field EXTRACT_LS_UPDATE of register PMC_EMPEI120_I_REG_UPD_LSC */
    _empei_i_reg_UPD_LSC_field_set( LOG_CALLER_ARGS
                                    b,
                                    h,
                                    EMPEI120_I_REG_UPD_LSC_BIT_EXTRACT_LS_UPDATE_MSK,
                                    EMPEI120_I_REG_UPD_LSC_BIT_EXTRACT_LS_UPDATE_OFF,
                                    value);
}


#ifndef empei_i_field_EXTRACT_LS_UPDATE_get
#define empei_i_field_EXTRACT_LS_UPDATE_get( b, h ) \
       _empei_i_field_EXTRACT_LS_UPDATE_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_EXTRACT_LS_UPDATE_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000090 bits 0) field EXTRACT_LS_UPDATE of register PMC_EMPEI120_I_REG_UPD_LSC */
    reg_value = _empei_i_reg_UPD_LSC_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_UPD_LSC_BIT_EXTRACT_LS_UPDATE_MSK) >> EMPEI120_I_REG_UPD_LSC_BIT_EXTRACT_LS_UPDATE_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_EXTRACT_LS_UPDATE_get", value );

    return value;
}

#ifndef empei_i_field_INTL_LS_UPDATE_set
#define empei_i_field_INTL_LS_UPDATE_set( b, h, value ) \
       _empei_i_field_INTL_LS_UPDATE_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_INTL_LS_UPDATE_set( LOG_CALLER_DEFN
                                                      empei_i_buffer_t *b,
                                                      empei_i_handle_t *h,
                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_INTL_LS_UPDATE_set", value, 1);
    IOLOG( "%s <= 0x%08x", "empei_i_field_INTL_LS_UPDATE_set", value );

    /* (0x00000090 bits 1) field INTL_LS_UPDATE of register PMC_EMPEI120_I_REG_UPD_LSC */
    _empei_i_reg_UPD_LSC_field_set( LOG_CALLER_ARGS
                                    b,
                                    h,
                                    EMPEI120_I_REG_UPD_LSC_BIT_INTL_LS_UPDATE_MSK,
                                    EMPEI120_I_REG_UPD_LSC_BIT_INTL_LS_UPDATE_OFF,
                                    value);
}


#ifndef empei_i_field_INTL_LS_UPDATE_get
#define empei_i_field_INTL_LS_UPDATE_get( b, h ) \
       _empei_i_field_INTL_LS_UPDATE_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_INTL_LS_UPDATE_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000090 bits 1) field INTL_LS_UPDATE of register PMC_EMPEI120_I_REG_UPD_LSC */
    reg_value = _empei_i_reg_UPD_LSC_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_UPD_LSC_BIT_INTL_LS_UPDATE_MSK) >> EMPEI120_I_REG_UPD_LSC_BIT_INTL_LS_UPDATE_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_INTL_LS_UPDATE_get", value );

    return value;
}

#ifndef empei_i_field_PMON_CNT_CLR_set
#define empei_i_field_PMON_CNT_CLR_set( b, h, value ) \
       _empei_i_field_PMON_CNT_CLR_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_PMON_CNT_CLR_set( LOG_CALLER_DEFN
                                                    empei_i_buffer_t *b,
                                                    empei_i_handle_t *h,
                                                    UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_PMON_CNT_CLR_set", value, 1);
    IOLOG( "%s <= 0x%08x", "empei_i_field_PMON_CNT_CLR_set", value );

    /* (0x000000a0 bits 0) field PMON_CNT_CLR of register PMC_EMPEI120_I_REG_PMON_CNTR_CLR */
    _empei_i_reg_PMON_CNTR_CLR_field_set( LOG_CALLER_ARGS
                                          b,
                                          h,
                                          EMPEI120_I_REG_PMON_CNTR_CLR_BIT_PMON_CNT_CLR_MSK,
                                          EMPEI120_I_REG_PMON_CNTR_CLR_BIT_PMON_CNT_CLR_OFF,
                                          value);
}


#ifndef empei_i_field_PMON_CNT_CLR_get
#define empei_i_field_PMON_CNT_CLR_get( b, h ) \
       _empei_i_field_PMON_CNT_CLR_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_PMON_CNT_CLR_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000a0 bits 0) field PMON_CNT_CLR of register PMC_EMPEI120_I_REG_PMON_CNTR_CLR */
    reg_value = _empei_i_reg_PMON_CNTR_CLR_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_PMON_CNTR_CLR_BIT_PMON_CNT_CLR_MSK) >> EMPEI120_I_REG_PMON_CNTR_CLR_BIT_PMON_CNT_CLR_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_PMON_CNT_CLR_get", value );

    return value;
}

#ifndef empei_i_field_LINK_RESET_set
#define empei_i_field_LINK_RESET_set( b, h, value ) \
       _empei_i_field_LINK_RESET_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_LINK_RESET_set( LOG_CALLER_DEFN
                                                  empei_i_buffer_t *b,
                                                  empei_i_handle_t *h,
                                                  UINT32 value )
{
    if (value > 4095)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_LINK_RESET_set", value, 4095);
    IOLOG( "%s <= 0x%08x", "empei_i_field_LINK_RESET_set", value );

    /* (0x000000f8 bits 11:0) field LINK_RESET of register PMC_EMPEI120_I_REG_LINK_RESET */
    _empei_i_reg_LINK_RESET_field_set( LOG_CALLER_ARGS
                                       b,
                                       h,
                                       EMPEI120_I_REG_LINK_RESET_BIT_LINK_RESET_MSK,
                                       EMPEI120_I_REG_LINK_RESET_BIT_LINK_RESET_OFF,
                                       value);
}


#ifndef empei_i_field_LINK_RESET_get
#define empei_i_field_LINK_RESET_get( b, h ) \
       _empei_i_field_LINK_RESET_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_LINK_RESET_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000f8 bits 11:0) field LINK_RESET of register PMC_EMPEI120_I_REG_LINK_RESET */
    reg_value = _empei_i_reg_LINK_RESET_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_LINK_RESET_BIT_LINK_RESET_MSK) >> EMPEI120_I_REG_LINK_RESET_BIT_LINK_RESET_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_LINK_RESET_get", value );

    return value;
}

#ifndef empei_i_field_range_LINK_RESET_set
#define empei_i_field_range_LINK_RESET_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_LINK_RESET_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_LINK_RESET_set( LOG_CALLER_DEFN
                                                        empei_i_buffer_t *b,
                                                        empei_i_handle_t *h,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_LINK_RESET_set", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_LINK_RESET_set", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_LINK_RESET_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000000f8 bits 11:0) field LINK_RESET of register PMC_EMPEI120_I_REG_LINK_RESET */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000f8 bits 11:0) field LINK_RESET of register PMC_EMPEI120_I_REG_LINK_RESET */
        _empei_i_reg_LINK_RESET_field_set( LOG_CALLER_ARGS
                                           b,
                                           h,
                                           subfield_mask << (EMPEI120_I_REG_LINK_RESET_BIT_LINK_RESET_OFF + subfield_offset),
                                           EMPEI120_I_REG_LINK_RESET_BIT_LINK_RESET_OFF + subfield_offset,
                                           value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_LINK_RESET_get
#define empei_i_field_range_LINK_RESET_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_LINK_RESET_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_LINK_RESET_get( LOG_CALLER_DEFN
                                                          empei_i_buffer_t *b,
                                                          empei_i_handle_t *h,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_LINK_RESET_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_LINK_RESET_get", stop_bit, 11 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 11) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 11;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000f8 bits 11:0) field LINK_RESET of register PMC_EMPEI120_I_REG_LINK_RESET */
    reg_value = _empei_i_reg_LINK_RESET_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_LINK_RESET_BIT_LINK_RESET_MSK)
                  >> EMPEI120_I_REG_LINK_RESET_BIT_LINK_RESET_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_LINK_RESET_BIT_LINK_RESET_MSK, EMPEI120_I_REG_LINK_RESET_BIT_LINK_RESET_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_LINK_RESET_get", start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 *                Parameter Access Functions for Paramset int_enable
 * ==================================================================================
 */

#ifndef empei_i_field_INS_Q_OVERFLOW_INT_E_set
#define empei_i_field_INS_Q_OVERFLOW_INT_E_set( b, h, value ) \
       _empei_i_field_INS_Q_OVERFLOW_INT_E_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_INS_Q_OVERFLOW_INT_E_set( LOG_CALLER_DEFN
                                                            empei_i_buffer_t *b,
                                                            empei_i_handle_t *h,
                                                            UINT32 value )
{
    if (value > 4095)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_INS_Q_OVERFLOW_INT_E_set", value, 4095);
    IOLOG( "%s <= 0x%08x", "empei_i_field_INS_Q_OVERFLOW_INT_E_set", value );

    /* (0x00000038 bits 11:0) field INS_Q_OVERFLOW_INT_E of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT_EN */
    _empei_i_reg_INS_EXT_OF_INT_EN_field_set( LOG_CALLER_ARGS
                                              b,
                                              h,
                                              EMPEI120_I_REG_INS_EXT_OF_INT_EN_BIT_INS_Q_OVERFLOW_INT_E_MSK,
                                              EMPEI120_I_REG_INS_EXT_OF_INT_EN_BIT_INS_Q_OVERFLOW_INT_E_OFF,
                                              value);
}


#ifndef empei_i_field_INS_Q_OVERFLOW_INT_E_get
#define empei_i_field_INS_Q_OVERFLOW_INT_E_get( b, h ) \
       _empei_i_field_INS_Q_OVERFLOW_INT_E_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_INS_Q_OVERFLOW_INT_E_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000038 bits 11:0) field INS_Q_OVERFLOW_INT_E of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT_EN */
    reg_value = _empei_i_reg_INS_EXT_OF_INT_EN_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_INS_EXT_OF_INT_EN_BIT_INS_Q_OVERFLOW_INT_E_MSK) >> EMPEI120_I_REG_INS_EXT_OF_INT_EN_BIT_INS_Q_OVERFLOW_INT_E_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_INS_Q_OVERFLOW_INT_E_get", value );

    return value;
}

#ifndef empei_i_field_range_INS_Q_OVERFLOW_INT_E_set
#define empei_i_field_range_INS_Q_OVERFLOW_INT_E_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_INS_Q_OVERFLOW_INT_E_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_INS_Q_OVERFLOW_INT_E_set( LOG_CALLER_DEFN
                                                                  empei_i_buffer_t *b,
                                                                  empei_i_handle_t *h,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INS_Q_OVERFLOW_INT_E_set", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INS_Q_OVERFLOW_INT_E_set", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INS_Q_OVERFLOW_INT_E_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000038 bits 11:0) field INS_Q_OVERFLOW_INT_E of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT_EN */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000038 bits 11:0) field INS_Q_OVERFLOW_INT_E of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT_EN */
        _empei_i_reg_INS_EXT_OF_INT_EN_field_set( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  subfield_mask << (EMPEI120_I_REG_INS_EXT_OF_INT_EN_BIT_INS_Q_OVERFLOW_INT_E_OFF + subfield_offset),
                                                  EMPEI120_I_REG_INS_EXT_OF_INT_EN_BIT_INS_Q_OVERFLOW_INT_E_OFF + subfield_offset,
                                                  value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_INS_Q_OVERFLOW_INT_E_get
#define empei_i_field_range_INS_Q_OVERFLOW_INT_E_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_INS_Q_OVERFLOW_INT_E_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_INS_Q_OVERFLOW_INT_E_get( LOG_CALLER_DEFN
                                                                    empei_i_buffer_t *b,
                                                                    empei_i_handle_t *h,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INS_Q_OVERFLOW_INT_E_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INS_Q_OVERFLOW_INT_E_get", stop_bit, 11 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 11) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 11;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000038 bits 11:0) field INS_Q_OVERFLOW_INT_E of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT_EN */
    reg_value = _empei_i_reg_INS_EXT_OF_INT_EN_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_INS_EXT_OF_INT_EN_BIT_INS_Q_OVERFLOW_INT_E_MSK)
                  >> EMPEI120_I_REG_INS_EXT_OF_INT_EN_BIT_INS_Q_OVERFLOW_INT_E_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_INS_EXT_OF_INT_EN_BIT_INS_Q_OVERFLOW_INT_E_MSK, EMPEI120_I_REG_INS_EXT_OF_INT_EN_BIT_INS_Q_OVERFLOW_INT_E_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INS_Q_OVERFLOW_INT_E_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_EXT_Q_OVERFLOW_INT_E_set
#define empei_i_field_EXT_Q_OVERFLOW_INT_E_set( b, h, value ) \
       _empei_i_field_EXT_Q_OVERFLOW_INT_E_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_EXT_Q_OVERFLOW_INT_E_set( LOG_CALLER_DEFN
                                                            empei_i_buffer_t *b,
                                                            empei_i_handle_t *h,
                                                            UINT32 value )
{
    if (value > 4095)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_EXT_Q_OVERFLOW_INT_E_set", value, 4095);
    IOLOG( "%s <= 0x%08x", "empei_i_field_EXT_Q_OVERFLOW_INT_E_set", value );

    /* (0x00000038 bits 23:12) field EXT_Q_OVERFLOW_INT_E of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT_EN */
    _empei_i_reg_INS_EXT_OF_INT_EN_field_set( LOG_CALLER_ARGS
                                              b,
                                              h,
                                              EMPEI120_I_REG_INS_EXT_OF_INT_EN_BIT_EXT_Q_OVERFLOW_INT_E_MSK,
                                              EMPEI120_I_REG_INS_EXT_OF_INT_EN_BIT_EXT_Q_OVERFLOW_INT_E_OFF,
                                              value);
}


#ifndef empei_i_field_EXT_Q_OVERFLOW_INT_E_get
#define empei_i_field_EXT_Q_OVERFLOW_INT_E_get( b, h ) \
       _empei_i_field_EXT_Q_OVERFLOW_INT_E_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_EXT_Q_OVERFLOW_INT_E_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000038 bits 23:12) field EXT_Q_OVERFLOW_INT_E of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT_EN */
    reg_value = _empei_i_reg_INS_EXT_OF_INT_EN_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_INS_EXT_OF_INT_EN_BIT_EXT_Q_OVERFLOW_INT_E_MSK) >> EMPEI120_I_REG_INS_EXT_OF_INT_EN_BIT_EXT_Q_OVERFLOW_INT_E_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_EXT_Q_OVERFLOW_INT_E_get", value );

    return value;
}

#ifndef empei_i_field_range_EXT_Q_OVERFLOW_INT_E_set
#define empei_i_field_range_EXT_Q_OVERFLOW_INT_E_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_EXT_Q_OVERFLOW_INT_E_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_EXT_Q_OVERFLOW_INT_E_set( LOG_CALLER_DEFN
                                                                  empei_i_buffer_t *b,
                                                                  empei_i_handle_t *h,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_EXT_Q_OVERFLOW_INT_E_set", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_EXT_Q_OVERFLOW_INT_E_set", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_EXT_Q_OVERFLOW_INT_E_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000038 bits 23:12) field EXT_Q_OVERFLOW_INT_E of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT_EN */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 12) {
            subfield_offset = start_bit - 12;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  12 - start_bit;
            subfield_start_bit = 12;
        }
        if (stop_bit < 23) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 23;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000038 bits 23:12) field EXT_Q_OVERFLOW_INT_E of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT_EN */
        _empei_i_reg_INS_EXT_OF_INT_EN_field_set( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  subfield_mask << (EMPEI120_I_REG_INS_EXT_OF_INT_EN_BIT_EXT_Q_OVERFLOW_INT_E_OFF + subfield_offset),
                                                  EMPEI120_I_REG_INS_EXT_OF_INT_EN_BIT_EXT_Q_OVERFLOW_INT_E_OFF + subfield_offset,
                                                  value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_EXT_Q_OVERFLOW_INT_E_get
#define empei_i_field_range_EXT_Q_OVERFLOW_INT_E_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_EXT_Q_OVERFLOW_INT_E_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_EXT_Q_OVERFLOW_INT_E_get( LOG_CALLER_DEFN
                                                                    empei_i_buffer_t *b,
                                                                    empei_i_handle_t *h,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_EXT_Q_OVERFLOW_INT_E_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_EXT_Q_OVERFLOW_INT_E_get", stop_bit, 11 );
    if (start_bit > 12) {
        subfield_offset = start_bit - 12;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 12 - start_bit;
        subfield_start_bit = 12;
    }
    if (stop_bit < 23) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 23;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000038 bits 23:12) field EXT_Q_OVERFLOW_INT_E of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT_EN */
    reg_value = _empei_i_reg_INS_EXT_OF_INT_EN_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_INS_EXT_OF_INT_EN_BIT_EXT_Q_OVERFLOW_INT_E_MSK)
                  >> EMPEI120_I_REG_INS_EXT_OF_INT_EN_BIT_EXT_Q_OVERFLOW_INT_E_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_INS_EXT_OF_INT_EN_BIT_EXT_Q_OVERFLOW_INT_E_MSK, EMPEI120_I_REG_INS_EXT_OF_INT_EN_BIT_EXT_Q_OVERFLOW_INT_E_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_EXT_Q_OVERFLOW_INT_E_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_SYS_Q_OVERFLOW_INT_E_set
#define empei_i_field_SYS_Q_OVERFLOW_INT_E_set( b, h, value ) \
       _empei_i_field_SYS_Q_OVERFLOW_INT_E_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_SYS_Q_OVERFLOW_INT_E_set( LOG_CALLER_DEFN
                                                            empei_i_buffer_t *b,
                                                            empei_i_handle_t *h,
                                                            UINT32 value )
{
    if (value > 4095)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_SYS_Q_OVERFLOW_INT_E_set", value, 4095);
    IOLOG( "%s <= 0x%08x", "empei_i_field_SYS_Q_OVERFLOW_INT_E_set", value );

    /* (0x0000003c bits 11:0) field SYS_Q_OVERFLOW_INT_E of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT_EN */
    _empei_i_reg_SYS_INTL_OF_INT_EN_field_set( LOG_CALLER_ARGS
                                               b,
                                               h,
                                               EMPEI120_I_REG_SYS_INTL_OF_INT_EN_BIT_SYS_Q_OVERFLOW_INT_E_MSK,
                                               EMPEI120_I_REG_SYS_INTL_OF_INT_EN_BIT_SYS_Q_OVERFLOW_INT_E_OFF,
                                               value);
}


#ifndef empei_i_field_SYS_Q_OVERFLOW_INT_E_get
#define empei_i_field_SYS_Q_OVERFLOW_INT_E_get( b, h ) \
       _empei_i_field_SYS_Q_OVERFLOW_INT_E_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_SYS_Q_OVERFLOW_INT_E_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000003c bits 11:0) field SYS_Q_OVERFLOW_INT_E of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT_EN */
    reg_value = _empei_i_reg_SYS_INTL_OF_INT_EN_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_SYS_INTL_OF_INT_EN_BIT_SYS_Q_OVERFLOW_INT_E_MSK) >> EMPEI120_I_REG_SYS_INTL_OF_INT_EN_BIT_SYS_Q_OVERFLOW_INT_E_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_SYS_Q_OVERFLOW_INT_E_get", value );

    return value;
}

#ifndef empei_i_field_range_SYS_Q_OVERFLOW_INT_E_set
#define empei_i_field_range_SYS_Q_OVERFLOW_INT_E_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_SYS_Q_OVERFLOW_INT_E_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_SYS_Q_OVERFLOW_INT_E_set( LOG_CALLER_DEFN
                                                                  empei_i_buffer_t *b,
                                                                  empei_i_handle_t *h,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_SYS_Q_OVERFLOW_INT_E_set", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_SYS_Q_OVERFLOW_INT_E_set", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_SYS_Q_OVERFLOW_INT_E_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x0000003c bits 11:0) field SYS_Q_OVERFLOW_INT_E of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT_EN */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000003c bits 11:0) field SYS_Q_OVERFLOW_INT_E of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT_EN */
        _empei_i_reg_SYS_INTL_OF_INT_EN_field_set( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   subfield_mask << (EMPEI120_I_REG_SYS_INTL_OF_INT_EN_BIT_SYS_Q_OVERFLOW_INT_E_OFF + subfield_offset),
                                                   EMPEI120_I_REG_SYS_INTL_OF_INT_EN_BIT_SYS_Q_OVERFLOW_INT_E_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_SYS_Q_OVERFLOW_INT_E_get
#define empei_i_field_range_SYS_Q_OVERFLOW_INT_E_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_SYS_Q_OVERFLOW_INT_E_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_SYS_Q_OVERFLOW_INT_E_get( LOG_CALLER_DEFN
                                                                    empei_i_buffer_t *b,
                                                                    empei_i_handle_t *h,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_SYS_Q_OVERFLOW_INT_E_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_SYS_Q_OVERFLOW_INT_E_get", stop_bit, 11 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 11) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 11;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000003c bits 11:0) field SYS_Q_OVERFLOW_INT_E of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT_EN */
    reg_value = _empei_i_reg_SYS_INTL_OF_INT_EN_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_SYS_INTL_OF_INT_EN_BIT_SYS_Q_OVERFLOW_INT_E_MSK)
                  >> EMPEI120_I_REG_SYS_INTL_OF_INT_EN_BIT_SYS_Q_OVERFLOW_INT_E_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_SYS_INTL_OF_INT_EN_BIT_SYS_Q_OVERFLOW_INT_E_MSK, EMPEI120_I_REG_SYS_INTL_OF_INT_EN_BIT_SYS_Q_OVERFLOW_INT_E_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_SYS_Q_OVERFLOW_INT_E_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_INTL_Q_OVERFLOW_INT_E_set
#define empei_i_field_INTL_Q_OVERFLOW_INT_E_set( b, h, value ) \
       _empei_i_field_INTL_Q_OVERFLOW_INT_E_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_INTL_Q_OVERFLOW_INT_E_set( LOG_CALLER_DEFN
                                                             empei_i_buffer_t *b,
                                                             empei_i_handle_t *h,
                                                             UINT32 value )
{
    if (value > 4095)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_INTL_Q_OVERFLOW_INT_E_set", value, 4095);
    IOLOG( "%s <= 0x%08x", "empei_i_field_INTL_Q_OVERFLOW_INT_E_set", value );

    /* (0x0000003c bits 23:12) field INTL_Q_OVERFLOW_INT_E of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT_EN */
    _empei_i_reg_SYS_INTL_OF_INT_EN_field_set( LOG_CALLER_ARGS
                                               b,
                                               h,
                                               EMPEI120_I_REG_SYS_INTL_OF_INT_EN_BIT_INTL_Q_OVERFLOW_INT_E_MSK,
                                               EMPEI120_I_REG_SYS_INTL_OF_INT_EN_BIT_INTL_Q_OVERFLOW_INT_E_OFF,
                                               value);
}


#ifndef empei_i_field_INTL_Q_OVERFLOW_INT_E_get
#define empei_i_field_INTL_Q_OVERFLOW_INT_E_get( b, h ) \
       _empei_i_field_INTL_Q_OVERFLOW_INT_E_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_INTL_Q_OVERFLOW_INT_E_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000003c bits 23:12) field INTL_Q_OVERFLOW_INT_E of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT_EN */
    reg_value = _empei_i_reg_SYS_INTL_OF_INT_EN_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_SYS_INTL_OF_INT_EN_BIT_INTL_Q_OVERFLOW_INT_E_MSK) >> EMPEI120_I_REG_SYS_INTL_OF_INT_EN_BIT_INTL_Q_OVERFLOW_INT_E_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_INTL_Q_OVERFLOW_INT_E_get", value );

    return value;
}

#ifndef empei_i_field_range_INTL_Q_OVERFLOW_INT_E_set
#define empei_i_field_range_INTL_Q_OVERFLOW_INT_E_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_INTL_Q_OVERFLOW_INT_E_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_INTL_Q_OVERFLOW_INT_E_set( LOG_CALLER_DEFN
                                                                   empei_i_buffer_t *b,
                                                                   empei_i_handle_t *h,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INTL_Q_OVERFLOW_INT_E_set", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INTL_Q_OVERFLOW_INT_E_set", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INTL_Q_OVERFLOW_INT_E_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x0000003c bits 23:12) field INTL_Q_OVERFLOW_INT_E of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT_EN */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 12) {
            subfield_offset = start_bit - 12;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  12 - start_bit;
            subfield_start_bit = 12;
        }
        if (stop_bit < 23) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 23;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000003c bits 23:12) field INTL_Q_OVERFLOW_INT_E of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT_EN */
        _empei_i_reg_SYS_INTL_OF_INT_EN_field_set( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   subfield_mask << (EMPEI120_I_REG_SYS_INTL_OF_INT_EN_BIT_INTL_Q_OVERFLOW_INT_E_OFF + subfield_offset),
                                                   EMPEI120_I_REG_SYS_INTL_OF_INT_EN_BIT_INTL_Q_OVERFLOW_INT_E_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_INTL_Q_OVERFLOW_INT_E_get
#define empei_i_field_range_INTL_Q_OVERFLOW_INT_E_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_INTL_Q_OVERFLOW_INT_E_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_INTL_Q_OVERFLOW_INT_E_get( LOG_CALLER_DEFN
                                                                     empei_i_buffer_t *b,
                                                                     empei_i_handle_t *h,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INTL_Q_OVERFLOW_INT_E_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INTL_Q_OVERFLOW_INT_E_get", stop_bit, 11 );
    if (start_bit > 12) {
        subfield_offset = start_bit - 12;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 12 - start_bit;
        subfield_start_bit = 12;
    }
    if (stop_bit < 23) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 23;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000003c bits 23:12) field INTL_Q_OVERFLOW_INT_E of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT_EN */
    reg_value = _empei_i_reg_SYS_INTL_OF_INT_EN_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_SYS_INTL_OF_INT_EN_BIT_INTL_Q_OVERFLOW_INT_E_MSK)
                  >> EMPEI120_I_REG_SYS_INTL_OF_INT_EN_BIT_INTL_Q_OVERFLOW_INT_E_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_SYS_INTL_OF_INT_EN_BIT_INTL_Q_OVERFLOW_INT_E_MSK, EMPEI120_I_REG_SYS_INTL_OF_INT_EN_BIT_INTL_Q_OVERFLOW_INT_E_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INTL_Q_OVERFLOW_INT_E_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_SYS_Q_UNDERRUN_INT_E_set
#define empei_i_field_SYS_Q_UNDERRUN_INT_E_set( b, h, value ) \
       _empei_i_field_SYS_Q_UNDERRUN_INT_E_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_SYS_Q_UNDERRUN_INT_E_set( LOG_CALLER_DEFN
                                                            empei_i_buffer_t *b,
                                                            empei_i_handle_t *h,
                                                            UINT32 value )
{
    if (value > 4095)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_SYS_Q_UNDERRUN_INT_E_set", value, 4095);
    IOLOG( "%s <= 0x%08x", "empei_i_field_SYS_Q_UNDERRUN_INT_E_set", value );

    /* (0x00000040 bits 11:0) field SYS_Q_UNDERRUN_INT_E of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT_EN */
    _empei_i_reg_SYS_INS_UR_INT_EN_field_set( LOG_CALLER_ARGS
                                              b,
                                              h,
                                              EMPEI120_I_REG_SYS_INS_UR_INT_EN_BIT_SYS_Q_UNDERRUN_INT_E_MSK,
                                              EMPEI120_I_REG_SYS_INS_UR_INT_EN_BIT_SYS_Q_UNDERRUN_INT_E_OFF,
                                              value);
}


#ifndef empei_i_field_SYS_Q_UNDERRUN_INT_E_get
#define empei_i_field_SYS_Q_UNDERRUN_INT_E_get( b, h ) \
       _empei_i_field_SYS_Q_UNDERRUN_INT_E_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_SYS_Q_UNDERRUN_INT_E_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000040 bits 11:0) field SYS_Q_UNDERRUN_INT_E of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT_EN */
    reg_value = _empei_i_reg_SYS_INS_UR_INT_EN_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_SYS_INS_UR_INT_EN_BIT_SYS_Q_UNDERRUN_INT_E_MSK) >> EMPEI120_I_REG_SYS_INS_UR_INT_EN_BIT_SYS_Q_UNDERRUN_INT_E_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_SYS_Q_UNDERRUN_INT_E_get", value );

    return value;
}

#ifndef empei_i_field_range_SYS_Q_UNDERRUN_INT_E_set
#define empei_i_field_range_SYS_Q_UNDERRUN_INT_E_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_SYS_Q_UNDERRUN_INT_E_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_SYS_Q_UNDERRUN_INT_E_set( LOG_CALLER_DEFN
                                                                  empei_i_buffer_t *b,
                                                                  empei_i_handle_t *h,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_SYS_Q_UNDERRUN_INT_E_set", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_SYS_Q_UNDERRUN_INT_E_set", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_SYS_Q_UNDERRUN_INT_E_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000040 bits 11:0) field SYS_Q_UNDERRUN_INT_E of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT_EN */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000040 bits 11:0) field SYS_Q_UNDERRUN_INT_E of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT_EN */
        _empei_i_reg_SYS_INS_UR_INT_EN_field_set( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  subfield_mask << (EMPEI120_I_REG_SYS_INS_UR_INT_EN_BIT_SYS_Q_UNDERRUN_INT_E_OFF + subfield_offset),
                                                  EMPEI120_I_REG_SYS_INS_UR_INT_EN_BIT_SYS_Q_UNDERRUN_INT_E_OFF + subfield_offset,
                                                  value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_SYS_Q_UNDERRUN_INT_E_get
#define empei_i_field_range_SYS_Q_UNDERRUN_INT_E_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_SYS_Q_UNDERRUN_INT_E_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_SYS_Q_UNDERRUN_INT_E_get( LOG_CALLER_DEFN
                                                                    empei_i_buffer_t *b,
                                                                    empei_i_handle_t *h,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_SYS_Q_UNDERRUN_INT_E_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_SYS_Q_UNDERRUN_INT_E_get", stop_bit, 11 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 11) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 11;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000040 bits 11:0) field SYS_Q_UNDERRUN_INT_E of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT_EN */
    reg_value = _empei_i_reg_SYS_INS_UR_INT_EN_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_SYS_INS_UR_INT_EN_BIT_SYS_Q_UNDERRUN_INT_E_MSK)
                  >> EMPEI120_I_REG_SYS_INS_UR_INT_EN_BIT_SYS_Q_UNDERRUN_INT_E_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_SYS_INS_UR_INT_EN_BIT_SYS_Q_UNDERRUN_INT_E_MSK, EMPEI120_I_REG_SYS_INS_UR_INT_EN_BIT_SYS_Q_UNDERRUN_INT_E_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_SYS_Q_UNDERRUN_INT_E_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_INS_Q_UNDERRUN_INT_E_set
#define empei_i_field_INS_Q_UNDERRUN_INT_E_set( b, h, value ) \
       _empei_i_field_INS_Q_UNDERRUN_INT_E_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_INS_Q_UNDERRUN_INT_E_set( LOG_CALLER_DEFN
                                                            empei_i_buffer_t *b,
                                                            empei_i_handle_t *h,
                                                            UINT32 value )
{
    if (value > 4095)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_INS_Q_UNDERRUN_INT_E_set", value, 4095);
    IOLOG( "%s <= 0x%08x", "empei_i_field_INS_Q_UNDERRUN_INT_E_set", value );

    /* (0x00000040 bits 23:12) field INS_Q_UNDERRUN_INT_E of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT_EN */
    _empei_i_reg_SYS_INS_UR_INT_EN_field_set( LOG_CALLER_ARGS
                                              b,
                                              h,
                                              EMPEI120_I_REG_SYS_INS_UR_INT_EN_BIT_INS_Q_UNDERRUN_INT_E_MSK,
                                              EMPEI120_I_REG_SYS_INS_UR_INT_EN_BIT_INS_Q_UNDERRUN_INT_E_OFF,
                                              value);
}


#ifndef empei_i_field_INS_Q_UNDERRUN_INT_E_get
#define empei_i_field_INS_Q_UNDERRUN_INT_E_get( b, h ) \
       _empei_i_field_INS_Q_UNDERRUN_INT_E_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_INS_Q_UNDERRUN_INT_E_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000040 bits 23:12) field INS_Q_UNDERRUN_INT_E of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT_EN */
    reg_value = _empei_i_reg_SYS_INS_UR_INT_EN_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_SYS_INS_UR_INT_EN_BIT_INS_Q_UNDERRUN_INT_E_MSK) >> EMPEI120_I_REG_SYS_INS_UR_INT_EN_BIT_INS_Q_UNDERRUN_INT_E_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_INS_Q_UNDERRUN_INT_E_get", value );

    return value;
}

#ifndef empei_i_field_range_INS_Q_UNDERRUN_INT_E_set
#define empei_i_field_range_INS_Q_UNDERRUN_INT_E_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_INS_Q_UNDERRUN_INT_E_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_INS_Q_UNDERRUN_INT_E_set( LOG_CALLER_DEFN
                                                                  empei_i_buffer_t *b,
                                                                  empei_i_handle_t *h,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INS_Q_UNDERRUN_INT_E_set", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INS_Q_UNDERRUN_INT_E_set", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INS_Q_UNDERRUN_INT_E_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000040 bits 23:12) field INS_Q_UNDERRUN_INT_E of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT_EN */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 12) {
            subfield_offset = start_bit - 12;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  12 - start_bit;
            subfield_start_bit = 12;
        }
        if (stop_bit < 23) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 23;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000040 bits 23:12) field INS_Q_UNDERRUN_INT_E of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT_EN */
        _empei_i_reg_SYS_INS_UR_INT_EN_field_set( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  subfield_mask << (EMPEI120_I_REG_SYS_INS_UR_INT_EN_BIT_INS_Q_UNDERRUN_INT_E_OFF + subfield_offset),
                                                  EMPEI120_I_REG_SYS_INS_UR_INT_EN_BIT_INS_Q_UNDERRUN_INT_E_OFF + subfield_offset,
                                                  value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_INS_Q_UNDERRUN_INT_E_get
#define empei_i_field_range_INS_Q_UNDERRUN_INT_E_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_INS_Q_UNDERRUN_INT_E_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_INS_Q_UNDERRUN_INT_E_get( LOG_CALLER_DEFN
                                                                    empei_i_buffer_t *b,
                                                                    empei_i_handle_t *h,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INS_Q_UNDERRUN_INT_E_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INS_Q_UNDERRUN_INT_E_get", stop_bit, 11 );
    if (start_bit > 12) {
        subfield_offset = start_bit - 12;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 12 - start_bit;
        subfield_start_bit = 12;
    }
    if (stop_bit < 23) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 23;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000040 bits 23:12) field INS_Q_UNDERRUN_INT_E of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT_EN */
    reg_value = _empei_i_reg_SYS_INS_UR_INT_EN_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_SYS_INS_UR_INT_EN_BIT_INS_Q_UNDERRUN_INT_E_MSK)
                  >> EMPEI120_I_REG_SYS_INS_UR_INT_EN_BIT_INS_Q_UNDERRUN_INT_E_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_SYS_INS_UR_INT_EN_BIT_INS_Q_UNDERRUN_INT_E_MSK, EMPEI120_I_REG_SYS_INS_UR_INT_EN_BIT_INS_Q_UNDERRUN_INT_E_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INS_Q_UNDERRUN_INT_E_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_SYS_Q_RESYNC_INT_E_set
#define empei_i_field_SYS_Q_RESYNC_INT_E_set( b, h, value ) \
       _empei_i_field_SYS_Q_RESYNC_INT_E_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_SYS_Q_RESYNC_INT_E_set( LOG_CALLER_DEFN
                                                          empei_i_buffer_t *b,
                                                          empei_i_handle_t *h,
                                                          UINT32 value )
{
    if (value > 4095)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_SYS_Q_RESYNC_INT_E_set", value, 4095);
    IOLOG( "%s <= 0x%08x", "empei_i_field_SYS_Q_RESYNC_INT_E_set", value );

    /* (0x00000044 bits 11:0) field SYS_Q_RESYNC_INT_E of register PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN */
    _empei_i_reg_SYS_INS_Q_RSYNC_INT_EN_field_set( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN_BIT_SYS_Q_RESYNC_INT_E_MSK,
                                                   EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN_BIT_SYS_Q_RESYNC_INT_E_OFF,
                                                   value);
}


#ifndef empei_i_field_SYS_Q_RESYNC_INT_E_get
#define empei_i_field_SYS_Q_RESYNC_INT_E_get( b, h ) \
       _empei_i_field_SYS_Q_RESYNC_INT_E_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_SYS_Q_RESYNC_INT_E_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000044 bits 11:0) field SYS_Q_RESYNC_INT_E of register PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN */
    reg_value = _empei_i_reg_SYS_INS_Q_RSYNC_INT_EN_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN_BIT_SYS_Q_RESYNC_INT_E_MSK) >> EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN_BIT_SYS_Q_RESYNC_INT_E_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_SYS_Q_RESYNC_INT_E_get", value );

    return value;
}

#ifndef empei_i_field_range_SYS_Q_RESYNC_INT_E_set
#define empei_i_field_range_SYS_Q_RESYNC_INT_E_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_SYS_Q_RESYNC_INT_E_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_SYS_Q_RESYNC_INT_E_set( LOG_CALLER_DEFN
                                                                empei_i_buffer_t *b,
                                                                empei_i_handle_t *h,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_SYS_Q_RESYNC_INT_E_set", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_SYS_Q_RESYNC_INT_E_set", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_SYS_Q_RESYNC_INT_E_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000044 bits 11:0) field SYS_Q_RESYNC_INT_E of register PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000044 bits 11:0) field SYS_Q_RESYNC_INT_E of register PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN */
        _empei_i_reg_SYS_INS_Q_RSYNC_INT_EN_field_set( LOG_CALLER_ARGS
                                                       b,
                                                       h,
                                                       subfield_mask << (EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN_BIT_SYS_Q_RESYNC_INT_E_OFF + subfield_offset),
                                                       EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN_BIT_SYS_Q_RESYNC_INT_E_OFF + subfield_offset,
                                                       value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_SYS_Q_RESYNC_INT_E_get
#define empei_i_field_range_SYS_Q_RESYNC_INT_E_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_SYS_Q_RESYNC_INT_E_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_SYS_Q_RESYNC_INT_E_get( LOG_CALLER_DEFN
                                                                  empei_i_buffer_t *b,
                                                                  empei_i_handle_t *h,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_SYS_Q_RESYNC_INT_E_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_SYS_Q_RESYNC_INT_E_get", stop_bit, 11 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 11) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 11;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000044 bits 11:0) field SYS_Q_RESYNC_INT_E of register PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN */
    reg_value = _empei_i_reg_SYS_INS_Q_RSYNC_INT_EN_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN_BIT_SYS_Q_RESYNC_INT_E_MSK)
                  >> EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN_BIT_SYS_Q_RESYNC_INT_E_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN_BIT_SYS_Q_RESYNC_INT_E_MSK, EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN_BIT_SYS_Q_RESYNC_INT_E_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_SYS_Q_RESYNC_INT_E_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_INS_Q_RESYNC_INT_E_set
#define empei_i_field_INS_Q_RESYNC_INT_E_set( b, h, value ) \
       _empei_i_field_INS_Q_RESYNC_INT_E_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_INS_Q_RESYNC_INT_E_set( LOG_CALLER_DEFN
                                                          empei_i_buffer_t *b,
                                                          empei_i_handle_t *h,
                                                          UINT32 value )
{
    if (value > 4095)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_INS_Q_RESYNC_INT_E_set", value, 4095);
    IOLOG( "%s <= 0x%08x", "empei_i_field_INS_Q_RESYNC_INT_E_set", value );

    /* (0x00000044 bits 23:12) field INS_Q_RESYNC_INT_E of register PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN */
    _empei_i_reg_SYS_INS_Q_RSYNC_INT_EN_field_set( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN_BIT_INS_Q_RESYNC_INT_E_MSK,
                                                   EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN_BIT_INS_Q_RESYNC_INT_E_OFF,
                                                   value);
}


#ifndef empei_i_field_INS_Q_RESYNC_INT_E_get
#define empei_i_field_INS_Q_RESYNC_INT_E_get( b, h ) \
       _empei_i_field_INS_Q_RESYNC_INT_E_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_INS_Q_RESYNC_INT_E_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000044 bits 23:12) field INS_Q_RESYNC_INT_E of register PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN */
    reg_value = _empei_i_reg_SYS_INS_Q_RSYNC_INT_EN_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN_BIT_INS_Q_RESYNC_INT_E_MSK) >> EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN_BIT_INS_Q_RESYNC_INT_E_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_INS_Q_RESYNC_INT_E_get", value );

    return value;
}

#ifndef empei_i_field_range_INS_Q_RESYNC_INT_E_set
#define empei_i_field_range_INS_Q_RESYNC_INT_E_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_INS_Q_RESYNC_INT_E_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_INS_Q_RESYNC_INT_E_set( LOG_CALLER_DEFN
                                                                empei_i_buffer_t *b,
                                                                empei_i_handle_t *h,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INS_Q_RESYNC_INT_E_set", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INS_Q_RESYNC_INT_E_set", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INS_Q_RESYNC_INT_E_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000044 bits 23:12) field INS_Q_RESYNC_INT_E of register PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 12) {
            subfield_offset = start_bit - 12;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  12 - start_bit;
            subfield_start_bit = 12;
        }
        if (stop_bit < 23) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 23;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000044 bits 23:12) field INS_Q_RESYNC_INT_E of register PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN */
        _empei_i_reg_SYS_INS_Q_RSYNC_INT_EN_field_set( LOG_CALLER_ARGS
                                                       b,
                                                       h,
                                                       subfield_mask << (EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN_BIT_INS_Q_RESYNC_INT_E_OFF + subfield_offset),
                                                       EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN_BIT_INS_Q_RESYNC_INT_E_OFF + subfield_offset,
                                                       value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_INS_Q_RESYNC_INT_E_get
#define empei_i_field_range_INS_Q_RESYNC_INT_E_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_INS_Q_RESYNC_INT_E_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_INS_Q_RESYNC_INT_E_get( LOG_CALLER_DEFN
                                                                  empei_i_buffer_t *b,
                                                                  empei_i_handle_t *h,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INS_Q_RESYNC_INT_E_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INS_Q_RESYNC_INT_E_get", stop_bit, 11 );
    if (start_bit > 12) {
        subfield_offset = start_bit - 12;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 12 - start_bit;
        subfield_start_bit = 12;
    }
    if (stop_bit < 23) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 23;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000044 bits 23:12) field INS_Q_RESYNC_INT_E of register PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN */
    reg_value = _empei_i_reg_SYS_INS_Q_RSYNC_INT_EN_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN_BIT_INS_Q_RESYNC_INT_E_MSK)
                  >> EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN_BIT_INS_Q_RESYNC_INT_E_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN_BIT_INS_Q_RESYNC_INT_E_MSK, EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_EN_BIT_INS_Q_RESYNC_INT_E_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INS_Q_RESYNC_INT_E_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_EXT_Q_RESYNC_INT_E_set
#define empei_i_field_EXT_Q_RESYNC_INT_E_set( b, h, value ) \
       _empei_i_field_EXT_Q_RESYNC_INT_E_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_EXT_Q_RESYNC_INT_E_set( LOG_CALLER_DEFN
                                                          empei_i_buffer_t *b,
                                                          empei_i_handle_t *h,
                                                          UINT32 value )
{
    if (value > 4095)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_EXT_Q_RESYNC_INT_E_set", value, 4095);
    IOLOG( "%s <= 0x%08x", "empei_i_field_EXT_Q_RESYNC_INT_E_set", value );

    /* (0x00000048 bits 11:0) field EXT_Q_RESYNC_INT_E of register PMC_EMPEI120_I_REG_EXT_Q_RSYNC_INT_EN */
    _empei_i_reg_EXT_Q_RSYNC_INT_EN_field_set( LOG_CALLER_ARGS
                                               b,
                                               h,
                                               EMPEI120_I_REG_EXT_Q_RSYNC_INT_EN_BIT_EXT_Q_RESYNC_INT_E_MSK,
                                               EMPEI120_I_REG_EXT_Q_RSYNC_INT_EN_BIT_EXT_Q_RESYNC_INT_E_OFF,
                                               value);
}


#ifndef empei_i_field_EXT_Q_RESYNC_INT_E_get
#define empei_i_field_EXT_Q_RESYNC_INT_E_get( b, h ) \
       _empei_i_field_EXT_Q_RESYNC_INT_E_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_EXT_Q_RESYNC_INT_E_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000048 bits 11:0) field EXT_Q_RESYNC_INT_E of register PMC_EMPEI120_I_REG_EXT_Q_RSYNC_INT_EN */
    reg_value = _empei_i_reg_EXT_Q_RSYNC_INT_EN_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_EXT_Q_RSYNC_INT_EN_BIT_EXT_Q_RESYNC_INT_E_MSK) >> EMPEI120_I_REG_EXT_Q_RSYNC_INT_EN_BIT_EXT_Q_RESYNC_INT_E_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_EXT_Q_RESYNC_INT_E_get", value );

    return value;
}

#ifndef empei_i_field_range_EXT_Q_RESYNC_INT_E_set
#define empei_i_field_range_EXT_Q_RESYNC_INT_E_set( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_EXT_Q_RESYNC_INT_E_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_EXT_Q_RESYNC_INT_E_set( LOG_CALLER_DEFN
                                                                empei_i_buffer_t *b,
                                                                empei_i_handle_t *h,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_EXT_Q_RESYNC_INT_E_set", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_EXT_Q_RESYNC_INT_E_set", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_EXT_Q_RESYNC_INT_E_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000048 bits 11:0) field EXT_Q_RESYNC_INT_E of register PMC_EMPEI120_I_REG_EXT_Q_RSYNC_INT_EN */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000048 bits 11:0) field EXT_Q_RESYNC_INT_E of register PMC_EMPEI120_I_REG_EXT_Q_RSYNC_INT_EN */
        _empei_i_reg_EXT_Q_RSYNC_INT_EN_field_set( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   subfield_mask << (EMPEI120_I_REG_EXT_Q_RSYNC_INT_EN_BIT_EXT_Q_RESYNC_INT_E_OFF + subfield_offset),
                                                   EMPEI120_I_REG_EXT_Q_RSYNC_INT_EN_BIT_EXT_Q_RESYNC_INT_E_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_EXT_Q_RESYNC_INT_E_get
#define empei_i_field_range_EXT_Q_RESYNC_INT_E_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_EXT_Q_RESYNC_INT_E_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_EXT_Q_RESYNC_INT_E_get( LOG_CALLER_DEFN
                                                                  empei_i_buffer_t *b,
                                                                  empei_i_handle_t *h,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_EXT_Q_RESYNC_INT_E_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_EXT_Q_RESYNC_INT_E_get", stop_bit, 11 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 11) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 11;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000048 bits 11:0) field EXT_Q_RESYNC_INT_E of register PMC_EMPEI120_I_REG_EXT_Q_RSYNC_INT_EN */
    reg_value = _empei_i_reg_EXT_Q_RSYNC_INT_EN_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_EXT_Q_RSYNC_INT_EN_BIT_EXT_Q_RESYNC_INT_E_MSK)
                  >> EMPEI120_I_REG_EXT_Q_RSYNC_INT_EN_BIT_EXT_Q_RESYNC_INT_E_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_EXT_Q_RSYNC_INT_EN_BIT_EXT_Q_RESYNC_INT_E_MSK, EMPEI120_I_REG_EXT_Q_RSYNC_INT_EN_BIT_EXT_Q_RESYNC_INT_E_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_EXT_Q_RESYNC_INT_E_get", start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 *                 Parameter Access Functions for Paramset int_sync
 * ==================================================================================
 */

#ifndef empei_i_field_INS_Q_OVERFLOW_INT_I_set_to_clear
#define empei_i_field_INS_Q_OVERFLOW_INT_I_set_to_clear( b, h, value ) \
       _empei_i_field_INS_Q_OVERFLOW_INT_I_set_to_clear( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_INS_Q_OVERFLOW_INT_I_set_to_clear( LOG_CALLER_DEFN
                                                                     empei_i_buffer_t *b,
                                                                     empei_i_handle_t *h,
                                                                     UINT32 value )
{
    if (value > 4095)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_INS_Q_OVERFLOW_INT_I_set_to_clear", value, 4095);
    IOLOG( "%s <= 0x%08x", "empei_i_field_INS_Q_OVERFLOW_INT_I_set_to_clear", value );

    /* (0x00000018 bits 11:0) field INS_Q_OVERFLOW_INT_I of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT */
    _empei_i_reg_INS_EXT_OF_INT_action_on_write_field_set( LOG_CALLER_ARGS
                                                           b,
                                                           h,
                                                           EMPEI120_I_REG_INS_EXT_OF_INT_BIT_INS_Q_OVERFLOW_INT_I_MSK,
                                                           EMPEI120_I_REG_INS_EXT_OF_INT_BIT_INS_Q_OVERFLOW_INT_I_OFF,
                                                           value);
}


#ifndef empei_i_field_INS_Q_OVERFLOW_INT_I_get
#define empei_i_field_INS_Q_OVERFLOW_INT_I_get( b, h ) \
       _empei_i_field_INS_Q_OVERFLOW_INT_I_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_INS_Q_OVERFLOW_INT_I_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000018 bits 11:0) field INS_Q_OVERFLOW_INT_I of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT */
    reg_value = _empei_i_reg_INS_EXT_OF_INT_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_INS_EXT_OF_INT_BIT_INS_Q_OVERFLOW_INT_I_MSK) >> EMPEI120_I_REG_INS_EXT_OF_INT_BIT_INS_Q_OVERFLOW_INT_I_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_INS_Q_OVERFLOW_INT_I_get", value );

    return value;
}

#ifndef empei_i_field_range_INS_Q_OVERFLOW_INT_I_set_to_clear
#define empei_i_field_range_INS_Q_OVERFLOW_INT_I_set_to_clear( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_INS_Q_OVERFLOW_INT_I_set_to_clear( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_INS_Q_OVERFLOW_INT_I_set_to_clear( LOG_CALLER_DEFN
                                                                           empei_i_buffer_t *b,
                                                                           empei_i_handle_t *h,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit,
                                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INS_Q_OVERFLOW_INT_I_set_to_clear", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INS_Q_OVERFLOW_INT_I_set_to_clear", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INS_Q_OVERFLOW_INT_I_set_to_clear", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000018 bits 11:0) field INS_Q_OVERFLOW_INT_I of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000018 bits 11:0) field INS_Q_OVERFLOW_INT_I of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT */
        _empei_i_reg_INS_EXT_OF_INT_action_on_write_field_set( LOG_CALLER_ARGS
                                                               b,
                                                               h,
                                                               subfield_mask << (EMPEI120_I_REG_INS_EXT_OF_INT_BIT_INS_Q_OVERFLOW_INT_I_OFF + subfield_offset),
                                                               EMPEI120_I_REG_INS_EXT_OF_INT_BIT_INS_Q_OVERFLOW_INT_I_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_INS_Q_OVERFLOW_INT_I_get
#define empei_i_field_range_INS_Q_OVERFLOW_INT_I_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_INS_Q_OVERFLOW_INT_I_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_INS_Q_OVERFLOW_INT_I_get( LOG_CALLER_DEFN
                                                                    empei_i_buffer_t *b,
                                                                    empei_i_handle_t *h,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INS_Q_OVERFLOW_INT_I_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INS_Q_OVERFLOW_INT_I_get", stop_bit, 11 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 11) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 11;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000018 bits 11:0) field INS_Q_OVERFLOW_INT_I of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT */
    reg_value = _empei_i_reg_INS_EXT_OF_INT_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_INS_EXT_OF_INT_BIT_INS_Q_OVERFLOW_INT_I_MSK)
                  >> EMPEI120_I_REG_INS_EXT_OF_INT_BIT_INS_Q_OVERFLOW_INT_I_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_INS_EXT_OF_INT_BIT_INS_Q_OVERFLOW_INT_I_MSK, EMPEI120_I_REG_INS_EXT_OF_INT_BIT_INS_Q_OVERFLOW_INT_I_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INS_Q_OVERFLOW_INT_I_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_range_INS_Q_OVERFLOW_INT_I_poll_bit
#define empei_i_field_range_INS_Q_OVERFLOW_INT_I_poll_bit( b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_field_range_INS_Q_OVERFLOW_INT_I_poll_bit( LOG_CALLER b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_field_range_INS_Q_OVERFLOW_INT_I_poll_bit( LOG_CALLER_DEFN
                                                                            empei_i_buffer_t *b,
                                                                            empei_i_handle_t *h,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INS_Q_OVERFLOW_INT_I_poll_bit", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INS_Q_OVERFLOW_INT_I_poll_bit", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INS_Q_OVERFLOW_INT_I_poll_bit", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000018 bits 11:0) field INS_Q_OVERFLOW_INT_I of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000018 bits 11:0) field INS_Q_OVERFLOW_INT_I of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT */
        return _empei_i_reg_INS_EXT_OF_INT_poll_bit( LOG_CALLER_ARGS
                                                     b,
                                                     h,
                                                     subfield_mask << (EMPEI120_I_REG_INS_EXT_OF_INT_BIT_INS_Q_OVERFLOW_INT_I_OFF + subfield_offset),
                                                     value << (EMPEI120_I_REG_INS_EXT_OF_INT_BIT_INS_Q_OVERFLOW_INT_I_OFF + subfield_offset),
                                                     max_count,
                                                     num_failed_polls,
                                                     delay_between_polls_in_microseconds);
    }
    return PMC_ERR_INVALID_PARAMETERS;
}


#ifndef empei_i_field_INS_Q_OVERFLOW_INT_I_poll_bit
#define empei_i_field_INS_Q_OVERFLOW_INT_I_poll_bit( b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_field_INS_Q_OVERFLOW_INT_I_poll_bit( LOG_CALLER b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_field_INS_Q_OVERFLOW_INT_I_poll_bit( LOG_CALLER_DEFN
                                                                      empei_i_buffer_t *b,
                                                                      empei_i_handle_t *h,
                                                                      UINT32 value,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "empei_i_field_INS_Q_OVERFLOW_INT_I_poll_bit", value );

    /* (0x00000018 bits 11:0) field INS_Q_OVERFLOW_INT_I of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT */
    return _empei_i_reg_INS_EXT_OF_INT_poll_bit( LOG_CALLER_ARGS
                                                 b,
                                                 h,
                                                 EMPEI120_I_REG_INS_EXT_OF_INT_BIT_INS_Q_OVERFLOW_INT_I_MSK,
                                                 (value<<EMPEI120_I_REG_INS_EXT_OF_INT_BIT_INS_Q_OVERFLOW_INT_I_OFF),
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}


#ifndef empei_i_field_EXT_Q_OVERFLOW_INT_I_set_to_clear
#define empei_i_field_EXT_Q_OVERFLOW_INT_I_set_to_clear( b, h, value ) \
       _empei_i_field_EXT_Q_OVERFLOW_INT_I_set_to_clear( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_EXT_Q_OVERFLOW_INT_I_set_to_clear( LOG_CALLER_DEFN
                                                                     empei_i_buffer_t *b,
                                                                     empei_i_handle_t *h,
                                                                     UINT32 value )
{
    if (value > 4095)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_EXT_Q_OVERFLOW_INT_I_set_to_clear", value, 4095);
    IOLOG( "%s <= 0x%08x", "empei_i_field_EXT_Q_OVERFLOW_INT_I_set_to_clear", value );

    /* (0x00000018 bits 23:12) field EXT_Q_OVERFLOW_INT_I of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT */
    _empei_i_reg_INS_EXT_OF_INT_action_on_write_field_set( LOG_CALLER_ARGS
                                                           b,
                                                           h,
                                                           EMPEI120_I_REG_INS_EXT_OF_INT_BIT_EXT_Q_OVERFLOW_INT_I_MSK,
                                                           EMPEI120_I_REG_INS_EXT_OF_INT_BIT_EXT_Q_OVERFLOW_INT_I_OFF,
                                                           value);
}


#ifndef empei_i_field_EXT_Q_OVERFLOW_INT_I_get
#define empei_i_field_EXT_Q_OVERFLOW_INT_I_get( b, h ) \
       _empei_i_field_EXT_Q_OVERFLOW_INT_I_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_EXT_Q_OVERFLOW_INT_I_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000018 bits 23:12) field EXT_Q_OVERFLOW_INT_I of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT */
    reg_value = _empei_i_reg_INS_EXT_OF_INT_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_INS_EXT_OF_INT_BIT_EXT_Q_OVERFLOW_INT_I_MSK) >> EMPEI120_I_REG_INS_EXT_OF_INT_BIT_EXT_Q_OVERFLOW_INT_I_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_EXT_Q_OVERFLOW_INT_I_get", value );

    return value;
}

#ifndef empei_i_field_range_EXT_Q_OVERFLOW_INT_I_set_to_clear
#define empei_i_field_range_EXT_Q_OVERFLOW_INT_I_set_to_clear( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_EXT_Q_OVERFLOW_INT_I_set_to_clear( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_EXT_Q_OVERFLOW_INT_I_set_to_clear( LOG_CALLER_DEFN
                                                                           empei_i_buffer_t *b,
                                                                           empei_i_handle_t *h,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit,
                                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_EXT_Q_OVERFLOW_INT_I_set_to_clear", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_EXT_Q_OVERFLOW_INT_I_set_to_clear", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_EXT_Q_OVERFLOW_INT_I_set_to_clear", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000018 bits 23:12) field EXT_Q_OVERFLOW_INT_I of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 12) {
            subfield_offset = start_bit - 12;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  12 - start_bit;
            subfield_start_bit = 12;
        }
        if (stop_bit < 23) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 23;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000018 bits 23:12) field EXT_Q_OVERFLOW_INT_I of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT */
        _empei_i_reg_INS_EXT_OF_INT_action_on_write_field_set( LOG_CALLER_ARGS
                                                               b,
                                                               h,
                                                               subfield_mask << (EMPEI120_I_REG_INS_EXT_OF_INT_BIT_EXT_Q_OVERFLOW_INT_I_OFF + subfield_offset),
                                                               EMPEI120_I_REG_INS_EXT_OF_INT_BIT_EXT_Q_OVERFLOW_INT_I_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_EXT_Q_OVERFLOW_INT_I_get
#define empei_i_field_range_EXT_Q_OVERFLOW_INT_I_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_EXT_Q_OVERFLOW_INT_I_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_EXT_Q_OVERFLOW_INT_I_get( LOG_CALLER_DEFN
                                                                    empei_i_buffer_t *b,
                                                                    empei_i_handle_t *h,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_EXT_Q_OVERFLOW_INT_I_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_EXT_Q_OVERFLOW_INT_I_get", stop_bit, 11 );
    if (start_bit > 12) {
        subfield_offset = start_bit - 12;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 12 - start_bit;
        subfield_start_bit = 12;
    }
    if (stop_bit < 23) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 23;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000018 bits 23:12) field EXT_Q_OVERFLOW_INT_I of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT */
    reg_value = _empei_i_reg_INS_EXT_OF_INT_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_INS_EXT_OF_INT_BIT_EXT_Q_OVERFLOW_INT_I_MSK)
                  >> EMPEI120_I_REG_INS_EXT_OF_INT_BIT_EXT_Q_OVERFLOW_INT_I_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_INS_EXT_OF_INT_BIT_EXT_Q_OVERFLOW_INT_I_MSK, EMPEI120_I_REG_INS_EXT_OF_INT_BIT_EXT_Q_OVERFLOW_INT_I_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_EXT_Q_OVERFLOW_INT_I_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_range_EXT_Q_OVERFLOW_INT_I_poll_bit
#define empei_i_field_range_EXT_Q_OVERFLOW_INT_I_poll_bit( b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_field_range_EXT_Q_OVERFLOW_INT_I_poll_bit( LOG_CALLER b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_field_range_EXT_Q_OVERFLOW_INT_I_poll_bit( LOG_CALLER_DEFN
                                                                            empei_i_buffer_t *b,
                                                                            empei_i_handle_t *h,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_EXT_Q_OVERFLOW_INT_I_poll_bit", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_EXT_Q_OVERFLOW_INT_I_poll_bit", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_EXT_Q_OVERFLOW_INT_I_poll_bit", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000018 bits 23:12) field EXT_Q_OVERFLOW_INT_I of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 12) {
            subfield_offset = start_bit - 12;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  12 - start_bit;
            subfield_start_bit = 12;
        }
        if (stop_bit < 23) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 23;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000018 bits 23:12) field EXT_Q_OVERFLOW_INT_I of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT */
        return _empei_i_reg_INS_EXT_OF_INT_poll_bit( LOG_CALLER_ARGS
                                                     b,
                                                     h,
                                                     subfield_mask << (EMPEI120_I_REG_INS_EXT_OF_INT_BIT_EXT_Q_OVERFLOW_INT_I_OFF + subfield_offset),
                                                     value << (EMPEI120_I_REG_INS_EXT_OF_INT_BIT_EXT_Q_OVERFLOW_INT_I_OFF + subfield_offset),
                                                     max_count,
                                                     num_failed_polls,
                                                     delay_between_polls_in_microseconds);
    }
    return PMC_ERR_INVALID_PARAMETERS;
}


#ifndef empei_i_field_EXT_Q_OVERFLOW_INT_I_poll_bit
#define empei_i_field_EXT_Q_OVERFLOW_INT_I_poll_bit( b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_field_EXT_Q_OVERFLOW_INT_I_poll_bit( LOG_CALLER b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_field_EXT_Q_OVERFLOW_INT_I_poll_bit( LOG_CALLER_DEFN
                                                                      empei_i_buffer_t *b,
                                                                      empei_i_handle_t *h,
                                                                      UINT32 value,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "empei_i_field_EXT_Q_OVERFLOW_INT_I_poll_bit", value );

    /* (0x00000018 bits 23:12) field EXT_Q_OVERFLOW_INT_I of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT */
    return _empei_i_reg_INS_EXT_OF_INT_poll_bit( LOG_CALLER_ARGS
                                                 b,
                                                 h,
                                                 EMPEI120_I_REG_INS_EXT_OF_INT_BIT_EXT_Q_OVERFLOW_INT_I_MSK,
                                                 (value<<EMPEI120_I_REG_INS_EXT_OF_INT_BIT_EXT_Q_OVERFLOW_INT_I_OFF),
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}


#ifndef empei_i_field_SYS_Q_OVERFLOW_INT_I_set_to_clear
#define empei_i_field_SYS_Q_OVERFLOW_INT_I_set_to_clear( b, h, value ) \
       _empei_i_field_SYS_Q_OVERFLOW_INT_I_set_to_clear( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_SYS_Q_OVERFLOW_INT_I_set_to_clear( LOG_CALLER_DEFN
                                                                     empei_i_buffer_t *b,
                                                                     empei_i_handle_t *h,
                                                                     UINT32 value )
{
    if (value > 4095)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_SYS_Q_OVERFLOW_INT_I_set_to_clear", value, 4095);
    IOLOG( "%s <= 0x%08x", "empei_i_field_SYS_Q_OVERFLOW_INT_I_set_to_clear", value );

    /* (0x0000001c bits 11:0) field SYS_Q_OVERFLOW_INT_I of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT */
    _empei_i_reg_SYS_INTL_OF_INT_action_on_write_field_set( LOG_CALLER_ARGS
                                                            b,
                                                            h,
                                                            EMPEI120_I_REG_SYS_INTL_OF_INT_BIT_SYS_Q_OVERFLOW_INT_I_MSK,
                                                            EMPEI120_I_REG_SYS_INTL_OF_INT_BIT_SYS_Q_OVERFLOW_INT_I_OFF,
                                                            value);
}


#ifndef empei_i_field_SYS_Q_OVERFLOW_INT_I_get
#define empei_i_field_SYS_Q_OVERFLOW_INT_I_get( b, h ) \
       _empei_i_field_SYS_Q_OVERFLOW_INT_I_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_SYS_Q_OVERFLOW_INT_I_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000001c bits 11:0) field SYS_Q_OVERFLOW_INT_I of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT */
    reg_value = _empei_i_reg_SYS_INTL_OF_INT_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_SYS_INTL_OF_INT_BIT_SYS_Q_OVERFLOW_INT_I_MSK) >> EMPEI120_I_REG_SYS_INTL_OF_INT_BIT_SYS_Q_OVERFLOW_INT_I_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_SYS_Q_OVERFLOW_INT_I_get", value );

    return value;
}

#ifndef empei_i_field_range_SYS_Q_OVERFLOW_INT_I_set_to_clear
#define empei_i_field_range_SYS_Q_OVERFLOW_INT_I_set_to_clear( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_SYS_Q_OVERFLOW_INT_I_set_to_clear( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_SYS_Q_OVERFLOW_INT_I_set_to_clear( LOG_CALLER_DEFN
                                                                           empei_i_buffer_t *b,
                                                                           empei_i_handle_t *h,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit,
                                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_SYS_Q_OVERFLOW_INT_I_set_to_clear", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_SYS_Q_OVERFLOW_INT_I_set_to_clear", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_SYS_Q_OVERFLOW_INT_I_set_to_clear", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x0000001c bits 11:0) field SYS_Q_OVERFLOW_INT_I of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000001c bits 11:0) field SYS_Q_OVERFLOW_INT_I of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT */
        _empei_i_reg_SYS_INTL_OF_INT_action_on_write_field_set( LOG_CALLER_ARGS
                                                                b,
                                                                h,
                                                                subfield_mask << (EMPEI120_I_REG_SYS_INTL_OF_INT_BIT_SYS_Q_OVERFLOW_INT_I_OFF + subfield_offset),
                                                                EMPEI120_I_REG_SYS_INTL_OF_INT_BIT_SYS_Q_OVERFLOW_INT_I_OFF + subfield_offset,
                                                                value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_SYS_Q_OVERFLOW_INT_I_get
#define empei_i_field_range_SYS_Q_OVERFLOW_INT_I_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_SYS_Q_OVERFLOW_INT_I_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_SYS_Q_OVERFLOW_INT_I_get( LOG_CALLER_DEFN
                                                                    empei_i_buffer_t *b,
                                                                    empei_i_handle_t *h,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_SYS_Q_OVERFLOW_INT_I_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_SYS_Q_OVERFLOW_INT_I_get", stop_bit, 11 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 11) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 11;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000001c bits 11:0) field SYS_Q_OVERFLOW_INT_I of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT */
    reg_value = _empei_i_reg_SYS_INTL_OF_INT_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_SYS_INTL_OF_INT_BIT_SYS_Q_OVERFLOW_INT_I_MSK)
                  >> EMPEI120_I_REG_SYS_INTL_OF_INT_BIT_SYS_Q_OVERFLOW_INT_I_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_SYS_INTL_OF_INT_BIT_SYS_Q_OVERFLOW_INT_I_MSK, EMPEI120_I_REG_SYS_INTL_OF_INT_BIT_SYS_Q_OVERFLOW_INT_I_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_SYS_Q_OVERFLOW_INT_I_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_range_SYS_Q_OVERFLOW_INT_I_poll_bit
#define empei_i_field_range_SYS_Q_OVERFLOW_INT_I_poll_bit( b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_field_range_SYS_Q_OVERFLOW_INT_I_poll_bit( LOG_CALLER b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_field_range_SYS_Q_OVERFLOW_INT_I_poll_bit( LOG_CALLER_DEFN
                                                                            empei_i_buffer_t *b,
                                                                            empei_i_handle_t *h,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_SYS_Q_OVERFLOW_INT_I_poll_bit", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_SYS_Q_OVERFLOW_INT_I_poll_bit", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_SYS_Q_OVERFLOW_INT_I_poll_bit", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x0000001c bits 11:0) field SYS_Q_OVERFLOW_INT_I of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000001c bits 11:0) field SYS_Q_OVERFLOW_INT_I of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT */
        return _empei_i_reg_SYS_INTL_OF_INT_poll_bit( LOG_CALLER_ARGS
                                                      b,
                                                      h,
                                                      subfield_mask << (EMPEI120_I_REG_SYS_INTL_OF_INT_BIT_SYS_Q_OVERFLOW_INT_I_OFF + subfield_offset),
                                                      value << (EMPEI120_I_REG_SYS_INTL_OF_INT_BIT_SYS_Q_OVERFLOW_INT_I_OFF + subfield_offset),
                                                      max_count,
                                                      num_failed_polls,
                                                      delay_between_polls_in_microseconds);
    }
    return PMC_ERR_INVALID_PARAMETERS;
}


#ifndef empei_i_field_SYS_Q_OVERFLOW_INT_I_poll_bit
#define empei_i_field_SYS_Q_OVERFLOW_INT_I_poll_bit( b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_field_SYS_Q_OVERFLOW_INT_I_poll_bit( LOG_CALLER b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_field_SYS_Q_OVERFLOW_INT_I_poll_bit( LOG_CALLER_DEFN
                                                                      empei_i_buffer_t *b,
                                                                      empei_i_handle_t *h,
                                                                      UINT32 value,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "empei_i_field_SYS_Q_OVERFLOW_INT_I_poll_bit", value );

    /* (0x0000001c bits 11:0) field SYS_Q_OVERFLOW_INT_I of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT */
    return _empei_i_reg_SYS_INTL_OF_INT_poll_bit( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  EMPEI120_I_REG_SYS_INTL_OF_INT_BIT_SYS_Q_OVERFLOW_INT_I_MSK,
                                                  (value<<EMPEI120_I_REG_SYS_INTL_OF_INT_BIT_SYS_Q_OVERFLOW_INT_I_OFF),
                                                  max_count,
                                                  num_failed_polls,
                                                  delay_between_polls_in_microseconds);
}


#ifndef empei_i_field_INTL_Q_OVERFLOW_INT_I_set_to_clear
#define empei_i_field_INTL_Q_OVERFLOW_INT_I_set_to_clear( b, h, value ) \
       _empei_i_field_INTL_Q_OVERFLOW_INT_I_set_to_clear( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_INTL_Q_OVERFLOW_INT_I_set_to_clear( LOG_CALLER_DEFN
                                                                      empei_i_buffer_t *b,
                                                                      empei_i_handle_t *h,
                                                                      UINT32 value )
{
    if (value > 4095)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_INTL_Q_OVERFLOW_INT_I_set_to_clear", value, 4095);
    IOLOG( "%s <= 0x%08x", "empei_i_field_INTL_Q_OVERFLOW_INT_I_set_to_clear", value );

    /* (0x0000001c bits 23:12) field INTL_Q_OVERFLOW_INT_I of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT */
    _empei_i_reg_SYS_INTL_OF_INT_action_on_write_field_set( LOG_CALLER_ARGS
                                                            b,
                                                            h,
                                                            EMPEI120_I_REG_SYS_INTL_OF_INT_BIT_INTL_Q_OVERFLOW_INT_I_MSK,
                                                            EMPEI120_I_REG_SYS_INTL_OF_INT_BIT_INTL_Q_OVERFLOW_INT_I_OFF,
                                                            value);
}


#ifndef empei_i_field_INTL_Q_OVERFLOW_INT_I_get
#define empei_i_field_INTL_Q_OVERFLOW_INT_I_get( b, h ) \
       _empei_i_field_INTL_Q_OVERFLOW_INT_I_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_INTL_Q_OVERFLOW_INT_I_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000001c bits 23:12) field INTL_Q_OVERFLOW_INT_I of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT */
    reg_value = _empei_i_reg_SYS_INTL_OF_INT_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_SYS_INTL_OF_INT_BIT_INTL_Q_OVERFLOW_INT_I_MSK) >> EMPEI120_I_REG_SYS_INTL_OF_INT_BIT_INTL_Q_OVERFLOW_INT_I_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_INTL_Q_OVERFLOW_INT_I_get", value );

    return value;
}

#ifndef empei_i_field_range_INTL_Q_OVERFLOW_INT_I_set_to_clear
#define empei_i_field_range_INTL_Q_OVERFLOW_INT_I_set_to_clear( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_INTL_Q_OVERFLOW_INT_I_set_to_clear( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_INTL_Q_OVERFLOW_INT_I_set_to_clear( LOG_CALLER_DEFN
                                                                            empei_i_buffer_t *b,
                                                                            empei_i_handle_t *h,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INTL_Q_OVERFLOW_INT_I_set_to_clear", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INTL_Q_OVERFLOW_INT_I_set_to_clear", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INTL_Q_OVERFLOW_INT_I_set_to_clear", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x0000001c bits 23:12) field INTL_Q_OVERFLOW_INT_I of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 12) {
            subfield_offset = start_bit - 12;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  12 - start_bit;
            subfield_start_bit = 12;
        }
        if (stop_bit < 23) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 23;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000001c bits 23:12) field INTL_Q_OVERFLOW_INT_I of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT */
        _empei_i_reg_SYS_INTL_OF_INT_action_on_write_field_set( LOG_CALLER_ARGS
                                                                b,
                                                                h,
                                                                subfield_mask << (EMPEI120_I_REG_SYS_INTL_OF_INT_BIT_INTL_Q_OVERFLOW_INT_I_OFF + subfield_offset),
                                                                EMPEI120_I_REG_SYS_INTL_OF_INT_BIT_INTL_Q_OVERFLOW_INT_I_OFF + subfield_offset,
                                                                value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_INTL_Q_OVERFLOW_INT_I_get
#define empei_i_field_range_INTL_Q_OVERFLOW_INT_I_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_INTL_Q_OVERFLOW_INT_I_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_INTL_Q_OVERFLOW_INT_I_get( LOG_CALLER_DEFN
                                                                     empei_i_buffer_t *b,
                                                                     empei_i_handle_t *h,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INTL_Q_OVERFLOW_INT_I_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INTL_Q_OVERFLOW_INT_I_get", stop_bit, 11 );
    if (start_bit > 12) {
        subfield_offset = start_bit - 12;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 12 - start_bit;
        subfield_start_bit = 12;
    }
    if (stop_bit < 23) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 23;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000001c bits 23:12) field INTL_Q_OVERFLOW_INT_I of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT */
    reg_value = _empei_i_reg_SYS_INTL_OF_INT_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_SYS_INTL_OF_INT_BIT_INTL_Q_OVERFLOW_INT_I_MSK)
                  >> EMPEI120_I_REG_SYS_INTL_OF_INT_BIT_INTL_Q_OVERFLOW_INT_I_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_SYS_INTL_OF_INT_BIT_INTL_Q_OVERFLOW_INT_I_MSK, EMPEI120_I_REG_SYS_INTL_OF_INT_BIT_INTL_Q_OVERFLOW_INT_I_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INTL_Q_OVERFLOW_INT_I_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_range_INTL_Q_OVERFLOW_INT_I_poll_bit
#define empei_i_field_range_INTL_Q_OVERFLOW_INT_I_poll_bit( b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_field_range_INTL_Q_OVERFLOW_INT_I_poll_bit( LOG_CALLER b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_field_range_INTL_Q_OVERFLOW_INT_I_poll_bit( LOG_CALLER_DEFN
                                                                             empei_i_buffer_t *b,
                                                                             empei_i_handle_t *h,
                                                                             UINT32 start_bit,
                                                                             UINT32 stop_bit,
                                                                             UINT32 value,
                                                                             UINT32 max_count,
                                                                             UINT32 *num_failed_polls,
                                                                             UINT32 delay_between_polls_in_microseconds )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INTL_Q_OVERFLOW_INT_I_poll_bit", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INTL_Q_OVERFLOW_INT_I_poll_bit", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INTL_Q_OVERFLOW_INT_I_poll_bit", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x0000001c bits 23:12) field INTL_Q_OVERFLOW_INT_I of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 12) {
            subfield_offset = start_bit - 12;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  12 - start_bit;
            subfield_start_bit = 12;
        }
        if (stop_bit < 23) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 23;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000001c bits 23:12) field INTL_Q_OVERFLOW_INT_I of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT */
        return _empei_i_reg_SYS_INTL_OF_INT_poll_bit( LOG_CALLER_ARGS
                                                      b,
                                                      h,
                                                      subfield_mask << (EMPEI120_I_REG_SYS_INTL_OF_INT_BIT_INTL_Q_OVERFLOW_INT_I_OFF + subfield_offset),
                                                      value << (EMPEI120_I_REG_SYS_INTL_OF_INT_BIT_INTL_Q_OVERFLOW_INT_I_OFF + subfield_offset),
                                                      max_count,
                                                      num_failed_polls,
                                                      delay_between_polls_in_microseconds);
    }
    return PMC_ERR_INVALID_PARAMETERS;
}


#ifndef empei_i_field_INTL_Q_OVERFLOW_INT_I_poll_bit
#define empei_i_field_INTL_Q_OVERFLOW_INT_I_poll_bit( b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_field_INTL_Q_OVERFLOW_INT_I_poll_bit( LOG_CALLER b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_field_INTL_Q_OVERFLOW_INT_I_poll_bit( LOG_CALLER_DEFN
                                                                       empei_i_buffer_t *b,
                                                                       empei_i_handle_t *h,
                                                                       UINT32 value,
                                                                       UINT32 max_count,
                                                                       UINT32 *num_failed_polls,
                                                                       UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "empei_i_field_INTL_Q_OVERFLOW_INT_I_poll_bit", value );

    /* (0x0000001c bits 23:12) field INTL_Q_OVERFLOW_INT_I of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT */
    return _empei_i_reg_SYS_INTL_OF_INT_poll_bit( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  EMPEI120_I_REG_SYS_INTL_OF_INT_BIT_INTL_Q_OVERFLOW_INT_I_MSK,
                                                  (value<<EMPEI120_I_REG_SYS_INTL_OF_INT_BIT_INTL_Q_OVERFLOW_INT_I_OFF),
                                                  max_count,
                                                  num_failed_polls,
                                                  delay_between_polls_in_microseconds);
}


#ifndef empei_i_field_SYS_Q_UNDERRUN_INT_I_set_to_clear
#define empei_i_field_SYS_Q_UNDERRUN_INT_I_set_to_clear( b, h, value ) \
       _empei_i_field_SYS_Q_UNDERRUN_INT_I_set_to_clear( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_SYS_Q_UNDERRUN_INT_I_set_to_clear( LOG_CALLER_DEFN
                                                                     empei_i_buffer_t *b,
                                                                     empei_i_handle_t *h,
                                                                     UINT32 value )
{
    if (value > 4095)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_SYS_Q_UNDERRUN_INT_I_set_to_clear", value, 4095);
    IOLOG( "%s <= 0x%08x", "empei_i_field_SYS_Q_UNDERRUN_INT_I_set_to_clear", value );

    /* (0x00000020 bits 11:0) field SYS_Q_UNDERRUN_INT_I of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT */
    _empei_i_reg_SYS_INS_UR_INT_action_on_write_field_set( LOG_CALLER_ARGS
                                                           b,
                                                           h,
                                                           EMPEI120_I_REG_SYS_INS_UR_INT_BIT_SYS_Q_UNDERRUN_INT_I_MSK,
                                                           EMPEI120_I_REG_SYS_INS_UR_INT_BIT_SYS_Q_UNDERRUN_INT_I_OFF,
                                                           value);
}


#ifndef empei_i_field_SYS_Q_UNDERRUN_INT_I_get
#define empei_i_field_SYS_Q_UNDERRUN_INT_I_get( b, h ) \
       _empei_i_field_SYS_Q_UNDERRUN_INT_I_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_SYS_Q_UNDERRUN_INT_I_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000020 bits 11:0) field SYS_Q_UNDERRUN_INT_I of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT */
    reg_value = _empei_i_reg_SYS_INS_UR_INT_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_SYS_INS_UR_INT_BIT_SYS_Q_UNDERRUN_INT_I_MSK) >> EMPEI120_I_REG_SYS_INS_UR_INT_BIT_SYS_Q_UNDERRUN_INT_I_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_SYS_Q_UNDERRUN_INT_I_get", value );

    return value;
}

#ifndef empei_i_field_range_SYS_Q_UNDERRUN_INT_I_set_to_clear
#define empei_i_field_range_SYS_Q_UNDERRUN_INT_I_set_to_clear( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_SYS_Q_UNDERRUN_INT_I_set_to_clear( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_SYS_Q_UNDERRUN_INT_I_set_to_clear( LOG_CALLER_DEFN
                                                                           empei_i_buffer_t *b,
                                                                           empei_i_handle_t *h,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit,
                                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_SYS_Q_UNDERRUN_INT_I_set_to_clear", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_SYS_Q_UNDERRUN_INT_I_set_to_clear", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_SYS_Q_UNDERRUN_INT_I_set_to_clear", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000020 bits 11:0) field SYS_Q_UNDERRUN_INT_I of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000020 bits 11:0) field SYS_Q_UNDERRUN_INT_I of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT */
        _empei_i_reg_SYS_INS_UR_INT_action_on_write_field_set( LOG_CALLER_ARGS
                                                               b,
                                                               h,
                                                               subfield_mask << (EMPEI120_I_REG_SYS_INS_UR_INT_BIT_SYS_Q_UNDERRUN_INT_I_OFF + subfield_offset),
                                                               EMPEI120_I_REG_SYS_INS_UR_INT_BIT_SYS_Q_UNDERRUN_INT_I_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_SYS_Q_UNDERRUN_INT_I_get
#define empei_i_field_range_SYS_Q_UNDERRUN_INT_I_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_SYS_Q_UNDERRUN_INT_I_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_SYS_Q_UNDERRUN_INT_I_get( LOG_CALLER_DEFN
                                                                    empei_i_buffer_t *b,
                                                                    empei_i_handle_t *h,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_SYS_Q_UNDERRUN_INT_I_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_SYS_Q_UNDERRUN_INT_I_get", stop_bit, 11 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 11) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 11;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000020 bits 11:0) field SYS_Q_UNDERRUN_INT_I of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT */
    reg_value = _empei_i_reg_SYS_INS_UR_INT_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_SYS_INS_UR_INT_BIT_SYS_Q_UNDERRUN_INT_I_MSK)
                  >> EMPEI120_I_REG_SYS_INS_UR_INT_BIT_SYS_Q_UNDERRUN_INT_I_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_SYS_INS_UR_INT_BIT_SYS_Q_UNDERRUN_INT_I_MSK, EMPEI120_I_REG_SYS_INS_UR_INT_BIT_SYS_Q_UNDERRUN_INT_I_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_SYS_Q_UNDERRUN_INT_I_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_range_SYS_Q_UNDERRUN_INT_I_poll_bit
#define empei_i_field_range_SYS_Q_UNDERRUN_INT_I_poll_bit( b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_field_range_SYS_Q_UNDERRUN_INT_I_poll_bit( LOG_CALLER b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_field_range_SYS_Q_UNDERRUN_INT_I_poll_bit( LOG_CALLER_DEFN
                                                                            empei_i_buffer_t *b,
                                                                            empei_i_handle_t *h,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_SYS_Q_UNDERRUN_INT_I_poll_bit", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_SYS_Q_UNDERRUN_INT_I_poll_bit", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_SYS_Q_UNDERRUN_INT_I_poll_bit", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000020 bits 11:0) field SYS_Q_UNDERRUN_INT_I of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000020 bits 11:0) field SYS_Q_UNDERRUN_INT_I of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT */
        return _empei_i_reg_SYS_INS_UR_INT_poll_bit( LOG_CALLER_ARGS
                                                     b,
                                                     h,
                                                     subfield_mask << (EMPEI120_I_REG_SYS_INS_UR_INT_BIT_SYS_Q_UNDERRUN_INT_I_OFF + subfield_offset),
                                                     value << (EMPEI120_I_REG_SYS_INS_UR_INT_BIT_SYS_Q_UNDERRUN_INT_I_OFF + subfield_offset),
                                                     max_count,
                                                     num_failed_polls,
                                                     delay_between_polls_in_microseconds);
    }
    return PMC_ERR_INVALID_PARAMETERS;
}


#ifndef empei_i_field_SYS_Q_UNDERRUN_INT_I_poll_bit
#define empei_i_field_SYS_Q_UNDERRUN_INT_I_poll_bit( b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_field_SYS_Q_UNDERRUN_INT_I_poll_bit( LOG_CALLER b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_field_SYS_Q_UNDERRUN_INT_I_poll_bit( LOG_CALLER_DEFN
                                                                      empei_i_buffer_t *b,
                                                                      empei_i_handle_t *h,
                                                                      UINT32 value,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "empei_i_field_SYS_Q_UNDERRUN_INT_I_poll_bit", value );

    /* (0x00000020 bits 11:0) field SYS_Q_UNDERRUN_INT_I of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT */
    return _empei_i_reg_SYS_INS_UR_INT_poll_bit( LOG_CALLER_ARGS
                                                 b,
                                                 h,
                                                 EMPEI120_I_REG_SYS_INS_UR_INT_BIT_SYS_Q_UNDERRUN_INT_I_MSK,
                                                 (value<<EMPEI120_I_REG_SYS_INS_UR_INT_BIT_SYS_Q_UNDERRUN_INT_I_OFF),
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}


#ifndef empei_i_field_INS_Q_UNDERRUN_INT_I_set_to_clear
#define empei_i_field_INS_Q_UNDERRUN_INT_I_set_to_clear( b, h, value ) \
       _empei_i_field_INS_Q_UNDERRUN_INT_I_set_to_clear( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_INS_Q_UNDERRUN_INT_I_set_to_clear( LOG_CALLER_DEFN
                                                                     empei_i_buffer_t *b,
                                                                     empei_i_handle_t *h,
                                                                     UINT32 value )
{
    if (value > 4095)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_INS_Q_UNDERRUN_INT_I_set_to_clear", value, 4095);
    IOLOG( "%s <= 0x%08x", "empei_i_field_INS_Q_UNDERRUN_INT_I_set_to_clear", value );

    /* (0x00000020 bits 23:12) field INS_Q_UNDERRUN_INT_I of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT */
    _empei_i_reg_SYS_INS_UR_INT_action_on_write_field_set( LOG_CALLER_ARGS
                                                           b,
                                                           h,
                                                           EMPEI120_I_REG_SYS_INS_UR_INT_BIT_INS_Q_UNDERRUN_INT_I_MSK,
                                                           EMPEI120_I_REG_SYS_INS_UR_INT_BIT_INS_Q_UNDERRUN_INT_I_OFF,
                                                           value);
}


#ifndef empei_i_field_INS_Q_UNDERRUN_INT_I_get
#define empei_i_field_INS_Q_UNDERRUN_INT_I_get( b, h ) \
       _empei_i_field_INS_Q_UNDERRUN_INT_I_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_INS_Q_UNDERRUN_INT_I_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000020 bits 23:12) field INS_Q_UNDERRUN_INT_I of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT */
    reg_value = _empei_i_reg_SYS_INS_UR_INT_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_SYS_INS_UR_INT_BIT_INS_Q_UNDERRUN_INT_I_MSK) >> EMPEI120_I_REG_SYS_INS_UR_INT_BIT_INS_Q_UNDERRUN_INT_I_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_INS_Q_UNDERRUN_INT_I_get", value );

    return value;
}

#ifndef empei_i_field_range_INS_Q_UNDERRUN_INT_I_set_to_clear
#define empei_i_field_range_INS_Q_UNDERRUN_INT_I_set_to_clear( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_INS_Q_UNDERRUN_INT_I_set_to_clear( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_INS_Q_UNDERRUN_INT_I_set_to_clear( LOG_CALLER_DEFN
                                                                           empei_i_buffer_t *b,
                                                                           empei_i_handle_t *h,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit,
                                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INS_Q_UNDERRUN_INT_I_set_to_clear", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INS_Q_UNDERRUN_INT_I_set_to_clear", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INS_Q_UNDERRUN_INT_I_set_to_clear", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000020 bits 23:12) field INS_Q_UNDERRUN_INT_I of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 12) {
            subfield_offset = start_bit - 12;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  12 - start_bit;
            subfield_start_bit = 12;
        }
        if (stop_bit < 23) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 23;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000020 bits 23:12) field INS_Q_UNDERRUN_INT_I of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT */
        _empei_i_reg_SYS_INS_UR_INT_action_on_write_field_set( LOG_CALLER_ARGS
                                                               b,
                                                               h,
                                                               subfield_mask << (EMPEI120_I_REG_SYS_INS_UR_INT_BIT_INS_Q_UNDERRUN_INT_I_OFF + subfield_offset),
                                                               EMPEI120_I_REG_SYS_INS_UR_INT_BIT_INS_Q_UNDERRUN_INT_I_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_INS_Q_UNDERRUN_INT_I_get
#define empei_i_field_range_INS_Q_UNDERRUN_INT_I_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_INS_Q_UNDERRUN_INT_I_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_INS_Q_UNDERRUN_INT_I_get( LOG_CALLER_DEFN
                                                                    empei_i_buffer_t *b,
                                                                    empei_i_handle_t *h,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INS_Q_UNDERRUN_INT_I_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INS_Q_UNDERRUN_INT_I_get", stop_bit, 11 );
    if (start_bit > 12) {
        subfield_offset = start_bit - 12;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 12 - start_bit;
        subfield_start_bit = 12;
    }
    if (stop_bit < 23) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 23;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000020 bits 23:12) field INS_Q_UNDERRUN_INT_I of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT */
    reg_value = _empei_i_reg_SYS_INS_UR_INT_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_SYS_INS_UR_INT_BIT_INS_Q_UNDERRUN_INT_I_MSK)
                  >> EMPEI120_I_REG_SYS_INS_UR_INT_BIT_INS_Q_UNDERRUN_INT_I_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_SYS_INS_UR_INT_BIT_INS_Q_UNDERRUN_INT_I_MSK, EMPEI120_I_REG_SYS_INS_UR_INT_BIT_INS_Q_UNDERRUN_INT_I_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INS_Q_UNDERRUN_INT_I_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_range_INS_Q_UNDERRUN_INT_I_poll_bit
#define empei_i_field_range_INS_Q_UNDERRUN_INT_I_poll_bit( b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_field_range_INS_Q_UNDERRUN_INT_I_poll_bit( LOG_CALLER b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_field_range_INS_Q_UNDERRUN_INT_I_poll_bit( LOG_CALLER_DEFN
                                                                            empei_i_buffer_t *b,
                                                                            empei_i_handle_t *h,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INS_Q_UNDERRUN_INT_I_poll_bit", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INS_Q_UNDERRUN_INT_I_poll_bit", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INS_Q_UNDERRUN_INT_I_poll_bit", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000020 bits 23:12) field INS_Q_UNDERRUN_INT_I of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 12) {
            subfield_offset = start_bit - 12;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  12 - start_bit;
            subfield_start_bit = 12;
        }
        if (stop_bit < 23) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 23;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000020 bits 23:12) field INS_Q_UNDERRUN_INT_I of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT */
        return _empei_i_reg_SYS_INS_UR_INT_poll_bit( LOG_CALLER_ARGS
                                                     b,
                                                     h,
                                                     subfield_mask << (EMPEI120_I_REG_SYS_INS_UR_INT_BIT_INS_Q_UNDERRUN_INT_I_OFF + subfield_offset),
                                                     value << (EMPEI120_I_REG_SYS_INS_UR_INT_BIT_INS_Q_UNDERRUN_INT_I_OFF + subfield_offset),
                                                     max_count,
                                                     num_failed_polls,
                                                     delay_between_polls_in_microseconds);
    }
    return PMC_ERR_INVALID_PARAMETERS;
}


#ifndef empei_i_field_INS_Q_UNDERRUN_INT_I_poll_bit
#define empei_i_field_INS_Q_UNDERRUN_INT_I_poll_bit( b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_field_INS_Q_UNDERRUN_INT_I_poll_bit( LOG_CALLER b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_field_INS_Q_UNDERRUN_INT_I_poll_bit( LOG_CALLER_DEFN
                                                                      empei_i_buffer_t *b,
                                                                      empei_i_handle_t *h,
                                                                      UINT32 value,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "empei_i_field_INS_Q_UNDERRUN_INT_I_poll_bit", value );

    /* (0x00000020 bits 23:12) field INS_Q_UNDERRUN_INT_I of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT */
    return _empei_i_reg_SYS_INS_UR_INT_poll_bit( LOG_CALLER_ARGS
                                                 b,
                                                 h,
                                                 EMPEI120_I_REG_SYS_INS_UR_INT_BIT_INS_Q_UNDERRUN_INT_I_MSK,
                                                 (value<<EMPEI120_I_REG_SYS_INS_UR_INT_BIT_INS_Q_UNDERRUN_INT_I_OFF),
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}


#ifndef empei_i_field_SYS_Q_RESYNC_INT_I_set_to_clear
#define empei_i_field_SYS_Q_RESYNC_INT_I_set_to_clear( b, h, value ) \
       _empei_i_field_SYS_Q_RESYNC_INT_I_set_to_clear( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_SYS_Q_RESYNC_INT_I_set_to_clear( LOG_CALLER_DEFN
                                                                   empei_i_buffer_t *b,
                                                                   empei_i_handle_t *h,
                                                                   UINT32 value )
{
    if (value > 4095)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_SYS_Q_RESYNC_INT_I_set_to_clear", value, 4095);
    IOLOG( "%s <= 0x%08x", "empei_i_field_SYS_Q_RESYNC_INT_I_set_to_clear", value );

    /* (0x00000024 bits 11:0) field SYS_Q_RESYNC_INT_I of register PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT */
    _empei_i_reg_SYS_INS_Q_RSYNC_INT_action_on_write_field_set( LOG_CALLER_ARGS
                                                                b,
                                                                h,
                                                                EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_BIT_SYS_Q_RESYNC_INT_I_MSK,
                                                                EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_BIT_SYS_Q_RESYNC_INT_I_OFF,
                                                                value);
}


#ifndef empei_i_field_SYS_Q_RESYNC_INT_I_get
#define empei_i_field_SYS_Q_RESYNC_INT_I_get( b, h ) \
       _empei_i_field_SYS_Q_RESYNC_INT_I_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_SYS_Q_RESYNC_INT_I_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000024 bits 11:0) field SYS_Q_RESYNC_INT_I of register PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT */
    reg_value = _empei_i_reg_SYS_INS_Q_RSYNC_INT_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_BIT_SYS_Q_RESYNC_INT_I_MSK) >> EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_BIT_SYS_Q_RESYNC_INT_I_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_SYS_Q_RESYNC_INT_I_get", value );

    return value;
}

#ifndef empei_i_field_range_SYS_Q_RESYNC_INT_I_set_to_clear
#define empei_i_field_range_SYS_Q_RESYNC_INT_I_set_to_clear( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_SYS_Q_RESYNC_INT_I_set_to_clear( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_SYS_Q_RESYNC_INT_I_set_to_clear( LOG_CALLER_DEFN
                                                                         empei_i_buffer_t *b,
                                                                         empei_i_handle_t *h,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_SYS_Q_RESYNC_INT_I_set_to_clear", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_SYS_Q_RESYNC_INT_I_set_to_clear", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_SYS_Q_RESYNC_INT_I_set_to_clear", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000024 bits 11:0) field SYS_Q_RESYNC_INT_I of register PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000024 bits 11:0) field SYS_Q_RESYNC_INT_I of register PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT */
        _empei_i_reg_SYS_INS_Q_RSYNC_INT_action_on_write_field_set( LOG_CALLER_ARGS
                                                                    b,
                                                                    h,
                                                                    subfield_mask << (EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_BIT_SYS_Q_RESYNC_INT_I_OFF + subfield_offset),
                                                                    EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_BIT_SYS_Q_RESYNC_INT_I_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_SYS_Q_RESYNC_INT_I_get
#define empei_i_field_range_SYS_Q_RESYNC_INT_I_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_SYS_Q_RESYNC_INT_I_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_SYS_Q_RESYNC_INT_I_get( LOG_CALLER_DEFN
                                                                  empei_i_buffer_t *b,
                                                                  empei_i_handle_t *h,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_SYS_Q_RESYNC_INT_I_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_SYS_Q_RESYNC_INT_I_get", stop_bit, 11 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 11) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 11;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000024 bits 11:0) field SYS_Q_RESYNC_INT_I of register PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT */
    reg_value = _empei_i_reg_SYS_INS_Q_RSYNC_INT_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_BIT_SYS_Q_RESYNC_INT_I_MSK)
                  >> EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_BIT_SYS_Q_RESYNC_INT_I_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_BIT_SYS_Q_RESYNC_INT_I_MSK, EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_BIT_SYS_Q_RESYNC_INT_I_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_SYS_Q_RESYNC_INT_I_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_range_SYS_Q_RESYNC_INT_I_poll_bit
#define empei_i_field_range_SYS_Q_RESYNC_INT_I_poll_bit( b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_field_range_SYS_Q_RESYNC_INT_I_poll_bit( LOG_CALLER b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_field_range_SYS_Q_RESYNC_INT_I_poll_bit( LOG_CALLER_DEFN
                                                                          empei_i_buffer_t *b,
                                                                          empei_i_handle_t *h,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value,
                                                                          UINT32 max_count,
                                                                          UINT32 *num_failed_polls,
                                                                          UINT32 delay_between_polls_in_microseconds )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_SYS_Q_RESYNC_INT_I_poll_bit", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_SYS_Q_RESYNC_INT_I_poll_bit", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_SYS_Q_RESYNC_INT_I_poll_bit", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000024 bits 11:0) field SYS_Q_RESYNC_INT_I of register PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000024 bits 11:0) field SYS_Q_RESYNC_INT_I of register PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT */
        return _empei_i_reg_SYS_INS_Q_RSYNC_INT_poll_bit( LOG_CALLER_ARGS
                                                          b,
                                                          h,
                                                          subfield_mask << (EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_BIT_SYS_Q_RESYNC_INT_I_OFF + subfield_offset),
                                                          value << (EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_BIT_SYS_Q_RESYNC_INT_I_OFF + subfield_offset),
                                                          max_count,
                                                          num_failed_polls,
                                                          delay_between_polls_in_microseconds);
    }
    return PMC_ERR_INVALID_PARAMETERS;
}


#ifndef empei_i_field_SYS_Q_RESYNC_INT_I_poll_bit
#define empei_i_field_SYS_Q_RESYNC_INT_I_poll_bit( b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_field_SYS_Q_RESYNC_INT_I_poll_bit( LOG_CALLER b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_field_SYS_Q_RESYNC_INT_I_poll_bit( LOG_CALLER_DEFN
                                                                    empei_i_buffer_t *b,
                                                                    empei_i_handle_t *h,
                                                                    UINT32 value,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "empei_i_field_SYS_Q_RESYNC_INT_I_poll_bit", value );

    /* (0x00000024 bits 11:0) field SYS_Q_RESYNC_INT_I of register PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT */
    return _empei_i_reg_SYS_INS_Q_RSYNC_INT_poll_bit( LOG_CALLER_ARGS
                                                      b,
                                                      h,
                                                      EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_BIT_SYS_Q_RESYNC_INT_I_MSK,
                                                      (value<<EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_BIT_SYS_Q_RESYNC_INT_I_OFF),
                                                      max_count,
                                                      num_failed_polls,
                                                      delay_between_polls_in_microseconds);
}


#ifndef empei_i_field_INS_Q_RESYNC_INT_I_set_to_clear
#define empei_i_field_INS_Q_RESYNC_INT_I_set_to_clear( b, h, value ) \
       _empei_i_field_INS_Q_RESYNC_INT_I_set_to_clear( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_INS_Q_RESYNC_INT_I_set_to_clear( LOG_CALLER_DEFN
                                                                   empei_i_buffer_t *b,
                                                                   empei_i_handle_t *h,
                                                                   UINT32 value )
{
    if (value > 4095)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_INS_Q_RESYNC_INT_I_set_to_clear", value, 4095);
    IOLOG( "%s <= 0x%08x", "empei_i_field_INS_Q_RESYNC_INT_I_set_to_clear", value );

    /* (0x00000024 bits 23:12) field INS_Q_RESYNC_INT_I of register PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT */
    _empei_i_reg_SYS_INS_Q_RSYNC_INT_action_on_write_field_set( LOG_CALLER_ARGS
                                                                b,
                                                                h,
                                                                EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_BIT_INS_Q_RESYNC_INT_I_MSK,
                                                                EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_BIT_INS_Q_RESYNC_INT_I_OFF,
                                                                value);
}


#ifndef empei_i_field_INS_Q_RESYNC_INT_I_get
#define empei_i_field_INS_Q_RESYNC_INT_I_get( b, h ) \
       _empei_i_field_INS_Q_RESYNC_INT_I_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_INS_Q_RESYNC_INT_I_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000024 bits 23:12) field INS_Q_RESYNC_INT_I of register PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT */
    reg_value = _empei_i_reg_SYS_INS_Q_RSYNC_INT_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_BIT_INS_Q_RESYNC_INT_I_MSK) >> EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_BIT_INS_Q_RESYNC_INT_I_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_INS_Q_RESYNC_INT_I_get", value );

    return value;
}

#ifndef empei_i_field_range_INS_Q_RESYNC_INT_I_set_to_clear
#define empei_i_field_range_INS_Q_RESYNC_INT_I_set_to_clear( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_INS_Q_RESYNC_INT_I_set_to_clear( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_INS_Q_RESYNC_INT_I_set_to_clear( LOG_CALLER_DEFN
                                                                         empei_i_buffer_t *b,
                                                                         empei_i_handle_t *h,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INS_Q_RESYNC_INT_I_set_to_clear", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INS_Q_RESYNC_INT_I_set_to_clear", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INS_Q_RESYNC_INT_I_set_to_clear", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000024 bits 23:12) field INS_Q_RESYNC_INT_I of register PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 12) {
            subfield_offset = start_bit - 12;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  12 - start_bit;
            subfield_start_bit = 12;
        }
        if (stop_bit < 23) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 23;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000024 bits 23:12) field INS_Q_RESYNC_INT_I of register PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT */
        _empei_i_reg_SYS_INS_Q_RSYNC_INT_action_on_write_field_set( LOG_CALLER_ARGS
                                                                    b,
                                                                    h,
                                                                    subfield_mask << (EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_BIT_INS_Q_RESYNC_INT_I_OFF + subfield_offset),
                                                                    EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_BIT_INS_Q_RESYNC_INT_I_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_INS_Q_RESYNC_INT_I_get
#define empei_i_field_range_INS_Q_RESYNC_INT_I_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_INS_Q_RESYNC_INT_I_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_INS_Q_RESYNC_INT_I_get( LOG_CALLER_DEFN
                                                                  empei_i_buffer_t *b,
                                                                  empei_i_handle_t *h,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INS_Q_RESYNC_INT_I_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INS_Q_RESYNC_INT_I_get", stop_bit, 11 );
    if (start_bit > 12) {
        subfield_offset = start_bit - 12;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 12 - start_bit;
        subfield_start_bit = 12;
    }
    if (stop_bit < 23) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 23;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000024 bits 23:12) field INS_Q_RESYNC_INT_I of register PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT */
    reg_value = _empei_i_reg_SYS_INS_Q_RSYNC_INT_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_BIT_INS_Q_RESYNC_INT_I_MSK)
                  >> EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_BIT_INS_Q_RESYNC_INT_I_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_BIT_INS_Q_RESYNC_INT_I_MSK, EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_BIT_INS_Q_RESYNC_INT_I_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INS_Q_RESYNC_INT_I_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_range_INS_Q_RESYNC_INT_I_poll_bit
#define empei_i_field_range_INS_Q_RESYNC_INT_I_poll_bit( b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_field_range_INS_Q_RESYNC_INT_I_poll_bit( LOG_CALLER b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_field_range_INS_Q_RESYNC_INT_I_poll_bit( LOG_CALLER_DEFN
                                                                          empei_i_buffer_t *b,
                                                                          empei_i_handle_t *h,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value,
                                                                          UINT32 max_count,
                                                                          UINT32 *num_failed_polls,
                                                                          UINT32 delay_between_polls_in_microseconds )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INS_Q_RESYNC_INT_I_poll_bit", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INS_Q_RESYNC_INT_I_poll_bit", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INS_Q_RESYNC_INT_I_poll_bit", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000024 bits 23:12) field INS_Q_RESYNC_INT_I of register PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 12) {
            subfield_offset = start_bit - 12;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  12 - start_bit;
            subfield_start_bit = 12;
        }
        if (stop_bit < 23) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 23;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000024 bits 23:12) field INS_Q_RESYNC_INT_I of register PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT */
        return _empei_i_reg_SYS_INS_Q_RSYNC_INT_poll_bit( LOG_CALLER_ARGS
                                                          b,
                                                          h,
                                                          subfield_mask << (EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_BIT_INS_Q_RESYNC_INT_I_OFF + subfield_offset),
                                                          value << (EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_BIT_INS_Q_RESYNC_INT_I_OFF + subfield_offset),
                                                          max_count,
                                                          num_failed_polls,
                                                          delay_between_polls_in_microseconds);
    }
    return PMC_ERR_INVALID_PARAMETERS;
}


#ifndef empei_i_field_INS_Q_RESYNC_INT_I_poll_bit
#define empei_i_field_INS_Q_RESYNC_INT_I_poll_bit( b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_field_INS_Q_RESYNC_INT_I_poll_bit( LOG_CALLER b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_field_INS_Q_RESYNC_INT_I_poll_bit( LOG_CALLER_DEFN
                                                                    empei_i_buffer_t *b,
                                                                    empei_i_handle_t *h,
                                                                    UINT32 value,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "empei_i_field_INS_Q_RESYNC_INT_I_poll_bit", value );

    /* (0x00000024 bits 23:12) field INS_Q_RESYNC_INT_I of register PMC_EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT */
    return _empei_i_reg_SYS_INS_Q_RSYNC_INT_poll_bit( LOG_CALLER_ARGS
                                                      b,
                                                      h,
                                                      EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_BIT_INS_Q_RESYNC_INT_I_MSK,
                                                      (value<<EMPEI120_I_REG_SYS_INS_Q_RSYNC_INT_BIT_INS_Q_RESYNC_INT_I_OFF),
                                                      max_count,
                                                      num_failed_polls,
                                                      delay_between_polls_in_microseconds);
}


#ifndef empei_i_field_EXT_Q_RESYNC_INT_I_set_to_clear
#define empei_i_field_EXT_Q_RESYNC_INT_I_set_to_clear( b, h, value ) \
       _empei_i_field_EXT_Q_RESYNC_INT_I_set_to_clear( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_EXT_Q_RESYNC_INT_I_set_to_clear( LOG_CALLER_DEFN
                                                                   empei_i_buffer_t *b,
                                                                   empei_i_handle_t *h,
                                                                   UINT32 value )
{
    if (value > 4095)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_EXT_Q_RESYNC_INT_I_set_to_clear", value, 4095);
    IOLOG( "%s <= 0x%08x", "empei_i_field_EXT_Q_RESYNC_INT_I_set_to_clear", value );

    /* (0x00000028 bits 11:0) field EXT_Q_RESYNC_INT_I of register PMC_EMPEI120_I_REG_EXT_Q_RSYNC_INT */
    _empei_i_reg_EXT_Q_RSYNC_INT_action_on_write_field_set( LOG_CALLER_ARGS
                                                            b,
                                                            h,
                                                            EMPEI120_I_REG_EXT_Q_RSYNC_INT_BIT_EXT_Q_RESYNC_INT_I_MSK,
                                                            EMPEI120_I_REG_EXT_Q_RSYNC_INT_BIT_EXT_Q_RESYNC_INT_I_OFF,
                                                            value);
}


#ifndef empei_i_field_EXT_Q_RESYNC_INT_I_get
#define empei_i_field_EXT_Q_RESYNC_INT_I_get( b, h ) \
       _empei_i_field_EXT_Q_RESYNC_INT_I_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_EXT_Q_RESYNC_INT_I_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000028 bits 11:0) field EXT_Q_RESYNC_INT_I of register PMC_EMPEI120_I_REG_EXT_Q_RSYNC_INT */
    reg_value = _empei_i_reg_EXT_Q_RSYNC_INT_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_EXT_Q_RSYNC_INT_BIT_EXT_Q_RESYNC_INT_I_MSK) >> EMPEI120_I_REG_EXT_Q_RSYNC_INT_BIT_EXT_Q_RESYNC_INT_I_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_EXT_Q_RESYNC_INT_I_get", value );

    return value;
}

#ifndef empei_i_field_range_EXT_Q_RESYNC_INT_I_set_to_clear
#define empei_i_field_range_EXT_Q_RESYNC_INT_I_set_to_clear( b, h, start_bit, stop_bit, value ) \
       _empei_i_field_range_EXT_Q_RESYNC_INT_I_set_to_clear( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _empei_i_field_range_EXT_Q_RESYNC_INT_I_set_to_clear( LOG_CALLER_DEFN
                                                                         empei_i_buffer_t *b,
                                                                         empei_i_handle_t *h,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_EXT_Q_RESYNC_INT_I_set_to_clear", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_EXT_Q_RESYNC_INT_I_set_to_clear", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_EXT_Q_RESYNC_INT_I_set_to_clear", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000028 bits 11:0) field EXT_Q_RESYNC_INT_I of register PMC_EMPEI120_I_REG_EXT_Q_RSYNC_INT */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000028 bits 11:0) field EXT_Q_RESYNC_INT_I of register PMC_EMPEI120_I_REG_EXT_Q_RSYNC_INT */
        _empei_i_reg_EXT_Q_RSYNC_INT_action_on_write_field_set( LOG_CALLER_ARGS
                                                                b,
                                                                h,
                                                                subfield_mask << (EMPEI120_I_REG_EXT_Q_RSYNC_INT_BIT_EXT_Q_RESYNC_INT_I_OFF + subfield_offset),
                                                                EMPEI120_I_REG_EXT_Q_RSYNC_INT_BIT_EXT_Q_RESYNC_INT_I_OFF + subfield_offset,
                                                                value >> subfield_shift);
    }
}


#ifndef empei_i_field_range_EXT_Q_RESYNC_INT_I_get
#define empei_i_field_range_EXT_Q_RESYNC_INT_I_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_EXT_Q_RESYNC_INT_I_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_EXT_Q_RESYNC_INT_I_get( LOG_CALLER_DEFN
                                                                  empei_i_buffer_t *b,
                                                                  empei_i_handle_t *h,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_EXT_Q_RESYNC_INT_I_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_EXT_Q_RESYNC_INT_I_get", stop_bit, 11 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 11) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 11;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000028 bits 11:0) field EXT_Q_RESYNC_INT_I of register PMC_EMPEI120_I_REG_EXT_Q_RSYNC_INT */
    reg_value = _empei_i_reg_EXT_Q_RSYNC_INT_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_EXT_Q_RSYNC_INT_BIT_EXT_Q_RESYNC_INT_I_MSK)
                  >> EMPEI120_I_REG_EXT_Q_RSYNC_INT_BIT_EXT_Q_RESYNC_INT_I_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_EXT_Q_RSYNC_INT_BIT_EXT_Q_RESYNC_INT_I_MSK, EMPEI120_I_REG_EXT_Q_RSYNC_INT_BIT_EXT_Q_RESYNC_INT_I_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_EXT_Q_RESYNC_INT_I_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_range_EXT_Q_RESYNC_INT_I_poll_bit
#define empei_i_field_range_EXT_Q_RESYNC_INT_I_poll_bit( b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_field_range_EXT_Q_RESYNC_INT_I_poll_bit( LOG_CALLER b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_field_range_EXT_Q_RESYNC_INT_I_poll_bit( LOG_CALLER_DEFN
                                                                          empei_i_buffer_t *b,
                                                                          empei_i_handle_t *h,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value,
                                                                          UINT32 max_count,
                                                                          UINT32 *num_failed_polls,
                                                                          UINT32 delay_between_polls_in_microseconds )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_EXT_Q_RESYNC_INT_I_poll_bit", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_EXT_Q_RESYNC_INT_I_poll_bit", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_EXT_Q_RESYNC_INT_I_poll_bit", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000028 bits 11:0) field EXT_Q_RESYNC_INT_I of register PMC_EMPEI120_I_REG_EXT_Q_RSYNC_INT */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000028 bits 11:0) field EXT_Q_RESYNC_INT_I of register PMC_EMPEI120_I_REG_EXT_Q_RSYNC_INT */
        return _empei_i_reg_EXT_Q_RSYNC_INT_poll_bit( LOG_CALLER_ARGS
                                                      b,
                                                      h,
                                                      subfield_mask << (EMPEI120_I_REG_EXT_Q_RSYNC_INT_BIT_EXT_Q_RESYNC_INT_I_OFF + subfield_offset),
                                                      value << (EMPEI120_I_REG_EXT_Q_RSYNC_INT_BIT_EXT_Q_RESYNC_INT_I_OFF + subfield_offset),
                                                      max_count,
                                                      num_failed_polls,
                                                      delay_between_polls_in_microseconds);
    }
    return PMC_ERR_INVALID_PARAMETERS;
}


#ifndef empei_i_field_EXT_Q_RESYNC_INT_I_poll_bit
#define empei_i_field_EXT_Q_RESYNC_INT_I_poll_bit( b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_field_EXT_Q_RESYNC_INT_I_poll_bit( LOG_CALLER b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_field_EXT_Q_RESYNC_INT_I_poll_bit( LOG_CALLER_DEFN
                                                                    empei_i_buffer_t *b,
                                                                    empei_i_handle_t *h,
                                                                    UINT32 value,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "empei_i_field_EXT_Q_RESYNC_INT_I_poll_bit", value );

    /* (0x00000028 bits 11:0) field EXT_Q_RESYNC_INT_I of register PMC_EMPEI120_I_REG_EXT_Q_RSYNC_INT */
    return _empei_i_reg_EXT_Q_RSYNC_INT_poll_bit( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  EMPEI120_I_REG_EXT_Q_RSYNC_INT_BIT_EXT_Q_RESYNC_INT_I_MSK,
                                                  (value<<EMPEI120_I_REG_EXT_Q_RSYNC_INT_BIT_EXT_Q_RESYNC_INT_I_OFF),
                                                  max_count,
                                                  num_failed_polls,
                                                  delay_between_polls_in_microseconds);
}


/*
 * ==================================================================================
 *                Parameter Access Functions for Paramset int_value
 * ==================================================================================
 */

#ifndef empei_i_field_INS_Q_OVERFLOW_INT_V_get
#define empei_i_field_INS_Q_OVERFLOW_INT_V_get( b, h ) \
       _empei_i_field_INS_Q_OVERFLOW_INT_V_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_INS_Q_OVERFLOW_INT_V_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000058 bits 11:0) field INS_Q_OVERFLOW_INT_V of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT_VAL */
    reg_value = _empei_i_reg_INS_EXT_OF_INT_VAL_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_INS_EXT_OF_INT_VAL_BIT_INS_Q_OVERFLOW_INT_V_MSK) >> EMPEI120_I_REG_INS_EXT_OF_INT_VAL_BIT_INS_Q_OVERFLOW_INT_V_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_INS_Q_OVERFLOW_INT_V_get", value );

    return value;
}

#ifndef empei_i_field_range_INS_Q_OVERFLOW_INT_V_get
#define empei_i_field_range_INS_Q_OVERFLOW_INT_V_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_INS_Q_OVERFLOW_INT_V_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_INS_Q_OVERFLOW_INT_V_get( LOG_CALLER_DEFN
                                                                    empei_i_buffer_t *b,
                                                                    empei_i_handle_t *h,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INS_Q_OVERFLOW_INT_V_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INS_Q_OVERFLOW_INT_V_get", stop_bit, 11 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 11) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 11;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000058 bits 11:0) field INS_Q_OVERFLOW_INT_V of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT_VAL */
    reg_value = _empei_i_reg_INS_EXT_OF_INT_VAL_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_INS_EXT_OF_INT_VAL_BIT_INS_Q_OVERFLOW_INT_V_MSK)
                  >> EMPEI120_I_REG_INS_EXT_OF_INT_VAL_BIT_INS_Q_OVERFLOW_INT_V_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_INS_EXT_OF_INT_VAL_BIT_INS_Q_OVERFLOW_INT_V_MSK, EMPEI120_I_REG_INS_EXT_OF_INT_VAL_BIT_INS_Q_OVERFLOW_INT_V_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INS_Q_OVERFLOW_INT_V_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_range_INS_Q_OVERFLOW_INT_V_poll_bit
#define empei_i_field_range_INS_Q_OVERFLOW_INT_V_poll_bit( b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_field_range_INS_Q_OVERFLOW_INT_V_poll_bit( LOG_CALLER b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_field_range_INS_Q_OVERFLOW_INT_V_poll_bit( LOG_CALLER_DEFN
                                                                            empei_i_buffer_t *b,
                                                                            empei_i_handle_t *h,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INS_Q_OVERFLOW_INT_V_poll_bit", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INS_Q_OVERFLOW_INT_V_poll_bit", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INS_Q_OVERFLOW_INT_V_poll_bit", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000058 bits 11:0) field INS_Q_OVERFLOW_INT_V of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT_VAL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000058 bits 11:0) field INS_Q_OVERFLOW_INT_V of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT_VAL */
        return _empei_i_reg_INS_EXT_OF_INT_VAL_poll_bit( LOG_CALLER_ARGS
                                                         b,
                                                         h,
                                                         subfield_mask << (EMPEI120_I_REG_INS_EXT_OF_INT_VAL_BIT_INS_Q_OVERFLOW_INT_V_OFF + subfield_offset),
                                                         value << (EMPEI120_I_REG_INS_EXT_OF_INT_VAL_BIT_INS_Q_OVERFLOW_INT_V_OFF + subfield_offset),
                                                         max_count,
                                                         num_failed_polls,
                                                         delay_between_polls_in_microseconds);
    }
    return PMC_ERR_INVALID_PARAMETERS;
}


#ifndef empei_i_field_INS_Q_OVERFLOW_INT_V_poll_bit
#define empei_i_field_INS_Q_OVERFLOW_INT_V_poll_bit( b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_field_INS_Q_OVERFLOW_INT_V_poll_bit( LOG_CALLER b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_field_INS_Q_OVERFLOW_INT_V_poll_bit( LOG_CALLER_DEFN
                                                                      empei_i_buffer_t *b,
                                                                      empei_i_handle_t *h,
                                                                      UINT32 value,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "empei_i_field_INS_Q_OVERFLOW_INT_V_poll_bit", value );

    /* (0x00000058 bits 11:0) field INS_Q_OVERFLOW_INT_V of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT_VAL */
    return _empei_i_reg_INS_EXT_OF_INT_VAL_poll_bit( LOG_CALLER_ARGS
                                                     b,
                                                     h,
                                                     EMPEI120_I_REG_INS_EXT_OF_INT_VAL_BIT_INS_Q_OVERFLOW_INT_V_MSK,
                                                     (value<<EMPEI120_I_REG_INS_EXT_OF_INT_VAL_BIT_INS_Q_OVERFLOW_INT_V_OFF),
                                                     max_count,
                                                     num_failed_polls,
                                                     delay_between_polls_in_microseconds);
}


#ifndef empei_i_field_EXT_Q_OVERFLOW_INT_V_get
#define empei_i_field_EXT_Q_OVERFLOW_INT_V_get( b, h ) \
       _empei_i_field_EXT_Q_OVERFLOW_INT_V_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_EXT_Q_OVERFLOW_INT_V_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000058 bits 23:12) field EXT_Q_OVERFLOW_INT_V of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT_VAL */
    reg_value = _empei_i_reg_INS_EXT_OF_INT_VAL_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_INS_EXT_OF_INT_VAL_BIT_EXT_Q_OVERFLOW_INT_V_MSK) >> EMPEI120_I_REG_INS_EXT_OF_INT_VAL_BIT_EXT_Q_OVERFLOW_INT_V_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_EXT_Q_OVERFLOW_INT_V_get", value );

    return value;
}

#ifndef empei_i_field_range_EXT_Q_OVERFLOW_INT_V_get
#define empei_i_field_range_EXT_Q_OVERFLOW_INT_V_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_EXT_Q_OVERFLOW_INT_V_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_EXT_Q_OVERFLOW_INT_V_get( LOG_CALLER_DEFN
                                                                    empei_i_buffer_t *b,
                                                                    empei_i_handle_t *h,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_EXT_Q_OVERFLOW_INT_V_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_EXT_Q_OVERFLOW_INT_V_get", stop_bit, 11 );
    if (start_bit > 12) {
        subfield_offset = start_bit - 12;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 12 - start_bit;
        subfield_start_bit = 12;
    }
    if (stop_bit < 23) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 23;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000058 bits 23:12) field EXT_Q_OVERFLOW_INT_V of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT_VAL */
    reg_value = _empei_i_reg_INS_EXT_OF_INT_VAL_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_INS_EXT_OF_INT_VAL_BIT_EXT_Q_OVERFLOW_INT_V_MSK)
                  >> EMPEI120_I_REG_INS_EXT_OF_INT_VAL_BIT_EXT_Q_OVERFLOW_INT_V_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_INS_EXT_OF_INT_VAL_BIT_EXT_Q_OVERFLOW_INT_V_MSK, EMPEI120_I_REG_INS_EXT_OF_INT_VAL_BIT_EXT_Q_OVERFLOW_INT_V_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_EXT_Q_OVERFLOW_INT_V_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_range_EXT_Q_OVERFLOW_INT_V_poll_bit
#define empei_i_field_range_EXT_Q_OVERFLOW_INT_V_poll_bit( b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_field_range_EXT_Q_OVERFLOW_INT_V_poll_bit( LOG_CALLER b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_field_range_EXT_Q_OVERFLOW_INT_V_poll_bit( LOG_CALLER_DEFN
                                                                            empei_i_buffer_t *b,
                                                                            empei_i_handle_t *h,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_EXT_Q_OVERFLOW_INT_V_poll_bit", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_EXT_Q_OVERFLOW_INT_V_poll_bit", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_EXT_Q_OVERFLOW_INT_V_poll_bit", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000058 bits 23:12) field EXT_Q_OVERFLOW_INT_V of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT_VAL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 12) {
            subfield_offset = start_bit - 12;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  12 - start_bit;
            subfield_start_bit = 12;
        }
        if (stop_bit < 23) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 23;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000058 bits 23:12) field EXT_Q_OVERFLOW_INT_V of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT_VAL */
        return _empei_i_reg_INS_EXT_OF_INT_VAL_poll_bit( LOG_CALLER_ARGS
                                                         b,
                                                         h,
                                                         subfield_mask << (EMPEI120_I_REG_INS_EXT_OF_INT_VAL_BIT_EXT_Q_OVERFLOW_INT_V_OFF + subfield_offset),
                                                         value << (EMPEI120_I_REG_INS_EXT_OF_INT_VAL_BIT_EXT_Q_OVERFLOW_INT_V_OFF + subfield_offset),
                                                         max_count,
                                                         num_failed_polls,
                                                         delay_between_polls_in_microseconds);
    }
    return PMC_ERR_INVALID_PARAMETERS;
}


#ifndef empei_i_field_EXT_Q_OVERFLOW_INT_V_poll_bit
#define empei_i_field_EXT_Q_OVERFLOW_INT_V_poll_bit( b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_field_EXT_Q_OVERFLOW_INT_V_poll_bit( LOG_CALLER b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_field_EXT_Q_OVERFLOW_INT_V_poll_bit( LOG_CALLER_DEFN
                                                                      empei_i_buffer_t *b,
                                                                      empei_i_handle_t *h,
                                                                      UINT32 value,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "empei_i_field_EXT_Q_OVERFLOW_INT_V_poll_bit", value );

    /* (0x00000058 bits 23:12) field EXT_Q_OVERFLOW_INT_V of register PMC_EMPEI120_I_REG_INS_EXT_OF_INT_VAL */
    return _empei_i_reg_INS_EXT_OF_INT_VAL_poll_bit( LOG_CALLER_ARGS
                                                     b,
                                                     h,
                                                     EMPEI120_I_REG_INS_EXT_OF_INT_VAL_BIT_EXT_Q_OVERFLOW_INT_V_MSK,
                                                     (value<<EMPEI120_I_REG_INS_EXT_OF_INT_VAL_BIT_EXT_Q_OVERFLOW_INT_V_OFF),
                                                     max_count,
                                                     num_failed_polls,
                                                     delay_between_polls_in_microseconds);
}


#ifndef empei_i_field_SYS_Q_OVERFLOW_INT_V_get
#define empei_i_field_SYS_Q_OVERFLOW_INT_V_get( b, h ) \
       _empei_i_field_SYS_Q_OVERFLOW_INT_V_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_SYS_Q_OVERFLOW_INT_V_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000005c bits 11:0) field SYS_Q_OVERFLOW_INT_V of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT_VAL */
    reg_value = _empei_i_reg_SYS_INTL_OF_INT_VAL_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_SYS_INTL_OF_INT_VAL_BIT_SYS_Q_OVERFLOW_INT_V_MSK) >> EMPEI120_I_REG_SYS_INTL_OF_INT_VAL_BIT_SYS_Q_OVERFLOW_INT_V_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_SYS_Q_OVERFLOW_INT_V_get", value );

    return value;
}

#ifndef empei_i_field_range_SYS_Q_OVERFLOW_INT_V_get
#define empei_i_field_range_SYS_Q_OVERFLOW_INT_V_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_SYS_Q_OVERFLOW_INT_V_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_SYS_Q_OVERFLOW_INT_V_get( LOG_CALLER_DEFN
                                                                    empei_i_buffer_t *b,
                                                                    empei_i_handle_t *h,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_SYS_Q_OVERFLOW_INT_V_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_SYS_Q_OVERFLOW_INT_V_get", stop_bit, 11 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 11) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 11;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000005c bits 11:0) field SYS_Q_OVERFLOW_INT_V of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT_VAL */
    reg_value = _empei_i_reg_SYS_INTL_OF_INT_VAL_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_SYS_INTL_OF_INT_VAL_BIT_SYS_Q_OVERFLOW_INT_V_MSK)
                  >> EMPEI120_I_REG_SYS_INTL_OF_INT_VAL_BIT_SYS_Q_OVERFLOW_INT_V_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_SYS_INTL_OF_INT_VAL_BIT_SYS_Q_OVERFLOW_INT_V_MSK, EMPEI120_I_REG_SYS_INTL_OF_INT_VAL_BIT_SYS_Q_OVERFLOW_INT_V_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_SYS_Q_OVERFLOW_INT_V_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_range_SYS_Q_OVERFLOW_INT_V_poll_bit
#define empei_i_field_range_SYS_Q_OVERFLOW_INT_V_poll_bit( b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_field_range_SYS_Q_OVERFLOW_INT_V_poll_bit( LOG_CALLER b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_field_range_SYS_Q_OVERFLOW_INT_V_poll_bit( LOG_CALLER_DEFN
                                                                            empei_i_buffer_t *b,
                                                                            empei_i_handle_t *h,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_SYS_Q_OVERFLOW_INT_V_poll_bit", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_SYS_Q_OVERFLOW_INT_V_poll_bit", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_SYS_Q_OVERFLOW_INT_V_poll_bit", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x0000005c bits 11:0) field SYS_Q_OVERFLOW_INT_V of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT_VAL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000005c bits 11:0) field SYS_Q_OVERFLOW_INT_V of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT_VAL */
        return _empei_i_reg_SYS_INTL_OF_INT_VAL_poll_bit( LOG_CALLER_ARGS
                                                          b,
                                                          h,
                                                          subfield_mask << (EMPEI120_I_REG_SYS_INTL_OF_INT_VAL_BIT_SYS_Q_OVERFLOW_INT_V_OFF + subfield_offset),
                                                          value << (EMPEI120_I_REG_SYS_INTL_OF_INT_VAL_BIT_SYS_Q_OVERFLOW_INT_V_OFF + subfield_offset),
                                                          max_count,
                                                          num_failed_polls,
                                                          delay_between_polls_in_microseconds);
    }
    return PMC_ERR_INVALID_PARAMETERS;
}


#ifndef empei_i_field_SYS_Q_OVERFLOW_INT_V_poll_bit
#define empei_i_field_SYS_Q_OVERFLOW_INT_V_poll_bit( b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_field_SYS_Q_OVERFLOW_INT_V_poll_bit( LOG_CALLER b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_field_SYS_Q_OVERFLOW_INT_V_poll_bit( LOG_CALLER_DEFN
                                                                      empei_i_buffer_t *b,
                                                                      empei_i_handle_t *h,
                                                                      UINT32 value,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "empei_i_field_SYS_Q_OVERFLOW_INT_V_poll_bit", value );

    /* (0x0000005c bits 11:0) field SYS_Q_OVERFLOW_INT_V of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT_VAL */
    return _empei_i_reg_SYS_INTL_OF_INT_VAL_poll_bit( LOG_CALLER_ARGS
                                                      b,
                                                      h,
                                                      EMPEI120_I_REG_SYS_INTL_OF_INT_VAL_BIT_SYS_Q_OVERFLOW_INT_V_MSK,
                                                      (value<<EMPEI120_I_REG_SYS_INTL_OF_INT_VAL_BIT_SYS_Q_OVERFLOW_INT_V_OFF),
                                                      max_count,
                                                      num_failed_polls,
                                                      delay_between_polls_in_microseconds);
}


#ifndef empei_i_field_INTL_Q_OVERFLOW_INT_V_get
#define empei_i_field_INTL_Q_OVERFLOW_INT_V_get( b, h ) \
       _empei_i_field_INTL_Q_OVERFLOW_INT_V_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_INTL_Q_OVERFLOW_INT_V_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000005c bits 23:12) field INTL_Q_OVERFLOW_INT_V of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT_VAL */
    reg_value = _empei_i_reg_SYS_INTL_OF_INT_VAL_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_SYS_INTL_OF_INT_VAL_BIT_INTL_Q_OVERFLOW_INT_V_MSK) >> EMPEI120_I_REG_SYS_INTL_OF_INT_VAL_BIT_INTL_Q_OVERFLOW_INT_V_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_INTL_Q_OVERFLOW_INT_V_get", value );

    return value;
}

#ifndef empei_i_field_range_INTL_Q_OVERFLOW_INT_V_get
#define empei_i_field_range_INTL_Q_OVERFLOW_INT_V_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_INTL_Q_OVERFLOW_INT_V_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_INTL_Q_OVERFLOW_INT_V_get( LOG_CALLER_DEFN
                                                                     empei_i_buffer_t *b,
                                                                     empei_i_handle_t *h,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INTL_Q_OVERFLOW_INT_V_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INTL_Q_OVERFLOW_INT_V_get", stop_bit, 11 );
    if (start_bit > 12) {
        subfield_offset = start_bit - 12;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 12 - start_bit;
        subfield_start_bit = 12;
    }
    if (stop_bit < 23) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 23;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000005c bits 23:12) field INTL_Q_OVERFLOW_INT_V of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT_VAL */
    reg_value = _empei_i_reg_SYS_INTL_OF_INT_VAL_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_SYS_INTL_OF_INT_VAL_BIT_INTL_Q_OVERFLOW_INT_V_MSK)
                  >> EMPEI120_I_REG_SYS_INTL_OF_INT_VAL_BIT_INTL_Q_OVERFLOW_INT_V_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_SYS_INTL_OF_INT_VAL_BIT_INTL_Q_OVERFLOW_INT_V_MSK, EMPEI120_I_REG_SYS_INTL_OF_INT_VAL_BIT_INTL_Q_OVERFLOW_INT_V_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INTL_Q_OVERFLOW_INT_V_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_range_INTL_Q_OVERFLOW_INT_V_poll_bit
#define empei_i_field_range_INTL_Q_OVERFLOW_INT_V_poll_bit( b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_field_range_INTL_Q_OVERFLOW_INT_V_poll_bit( LOG_CALLER b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_field_range_INTL_Q_OVERFLOW_INT_V_poll_bit( LOG_CALLER_DEFN
                                                                             empei_i_buffer_t *b,
                                                                             empei_i_handle_t *h,
                                                                             UINT32 start_bit,
                                                                             UINT32 stop_bit,
                                                                             UINT32 value,
                                                                             UINT32 max_count,
                                                                             UINT32 *num_failed_polls,
                                                                             UINT32 delay_between_polls_in_microseconds )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INTL_Q_OVERFLOW_INT_V_poll_bit", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INTL_Q_OVERFLOW_INT_V_poll_bit", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INTL_Q_OVERFLOW_INT_V_poll_bit", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x0000005c bits 23:12) field INTL_Q_OVERFLOW_INT_V of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT_VAL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 12) {
            subfield_offset = start_bit - 12;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  12 - start_bit;
            subfield_start_bit = 12;
        }
        if (stop_bit < 23) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 23;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000005c bits 23:12) field INTL_Q_OVERFLOW_INT_V of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT_VAL */
        return _empei_i_reg_SYS_INTL_OF_INT_VAL_poll_bit( LOG_CALLER_ARGS
                                                          b,
                                                          h,
                                                          subfield_mask << (EMPEI120_I_REG_SYS_INTL_OF_INT_VAL_BIT_INTL_Q_OVERFLOW_INT_V_OFF + subfield_offset),
                                                          value << (EMPEI120_I_REG_SYS_INTL_OF_INT_VAL_BIT_INTL_Q_OVERFLOW_INT_V_OFF + subfield_offset),
                                                          max_count,
                                                          num_failed_polls,
                                                          delay_between_polls_in_microseconds);
    }
    return PMC_ERR_INVALID_PARAMETERS;
}


#ifndef empei_i_field_INTL_Q_OVERFLOW_INT_V_poll_bit
#define empei_i_field_INTL_Q_OVERFLOW_INT_V_poll_bit( b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_field_INTL_Q_OVERFLOW_INT_V_poll_bit( LOG_CALLER b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_field_INTL_Q_OVERFLOW_INT_V_poll_bit( LOG_CALLER_DEFN
                                                                       empei_i_buffer_t *b,
                                                                       empei_i_handle_t *h,
                                                                       UINT32 value,
                                                                       UINT32 max_count,
                                                                       UINT32 *num_failed_polls,
                                                                       UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "empei_i_field_INTL_Q_OVERFLOW_INT_V_poll_bit", value );

    /* (0x0000005c bits 23:12) field INTL_Q_OVERFLOW_INT_V of register PMC_EMPEI120_I_REG_SYS_INTL_OF_INT_VAL */
    return _empei_i_reg_SYS_INTL_OF_INT_VAL_poll_bit( LOG_CALLER_ARGS
                                                      b,
                                                      h,
                                                      EMPEI120_I_REG_SYS_INTL_OF_INT_VAL_BIT_INTL_Q_OVERFLOW_INT_V_MSK,
                                                      (value<<EMPEI120_I_REG_SYS_INTL_OF_INT_VAL_BIT_INTL_Q_OVERFLOW_INT_V_OFF),
                                                      max_count,
                                                      num_failed_polls,
                                                      delay_between_polls_in_microseconds);
}


#ifndef empei_i_field_SYS_Q_UNDERRUN_INT_V_get
#define empei_i_field_SYS_Q_UNDERRUN_INT_V_get( b, h ) \
       _empei_i_field_SYS_Q_UNDERRUN_INT_V_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_SYS_Q_UNDERRUN_INT_V_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000060 bits 11:0) field SYS_Q_UNDERRUN_INT_V of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT_VAL */
    reg_value = _empei_i_reg_SYS_INS_UR_INT_VAL_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_SYS_INS_UR_INT_VAL_BIT_SYS_Q_UNDERRUN_INT_V_MSK) >> EMPEI120_I_REG_SYS_INS_UR_INT_VAL_BIT_SYS_Q_UNDERRUN_INT_V_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_SYS_Q_UNDERRUN_INT_V_get", value );

    return value;
}

#ifndef empei_i_field_range_SYS_Q_UNDERRUN_INT_V_get
#define empei_i_field_range_SYS_Q_UNDERRUN_INT_V_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_SYS_Q_UNDERRUN_INT_V_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_SYS_Q_UNDERRUN_INT_V_get( LOG_CALLER_DEFN
                                                                    empei_i_buffer_t *b,
                                                                    empei_i_handle_t *h,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_SYS_Q_UNDERRUN_INT_V_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_SYS_Q_UNDERRUN_INT_V_get", stop_bit, 11 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 11) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 11;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000060 bits 11:0) field SYS_Q_UNDERRUN_INT_V of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT_VAL */
    reg_value = _empei_i_reg_SYS_INS_UR_INT_VAL_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_SYS_INS_UR_INT_VAL_BIT_SYS_Q_UNDERRUN_INT_V_MSK)
                  >> EMPEI120_I_REG_SYS_INS_UR_INT_VAL_BIT_SYS_Q_UNDERRUN_INT_V_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_SYS_INS_UR_INT_VAL_BIT_SYS_Q_UNDERRUN_INT_V_MSK, EMPEI120_I_REG_SYS_INS_UR_INT_VAL_BIT_SYS_Q_UNDERRUN_INT_V_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_SYS_Q_UNDERRUN_INT_V_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_range_SYS_Q_UNDERRUN_INT_V_poll_bit
#define empei_i_field_range_SYS_Q_UNDERRUN_INT_V_poll_bit( b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_field_range_SYS_Q_UNDERRUN_INT_V_poll_bit( LOG_CALLER b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_field_range_SYS_Q_UNDERRUN_INT_V_poll_bit( LOG_CALLER_DEFN
                                                                            empei_i_buffer_t *b,
                                                                            empei_i_handle_t *h,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_SYS_Q_UNDERRUN_INT_V_poll_bit", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_SYS_Q_UNDERRUN_INT_V_poll_bit", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_SYS_Q_UNDERRUN_INT_V_poll_bit", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000060 bits 11:0) field SYS_Q_UNDERRUN_INT_V of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT_VAL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000060 bits 11:0) field SYS_Q_UNDERRUN_INT_V of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT_VAL */
        return _empei_i_reg_SYS_INS_UR_INT_VAL_poll_bit( LOG_CALLER_ARGS
                                                         b,
                                                         h,
                                                         subfield_mask << (EMPEI120_I_REG_SYS_INS_UR_INT_VAL_BIT_SYS_Q_UNDERRUN_INT_V_OFF + subfield_offset),
                                                         value << (EMPEI120_I_REG_SYS_INS_UR_INT_VAL_BIT_SYS_Q_UNDERRUN_INT_V_OFF + subfield_offset),
                                                         max_count,
                                                         num_failed_polls,
                                                         delay_between_polls_in_microseconds);
    }
    return PMC_ERR_INVALID_PARAMETERS;
}


#ifndef empei_i_field_SYS_Q_UNDERRUN_INT_V_poll_bit
#define empei_i_field_SYS_Q_UNDERRUN_INT_V_poll_bit( b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_field_SYS_Q_UNDERRUN_INT_V_poll_bit( LOG_CALLER b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_field_SYS_Q_UNDERRUN_INT_V_poll_bit( LOG_CALLER_DEFN
                                                                      empei_i_buffer_t *b,
                                                                      empei_i_handle_t *h,
                                                                      UINT32 value,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "empei_i_field_SYS_Q_UNDERRUN_INT_V_poll_bit", value );

    /* (0x00000060 bits 11:0) field SYS_Q_UNDERRUN_INT_V of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT_VAL */
    return _empei_i_reg_SYS_INS_UR_INT_VAL_poll_bit( LOG_CALLER_ARGS
                                                     b,
                                                     h,
                                                     EMPEI120_I_REG_SYS_INS_UR_INT_VAL_BIT_SYS_Q_UNDERRUN_INT_V_MSK,
                                                     (value<<EMPEI120_I_REG_SYS_INS_UR_INT_VAL_BIT_SYS_Q_UNDERRUN_INT_V_OFF),
                                                     max_count,
                                                     num_failed_polls,
                                                     delay_between_polls_in_microseconds);
}


#ifndef empei_i_field_INS_Q_UNDERRUN_INT_V_get
#define empei_i_field_INS_Q_UNDERRUN_INT_V_get( b, h ) \
       _empei_i_field_INS_Q_UNDERRUN_INT_V_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_INS_Q_UNDERRUN_INT_V_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000060 bits 23:12) field INS_Q_UNDERRUN_INT_V of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT_VAL */
    reg_value = _empei_i_reg_SYS_INS_UR_INT_VAL_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_SYS_INS_UR_INT_VAL_BIT_INS_Q_UNDERRUN_INT_V_MSK) >> EMPEI120_I_REG_SYS_INS_UR_INT_VAL_BIT_INS_Q_UNDERRUN_INT_V_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_INS_Q_UNDERRUN_INT_V_get", value );

    return value;
}

#ifndef empei_i_field_range_INS_Q_UNDERRUN_INT_V_get
#define empei_i_field_range_INS_Q_UNDERRUN_INT_V_get( b, h, start_bit, stop_bit ) \
       _empei_i_field_range_INS_Q_UNDERRUN_INT_V_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_field_range_INS_Q_UNDERRUN_INT_V_get( LOG_CALLER_DEFN
                                                                    empei_i_buffer_t *b,
                                                                    empei_i_handle_t *h,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INS_Q_UNDERRUN_INT_V_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INS_Q_UNDERRUN_INT_V_get", stop_bit, 11 );
    if (start_bit > 12) {
        subfield_offset = start_bit - 12;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 12 - start_bit;
        subfield_start_bit = 12;
    }
    if (stop_bit < 23) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 23;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000060 bits 23:12) field INS_Q_UNDERRUN_INT_V of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT_VAL */
    reg_value = _empei_i_reg_SYS_INS_UR_INT_VAL_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & EMPEI120_I_REG_SYS_INS_UR_INT_VAL_BIT_INS_Q_UNDERRUN_INT_V_MSK)
                  >> EMPEI120_I_REG_SYS_INS_UR_INT_VAL_BIT_INS_Q_UNDERRUN_INT_V_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, EMPEI120_I_REG_SYS_INS_UR_INT_VAL_BIT_INS_Q_UNDERRUN_INT_V_MSK, EMPEI120_I_REG_SYS_INS_UR_INT_VAL_BIT_INS_Q_UNDERRUN_INT_V_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INS_Q_UNDERRUN_INT_V_get", start_bit, stop_bit, value );

    return value;
}

#ifndef empei_i_field_range_INS_Q_UNDERRUN_INT_V_poll_bit
#define empei_i_field_range_INS_Q_UNDERRUN_INT_V_poll_bit( b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_field_range_INS_Q_UNDERRUN_INT_V_poll_bit( LOG_CALLER b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_field_range_INS_Q_UNDERRUN_INT_V_poll_bit( LOG_CALLER_DEFN
                                                                            empei_i_buffer_t *b,
                                                                            empei_i_handle_t *h,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit,
                                                                            UINT32 value,
                                                                            UINT32 max_count,
                                                                            UINT32 *num_failed_polls,
                                                                            UINT32 delay_between_polls_in_microseconds )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "empei_i_field_range_INS_Q_UNDERRUN_INT_V_poll_bit", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "empei_i_field_range_INS_Q_UNDERRUN_INT_V_poll_bit", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "empei_i_field_range_INS_Q_UNDERRUN_INT_V_poll_bit", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000060 bits 23:12) field INS_Q_UNDERRUN_INT_V of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT_VAL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 12) {
            subfield_offset = start_bit - 12;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  12 - start_bit;
            subfield_start_bit = 12;
        }
        if (stop_bit < 23) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 23;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000060 bits 23:12) field INS_Q_UNDERRUN_INT_V of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT_VAL */
        return _empei_i_reg_SYS_INS_UR_INT_VAL_poll_bit( LOG_CALLER_ARGS
                                                         b,
                                                         h,
                                                         subfield_mask << (EMPEI120_I_REG_SYS_INS_UR_INT_VAL_BIT_INS_Q_UNDERRUN_INT_V_OFF + subfield_offset),
                                                         value << (EMPEI120_I_REG_SYS_INS_UR_INT_VAL_BIT_INS_Q_UNDERRUN_INT_V_OFF + subfield_offset),
                                                         max_count,
                                                         num_failed_polls,
                                                         delay_between_polls_in_microseconds);
    }
    return PMC_ERR_INVALID_PARAMETERS;
}


#ifndef empei_i_field_INS_Q_UNDERRUN_INT_V_poll_bit
#define empei_i_field_INS_Q_UNDERRUN_INT_V_poll_bit( b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _empei_i_field_INS_Q_UNDERRUN_INT_V_poll_bit( LOG_CALLER b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _empei_i_field_INS_Q_UNDERRUN_INT_V_poll_bit( LOG_CALLER_DEFN
                                                                      empei_i_buffer_t *b,
                                                                      empei_i_handle_t *h,
                                                                      UINT32 value,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "empei_i_field_INS_Q_UNDERRUN_INT_V_poll_bit", value );

    /* (0x00000060 bits 23:12) field INS_Q_UNDERRUN_INT_V of register PMC_EMPEI120_I_REG_SYS_INS_UR_INT_VAL */
    return _empei_i_reg_SYS_INS_UR_INT_VAL_poll_bit( LOG_CALLER_ARGS
                                                     b,
                                                     h,
                                                     EMPEI120_I_REG_SYS_INS_UR_INT_VAL_BIT_INS_Q_UNDERRUN_INT_V_MSK,
                                                     (value<<EMPEI120_I_REG_SYS_INS_UR_INT_VAL_BIT_INS_Q_UNDERRUN_INT_V_OFF),
                                                     max_count,
                                                     num_failed_polls,
                                                     delay_between_polls_in_microseconds);
}


/*
 * ==================================================================================
 *           Parameter Access Functions for Paramset status_N_burstsize12
 * ==================================================================================
 */

#ifndef empei_i_lfield_EXT_PMON_DRP_CNT_get
#define empei_i_lfield_EXT_PMON_DRP_CNT_get( b, h, value ) \
       _empei_i_lfield_EXT_PMON_DRP_CNT_get( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_lfield_EXT_PMON_DRP_CNT_get( LOG_CALLER_DEFN
                                                         empei_i_buffer_t *b,
                                                         empei_i_handle_t *h,
                                                         UINT32 value[12] )
{
    IOLOG( "%s ", "empei_i_lfield_EXT_PMON_DRP_CNT_get");
    _empei_i_reg_EXT_PMON_DRP_CNT_array_burst_read( LOG_CALLER_ARGS
                                                    b,
                                                    h,
                                                    0,
                                                    12,
                                                    (UINT32 *)value);
}


#ifndef empei_i_lfield_range_EXT_PMON_DRP_CNT_get
#define empei_i_lfield_range_EXT_PMON_DRP_CNT_get( b, h, start_bit, stop_bit ) \
       _empei_i_lfield_range_EXT_PMON_DRP_CNT_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_lfield_range_EXT_PMON_DRP_CNT_get( LOG_CALLER_DEFN
                                                                 empei_i_buffer_t *b,
                                                                 empei_i_handle_t *h,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = 0xffffffff >> (32-num_bits);
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "empei_i_lfield_range_EXT_PMON_DRP_CNT_get", start_bit, stop_bit );
    }
    reg_value = _empei_i_reg_EXT_PMON_DRP_CNT_array_read( LOG_CALLER_ARGS
                                                          b,
                                                          h,
                                                          word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "empei_i_lfield_range_EXT_PMON_DRP_CNT_get", start_bit, stop_bit, value );
    return value;
}


#ifndef empei_i_lfield_SYS_PMON_DRP_CNT_get
#define empei_i_lfield_SYS_PMON_DRP_CNT_get( b, h, value ) \
       _empei_i_lfield_SYS_PMON_DRP_CNT_get( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_lfield_SYS_PMON_DRP_CNT_get( LOG_CALLER_DEFN
                                                         empei_i_buffer_t *b,
                                                         empei_i_handle_t *h,
                                                         UINT32 value[12] )
{
    IOLOG( "%s ", "empei_i_lfield_SYS_PMON_DRP_CNT_get");
    _empei_i_reg_SYS_PMON_DRP_CNT_array_burst_read( LOG_CALLER_ARGS
                                                    b,
                                                    h,
                                                    0,
                                                    12,
                                                    (UINT32 *)value);
}


#ifndef empei_i_lfield_range_SYS_PMON_DRP_CNT_get
#define empei_i_lfield_range_SYS_PMON_DRP_CNT_get( b, h, start_bit, stop_bit ) \
       _empei_i_lfield_range_SYS_PMON_DRP_CNT_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_lfield_range_SYS_PMON_DRP_CNT_get( LOG_CALLER_DEFN
                                                                 empei_i_buffer_t *b,
                                                                 empei_i_handle_t *h,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = 0xffffffff >> (32-num_bits);
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "empei_i_lfield_range_SYS_PMON_DRP_CNT_get", start_bit, stop_bit );
    }
    reg_value = _empei_i_reg_SYS_PMON_DRP_CNT_array_read( LOG_CALLER_ARGS
                                                          b,
                                                          h,
                                                          word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "empei_i_lfield_range_SYS_PMON_DRP_CNT_get", start_bit, stop_bit, value );
    return value;
}


/*
 * ==================================================================================
 *           Parameter Access Functions for Paramset status_N_burstsize24
 * ==================================================================================
 */

#ifndef empei_i_lfield_INS_PMON_PKT_CNT_get
#define empei_i_lfield_INS_PMON_PKT_CNT_get( b, h, value ) \
       _empei_i_lfield_INS_PMON_PKT_CNT_get( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_lfield_INS_PMON_PKT_CNT_get( LOG_CALLER_DEFN
                                                         empei_i_buffer_t *b,
                                                         empei_i_handle_t *h,
                                                         UINT32 value[24] )
{
    IOLOG( "%s ", "empei_i_lfield_INS_PMON_PKT_CNT_get");
    _empei_i_reg_INS_PMON_PKT_CNT_array_burst_read( LOG_CALLER_ARGS
                                                    b,
                                                    h,
                                                    0,
                                                    24,
                                                    (UINT32 *)value);
}


#ifndef empei_i_lfield_range_INS_PMON_PKT_CNT_get
#define empei_i_lfield_range_INS_PMON_PKT_CNT_get( b, h, start_bit, stop_bit ) \
       _empei_i_lfield_range_INS_PMON_PKT_CNT_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_lfield_range_INS_PMON_PKT_CNT_get( LOG_CALLER_DEFN
                                                                 empei_i_buffer_t *b,
                                                                 empei_i_handle_t *h,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = 0xffffffff >> (32-num_bits);
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "empei_i_lfield_range_INS_PMON_PKT_CNT_get", start_bit, stop_bit );
    }
    reg_value = _empei_i_reg_INS_PMON_PKT_CNT_array_read( LOG_CALLER_ARGS
                                                          b,
                                                          h,
                                                          word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "empei_i_lfield_range_INS_PMON_PKT_CNT_get", start_bit, stop_bit, value );
    return value;
}


/*
 * ==================================================================================
 *           Parameter Access Functions for Paramset status_N_burstsize64
 * ==================================================================================
 */

#ifndef empei_i_lfield_EXT_PMON_PKT_CNT_get
#define empei_i_lfield_EXT_PMON_PKT_CNT_get( b, h, value ) \
       _empei_i_lfield_EXT_PMON_PKT_CNT_get( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_lfield_EXT_PMON_PKT_CNT_get( LOG_CALLER_DEFN
                                                         empei_i_buffer_t *b,
                                                         empei_i_handle_t *h,
                                                         UINT32 value[64] )
{
    IOLOG( "%s ", "empei_i_lfield_EXT_PMON_PKT_CNT_get");
    _empei_i_reg_EXT_PMON_PKT_CNT_array_burst_read( LOG_CALLER_ARGS
                                                    b,
                                                    h,
                                                    0,
                                                    64,
                                                    (UINT32 *)value);
}


#ifndef empei_i_lfield_range_EXT_PMON_PKT_CNT_get
#define empei_i_lfield_range_EXT_PMON_PKT_CNT_get( b, h, start_bit, stop_bit ) \
       _empei_i_lfield_range_EXT_PMON_PKT_CNT_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _empei_i_lfield_range_EXT_PMON_PKT_CNT_get( LOG_CALLER_DEFN
                                                                 empei_i_buffer_t *b,
                                                                 empei_i_handle_t *h,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = 0xffffffff >> (32-num_bits);
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "empei_i_lfield_range_EXT_PMON_PKT_CNT_get", start_bit, stop_bit );
    }
    reg_value = _empei_i_reg_EXT_PMON_PKT_CNT_array_read( LOG_CALLER_ARGS
                                                          b,
                                                          h,
                                                          word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "empei_i_lfield_range_EXT_PMON_PKT_CNT_get", start_bit, stop_bit, value );
    return value;
}


/*
 * ==================================================================================
 *                 Parameter Access Functions for Paramset sw_reset
 * ==================================================================================
 */

#ifndef empei_i_field_SW_RESET_ECLASS_CORE_set
#define empei_i_field_SW_RESET_ECLASS_CORE_set( b, h, value ) \
       _empei_i_field_SW_RESET_ECLASS_CORE_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_SW_RESET_ECLASS_CORE_set( LOG_CALLER_DEFN
                                                            empei_i_buffer_t *b,
                                                            empei_i_handle_t *h,
                                                            UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_SW_RESET_ECLASS_CORE_set", value, 1);
    IOLOG( "%s <= 0x%08x", "empei_i_field_SW_RESET_ECLASS_CORE_set", value );

    /* (0x00000000 bits 0) field SW_RESET_ECLASS_CORE of register PMC_EMPEI120_I_REG_SW_RESET */
    _empei_i_reg_SW_RESET_field_set( LOG_CALLER_ARGS
                                     b,
                                     h,
                                     EMPEI120_I_REG_SW_RESET_BIT_SW_RESET_ECLASS_CORE_MSK,
                                     EMPEI120_I_REG_SW_RESET_BIT_SW_RESET_ECLASS_CORE_OFF,
                                     value);
}


#ifndef empei_i_field_SW_RESET_ECLASS_CORE_get
#define empei_i_field_SW_RESET_ECLASS_CORE_get( b, h ) \
       _empei_i_field_SW_RESET_ECLASS_CORE_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_SW_RESET_ECLASS_CORE_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 0) field SW_RESET_ECLASS_CORE of register PMC_EMPEI120_I_REG_SW_RESET */
    reg_value = _empei_i_reg_SW_RESET_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_SW_RESET_BIT_SW_RESET_ECLASS_CORE_MSK) >> EMPEI120_I_REG_SW_RESET_BIT_SW_RESET_ECLASS_CORE_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_SW_RESET_ECLASS_CORE_get", value );

    return value;
}

#ifndef empei_i_field_SW_RESET_ECLASS_NREG_set
#define empei_i_field_SW_RESET_ECLASS_NREG_set( b, h, value ) \
       _empei_i_field_SW_RESET_ECLASS_NREG_set( LOG_CALLER b, h, value )
#endif
static INLINE void _empei_i_field_SW_RESET_ECLASS_NREG_set( LOG_CALLER_DEFN
                                                            empei_i_buffer_t *b,
                                                            empei_i_handle_t *h,
                                                            UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "empei_i_field_SW_RESET_ECLASS_NREG_set", value, 1);
    IOLOG( "%s <= 0x%08x", "empei_i_field_SW_RESET_ECLASS_NREG_set", value );

    /* (0x00000000 bits 1) field SW_RESET_ECLASS_NREG of register PMC_EMPEI120_I_REG_SW_RESET */
    _empei_i_reg_SW_RESET_field_set( LOG_CALLER_ARGS
                                     b,
                                     h,
                                     EMPEI120_I_REG_SW_RESET_BIT_SW_RESET_ECLASS_NREG_MSK,
                                     EMPEI120_I_REG_SW_RESET_BIT_SW_RESET_ECLASS_NREG_OFF,
                                     value);
}


#ifndef empei_i_field_SW_RESET_ECLASS_NREG_get
#define empei_i_field_SW_RESET_ECLASS_NREG_get( b, h ) \
       _empei_i_field_SW_RESET_ECLASS_NREG_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _empei_i_field_SW_RESET_ECLASS_NREG_get( LOG_CALLER_DEFN empei_i_buffer_t *b, empei_i_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 1) field SW_RESET_ECLASS_NREG of register PMC_EMPEI120_I_REG_SW_RESET */
    reg_value = _empei_i_reg_SW_RESET_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & EMPEI120_I_REG_SW_RESET_BIT_SW_RESET_ECLASS_NREG_MSK) >> EMPEI120_I_REG_SW_RESET_BIT_SW_RESET_ECLASS_NREG_OFF;
    IOLOG( "%s -> 0x%08x", "empei_i_field_SW_RESET_ECLASS_NREG_get", value );

    return value;
}

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* _EMPEI_I_IO_INLINE_H */
