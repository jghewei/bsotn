/******************************************************************************
 *   COPYRIGHT (C) 2011 PMC-SIERRA, INC. ALL RIGHTS RESERVED.
 * --------------------------------------------------------------------------
 *  This software embodies materials and concepts which are proprietary and
 *  confidential to PMC-Sierra, Inc.
 *  PMC-Sierra distributes this software to its customers pursuant to the
 *  terms and conditions of the Software License Agreement
 *  contained in the text file software.lic that is distributed along with
 *  the software. This software can only be utilized if all
 *  terms and conditions of the Software License Agreement are
 *  accepted. If there are any questions, concerns, or if the
 *  Software License Agreement text file, software.lic, is missing please
 *  contact PMC-Sierra for assistance.
 * -------------------------------------------------------------------------
 *   DESCRIPTION:
 *     contains the inline implementation of all the field accessor functions
 *     and register accessor functions for the otn_prbs block
 * 
 *   NOTES:
 *     This file is generated by the script codegen.pm, version 1.1
 *     Do not modify this file.
 * 
 *     The input file is ../src/ioxml/lw55_10_13_reg.xml
 *     block_uri "file:../docs/rda/lw55_10_13_reg.xml"
 *     block_part_number "LW55_10_13"
 *     block_mnemonic "OTN_PRBS"
 * 
 *****************************************************************************/
#ifndef _OTN_PRBS_IO_INLINE_H
#define _OTN_PRBS_IO_INLINE_H

#include "otn_prbs_loc.h"
#include "otn_prbs_regs.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * ==================================================================================
 *               tsb level structure and access functions for otn_prbs
 * ==================================================================================
 */
/* if logging is disabled then so is IO_LOGGING */
#ifndef NO_IO_LOGGING
# ifdef LOGGING_DISABLED
#  define NO_IO_LOGGING
# endif
#endif

/* log messages in the generated files log the caller's file/line/function instead of itself.*/
#ifndef IOLOG
# ifdef NO_IO_LOGGING
#  define IOLOG(...)
# else
#  define IOLOG(...) vaLog( LOG_CALLER_ARGS __VA_ARGS__)
# endif
#endif
#ifndef IO_RANGE_CHECK
# ifdef NO_IO_LOGGING
#  define IO_RANGE_CHECK(...)
# else
#  define IO_RANGE_CHECK(...) vaLog( LOG_CALLER_ARGS "** ERROR: range check ** " __VA_ARGS__)
# endif
#endif
#ifndef IOLOG_DATA
# ifdef NO_IO_LOGGING
#  define IOLOG_DATA(...)
# else
#  define IOLOG_DATA(...) vaLogData( LOG_CALLER_ARGS __VA_ARGS__)
# endif
#endif
typedef struct {
    coalesce_buffer_t coalesce_handle[1]; /* only used if register coalescing is enabled */
    otn_prbs_handle_t * h;
    pmc_sys_handle_t sys_handle;
    const UINT32 base_address;
    /* maybe eventually need to add some fields here per io handle */
} otn_prbs_buffer_t;

#ifndef otn_prbs_buffer_init
#define otn_prbs_buffer_init( b, h ) \
       _otn_prbs_buffer_init( LOG_CALLER b, h )
#endif
static INLINE void _otn_prbs_buffer_init( LOG_CALLER_DEFN otn_prbs_buffer_t *b, otn_prbs_handle_t *h )
{
    b->h                        = h;
    b->sys_handle               = ((pmc_handle_t *)h)->sys_handle;
    *(UINT32 *)&b->base_address = ((pmc_handle_t *)h)->base_address;
    /* currently this just checks that the previous function remembered to flush. */
    l1sys_init( b->coalesce_handle, (void**)b->sys_handle );
    IOLOG( "%s", "otn_prbs_buffer_init");
    
}

#ifndef otn_prbs_buffer_flush
#define otn_prbs_buffer_flush( b ) \
       _otn_prbs_buffer_flush( LOG_CALLER b )
#endif

/*
* flush any changed fields to the register file and invalidate the read cache.
*/
static INLINE void _otn_prbs_buffer_flush( LOG_CALLER_DEFN otn_prbs_buffer_t *b )
{
    IOLOG( "otn_prbs_buffer_flush" );
    l1sys_flush( b->coalesce_handle );
}
static INLINE UINT32 otn_prbs_reg_read( otn_prbs_buffer_t *b,
                                        otn_prbs_handle_t *h,
                                        UINT32 mem_type,
                                        UINT32 reg )
{
    UINT32 value;
    if (b != NULL)
        value = l1sys_reg_read( b->coalesce_handle,
                                mem_type,
                                b->base_address,
                                reg);
    else
        value = l2sys_reg_read( ((pmc_handle_t *)h)->sys_handle,
                                mem_type,
                                ((pmc_handle_t *)h)->base_address + reg);
    return value;
}
static INLINE void otn_prbs_reg_write( otn_prbs_buffer_t *b,
                                       otn_prbs_handle_t *h,
                                       UINT32 mem_type,
                                       UINT32 reg,
                                       UINT32 value )
{
    if (b != NULL)
        l1sys_reg_write( b->coalesce_handle,
                         mem_type,
                         b->base_address,
                         reg,
                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h)->sys_handle,
                         mem_type,
                         ((pmc_handle_t *)h)->base_address + reg,
                         value);
}

static INLINE void otn_prbs_field_set( otn_prbs_buffer_t *b,
                                       otn_prbs_handle_t *h,
                                       UINT32 mem_type,
                                       UINT32 reg,
                                       UINT32 mask,
                                       UINT32 unused_mask,
                                       UINT32 ofs,
                                       UINT32 value )
{
    if (b != NULL)
        l1sys_field_set2( b->coalesce_handle,
                          mem_type,
                          b->base_address,
                          reg,
                          mask,
                          unused_mask,
                          ofs,
                          value);
    else
    {
        if ((mask | unused_mask) == 0xffffffff)
        {
            l2sys_reg_write( ((pmc_handle_t *)h)->sys_handle,
                             mem_type,
                             ((pmc_handle_t *)h)->base_address + reg,
                             value<<ofs);
        }
        else
        {
            l2sys_reg_read_modify_write( ((pmc_handle_t *)h)->sys_handle,
                                         mem_type,
                                         ((pmc_handle_t *)h)->base_address + reg,
                                         mask,
                                         value<<ofs);
        }
    }
}

static INLINE void otn_prbs_action_on_write_field_set( otn_prbs_buffer_t *b,
                                                       otn_prbs_handle_t *h,
                                                       UINT32 mem_type,
                                                       UINT32 reg,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value )
{
    if (b != NULL)
        l1sys_action_on_write_field_set( b->coalesce_handle,
                                         mem_type,
                                         b->base_address,
                                         reg,
                                         mask,
                                         ofs,
                                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h)->sys_handle,
                         mem_type,
                         ((pmc_handle_t *)h)->base_address + reg,
                         value<<ofs);
}

static INLINE void otn_prbs_burst_read( otn_prbs_buffer_t *b,
                                        otn_prbs_handle_t *h,
                                        UINT32 mem_type,
                                        UINT32 reg,
                                        UINT32 len,
                                        UINT32 *value )
{
    if (b != NULL)
        l1sys_burst_read( b->coalesce_handle,
                          mem_type,
                          b->base_address,
                          reg,
                          len,
                          value);
    else
        l2sys_burst_read( ((pmc_handle_t *)h)->sys_handle,
                          mem_type,
                          ((pmc_handle_t *)h)->base_address + reg,
                          len,
                          value);
}

static INLINE void otn_prbs_burst_write( otn_prbs_buffer_t *b,
                                         otn_prbs_handle_t *h,
                                         UINT32 mem_type,
                                         UINT32 reg,
                                         UINT32 len,
                                         UINT32 *value )
{
    if (b != NULL)
        l1sys_burst_write( b->coalesce_handle,
                           mem_type,
                           b->base_address,
                           reg,
                           len,
                           value);
    else
        l2sys_burst_write( ((pmc_handle_t *)h)->sys_handle,
                           mem_type,
                           ((pmc_handle_t *)h)->base_address + reg,
                           len,
                           value);
}

static INLINE PMC_ERROR otn_prbs_poll_bit( otn_prbs_buffer_t *b,
                                           otn_prbs_handle_t *h,
                                           UINT32 mem_type,
                                           UINT32 reg,
                                           UINT32 mask,
                                           UINT32 value,
                                           UINT32 max_count,
                                           UINT32 *num_failed_polls,
                                           UINT32 delay_between_polls_in_microseconds )
{
    if (b != NULL)
        return l1sys_poll_bit( b->coalesce_handle,
                               mem_type,
                               b->base_address,
                               reg,
                               mask,
                               value,
                               max_count,
                               num_failed_polls,
                               delay_between_polls_in_microseconds);
    else
        return l2sys_poll_bit( ((pmc_handle_t *)h)->sys_handle,
                               mem_type,
                               ((pmc_handle_t *)h)->base_address + reg,
                               mask,
                               value,
                               max_count,
                               num_failed_polls,
                               delay_between_polls_in_microseconds);
}

/*
 * ==================================================================================
 *                      register access functions for otn_prbs
 * ==================================================================================
 */

/**
 * accessor functions for register PMC_OTN_PRBS_REG_PRBS_BER_TH_LOWER_REG
 *
 * Register: PRBS BER Threshold Lower Config Register
 * Offset: 0x000000c0 PRBS_BER_TH_LOWER_REG
 *
 * bits        31:0 default 0x00000000 PRBS_BER_THRES
 * field_bits  31:0
 */

#ifndef otn_prbs_reg_PRBS_BER_TH_LOWER_REG_write
#define otn_prbs_reg_PRBS_BER_TH_LOWER_REG_write( b, h, value ) \
       _otn_prbs_reg_PRBS_BER_TH_LOWER_REG_write( LOG_CALLER b, h, value )
#endif
static INLINE void _otn_prbs_reg_PRBS_BER_TH_LOWER_REG_write( LOG_CALLER_DEFN
                                                              otn_prbs_buffer_t *b,
                                                              otn_prbs_handle_t *h,
                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "otn_prbs_reg_PRBS_BER_TH_LOWER_REG_write", value );
    otn_prbs_reg_write( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OTN_PRBS_REG_PRBS_BER_TH_LOWER_REG,
                        value);
}


#ifndef otn_prbs_reg_PRBS_BER_TH_LOWER_REG_field_set
#define otn_prbs_reg_PRBS_BER_TH_LOWER_REG_field_set( b, h, mask, ofs, value ) \
       _otn_prbs_reg_PRBS_BER_TH_LOWER_REG_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _otn_prbs_reg_PRBS_BER_TH_LOWER_REG_field_set( LOG_CALLER_DEFN
                                                                  otn_prbs_buffer_t *b,
                                                                  otn_prbs_handle_t *h,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "otn_prbs_reg_PRBS_BER_TH_LOWER_REG_field_set", mask, ofs, value );
    otn_prbs_field_set( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OTN_PRBS_REG_PRBS_BER_TH_LOWER_REG,
                        mask,
                        PMC_OTN_PRBS_REG_PRBS_BER_TH_LOWER_REG_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef otn_prbs_reg_PRBS_BER_TH_LOWER_REG_read
#define otn_prbs_reg_PRBS_BER_TH_LOWER_REG_read( b, h ) \
       _otn_prbs_reg_PRBS_BER_TH_LOWER_REG_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _otn_prbs_reg_PRBS_BER_TH_LOWER_REG_read( LOG_CALLER_DEFN otn_prbs_buffer_t *b, otn_prbs_handle_t *h )
{
    UINT32 reg_value;

    reg_value = otn_prbs_reg_read( b,
                                   h,
                                   MEM_TYPE_CONFIG,
                                   PMC_OTN_PRBS_REG_PRBS_BER_TH_LOWER_REG);

    IOLOG( "%s -> 0x%08x;", "otn_prbs_reg_PRBS_BER_TH_LOWER_REG_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OTN_PRBS_REG_PRBS_BER_TH_UPPER_REG
 *
 * Register: PRBS BER Threshold Upper Config Register
 * Offset: 0x000000c4 PRBS_BER_TH_UPPER_REG
 *
 * bits        2:0 default 000 PRBS_BER_THRES
 * field_bits  34:32
 */

#ifndef otn_prbs_reg_PRBS_BER_TH_UPPER_REG_write
#define otn_prbs_reg_PRBS_BER_TH_UPPER_REG_write( b, h, value ) \
       _otn_prbs_reg_PRBS_BER_TH_UPPER_REG_write( LOG_CALLER b, h, value )
#endif
static INLINE void _otn_prbs_reg_PRBS_BER_TH_UPPER_REG_write( LOG_CALLER_DEFN
                                                              otn_prbs_buffer_t *b,
                                                              otn_prbs_handle_t *h,
                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "otn_prbs_reg_PRBS_BER_TH_UPPER_REG_write", value );
    otn_prbs_reg_write( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OTN_PRBS_REG_PRBS_BER_TH_UPPER_REG,
                        value);
}


#ifndef otn_prbs_reg_PRBS_BER_TH_UPPER_REG_field_set
#define otn_prbs_reg_PRBS_BER_TH_UPPER_REG_field_set( b, h, mask, ofs, value ) \
       _otn_prbs_reg_PRBS_BER_TH_UPPER_REG_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _otn_prbs_reg_PRBS_BER_TH_UPPER_REG_field_set( LOG_CALLER_DEFN
                                                                  otn_prbs_buffer_t *b,
                                                                  otn_prbs_handle_t *h,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "otn_prbs_reg_PRBS_BER_TH_UPPER_REG_field_set", mask, ofs, value );
    otn_prbs_field_set( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OTN_PRBS_REG_PRBS_BER_TH_UPPER_REG,
                        mask,
                        PMC_OTN_PRBS_REG_PRBS_BER_TH_UPPER_REG_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef otn_prbs_reg_PRBS_BER_TH_UPPER_REG_read
#define otn_prbs_reg_PRBS_BER_TH_UPPER_REG_read( b, h ) \
       _otn_prbs_reg_PRBS_BER_TH_UPPER_REG_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _otn_prbs_reg_PRBS_BER_TH_UPPER_REG_read( LOG_CALLER_DEFN otn_prbs_buffer_t *b, otn_prbs_handle_t *h )
{
    UINT32 reg_value;

    reg_value = otn_prbs_reg_read( b,
                                   h,
                                   MEM_TYPE_CONFIG,
                                   PMC_OTN_PRBS_REG_PRBS_BER_TH_UPPER_REG);

    IOLOG( "%s -> 0x%08x;", "otn_prbs_reg_PRBS_BER_TH_UPPER_REG_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OTN_PRBS_REG_PRBS_RESEED_REG
 *
 * Register: PRBS Reseed Control Register
 * Offset: 0x000000c8 PRBS_RESEED_REG
 *
 * bits 31:16 default 0x00B9 PRBS_RESEED_THR
 *
 * bits 15:0  default 0x0010 PRBS_RESEED_INTERVAL
 */

#ifndef otn_prbs_reg_PRBS_RESEED_REG_write
#define otn_prbs_reg_PRBS_RESEED_REG_write( b, h, value ) \
       _otn_prbs_reg_PRBS_RESEED_REG_write( LOG_CALLER b, h, value )
#endif
static INLINE void _otn_prbs_reg_PRBS_RESEED_REG_write( LOG_CALLER_DEFN
                                                        otn_prbs_buffer_t *b,
                                                        otn_prbs_handle_t *h,
                                                        UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "otn_prbs_reg_PRBS_RESEED_REG_write", value );
    otn_prbs_reg_write( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OTN_PRBS_REG_PRBS_RESEED_REG,
                        value);
}


#ifndef otn_prbs_reg_PRBS_RESEED_REG_field_set
#define otn_prbs_reg_PRBS_RESEED_REG_field_set( b, h, mask, ofs, value ) \
       _otn_prbs_reg_PRBS_RESEED_REG_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _otn_prbs_reg_PRBS_RESEED_REG_field_set( LOG_CALLER_DEFN
                                                            otn_prbs_buffer_t *b,
                                                            otn_prbs_handle_t *h,
                                                            UINT32 mask,
                                                            UINT32 ofs,
                                                            UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "otn_prbs_reg_PRBS_RESEED_REG_field_set", mask, ofs, value );
    otn_prbs_field_set( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OTN_PRBS_REG_PRBS_RESEED_REG,
                        mask,
                        PMC_OTN_PRBS_REG_PRBS_RESEED_REG_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef otn_prbs_reg_PRBS_RESEED_REG_read
#define otn_prbs_reg_PRBS_RESEED_REG_read( b, h ) \
       _otn_prbs_reg_PRBS_RESEED_REG_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _otn_prbs_reg_PRBS_RESEED_REG_read( LOG_CALLER_DEFN otn_prbs_buffer_t *b, otn_prbs_handle_t *h )
{
    UINT32 reg_value;

    reg_value = otn_prbs_reg_read( b,
                                   h,
                                   MEM_TYPE_CONFIG,
                                   PMC_OTN_PRBS_REG_PRBS_RESEED_REG);

    IOLOG( "%s -> 0x%08x;", "otn_prbs_reg_PRBS_RESEED_REG_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OTN_PRBS_REG_PRBS_CONFIG_REG
 *
 * Register: PRBS Channel Config Register
 * Offset: (0x00000000 + (N) * 0x10) PRBS_CONFIG_REG
 *
 * bits 14:8 default 0x0000 PRBS_CHID
 *
 * bits 3    default 0x0    PRBS_SEL_INV_NONINV
 *
 * bits 2    default 0x0    PRBS_SEL_31_11
 *
 * bits 1    default 0x0    PRBS_MON_EN
 *
 * bits 0    default 0x0    PRBS_GEN_EN
 */

#ifndef otn_prbs_reg_PRBS_CONFIG_REG_array_write
#define otn_prbs_reg_PRBS_CONFIG_REG_array_write( b, h, N, value ) \
       _otn_prbs_reg_PRBS_CONFIG_REG_array_write( LOG_CALLER b, h, N, value )
#endif
static INLINE void _otn_prbs_reg_PRBS_CONFIG_REG_array_write( LOG_CALLER_DEFN
                                                              otn_prbs_buffer_t *b,
                                                              otn_prbs_handle_t *h,
                                                              UINT32  N,
                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "otn_prbs_reg_PRBS_CONFIG_REG_array_write", value );
    otn_prbs_reg_write( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OTN_PRBS_REG_PRBS_CONFIG_REG(N),
                        value);
}


#ifndef otn_prbs_reg_PRBS_CONFIG_REG_array_field_set
#define otn_prbs_reg_PRBS_CONFIG_REG_array_field_set( b, h, N, mask, ofs, value ) \
       _otn_prbs_reg_PRBS_CONFIG_REG_array_field_set( LOG_CALLER b, h, N, mask, ofs, value )
#endif
static INLINE void _otn_prbs_reg_PRBS_CONFIG_REG_array_field_set( LOG_CALLER_DEFN
                                                                  otn_prbs_buffer_t *b,
                                                                  otn_prbs_handle_t *h,
                                                                  UINT32  N,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "otn_prbs_reg_PRBS_CONFIG_REG_array_field_set", N, mask, ofs, value );
    otn_prbs_field_set( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OTN_PRBS_REG_PRBS_CONFIG_REG(N),
                        mask,
                        PMC_OTN_PRBS_REG_PRBS_CONFIG_REG_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef otn_prbs_reg_PRBS_CONFIG_REG_array_read
#define otn_prbs_reg_PRBS_CONFIG_REG_array_read( b, h, N ) \
       _otn_prbs_reg_PRBS_CONFIG_REG_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _otn_prbs_reg_PRBS_CONFIG_REG_array_read( LOG_CALLER_DEFN
                                                               otn_prbs_buffer_t *b,
                                                               otn_prbs_handle_t *h,
                                                               UINT32  N )
{
    UINT32 reg_value;

    reg_value = otn_prbs_reg_read( b,
                                   h,
                                   MEM_TYPE_CONFIG,
                                   PMC_OTN_PRBS_REG_PRBS_CONFIG_REG(N));

    IOLOG( "%s -> 0x%08x; N=%d", "otn_prbs_reg_PRBS_CONFIG_REG_array_read", reg_value, N);
    return reg_value;
}

/**
 * accessor functions for register PMC_OTN_PRBS_REG_PRBS_DEFECT_CONFIG_REG
 *
 * Register: PRBS Defect Insertion Register
 * Offset: (0x00000004 + (N) * 0x10) PRBS_DEFECT_CONFIG_REG
 *
 * bits 0 default 0x0 PRBS_INS_DEFECT
 */

#ifndef otn_prbs_reg_PRBS_DEFECT_CONFIG_REG_array_write
#define otn_prbs_reg_PRBS_DEFECT_CONFIG_REG_array_write( b, h, N, value ) \
       _otn_prbs_reg_PRBS_DEFECT_CONFIG_REG_array_write( LOG_CALLER b, h, N, value )
#endif
static INLINE void _otn_prbs_reg_PRBS_DEFECT_CONFIG_REG_array_write( LOG_CALLER_DEFN
                                                                     otn_prbs_buffer_t *b,
                                                                     otn_prbs_handle_t *h,
                                                                     UINT32  N,
                                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "otn_prbs_reg_PRBS_DEFECT_CONFIG_REG_array_write", value );
    otn_prbs_reg_write( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OTN_PRBS_REG_PRBS_DEFECT_CONFIG_REG(N),
                        value);
}


#ifndef otn_prbs_reg_PRBS_DEFECT_CONFIG_REG_array_field_set
#define otn_prbs_reg_PRBS_DEFECT_CONFIG_REG_array_field_set( b, h, N, mask, ofs, value ) \
       _otn_prbs_reg_PRBS_DEFECT_CONFIG_REG_array_field_set( LOG_CALLER b, h, N, mask, ofs, value )
#endif
static INLINE void _otn_prbs_reg_PRBS_DEFECT_CONFIG_REG_array_field_set( LOG_CALLER_DEFN
                                                                         otn_prbs_buffer_t *b,
                                                                         otn_prbs_handle_t *h,
                                                                         UINT32  N,
                                                                         UINT32 mask,
                                                                         UINT32 ofs,
                                                                         UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "otn_prbs_reg_PRBS_DEFECT_CONFIG_REG_array_field_set", N, mask, ofs, value );
    otn_prbs_field_set( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OTN_PRBS_REG_PRBS_DEFECT_CONFIG_REG(N),
                        mask,
                        PMC_OTN_PRBS_REG_PRBS_DEFECT_CONFIG_REG_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef otn_prbs_reg_PRBS_DEFECT_CONFIG_REG_array_read
#define otn_prbs_reg_PRBS_DEFECT_CONFIG_REG_array_read( b, h, N ) \
       _otn_prbs_reg_PRBS_DEFECT_CONFIG_REG_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _otn_prbs_reg_PRBS_DEFECT_CONFIG_REG_array_read( LOG_CALLER_DEFN
                                                                      otn_prbs_buffer_t *b,
                                                                      otn_prbs_handle_t *h,
                                                                      UINT32  N )
{
    UINT32 reg_value;

    reg_value = otn_prbs_reg_read( b,
                                   h,
                                   MEM_TYPE_CONFIG,
                                   PMC_OTN_PRBS_REG_PRBS_DEFECT_CONFIG_REG(N));

    IOLOG( "%s -> 0x%08x; N=%d", "otn_prbs_reg_PRBS_DEFECT_CONFIG_REG_array_read", reg_value, N);
    return reg_value;
}

/**
 * accessor functions for register PMC_OTN_PRBS_REG_PRBS_DLSS_INT_EN_REG
 *
 * Register: PRBS DLSS Interrupt Enable Register
 * Offset: 0x000000d8 PRBS_DLSS_INT_EN_REG
 *
 * bits 11:0 default 0x000 PRBS_DLSS_E
 */

#ifndef otn_prbs_reg_PRBS_DLSS_INT_EN_REG_write
#define otn_prbs_reg_PRBS_DLSS_INT_EN_REG_write( b, h, value ) \
       _otn_prbs_reg_PRBS_DLSS_INT_EN_REG_write( LOG_CALLER b, h, value )
#endif
static INLINE void _otn_prbs_reg_PRBS_DLSS_INT_EN_REG_write( LOG_CALLER_DEFN
                                                             otn_prbs_buffer_t *b,
                                                             otn_prbs_handle_t *h,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "otn_prbs_reg_PRBS_DLSS_INT_EN_REG_write", value );
    otn_prbs_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OTN_PRBS_REG_PRBS_DLSS_INT_EN_REG,
                        value);
}


#ifndef otn_prbs_reg_PRBS_DLSS_INT_EN_REG_field_set
#define otn_prbs_reg_PRBS_DLSS_INT_EN_REG_field_set( b, h, mask, ofs, value ) \
       _otn_prbs_reg_PRBS_DLSS_INT_EN_REG_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _otn_prbs_reg_PRBS_DLSS_INT_EN_REG_field_set( LOG_CALLER_DEFN
                                                                 otn_prbs_buffer_t *b,
                                                                 otn_prbs_handle_t *h,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "otn_prbs_reg_PRBS_DLSS_INT_EN_REG_field_set", mask, ofs, value );
    otn_prbs_field_set( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OTN_PRBS_REG_PRBS_DLSS_INT_EN_REG,
                        mask,
                        PMC_OTN_PRBS_REG_PRBS_DLSS_INT_EN_REG_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef otn_prbs_reg_PRBS_DLSS_INT_EN_REG_read
#define otn_prbs_reg_PRBS_DLSS_INT_EN_REG_read( b, h ) \
       _otn_prbs_reg_PRBS_DLSS_INT_EN_REG_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _otn_prbs_reg_PRBS_DLSS_INT_EN_REG_read( LOG_CALLER_DEFN otn_prbs_buffer_t *b, otn_prbs_handle_t *h )
{
    UINT32 reg_value;

    reg_value = otn_prbs_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OTN_PRBS_REG_PRBS_DLSS_INT_EN_REG);

    IOLOG( "%s -> 0x%08x;", "otn_prbs_reg_PRBS_DLSS_INT_EN_REG_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OTN_PRBS_REG_PRBS_DLSS_INT_STAT_REG
 *
 * Register: PRBS DLSS Interrupt Status Register
 * Offset: 0x000000dc PRBS_DLSS_INT_STAT_REG
 *
 * bits 11:0 default 0x000 PRBS_DLSS_I
 * attribute: int_edge=changing
 * attribute: clk=sysclk_349
 */

#ifndef otn_prbs_reg_PRBS_DLSS_INT_STAT_REG_write
#define otn_prbs_reg_PRBS_DLSS_INT_STAT_REG_write( b, h, value ) \
       _otn_prbs_reg_PRBS_DLSS_INT_STAT_REG_write( LOG_CALLER b, h, value )
#endif
static INLINE void _otn_prbs_reg_PRBS_DLSS_INT_STAT_REG_write( LOG_CALLER_DEFN
                                                               otn_prbs_buffer_t *b,
                                                               otn_prbs_handle_t *h,
                                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "otn_prbs_reg_PRBS_DLSS_INT_STAT_REG_write", value );
    otn_prbs_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OTN_PRBS_REG_PRBS_DLSS_INT_STAT_REG,
                        value);
}


#ifndef otn_prbs_reg_PRBS_DLSS_INT_STAT_REG_action_on_write_field_set
#define otn_prbs_reg_PRBS_DLSS_INT_STAT_REG_action_on_write_field_set( b, h, mask, ofs, value ) \
       _otn_prbs_reg_PRBS_DLSS_INT_STAT_REG_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _otn_prbs_reg_PRBS_DLSS_INT_STAT_REG_action_on_write_field_set( LOG_CALLER_DEFN
                                                                                   otn_prbs_buffer_t *b,
                                                                                   otn_prbs_handle_t *h,
                                                                                   UINT32 mask,
                                                                                   UINT32 ofs,
                                                                                   UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "otn_prbs_reg_PRBS_DLSS_INT_STAT_REG_action_on_write_field_set", mask, ofs, value );
    otn_prbs_action_on_write_field_set( b,
                                        h,
                                        MEM_TYPE_STATUS,
                                        PMC_OTN_PRBS_REG_PRBS_DLSS_INT_STAT_REG,
                                        mask,
                                        ofs,
                                        value);

}


#ifndef otn_prbs_reg_PRBS_DLSS_INT_STAT_REG_read
#define otn_prbs_reg_PRBS_DLSS_INT_STAT_REG_read( b, h ) \
       _otn_prbs_reg_PRBS_DLSS_INT_STAT_REG_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _otn_prbs_reg_PRBS_DLSS_INT_STAT_REG_read( LOG_CALLER_DEFN otn_prbs_buffer_t *b, otn_prbs_handle_t *h )
{
    UINT32 reg_value;

    reg_value = otn_prbs_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OTN_PRBS_REG_PRBS_DLSS_INT_STAT_REG);

    IOLOG( "%s -> 0x%08x;", "otn_prbs_reg_PRBS_DLSS_INT_STAT_REG_read", reg_value);
    return reg_value;
}

#ifndef otn_prbs_reg_PRBS_DLSS_INT_STAT_REG_poll_bit
#define otn_prbs_reg_PRBS_DLSS_INT_STAT_REG_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _otn_prbs_reg_PRBS_DLSS_INT_STAT_REG_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _otn_prbs_reg_PRBS_DLSS_INT_STAT_REG_poll_bit( LOG_CALLER_DEFN
                                                                       otn_prbs_buffer_t *b,
                                                                       otn_prbs_handle_t *h,
                                                                       UINT32 mask,
                                                                       UINT32 value,
                                                                       UINT32 max_count,
                                                                       UINT32 *num_failed_polls,
                                                                       UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "otn_prbs_reg_PRBS_DLSS_INT_STAT_REG_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return otn_prbs_poll_bit( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_OTN_PRBS_REG_PRBS_DLSS_INT_STAT_REG,
                              mask,
                              value,
                              max_count,
                              num_failed_polls,
                              delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_OTN_PRBS_REG_PRBS_DLSS_INT_VAL_REG
 *
 * Register: PRBS DLSS Interrupt Value Register
 * Offset: 0x000000e0 PRBS_DLSS_INT_VAL_REG
 *
 * bits 11:0 default 0x000 PRBS_DLSS_V
 */

#ifndef otn_prbs_reg_PRBS_DLSS_INT_VAL_REG_read
#define otn_prbs_reg_PRBS_DLSS_INT_VAL_REG_read( b, h ) \
       _otn_prbs_reg_PRBS_DLSS_INT_VAL_REG_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _otn_prbs_reg_PRBS_DLSS_INT_VAL_REG_read( LOG_CALLER_DEFN otn_prbs_buffer_t *b, otn_prbs_handle_t *h )
{
    UINT32 reg_value;

    reg_value = otn_prbs_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OTN_PRBS_REG_PRBS_DLSS_INT_VAL_REG);

    IOLOG( "%s -> 0x%08x;", "otn_prbs_reg_PRBS_DLSS_INT_VAL_REG_read", reg_value);
    return reg_value;
}

#ifndef otn_prbs_reg_PRBS_DLSS_INT_VAL_REG_poll_bit
#define otn_prbs_reg_PRBS_DLSS_INT_VAL_REG_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _otn_prbs_reg_PRBS_DLSS_INT_VAL_REG_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _otn_prbs_reg_PRBS_DLSS_INT_VAL_REG_poll_bit( LOG_CALLER_DEFN
                                                                      otn_prbs_buffer_t *b,
                                                                      otn_prbs_handle_t *h,
                                                                      UINT32 mask,
                                                                      UINT32 value,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "otn_prbs_reg_PRBS_DLSS_INT_VAL_REG_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return otn_prbs_poll_bit( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_OTN_PRBS_REG_PRBS_DLSS_INT_VAL_REG,
                              mask,
                              value,
                              max_count,
                              num_failed_polls,
                              delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_OTN_PRBS_REG_PRBS_TSE_ROLLOVER_STAT_REG
 *
 * Register: PRBS TSE Rollover Status Register
 * Offset: 0x000000d4 PRBS_TSE_ROLLOVER_STAT_REG
 *
 * bits 11:0 default 0x000 PRBS_TSE_ROVER
 */

#ifndef otn_prbs_reg_PRBS_TSE_ROLLOVER_STAT_REG_read
#define otn_prbs_reg_PRBS_TSE_ROLLOVER_STAT_REG_read( b, h ) \
       _otn_prbs_reg_PRBS_TSE_ROLLOVER_STAT_REG_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _otn_prbs_reg_PRBS_TSE_ROLLOVER_STAT_REG_read( LOG_CALLER_DEFN otn_prbs_buffer_t *b, otn_prbs_handle_t *h )
{
    UINT32 reg_value;

    reg_value = otn_prbs_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OTN_PRBS_REG_PRBS_TSE_ROLLOVER_STAT_REG);

    IOLOG( "%s -> 0x%08x;", "otn_prbs_reg_PRBS_TSE_ROLLOVER_STAT_REG_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OTN_PRBS_REG_PRBS_TSE_STAT_REG
 *
 * Register: PRBS TSE Status Register
 * Offset: (0x00000008 + (N) * 0x10) PRBS_TSE_STAT_REG
 *
 * bits        31:0 default 0x00000000 PRBS_TSE_CHAN_REG
 * field_bits  31:0
 */

#ifndef otn_prbs_reg_PRBS_TSE_STAT_REG_array_read
#define otn_prbs_reg_PRBS_TSE_STAT_REG_array_read( b, h, N ) \
       _otn_prbs_reg_PRBS_TSE_STAT_REG_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _otn_prbs_reg_PRBS_TSE_STAT_REG_array_read( LOG_CALLER_DEFN
                                                                 otn_prbs_buffer_t *b,
                                                                 otn_prbs_handle_t *h,
                                                                 UINT32  N )
{
    UINT32 reg_value;

    reg_value = otn_prbs_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OTN_PRBS_REG_PRBS_TSE_STAT_REG(N));

    IOLOG( "%s -> 0x%08x; N=%d", "otn_prbs_reg_PRBS_TSE_STAT_REG_array_read", reg_value, N);
    return reg_value;
}

/*
 * ==================================================================================
 *                  Parameter Access Functions for Paramset config
 * ==================================================================================
 */

#ifndef otn_prbs_lfield_PRBS_BER_THRES_set
#define otn_prbs_lfield_PRBS_BER_THRES_set( b, h, value ) \
       _otn_prbs_lfield_PRBS_BER_THRES_set( LOG_CALLER b, h, value )
#endif
static INLINE void _otn_prbs_lfield_PRBS_BER_THRES_set( LOG_CALLER_DEFN
                                                        otn_prbs_buffer_t *b,
                                                        otn_prbs_handle_t *h,
                                                        UINT32 value[2] )
{
    IOLOG( "%s <= 0x%08x 0x%08x", "otn_prbs_lfield_PRBS_BER_THRES_set", value[1] , value[0] );

    /* (0x000000c0 bits 31:0) bits 0:31 use field PRBS_BER_THRES of register PMC_OTN_PRBS_REG_PRBS_BER_TH_LOWER_REG */
    _otn_prbs_reg_PRBS_BER_TH_LOWER_REG_field_set( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   OTN_PRBS_REG_PRBS_BER_TH_LOWER_REG_BIT_PRBS_BER_THRES_MSK,
                                                   OTN_PRBS_REG_PRBS_BER_TH_LOWER_REG_BIT_PRBS_BER_THRES_OFF,
                                                   (value[0] & 0xffffffff));

    /* (0x000000c4 bits 2:0) bits 32:34 use field PRBS_BER_THRES of register PMC_OTN_PRBS_REG_PRBS_BER_TH_UPPER_REG */
    _otn_prbs_reg_PRBS_BER_TH_UPPER_REG_field_set( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   OTN_PRBS_REG_PRBS_BER_TH_UPPER_REG_BIT_PRBS_BER_THRES_MSK,
                                                   OTN_PRBS_REG_PRBS_BER_TH_UPPER_REG_BIT_PRBS_BER_THRES_OFF,
                                                   (value[1] & 0x7));
}


#ifndef otn_prbs_lfield_PRBS_BER_THRES_get
#define otn_prbs_lfield_PRBS_BER_THRES_get( b, h, value ) \
       _otn_prbs_lfield_PRBS_BER_THRES_get( LOG_CALLER b, h, value )
#endif
static INLINE void _otn_prbs_lfield_PRBS_BER_THRES_get( LOG_CALLER_DEFN
                                                        otn_prbs_buffer_t *b,
                                                        otn_prbs_handle_t *h,
                                                        UINT32 value[2] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<2;i++)
        value[i] = 0;

    /* (0x000000c0 bits 31:0) bits 0:31 use field PRBS_BER_THRES of register PMC_OTN_PRBS_REG_PRBS_BER_TH_LOWER_REG */
    reg_value = _otn_prbs_reg_PRBS_BER_TH_LOWER_REG_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OTN_PRBS_REG_PRBS_BER_TH_LOWER_REG_BIT_PRBS_BER_THRES_MSK) >> OTN_PRBS_REG_PRBS_BER_TH_LOWER_REG_BIT_PRBS_BER_THRES_OFF;
    value[0] |= field_value;

    /* (0x000000c4 bits 2:0) bits 32:34 use field PRBS_BER_THRES of register PMC_OTN_PRBS_REG_PRBS_BER_TH_UPPER_REG */
    reg_value = _otn_prbs_reg_PRBS_BER_TH_UPPER_REG_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OTN_PRBS_REG_PRBS_BER_TH_UPPER_REG_BIT_PRBS_BER_THRES_MSK) >> OTN_PRBS_REG_PRBS_BER_TH_UPPER_REG_BIT_PRBS_BER_THRES_OFF;
    value[1] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x", "otn_prbs_lfield_PRBS_BER_THRES_get", value[1] , value[0] );

}

#ifndef otn_prbs_lfield_range_PRBS_BER_THRES_set
#define otn_prbs_lfield_range_PRBS_BER_THRES_set( b, h, start_bit, stop_bit, value ) \
       _otn_prbs_lfield_range_PRBS_BER_THRES_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _otn_prbs_lfield_range_PRBS_BER_THRES_set( LOG_CALLER_DEFN
                                                              otn_prbs_buffer_t *b,
                                                              otn_prbs_handle_t *h,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "otn_prbs_lfield_range_PRBS_BER_THRES_set", stop_bit, start_bit );
    if (stop_bit > 34) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "otn_prbs_lfield_range_PRBS_BER_THRES_set", stop_bit, 34 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "otn_prbs_lfield_range_PRBS_BER_THRES_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000000c0 bits 31:0) bits 0:31 use field PRBS_BER_THRES of register PMC_OTN_PRBS_REG_PRBS_BER_TH_LOWER_REG */
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000c0 bits 31:0) bits 0:31 use field PRBS_BER_THRES of register PMC_OTN_PRBS_REG_PRBS_BER_TH_LOWER_REG */
        _otn_prbs_reg_PRBS_BER_TH_LOWER_REG_field_set( LOG_CALLER_ARGS
                                                       b,
                                                       h,
                                                       subfield_mask << (OTN_PRBS_REG_PRBS_BER_TH_LOWER_REG_BIT_PRBS_BER_THRES_OFF + subfield_offset),
                                                       OTN_PRBS_REG_PRBS_BER_TH_LOWER_REG_BIT_PRBS_BER_THRES_OFF + subfield_offset,
                                                       value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000000c4 bits 2:0) bits 32:34 use field PRBS_BER_THRES of register PMC_OTN_PRBS_REG_PRBS_BER_TH_UPPER_REG */
    if ((start_bit <= 34) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 34) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 34;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000c4 bits 2:0) bits 32:34 use field PRBS_BER_THRES of register PMC_OTN_PRBS_REG_PRBS_BER_TH_UPPER_REG */
        _otn_prbs_reg_PRBS_BER_TH_UPPER_REG_field_set( LOG_CALLER_ARGS
                                                       b,
                                                       h,
                                                       subfield_mask << (OTN_PRBS_REG_PRBS_BER_TH_UPPER_REG_BIT_PRBS_BER_THRES_OFF + subfield_offset),
                                                       OTN_PRBS_REG_PRBS_BER_TH_UPPER_REG_BIT_PRBS_BER_THRES_OFF + subfield_offset,
                                                       value >> subfield_shift);
    }
}


#ifndef otn_prbs_lfield_range_PRBS_BER_THRES_get
#define otn_prbs_lfield_range_PRBS_BER_THRES_get( b, h, start_bit, stop_bit ) \
       _otn_prbs_lfield_range_PRBS_BER_THRES_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _otn_prbs_lfield_range_PRBS_BER_THRES_get( LOG_CALLER_DEFN
                                                                otn_prbs_buffer_t *b,
                                                                otn_prbs_handle_t *h,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "otn_prbs_lfield_range_PRBS_BER_THRES_get", stop_bit, start_bit );
    if (stop_bit > 34) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "otn_prbs_lfield_range_PRBS_BER_THRES_get", stop_bit, 34 );
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000c0 bits 31:0) bits 0:31 use field PRBS_BER_THRES of register PMC_OTN_PRBS_REG_PRBS_BER_TH_LOWER_REG */
        reg_value = _otn_prbs_reg_PRBS_BER_TH_LOWER_REG_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & OTN_PRBS_REG_PRBS_BER_TH_LOWER_REG_BIT_PRBS_BER_THRES_MSK)
                      >> OTN_PRBS_REG_PRBS_BER_TH_LOWER_REG_BIT_PRBS_BER_THRES_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OTN_PRBS_REG_PRBS_BER_TH_LOWER_REG_BIT_PRBS_BER_THRES_MSK, OTN_PRBS_REG_PRBS_BER_TH_LOWER_REG_BIT_PRBS_BER_THRES_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 34) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 34) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 34;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000c4 bits 2:0) bits 32:34 use field PRBS_BER_THRES of register PMC_OTN_PRBS_REG_PRBS_BER_TH_UPPER_REG */
        reg_value = _otn_prbs_reg_PRBS_BER_TH_UPPER_REG_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & OTN_PRBS_REG_PRBS_BER_TH_UPPER_REG_BIT_PRBS_BER_THRES_MSK)
                      >> OTN_PRBS_REG_PRBS_BER_TH_UPPER_REG_BIT_PRBS_BER_THRES_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OTN_PRBS_REG_PRBS_BER_TH_UPPER_REG_BIT_PRBS_BER_THRES_MSK, OTN_PRBS_REG_PRBS_BER_TH_UPPER_REG_BIT_PRBS_BER_THRES_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "otn_prbs_lfield_range_PRBS_BER_THRES_get", start_bit, stop_bit, value );

    return value;
}

#ifndef otn_prbs_field_PRBS_RESEED_THR_set
#define otn_prbs_field_PRBS_RESEED_THR_set( b, h, value ) \
       _otn_prbs_field_PRBS_RESEED_THR_set( LOG_CALLER b, h, value )
#endif
static INLINE void _otn_prbs_field_PRBS_RESEED_THR_set( LOG_CALLER_DEFN
                                                        otn_prbs_buffer_t *b,
                                                        otn_prbs_handle_t *h,
                                                        UINT32 value )
{
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "otn_prbs_field_PRBS_RESEED_THR_set", value, 65535);
    IOLOG( "%s <= 0x%08x", "otn_prbs_field_PRBS_RESEED_THR_set", value );

    /* (0x000000c8 bits 31:16) field PRBS_RESEED_THR of register PMC_OTN_PRBS_REG_PRBS_RESEED_REG */
    _otn_prbs_reg_PRBS_RESEED_REG_field_set( LOG_CALLER_ARGS
                                             b,
                                             h,
                                             OTN_PRBS_REG_PRBS_RESEED_REG_BIT_PRBS_RESEED_THR_MSK,
                                             OTN_PRBS_REG_PRBS_RESEED_REG_BIT_PRBS_RESEED_THR_OFF,
                                             value);
}


#ifndef otn_prbs_field_PRBS_RESEED_THR_get
#define otn_prbs_field_PRBS_RESEED_THR_get( b, h ) \
       _otn_prbs_field_PRBS_RESEED_THR_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _otn_prbs_field_PRBS_RESEED_THR_get( LOG_CALLER_DEFN otn_prbs_buffer_t *b, otn_prbs_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000c8 bits 31:16) field PRBS_RESEED_THR of register PMC_OTN_PRBS_REG_PRBS_RESEED_REG */
    reg_value = _otn_prbs_reg_PRBS_RESEED_REG_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OTN_PRBS_REG_PRBS_RESEED_REG_BIT_PRBS_RESEED_THR_MSK) >> OTN_PRBS_REG_PRBS_RESEED_REG_BIT_PRBS_RESEED_THR_OFF;
    IOLOG( "%s -> 0x%08x", "otn_prbs_field_PRBS_RESEED_THR_get", value );

    return value;
}

#ifndef otn_prbs_field_range_PRBS_RESEED_THR_set
#define otn_prbs_field_range_PRBS_RESEED_THR_set( b, h, start_bit, stop_bit, value ) \
       _otn_prbs_field_range_PRBS_RESEED_THR_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _otn_prbs_field_range_PRBS_RESEED_THR_set( LOG_CALLER_DEFN
                                                              otn_prbs_buffer_t *b,
                                                              otn_prbs_handle_t *h,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "otn_prbs_field_range_PRBS_RESEED_THR_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "otn_prbs_field_range_PRBS_RESEED_THR_set", stop_bit, 15 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "otn_prbs_field_range_PRBS_RESEED_THR_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000000c8 bits 31:16) field PRBS_RESEED_THR of register PMC_OTN_PRBS_REG_PRBS_RESEED_REG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 16) {
            subfield_offset = start_bit - 16;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  16 - start_bit;
            subfield_start_bit = 16;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000c8 bits 31:16) field PRBS_RESEED_THR of register PMC_OTN_PRBS_REG_PRBS_RESEED_REG */
        _otn_prbs_reg_PRBS_RESEED_REG_field_set( LOG_CALLER_ARGS
                                                 b,
                                                 h,
                                                 subfield_mask << (OTN_PRBS_REG_PRBS_RESEED_REG_BIT_PRBS_RESEED_THR_OFF + subfield_offset),
                                                 OTN_PRBS_REG_PRBS_RESEED_REG_BIT_PRBS_RESEED_THR_OFF + subfield_offset,
                                                 value >> subfield_shift);
    }
}


#ifndef otn_prbs_field_range_PRBS_RESEED_THR_get
#define otn_prbs_field_range_PRBS_RESEED_THR_get( b, h, start_bit, stop_bit ) \
       _otn_prbs_field_range_PRBS_RESEED_THR_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _otn_prbs_field_range_PRBS_RESEED_THR_get( LOG_CALLER_DEFN
                                                                otn_prbs_buffer_t *b,
                                                                otn_prbs_handle_t *h,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "otn_prbs_field_range_PRBS_RESEED_THR_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "otn_prbs_field_range_PRBS_RESEED_THR_get", stop_bit, 15 );
    if (start_bit > 16) {
        subfield_offset = start_bit - 16;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 16 - start_bit;
        subfield_start_bit = 16;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000c8 bits 31:16) field PRBS_RESEED_THR of register PMC_OTN_PRBS_REG_PRBS_RESEED_REG */
    reg_value = _otn_prbs_reg_PRBS_RESEED_REG_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OTN_PRBS_REG_PRBS_RESEED_REG_BIT_PRBS_RESEED_THR_MSK)
                  >> OTN_PRBS_REG_PRBS_RESEED_REG_BIT_PRBS_RESEED_THR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OTN_PRBS_REG_PRBS_RESEED_REG_BIT_PRBS_RESEED_THR_MSK, OTN_PRBS_REG_PRBS_RESEED_REG_BIT_PRBS_RESEED_THR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "otn_prbs_field_range_PRBS_RESEED_THR_get", start_bit, stop_bit, value );

    return value;
}

#ifndef otn_prbs_field_PRBS_RESEED_INTERVAL_set
#define otn_prbs_field_PRBS_RESEED_INTERVAL_set( b, h, value ) \
       _otn_prbs_field_PRBS_RESEED_INTERVAL_set( LOG_CALLER b, h, value )
#endif
static INLINE void _otn_prbs_field_PRBS_RESEED_INTERVAL_set( LOG_CALLER_DEFN
                                                             otn_prbs_buffer_t *b,
                                                             otn_prbs_handle_t *h,
                                                             UINT32 value )
{
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "otn_prbs_field_PRBS_RESEED_INTERVAL_set", value, 65535);
    IOLOG( "%s <= 0x%08x", "otn_prbs_field_PRBS_RESEED_INTERVAL_set", value );

    /* (0x000000c8 bits 15:0) field PRBS_RESEED_INTERVAL of register PMC_OTN_PRBS_REG_PRBS_RESEED_REG */
    _otn_prbs_reg_PRBS_RESEED_REG_field_set( LOG_CALLER_ARGS
                                             b,
                                             h,
                                             OTN_PRBS_REG_PRBS_RESEED_REG_BIT_PRBS_RESEED_INTERVAL_MSK,
                                             OTN_PRBS_REG_PRBS_RESEED_REG_BIT_PRBS_RESEED_INTERVAL_OFF,
                                             value);
}


#ifndef otn_prbs_field_PRBS_RESEED_INTERVAL_get
#define otn_prbs_field_PRBS_RESEED_INTERVAL_get( b, h ) \
       _otn_prbs_field_PRBS_RESEED_INTERVAL_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _otn_prbs_field_PRBS_RESEED_INTERVAL_get( LOG_CALLER_DEFN otn_prbs_buffer_t *b, otn_prbs_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000c8 bits 15:0) field PRBS_RESEED_INTERVAL of register PMC_OTN_PRBS_REG_PRBS_RESEED_REG */
    reg_value = _otn_prbs_reg_PRBS_RESEED_REG_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OTN_PRBS_REG_PRBS_RESEED_REG_BIT_PRBS_RESEED_INTERVAL_MSK) >> OTN_PRBS_REG_PRBS_RESEED_REG_BIT_PRBS_RESEED_INTERVAL_OFF;
    IOLOG( "%s -> 0x%08x", "otn_prbs_field_PRBS_RESEED_INTERVAL_get", value );

    return value;
}

#ifndef otn_prbs_field_range_PRBS_RESEED_INTERVAL_set
#define otn_prbs_field_range_PRBS_RESEED_INTERVAL_set( b, h, start_bit, stop_bit, value ) \
       _otn_prbs_field_range_PRBS_RESEED_INTERVAL_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _otn_prbs_field_range_PRBS_RESEED_INTERVAL_set( LOG_CALLER_DEFN
                                                                   otn_prbs_buffer_t *b,
                                                                   otn_prbs_handle_t *h,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "otn_prbs_field_range_PRBS_RESEED_INTERVAL_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "otn_prbs_field_range_PRBS_RESEED_INTERVAL_set", stop_bit, 15 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "otn_prbs_field_range_PRBS_RESEED_INTERVAL_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000000c8 bits 15:0) field PRBS_RESEED_INTERVAL of register PMC_OTN_PRBS_REG_PRBS_RESEED_REG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000c8 bits 15:0) field PRBS_RESEED_INTERVAL of register PMC_OTN_PRBS_REG_PRBS_RESEED_REG */
        _otn_prbs_reg_PRBS_RESEED_REG_field_set( LOG_CALLER_ARGS
                                                 b,
                                                 h,
                                                 subfield_mask << (OTN_PRBS_REG_PRBS_RESEED_REG_BIT_PRBS_RESEED_INTERVAL_OFF + subfield_offset),
                                                 OTN_PRBS_REG_PRBS_RESEED_REG_BIT_PRBS_RESEED_INTERVAL_OFF + subfield_offset,
                                                 value >> subfield_shift);
    }
}


#ifndef otn_prbs_field_range_PRBS_RESEED_INTERVAL_get
#define otn_prbs_field_range_PRBS_RESEED_INTERVAL_get( b, h, start_bit, stop_bit ) \
       _otn_prbs_field_range_PRBS_RESEED_INTERVAL_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _otn_prbs_field_range_PRBS_RESEED_INTERVAL_get( LOG_CALLER_DEFN
                                                                     otn_prbs_buffer_t *b,
                                                                     otn_prbs_handle_t *h,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "otn_prbs_field_range_PRBS_RESEED_INTERVAL_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "otn_prbs_field_range_PRBS_RESEED_INTERVAL_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000c8 bits 15:0) field PRBS_RESEED_INTERVAL of register PMC_OTN_PRBS_REG_PRBS_RESEED_REG */
    reg_value = _otn_prbs_reg_PRBS_RESEED_REG_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OTN_PRBS_REG_PRBS_RESEED_REG_BIT_PRBS_RESEED_INTERVAL_MSK)
                  >> OTN_PRBS_REG_PRBS_RESEED_REG_BIT_PRBS_RESEED_INTERVAL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OTN_PRBS_REG_PRBS_RESEED_REG_BIT_PRBS_RESEED_INTERVAL_MSK, OTN_PRBS_REG_PRBS_RESEED_REG_BIT_PRBS_RESEED_INTERVAL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "otn_prbs_field_range_PRBS_RESEED_INTERVAL_get", start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 *             Parameter Access Functions for Paramset config_N_size12
 * ==================================================================================
 */

#ifndef otn_prbs_field_PRBS_CHID_set
#define otn_prbs_field_PRBS_CHID_set( b, h, N, value ) \
       _otn_prbs_field_PRBS_CHID_set( LOG_CALLER b, h, N, value )
#endif
static INLINE void _otn_prbs_field_PRBS_CHID_set( LOG_CALLER_DEFN
                                                  otn_prbs_buffer_t *b,
                                                  otn_prbs_handle_t *h,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "otn_prbs_field_PRBS_CHID_set", N, 11);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "otn_prbs_field_PRBS_CHID_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "otn_prbs_field_PRBS_CHID_set", N, value );

    /* ((0x00000000 + (N) * 0x10) bits 14:8) field PRBS_CHID of register PMC_OTN_PRBS_REG_PRBS_CONFIG_REG index N=0..11 */
    _otn_prbs_reg_PRBS_CONFIG_REG_array_field_set( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   N,
                                                   OTN_PRBS_REG_PRBS_CONFIG_REG_BIT_PRBS_CHID_MSK,
                                                   OTN_PRBS_REG_PRBS_CONFIG_REG_BIT_PRBS_CHID_OFF,
                                                   value);
}


#ifndef otn_prbs_field_PRBS_CHID_get
#define otn_prbs_field_PRBS_CHID_get( b, h, N ) \
       _otn_prbs_field_PRBS_CHID_get( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _otn_prbs_field_PRBS_CHID_get( LOG_CALLER_DEFN
                                                    otn_prbs_buffer_t *b,
                                                    otn_prbs_handle_t *h,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "otn_prbs_field_PRBS_CHID_get", N, 11);
    /* ((0x00000000 + (N) * 0x10) bits 14:8) field PRBS_CHID of register PMC_OTN_PRBS_REG_PRBS_CONFIG_REG index N=0..11 */
    reg_value = _otn_prbs_reg_PRBS_CONFIG_REG_array_read( LOG_CALLER_ARGS b, h, N);
    value = (reg_value & OTN_PRBS_REG_PRBS_CONFIG_REG_BIT_PRBS_CHID_MSK) >> OTN_PRBS_REG_PRBS_CONFIG_REG_BIT_PRBS_CHID_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "otn_prbs_field_PRBS_CHID_get", N, value );

    return value;
}

#ifndef otn_prbs_field_range_PRBS_CHID_set
#define otn_prbs_field_range_PRBS_CHID_set( b, h, N, start_bit, stop_bit, value ) \
       _otn_prbs_field_range_PRBS_CHID_set( LOG_CALLER b, h, N, start_bit, stop_bit, value )
#endif
static INLINE void _otn_prbs_field_range_PRBS_CHID_set( LOG_CALLER_DEFN
                                                        otn_prbs_buffer_t *b,
                                                        otn_prbs_handle_t *h,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "otn_prbs_field_range_PRBS_CHID_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "otn_prbs_field_range_PRBS_CHID_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "otn_prbs_field_range_PRBS_CHID_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "otn_prbs_field_range_PRBS_CHID_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* ((0x00000000 + (N) * 0x10) bits 14:8) field PRBS_CHID of register PMC_OTN_PRBS_REG_PRBS_CONFIG_REG index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 8) {
            subfield_offset = start_bit - 8;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  8 - start_bit;
            subfield_start_bit = 8;
        }
        if (stop_bit < 14) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 14;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000000 + (N) * 0x10) bits 14:8) field PRBS_CHID of register PMC_OTN_PRBS_REG_PRBS_CONFIG_REG index N=0..11 */
        _otn_prbs_reg_PRBS_CONFIG_REG_array_field_set( LOG_CALLER_ARGS
                                                       b,
                                                       h,
                                                       N,
                                                       subfield_mask << (OTN_PRBS_REG_PRBS_CONFIG_REG_BIT_PRBS_CHID_OFF + subfield_offset),
                                                       OTN_PRBS_REG_PRBS_CONFIG_REG_BIT_PRBS_CHID_OFF + subfield_offset,
                                                       value >> subfield_shift);
    }
}


#ifndef otn_prbs_field_range_PRBS_CHID_get
#define otn_prbs_field_range_PRBS_CHID_get( b, h, N, start_bit, stop_bit ) \
       _otn_prbs_field_range_PRBS_CHID_get( LOG_CALLER b, h, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _otn_prbs_field_range_PRBS_CHID_get( LOG_CALLER_DEFN
                                                          otn_prbs_buffer_t *b,
                                                          otn_prbs_handle_t *h,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "otn_prbs_field_range_PRBS_CHID_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "otn_prbs_field_range_PRBS_CHID_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "otn_prbs_field_range_PRBS_CHID_get", stop_bit, 6 );
    if (start_bit > 8) {
        subfield_offset = start_bit - 8;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 8 - start_bit;
        subfield_start_bit = 8;
    }
    if (stop_bit < 14) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 14;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000000 + (N) * 0x10) bits 14:8) field PRBS_CHID of register PMC_OTN_PRBS_REG_PRBS_CONFIG_REG index N=0..11 */
    reg_value = _otn_prbs_reg_PRBS_CONFIG_REG_array_read( LOG_CALLER_ARGS b, h, N);
    field_value = (reg_value & OTN_PRBS_REG_PRBS_CONFIG_REG_BIT_PRBS_CHID_MSK)
                  >> OTN_PRBS_REG_PRBS_CONFIG_REG_BIT_PRBS_CHID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OTN_PRBS_REG_PRBS_CONFIG_REG_BIT_PRBS_CHID_MSK, OTN_PRBS_REG_PRBS_CONFIG_REG_BIT_PRBS_CHID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "otn_prbs_field_range_PRBS_CHID_get", N, start_bit, stop_bit, value );

    return value;
}

#ifndef otn_prbs_field_PRBS_SEL_INV_NONINV_set
#define otn_prbs_field_PRBS_SEL_INV_NONINV_set( b, h, N, value ) \
       _otn_prbs_field_PRBS_SEL_INV_NONINV_set( LOG_CALLER b, h, N, value )
#endif
static INLINE void _otn_prbs_field_PRBS_SEL_INV_NONINV_set( LOG_CALLER_DEFN
                                                            otn_prbs_buffer_t *b,
                                                            otn_prbs_handle_t *h,
                                                            UINT32  N,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "otn_prbs_field_PRBS_SEL_INV_NONINV_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "otn_prbs_field_PRBS_SEL_INV_NONINV_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "otn_prbs_field_PRBS_SEL_INV_NONINV_set", N, value );

    /* ((0x00000000 + (N) * 0x10) bits 3) field PRBS_SEL_INV_NONINV of register PMC_OTN_PRBS_REG_PRBS_CONFIG_REG index N=0..11 */
    _otn_prbs_reg_PRBS_CONFIG_REG_array_field_set( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   N,
                                                   OTN_PRBS_REG_PRBS_CONFIG_REG_BIT_PRBS_SEL_INV_NONINV_MSK,
                                                   OTN_PRBS_REG_PRBS_CONFIG_REG_BIT_PRBS_SEL_INV_NONINV_OFF,
                                                   value);
}


#ifndef otn_prbs_field_PRBS_SEL_INV_NONINV_get
#define otn_prbs_field_PRBS_SEL_INV_NONINV_get( b, h, N ) \
       _otn_prbs_field_PRBS_SEL_INV_NONINV_get( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _otn_prbs_field_PRBS_SEL_INV_NONINV_get( LOG_CALLER_DEFN
                                                              otn_prbs_buffer_t *b,
                                                              otn_prbs_handle_t *h,
                                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "otn_prbs_field_PRBS_SEL_INV_NONINV_get", N, 11);
    /* ((0x00000000 + (N) * 0x10) bits 3) field PRBS_SEL_INV_NONINV of register PMC_OTN_PRBS_REG_PRBS_CONFIG_REG index N=0..11 */
    reg_value = _otn_prbs_reg_PRBS_CONFIG_REG_array_read( LOG_CALLER_ARGS b, h, N);
    value = (reg_value & OTN_PRBS_REG_PRBS_CONFIG_REG_BIT_PRBS_SEL_INV_NONINV_MSK) >> OTN_PRBS_REG_PRBS_CONFIG_REG_BIT_PRBS_SEL_INV_NONINV_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "otn_prbs_field_PRBS_SEL_INV_NONINV_get", N, value );

    return value;
}

#ifndef otn_prbs_field_PRBS_SEL_31_11_set
#define otn_prbs_field_PRBS_SEL_31_11_set( b, h, N, value ) \
       _otn_prbs_field_PRBS_SEL_31_11_set( LOG_CALLER b, h, N, value )
#endif
static INLINE void _otn_prbs_field_PRBS_SEL_31_11_set( LOG_CALLER_DEFN
                                                       otn_prbs_buffer_t *b,
                                                       otn_prbs_handle_t *h,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "otn_prbs_field_PRBS_SEL_31_11_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "otn_prbs_field_PRBS_SEL_31_11_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "otn_prbs_field_PRBS_SEL_31_11_set", N, value );

    /* ((0x00000000 + (N) * 0x10) bits 2) field PRBS_SEL_31_11 of register PMC_OTN_PRBS_REG_PRBS_CONFIG_REG index N=0..11 */
    _otn_prbs_reg_PRBS_CONFIG_REG_array_field_set( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   N,
                                                   OTN_PRBS_REG_PRBS_CONFIG_REG_BIT_PRBS_SEL_31_11_MSK,
                                                   OTN_PRBS_REG_PRBS_CONFIG_REG_BIT_PRBS_SEL_31_11_OFF,
                                                   value);
}


#ifndef otn_prbs_field_PRBS_SEL_31_11_get
#define otn_prbs_field_PRBS_SEL_31_11_get( b, h, N ) \
       _otn_prbs_field_PRBS_SEL_31_11_get( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _otn_prbs_field_PRBS_SEL_31_11_get( LOG_CALLER_DEFN
                                                         otn_prbs_buffer_t *b,
                                                         otn_prbs_handle_t *h,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "otn_prbs_field_PRBS_SEL_31_11_get", N, 11);
    /* ((0x00000000 + (N) * 0x10) bits 2) field PRBS_SEL_31_11 of register PMC_OTN_PRBS_REG_PRBS_CONFIG_REG index N=0..11 */
    reg_value = _otn_prbs_reg_PRBS_CONFIG_REG_array_read( LOG_CALLER_ARGS b, h, N);
    value = (reg_value & OTN_PRBS_REG_PRBS_CONFIG_REG_BIT_PRBS_SEL_31_11_MSK) >> OTN_PRBS_REG_PRBS_CONFIG_REG_BIT_PRBS_SEL_31_11_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "otn_prbs_field_PRBS_SEL_31_11_get", N, value );

    return value;
}

#ifndef otn_prbs_field_PRBS_MON_EN_set
#define otn_prbs_field_PRBS_MON_EN_set( b, h, N, value ) \
       _otn_prbs_field_PRBS_MON_EN_set( LOG_CALLER b, h, N, value )
#endif
static INLINE void _otn_prbs_field_PRBS_MON_EN_set( LOG_CALLER_DEFN
                                                    otn_prbs_buffer_t *b,
                                                    otn_prbs_handle_t *h,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "otn_prbs_field_PRBS_MON_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "otn_prbs_field_PRBS_MON_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "otn_prbs_field_PRBS_MON_EN_set", N, value );

    /* ((0x00000000 + (N) * 0x10) bits 1) field PRBS_MON_EN of register PMC_OTN_PRBS_REG_PRBS_CONFIG_REG index N=0..11 */
    _otn_prbs_reg_PRBS_CONFIG_REG_array_field_set( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   N,
                                                   OTN_PRBS_REG_PRBS_CONFIG_REG_BIT_PRBS_MON_EN_MSK,
                                                   OTN_PRBS_REG_PRBS_CONFIG_REG_BIT_PRBS_MON_EN_OFF,
                                                   value);
}


#ifndef otn_prbs_field_PRBS_MON_EN_get
#define otn_prbs_field_PRBS_MON_EN_get( b, h, N ) \
       _otn_prbs_field_PRBS_MON_EN_get( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _otn_prbs_field_PRBS_MON_EN_get( LOG_CALLER_DEFN
                                                      otn_prbs_buffer_t *b,
                                                      otn_prbs_handle_t *h,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "otn_prbs_field_PRBS_MON_EN_get", N, 11);
    /* ((0x00000000 + (N) * 0x10) bits 1) field PRBS_MON_EN of register PMC_OTN_PRBS_REG_PRBS_CONFIG_REG index N=0..11 */
    reg_value = _otn_prbs_reg_PRBS_CONFIG_REG_array_read( LOG_CALLER_ARGS b, h, N);
    value = (reg_value & OTN_PRBS_REG_PRBS_CONFIG_REG_BIT_PRBS_MON_EN_MSK) >> OTN_PRBS_REG_PRBS_CONFIG_REG_BIT_PRBS_MON_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "otn_prbs_field_PRBS_MON_EN_get", N, value );

    return value;
}

#ifndef otn_prbs_field_PRBS_GEN_EN_set
#define otn_prbs_field_PRBS_GEN_EN_set( b, h, N, value ) \
       _otn_prbs_field_PRBS_GEN_EN_set( LOG_CALLER b, h, N, value )
#endif
static INLINE void _otn_prbs_field_PRBS_GEN_EN_set( LOG_CALLER_DEFN
                                                    otn_prbs_buffer_t *b,
                                                    otn_prbs_handle_t *h,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "otn_prbs_field_PRBS_GEN_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "otn_prbs_field_PRBS_GEN_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "otn_prbs_field_PRBS_GEN_EN_set", N, value );

    /* ((0x00000000 + (N) * 0x10) bits 0) field PRBS_GEN_EN of register PMC_OTN_PRBS_REG_PRBS_CONFIG_REG index N=0..11 */
    _otn_prbs_reg_PRBS_CONFIG_REG_array_field_set( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   N,
                                                   OTN_PRBS_REG_PRBS_CONFIG_REG_BIT_PRBS_GEN_EN_MSK,
                                                   OTN_PRBS_REG_PRBS_CONFIG_REG_BIT_PRBS_GEN_EN_OFF,
                                                   value);
}


#ifndef otn_prbs_field_PRBS_GEN_EN_get
#define otn_prbs_field_PRBS_GEN_EN_get( b, h, N ) \
       _otn_prbs_field_PRBS_GEN_EN_get( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _otn_prbs_field_PRBS_GEN_EN_get( LOG_CALLER_DEFN
                                                      otn_prbs_buffer_t *b,
                                                      otn_prbs_handle_t *h,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "otn_prbs_field_PRBS_GEN_EN_get", N, 11);
    /* ((0x00000000 + (N) * 0x10) bits 0) field PRBS_GEN_EN of register PMC_OTN_PRBS_REG_PRBS_CONFIG_REG index N=0..11 */
    reg_value = _otn_prbs_reg_PRBS_CONFIG_REG_array_read( LOG_CALLER_ARGS b, h, N);
    value = (reg_value & OTN_PRBS_REG_PRBS_CONFIG_REG_BIT_PRBS_GEN_EN_MSK) >> OTN_PRBS_REG_PRBS_CONFIG_REG_BIT_PRBS_GEN_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "otn_prbs_field_PRBS_GEN_EN_get", N, value );

    return value;
}

#ifndef otn_prbs_field_PRBS_INS_DEFECT_set
#define otn_prbs_field_PRBS_INS_DEFECT_set( b, h, N, value ) \
       _otn_prbs_field_PRBS_INS_DEFECT_set( LOG_CALLER b, h, N, value )
#endif
static INLINE void _otn_prbs_field_PRBS_INS_DEFECT_set( LOG_CALLER_DEFN
                                                        otn_prbs_buffer_t *b,
                                                        otn_prbs_handle_t *h,
                                                        UINT32  N,
                                                        UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "otn_prbs_field_PRBS_INS_DEFECT_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "otn_prbs_field_PRBS_INS_DEFECT_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "otn_prbs_field_PRBS_INS_DEFECT_set", N, value );

    /* ((0x00000004 + (N) * 0x10) bits 0) field PRBS_INS_DEFECT of register PMC_OTN_PRBS_REG_PRBS_DEFECT_CONFIG_REG index N=0..11 */
    _otn_prbs_reg_PRBS_DEFECT_CONFIG_REG_array_field_set( LOG_CALLER_ARGS
                                                          b,
                                                          h,
                                                          N,
                                                          OTN_PRBS_REG_PRBS_DEFECT_CONFIG_REG_BIT_PRBS_INS_DEFECT_MSK,
                                                          OTN_PRBS_REG_PRBS_DEFECT_CONFIG_REG_BIT_PRBS_INS_DEFECT_OFF,
                                                          value);
}


#ifndef otn_prbs_field_PRBS_INS_DEFECT_get
#define otn_prbs_field_PRBS_INS_DEFECT_get( b, h, N ) \
       _otn_prbs_field_PRBS_INS_DEFECT_get( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _otn_prbs_field_PRBS_INS_DEFECT_get( LOG_CALLER_DEFN
                                                          otn_prbs_buffer_t *b,
                                                          otn_prbs_handle_t *h,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "otn_prbs_field_PRBS_INS_DEFECT_get", N, 11);
    /* ((0x00000004 + (N) * 0x10) bits 0) field PRBS_INS_DEFECT of register PMC_OTN_PRBS_REG_PRBS_DEFECT_CONFIG_REG index N=0..11 */
    reg_value = _otn_prbs_reg_PRBS_DEFECT_CONFIG_REG_array_read( LOG_CALLER_ARGS
                                                                 b,
                                                                 h,
                                                                 N);
    value = (reg_value & OTN_PRBS_REG_PRBS_DEFECT_CONFIG_REG_BIT_PRBS_INS_DEFECT_MSK) >> OTN_PRBS_REG_PRBS_DEFECT_CONFIG_REG_BIT_PRBS_INS_DEFECT_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "otn_prbs_field_PRBS_INS_DEFECT_get", N, value );

    return value;
}

/*
 * ==================================================================================
 *                Parameter Access Functions for Paramset int_enable
 * ==================================================================================
 */

#ifndef otn_prbs_field_PRBS_DLSS_E_set
#define otn_prbs_field_PRBS_DLSS_E_set( b, h, value ) \
       _otn_prbs_field_PRBS_DLSS_E_set( LOG_CALLER b, h, value )
#endif
static INLINE void _otn_prbs_field_PRBS_DLSS_E_set( LOG_CALLER_DEFN
                                                    otn_prbs_buffer_t *b,
                                                    otn_prbs_handle_t *h,
                                                    UINT32 value )
{
    if (value > 4095)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "otn_prbs_field_PRBS_DLSS_E_set", value, 4095);
    IOLOG( "%s <= 0x%08x", "otn_prbs_field_PRBS_DLSS_E_set", value );

    /* (0x000000d8 bits 11:0) field PRBS_DLSS_E of register PMC_OTN_PRBS_REG_PRBS_DLSS_INT_EN_REG */
    _otn_prbs_reg_PRBS_DLSS_INT_EN_REG_field_set( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  OTN_PRBS_REG_PRBS_DLSS_INT_EN_REG_BIT_PRBS_DLSS_E_MSK,
                                                  OTN_PRBS_REG_PRBS_DLSS_INT_EN_REG_BIT_PRBS_DLSS_E_OFF,
                                                  value);
}


#ifndef otn_prbs_field_PRBS_DLSS_E_get
#define otn_prbs_field_PRBS_DLSS_E_get( b, h ) \
       _otn_prbs_field_PRBS_DLSS_E_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _otn_prbs_field_PRBS_DLSS_E_get( LOG_CALLER_DEFN otn_prbs_buffer_t *b, otn_prbs_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000d8 bits 11:0) field PRBS_DLSS_E of register PMC_OTN_PRBS_REG_PRBS_DLSS_INT_EN_REG */
    reg_value = _otn_prbs_reg_PRBS_DLSS_INT_EN_REG_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OTN_PRBS_REG_PRBS_DLSS_INT_EN_REG_BIT_PRBS_DLSS_E_MSK) >> OTN_PRBS_REG_PRBS_DLSS_INT_EN_REG_BIT_PRBS_DLSS_E_OFF;
    IOLOG( "%s -> 0x%08x", "otn_prbs_field_PRBS_DLSS_E_get", value );

    return value;
}

#ifndef otn_prbs_field_range_PRBS_DLSS_E_set
#define otn_prbs_field_range_PRBS_DLSS_E_set( b, h, start_bit, stop_bit, value ) \
       _otn_prbs_field_range_PRBS_DLSS_E_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _otn_prbs_field_range_PRBS_DLSS_E_set( LOG_CALLER_DEFN
                                                          otn_prbs_buffer_t *b,
                                                          otn_prbs_handle_t *h,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "otn_prbs_field_range_PRBS_DLSS_E_set", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "otn_prbs_field_range_PRBS_DLSS_E_set", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "otn_prbs_field_range_PRBS_DLSS_E_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000000d8 bits 11:0) field PRBS_DLSS_E of register PMC_OTN_PRBS_REG_PRBS_DLSS_INT_EN_REG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000d8 bits 11:0) field PRBS_DLSS_E of register PMC_OTN_PRBS_REG_PRBS_DLSS_INT_EN_REG */
        _otn_prbs_reg_PRBS_DLSS_INT_EN_REG_field_set( LOG_CALLER_ARGS
                                                      b,
                                                      h,
                                                      subfield_mask << (OTN_PRBS_REG_PRBS_DLSS_INT_EN_REG_BIT_PRBS_DLSS_E_OFF + subfield_offset),
                                                      OTN_PRBS_REG_PRBS_DLSS_INT_EN_REG_BIT_PRBS_DLSS_E_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}


#ifndef otn_prbs_field_range_PRBS_DLSS_E_get
#define otn_prbs_field_range_PRBS_DLSS_E_get( b, h, start_bit, stop_bit ) \
       _otn_prbs_field_range_PRBS_DLSS_E_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _otn_prbs_field_range_PRBS_DLSS_E_get( LOG_CALLER_DEFN
                                                            otn_prbs_buffer_t *b,
                                                            otn_prbs_handle_t *h,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "otn_prbs_field_range_PRBS_DLSS_E_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "otn_prbs_field_range_PRBS_DLSS_E_get", stop_bit, 11 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 11) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 11;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000d8 bits 11:0) field PRBS_DLSS_E of register PMC_OTN_PRBS_REG_PRBS_DLSS_INT_EN_REG */
    reg_value = _otn_prbs_reg_PRBS_DLSS_INT_EN_REG_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OTN_PRBS_REG_PRBS_DLSS_INT_EN_REG_BIT_PRBS_DLSS_E_MSK)
                  >> OTN_PRBS_REG_PRBS_DLSS_INT_EN_REG_BIT_PRBS_DLSS_E_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OTN_PRBS_REG_PRBS_DLSS_INT_EN_REG_BIT_PRBS_DLSS_E_MSK, OTN_PRBS_REG_PRBS_DLSS_INT_EN_REG_BIT_PRBS_DLSS_E_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "otn_prbs_field_range_PRBS_DLSS_E_get", start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 *                 Parameter Access Functions for Paramset int_sync
 * ==================================================================================
 */

#ifndef otn_prbs_field_PRBS_DLSS_I_set_to_clear
#define otn_prbs_field_PRBS_DLSS_I_set_to_clear( b, h, value ) \
       _otn_prbs_field_PRBS_DLSS_I_set_to_clear( LOG_CALLER b, h, value )
#endif
static INLINE void _otn_prbs_field_PRBS_DLSS_I_set_to_clear( LOG_CALLER_DEFN
                                                             otn_prbs_buffer_t *b,
                                                             otn_prbs_handle_t *h,
                                                             UINT32 value )
{
    if (value > 4095)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "otn_prbs_field_PRBS_DLSS_I_set_to_clear", value, 4095);
    IOLOG( "%s <= 0x%08x", "otn_prbs_field_PRBS_DLSS_I_set_to_clear", value );

    /* (0x000000dc bits 11:0) field PRBS_DLSS_I of register PMC_OTN_PRBS_REG_PRBS_DLSS_INT_STAT_REG */
    _otn_prbs_reg_PRBS_DLSS_INT_STAT_REG_action_on_write_field_set( LOG_CALLER_ARGS
                                                                    b,
                                                                    h,
                                                                    OTN_PRBS_REG_PRBS_DLSS_INT_STAT_REG_BIT_PRBS_DLSS_I_MSK,
                                                                    OTN_PRBS_REG_PRBS_DLSS_INT_STAT_REG_BIT_PRBS_DLSS_I_OFF,
                                                                    value);
}


#ifndef otn_prbs_field_PRBS_DLSS_I_get
#define otn_prbs_field_PRBS_DLSS_I_get( b, h ) \
       _otn_prbs_field_PRBS_DLSS_I_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _otn_prbs_field_PRBS_DLSS_I_get( LOG_CALLER_DEFN otn_prbs_buffer_t *b, otn_prbs_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000dc bits 11:0) field PRBS_DLSS_I of register PMC_OTN_PRBS_REG_PRBS_DLSS_INT_STAT_REG */
    reg_value = _otn_prbs_reg_PRBS_DLSS_INT_STAT_REG_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OTN_PRBS_REG_PRBS_DLSS_INT_STAT_REG_BIT_PRBS_DLSS_I_MSK) >> OTN_PRBS_REG_PRBS_DLSS_INT_STAT_REG_BIT_PRBS_DLSS_I_OFF;
    IOLOG( "%s -> 0x%08x", "otn_prbs_field_PRBS_DLSS_I_get", value );

    return value;
}

#ifndef otn_prbs_field_range_PRBS_DLSS_I_set_to_clear
#define otn_prbs_field_range_PRBS_DLSS_I_set_to_clear( b, h, start_bit, stop_bit, value ) \
       _otn_prbs_field_range_PRBS_DLSS_I_set_to_clear( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _otn_prbs_field_range_PRBS_DLSS_I_set_to_clear( LOG_CALLER_DEFN
                                                                   otn_prbs_buffer_t *b,
                                                                   otn_prbs_handle_t *h,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "otn_prbs_field_range_PRBS_DLSS_I_set_to_clear", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "otn_prbs_field_range_PRBS_DLSS_I_set_to_clear", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "otn_prbs_field_range_PRBS_DLSS_I_set_to_clear", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000000dc bits 11:0) field PRBS_DLSS_I of register PMC_OTN_PRBS_REG_PRBS_DLSS_INT_STAT_REG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000dc bits 11:0) field PRBS_DLSS_I of register PMC_OTN_PRBS_REG_PRBS_DLSS_INT_STAT_REG */
        _otn_prbs_reg_PRBS_DLSS_INT_STAT_REG_action_on_write_field_set( LOG_CALLER_ARGS
                                                                        b,
                                                                        h,
                                                                        subfield_mask << (OTN_PRBS_REG_PRBS_DLSS_INT_STAT_REG_BIT_PRBS_DLSS_I_OFF + subfield_offset),
                                                                        OTN_PRBS_REG_PRBS_DLSS_INT_STAT_REG_BIT_PRBS_DLSS_I_OFF + subfield_offset,
                                                                        value >> subfield_shift);
    }
}


#ifndef otn_prbs_field_range_PRBS_DLSS_I_get
#define otn_prbs_field_range_PRBS_DLSS_I_get( b, h, start_bit, stop_bit ) \
       _otn_prbs_field_range_PRBS_DLSS_I_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _otn_prbs_field_range_PRBS_DLSS_I_get( LOG_CALLER_DEFN
                                                            otn_prbs_buffer_t *b,
                                                            otn_prbs_handle_t *h,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "otn_prbs_field_range_PRBS_DLSS_I_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "otn_prbs_field_range_PRBS_DLSS_I_get", stop_bit, 11 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 11) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 11;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000dc bits 11:0) field PRBS_DLSS_I of register PMC_OTN_PRBS_REG_PRBS_DLSS_INT_STAT_REG */
    reg_value = _otn_prbs_reg_PRBS_DLSS_INT_STAT_REG_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OTN_PRBS_REG_PRBS_DLSS_INT_STAT_REG_BIT_PRBS_DLSS_I_MSK)
                  >> OTN_PRBS_REG_PRBS_DLSS_INT_STAT_REG_BIT_PRBS_DLSS_I_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OTN_PRBS_REG_PRBS_DLSS_INT_STAT_REG_BIT_PRBS_DLSS_I_MSK, OTN_PRBS_REG_PRBS_DLSS_INT_STAT_REG_BIT_PRBS_DLSS_I_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "otn_prbs_field_range_PRBS_DLSS_I_get", start_bit, stop_bit, value );

    return value;
}

#ifndef otn_prbs_field_range_PRBS_DLSS_I_poll_bit
#define otn_prbs_field_range_PRBS_DLSS_I_poll_bit( b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _otn_prbs_field_range_PRBS_DLSS_I_poll_bit( LOG_CALLER b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _otn_prbs_field_range_PRBS_DLSS_I_poll_bit( LOG_CALLER_DEFN
                                                                    otn_prbs_buffer_t *b,
                                                                    otn_prbs_handle_t *h,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "otn_prbs_field_range_PRBS_DLSS_I_poll_bit", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "otn_prbs_field_range_PRBS_DLSS_I_poll_bit", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "otn_prbs_field_range_PRBS_DLSS_I_poll_bit", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000000dc bits 11:0) field PRBS_DLSS_I of register PMC_OTN_PRBS_REG_PRBS_DLSS_INT_STAT_REG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000dc bits 11:0) field PRBS_DLSS_I of register PMC_OTN_PRBS_REG_PRBS_DLSS_INT_STAT_REG */
        return _otn_prbs_reg_PRBS_DLSS_INT_STAT_REG_poll_bit( LOG_CALLER_ARGS
                                                              b,
                                                              h,
                                                              subfield_mask << (OTN_PRBS_REG_PRBS_DLSS_INT_STAT_REG_BIT_PRBS_DLSS_I_OFF + subfield_offset),
                                                              value << (OTN_PRBS_REG_PRBS_DLSS_INT_STAT_REG_BIT_PRBS_DLSS_I_OFF + subfield_offset),
                                                              max_count,
                                                              num_failed_polls,
                                                              delay_between_polls_in_microseconds);
    }
    return PMC_ERR_INVALID_PARAMETERS;
}


#ifndef otn_prbs_field_PRBS_DLSS_I_poll_bit
#define otn_prbs_field_PRBS_DLSS_I_poll_bit( b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _otn_prbs_field_PRBS_DLSS_I_poll_bit( LOG_CALLER b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _otn_prbs_field_PRBS_DLSS_I_poll_bit( LOG_CALLER_DEFN
                                                              otn_prbs_buffer_t *b,
                                                              otn_prbs_handle_t *h,
                                                              UINT32 value,
                                                              UINT32 max_count,
                                                              UINT32 *num_failed_polls,
                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "otn_prbs_field_PRBS_DLSS_I_poll_bit", value );

    /* (0x000000dc bits 11:0) field PRBS_DLSS_I of register PMC_OTN_PRBS_REG_PRBS_DLSS_INT_STAT_REG */
    return _otn_prbs_reg_PRBS_DLSS_INT_STAT_REG_poll_bit( LOG_CALLER_ARGS
                                                          b,
                                                          h,
                                                          OTN_PRBS_REG_PRBS_DLSS_INT_STAT_REG_BIT_PRBS_DLSS_I_MSK,
                                                          (value<<OTN_PRBS_REG_PRBS_DLSS_INT_STAT_REG_BIT_PRBS_DLSS_I_OFF),
                                                          max_count,
                                                          num_failed_polls,
                                                          delay_between_polls_in_microseconds);
}


/*
 * ==================================================================================
 *                Parameter Access Functions for Paramset int_value
 * ==================================================================================
 */

#ifndef otn_prbs_field_PRBS_DLSS_V_get
#define otn_prbs_field_PRBS_DLSS_V_get( b, h ) \
       _otn_prbs_field_PRBS_DLSS_V_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _otn_prbs_field_PRBS_DLSS_V_get( LOG_CALLER_DEFN otn_prbs_buffer_t *b, otn_prbs_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000e0 bits 11:0) field PRBS_DLSS_V of register PMC_OTN_PRBS_REG_PRBS_DLSS_INT_VAL_REG */
    reg_value = _otn_prbs_reg_PRBS_DLSS_INT_VAL_REG_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OTN_PRBS_REG_PRBS_DLSS_INT_VAL_REG_BIT_PRBS_DLSS_V_MSK) >> OTN_PRBS_REG_PRBS_DLSS_INT_VAL_REG_BIT_PRBS_DLSS_V_OFF;
    IOLOG( "%s -> 0x%08x", "otn_prbs_field_PRBS_DLSS_V_get", value );

    return value;
}

#ifndef otn_prbs_field_range_PRBS_DLSS_V_get
#define otn_prbs_field_range_PRBS_DLSS_V_get( b, h, start_bit, stop_bit ) \
       _otn_prbs_field_range_PRBS_DLSS_V_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _otn_prbs_field_range_PRBS_DLSS_V_get( LOG_CALLER_DEFN
                                                            otn_prbs_buffer_t *b,
                                                            otn_prbs_handle_t *h,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "otn_prbs_field_range_PRBS_DLSS_V_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "otn_prbs_field_range_PRBS_DLSS_V_get", stop_bit, 11 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 11) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 11;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000e0 bits 11:0) field PRBS_DLSS_V of register PMC_OTN_PRBS_REG_PRBS_DLSS_INT_VAL_REG */
    reg_value = _otn_prbs_reg_PRBS_DLSS_INT_VAL_REG_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OTN_PRBS_REG_PRBS_DLSS_INT_VAL_REG_BIT_PRBS_DLSS_V_MSK)
                  >> OTN_PRBS_REG_PRBS_DLSS_INT_VAL_REG_BIT_PRBS_DLSS_V_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OTN_PRBS_REG_PRBS_DLSS_INT_VAL_REG_BIT_PRBS_DLSS_V_MSK, OTN_PRBS_REG_PRBS_DLSS_INT_VAL_REG_BIT_PRBS_DLSS_V_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "otn_prbs_field_range_PRBS_DLSS_V_get", start_bit, stop_bit, value );

    return value;
}

#ifndef otn_prbs_field_range_PRBS_DLSS_V_poll_bit
#define otn_prbs_field_range_PRBS_DLSS_V_poll_bit( b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _otn_prbs_field_range_PRBS_DLSS_V_poll_bit( LOG_CALLER b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _otn_prbs_field_range_PRBS_DLSS_V_poll_bit( LOG_CALLER_DEFN
                                                                    otn_prbs_buffer_t *b,
                                                                    otn_prbs_handle_t *h,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "otn_prbs_field_range_PRBS_DLSS_V_poll_bit", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "otn_prbs_field_range_PRBS_DLSS_V_poll_bit", stop_bit, 11 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "otn_prbs_field_range_PRBS_DLSS_V_poll_bit", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000000e0 bits 11:0) field PRBS_DLSS_V of register PMC_OTN_PRBS_REG_PRBS_DLSS_INT_VAL_REG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000e0 bits 11:0) field PRBS_DLSS_V of register PMC_OTN_PRBS_REG_PRBS_DLSS_INT_VAL_REG */
        return _otn_prbs_reg_PRBS_DLSS_INT_VAL_REG_poll_bit( LOG_CALLER_ARGS
                                                             b,
                                                             h,
                                                             subfield_mask << (OTN_PRBS_REG_PRBS_DLSS_INT_VAL_REG_BIT_PRBS_DLSS_V_OFF + subfield_offset),
                                                             value << (OTN_PRBS_REG_PRBS_DLSS_INT_VAL_REG_BIT_PRBS_DLSS_V_OFF + subfield_offset),
                                                             max_count,
                                                             num_failed_polls,
                                                             delay_between_polls_in_microseconds);
    }
    return PMC_ERR_INVALID_PARAMETERS;
}


#ifndef otn_prbs_field_PRBS_DLSS_V_poll_bit
#define otn_prbs_field_PRBS_DLSS_V_poll_bit( b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _otn_prbs_field_PRBS_DLSS_V_poll_bit( LOG_CALLER b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _otn_prbs_field_PRBS_DLSS_V_poll_bit( LOG_CALLER_DEFN
                                                              otn_prbs_buffer_t *b,
                                                              otn_prbs_handle_t *h,
                                                              UINT32 value,
                                                              UINT32 max_count,
                                                              UINT32 *num_failed_polls,
                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "otn_prbs_field_PRBS_DLSS_V_poll_bit", value );

    /* (0x000000e0 bits 11:0) field PRBS_DLSS_V of register PMC_OTN_PRBS_REG_PRBS_DLSS_INT_VAL_REG */
    return _otn_prbs_reg_PRBS_DLSS_INT_VAL_REG_poll_bit( LOG_CALLER_ARGS
                                                         b,
                                                         h,
                                                         OTN_PRBS_REG_PRBS_DLSS_INT_VAL_REG_BIT_PRBS_DLSS_V_MSK,
                                                         (value<<OTN_PRBS_REG_PRBS_DLSS_INT_VAL_REG_BIT_PRBS_DLSS_V_OFF),
                                                         max_count,
                                                         num_failed_polls,
                                                         delay_between_polls_in_microseconds);
}


/*
 * ==================================================================================
 *                  Parameter Access Functions for Paramset status
 * ==================================================================================
 */

#ifndef otn_prbs_field_PRBS_TSE_ROVER_get
#define otn_prbs_field_PRBS_TSE_ROVER_get( b, h ) \
       _otn_prbs_field_PRBS_TSE_ROVER_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _otn_prbs_field_PRBS_TSE_ROVER_get( LOG_CALLER_DEFN otn_prbs_buffer_t *b, otn_prbs_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000d4 bits 11:0) field PRBS_TSE_ROVER of register PMC_OTN_PRBS_REG_PRBS_TSE_ROLLOVER_STAT_REG */
    reg_value = _otn_prbs_reg_PRBS_TSE_ROLLOVER_STAT_REG_read( LOG_CALLER_ARGS
                                                               b,
                                                               h);
    value = (reg_value & OTN_PRBS_REG_PRBS_TSE_ROLLOVER_STAT_REG_BIT_PRBS_TSE_ROVER_MSK) >> OTN_PRBS_REG_PRBS_TSE_ROLLOVER_STAT_REG_BIT_PRBS_TSE_ROVER_OFF;
    IOLOG( "%s -> 0x%08x", "otn_prbs_field_PRBS_TSE_ROVER_get", value );

    return value;
}

#ifndef otn_prbs_field_range_PRBS_TSE_ROVER_get
#define otn_prbs_field_range_PRBS_TSE_ROVER_get( b, h, start_bit, stop_bit ) \
       _otn_prbs_field_range_PRBS_TSE_ROVER_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _otn_prbs_field_range_PRBS_TSE_ROVER_get( LOG_CALLER_DEFN
                                                               otn_prbs_buffer_t *b,
                                                               otn_prbs_handle_t *h,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "otn_prbs_field_range_PRBS_TSE_ROVER_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "otn_prbs_field_range_PRBS_TSE_ROVER_get", stop_bit, 11 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 11) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 11;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000d4 bits 11:0) field PRBS_TSE_ROVER of register PMC_OTN_PRBS_REG_PRBS_TSE_ROLLOVER_STAT_REG */
    reg_value = _otn_prbs_reg_PRBS_TSE_ROLLOVER_STAT_REG_read( LOG_CALLER_ARGS
                                                               b,
                                                               h);
    field_value = (reg_value & OTN_PRBS_REG_PRBS_TSE_ROLLOVER_STAT_REG_BIT_PRBS_TSE_ROVER_MSK)
                  >> OTN_PRBS_REG_PRBS_TSE_ROLLOVER_STAT_REG_BIT_PRBS_TSE_ROVER_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OTN_PRBS_REG_PRBS_TSE_ROLLOVER_STAT_REG_BIT_PRBS_TSE_ROVER_MSK, OTN_PRBS_REG_PRBS_TSE_ROLLOVER_STAT_REG_BIT_PRBS_TSE_ROVER_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "otn_prbs_field_range_PRBS_TSE_ROVER_get", start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 *             Parameter Access Functions for Paramset status_N_size12
 * ==================================================================================
 */

#ifndef otn_prbs_field_PRBS_TSE_CHAN_REG_get
#define otn_prbs_field_PRBS_TSE_CHAN_REG_get( b, h, N ) \
       _otn_prbs_field_PRBS_TSE_CHAN_REG_get( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _otn_prbs_field_PRBS_TSE_CHAN_REG_get( LOG_CALLER_DEFN
                                                            otn_prbs_buffer_t *b,
                                                            otn_prbs_handle_t *h,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "otn_prbs_field_PRBS_TSE_CHAN_REG_get", N, 11);
    /* ((0x00000008 + (N) * 0x10) bits 31:0) bits 0:31 use field PRBS_TSE_CHAN_REG of register PMC_OTN_PRBS_REG_PRBS_TSE_STAT_REG index N=0..11 */
    reg_value = _otn_prbs_reg_PRBS_TSE_STAT_REG_array_read( LOG_CALLER_ARGS
                                                            b,
                                                            h,
                                                            N);
    value = (reg_value & OTN_PRBS_REG_PRBS_TSE_STAT_REG_BIT_PRBS_TSE_CHAN_REG_MSK) >> OTN_PRBS_REG_PRBS_TSE_STAT_REG_BIT_PRBS_TSE_CHAN_REG_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "otn_prbs_field_PRBS_TSE_CHAN_REG_get", N, value );

    return value;
}

#ifndef otn_prbs_field_range_PRBS_TSE_CHAN_REG_get
#define otn_prbs_field_range_PRBS_TSE_CHAN_REG_get( b, h, N, start_bit, stop_bit ) \
       _otn_prbs_field_range_PRBS_TSE_CHAN_REG_get( LOG_CALLER b, h, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _otn_prbs_field_range_PRBS_TSE_CHAN_REG_get( LOG_CALLER_DEFN
                                                                  otn_prbs_buffer_t *b,
                                                                  otn_prbs_handle_t *h,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "otn_prbs_field_range_PRBS_TSE_CHAN_REG_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "otn_prbs_field_range_PRBS_TSE_CHAN_REG_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "otn_prbs_field_range_PRBS_TSE_CHAN_REG_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000008 + (N) * 0x10) bits 31:0) bits 0:31 use field PRBS_TSE_CHAN_REG of register PMC_OTN_PRBS_REG_PRBS_TSE_STAT_REG index N=0..11 */
    reg_value = _otn_prbs_reg_PRBS_TSE_STAT_REG_array_read( LOG_CALLER_ARGS
                                                            b,
                                                            h,
                                                            N);
    field_value = (reg_value & OTN_PRBS_REG_PRBS_TSE_STAT_REG_BIT_PRBS_TSE_CHAN_REG_MSK)
                  >> OTN_PRBS_REG_PRBS_TSE_STAT_REG_BIT_PRBS_TSE_CHAN_REG_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OTN_PRBS_REG_PRBS_TSE_STAT_REG_BIT_PRBS_TSE_CHAN_REG_MSK, OTN_PRBS_REG_PRBS_TSE_STAT_REG_BIT_PRBS_TSE_CHAN_REG_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "otn_prbs_field_range_PRBS_TSE_CHAN_REG_get", N, start_bit, stop_bit, value );

    return value;
}

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* _OTN_PRBS_IO_INLINE_H */
