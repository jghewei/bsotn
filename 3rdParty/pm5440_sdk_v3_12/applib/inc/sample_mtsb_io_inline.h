/******************************************************************************
 *   COPYRIGHT (C) 2011 PMC-SIERRA, INC. ALL RIGHTS RESERVED.
 * --------------------------------------------------------------------------
 *  This software embodies materials and concepts which are proprietary and
 *  confidential to PMC-Sierra, Inc.
 *  PMC-Sierra distributes this software to its customers pursuant to the
 *  terms and conditions of the Software License Agreement
 *  contained in the text file software.lic that is distributed along with
 *  the software. This software can only be utilized if all
 *  terms and conditions of the Software License Agreement are
 *  accepted. If there are any questions, concerns, or if the
 *  Software License Agreement text file, software.lic, is missing please
 *  contact PMC-Sierra for assistance.
 * -------------------------------------------------------------------------
 *   DESCRIPTION:
 *     contains the inline implementation of all the field accessor functions
 *     and register accessor functions for the sample_mtsb block
 * 
 *   NOTES:
 *     This file is generated by the script codegen.pm, version 1.1
 *     Do not modify this file.
 * 
 *     The input file is ../src/ioxml/pm1234_map.xml
 *     block_uri "file:../docs/rda/pm1001_reg.xml"
 *     block_part_number "PM1234"
 *     block_mnemonic "SAMPLE_MTSB"
 * 
 *****************************************************************************/
#ifndef _SAMPLE_MTSB_IO_INLINE_H
#define _SAMPLE_MTSB_IO_INLINE_H

#include "sample_mtsb_loc.h"
#include "pmc_sys.h"
#include "pmc_types.h"
#include "sample_mtsb_regs.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * ==================================================================================
 *             tsb level structure and access functions for sample_mtsb
 * ==================================================================================
 */
/* if logging is disabled then so is IO_LOGGING */
#ifndef NO_IO_LOGGING
# ifdef LOGGING_DISABLED
#  define NO_IO_LOGGING
# endif
#endif

/* log messages in the generated files log the caller's file/line/function instead of itself.*/
#ifndef IOLOG
# ifdef NO_IO_LOGGING
#  define IOLOG(...)
# else
#  define IOLOG(...) vaLog( LOG_CALLER_ARGS __VA_ARGS__)
# endif
#endif
#ifndef IO_RANGE_CHECK
# ifdef NO_IO_LOGGING
#  define IO_RANGE_CHECK(...)
# else
#  define IO_RANGE_CHECK(...) vaLog( LOG_CALLER_ARGS "** range check ** " __VA_ARGS__)
# endif
#endif
#ifndef IOLOG_DATA
# ifdef NO_IO_LOGGING
#  define IOLOG_DATA(...)
# else
#  define IOLOG_DATA(...) vaLogData( LOG_CALLER_ARGS __VA_ARGS__)
# endif
#endif
typedef struct {
    coalesce_buffer_t coalesce_handle[1]; /* only used if register coalescing is enabled */
    sample_mtsb_handle_t * h;
    pmc_sys_handle_t sys_handle;
    const UINT32 base_address;
    /* maybe eventually need to add some fields here per io handle */
} sample_mtsb_buffer_t;

#ifndef sample_mtsb_buffer_init
#define sample_mtsb_buffer_init( b, h ) \
       _sample_mtsb_buffer_init( LOG_CALLER b, h )
#endif
static INLINE void _sample_mtsb_buffer_init( LOG_CALLER_DEFN sample_mtsb_buffer_t *b, sample_mtsb_handle_t *h )
{
    b->h = h;
    b->sys_handle = ((pmc_handle_t *)h)->sys_handle;
    *(UINT32 *)&b->base_address = ((pmc_handle_t *)h)->base_address;
    /* currently this just checks that the previous function remembered to flush. */
    l1sys_init( b->coalesce_handle, (void**)b->sys_handle );
    IOLOG( "%s", "sample_mtsb_buffer_init");
    
}

#ifndef sample_mtsb_buffer_flush
#define sample_mtsb_buffer_flush( b ) \
       _sample_mtsb_buffer_flush( LOG_CALLER b )
#endif

/*
* flush any changed fields to the register file and invalidate the read cache.
*/
static INLINE void _sample_mtsb_buffer_flush( LOG_CALLER_DEFN sample_mtsb_buffer_t *b )
{
    IOLOG( "sample_mtsb_buffer_flush" );
    l1sys_flush( b->coalesce_handle );
}
static INLINE UINT32 sample_mtsb_reg_read( sample_mtsb_buffer_t *b,
                                           sample_mtsb_handle_t *h,
                                           UINT32 mem_type,
                                           UINT32 reg )
{
    UINT32 value;
    if (b != NULL)
        value = l1sys_reg_read( b->coalesce_handle,
                                mem_type,
                                b->base_address,
                                reg);
    else
        value = l2sys_reg_read( ((pmc_handle_t *)h)->sys_handle,
                                mem_type,
                                ((pmc_handle_t *)h)->base_address + reg);
    return value;
}
static INLINE void sample_mtsb_reg_write( sample_mtsb_buffer_t *b,
                                          sample_mtsb_handle_t *h,
                                          UINT32 mem_type,
                                          UINT32 reg,
                                          UINT32 value )
{
    if (b != NULL)
        l1sys_reg_write( b->coalesce_handle,
                         mem_type,
                         b->base_address,
                         reg,
                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h)->sys_handle,
                         mem_type,
                         ((pmc_handle_t *)h)->base_address + reg,
                         value);
}

static INLINE void sample_mtsb_field_set( sample_mtsb_buffer_t *b,
                                          sample_mtsb_handle_t *h,
                                          UINT32 mem_type,
                                          UINT32 reg,
                                          UINT32 mask,
                                          UINT32 ofs,
                                          UINT32 value )
{
    if (b != NULL)
        l1sys_field_set( b->coalesce_handle,
                         mem_type,
                         b->base_address,
                         reg,
                         mask,
                         ofs,
                         value);
    else
        l2sys_reg_read_modify_write( ((pmc_handle_t *)h)->sys_handle,
                                     mem_type,
                                     ((pmc_handle_t *)h)->base_address + reg,
                                     mask,
                                     value<<ofs);
}

static INLINE void sample_mtsb_action_on_write_field_set( sample_mtsb_buffer_t *b,
                                                          sample_mtsb_handle_t *h,
                                                          UINT32 mem_type,
                                                          UINT32 reg,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value )
{
    if (b != NULL)
        l1sys_action_on_write_field_set( b->coalesce_handle,
                                         mem_type,
                                         b->base_address,
                                         reg,
                                         mask,
                                         ofs,
                                         value);
    else
        l2sys_reg_read_modify_write( ((pmc_handle_t *)h)->sys_handle,
                                     mem_type,
                                     ((pmc_handle_t *)h)->base_address + reg,
                                     0xffffffff,
                                     value<<ofs);
}

static INLINE void sample_mtsb_burst_read( sample_mtsb_buffer_t *b,
                                           sample_mtsb_handle_t *h,
                                           UINT32 mem_type,
                                           UINT32 reg,
                                           UINT32 len,
                                           UINT32 *value )
{
    if (b != NULL)
        l1sys_burst_read( b->coalesce_handle,
                          mem_type,
                          b->base_address,
                          reg,
                          len,
                          value);
    else
        l2sys_burst_read( ((pmc_handle_t *)h)->sys_handle,
                          mem_type,
                          ((pmc_handle_t *)h)->base_address + reg,
                          len,
                          value);
}

static INLINE void sample_mtsb_burst_write( sample_mtsb_buffer_t *b,
                                            sample_mtsb_handle_t *h,
                                            UINT32 mem_type,
                                            UINT32 reg,
                                            UINT32 len,
                                            UINT32 *value )
{
    if (b != NULL)
        l1sys_burst_write( b->coalesce_handle,
                           mem_type,
                           b->base_address,
                           reg,
                           len,
                           value);
    else
        l2sys_burst_write( ((pmc_handle_t *)h)->sys_handle,
                           mem_type,
                           ((pmc_handle_t *)h)->base_address + reg,
                           len,
                           value);
}

static INLINE PMC_ERROR sample_mtsb_poll_bit( sample_mtsb_buffer_t *b,
                                              sample_mtsb_handle_t *h,
                                              UINT32 mem_type,
                                              UINT32 reg,
                                              UINT32 mask,
                                              UINT32 value,
                                              UINT32 max_count,
                                              UINT32 *num_failed_polls,
                                              UINT32 delay_between_polls_in_microseconds )
{
    if (b != NULL)
        return l1sys_poll_bit( b->coalesce_handle,
                               mem_type,
                               b->base_address,
                               reg,
                               mask,
                               value,
                               max_count,
                               num_failed_polls,
                               delay_between_polls_in_microseconds);
    else
        return l2sys_poll_bit( ((pmc_handle_t *)h)->sys_handle,
                               mem_type,
                               ((pmc_handle_t *)h)->base_address + reg,
                               mask,
                               value,
                               max_count,
                               num_failed_polls,
                               delay_between_polls_in_microseconds);
}

/*
 * ==================================================================================
 *                     register access functions for sample_mtsb
 * ==================================================================================
 */

/**
 * accessor functions for register PMC_SAMPLE_MTSB_REG_MTSB_CONFIG
 *
 * Register: MTSB Configuration
 * Offset: 0x00000000 MTSB_CONFIG
 * 
 *
 * bits 0 default 0 CORE_ENABLE
 *     Testing
 *
 * bits 1 default 0 PMON_BUSY
 *     Testing
 *
 * bits 2 default 0 INT_EN
 *     Testing
 */

#ifndef sample_mtsb_reg_MTSB_CONFIG_write
#define sample_mtsb_reg_MTSB_CONFIG_write( b, h, value ) \
       _sample_mtsb_reg_MTSB_CONFIG_write( LOG_CALLER b, h, value )
#endif
static INLINE void _sample_mtsb_reg_MTSB_CONFIG_write( LOG_CALLER_DEFN
                                                       sample_mtsb_buffer_t *b,
                                                       sample_mtsb_handle_t *h,
                                                       UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "sample_mtsb_reg_MTSB_CONFIG_write", value );
    sample_mtsb_reg_write( b,
                           h,
                           MEM_TYPE_CONFIG,
                           PMC_SAMPLE_MTSB_REG_MTSB_CONFIG,
                           value);
}


#ifndef sample_mtsb_reg_MTSB_CONFIG_field_set
#define sample_mtsb_reg_MTSB_CONFIG_field_set( b, h, mask, ofs, value ) \
       _sample_mtsb_reg_MTSB_CONFIG_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _sample_mtsb_reg_MTSB_CONFIG_field_set( LOG_CALLER_DEFN
                                                           sample_mtsb_buffer_t *b,
                                                           sample_mtsb_handle_t *h,
                                                           UINT32 mask,
                                                           UINT32 ofs,
                                                           UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "sample_mtsb_reg_MTSB_CONFIG_field_set", mask, ofs, value );
    sample_mtsb_field_set( b,
                           h,
                           MEM_TYPE_CONFIG,
                           PMC_SAMPLE_MTSB_REG_MTSB_CONFIG,
                           mask,
                           ofs,
                           value);

}


#ifndef sample_mtsb_reg_MTSB_CONFIG_read
#define sample_mtsb_reg_MTSB_CONFIG_read( b, h ) \
       _sample_mtsb_reg_MTSB_CONFIG_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _sample_mtsb_reg_MTSB_CONFIG_read( LOG_CALLER_DEFN sample_mtsb_buffer_t *b, sample_mtsb_handle_t *h )
{
    UINT32 reg_value;

    reg_value = sample_mtsb_reg_read( b,
                                      h,
                                      MEM_TYPE_CONFIG,
                                      PMC_SAMPLE_MTSB_REG_MTSB_CONFIG);

    IOLOG( "%s -> 0x%08x;", "sample_mtsb_reg_MTSB_CONFIG_read", reg_value);
    return reg_value;
}

#ifndef sample_mtsb_reg_MTSB_CONFIG_poll_bit
#define sample_mtsb_reg_MTSB_CONFIG_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _sample_mtsb_reg_MTSB_CONFIG_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _sample_mtsb_reg_MTSB_CONFIG_poll_bit( LOG_CALLER_DEFN
                                                               sample_mtsb_buffer_t *b,
                                                               sample_mtsb_handle_t *h,
                                                               UINT32 mask,
                                                               UINT32 value,
                                                               UINT32 max_count,
                                                               UINT32 *num_failed_polls,
                                                               UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "sample_mtsb_reg_MTSB_CONFIG_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return sample_mtsb_poll_bit( b,
                                 h,
                                 MEM_TYPE_CONFIG,
                                 PMC_SAMPLE_MTSB_REG_MTSB_CONFIG,
                                 mask,
                                 value,
                                 max_count,
                                 num_failed_polls,
                                 delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_SAMPLE_MTSB_REG_CHANNEL_CONFIG
 *
 * Register: Channel Configuration
 * Offset: (0x00000100 + (N) * 0x4) CHANNEL_CONFIG
 * 
 *
 * bits 0     default 0        CHANNEL_ENABLE
 *     Testing
 *
 * bits 8:1   default 00000000 CHANNEL_MAP
 *     Testing
 *
 * bits 9     default 0        OH_INSERT_ENABLE
 *     Testing
 *
 * bits 17:10 default 00000000 OH_INSERT_BYTE
 *     Testing
 *
 * bits 25:18 default 00000000 OH_EXTRACT_BYTE
 *     Testing
 */

#ifndef sample_mtsb_reg_CHANNEL_CONFIG_array_write
#define sample_mtsb_reg_CHANNEL_CONFIG_array_write( b, h, N, value ) \
       _sample_mtsb_reg_CHANNEL_CONFIG_array_write( LOG_CALLER b, h, N, value )
#endif
static INLINE void _sample_mtsb_reg_CHANNEL_CONFIG_array_write( LOG_CALLER_DEFN
                                                                sample_mtsb_buffer_t *b,
                                                                sample_mtsb_handle_t *h,
                                                                UINT32  N,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "sample_mtsb_reg_CHANNEL_CONFIG_array_write", value );
    sample_mtsb_reg_write( b,
                           h,
                           MEM_TYPE_CONFIG,
                           PMC_SAMPLE_MTSB_REG_CHANNEL_CONFIG(N),
                           value);
}


#ifndef sample_mtsb_reg_CHANNEL_CONFIG_array_field_set
#define sample_mtsb_reg_CHANNEL_CONFIG_array_field_set( b, h, N, mask, ofs, value ) \
       _sample_mtsb_reg_CHANNEL_CONFIG_array_field_set( LOG_CALLER b, h, N, mask, ofs, value )
#endif
static INLINE void _sample_mtsb_reg_CHANNEL_CONFIG_array_field_set( LOG_CALLER_DEFN
                                                                    sample_mtsb_buffer_t *b,
                                                                    sample_mtsb_handle_t *h,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "sample_mtsb_reg_CHANNEL_CONFIG_array_field_set", N, mask, ofs, value );
    sample_mtsb_field_set( b,
                           h,
                           MEM_TYPE_CONFIG,
                           PMC_SAMPLE_MTSB_REG_CHANNEL_CONFIG(N),
                           mask,
                           ofs,
                           value);

}


#ifndef sample_mtsb_reg_CHANNEL_CONFIG_array_read
#define sample_mtsb_reg_CHANNEL_CONFIG_array_read( b, h, N ) \
       _sample_mtsb_reg_CHANNEL_CONFIG_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _sample_mtsb_reg_CHANNEL_CONFIG_array_read( LOG_CALLER_DEFN
                                                                 sample_mtsb_buffer_t *b,
                                                                 sample_mtsb_handle_t *h,
                                                                 UINT32  N )
{
    UINT32 reg_value;

    reg_value = sample_mtsb_reg_read( b,
                                      h,
                                      MEM_TYPE_CONFIG,
                                      PMC_SAMPLE_MTSB_REG_CHANNEL_CONFIG(N));

    IOLOG( "%s -> 0x%08x; N=%d", "sample_mtsb_reg_CHANNEL_CONFIG_array_read", reg_value, N);
    return reg_value;
}

/**
 * accessor functions for register PMC_SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_0
 *
 * Register: Overhead Byte Interrupt Enable 0
 * Offset: 0x00003008 OH_FF_INT_EN_REG_0
 *
 * bits        31:0 default 00000000000000000000000000000000 OH_FF_E
 * field_bits  31:0
 *     Testing
 */

#ifndef sample_mtsb_reg_OH_FF_INT_EN_REG_0_write
#define sample_mtsb_reg_OH_FF_INT_EN_REG_0_write( b, h, value ) \
       _sample_mtsb_reg_OH_FF_INT_EN_REG_0_write( LOG_CALLER b, h, value )
#endif
static INLINE void _sample_mtsb_reg_OH_FF_INT_EN_REG_0_write( LOG_CALLER_DEFN
                                                              sample_mtsb_buffer_t *b,
                                                              sample_mtsb_handle_t *h,
                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "sample_mtsb_reg_OH_FF_INT_EN_REG_0_write", value );
    sample_mtsb_reg_write( b,
                           h,
                           MEM_TYPE_STATUS,
                           PMC_SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_0,
                           value);
}


#ifndef sample_mtsb_reg_OH_FF_INT_EN_REG_0_field_set
#define sample_mtsb_reg_OH_FF_INT_EN_REG_0_field_set( b, h, mask, ofs, value ) \
       _sample_mtsb_reg_OH_FF_INT_EN_REG_0_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _sample_mtsb_reg_OH_FF_INT_EN_REG_0_field_set( LOG_CALLER_DEFN
                                                                  sample_mtsb_buffer_t *b,
                                                                  sample_mtsb_handle_t *h,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "sample_mtsb_reg_OH_FF_INT_EN_REG_0_field_set", mask, ofs, value );
    sample_mtsb_field_set( b,
                           h,
                           MEM_TYPE_STATUS,
                           PMC_SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_0,
                           mask,
                           ofs,
                           value);

}


#ifndef sample_mtsb_reg_OH_FF_INT_EN_REG_0_read
#define sample_mtsb_reg_OH_FF_INT_EN_REG_0_read( b, h ) \
       _sample_mtsb_reg_OH_FF_INT_EN_REG_0_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _sample_mtsb_reg_OH_FF_INT_EN_REG_0_read( LOG_CALLER_DEFN sample_mtsb_buffer_t *b, sample_mtsb_handle_t *h )
{
    UINT32 reg_value;

    reg_value = sample_mtsb_reg_read( b,
                                      h,
                                      MEM_TYPE_STATUS,
                                      PMC_SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_0);

    IOLOG( "%s -> 0x%08x;", "sample_mtsb_reg_OH_FF_INT_EN_REG_0_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_1
 *
 * Register: Overhead Byte Interrupt Enable 1
 * Offset: 0x0000300c OH_FF_INT_EN_REG_1
 *
 * bits        31:0 default 00000000000000000000000000000000 OH_FF_E
 * field_bits  63:32
 *     Testing
 */

#ifndef sample_mtsb_reg_OH_FF_INT_EN_REG_1_write
#define sample_mtsb_reg_OH_FF_INT_EN_REG_1_write( b, h, value ) \
       _sample_mtsb_reg_OH_FF_INT_EN_REG_1_write( LOG_CALLER b, h, value )
#endif
static INLINE void _sample_mtsb_reg_OH_FF_INT_EN_REG_1_write( LOG_CALLER_DEFN
                                                              sample_mtsb_buffer_t *b,
                                                              sample_mtsb_handle_t *h,
                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "sample_mtsb_reg_OH_FF_INT_EN_REG_1_write", value );
    sample_mtsb_reg_write( b,
                           h,
                           MEM_TYPE_STATUS,
                           PMC_SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_1,
                           value);
}


#ifndef sample_mtsb_reg_OH_FF_INT_EN_REG_1_field_set
#define sample_mtsb_reg_OH_FF_INT_EN_REG_1_field_set( b, h, mask, ofs, value ) \
       _sample_mtsb_reg_OH_FF_INT_EN_REG_1_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _sample_mtsb_reg_OH_FF_INT_EN_REG_1_field_set( LOG_CALLER_DEFN
                                                                  sample_mtsb_buffer_t *b,
                                                                  sample_mtsb_handle_t *h,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "sample_mtsb_reg_OH_FF_INT_EN_REG_1_field_set", mask, ofs, value );
    sample_mtsb_field_set( b,
                           h,
                           MEM_TYPE_STATUS,
                           PMC_SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_1,
                           mask,
                           ofs,
                           value);

}


#ifndef sample_mtsb_reg_OH_FF_INT_EN_REG_1_read
#define sample_mtsb_reg_OH_FF_INT_EN_REG_1_read( b, h ) \
       _sample_mtsb_reg_OH_FF_INT_EN_REG_1_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _sample_mtsb_reg_OH_FF_INT_EN_REG_1_read( LOG_CALLER_DEFN sample_mtsb_buffer_t *b, sample_mtsb_handle_t *h )
{
    UINT32 reg_value;

    reg_value = sample_mtsb_reg_read( b,
                                      h,
                                      MEM_TYPE_STATUS,
                                      PMC_SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_1);

    IOLOG( "%s -> 0x%08x;", "sample_mtsb_reg_OH_FF_INT_EN_REG_1_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_SAMPLE_MTSB_REG_OH_FF_INT_REG_0
 *
 * Register: Overhead Byte interrupt 0
 * Offset: 0x00003000 OH_FF_INT_REG_0
 *     Overhead byte interrupt
 *
 * bits        31:0 default 00000000000000000000000000000000 OH_FF_I
 * field_bits  31:0
 * attribute: int_edge=rising
 * attribute: clk=iobus_clk
 *     Testing
 */

#ifndef sample_mtsb_reg_OH_FF_INT_REG_0_write
#define sample_mtsb_reg_OH_FF_INT_REG_0_write( b, h, value ) \
       _sample_mtsb_reg_OH_FF_INT_REG_0_write( LOG_CALLER b, h, value )
#endif
static INLINE void _sample_mtsb_reg_OH_FF_INT_REG_0_write( LOG_CALLER_DEFN
                                                           sample_mtsb_buffer_t *b,
                                                           sample_mtsb_handle_t *h,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "sample_mtsb_reg_OH_FF_INT_REG_0_write", value );
    sample_mtsb_reg_write( b,
                           h,
                           MEM_TYPE_STATUS,
                           PMC_SAMPLE_MTSB_REG_OH_FF_INT_REG_0,
                           value);
}


#ifndef sample_mtsb_reg_OH_FF_INT_REG_0_action_on_write_field_set
#define sample_mtsb_reg_OH_FF_INT_REG_0_action_on_write_field_set( b, h, mask, ofs, value ) \
       _sample_mtsb_reg_OH_FF_INT_REG_0_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _sample_mtsb_reg_OH_FF_INT_REG_0_action_on_write_field_set( LOG_CALLER_DEFN
                                                                               sample_mtsb_buffer_t *b,
                                                                               sample_mtsb_handle_t *h,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "sample_mtsb_reg_OH_FF_INT_REG_0_action_on_write_field_set", mask, ofs, value );
    sample_mtsb_action_on_write_field_set( b,
                                           h,
                                           MEM_TYPE_STATUS,
                                           PMC_SAMPLE_MTSB_REG_OH_FF_INT_REG_0,
                                           mask,
                                           ofs,
                                           value);

}


#ifndef sample_mtsb_reg_OH_FF_INT_REG_0_read
#define sample_mtsb_reg_OH_FF_INT_REG_0_read( b, h ) \
       _sample_mtsb_reg_OH_FF_INT_REG_0_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _sample_mtsb_reg_OH_FF_INT_REG_0_read( LOG_CALLER_DEFN sample_mtsb_buffer_t *b, sample_mtsb_handle_t *h )
{
    UINT32 reg_value;

    reg_value = sample_mtsb_reg_read( b,
                                      h,
                                      MEM_TYPE_STATUS,
                                      PMC_SAMPLE_MTSB_REG_OH_FF_INT_REG_0);

    IOLOG( "%s -> 0x%08x;", "sample_mtsb_reg_OH_FF_INT_REG_0_read", reg_value);
    return reg_value;
}

#ifndef sample_mtsb_reg_OH_FF_INT_REG_0_poll_bit
#define sample_mtsb_reg_OH_FF_INT_REG_0_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _sample_mtsb_reg_OH_FF_INT_REG_0_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _sample_mtsb_reg_OH_FF_INT_REG_0_poll_bit( LOG_CALLER_DEFN
                                                                   sample_mtsb_buffer_t *b,
                                                                   sample_mtsb_handle_t *h,
                                                                   UINT32 mask,
                                                                   UINT32 value,
                                                                   UINT32 max_count,
                                                                   UINT32 *num_failed_polls,
                                                                   UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "sample_mtsb_reg_OH_FF_INT_REG_0_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return sample_mtsb_poll_bit( b,
                                 h,
                                 MEM_TYPE_STATUS,
                                 PMC_SAMPLE_MTSB_REG_OH_FF_INT_REG_0,
                                 mask,
                                 value,
                                 max_count,
                                 num_failed_polls,
                                 delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_SAMPLE_MTSB_REG_OH_FF_INT_REG_1
 *
 * Register: Overhead Byte interrupt 1
 * Offset: 0x00003004 OH_FF_INT_REG_1
 *     Overhead byte interrupt
 *
 * bits        31:0 default 00000000000000000000000000000000 OH_FF_I
 * field_bits  63:32
 * attribute: int_edge=rising
 * attribute: clk=iobus_clk
 *     Testing
 */

#ifndef sample_mtsb_reg_OH_FF_INT_REG_1_write
#define sample_mtsb_reg_OH_FF_INT_REG_1_write( b, h, value ) \
       _sample_mtsb_reg_OH_FF_INT_REG_1_write( LOG_CALLER b, h, value )
#endif
static INLINE void _sample_mtsb_reg_OH_FF_INT_REG_1_write( LOG_CALLER_DEFN
                                                           sample_mtsb_buffer_t *b,
                                                           sample_mtsb_handle_t *h,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "sample_mtsb_reg_OH_FF_INT_REG_1_write", value );
    sample_mtsb_reg_write( b,
                           h,
                           MEM_TYPE_STATUS,
                           PMC_SAMPLE_MTSB_REG_OH_FF_INT_REG_1,
                           value);
}


#ifndef sample_mtsb_reg_OH_FF_INT_REG_1_action_on_write_field_set
#define sample_mtsb_reg_OH_FF_INT_REG_1_action_on_write_field_set( b, h, mask, ofs, value ) \
       _sample_mtsb_reg_OH_FF_INT_REG_1_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _sample_mtsb_reg_OH_FF_INT_REG_1_action_on_write_field_set( LOG_CALLER_DEFN
                                                                               sample_mtsb_buffer_t *b,
                                                                               sample_mtsb_handle_t *h,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "sample_mtsb_reg_OH_FF_INT_REG_1_action_on_write_field_set", mask, ofs, value );
    sample_mtsb_action_on_write_field_set( b,
                                           h,
                                           MEM_TYPE_STATUS,
                                           PMC_SAMPLE_MTSB_REG_OH_FF_INT_REG_1,
                                           mask,
                                           ofs,
                                           value);

}


#ifndef sample_mtsb_reg_OH_FF_INT_REG_1_read
#define sample_mtsb_reg_OH_FF_INT_REG_1_read( b, h ) \
       _sample_mtsb_reg_OH_FF_INT_REG_1_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _sample_mtsb_reg_OH_FF_INT_REG_1_read( LOG_CALLER_DEFN sample_mtsb_buffer_t *b, sample_mtsb_handle_t *h )
{
    UINT32 reg_value;

    reg_value = sample_mtsb_reg_read( b,
                                      h,
                                      MEM_TYPE_STATUS,
                                      PMC_SAMPLE_MTSB_REG_OH_FF_INT_REG_1);

    IOLOG( "%s -> 0x%08x;", "sample_mtsb_reg_OH_FF_INT_REG_1_read", reg_value);
    return reg_value;
}

#ifndef sample_mtsb_reg_OH_FF_INT_REG_1_poll_bit
#define sample_mtsb_reg_OH_FF_INT_REG_1_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _sample_mtsb_reg_OH_FF_INT_REG_1_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _sample_mtsb_reg_OH_FF_INT_REG_1_poll_bit( LOG_CALLER_DEFN
                                                                   sample_mtsb_buffer_t *b,
                                                                   sample_mtsb_handle_t *h,
                                                                   UINT32 mask,
                                                                   UINT32 value,
                                                                   UINT32 max_count,
                                                                   UINT32 *num_failed_polls,
                                                                   UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "sample_mtsb_reg_OH_FF_INT_REG_1_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return sample_mtsb_poll_bit( b,
                                 h,
                                 MEM_TYPE_STATUS,
                                 PMC_SAMPLE_MTSB_REG_OH_FF_INT_REG_1,
                                 mask,
                                 value,
                                 max_count,
                                 num_failed_polls,
                                 delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_SAMPLE_MTSB_REG_CHANNEL_SOP_COUNTER
 *
 * Register: Channel SOP counter
 * Offset: (0x00001000 + (N) * 0x4) CHANNEL_SOP_COUNTER
 * 
 *
 * bits 31:0 default 00000000000000000000000000000000 SOP_COUNTER
 *     Testing
 */

#ifndef sample_mtsb_reg_CHANNEL_SOP_COUNTER_array_burst_read
#define sample_mtsb_reg_CHANNEL_SOP_COUNTER_array_burst_read( b, h, ofs, len, value ) \
       _sample_mtsb_reg_CHANNEL_SOP_COUNTER_array_burst_read( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _sample_mtsb_reg_CHANNEL_SOP_COUNTER_array_burst_read( LOG_CALLER_DEFN
                                                                          sample_mtsb_buffer_t *b,
                                                                          sample_mtsb_handle_t *h,
                                                                          UINT32 ofs,
                                                                          UINT32 len,
                                                                          UINT32 *value )
{
    if (len + ofs > 512)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "sample_mtsb_reg_CHANNEL_SOP_COUNTER_array_burst_read", ofs, len, 512 );
    sample_mtsb_burst_read( b,
                            h,
                            MEM_TYPE_STATUS,
                            PMC_SAMPLE_MTSB_REG_CHANNEL_SOP_COUNTER(ofs),
                            len,
                            value);

    IOLOG( "%s of %d words ofs=%d len=%d", "sample_mtsb_reg_CHANNEL_SOP_COUNTER_array_burst_read", 512, ofs, len);
}


#ifndef sample_mtsb_reg_CHANNEL_SOP_COUNTER_array_read
#define sample_mtsb_reg_CHANNEL_SOP_COUNTER_array_read( b, h, N ) \
       _sample_mtsb_reg_CHANNEL_SOP_COUNTER_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _sample_mtsb_reg_CHANNEL_SOP_COUNTER_array_read( LOG_CALLER_DEFN
                                                                      sample_mtsb_buffer_t *b,
                                                                      sample_mtsb_handle_t *h,
                                                                      UINT32 N )
{
    UINT32 reg_value;

    reg_value = sample_mtsb_reg_read( b,
                                      h,
                                      MEM_TYPE_STATUS,
                                      PMC_SAMPLE_MTSB_REG_CHANNEL_SOP_COUNTER(N));

    IOLOG( "%s -> 0x%08x;", "sample_mtsb_reg_CHANNEL_SOP_COUNTER_array_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_SAMPLE_MTSB_REG_CHANNEL_BYTE_COUNTER
 *
 * Register: Channel byte counter
 * Offset: (0x00002000 + (N) * 0x4) CHANNEL_BYTE_COUNTER
 * 
 *
 * bits 31:0 default 00000000000000000000000000000000 BYTE_COUNTER
 *     Testing
 */

#ifndef sample_mtsb_reg_CHANNEL_BYTE_COUNTER_array_burst_read
#define sample_mtsb_reg_CHANNEL_BYTE_COUNTER_array_burst_read( b, h, ofs, len, value ) \
       _sample_mtsb_reg_CHANNEL_BYTE_COUNTER_array_burst_read( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _sample_mtsb_reg_CHANNEL_BYTE_COUNTER_array_burst_read( LOG_CALLER_DEFN
                                                                           sample_mtsb_buffer_t *b,
                                                                           sample_mtsb_handle_t *h,
                                                                           UINT32 ofs,
                                                                           UINT32 len,
                                                                           UINT32 *value )
{
    if (len + ofs > 512)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "sample_mtsb_reg_CHANNEL_BYTE_COUNTER_array_burst_read", ofs, len, 512 );
    sample_mtsb_burst_read( b,
                            h,
                            MEM_TYPE_STATUS,
                            PMC_SAMPLE_MTSB_REG_CHANNEL_BYTE_COUNTER(ofs),
                            len,
                            value);

    IOLOG( "%s of %d words ofs=%d len=%d", "sample_mtsb_reg_CHANNEL_BYTE_COUNTER_array_burst_read", 512, ofs, len);
}


#ifndef sample_mtsb_reg_CHANNEL_BYTE_COUNTER_array_read
#define sample_mtsb_reg_CHANNEL_BYTE_COUNTER_array_read( b, h, N ) \
       _sample_mtsb_reg_CHANNEL_BYTE_COUNTER_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _sample_mtsb_reg_CHANNEL_BYTE_COUNTER_array_read( LOG_CALLER_DEFN
                                                                       sample_mtsb_buffer_t *b,
                                                                       sample_mtsb_handle_t *h,
                                                                       UINT32 N )
{
    UINT32 reg_value;

    reg_value = sample_mtsb_reg_read( b,
                                      h,
                                      MEM_TYPE_STATUS,
                                      PMC_SAMPLE_MTSB_REG_CHANNEL_BYTE_COUNTER(N));

    IOLOG( "%s -> 0x%08x;", "sample_mtsb_reg_CHANNEL_BYTE_COUNTER_array_read", reg_value);
    return reg_value;
}

/*
 * ==================================================================================
 *            Parameter Access Functions for Paramset sample_mtsb_config
 * ==================================================================================
 */

#ifndef sample_mtsb_field_CORE_ENABLE_set
#define sample_mtsb_field_CORE_ENABLE_set( b, h, value ) \
       _sample_mtsb_field_CORE_ENABLE_set( LOG_CALLER b, h, value )
#endif
static INLINE void _sample_mtsb_field_CORE_ENABLE_set( LOG_CALLER_DEFN
                                                       sample_mtsb_buffer_t *b,
                                                       sample_mtsb_handle_t *h,
                                                       UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "sample_mtsb_field_CORE_ENABLE_set", value, 1);
    IOLOG( "%s <= 0x%08x", "sample_mtsb_field_CORE_ENABLE_set", value );

    /* (0x00000000 bits 0) field CORE_ENABLE of register PMC_SAMPLE_MTSB_REG_MTSB_CONFIG */
    _sample_mtsb_reg_MTSB_CONFIG_field_set( LOG_CALLER_ARGS
                                            b,
                                            h,
                                            SAMPLE_MTSB_REG_MTSB_CONFIG_BIT_CORE_ENABLE_MSK,
                                            SAMPLE_MTSB_REG_MTSB_CONFIG_BIT_CORE_ENABLE_OFF,
                                            value);
}


#ifndef sample_mtsb_field_CORE_ENABLE_get
#define sample_mtsb_field_CORE_ENABLE_get( b, h ) \
       _sample_mtsb_field_CORE_ENABLE_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _sample_mtsb_field_CORE_ENABLE_get( LOG_CALLER_DEFN sample_mtsb_buffer_t *b, sample_mtsb_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 0) field CORE_ENABLE of register PMC_SAMPLE_MTSB_REG_MTSB_CONFIG */
    reg_value = _sample_mtsb_reg_MTSB_CONFIG_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & SAMPLE_MTSB_REG_MTSB_CONFIG_BIT_CORE_ENABLE_MSK) >> SAMPLE_MTSB_REG_MTSB_CONFIG_BIT_CORE_ENABLE_OFF;
    IOLOG( "%s -> 0x%08x", "sample_mtsb_field_CORE_ENABLE_get", value );

    return value;
}

#ifndef sample_mtsb_field_PMON_BUSY_set
#define sample_mtsb_field_PMON_BUSY_set( b, h, value ) \
       _sample_mtsb_field_PMON_BUSY_set( LOG_CALLER b, h, value )
#endif
static INLINE void _sample_mtsb_field_PMON_BUSY_set( LOG_CALLER_DEFN
                                                     sample_mtsb_buffer_t *b,
                                                     sample_mtsb_handle_t *h,
                                                     UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "sample_mtsb_field_PMON_BUSY_set", value, 1);
    IOLOG( "%s <= 0x%08x", "sample_mtsb_field_PMON_BUSY_set", value );

    /* (0x00000000 bits 1) field PMON_BUSY of register PMC_SAMPLE_MTSB_REG_MTSB_CONFIG */
    _sample_mtsb_reg_MTSB_CONFIG_field_set( LOG_CALLER_ARGS
                                            b,
                                            h,
                                            SAMPLE_MTSB_REG_MTSB_CONFIG_BIT_PMON_BUSY_MSK,
                                            SAMPLE_MTSB_REG_MTSB_CONFIG_BIT_PMON_BUSY_OFF,
                                            value);
}


#ifndef sample_mtsb_field_PMON_BUSY_get
#define sample_mtsb_field_PMON_BUSY_get( b, h ) \
       _sample_mtsb_field_PMON_BUSY_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _sample_mtsb_field_PMON_BUSY_get( LOG_CALLER_DEFN sample_mtsb_buffer_t *b, sample_mtsb_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 1) field PMON_BUSY of register PMC_SAMPLE_MTSB_REG_MTSB_CONFIG */
    reg_value = _sample_mtsb_reg_MTSB_CONFIG_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & SAMPLE_MTSB_REG_MTSB_CONFIG_BIT_PMON_BUSY_MSK) >> SAMPLE_MTSB_REG_MTSB_CONFIG_BIT_PMON_BUSY_OFF;
    IOLOG( "%s -> 0x%08x", "sample_mtsb_field_PMON_BUSY_get", value );

    return value;
}

#ifndef sample_mtsb_field_PMON_BUSY_poll_bit
#define sample_mtsb_field_PMON_BUSY_poll_bit( b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _sample_mtsb_field_PMON_BUSY_poll_bit( LOG_CALLER b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _sample_mtsb_field_PMON_BUSY_poll_bit( LOG_CALLER_DEFN
                                                               sample_mtsb_buffer_t *b,
                                                               sample_mtsb_handle_t *h,
                                                               UINT32 value,
                                                               UINT32 max_count,
                                                               UINT32 *num_failed_polls,
                                                               UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "sample_mtsb_field_PMON_BUSY_poll_bit", value );

    /* (0x00000000 bits 1) field PMON_BUSY of register PMC_SAMPLE_MTSB_REG_MTSB_CONFIG */
    return _sample_mtsb_reg_MTSB_CONFIG_poll_bit( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  SAMPLE_MTSB_REG_MTSB_CONFIG_BIT_PMON_BUSY_MSK,
                                                  (value<<SAMPLE_MTSB_REG_MTSB_CONFIG_BIT_PMON_BUSY_OFF),
                                                  max_count,
                                                  num_failed_polls,
                                                  delay_between_polls_in_microseconds);
}


#ifndef sample_mtsb_field_INT_EN_set
#define sample_mtsb_field_INT_EN_set( b, h, value ) \
       _sample_mtsb_field_INT_EN_set( LOG_CALLER b, h, value )
#endif
static INLINE void _sample_mtsb_field_INT_EN_set( LOG_CALLER_DEFN
                                                  sample_mtsb_buffer_t *b,
                                                  sample_mtsb_handle_t *h,
                                                  UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "sample_mtsb_field_INT_EN_set", value, 1);
    IOLOG( "%s <= 0x%08x", "sample_mtsb_field_INT_EN_set", value );

    /* (0x00000000 bits 2) field INT_EN of register PMC_SAMPLE_MTSB_REG_MTSB_CONFIG */
    _sample_mtsb_reg_MTSB_CONFIG_field_set( LOG_CALLER_ARGS
                                            b,
                                            h,
                                            SAMPLE_MTSB_REG_MTSB_CONFIG_BIT_INT_EN_MSK,
                                            SAMPLE_MTSB_REG_MTSB_CONFIG_BIT_INT_EN_OFF,
                                            value);
}


#ifndef sample_mtsb_field_INT_EN_get
#define sample_mtsb_field_INT_EN_get( b, h ) \
       _sample_mtsb_field_INT_EN_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _sample_mtsb_field_INT_EN_get( LOG_CALLER_DEFN sample_mtsb_buffer_t *b, sample_mtsb_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 2) field INT_EN of register PMC_SAMPLE_MTSB_REG_MTSB_CONFIG */
    reg_value = _sample_mtsb_reg_MTSB_CONFIG_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & SAMPLE_MTSB_REG_MTSB_CONFIG_BIT_INT_EN_MSK) >> SAMPLE_MTSB_REG_MTSB_CONFIG_BIT_INT_EN_OFF;
    IOLOG( "%s -> 0x%08x", "sample_mtsb_field_INT_EN_get", value );

    return value;
}

/*
 * ==================================================================================
 *       Parameter Access Functions for Paramset sample_mtsb_config_N_size512
 * ==================================================================================
 */

#ifndef sample_mtsb_field_CHANNEL_ENABLE_set
#define sample_mtsb_field_CHANNEL_ENABLE_set( b, h, N, value ) \
       _sample_mtsb_field_CHANNEL_ENABLE_set( LOG_CALLER b, h, N, value )
#endif
static INLINE void _sample_mtsb_field_CHANNEL_ENABLE_set( LOG_CALLER_DEFN
                                                          sample_mtsb_buffer_t *b,
                                                          sample_mtsb_handle_t *h,
                                                          UINT32  N,
                                                          UINT32 value )
{
    if (N > 511)
        IO_RANGE_CHECK("%s N is %d but max is %d", "sample_mtsb_field_CHANNEL_ENABLE_set", N, 511);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "sample_mtsb_field_CHANNEL_ENABLE_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "sample_mtsb_field_CHANNEL_ENABLE_set", N, value );

    /* ((0x00000100 + (N) * 0x4) bits 0) field CHANNEL_ENABLE of register PMC_SAMPLE_MTSB_REG_CHANNEL_CONFIG index N=0..511 */
    _sample_mtsb_reg_CHANNEL_CONFIG_array_field_set( LOG_CALLER_ARGS
                                                     b,
                                                     h,
                                                     N,
                                                     SAMPLE_MTSB_REG_CHANNEL_CONFIG_BIT_CHANNEL_ENABLE_MSK,
                                                     SAMPLE_MTSB_REG_CHANNEL_CONFIG_BIT_CHANNEL_ENABLE_OFF,
                                                     value);
}


#ifndef sample_mtsb_field_CHANNEL_ENABLE_get
#define sample_mtsb_field_CHANNEL_ENABLE_get( b, h, N ) \
       _sample_mtsb_field_CHANNEL_ENABLE_get( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _sample_mtsb_field_CHANNEL_ENABLE_get( LOG_CALLER_DEFN
                                                            sample_mtsb_buffer_t *b,
                                                            sample_mtsb_handle_t *h,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 511)
        IO_RANGE_CHECK("%s N is %d but max is %d", "sample_mtsb_field_CHANNEL_ENABLE_get", N, 511);
    /* ((0x00000100 + (N) * 0x4) bits 0) field CHANNEL_ENABLE of register PMC_SAMPLE_MTSB_REG_CHANNEL_CONFIG index N=0..511 */
    reg_value = _sample_mtsb_reg_CHANNEL_CONFIG_array_read( LOG_CALLER_ARGS
                                                            b,
                                                            h,
                                                            N);
    value = (reg_value & SAMPLE_MTSB_REG_CHANNEL_CONFIG_BIT_CHANNEL_ENABLE_MSK) >> SAMPLE_MTSB_REG_CHANNEL_CONFIG_BIT_CHANNEL_ENABLE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "sample_mtsb_field_CHANNEL_ENABLE_get", N, value );

    return value;
}

#ifndef sample_mtsb_field_CHANNEL_MAP_set
#define sample_mtsb_field_CHANNEL_MAP_set( b, h, N, value ) \
       _sample_mtsb_field_CHANNEL_MAP_set( LOG_CALLER b, h, N, value )
#endif
static INLINE void _sample_mtsb_field_CHANNEL_MAP_set( LOG_CALLER_DEFN
                                                       sample_mtsb_buffer_t *b,
                                                       sample_mtsb_handle_t *h,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 511)
        IO_RANGE_CHECK("%s N is %d but max is %d", "sample_mtsb_field_CHANNEL_MAP_set", N, 511);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "sample_mtsb_field_CHANNEL_MAP_set", value, 255);
    IOLOG( "%s <= N=%d 0x%08x", "sample_mtsb_field_CHANNEL_MAP_set", N, value );

    /* ((0x00000100 + (N) * 0x4) bits 8:1) field CHANNEL_MAP of register PMC_SAMPLE_MTSB_REG_CHANNEL_CONFIG index N=0..511 */
    _sample_mtsb_reg_CHANNEL_CONFIG_array_field_set( LOG_CALLER_ARGS
                                                     b,
                                                     h,
                                                     N,
                                                     SAMPLE_MTSB_REG_CHANNEL_CONFIG_BIT_CHANNEL_MAP_MSK,
                                                     SAMPLE_MTSB_REG_CHANNEL_CONFIG_BIT_CHANNEL_MAP_OFF,
                                                     value);
}


#ifndef sample_mtsb_field_CHANNEL_MAP_get
#define sample_mtsb_field_CHANNEL_MAP_get( b, h, N ) \
       _sample_mtsb_field_CHANNEL_MAP_get( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _sample_mtsb_field_CHANNEL_MAP_get( LOG_CALLER_DEFN
                                                         sample_mtsb_buffer_t *b,
                                                         sample_mtsb_handle_t *h,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 511)
        IO_RANGE_CHECK("%s N is %d but max is %d", "sample_mtsb_field_CHANNEL_MAP_get", N, 511);
    /* ((0x00000100 + (N) * 0x4) bits 8:1) field CHANNEL_MAP of register PMC_SAMPLE_MTSB_REG_CHANNEL_CONFIG index N=0..511 */
    reg_value = _sample_mtsb_reg_CHANNEL_CONFIG_array_read( LOG_CALLER_ARGS
                                                            b,
                                                            h,
                                                            N);
    value = (reg_value & SAMPLE_MTSB_REG_CHANNEL_CONFIG_BIT_CHANNEL_MAP_MSK) >> SAMPLE_MTSB_REG_CHANNEL_CONFIG_BIT_CHANNEL_MAP_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "sample_mtsb_field_CHANNEL_MAP_get", N, value );

    return value;
}

#ifndef sample_mtsb_field_range_CHANNEL_MAP_set
#define sample_mtsb_field_range_CHANNEL_MAP_set( b, h, N, start_bit, stop_bit, value ) \
       _sample_mtsb_field_range_CHANNEL_MAP_set( LOG_CALLER b, h, N, start_bit, stop_bit, value )
#endif
static INLINE void _sample_mtsb_field_range_CHANNEL_MAP_set( LOG_CALLER_DEFN
                                                             sample_mtsb_buffer_t *b,
                                                             sample_mtsb_handle_t *h,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (N > 511)
        IO_RANGE_CHECK("%s N is %d but max is %d", "sample_mtsb_field_range_CHANNEL_MAP_set", N, 511);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "sample_mtsb_field_range_CHANNEL_MAP_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "sample_mtsb_field_range_CHANNEL_MAP_set", stop_bit, 7 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "sample_mtsb_field_range_CHANNEL_MAP_set", N, start_bit, stop_bit, value );

    /* ((0x00000100 + (N) * 0x4) bits 8:1) field CHANNEL_MAP of register PMC_SAMPLE_MTSB_REG_CHANNEL_CONFIG index N=0..511 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 1) {
            subfield_offset = start_bit - 1;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  1 - start_bit;
            subfield_start_bit = 1;
        }
        if (stop_bit < 8) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 8;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000100 + (N) * 0x4) bits 8:1) field CHANNEL_MAP of register PMC_SAMPLE_MTSB_REG_CHANNEL_CONFIG index N=0..511 */
        _sample_mtsb_reg_CHANNEL_CONFIG_array_field_set( LOG_CALLER_ARGS
                                                         b,
                                                         h,
                                                         N,
                                                         subfield_mask << (SAMPLE_MTSB_REG_CHANNEL_CONFIG_BIT_CHANNEL_MAP_OFF + subfield_offset),
                                                         SAMPLE_MTSB_REG_CHANNEL_CONFIG_BIT_CHANNEL_MAP_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}


#ifndef sample_mtsb_field_range_CHANNEL_MAP_get
#define sample_mtsb_field_range_CHANNEL_MAP_get( b, h, N, start_bit, stop_bit ) \
       _sample_mtsb_field_range_CHANNEL_MAP_get( LOG_CALLER b, h, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _sample_mtsb_field_range_CHANNEL_MAP_get( LOG_CALLER_DEFN
                                                               sample_mtsb_buffer_t *b,
                                                               sample_mtsb_handle_t *h,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 511)
        IO_RANGE_CHECK("%s N is %d but max is %d", "sample_mtsb_field_range_CHANNEL_MAP_get", N, 511);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "sample_mtsb_field_range_CHANNEL_MAP_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "sample_mtsb_field_range_CHANNEL_MAP_get", stop_bit, 7 );
    if (start_bit > 1) {
        subfield_offset = start_bit - 1;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 1 - start_bit;
        subfield_start_bit = 1;
    }
    if (stop_bit < 8) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 8;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000100 + (N) * 0x4) bits 8:1) field CHANNEL_MAP of register PMC_SAMPLE_MTSB_REG_CHANNEL_CONFIG index N=0..511 */
    reg_value = _sample_mtsb_reg_CHANNEL_CONFIG_array_read( LOG_CALLER_ARGS
                                                            b,
                                                            h,
                                                            N);
    field_value = (reg_value & SAMPLE_MTSB_REG_CHANNEL_CONFIG_BIT_CHANNEL_MAP_MSK)
                  >> SAMPLE_MTSB_REG_CHANNEL_CONFIG_BIT_CHANNEL_MAP_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SAMPLE_MTSB_REG_CHANNEL_CONFIG_BIT_CHANNEL_MAP_MSK, SAMPLE_MTSB_REG_CHANNEL_CONFIG_BIT_CHANNEL_MAP_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "sample_mtsb_field_range_CHANNEL_MAP_get", N, start_bit, stop_bit, value );

    return value;
}

#ifndef sample_mtsb_field_OH_INSERT_ENABLE_set
#define sample_mtsb_field_OH_INSERT_ENABLE_set( b, h, N, value ) \
       _sample_mtsb_field_OH_INSERT_ENABLE_set( LOG_CALLER b, h, N, value )
#endif
static INLINE void _sample_mtsb_field_OH_INSERT_ENABLE_set( LOG_CALLER_DEFN
                                                            sample_mtsb_buffer_t *b,
                                                            sample_mtsb_handle_t *h,
                                                            UINT32  N,
                                                            UINT32 value )
{
    if (N > 511)
        IO_RANGE_CHECK("%s N is %d but max is %d", "sample_mtsb_field_OH_INSERT_ENABLE_set", N, 511);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "sample_mtsb_field_OH_INSERT_ENABLE_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "sample_mtsb_field_OH_INSERT_ENABLE_set", N, value );

    /* ((0x00000100 + (N) * 0x4) bits 9) field OH_INSERT_ENABLE of register PMC_SAMPLE_MTSB_REG_CHANNEL_CONFIG index N=0..511 */
    _sample_mtsb_reg_CHANNEL_CONFIG_array_field_set( LOG_CALLER_ARGS
                                                     b,
                                                     h,
                                                     N,
                                                     SAMPLE_MTSB_REG_CHANNEL_CONFIG_BIT_OH_INSERT_ENABLE_MSK,
                                                     SAMPLE_MTSB_REG_CHANNEL_CONFIG_BIT_OH_INSERT_ENABLE_OFF,
                                                     value);
}


#ifndef sample_mtsb_field_OH_INSERT_ENABLE_get
#define sample_mtsb_field_OH_INSERT_ENABLE_get( b, h, N ) \
       _sample_mtsb_field_OH_INSERT_ENABLE_get( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _sample_mtsb_field_OH_INSERT_ENABLE_get( LOG_CALLER_DEFN
                                                              sample_mtsb_buffer_t *b,
                                                              sample_mtsb_handle_t *h,
                                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 511)
        IO_RANGE_CHECK("%s N is %d but max is %d", "sample_mtsb_field_OH_INSERT_ENABLE_get", N, 511);
    /* ((0x00000100 + (N) * 0x4) bits 9) field OH_INSERT_ENABLE of register PMC_SAMPLE_MTSB_REG_CHANNEL_CONFIG index N=0..511 */
    reg_value = _sample_mtsb_reg_CHANNEL_CONFIG_array_read( LOG_CALLER_ARGS
                                                            b,
                                                            h,
                                                            N);
    value = (reg_value & SAMPLE_MTSB_REG_CHANNEL_CONFIG_BIT_OH_INSERT_ENABLE_MSK) >> SAMPLE_MTSB_REG_CHANNEL_CONFIG_BIT_OH_INSERT_ENABLE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "sample_mtsb_field_OH_INSERT_ENABLE_get", N, value );

    return value;
}

#ifndef sample_mtsb_field_OH_INSERT_BYTE_set
#define sample_mtsb_field_OH_INSERT_BYTE_set( b, h, N, value ) \
       _sample_mtsb_field_OH_INSERT_BYTE_set( LOG_CALLER b, h, N, value )
#endif
static INLINE void _sample_mtsb_field_OH_INSERT_BYTE_set( LOG_CALLER_DEFN
                                                          sample_mtsb_buffer_t *b,
                                                          sample_mtsb_handle_t *h,
                                                          UINT32  N,
                                                          UINT32 value )
{
    if (N > 511)
        IO_RANGE_CHECK("%s N is %d but max is %d", "sample_mtsb_field_OH_INSERT_BYTE_set", N, 511);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "sample_mtsb_field_OH_INSERT_BYTE_set", value, 255);
    IOLOG( "%s <= N=%d 0x%08x", "sample_mtsb_field_OH_INSERT_BYTE_set", N, value );

    /* ((0x00000100 + (N) * 0x4) bits 17:10) field OH_INSERT_BYTE of register PMC_SAMPLE_MTSB_REG_CHANNEL_CONFIG index N=0..511 */
    _sample_mtsb_reg_CHANNEL_CONFIG_array_field_set( LOG_CALLER_ARGS
                                                     b,
                                                     h,
                                                     N,
                                                     SAMPLE_MTSB_REG_CHANNEL_CONFIG_BIT_OH_INSERT_BYTE_MSK,
                                                     SAMPLE_MTSB_REG_CHANNEL_CONFIG_BIT_OH_INSERT_BYTE_OFF,
                                                     value);
}


#ifndef sample_mtsb_field_OH_INSERT_BYTE_get
#define sample_mtsb_field_OH_INSERT_BYTE_get( b, h, N ) \
       _sample_mtsb_field_OH_INSERT_BYTE_get( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _sample_mtsb_field_OH_INSERT_BYTE_get( LOG_CALLER_DEFN
                                                            sample_mtsb_buffer_t *b,
                                                            sample_mtsb_handle_t *h,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 511)
        IO_RANGE_CHECK("%s N is %d but max is %d", "sample_mtsb_field_OH_INSERT_BYTE_get", N, 511);
    /* ((0x00000100 + (N) * 0x4) bits 17:10) field OH_INSERT_BYTE of register PMC_SAMPLE_MTSB_REG_CHANNEL_CONFIG index N=0..511 */
    reg_value = _sample_mtsb_reg_CHANNEL_CONFIG_array_read( LOG_CALLER_ARGS
                                                            b,
                                                            h,
                                                            N);
    value = (reg_value & SAMPLE_MTSB_REG_CHANNEL_CONFIG_BIT_OH_INSERT_BYTE_MSK) >> SAMPLE_MTSB_REG_CHANNEL_CONFIG_BIT_OH_INSERT_BYTE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "sample_mtsb_field_OH_INSERT_BYTE_get", N, value );

    return value;
}

#ifndef sample_mtsb_field_range_OH_INSERT_BYTE_set
#define sample_mtsb_field_range_OH_INSERT_BYTE_set( b, h, N, start_bit, stop_bit, value ) \
       _sample_mtsb_field_range_OH_INSERT_BYTE_set( LOG_CALLER b, h, N, start_bit, stop_bit, value )
#endif
static INLINE void _sample_mtsb_field_range_OH_INSERT_BYTE_set( LOG_CALLER_DEFN
                                                                sample_mtsb_buffer_t *b,
                                                                sample_mtsb_handle_t *h,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (N > 511)
        IO_RANGE_CHECK("%s N is %d but max is %d", "sample_mtsb_field_range_OH_INSERT_BYTE_set", N, 511);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "sample_mtsb_field_range_OH_INSERT_BYTE_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "sample_mtsb_field_range_OH_INSERT_BYTE_set", stop_bit, 7 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "sample_mtsb_field_range_OH_INSERT_BYTE_set", N, start_bit, stop_bit, value );

    /* ((0x00000100 + (N) * 0x4) bits 17:10) field OH_INSERT_BYTE of register PMC_SAMPLE_MTSB_REG_CHANNEL_CONFIG index N=0..511 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 10) {
            subfield_offset = start_bit - 10;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  10 - start_bit;
            subfield_start_bit = 10;
        }
        if (stop_bit < 17) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 17;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000100 + (N) * 0x4) bits 17:10) field OH_INSERT_BYTE of register PMC_SAMPLE_MTSB_REG_CHANNEL_CONFIG index N=0..511 */
        _sample_mtsb_reg_CHANNEL_CONFIG_array_field_set( LOG_CALLER_ARGS
                                                         b,
                                                         h,
                                                         N,
                                                         subfield_mask << (SAMPLE_MTSB_REG_CHANNEL_CONFIG_BIT_OH_INSERT_BYTE_OFF + subfield_offset),
                                                         SAMPLE_MTSB_REG_CHANNEL_CONFIG_BIT_OH_INSERT_BYTE_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}


#ifndef sample_mtsb_field_range_OH_INSERT_BYTE_get
#define sample_mtsb_field_range_OH_INSERT_BYTE_get( b, h, N, start_bit, stop_bit ) \
       _sample_mtsb_field_range_OH_INSERT_BYTE_get( LOG_CALLER b, h, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _sample_mtsb_field_range_OH_INSERT_BYTE_get( LOG_CALLER_DEFN
                                                                  sample_mtsb_buffer_t *b,
                                                                  sample_mtsb_handle_t *h,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 511)
        IO_RANGE_CHECK("%s N is %d but max is %d", "sample_mtsb_field_range_OH_INSERT_BYTE_get", N, 511);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "sample_mtsb_field_range_OH_INSERT_BYTE_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "sample_mtsb_field_range_OH_INSERT_BYTE_get", stop_bit, 7 );
    if (start_bit > 10) {
        subfield_offset = start_bit - 10;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 10 - start_bit;
        subfield_start_bit = 10;
    }
    if (stop_bit < 17) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 17;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000100 + (N) * 0x4) bits 17:10) field OH_INSERT_BYTE of register PMC_SAMPLE_MTSB_REG_CHANNEL_CONFIG index N=0..511 */
    reg_value = _sample_mtsb_reg_CHANNEL_CONFIG_array_read( LOG_CALLER_ARGS
                                                            b,
                                                            h,
                                                            N);
    field_value = (reg_value & SAMPLE_MTSB_REG_CHANNEL_CONFIG_BIT_OH_INSERT_BYTE_MSK)
                  >> SAMPLE_MTSB_REG_CHANNEL_CONFIG_BIT_OH_INSERT_BYTE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SAMPLE_MTSB_REG_CHANNEL_CONFIG_BIT_OH_INSERT_BYTE_MSK, SAMPLE_MTSB_REG_CHANNEL_CONFIG_BIT_OH_INSERT_BYTE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "sample_mtsb_field_range_OH_INSERT_BYTE_get", N, start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 *          Parameter Access Functions for Paramset sample_mtsb_int_enable
 * ==================================================================================
 */

#ifndef sample_mtsb_lfield_OH_FF_E_set
#define sample_mtsb_lfield_OH_FF_E_set( b, h, value ) \
       _sample_mtsb_lfield_OH_FF_E_set( LOG_CALLER b, h, value )
#endif
static INLINE void _sample_mtsb_lfield_OH_FF_E_set( LOG_CALLER_DEFN
                                                    sample_mtsb_buffer_t *b,
                                                    sample_mtsb_handle_t *h,
                                                    UINT32 value[2] )
{
    IOLOG( "%s <= 0x%08x 0x%08x", "sample_mtsb_lfield_OH_FF_E_set", value[1] , value[0] );

    /* (0x00003008 bits 31:0) bits 0:31 use field OH_FF_E of register PMC_SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_0 */
    _sample_mtsb_reg_OH_FF_INT_EN_REG_0_field_set( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_0_BIT_OH_FF_E_MSK,
                                                   SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_0_BIT_OH_FF_E_OFF,
                                                   (value[0] & 0xffffffff));

    /* (0x0000300c bits 31:0) bits 32:63 use field OH_FF_E of register PMC_SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_1 */
    _sample_mtsb_reg_OH_FF_INT_EN_REG_1_field_set( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_1_BIT_OH_FF_E_MSK,
                                                   SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_1_BIT_OH_FF_E_OFF,
                                                   (value[1] & 0xffffffff));
}


#ifndef sample_mtsb_lfield_OH_FF_E_get
#define sample_mtsb_lfield_OH_FF_E_get( b, h, value ) \
       _sample_mtsb_lfield_OH_FF_E_get( LOG_CALLER b, h, value )
#endif
static INLINE void _sample_mtsb_lfield_OH_FF_E_get( LOG_CALLER_DEFN
                                                    sample_mtsb_buffer_t *b,
                                                    sample_mtsb_handle_t *h,
                                                    UINT32 value[2] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<2;i++)
        value[i] = 0;

    /* (0x00003008 bits 31:0) bits 0:31 use field OH_FF_E of register PMC_SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_0 */
    reg_value = _sample_mtsb_reg_OH_FF_INT_EN_REG_0_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_0_BIT_OH_FF_E_MSK) >> SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_0_BIT_OH_FF_E_OFF;
    value[0] |= field_value;

    /* (0x0000300c bits 31:0) bits 32:63 use field OH_FF_E of register PMC_SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_1 */
    reg_value = _sample_mtsb_reg_OH_FF_INT_EN_REG_1_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_1_BIT_OH_FF_E_MSK) >> SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_1_BIT_OH_FF_E_OFF;
    value[1] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x", "sample_mtsb_lfield_OH_FF_E_get", value[1] , value[0] );

}

#ifndef sample_mtsb_lfield_range_OH_FF_E_set
#define sample_mtsb_lfield_range_OH_FF_E_set( b, h, start_bit, stop_bit, value ) \
       _sample_mtsb_lfield_range_OH_FF_E_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _sample_mtsb_lfield_range_OH_FF_E_set( LOG_CALLER_DEFN
                                                          sample_mtsb_buffer_t *b,
                                                          sample_mtsb_handle_t *h,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "sample_mtsb_lfield_range_OH_FF_E_set", stop_bit, start_bit );
    if (stop_bit > 63) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "sample_mtsb_lfield_range_OH_FF_E_set", stop_bit, 63 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "sample_mtsb_lfield_range_OH_FF_E_set", start_bit, stop_bit, value );

    /* (0x00003008 bits 31:0) bits 0:31 use field OH_FF_E of register PMC_SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_0 */
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00003008 bits 31:0) bits 0:31 use field OH_FF_E of register PMC_SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_0 */
        _sample_mtsb_reg_OH_FF_INT_EN_REG_0_field_set( LOG_CALLER_ARGS
                                                       b,
                                                       h,
                                                       subfield_mask << (SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_0_BIT_OH_FF_E_OFF + subfield_offset),
                                                       SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_0_BIT_OH_FF_E_OFF + subfield_offset,
                                                       value >> subfield_shift);
    }

    /* (0x0000300c bits 31:0) bits 32:63 use field OH_FF_E of register PMC_SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000300c bits 31:0) bits 32:63 use field OH_FF_E of register PMC_SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_1 */
        _sample_mtsb_reg_OH_FF_INT_EN_REG_1_field_set( LOG_CALLER_ARGS
                                                       b,
                                                       h,
                                                       subfield_mask << (SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_1_BIT_OH_FF_E_OFF + subfield_offset),
                                                       SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_1_BIT_OH_FF_E_OFF + subfield_offset,
                                                       value >> subfield_shift);
    }
}


#ifndef sample_mtsb_lfield_range_OH_FF_E_get
#define sample_mtsb_lfield_range_OH_FF_E_get( b, h, start_bit, stop_bit ) \
       _sample_mtsb_lfield_range_OH_FF_E_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _sample_mtsb_lfield_range_OH_FF_E_get( LOG_CALLER_DEFN
                                                            sample_mtsb_buffer_t *b,
                                                            sample_mtsb_handle_t *h,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "sample_mtsb_lfield_range_OH_FF_E_get", stop_bit, start_bit );
    if (stop_bit > 63) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "sample_mtsb_lfield_range_OH_FF_E_get", stop_bit, 63 );
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00003008 bits 31:0) bits 0:31 use field OH_FF_E of register PMC_SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_0 */
        reg_value = _sample_mtsb_reg_OH_FF_INT_EN_REG_0_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_0_BIT_OH_FF_E_MSK)
                      >> SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_0_BIT_OH_FF_E_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_0_BIT_OH_FF_E_MSK, SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_0_BIT_OH_FF_E_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000300c bits 31:0) bits 32:63 use field OH_FF_E of register PMC_SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_1 */
        reg_value = _sample_mtsb_reg_OH_FF_INT_EN_REG_1_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_1_BIT_OH_FF_E_MSK)
                      >> SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_1_BIT_OH_FF_E_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_1_BIT_OH_FF_E_MSK, SAMPLE_MTSB_REG_OH_FF_INT_EN_REG_1_BIT_OH_FF_E_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "sample_mtsb_lfield_range_OH_FF_E_get", start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 *           Parameter Access Functions for Paramset sample_mtsb_int_sync
 * ==================================================================================
 */

#ifndef sample_mtsb_lfield_OH_FF_I_set_to_clear
#define sample_mtsb_lfield_OH_FF_I_set_to_clear( b, h, value ) \
       _sample_mtsb_lfield_OH_FF_I_set_to_clear( LOG_CALLER b, h, value )
#endif
static INLINE void _sample_mtsb_lfield_OH_FF_I_set_to_clear( LOG_CALLER_DEFN
                                                             sample_mtsb_buffer_t *b,
                                                             sample_mtsb_handle_t *h,
                                                             UINT32 value[2] )
{
    IOLOG( "%s <= 0x%08x 0x%08x", "sample_mtsb_lfield_OH_FF_I_set_to_clear", value[1] , value[0] );

    /* (0x00003000 bits 31:0) bits 0:31 use field OH_FF_I of register PMC_SAMPLE_MTSB_REG_OH_FF_INT_REG_0 */
    _sample_mtsb_reg_OH_FF_INT_REG_0_action_on_write_field_set( LOG_CALLER_ARGS
                                                                b,
                                                                h,
                                                                SAMPLE_MTSB_REG_OH_FF_INT_REG_0_BIT_OH_FF_I_MSK,
                                                                SAMPLE_MTSB_REG_OH_FF_INT_REG_0_BIT_OH_FF_I_OFF,
                                                                (value[0] & 0xffffffff));

    /* (0x00003004 bits 31:0) bits 32:63 use field OH_FF_I of register PMC_SAMPLE_MTSB_REG_OH_FF_INT_REG_1 */
    _sample_mtsb_reg_OH_FF_INT_REG_1_action_on_write_field_set( LOG_CALLER_ARGS
                                                                b,
                                                                h,
                                                                SAMPLE_MTSB_REG_OH_FF_INT_REG_1_BIT_OH_FF_I_MSK,
                                                                SAMPLE_MTSB_REG_OH_FF_INT_REG_1_BIT_OH_FF_I_OFF,
                                                                (value[1] & 0xffffffff));
}


#ifndef sample_mtsb_lfield_OH_FF_I_get
#define sample_mtsb_lfield_OH_FF_I_get( b, h, value ) \
       _sample_mtsb_lfield_OH_FF_I_get( LOG_CALLER b, h, value )
#endif
static INLINE void _sample_mtsb_lfield_OH_FF_I_get( LOG_CALLER_DEFN
                                                    sample_mtsb_buffer_t *b,
                                                    sample_mtsb_handle_t *h,
                                                    UINT32 value[2] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<2;i++)
        value[i] = 0;

    /* (0x00003000 bits 31:0) bits 0:31 use field OH_FF_I of register PMC_SAMPLE_MTSB_REG_OH_FF_INT_REG_0 */
    reg_value = _sample_mtsb_reg_OH_FF_INT_REG_0_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & SAMPLE_MTSB_REG_OH_FF_INT_REG_0_BIT_OH_FF_I_MSK) >> SAMPLE_MTSB_REG_OH_FF_INT_REG_0_BIT_OH_FF_I_OFF;
    value[0] |= field_value;

    /* (0x00003004 bits 31:0) bits 32:63 use field OH_FF_I of register PMC_SAMPLE_MTSB_REG_OH_FF_INT_REG_1 */
    reg_value = _sample_mtsb_reg_OH_FF_INT_REG_1_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & SAMPLE_MTSB_REG_OH_FF_INT_REG_1_BIT_OH_FF_I_MSK) >> SAMPLE_MTSB_REG_OH_FF_INT_REG_1_BIT_OH_FF_I_OFF;
    value[1] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x", "sample_mtsb_lfield_OH_FF_I_get", value[1] , value[0] );

}

#ifndef sample_mtsb_lfield_range_OH_FF_I_set_to_clear
#define sample_mtsb_lfield_range_OH_FF_I_set_to_clear( b, h, start_bit, stop_bit, value ) \
       _sample_mtsb_lfield_range_OH_FF_I_set_to_clear( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _sample_mtsb_lfield_range_OH_FF_I_set_to_clear( LOG_CALLER_DEFN
                                                                   sample_mtsb_buffer_t *b,
                                                                   sample_mtsb_handle_t *h,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "sample_mtsb_lfield_range_OH_FF_I_set_to_clear", stop_bit, start_bit );
    if (stop_bit > 63) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "sample_mtsb_lfield_range_OH_FF_I_set_to_clear", stop_bit, 63 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "sample_mtsb_lfield_range_OH_FF_I_set_to_clear", start_bit, stop_bit, value );

    /* (0x00003000 bits 31:0) bits 0:31 use field OH_FF_I of register PMC_SAMPLE_MTSB_REG_OH_FF_INT_REG_0 */
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00003000 bits 31:0) bits 0:31 use field OH_FF_I of register PMC_SAMPLE_MTSB_REG_OH_FF_INT_REG_0 */
        _sample_mtsb_reg_OH_FF_INT_REG_0_action_on_write_field_set( LOG_CALLER_ARGS
                                                                    b,
                                                                    h,
                                                                    subfield_mask << (SAMPLE_MTSB_REG_OH_FF_INT_REG_0_BIT_OH_FF_I_OFF + subfield_offset),
                                                                    SAMPLE_MTSB_REG_OH_FF_INT_REG_0_BIT_OH_FF_I_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }

    /* (0x00003004 bits 31:0) bits 32:63 use field OH_FF_I of register PMC_SAMPLE_MTSB_REG_OH_FF_INT_REG_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00003004 bits 31:0) bits 32:63 use field OH_FF_I of register PMC_SAMPLE_MTSB_REG_OH_FF_INT_REG_1 */
        _sample_mtsb_reg_OH_FF_INT_REG_1_action_on_write_field_set( LOG_CALLER_ARGS
                                                                    b,
                                                                    h,
                                                                    subfield_mask << (SAMPLE_MTSB_REG_OH_FF_INT_REG_1_BIT_OH_FF_I_OFF + subfield_offset),
                                                                    SAMPLE_MTSB_REG_OH_FF_INT_REG_1_BIT_OH_FF_I_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}


#ifndef sample_mtsb_lfield_range_OH_FF_I_get
#define sample_mtsb_lfield_range_OH_FF_I_get( b, h, start_bit, stop_bit ) \
       _sample_mtsb_lfield_range_OH_FF_I_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _sample_mtsb_lfield_range_OH_FF_I_get( LOG_CALLER_DEFN
                                                            sample_mtsb_buffer_t *b,
                                                            sample_mtsb_handle_t *h,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "sample_mtsb_lfield_range_OH_FF_I_get", stop_bit, start_bit );
    if (stop_bit > 63) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "sample_mtsb_lfield_range_OH_FF_I_get", stop_bit, 63 );
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00003000 bits 31:0) bits 0:31 use field OH_FF_I of register PMC_SAMPLE_MTSB_REG_OH_FF_INT_REG_0 */
        reg_value = _sample_mtsb_reg_OH_FF_INT_REG_0_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & SAMPLE_MTSB_REG_OH_FF_INT_REG_0_BIT_OH_FF_I_MSK)
                      >> SAMPLE_MTSB_REG_OH_FF_INT_REG_0_BIT_OH_FF_I_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SAMPLE_MTSB_REG_OH_FF_INT_REG_0_BIT_OH_FF_I_MSK, SAMPLE_MTSB_REG_OH_FF_INT_REG_0_BIT_OH_FF_I_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00003004 bits 31:0) bits 32:63 use field OH_FF_I of register PMC_SAMPLE_MTSB_REG_OH_FF_INT_REG_1 */
        reg_value = _sample_mtsb_reg_OH_FF_INT_REG_1_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & SAMPLE_MTSB_REG_OH_FF_INT_REG_1_BIT_OH_FF_I_MSK)
                      >> SAMPLE_MTSB_REG_OH_FF_INT_REG_1_BIT_OH_FF_I_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SAMPLE_MTSB_REG_OH_FF_INT_REG_1_BIT_OH_FF_I_MSK, SAMPLE_MTSB_REG_OH_FF_INT_REG_1_BIT_OH_FF_I_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "sample_mtsb_lfield_range_OH_FF_I_get", start_bit, stop_bit, value );

    return value;
}

#ifndef sample_mtsb_lfield_OH_FF_I_poll_bit
#define sample_mtsb_lfield_OH_FF_I_poll_bit( b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _sample_mtsb_lfield_OH_FF_I_poll_bit( LOG_CALLER b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _sample_mtsb_lfield_OH_FF_I_poll_bit( LOG_CALLER_DEFN
                                                              sample_mtsb_buffer_t *b,
                                                              sample_mtsb_handle_t *h,
                                                              UINT32 value[2],
                                                              UINT32 max_count,
                                                              UINT32 *num_failed_polls,
                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x 0x%08x", "sample_mtsb_lfield_OH_FF_I_poll_bit", value[1] , value[0] );

    /* (0x00003000 bits 31:0) bits 0:31 use field OH_FF_I of register PMC_SAMPLE_MTSB_REG_OH_FF_INT_REG_0 */
    return _sample_mtsb_reg_OH_FF_INT_REG_0_poll_bit( LOG_CALLER_ARGS
                                                      b,
                                                      h,
                                                      SAMPLE_MTSB_REG_OH_FF_INT_REG_0_BIT_OH_FF_I_MSK,
                                                      ((value[0] & 0xffffffff)<<SAMPLE_MTSB_REG_OH_FF_INT_REG_0_BIT_OH_FF_I_OFF),
                                                      max_count,
                                                      num_failed_polls,
                                                      delay_between_polls_in_microseconds);

    /* (0x00003004 bits 31:0) bits 32:63 use field OH_FF_I of register PMC_SAMPLE_MTSB_REG_OH_FF_INT_REG_1 */
    return _sample_mtsb_reg_OH_FF_INT_REG_1_poll_bit( LOG_CALLER_ARGS
                                                      b,
                                                      h,
                                                      SAMPLE_MTSB_REG_OH_FF_INT_REG_1_BIT_OH_FF_I_MSK,
                                                      ((value[1] & 0xffffffff)<<SAMPLE_MTSB_REG_OH_FF_INT_REG_1_BIT_OH_FF_I_OFF),
                                                      max_count,
                                                      num_failed_polls,
                                                      delay_between_polls_in_microseconds);
}


/*
 * ==================================================================================
 *    Parameter Access Functions for Paramset sample_mtsb_status_N_burstsize512
 * ==================================================================================
 */

#ifndef sample_mtsb_lfield_SOP_COUNTER_get
#define sample_mtsb_lfield_SOP_COUNTER_get( b, h, value ) \
       _sample_mtsb_lfield_SOP_COUNTER_get( LOG_CALLER b, h, value )
#endif
static INLINE void _sample_mtsb_lfield_SOP_COUNTER_get( LOG_CALLER_DEFN
                                                        sample_mtsb_buffer_t *b,
                                                        sample_mtsb_handle_t *h,
                                                        UINT32 value[512] )
{
    IOLOG( "%s ", "sample_mtsb_lfield_SOP_COUNTER_get");
    _sample_mtsb_reg_CHANNEL_SOP_COUNTER_array_burst_read( LOG_CALLER_ARGS
                                                           b,
                                                           h,
                                                           0,
                                                           512,
                                                           (UINT32 *)value);
}


#ifndef sample_mtsb_lfield_range_SOP_COUNTER_get
#define sample_mtsb_lfield_range_SOP_COUNTER_get( b, h, start_bit, stop_bit ) \
       _sample_mtsb_lfield_range_SOP_COUNTER_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _sample_mtsb_lfield_range_SOP_COUNTER_get( LOG_CALLER_DEFN
                                                                sample_mtsb_buffer_t *b,
                                                                sample_mtsb_handle_t *h,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = 0xffffffff >> (32-num_bits);
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "sample_mtsb_lfield_range_SOP_COUNTER_get", start_bit, stop_bit );
    }
    reg_value = _sample_mtsb_reg_CHANNEL_SOP_COUNTER_array_read( LOG_CALLER_ARGS
                                                                 b,
                                                                 h,
                                                                 word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "sample_mtsb_lfield_range_SOP_COUNTER_get", start_bit, stop_bit, value );
    return value;
}


#ifndef sample_mtsb_lfield_BYTE_COUNTER_get
#define sample_mtsb_lfield_BYTE_COUNTER_get( b, h, value ) \
       _sample_mtsb_lfield_BYTE_COUNTER_get( LOG_CALLER b, h, value )
#endif
static INLINE void _sample_mtsb_lfield_BYTE_COUNTER_get( LOG_CALLER_DEFN
                                                         sample_mtsb_buffer_t *b,
                                                         sample_mtsb_handle_t *h,
                                                         UINT32 value[512] )
{
    IOLOG( "%s ", "sample_mtsb_lfield_BYTE_COUNTER_get");
    _sample_mtsb_reg_CHANNEL_BYTE_COUNTER_array_burst_read( LOG_CALLER_ARGS
                                                            b,
                                                            h,
                                                            0,
                                                            512,
                                                            (UINT32 *)value);
}


#ifndef sample_mtsb_lfield_range_BYTE_COUNTER_get
#define sample_mtsb_lfield_range_BYTE_COUNTER_get( b, h, start_bit, stop_bit ) \
       _sample_mtsb_lfield_range_BYTE_COUNTER_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _sample_mtsb_lfield_range_BYTE_COUNTER_get( LOG_CALLER_DEFN
                                                                 sample_mtsb_buffer_t *b,
                                                                 sample_mtsb_handle_t *h,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = 0xffffffff >> (32-num_bits);
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "sample_mtsb_lfield_range_BYTE_COUNTER_get", start_bit, stop_bit );
    }
    reg_value = _sample_mtsb_reg_CHANNEL_BYTE_COUNTER_array_read( LOG_CALLER_ARGS
                                                                  b,
                                                                  h,
                                                                  word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "sample_mtsb_lfield_range_BYTE_COUNTER_get", start_bit, stop_bit, value );
    return value;
}


/*
 * ==================================================================================
 *       Parameter Access Functions for Paramset sample_mtsb_status_N_size512
 * ==================================================================================
 */

#ifndef sample_mtsb_field_OH_EXTRACT_BYTE_get
#define sample_mtsb_field_OH_EXTRACT_BYTE_get( b, h, N ) \
       _sample_mtsb_field_OH_EXTRACT_BYTE_get( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _sample_mtsb_field_OH_EXTRACT_BYTE_get( LOG_CALLER_DEFN
                                                             sample_mtsb_buffer_t *b,
                                                             sample_mtsb_handle_t *h,
                                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 511)
        IO_RANGE_CHECK("%s N is %d but max is %d", "sample_mtsb_field_OH_EXTRACT_BYTE_get", N, 511);
    /* ((0x00000100 + (N) * 0x4) bits 25:18) field OH_EXTRACT_BYTE of register PMC_SAMPLE_MTSB_REG_CHANNEL_CONFIG index N=0..511 */
    reg_value = _sample_mtsb_reg_CHANNEL_CONFIG_array_read( LOG_CALLER_ARGS
                                                            b,
                                                            h,
                                                            N);
    value = (reg_value & SAMPLE_MTSB_REG_CHANNEL_CONFIG_BIT_OH_EXTRACT_BYTE_MSK) >> SAMPLE_MTSB_REG_CHANNEL_CONFIG_BIT_OH_EXTRACT_BYTE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "sample_mtsb_field_OH_EXTRACT_BYTE_get", N, value );

    return value;
}

#ifndef sample_mtsb_field_range_OH_EXTRACT_BYTE_get
#define sample_mtsb_field_range_OH_EXTRACT_BYTE_get( b, h, N, start_bit, stop_bit ) \
       _sample_mtsb_field_range_OH_EXTRACT_BYTE_get( LOG_CALLER b, h, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _sample_mtsb_field_range_OH_EXTRACT_BYTE_get( LOG_CALLER_DEFN
                                                                   sample_mtsb_buffer_t *b,
                                                                   sample_mtsb_handle_t *h,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 511)
        IO_RANGE_CHECK("%s N is %d but max is %d", "sample_mtsb_field_range_OH_EXTRACT_BYTE_get", N, 511);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "sample_mtsb_field_range_OH_EXTRACT_BYTE_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "sample_mtsb_field_range_OH_EXTRACT_BYTE_get", stop_bit, 7 );
    if (start_bit > 18) {
        subfield_offset = start_bit - 18;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 18 - start_bit;
        subfield_start_bit = 18;
    }
    if (stop_bit < 25) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 25;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000100 + (N) * 0x4) bits 25:18) field OH_EXTRACT_BYTE of register PMC_SAMPLE_MTSB_REG_CHANNEL_CONFIG index N=0..511 */
    reg_value = _sample_mtsb_reg_CHANNEL_CONFIG_array_read( LOG_CALLER_ARGS
                                                            b,
                                                            h,
                                                            N);
    field_value = (reg_value & SAMPLE_MTSB_REG_CHANNEL_CONFIG_BIT_OH_EXTRACT_BYTE_MSK)
                  >> SAMPLE_MTSB_REG_CHANNEL_CONFIG_BIT_OH_EXTRACT_BYTE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, SAMPLE_MTSB_REG_CHANNEL_CONFIG_BIT_OH_EXTRACT_BYTE_MSK, SAMPLE_MTSB_REG_CHANNEL_CONFIG_BIT_OH_EXTRACT_BYTE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "sample_mtsb_field_range_OH_EXTRACT_BYTE_get", N, start_bit, stop_bit, value );

    return value;
}

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* _SAMPLE_MTSB_IO_INLINE_H */
