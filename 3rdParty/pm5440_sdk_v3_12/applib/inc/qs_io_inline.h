/******************************************************************************
 *   COPYRIGHT (C) 2011 PMC-SIERRA, INC. ALL RIGHTS RESERVED.
 * --------------------------------------------------------------------------
 *  This software embodies materials and concepts which are proprietary and
 *  confidential to PMC-Sierra, Inc.
 *  PMC-Sierra distributes this software to its customers pursuant to the
 *  terms and conditions of the Software License Agreement
 *  contained in the text file software.lic that is distributed along with
 *  the software. This software can only be utilized if all
 *  terms and conditions of the Software License Agreement are
 *  accepted. If there are any questions, concerns, or if the
 *  Software License Agreement text file, software.lic, is missing please
 *  contact PMC-Sierra for assistance.
 * -------------------------------------------------------------------------
 *   DESCRIPTION:
 *     contains the inline implementation of all the field accessor functions
 *     and register accessor functions for the qs block
 * 
 *   NOTES:
 *     This file is generated by the script codegen.pm, version 1.1
 *     Do not modify this file.
 * 
 *     The input file is ../src/ioxml-filtered/pm70_82_12_dcpb_map.xml
 *     block_uri "file:../docs/rda/pm70_60_59_qs_reg.xml"
 *     block_part_number "PM70_60_59_qs"
 *     block_mnemonic "QS"
 * 
 *****************************************************************************/
#ifndef _QS_IO_INLINE_H
#define _QS_IO_INLINE_H

#include "cpb_loc.h"
#include "pmc_sys.h"
#include "pmc_types.h"
#include "qs_regs.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * ==================================================================================
 *  tsb level structure and access functions for qs
 * ==================================================================================
 */
/* if logging is disabled then so is IO_LOGGING */
#ifndef NO_IO_LOGGING
# ifdef LOGGING_DISABLED
#  define NO_IO_LOGGING
# endif
#endif

/* log messages in the generated files log the caller's file/line/function instead of itself.*/
#ifndef IOLOG
# ifdef NO_IO_LOGGING
#  define IOLOG(...)
# else
#  define IOLOG(...) vaLog( LOG_CALLER_ARGS __VA_ARGS__)
# endif
#endif
#ifndef IO_RANGE_CHECK
# ifdef NO_IO_LOGGING
#  define IO_RANGE_CHECK(...)
# else
#  define IO_RANGE_CHECK(...) vaLog( LOG_CALLER_ARGS "** ERROR: range check ** " __VA_ARGS__)
# endif
#endif
#ifndef IOLOG_DATA
# ifdef NO_IO_LOGGING
#  define IOLOG_DATA(...)
# else
#  define IOLOG_DATA(...) vaLogData( LOG_CALLER_ARGS __VA_ARGS__)
# endif
#endif
typedef struct {
    coalesce_buffer_t coalesce_handle[1]; /* only used if register coalescing is enabled */
    cpb_handle_t * h_ptr;
    UINT32 A;
    pmc_sys_handle_t * sys_handle;
    UINT32 base_address;
    /* maybe eventually need to add some fields here per io handle */
} qs_buffer_t;

#ifndef qs_buffer_init
#define qs_buffer_init( b_ptr, h_ptr, A ) \
       _qs_buffer_init( LOG_CALLER b_ptr, h_ptr, A )
#endif
static INLINE void _qs_buffer_init( LOG_CALLER_DEFN
                                    qs_buffer_t *b_ptr,
                                    cpb_handle_t *h_ptr,
                                    UINT32 A )
{
    b_ptr->h_ptr                    = h_ptr;
    b_ptr->A                        = A;
    b_ptr->sys_handle               = ((pmc_handle_t *)h_ptr)->sys_handle;
    *(UINT32 *)&b_ptr->base_address = (((pmc_handle_t *)h_ptr)->base_address + ((0)*0x4000) );
    /* currently this just checks that the previous function remembered to flush. */
    l1sys_init( b_ptr->coalesce_handle, b_ptr->sys_handle );
    IOLOG( "%s A=%d", "qs_buffer_init", A);
    
}

#ifndef qs_buffer_flush
#define qs_buffer_flush( b_ptr ) \
       _qs_buffer_flush( LOG_CALLER b_ptr )
#endif

/* flush any changed fields to the register file and invalidate the read cache. */
static INLINE void _qs_buffer_flush( LOG_CALLER_DEFN qs_buffer_t *b_ptr )
{
    IOLOG( "qs_buffer_flush" );
    l1sys_flush( b_ptr->coalesce_handle );
}
static INLINE UINT32 qs_reg_read( qs_buffer_t *b_ptr,
                                  cpb_handle_t *h_ptr,
                                  UINT32 A,
                                  UINT32 mem_type,
                                  UINT32 reg )
{
    UINT32 value;
    if (b_ptr != NULL)
        value = l1sys_reg_read( b_ptr->coalesce_handle,
                                mem_type,
                                (b_ptr->base_address + (b_ptr->A)*0x4000),
                                reg);
    else
        value = l2sys_reg_read( ((pmc_handle_t *)h_ptr)->sys_handle,
                                mem_type,
                                (((pmc_handle_t *)h_ptr)->base_address + (A)*0x4000) + reg);
    return value;
}
static INLINE void qs_reg_write( qs_buffer_t *b_ptr,
                                 cpb_handle_t *h_ptr,
                                 UINT32 A,
                                 UINT32 mem_type,
                                 UINT32 reg,
                                 UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_reg_write( b_ptr->coalesce_handle,
                         mem_type,
                         (b_ptr->base_address + (b_ptr->A)*0x4000),
                         reg,
                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                         mem_type,
                         (((pmc_handle_t *)h_ptr)->base_address + (A)*0x4000) + reg,
                         value);
}

static INLINE void qs_field_set( qs_buffer_t *b_ptr,
                                 cpb_handle_t *h_ptr,
                                 UINT32 A,
                                 UINT32 mem_type,
                                 UINT32 reg,
                                 UINT32 mask,
                                 UINT32 unused_mask,
                                 UINT32 ofs,
                                 UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_field_set2( b_ptr->coalesce_handle,
                          mem_type,
                          (b_ptr->base_address + (b_ptr->A)*0x4000),
                          reg,
                          mask,
                          unused_mask,
                          ofs,
                          value);
    else
    {
        if ((mask | unused_mask) == 0xffffffff)
        {
            l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                             mem_type,
                             (((pmc_handle_t *)h_ptr)->base_address + (A)*0x4000) + reg,
                             value<<ofs);
        }
        else
        {
            l2sys_reg_read_modify_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                                         mem_type,
                                         (((pmc_handle_t *)h_ptr)->base_address + (A)*0x4000) + reg,
                                         mask,
                                         value<<ofs);
        }
    }
}

static INLINE void qs_action_on_write_field_set( qs_buffer_t *b_ptr,
                                                 cpb_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 mem_type,
                                                 UINT32 reg,
                                                 UINT32 mask,
                                                 UINT32 ofs,
                                                 UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_action_on_write_field_set( b_ptr->coalesce_handle,
                                         mem_type,
                                         (b_ptr->base_address + (b_ptr->A)*0x4000),
                                         reg,
                                         mask,
                                         ofs,
                                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                         mem_type,
                         (((pmc_handle_t *)h_ptr)->base_address + (A)*0x4000) + reg,
                         value<<ofs);
}

static INLINE void qs_burst_read( qs_buffer_t *b_ptr,
                                  cpb_handle_t *h_ptr,
                                  UINT32 A,
                                  UINT32 mem_type,
                                  UINT32 reg,
                                  UINT32 len,
                                  UINT32 *value )
{
    if (b_ptr != NULL)
        l1sys_burst_read( b_ptr->coalesce_handle,
                          mem_type,
                          (b_ptr->base_address + (b_ptr->A)*0x4000),
                          reg,
                          len,
                          value);
    else
        l2sys_burst_read( ((pmc_handle_t *)h_ptr)->sys_handle,
                          mem_type,
                          (((pmc_handle_t *)h_ptr)->base_address + (A)*0x4000) + reg,
                          len,
                          value);
}

static INLINE void qs_burst_write( qs_buffer_t *b_ptr,
                                   cpb_handle_t *h_ptr,
                                   UINT32 A,
                                   UINT32 mem_type,
                                   UINT32 reg,
                                   UINT32 len,
                                   UINT32 *value )
{
    if (b_ptr != NULL)
        l1sys_burst_write( b_ptr->coalesce_handle,
                           mem_type,
                           (b_ptr->base_address + (b_ptr->A)*0x4000),
                           reg,
                           len,
                           value);
    else
        l2sys_burst_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                           mem_type,
                           (((pmc_handle_t *)h_ptr)->base_address + (A)*0x4000) + reg,
                           len,
                           value);
}

static INLINE PMC_POLL_RETURN_TYPE qs_poll( qs_buffer_t *b_ptr,
                                            cpb_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32 mem_type,
                                            UINT32 reg,
                                            UINT32 mask,
                                            UINT32 value,
                                            PMC_POLL_COMPARISON_TYPE cmp,
                                            UINT32 max_count,
                                            UINT32 *num_failed_polls,
                                            UINT32 delay_between_polls_in_microseconds )
{
    if (b_ptr != NULL)
        return l1sys_poll( b_ptr->coalesce_handle,
                           mem_type,
                           (b_ptr->base_address + (b_ptr->A)*0x4000),
                           reg,
                           mask,
                           value,
                           cmp,
                           max_count,
                           num_failed_polls,
                           delay_between_polls_in_microseconds);
    else
        return l2sys_poll( ((pmc_handle_t *)h_ptr)->sys_handle,
                           mem_type,
                           (((pmc_handle_t *)h_ptr)->base_address + (A)*0x4000) + reg,
                           mask,
                           value,
                           cmp,
                           max_count,
                           num_failed_polls,
                           delay_between_polls_in_microseconds);
}

/*
 * ==================================================================================
 *  register access functions for qs
 * ==================================================================================
 */

/**
 * accessor functions for register PMC_QS_REG_FIFO_CFG
 *
 * Register: FIFO End Address Configuration
 * Offset: 0x000a3d00 FIFO_CFG
 *
 * bits 28   default 0                 FIFO_END_ADDR_CHG_ABORT
 *
 * bits 24   default 0                 FIFO_END_ADDR_CHG_REQ
 *
 * bits 16:0 default 00000000000000000 FIFO_END_ADDR
 */

#ifndef qs_reg_FIFO_CFG_write
#define qs_reg_FIFO_CFG_write( b_ptr, h_ptr, A, value ) \
       _qs_reg_FIFO_CFG_write( LOG_CALLER b_ptr, h_ptr, A, value )
#endif
static INLINE void _qs_reg_FIFO_CFG_write( LOG_CALLER_DEFN
                                           qs_buffer_t *b_ptr,
                                           cpb_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "qs_reg_FIFO_CFG_write", value );
    qs_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_QS_REG_FIFO_CFG,
                  value);
}


#ifndef qs_reg_FIFO_CFG_field_set
#define qs_reg_FIFO_CFG_field_set( b_ptr, h_ptr, A, mask, ofs, value ) \
       _qs_reg_FIFO_CFG_field_set( LOG_CALLER b_ptr, h_ptr, A, mask, ofs, value )
#endif
static INLINE void _qs_reg_FIFO_CFG_field_set( LOG_CALLER_DEFN
                                               qs_buffer_t *b_ptr,
                                               cpb_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 mask,
                                               UINT32 ofs,
                                               UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "qs_reg_FIFO_CFG_field_set", A, mask, ofs, value );
    qs_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_QS_REG_FIFO_CFG,
                  mask,
                  PMC_QS_REG_FIFO_CFG_UNUSED_MASK,
                  ofs,
                  value);

}


#ifndef qs_reg_FIFO_CFG_read
#define qs_reg_FIFO_CFG_read( b_ptr, h_ptr, A ) \
       _qs_reg_FIFO_CFG_read( LOG_CALLER b_ptr, h_ptr, A )
#endif
static INLINE UINT32 _qs_reg_FIFO_CFG_read( LOG_CALLER_DEFN
                                            qs_buffer_t *b_ptr,
                                            cpb_handle_t *h_ptr,
                                            UINT32 A )
{
    UINT32 reg_value;

    reg_value = qs_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_QS_REG_FIFO_CFG);

    IOLOG( "%s -> 0x%08x; A=%d", "qs_reg_FIFO_CFG_read", reg_value, A);
    return reg_value;
}

#ifndef qs_reg_FIFO_CFG_poll
#define qs_reg_FIFO_CFG_poll( b_ptr, h_ptr, A, mask, value, cmp, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _qs_reg_FIFO_CFG_poll( LOG_CALLER b_ptr, h_ptr, A, mask, value, cmp, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_POLL_RETURN_TYPE _qs_reg_FIFO_CFG_poll( LOG_CALLER_DEFN
                                                          qs_buffer_t *b_ptr,
                                                          cpb_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 mask,
                                                          UINT32 value,
                                                          PMC_POLL_COMPARISON_TYPE cmp,
                                                          UINT32 max_count,
                                                          UINT32 *num_failed_polls,
                                                          UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, cmp=%d, max_count=%d, delay_between_polls_in_microseconds=%d", "qs_reg_FIFO_CFG_poll", mask, value, cmp, max_count, delay_between_polls_in_microseconds );
    return qs_poll( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_QS_REG_FIFO_CFG,
                    mask,
                    value,
                    cmp,
                    max_count,
                    num_failed_polls,
                    delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_QS_REG_FIFO_CFG_RID
 *
 * Register: FIFO End Address RID
 * Offset: 0x000a3d04 FIFO_CFG_RID
 *
 * bits 7:0 default 00000000 FIFO_END_ADDR_CHG_RID
 */

#ifndef qs_reg_FIFO_CFG_RID_write
#define qs_reg_FIFO_CFG_RID_write( b_ptr, h_ptr, A, value ) \
       _qs_reg_FIFO_CFG_RID_write( LOG_CALLER b_ptr, h_ptr, A, value )
#endif
static INLINE void _qs_reg_FIFO_CFG_RID_write( LOG_CALLER_DEFN
                                               qs_buffer_t *b_ptr,
                                               cpb_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "qs_reg_FIFO_CFG_RID_write", value );
    qs_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_QS_REG_FIFO_CFG_RID,
                  value);
}


#ifndef qs_reg_FIFO_CFG_RID_field_set
#define qs_reg_FIFO_CFG_RID_field_set( b_ptr, h_ptr, A, mask, ofs, value ) \
       _qs_reg_FIFO_CFG_RID_field_set( LOG_CALLER b_ptr, h_ptr, A, mask, ofs, value )
#endif
static INLINE void _qs_reg_FIFO_CFG_RID_field_set( LOG_CALLER_DEFN
                                                   qs_buffer_t *b_ptr,
                                                   cpb_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "qs_reg_FIFO_CFG_RID_field_set", A, mask, ofs, value );
    qs_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_QS_REG_FIFO_CFG_RID,
                  mask,
                  PMC_QS_REG_FIFO_CFG_RID_UNUSED_MASK,
                  ofs,
                  value);

}


#ifndef qs_reg_FIFO_CFG_RID_read
#define qs_reg_FIFO_CFG_RID_read( b_ptr, h_ptr, A ) \
       _qs_reg_FIFO_CFG_RID_read( LOG_CALLER b_ptr, h_ptr, A )
#endif
static INLINE UINT32 _qs_reg_FIFO_CFG_RID_read( LOG_CALLER_DEFN
                                                qs_buffer_t *b_ptr,
                                                cpb_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 reg_value;

    reg_value = qs_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_QS_REG_FIFO_CFG_RID);

    IOLOG( "%s -> 0x%08x; A=%d", "qs_reg_FIFO_CFG_RID_read", reg_value, A);
    return reg_value;
}

/**
 * accessor functions for register PMC_QS_REG_FIFO_CFG_WID
 *
 * Register: FIFO End Address WID
 * Offset: 0x000a3d08 FIFO_CFG_WID
 *
 * bits 9:0 default 0000000000 FIFO_END_ADDR_CHG_WID
 */

#ifndef qs_reg_FIFO_CFG_WID_write
#define qs_reg_FIFO_CFG_WID_write( b_ptr, h_ptr, A, value ) \
       _qs_reg_FIFO_CFG_WID_write( LOG_CALLER b_ptr, h_ptr, A, value )
#endif
static INLINE void _qs_reg_FIFO_CFG_WID_write( LOG_CALLER_DEFN
                                               qs_buffer_t *b_ptr,
                                               cpb_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "qs_reg_FIFO_CFG_WID_write", value );
    qs_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_QS_REG_FIFO_CFG_WID,
                  value);
}


#ifndef qs_reg_FIFO_CFG_WID_field_set
#define qs_reg_FIFO_CFG_WID_field_set( b_ptr, h_ptr, A, mask, ofs, value ) \
       _qs_reg_FIFO_CFG_WID_field_set( LOG_CALLER b_ptr, h_ptr, A, mask, ofs, value )
#endif
static INLINE void _qs_reg_FIFO_CFG_WID_field_set( LOG_CALLER_DEFN
                                                   qs_buffer_t *b_ptr,
                                                   cpb_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "qs_reg_FIFO_CFG_WID_field_set", A, mask, ofs, value );
    qs_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_QS_REG_FIFO_CFG_WID,
                  mask,
                  PMC_QS_REG_FIFO_CFG_WID_UNUSED_MASK,
                  ofs,
                  value);

}


#ifndef qs_reg_FIFO_CFG_WID_read
#define qs_reg_FIFO_CFG_WID_read( b_ptr, h_ptr, A ) \
       _qs_reg_FIFO_CFG_WID_read( LOG_CALLER b_ptr, h_ptr, A )
#endif
static INLINE UINT32 _qs_reg_FIFO_CFG_WID_read( LOG_CALLER_DEFN
                                                qs_buffer_t *b_ptr,
                                                cpb_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 reg_value;

    reg_value = qs_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_QS_REG_FIFO_CFG_WID);

    IOLOG( "%s -> 0x%08x; A=%d", "qs_reg_FIFO_CFG_WID_read", reg_value, A);
    return reg_value;
}

/**
 * accessor functions for register PMC_QS_REG_DBG_CTRL
 *
 * Register: Debug Interface Control
 * Offset: 0x000a3e00 DBG_CTRL
 *
 * bits 10:0 default 0x0000 DBG_RADDR
 */

#ifndef qs_reg_DBG_CTRL_write
#define qs_reg_DBG_CTRL_write( b_ptr, h_ptr, A, value ) \
       _qs_reg_DBG_CTRL_write( LOG_CALLER b_ptr, h_ptr, A, value )
#endif
static INLINE void _qs_reg_DBG_CTRL_write( LOG_CALLER_DEFN
                                           qs_buffer_t *b_ptr,
                                           cpb_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "qs_reg_DBG_CTRL_write", value );
    qs_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_QS_REG_DBG_CTRL,
                  value);
}


#ifndef qs_reg_DBG_CTRL_field_set
#define qs_reg_DBG_CTRL_field_set( b_ptr, h_ptr, A, mask, ofs, value ) \
       _qs_reg_DBG_CTRL_field_set( LOG_CALLER b_ptr, h_ptr, A, mask, ofs, value )
#endif
static INLINE void _qs_reg_DBG_CTRL_field_set( LOG_CALLER_DEFN
                                               qs_buffer_t *b_ptr,
                                               cpb_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 mask,
                                               UINT32 ofs,
                                               UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "qs_reg_DBG_CTRL_field_set", A, mask, ofs, value );
    qs_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_QS_REG_DBG_CTRL,
                  mask,
                  PMC_QS_REG_DBG_CTRL_UNUSED_MASK,
                  ofs,
                  value);

}


#ifndef qs_reg_DBG_CTRL_read
#define qs_reg_DBG_CTRL_read( b_ptr, h_ptr, A ) \
       _qs_reg_DBG_CTRL_read( LOG_CALLER b_ptr, h_ptr, A )
#endif
static INLINE UINT32 _qs_reg_DBG_CTRL_read( LOG_CALLER_DEFN
                                            qs_buffer_t *b_ptr,
                                            cpb_handle_t *h_ptr,
                                            UINT32 A )
{
    UINT32 reg_value;

    reg_value = qs_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_QS_REG_DBG_CTRL);

    IOLOG( "%s -> 0x%08x; A=%d", "qs_reg_DBG_CTRL_read", reg_value, A);
    return reg_value;
}

/**
 * accessor functions for register PMC_QS_REG_POP_PORT_RST
 *
 * Register: Pop Port Read Pointer Reset (Write Only)
 * Offset: (0x000a2000 + (N) * 0x4) POP_PORT_RST
 *
 * bits 0 default 0x1 RPTR_RST_POP
 */

#ifndef qs_reg_POP_PORT_RST_array_write
#define qs_reg_POP_PORT_RST_array_write( b_ptr, h_ptr, A, N, value ) \
       _qs_reg_POP_PORT_RST_array_write( LOG_CALLER b_ptr, h_ptr, A, N, value )
#endif
static INLINE void _qs_reg_POP_PORT_RST_array_write( LOG_CALLER_DEFN
                                                     qs_buffer_t *b_ptr,
                                                     cpb_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "qs_reg_POP_PORT_RST_array_write", value );
    qs_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_STATUS,
                  PMC_QS_REG_POP_PORT_RST(N),
                  value);
}


#ifndef qs_reg_POP_PORT_RST_array_field_set
#define qs_reg_POP_PORT_RST_array_field_set( b_ptr, h_ptr, A, N, mask, ofs, value ) \
       _qs_reg_POP_PORT_RST_array_field_set( LOG_CALLER b_ptr, h_ptr, A, N, mask, ofs, value )
#endif
static INLINE void _qs_reg_POP_PORT_RST_array_field_set( LOG_CALLER_DEFN
                                                         qs_buffer_t *b_ptr,
                                                         cpb_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32  N,
                                                         UINT32 mask,
                                                         UINT32 ofs,
                                                         UINT32 value )
{
    IOLOG( "%s <- A=%d N=%d mask=0x%08x ofs=%d value=0x%08x", "qs_reg_POP_PORT_RST_array_field_set", A, N, mask, ofs, value );
    qs_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_STATUS,
                  PMC_QS_REG_POP_PORT_RST(N),
                  mask,
                  PMC_QS_REG_POP_PORT_RST_UNUSED_MASK,
                  ofs,
                  value);

}


#ifndef qs_reg_POP_PORT_RST_array_read
#define qs_reg_POP_PORT_RST_array_read( b_ptr, h_ptr, A, N ) \
       _qs_reg_POP_PORT_RST_array_read( LOG_CALLER b_ptr, h_ptr, A, N )
#endif
static INLINE UINT32 _qs_reg_POP_PORT_RST_array_read( LOG_CALLER_DEFN
                                                      qs_buffer_t *b_ptr,
                                                      cpb_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N )
{
    UINT32 reg_value;

    reg_value = qs_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_STATUS,
                             PMC_QS_REG_POP_PORT_RST(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "qs_reg_POP_PORT_RST_array_read", reg_value, A, N);
    return reg_value;
}

/**
 * accessor functions for register PMC_QS_REG_PUSH_PORT_P0_RST
 *
 * Register: Push Port 0 Write Pointer Reset (Write Only)
 * Offset: (0x000a0000 + (N) * 0x4) PUSH_PORT_P0_RST
 *
 * bits 0 default 0x1 WPTR_RST_PUSH_P0
 */

#ifndef qs_reg_PUSH_PORT_P0_RST_array_write
#define qs_reg_PUSH_PORT_P0_RST_array_write( b_ptr, h_ptr, A, N, value ) \
       _qs_reg_PUSH_PORT_P0_RST_array_write( LOG_CALLER b_ptr, h_ptr, A, N, value )
#endif
static INLINE void _qs_reg_PUSH_PORT_P0_RST_array_write( LOG_CALLER_DEFN
                                                         qs_buffer_t *b_ptr,
                                                         cpb_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32  N,
                                                         UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "qs_reg_PUSH_PORT_P0_RST_array_write", value );
    qs_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_STATUS,
                  PMC_QS_REG_PUSH_PORT_P0_RST(N),
                  value);
}


#ifndef qs_reg_PUSH_PORT_P0_RST_array_field_set
#define qs_reg_PUSH_PORT_P0_RST_array_field_set( b_ptr, h_ptr, A, N, mask, ofs, value ) \
       _qs_reg_PUSH_PORT_P0_RST_array_field_set( LOG_CALLER b_ptr, h_ptr, A, N, mask, ofs, value )
#endif
static INLINE void _qs_reg_PUSH_PORT_P0_RST_array_field_set( LOG_CALLER_DEFN
                                                             qs_buffer_t *b_ptr,
                                                             cpb_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32  N,
                                                             UINT32 mask,
                                                             UINT32 ofs,
                                                             UINT32 value )
{
    IOLOG( "%s <- A=%d N=%d mask=0x%08x ofs=%d value=0x%08x", "qs_reg_PUSH_PORT_P0_RST_array_field_set", A, N, mask, ofs, value );
    qs_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_STATUS,
                  PMC_QS_REG_PUSH_PORT_P0_RST(N),
                  mask,
                  PMC_QS_REG_PUSH_PORT_P0_RST_UNUSED_MASK,
                  ofs,
                  value);

}


#ifndef qs_reg_PUSH_PORT_P0_RST_array_read
#define qs_reg_PUSH_PORT_P0_RST_array_read( b_ptr, h_ptr, A, N ) \
       _qs_reg_PUSH_PORT_P0_RST_array_read( LOG_CALLER b_ptr, h_ptr, A, N )
#endif
static INLINE UINT32 _qs_reg_PUSH_PORT_P0_RST_array_read( LOG_CALLER_DEFN
                                                          qs_buffer_t *b_ptr,
                                                          cpb_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32  N )
{
    UINT32 reg_value;

    reg_value = qs_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_STATUS,
                             PMC_QS_REG_PUSH_PORT_P0_RST(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "qs_reg_PUSH_PORT_P0_RST_array_read", reg_value, A, N);
    return reg_value;
}

/**
 * accessor functions for register PMC_QS_REG_PUSH_PORT_P1_RST
 *
 * Register: Push Port 1 Write Pointer Reset (Write Only)
 * Offset: (0x000a0800 + (N) * 0x4) PUSH_PORT_P1_RST
 *
 * bits 0 default 0x1 WPTR_RST_PUSH_P1
 */

#ifndef qs_reg_PUSH_PORT_P1_RST_array_write
#define qs_reg_PUSH_PORT_P1_RST_array_write( b_ptr, h_ptr, A, N, value ) \
       _qs_reg_PUSH_PORT_P1_RST_array_write( LOG_CALLER b_ptr, h_ptr, A, N, value )
#endif
static INLINE void _qs_reg_PUSH_PORT_P1_RST_array_write( LOG_CALLER_DEFN
                                                         qs_buffer_t *b_ptr,
                                                         cpb_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32  N,
                                                         UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "qs_reg_PUSH_PORT_P1_RST_array_write", value );
    qs_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_STATUS,
                  PMC_QS_REG_PUSH_PORT_P1_RST(N),
                  value);
}


#ifndef qs_reg_PUSH_PORT_P1_RST_array_field_set
#define qs_reg_PUSH_PORT_P1_RST_array_field_set( b_ptr, h_ptr, A, N, mask, ofs, value ) \
       _qs_reg_PUSH_PORT_P1_RST_array_field_set( LOG_CALLER b_ptr, h_ptr, A, N, mask, ofs, value )
#endif
static INLINE void _qs_reg_PUSH_PORT_P1_RST_array_field_set( LOG_CALLER_DEFN
                                                             qs_buffer_t *b_ptr,
                                                             cpb_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32  N,
                                                             UINT32 mask,
                                                             UINT32 ofs,
                                                             UINT32 value )
{
    IOLOG( "%s <- A=%d N=%d mask=0x%08x ofs=%d value=0x%08x", "qs_reg_PUSH_PORT_P1_RST_array_field_set", A, N, mask, ofs, value );
    qs_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_STATUS,
                  PMC_QS_REG_PUSH_PORT_P1_RST(N),
                  mask,
                  PMC_QS_REG_PUSH_PORT_P1_RST_UNUSED_MASK,
                  ofs,
                  value);

}


#ifndef qs_reg_PUSH_PORT_P1_RST_array_read
#define qs_reg_PUSH_PORT_P1_RST_array_read( b_ptr, h_ptr, A, N ) \
       _qs_reg_PUSH_PORT_P1_RST_array_read( LOG_CALLER b_ptr, h_ptr, A, N )
#endif
static INLINE UINT32 _qs_reg_PUSH_PORT_P1_RST_array_read( LOG_CALLER_DEFN
                                                          qs_buffer_t *b_ptr,
                                                          cpb_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32  N )
{
    UINT32 reg_value;

    reg_value = qs_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_STATUS,
                             PMC_QS_REG_PUSH_PORT_P1_RST(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "qs_reg_PUSH_PORT_P1_RST_array_read", reg_value, A, N);
    return reg_value;
}

/**
 * accessor functions for register PMC_QS_REG_PUSH_PORT_P2_RST
 *
 * Register: Push Port 2 Write Pointer Reset (Write Only)
 * Offset: (0x000a1000 + (N) * 0x4) PUSH_PORT_P2_RST
 *
 * bits 0 default 0x1 WPTR_RST_PUSH_P2
 */

#ifndef qs_reg_PUSH_PORT_P2_RST_array_write
#define qs_reg_PUSH_PORT_P2_RST_array_write( b_ptr, h_ptr, A, N, value ) \
       _qs_reg_PUSH_PORT_P2_RST_array_write( LOG_CALLER b_ptr, h_ptr, A, N, value )
#endif
static INLINE void _qs_reg_PUSH_PORT_P2_RST_array_write( LOG_CALLER_DEFN
                                                         qs_buffer_t *b_ptr,
                                                         cpb_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32  N,
                                                         UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "qs_reg_PUSH_PORT_P2_RST_array_write", value );
    qs_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_STATUS,
                  PMC_QS_REG_PUSH_PORT_P2_RST(N),
                  value);
}


#ifndef qs_reg_PUSH_PORT_P2_RST_array_field_set
#define qs_reg_PUSH_PORT_P2_RST_array_field_set( b_ptr, h_ptr, A, N, mask, ofs, value ) \
       _qs_reg_PUSH_PORT_P2_RST_array_field_set( LOG_CALLER b_ptr, h_ptr, A, N, mask, ofs, value )
#endif
static INLINE void _qs_reg_PUSH_PORT_P2_RST_array_field_set( LOG_CALLER_DEFN
                                                             qs_buffer_t *b_ptr,
                                                             cpb_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32  N,
                                                             UINT32 mask,
                                                             UINT32 ofs,
                                                             UINT32 value )
{
    IOLOG( "%s <- A=%d N=%d mask=0x%08x ofs=%d value=0x%08x", "qs_reg_PUSH_PORT_P2_RST_array_field_set", A, N, mask, ofs, value );
    qs_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_STATUS,
                  PMC_QS_REG_PUSH_PORT_P2_RST(N),
                  mask,
                  PMC_QS_REG_PUSH_PORT_P2_RST_UNUSED_MASK,
                  ofs,
                  value);

}


#ifndef qs_reg_PUSH_PORT_P2_RST_array_read
#define qs_reg_PUSH_PORT_P2_RST_array_read( b_ptr, h_ptr, A, N ) \
       _qs_reg_PUSH_PORT_P2_RST_array_read( LOG_CALLER b_ptr, h_ptr, A, N )
#endif
static INLINE UINT32 _qs_reg_PUSH_PORT_P2_RST_array_read( LOG_CALLER_DEFN
                                                          qs_buffer_t *b_ptr,
                                                          cpb_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32  N )
{
    UINT32 reg_value;

    reg_value = qs_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_STATUS,
                             PMC_QS_REG_PUSH_PORT_P2_RST(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "qs_reg_PUSH_PORT_P2_RST_array_read", reg_value, A, N);
    return reg_value;
}

/**
 * accessor functions for register PMC_QS_REG_PUSH_PORT_P3_RST
 *
 * Register: Push Port 3 Write Pointer Reset (Write Only)
 * Offset: (0x000a1800 + (N) * 0x4) PUSH_PORT_P3_RST
 *
 * bits 0 default 0x1 WPTR_RST_PUSH_P3
 */

#ifndef qs_reg_PUSH_PORT_P3_RST_array_write
#define qs_reg_PUSH_PORT_P3_RST_array_write( b_ptr, h_ptr, A, N, value ) \
       _qs_reg_PUSH_PORT_P3_RST_array_write( LOG_CALLER b_ptr, h_ptr, A, N, value )
#endif
static INLINE void _qs_reg_PUSH_PORT_P3_RST_array_write( LOG_CALLER_DEFN
                                                         qs_buffer_t *b_ptr,
                                                         cpb_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32  N,
                                                         UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "qs_reg_PUSH_PORT_P3_RST_array_write", value );
    qs_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_STATUS,
                  PMC_QS_REG_PUSH_PORT_P3_RST(N),
                  value);
}


#ifndef qs_reg_PUSH_PORT_P3_RST_array_field_set
#define qs_reg_PUSH_PORT_P3_RST_array_field_set( b_ptr, h_ptr, A, N, mask, ofs, value ) \
       _qs_reg_PUSH_PORT_P3_RST_array_field_set( LOG_CALLER b_ptr, h_ptr, A, N, mask, ofs, value )
#endif
static INLINE void _qs_reg_PUSH_PORT_P3_RST_array_field_set( LOG_CALLER_DEFN
                                                             qs_buffer_t *b_ptr,
                                                             cpb_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32  N,
                                                             UINT32 mask,
                                                             UINT32 ofs,
                                                             UINT32 value )
{
    IOLOG( "%s <- A=%d N=%d mask=0x%08x ofs=%d value=0x%08x", "qs_reg_PUSH_PORT_P3_RST_array_field_set", A, N, mask, ofs, value );
    qs_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_STATUS,
                  PMC_QS_REG_PUSH_PORT_P3_RST(N),
                  mask,
                  PMC_QS_REG_PUSH_PORT_P3_RST_UNUSED_MASK,
                  ofs,
                  value);

}


#ifndef qs_reg_PUSH_PORT_P3_RST_array_read
#define qs_reg_PUSH_PORT_P3_RST_array_read( b_ptr, h_ptr, A, N ) \
       _qs_reg_PUSH_PORT_P3_RST_array_read( LOG_CALLER b_ptr, h_ptr, A, N )
#endif
static INLINE UINT32 _qs_reg_PUSH_PORT_P3_RST_array_read( LOG_CALLER_DEFN
                                                          qs_buffer_t *b_ptr,
                                                          cpb_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32  N )
{
    UINT32 reg_value;

    reg_value = qs_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_STATUS,
                             PMC_QS_REG_PUSH_PORT_P3_RST(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "qs_reg_PUSH_PORT_P3_RST_array_read", reg_value, A, N);
    return reg_value;
}

/**
 * accessor functions for register PMC_QS_REG_FIFO_CFG_STAT
 *
 * Register: FIFO End Address Change Status
 * Offset: 0x000a3d0c FIFO_CFG_STAT
 *
 * bits 0 default 0 FIFO_END_ADDR_CHG_SUCCESS
 */

#ifndef qs_reg_FIFO_CFG_STAT_read
#define qs_reg_FIFO_CFG_STAT_read( b_ptr, h_ptr, A ) \
       _qs_reg_FIFO_CFG_STAT_read( LOG_CALLER b_ptr, h_ptr, A )
#endif
static INLINE UINT32 _qs_reg_FIFO_CFG_STAT_read( LOG_CALLER_DEFN
                                                 qs_buffer_t *b_ptr,
                                                 cpb_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 reg_value;

    reg_value = qs_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_STATUS,
                             PMC_QS_REG_FIFO_CFG_STAT);

    IOLOG( "%s -> 0x%08x; A=%d", "qs_reg_FIFO_CFG_STAT_read", reg_value, A);
    return reg_value;
}

#ifndef qs_reg_FIFO_CFG_STAT_poll
#define qs_reg_FIFO_CFG_STAT_poll( b_ptr, h_ptr, A, mask, value, cmp, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _qs_reg_FIFO_CFG_STAT_poll( LOG_CALLER b_ptr, h_ptr, A, mask, value, cmp, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_POLL_RETURN_TYPE _qs_reg_FIFO_CFG_STAT_poll( LOG_CALLER_DEFN
                                                               qs_buffer_t *b_ptr,
                                                               cpb_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 mask,
                                                               UINT32 value,
                                                               PMC_POLL_COMPARISON_TYPE cmp,
                                                               UINT32 max_count,
                                                               UINT32 *num_failed_polls,
                                                               UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, cmp=%d, max_count=%d, delay_between_polls_in_microseconds=%d", "qs_reg_FIFO_CFG_STAT_poll", mask, value, cmp, max_count, delay_between_polls_in_microseconds );
    return qs_poll( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_STATUS,
                    PMC_QS_REG_FIFO_CFG_STAT,
                    mask,
                    value,
                    cmp,
                    max_count,
                    num_failed_polls,
                    delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_QS_REG_PUSH_PORT_P0_RST_VAL
 *
 * Register: Push Port 0 Write Pointer Reset Value (Read Only)
 * Offset: (0x000a0400 + (N) * 0x4) PUSH_PORT_P0_RST_VAL
 *
 * bits 31:0 default 0xFFFFFFFF WPTR_RST_PUSH_P0_VAL
 */

#ifndef qs_reg_PUSH_PORT_P0_RST_VAL_array_read
#define qs_reg_PUSH_PORT_P0_RST_VAL_array_read( b_ptr, h_ptr, A, N ) \
       _qs_reg_PUSH_PORT_P0_RST_VAL_array_read( LOG_CALLER b_ptr, h_ptr, A, N )
#endif
static INLINE UINT32 _qs_reg_PUSH_PORT_P0_RST_VAL_array_read( LOG_CALLER_DEFN
                                                              qs_buffer_t *b_ptr,
                                                              cpb_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32  N )
{
    UINT32 reg_value;

    reg_value = qs_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_STATUS,
                             PMC_QS_REG_PUSH_PORT_P0_RST_VAL(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "qs_reg_PUSH_PORT_P0_RST_VAL_array_read", reg_value, A, N);
    return reg_value;
}

/**
 * accessor functions for register PMC_QS_REG_PUSH_PORT_P1_RST_VAL
 *
 * Register: Push Port 1 Write Pointer Reset Value (Read Only)
 * Offset: (0x000a0c00 + (N) * 0x4) PUSH_PORT_P1_RST_VAL
 *
 * bits 31:0 default 0xFFFFFFFF WPTR_RST_PUSH_P1_VAL
 */

#ifndef qs_reg_PUSH_PORT_P1_RST_VAL_array_read
#define qs_reg_PUSH_PORT_P1_RST_VAL_array_read( b_ptr, h_ptr, A, N ) \
       _qs_reg_PUSH_PORT_P1_RST_VAL_array_read( LOG_CALLER b_ptr, h_ptr, A, N )
#endif
static INLINE UINT32 _qs_reg_PUSH_PORT_P1_RST_VAL_array_read( LOG_CALLER_DEFN
                                                              qs_buffer_t *b_ptr,
                                                              cpb_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32  N )
{
    UINT32 reg_value;

    reg_value = qs_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_STATUS,
                             PMC_QS_REG_PUSH_PORT_P1_RST_VAL(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "qs_reg_PUSH_PORT_P1_RST_VAL_array_read", reg_value, A, N);
    return reg_value;
}

/**
 * accessor functions for register PMC_QS_REG_PUSH_PORT_P2_RST_VAL
 *
 * Register: Push Port 2 Write Pointer Reset Value (Read Only)
 * Offset: (0x000a1400 + (N) * 0x4) PUSH_PORT_P2_RST_VAL
 *
 * bits 31:0 default 0xFFFFFFFF WPTR_RST_PUSH_P2_VAL
 */

#ifndef qs_reg_PUSH_PORT_P2_RST_VAL_array_read
#define qs_reg_PUSH_PORT_P2_RST_VAL_array_read( b_ptr, h_ptr, A, N ) \
       _qs_reg_PUSH_PORT_P2_RST_VAL_array_read( LOG_CALLER b_ptr, h_ptr, A, N )
#endif
static INLINE UINT32 _qs_reg_PUSH_PORT_P2_RST_VAL_array_read( LOG_CALLER_DEFN
                                                              qs_buffer_t *b_ptr,
                                                              cpb_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32  N )
{
    UINT32 reg_value;

    reg_value = qs_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_STATUS,
                             PMC_QS_REG_PUSH_PORT_P2_RST_VAL(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "qs_reg_PUSH_PORT_P2_RST_VAL_array_read", reg_value, A, N);
    return reg_value;
}

/**
 * accessor functions for register PMC_QS_REG_PUSH_PORT_P3_RST_VAL
 *
 * Register: Push Port 3 Write Pointer Reset Value (Read Only)
 * Offset: (0x000a1c00 + (N) * 0x4) PUSH_PORT_P3_RST_VAL
 *
 * bits 31:0 default 0xFFFFFFFF WPTR_RST_PUSH_P3_VAL
 */

#ifndef qs_reg_PUSH_PORT_P3_RST_VAL_array_read
#define qs_reg_PUSH_PORT_P3_RST_VAL_array_read( b_ptr, h_ptr, A, N ) \
       _qs_reg_PUSH_PORT_P3_RST_VAL_array_read( LOG_CALLER b_ptr, h_ptr, A, N )
#endif
static INLINE UINT32 _qs_reg_PUSH_PORT_P3_RST_VAL_array_read( LOG_CALLER_DEFN
                                                              qs_buffer_t *b_ptr,
                                                              cpb_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32  N )
{
    UINT32 reg_value;

    reg_value = qs_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_STATUS,
                             PMC_QS_REG_PUSH_PORT_P3_RST_VAL(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "qs_reg_PUSH_PORT_P3_RST_VAL_array_read", reg_value, A, N);
    return reg_value;
}

/**
 * accessor functions for register PMC_QS_REG_RPTR_RST_POP_VAL_REG
 *
 * Register: Read Pointer Reset Value (Read Only)
 * Offset: (0x000a2400 + (N) * 0x4) RPTR_RST_POP_VAL_REG
 *
 * bits 31:0 default 0xFFFFFFFF RPTR_RST_POP_VAL
 */

#ifndef qs_reg_RPTR_RST_POP_VAL_REG_array_read
#define qs_reg_RPTR_RST_POP_VAL_REG_array_read( b_ptr, h_ptr, A, N ) \
       _qs_reg_RPTR_RST_POP_VAL_REG_array_read( LOG_CALLER b_ptr, h_ptr, A, N )
#endif
static INLINE UINT32 _qs_reg_RPTR_RST_POP_VAL_REG_array_read( LOG_CALLER_DEFN
                                                              qs_buffer_t *b_ptr,
                                                              cpb_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32  N )
{
    UINT32 reg_value;

    reg_value = qs_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_STATUS,
                             PMC_QS_REG_RPTR_RST_POP_VAL_REG(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "qs_reg_RPTR_RST_POP_VAL_REG_array_read", reg_value, A, N);
    return reg_value;
}

/**
 * accessor functions for register PMC_QS_REG_FIFO_PTR_EMPTY_REG
 *
 * Register: Pop Port Packet Empty Status
 * Offset: (0x000a2600 + (N) * 0x4) FIFO_PTR_EMPTY_REG
 *
 * bits 31:0 default 0xFFFFFFFF FIFO_PKT_EMPTY
 */

#ifndef qs_reg_FIFO_PTR_EMPTY_REG_array_read
#define qs_reg_FIFO_PTR_EMPTY_REG_array_read( b_ptr, h_ptr, A, N ) \
       _qs_reg_FIFO_PTR_EMPTY_REG_array_read( LOG_CALLER b_ptr, h_ptr, A, N )
#endif
static INLINE UINT32 _qs_reg_FIFO_PTR_EMPTY_REG_array_read( LOG_CALLER_DEFN
                                                            qs_buffer_t *b_ptr,
                                                            cpb_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32  N )
{
    UINT32 reg_value;

    reg_value = qs_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_STATUS,
                             PMC_QS_REG_FIFO_PTR_EMPTY_REG(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "qs_reg_FIFO_PTR_EMPTY_REG_array_read", reg_value, A, N);
    return reg_value;
}

#ifndef qs_reg_FIFO_PTR_EMPTY_REG_array_poll
#define qs_reg_FIFO_PTR_EMPTY_REG_array_poll( b_ptr, h_ptr, A, N, mask, value, cmp, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _qs_reg_FIFO_PTR_EMPTY_REG_array_poll( LOG_CALLER b_ptr, h_ptr, A, N, mask, value, cmp, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_POLL_RETURN_TYPE _qs_reg_FIFO_PTR_EMPTY_REG_array_poll( LOG_CALLER_DEFN
                                                                          qs_buffer_t *b_ptr,
                                                                          cpb_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32  N,
                                                                          UINT32 mask,
                                                                          UINT32 value,
                                                                          PMC_POLL_COMPARISON_TYPE cmp,
                                                                          UINT32 max_count,
                                                                          UINT32 *num_failed_polls,
                                                                          UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, cmp=%d, max_count=%d, delay_between_polls_in_microseconds=%d", "qs_reg_FIFO_PTR_EMPTY_REG_array_poll", mask, value, cmp, max_count, delay_between_polls_in_microseconds );
    return qs_poll( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_STATUS,
                    PMC_QS_REG_FIFO_PTR_EMPTY_REG(N),
                    mask,
                    value,
                    cmp,
                    max_count,
                    num_failed_polls,
                    delay_between_polls_in_microseconds);

}


/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config
 * ==================================================================================
 */

#ifndef qs_field_FIFO_END_ADDR_set
#define qs_field_FIFO_END_ADDR_set( b_ptr, h_ptr, A, value ) \
       _qs_field_FIFO_END_ADDR_set( LOG_CALLER b_ptr, h_ptr, A, value )
#endif
static INLINE void _qs_field_FIFO_END_ADDR_set( LOG_CALLER_DEFN
                                                qs_buffer_t *b_ptr,
                                                cpb_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_FIFO_END_ADDR_set", A, 3);
    if (value > 131071)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "qs_field_FIFO_END_ADDR_set", value, 131071);
    IOLOG( "%s <= A=%d 0x%08x", "qs_field_FIFO_END_ADDR_set", A, value );

    /* (0x000a3d00 bits 16:0) field FIFO_END_ADDR of register PMC_QS_REG_FIFO_CFG */
    _qs_reg_FIFO_CFG_field_set( LOG_CALLER_ARGS
                                b_ptr,
                                h_ptr,
                                A,
                                QS_REG_FIFO_CFG_BIT_FIFO_END_ADDR_MSK,
                                QS_REG_FIFO_CFG_BIT_FIFO_END_ADDR_OFF,
                                value);
}


#ifndef qs_field_FIFO_END_ADDR_get
#define qs_field_FIFO_END_ADDR_get( b_ptr, h_ptr, A ) \
       _qs_field_FIFO_END_ADDR_get( LOG_CALLER b_ptr, h_ptr, A )
#endif
static INLINE UINT32 _qs_field_FIFO_END_ADDR_get( LOG_CALLER_DEFN
                                                  qs_buffer_t *b_ptr,
                                                  cpb_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_FIFO_END_ADDR_get", A, 3);
    /* (0x000a3d00 bits 16:0) field FIFO_END_ADDR of register PMC_QS_REG_FIFO_CFG */
    reg_value = _qs_reg_FIFO_CFG_read( LOG_CALLER_ARGS b_ptr, h_ptr, A);
    value = (reg_value & QS_REG_FIFO_CFG_BIT_FIFO_END_ADDR_MSK) >> QS_REG_FIFO_CFG_BIT_FIFO_END_ADDR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "qs_field_FIFO_END_ADDR_get", A, value );

    return value;
}

#ifndef qs_field_range_FIFO_END_ADDR_set
#define qs_field_range_FIFO_END_ADDR_set( b_ptr, h_ptr, A, start_bit, stop_bit, value ) \
       _qs_field_range_FIFO_END_ADDR_set( LOG_CALLER b_ptr, h_ptr, A, start_bit, stop_bit, value )
#endif
static INLINE void _qs_field_range_FIFO_END_ADDR_set( LOG_CALLER_DEFN
                                                      qs_buffer_t *b_ptr,
                                                      cpb_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_range_FIFO_END_ADDR_set", A, 3);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "qs_field_range_FIFO_END_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 16) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "qs_field_range_FIFO_END_ADDR_set", stop_bit, 16 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "qs_field_range_FIFO_END_ADDR_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000a3d00 bits 16:0) field FIFO_END_ADDR of register PMC_QS_REG_FIFO_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 16) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 16;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000a3d00 bits 16:0) field FIFO_END_ADDR of register PMC_QS_REG_FIFO_CFG */
        _qs_reg_FIFO_CFG_field_set( LOG_CALLER_ARGS
                                    b_ptr,
                                    h_ptr,
                                    A,
                                    subfield_mask << (QS_REG_FIFO_CFG_BIT_FIFO_END_ADDR_OFF + subfield_offset),
                                    QS_REG_FIFO_CFG_BIT_FIFO_END_ADDR_OFF + subfield_offset,
                                    value >> subfield_shift);
    }
}


#ifndef qs_field_range_FIFO_END_ADDR_get
#define qs_field_range_FIFO_END_ADDR_get( b_ptr, h_ptr, A, start_bit, stop_bit ) \
       _qs_field_range_FIFO_END_ADDR_get( LOG_CALLER b_ptr, h_ptr, A, start_bit, stop_bit )
#endif
static INLINE UINT32 _qs_field_range_FIFO_END_ADDR_get( LOG_CALLER_DEFN
                                                        qs_buffer_t *b_ptr,
                                                        cpb_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_range_FIFO_END_ADDR_get", A, 3);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "qs_field_range_FIFO_END_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 16) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "qs_field_range_FIFO_END_ADDR_get", stop_bit, 16 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 16) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 16;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000a3d00 bits 16:0) field FIFO_END_ADDR of register PMC_QS_REG_FIFO_CFG */
    reg_value = _qs_reg_FIFO_CFG_read( LOG_CALLER_ARGS b_ptr, h_ptr, A);
    field_value = (reg_value & QS_REG_FIFO_CFG_BIT_FIFO_END_ADDR_MSK)
                  >> QS_REG_FIFO_CFG_BIT_FIFO_END_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, QS_REG_FIFO_CFG_BIT_FIFO_END_ADDR_MSK, QS_REG_FIFO_CFG_BIT_FIFO_END_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "qs_field_range_FIFO_END_ADDR_get", A, start_bit, stop_bit, value );

    return value;
}

#ifndef qs_field_FIFO_END_ADDR_CHG_RID_set
#define qs_field_FIFO_END_ADDR_CHG_RID_set( b_ptr, h_ptr, A, value ) \
       _qs_field_FIFO_END_ADDR_CHG_RID_set( LOG_CALLER b_ptr, h_ptr, A, value )
#endif
static INLINE void _qs_field_FIFO_END_ADDR_CHG_RID_set( LOG_CALLER_DEFN
                                                        qs_buffer_t *b_ptr,
                                                        cpb_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value )
{
    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_FIFO_END_ADDR_CHG_RID_set", A, 3);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "qs_field_FIFO_END_ADDR_CHG_RID_set", value, 255);
    IOLOG( "%s <= A=%d 0x%08x", "qs_field_FIFO_END_ADDR_CHG_RID_set", A, value );

    /* (0x000a3d04 bits 7:0) field FIFO_END_ADDR_CHG_RID of register PMC_QS_REG_FIFO_CFG_RID */
    _qs_reg_FIFO_CFG_RID_field_set( LOG_CALLER_ARGS
                                    b_ptr,
                                    h_ptr,
                                    A,
                                    QS_REG_FIFO_CFG_RID_BIT_FIFO_END_ADDR_CHG_RID_MSK,
                                    QS_REG_FIFO_CFG_RID_BIT_FIFO_END_ADDR_CHG_RID_OFF,
                                    value);
}


#ifndef qs_field_FIFO_END_ADDR_CHG_RID_get
#define qs_field_FIFO_END_ADDR_CHG_RID_get( b_ptr, h_ptr, A ) \
       _qs_field_FIFO_END_ADDR_CHG_RID_get( LOG_CALLER b_ptr, h_ptr, A )
#endif
static INLINE UINT32 _qs_field_FIFO_END_ADDR_CHG_RID_get( LOG_CALLER_DEFN
                                                          qs_buffer_t *b_ptr,
                                                          cpb_handle_t *h_ptr,
                                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_FIFO_END_ADDR_CHG_RID_get", A, 3);
    /* (0x000a3d04 bits 7:0) field FIFO_END_ADDR_CHG_RID of register PMC_QS_REG_FIFO_CFG_RID */
    reg_value = _qs_reg_FIFO_CFG_RID_read( LOG_CALLER_ARGS b_ptr, h_ptr, A);
    value = (reg_value & QS_REG_FIFO_CFG_RID_BIT_FIFO_END_ADDR_CHG_RID_MSK) >> QS_REG_FIFO_CFG_RID_BIT_FIFO_END_ADDR_CHG_RID_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "qs_field_FIFO_END_ADDR_CHG_RID_get", A, value );

    return value;
}

#ifndef qs_field_range_FIFO_END_ADDR_CHG_RID_set
#define qs_field_range_FIFO_END_ADDR_CHG_RID_set( b_ptr, h_ptr, A, start_bit, stop_bit, value ) \
       _qs_field_range_FIFO_END_ADDR_CHG_RID_set( LOG_CALLER b_ptr, h_ptr, A, start_bit, stop_bit, value )
#endif
static INLINE void _qs_field_range_FIFO_END_ADDR_CHG_RID_set( LOG_CALLER_DEFN
                                                              qs_buffer_t *b_ptr,
                                                              cpb_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_range_FIFO_END_ADDR_CHG_RID_set", A, 3);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "qs_field_range_FIFO_END_ADDR_CHG_RID_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "qs_field_range_FIFO_END_ADDR_CHG_RID_set", stop_bit, 7 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "qs_field_range_FIFO_END_ADDR_CHG_RID_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000a3d04 bits 7:0) field FIFO_END_ADDR_CHG_RID of register PMC_QS_REG_FIFO_CFG_RID */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000a3d04 bits 7:0) field FIFO_END_ADDR_CHG_RID of register PMC_QS_REG_FIFO_CFG_RID */
        _qs_reg_FIFO_CFG_RID_field_set( LOG_CALLER_ARGS
                                        b_ptr,
                                        h_ptr,
                                        A,
                                        subfield_mask << (QS_REG_FIFO_CFG_RID_BIT_FIFO_END_ADDR_CHG_RID_OFF + subfield_offset),
                                        QS_REG_FIFO_CFG_RID_BIT_FIFO_END_ADDR_CHG_RID_OFF + subfield_offset,
                                        value >> subfield_shift);
    }
}


#ifndef qs_field_range_FIFO_END_ADDR_CHG_RID_get
#define qs_field_range_FIFO_END_ADDR_CHG_RID_get( b_ptr, h_ptr, A, start_bit, stop_bit ) \
       _qs_field_range_FIFO_END_ADDR_CHG_RID_get( LOG_CALLER b_ptr, h_ptr, A, start_bit, stop_bit )
#endif
static INLINE UINT32 _qs_field_range_FIFO_END_ADDR_CHG_RID_get( LOG_CALLER_DEFN
                                                                qs_buffer_t *b_ptr,
                                                                cpb_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_range_FIFO_END_ADDR_CHG_RID_get", A, 3);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "qs_field_range_FIFO_END_ADDR_CHG_RID_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "qs_field_range_FIFO_END_ADDR_CHG_RID_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000a3d04 bits 7:0) field FIFO_END_ADDR_CHG_RID of register PMC_QS_REG_FIFO_CFG_RID */
    reg_value = _qs_reg_FIFO_CFG_RID_read( LOG_CALLER_ARGS b_ptr, h_ptr, A);
    field_value = (reg_value & QS_REG_FIFO_CFG_RID_BIT_FIFO_END_ADDR_CHG_RID_MSK)
                  >> QS_REG_FIFO_CFG_RID_BIT_FIFO_END_ADDR_CHG_RID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, QS_REG_FIFO_CFG_RID_BIT_FIFO_END_ADDR_CHG_RID_MSK, QS_REG_FIFO_CFG_RID_BIT_FIFO_END_ADDR_CHG_RID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "qs_field_range_FIFO_END_ADDR_CHG_RID_get", A, start_bit, stop_bit, value );

    return value;
}

#ifndef qs_field_FIFO_END_ADDR_CHG_WID_set
#define qs_field_FIFO_END_ADDR_CHG_WID_set( b_ptr, h_ptr, A, value ) \
       _qs_field_FIFO_END_ADDR_CHG_WID_set( LOG_CALLER b_ptr, h_ptr, A, value )
#endif
static INLINE void _qs_field_FIFO_END_ADDR_CHG_WID_set( LOG_CALLER_DEFN
                                                        qs_buffer_t *b_ptr,
                                                        cpb_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value )
{
    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_FIFO_END_ADDR_CHG_WID_set", A, 3);
    if (value > 1023)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "qs_field_FIFO_END_ADDR_CHG_WID_set", value, 1023);
    IOLOG( "%s <= A=%d 0x%08x", "qs_field_FIFO_END_ADDR_CHG_WID_set", A, value );

    /* (0x000a3d08 bits 9:0) field FIFO_END_ADDR_CHG_WID of register PMC_QS_REG_FIFO_CFG_WID */
    _qs_reg_FIFO_CFG_WID_field_set( LOG_CALLER_ARGS
                                    b_ptr,
                                    h_ptr,
                                    A,
                                    QS_REG_FIFO_CFG_WID_BIT_FIFO_END_ADDR_CHG_WID_MSK,
                                    QS_REG_FIFO_CFG_WID_BIT_FIFO_END_ADDR_CHG_WID_OFF,
                                    value);
}


#ifndef qs_field_FIFO_END_ADDR_CHG_WID_get
#define qs_field_FIFO_END_ADDR_CHG_WID_get( b_ptr, h_ptr, A ) \
       _qs_field_FIFO_END_ADDR_CHG_WID_get( LOG_CALLER b_ptr, h_ptr, A )
#endif
static INLINE UINT32 _qs_field_FIFO_END_ADDR_CHG_WID_get( LOG_CALLER_DEFN
                                                          qs_buffer_t *b_ptr,
                                                          cpb_handle_t *h_ptr,
                                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_FIFO_END_ADDR_CHG_WID_get", A, 3);
    /* (0x000a3d08 bits 9:0) field FIFO_END_ADDR_CHG_WID of register PMC_QS_REG_FIFO_CFG_WID */
    reg_value = _qs_reg_FIFO_CFG_WID_read( LOG_CALLER_ARGS b_ptr, h_ptr, A);
    value = (reg_value & QS_REG_FIFO_CFG_WID_BIT_FIFO_END_ADDR_CHG_WID_MSK) >> QS_REG_FIFO_CFG_WID_BIT_FIFO_END_ADDR_CHG_WID_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "qs_field_FIFO_END_ADDR_CHG_WID_get", A, value );

    return value;
}

#ifndef qs_field_range_FIFO_END_ADDR_CHG_WID_set
#define qs_field_range_FIFO_END_ADDR_CHG_WID_set( b_ptr, h_ptr, A, start_bit, stop_bit, value ) \
       _qs_field_range_FIFO_END_ADDR_CHG_WID_set( LOG_CALLER b_ptr, h_ptr, A, start_bit, stop_bit, value )
#endif
static INLINE void _qs_field_range_FIFO_END_ADDR_CHG_WID_set( LOG_CALLER_DEFN
                                                              qs_buffer_t *b_ptr,
                                                              cpb_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_range_FIFO_END_ADDR_CHG_WID_set", A, 3);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "qs_field_range_FIFO_END_ADDR_CHG_WID_set", stop_bit, start_bit );
    if (stop_bit > 9) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "qs_field_range_FIFO_END_ADDR_CHG_WID_set", stop_bit, 9 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "qs_field_range_FIFO_END_ADDR_CHG_WID_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000a3d08 bits 9:0) field FIFO_END_ADDR_CHG_WID of register PMC_QS_REG_FIFO_CFG_WID */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 9) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 9;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000a3d08 bits 9:0) field FIFO_END_ADDR_CHG_WID of register PMC_QS_REG_FIFO_CFG_WID */
        _qs_reg_FIFO_CFG_WID_field_set( LOG_CALLER_ARGS
                                        b_ptr,
                                        h_ptr,
                                        A,
                                        subfield_mask << (QS_REG_FIFO_CFG_WID_BIT_FIFO_END_ADDR_CHG_WID_OFF + subfield_offset),
                                        QS_REG_FIFO_CFG_WID_BIT_FIFO_END_ADDR_CHG_WID_OFF + subfield_offset,
                                        value >> subfield_shift);
    }
}


#ifndef qs_field_range_FIFO_END_ADDR_CHG_WID_get
#define qs_field_range_FIFO_END_ADDR_CHG_WID_get( b_ptr, h_ptr, A, start_bit, stop_bit ) \
       _qs_field_range_FIFO_END_ADDR_CHG_WID_get( LOG_CALLER b_ptr, h_ptr, A, start_bit, stop_bit )
#endif
static INLINE UINT32 _qs_field_range_FIFO_END_ADDR_CHG_WID_get( LOG_CALLER_DEFN
                                                                qs_buffer_t *b_ptr,
                                                                cpb_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_range_FIFO_END_ADDR_CHG_WID_get", A, 3);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "qs_field_range_FIFO_END_ADDR_CHG_WID_get", stop_bit, start_bit );
    if (stop_bit > 9) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "qs_field_range_FIFO_END_ADDR_CHG_WID_get", stop_bit, 9 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 9) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 9;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000a3d08 bits 9:0) field FIFO_END_ADDR_CHG_WID of register PMC_QS_REG_FIFO_CFG_WID */
    reg_value = _qs_reg_FIFO_CFG_WID_read( LOG_CALLER_ARGS b_ptr, h_ptr, A);
    field_value = (reg_value & QS_REG_FIFO_CFG_WID_BIT_FIFO_END_ADDR_CHG_WID_MSK)
                  >> QS_REG_FIFO_CFG_WID_BIT_FIFO_END_ADDR_CHG_WID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, QS_REG_FIFO_CFG_WID_BIT_FIFO_END_ADDR_CHG_WID_MSK, QS_REG_FIFO_CFG_WID_BIT_FIFO_END_ADDR_CHG_WID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "qs_field_range_FIFO_END_ADDR_CHG_WID_get", A, start_bit, stop_bit, value );

    return value;
}

#ifndef qs_field_DBG_RADDR_set
#define qs_field_DBG_RADDR_set( b_ptr, h_ptr, A, value ) \
       _qs_field_DBG_RADDR_set( LOG_CALLER b_ptr, h_ptr, A, value )
#endif
static INLINE void _qs_field_DBG_RADDR_set( LOG_CALLER_DEFN
                                            qs_buffer_t *b_ptr,
                                            cpb_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32 value )
{
    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_DBG_RADDR_set", A, 3);
    if (value > 2047)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "qs_field_DBG_RADDR_set", value, 2047);
    IOLOG( "%s <= A=%d 0x%08x", "qs_field_DBG_RADDR_set", A, value );

    /* (0x000a3e00 bits 10:0) field DBG_RADDR of register PMC_QS_REG_DBG_CTRL */
    _qs_reg_DBG_CTRL_field_set( LOG_CALLER_ARGS
                                b_ptr,
                                h_ptr,
                                A,
                                QS_REG_DBG_CTRL_BIT_DBG_RADDR_MSK,
                                QS_REG_DBG_CTRL_BIT_DBG_RADDR_OFF,
                                value);
}


#ifndef qs_field_DBG_RADDR_get
#define qs_field_DBG_RADDR_get( b_ptr, h_ptr, A ) \
       _qs_field_DBG_RADDR_get( LOG_CALLER b_ptr, h_ptr, A )
#endif
static INLINE UINT32 _qs_field_DBG_RADDR_get( LOG_CALLER_DEFN
                                              qs_buffer_t *b_ptr,
                                              cpb_handle_t *h_ptr,
                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_DBG_RADDR_get", A, 3);
    /* (0x000a3e00 bits 10:0) field DBG_RADDR of register PMC_QS_REG_DBG_CTRL */
    reg_value = _qs_reg_DBG_CTRL_read( LOG_CALLER_ARGS b_ptr, h_ptr, A);
    value = (reg_value & QS_REG_DBG_CTRL_BIT_DBG_RADDR_MSK) >> QS_REG_DBG_CTRL_BIT_DBG_RADDR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "qs_field_DBG_RADDR_get", A, value );

    return value;
}

#ifndef qs_field_range_DBG_RADDR_set
#define qs_field_range_DBG_RADDR_set( b_ptr, h_ptr, A, start_bit, stop_bit, value ) \
       _qs_field_range_DBG_RADDR_set( LOG_CALLER b_ptr, h_ptr, A, start_bit, stop_bit, value )
#endif
static INLINE void _qs_field_range_DBG_RADDR_set( LOG_CALLER_DEFN
                                                  qs_buffer_t *b_ptr,
                                                  cpb_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit,
                                                  UINT32 value )
{
    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_range_DBG_RADDR_set", A, 3);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "qs_field_range_DBG_RADDR_set", stop_bit, start_bit );
    if (stop_bit > 10) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "qs_field_range_DBG_RADDR_set", stop_bit, 10 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "qs_field_range_DBG_RADDR_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000a3e00 bits 10:0) field DBG_RADDR of register PMC_QS_REG_DBG_CTRL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 10) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 10;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000a3e00 bits 10:0) field DBG_RADDR of register PMC_QS_REG_DBG_CTRL */
        _qs_reg_DBG_CTRL_field_set( LOG_CALLER_ARGS
                                    b_ptr,
                                    h_ptr,
                                    A,
                                    subfield_mask << (QS_REG_DBG_CTRL_BIT_DBG_RADDR_OFF + subfield_offset),
                                    QS_REG_DBG_CTRL_BIT_DBG_RADDR_OFF + subfield_offset,
                                    value >> subfield_shift);
    }
}


#ifndef qs_field_range_DBG_RADDR_get
#define qs_field_range_DBG_RADDR_get( b_ptr, h_ptr, A, start_bit, stop_bit ) \
       _qs_field_range_DBG_RADDR_get( LOG_CALLER b_ptr, h_ptr, A, start_bit, stop_bit )
#endif
static INLINE UINT32 _qs_field_range_DBG_RADDR_get( LOG_CALLER_DEFN
                                                    qs_buffer_t *b_ptr,
                                                    cpb_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_range_DBG_RADDR_get", A, 3);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "qs_field_range_DBG_RADDR_get", stop_bit, start_bit );
    if (stop_bit > 10) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "qs_field_range_DBG_RADDR_get", stop_bit, 10 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 10) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 10;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000a3e00 bits 10:0) field DBG_RADDR of register PMC_QS_REG_DBG_CTRL */
    reg_value = _qs_reg_DBG_CTRL_read( LOG_CALLER_ARGS b_ptr, h_ptr, A);
    field_value = (reg_value & QS_REG_DBG_CTRL_BIT_DBG_RADDR_MSK)
                  >> QS_REG_DBG_CTRL_BIT_DBG_RADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, QS_REG_DBG_CTRL_BIT_DBG_RADDR_MSK, QS_REG_DBG_CTRL_BIT_DBG_RADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "qs_field_range_DBG_RADDR_get", A, start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config_edge
 * ==================================================================================
 */

#ifndef qs_field_FIFO_END_ADDR_CHG_ABORT_set
#define qs_field_FIFO_END_ADDR_CHG_ABORT_set( b_ptr, h_ptr, A, value ) \
       _qs_field_FIFO_END_ADDR_CHG_ABORT_set( LOG_CALLER b_ptr, h_ptr, A, value )
#endif
static INLINE void _qs_field_FIFO_END_ADDR_CHG_ABORT_set( LOG_CALLER_DEFN
                                                          qs_buffer_t *b_ptr,
                                                          cpb_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value )
{
    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_FIFO_END_ADDR_CHG_ABORT_set", A, 3);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "qs_field_FIFO_END_ADDR_CHG_ABORT_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "qs_field_FIFO_END_ADDR_CHG_ABORT_set", A, value );

    /* (0x000a3d00 bits 28) field FIFO_END_ADDR_CHG_ABORT of register PMC_QS_REG_FIFO_CFG */
    _qs_reg_FIFO_CFG_field_set( LOG_CALLER_ARGS
                                b_ptr,
                                h_ptr,
                                A,
                                QS_REG_FIFO_CFG_BIT_FIFO_END_ADDR_CHG_ABORT_MSK,
                                QS_REG_FIFO_CFG_BIT_FIFO_END_ADDR_CHG_ABORT_OFF,
                                value);
}


#ifndef qs_field_FIFO_END_ADDR_CHG_ABORT_get
#define qs_field_FIFO_END_ADDR_CHG_ABORT_get( b_ptr, h_ptr, A ) \
       _qs_field_FIFO_END_ADDR_CHG_ABORT_get( LOG_CALLER b_ptr, h_ptr, A )
#endif
static INLINE UINT32 _qs_field_FIFO_END_ADDR_CHG_ABORT_get( LOG_CALLER_DEFN
                                                            qs_buffer_t *b_ptr,
                                                            cpb_handle_t *h_ptr,
                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_FIFO_END_ADDR_CHG_ABORT_get", A, 3);
    /* (0x000a3d00 bits 28) field FIFO_END_ADDR_CHG_ABORT of register PMC_QS_REG_FIFO_CFG */
    reg_value = _qs_reg_FIFO_CFG_read( LOG_CALLER_ARGS b_ptr, h_ptr, A);
    value = (reg_value & QS_REG_FIFO_CFG_BIT_FIFO_END_ADDR_CHG_ABORT_MSK) >> QS_REG_FIFO_CFG_BIT_FIFO_END_ADDR_CHG_ABORT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "qs_field_FIFO_END_ADDR_CHG_ABORT_get", A, value );

    return value;
}

#ifndef qs_field_FIFO_END_ADDR_CHG_ABORT_poll
#define qs_field_FIFO_END_ADDR_CHG_ABORT_poll( b_ptr, h_ptr, A, value, cmp, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _qs_field_FIFO_END_ADDR_CHG_ABORT_poll( LOG_CALLER b_ptr, h_ptr, A, value, cmp, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_POLL_RETURN_TYPE _qs_field_FIFO_END_ADDR_CHG_ABORT_poll( LOG_CALLER_DEFN
                                                                           qs_buffer_t *b_ptr,
                                                                           cpb_handle_t *h_ptr,
                                                                           UINT32 A,
                                                                           UINT32 value,
                                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                                           UINT32 max_count,
                                                                           UINT32 *num_failed_polls,
                                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "qs_field_FIFO_END_ADDR_CHG_ABORT_poll", A, value );

    /* (0x000a3d00 bits 28) field FIFO_END_ADDR_CHG_ABORT of register PMC_QS_REG_FIFO_CFG */
    return _qs_reg_FIFO_CFG_poll( LOG_CALLER_ARGS
                                  b_ptr,
                                  h_ptr,
                                  A,
                                  QS_REG_FIFO_CFG_BIT_FIFO_END_ADDR_CHG_ABORT_MSK,
                                  (value<<QS_REG_FIFO_CFG_BIT_FIFO_END_ADDR_CHG_ABORT_OFF),
                                  cmp,
                                  max_count,
                                  num_failed_polls,
                                  delay_between_polls_in_microseconds);
}


#ifndef qs_field_FIFO_END_ADDR_CHG_REQ_set
#define qs_field_FIFO_END_ADDR_CHG_REQ_set( b_ptr, h_ptr, A, value ) \
       _qs_field_FIFO_END_ADDR_CHG_REQ_set( LOG_CALLER b_ptr, h_ptr, A, value )
#endif
static INLINE void _qs_field_FIFO_END_ADDR_CHG_REQ_set( LOG_CALLER_DEFN
                                                        qs_buffer_t *b_ptr,
                                                        cpb_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value )
{
    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_FIFO_END_ADDR_CHG_REQ_set", A, 3);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "qs_field_FIFO_END_ADDR_CHG_REQ_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "qs_field_FIFO_END_ADDR_CHG_REQ_set", A, value );

    /* (0x000a3d00 bits 24) field FIFO_END_ADDR_CHG_REQ of register PMC_QS_REG_FIFO_CFG */
    _qs_reg_FIFO_CFG_field_set( LOG_CALLER_ARGS
                                b_ptr,
                                h_ptr,
                                A,
                                QS_REG_FIFO_CFG_BIT_FIFO_END_ADDR_CHG_REQ_MSK,
                                QS_REG_FIFO_CFG_BIT_FIFO_END_ADDR_CHG_REQ_OFF,
                                value);
}


#ifndef qs_field_FIFO_END_ADDR_CHG_REQ_get
#define qs_field_FIFO_END_ADDR_CHG_REQ_get( b_ptr, h_ptr, A ) \
       _qs_field_FIFO_END_ADDR_CHG_REQ_get( LOG_CALLER b_ptr, h_ptr, A )
#endif
static INLINE UINT32 _qs_field_FIFO_END_ADDR_CHG_REQ_get( LOG_CALLER_DEFN
                                                          qs_buffer_t *b_ptr,
                                                          cpb_handle_t *h_ptr,
                                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_FIFO_END_ADDR_CHG_REQ_get", A, 3);
    /* (0x000a3d00 bits 24) field FIFO_END_ADDR_CHG_REQ of register PMC_QS_REG_FIFO_CFG */
    reg_value = _qs_reg_FIFO_CFG_read( LOG_CALLER_ARGS b_ptr, h_ptr, A);
    value = (reg_value & QS_REG_FIFO_CFG_BIT_FIFO_END_ADDR_CHG_REQ_MSK) >> QS_REG_FIFO_CFG_BIT_FIFO_END_ADDR_CHG_REQ_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "qs_field_FIFO_END_ADDR_CHG_REQ_get", A, value );

    return value;
}

#ifndef qs_field_FIFO_END_ADDR_CHG_REQ_poll
#define qs_field_FIFO_END_ADDR_CHG_REQ_poll( b_ptr, h_ptr, A, value, cmp, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _qs_field_FIFO_END_ADDR_CHG_REQ_poll( LOG_CALLER b_ptr, h_ptr, A, value, cmp, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_POLL_RETURN_TYPE _qs_field_FIFO_END_ADDR_CHG_REQ_poll( LOG_CALLER_DEFN
                                                                         qs_buffer_t *b_ptr,
                                                                         cpb_handle_t *h_ptr,
                                                                         UINT32 A,
                                                                         UINT32 value,
                                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "qs_field_FIFO_END_ADDR_CHG_REQ_poll", A, value );

    /* (0x000a3d00 bits 24) field FIFO_END_ADDR_CHG_REQ of register PMC_QS_REG_FIFO_CFG */
    return _qs_reg_FIFO_CFG_poll( LOG_CALLER_ARGS
                                  b_ptr,
                                  h_ptr,
                                  A,
                                  QS_REG_FIFO_CFG_BIT_FIFO_END_ADDR_CHG_REQ_MSK,
                                  (value<<QS_REG_FIFO_CFG_BIT_FIFO_END_ADDR_CHG_REQ_OFF),
                                  cmp,
                                  max_count,
                                  num_failed_polls,
                                  delay_between_polls_in_microseconds);
}


/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config_indirect_N_size128
 * ==================================================================================
 */

#ifndef qs_field_RPTR_RST_POP_set
#define qs_field_RPTR_RST_POP_set( b_ptr, h_ptr, A, N, value ) \
       _qs_field_RPTR_RST_POP_set( LOG_CALLER b_ptr, h_ptr, A, N, value )
#endif
static INLINE void _qs_field_RPTR_RST_POP_set( LOG_CALLER_DEFN
                                               qs_buffer_t *b_ptr,
                                               cpb_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value )
{
    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_RPTR_RST_POP_set", A, 3);
    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "qs_field_RPTR_RST_POP_set", N, 127);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "qs_field_RPTR_RST_POP_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "qs_field_RPTR_RST_POP_set", A, N, value );

    /* ((0x000a2000 + (N) * 0x4) bits 0) field RPTR_RST_POP of register PMC_QS_REG_POP_PORT_RST index N=0..127 */
    _qs_reg_POP_PORT_RST_array_field_set( LOG_CALLER_ARGS
                                          b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          QS_REG_POP_PORT_RST_BIT_RPTR_RST_POP_MSK,
                                          QS_REG_POP_PORT_RST_BIT_RPTR_RST_POP_OFF,
                                          value);
}


#ifndef qs_field_RPTR_RST_POP_get
#define qs_field_RPTR_RST_POP_get( b_ptr, h_ptr, A, N ) \
       _qs_field_RPTR_RST_POP_get( LOG_CALLER b_ptr, h_ptr, A, N )
#endif
static INLINE UINT32 _qs_field_RPTR_RST_POP_get( LOG_CALLER_DEFN
                                                 qs_buffer_t *b_ptr,
                                                 cpb_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_RPTR_RST_POP_get", A, 3);
    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "qs_field_RPTR_RST_POP_get", N, 127);
    /* ((0x000a2000 + (N) * 0x4) bits 0) field RPTR_RST_POP of register PMC_QS_REG_POP_PORT_RST index N=0..127 */
    reg_value = _qs_reg_POP_PORT_RST_array_read( LOG_CALLER_ARGS
                                                 b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & QS_REG_POP_PORT_RST_BIT_RPTR_RST_POP_MSK) >> QS_REG_POP_PORT_RST_BIT_RPTR_RST_POP_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "qs_field_RPTR_RST_POP_get", A, N, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config_indirect_N_size256
 * ==================================================================================
 */

#ifndef qs_field_WPTR_RST_PUSH_P0_set
#define qs_field_WPTR_RST_PUSH_P0_set( b_ptr, h_ptr, A, N, value ) \
       _qs_field_WPTR_RST_PUSH_P0_set( LOG_CALLER b_ptr, h_ptr, A, N, value )
#endif
static INLINE void _qs_field_WPTR_RST_PUSH_P0_set( LOG_CALLER_DEFN
                                                   qs_buffer_t *b_ptr,
                                                   cpb_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_WPTR_RST_PUSH_P0_set", A, 3);
    if (N > 255)
        IO_RANGE_CHECK("%s N is %d but max is %d", "qs_field_WPTR_RST_PUSH_P0_set", N, 255);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "qs_field_WPTR_RST_PUSH_P0_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "qs_field_WPTR_RST_PUSH_P0_set", A, N, value );

    /* ((0x000a0000 + (N) * 0x4) bits 0) field WPTR_RST_PUSH_P0 of register PMC_QS_REG_PUSH_PORT_P0_RST index N=0..255 */
    _qs_reg_PUSH_PORT_P0_RST_array_field_set( LOG_CALLER_ARGS
                                              b_ptr,
                                              h_ptr,
                                              A,
                                              N,
                                              QS_REG_PUSH_PORT_P0_RST_BIT_WPTR_RST_PUSH_P0_MSK,
                                              QS_REG_PUSH_PORT_P0_RST_BIT_WPTR_RST_PUSH_P0_OFF,
                                              value);
}


#ifndef qs_field_WPTR_RST_PUSH_P0_get
#define qs_field_WPTR_RST_PUSH_P0_get( b_ptr, h_ptr, A, N ) \
       _qs_field_WPTR_RST_PUSH_P0_get( LOG_CALLER b_ptr, h_ptr, A, N )
#endif
static INLINE UINT32 _qs_field_WPTR_RST_PUSH_P0_get( LOG_CALLER_DEFN
                                                     qs_buffer_t *b_ptr,
                                                     cpb_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_WPTR_RST_PUSH_P0_get", A, 3);
    if (N > 255)
        IO_RANGE_CHECK("%s N is %d but max is %d", "qs_field_WPTR_RST_PUSH_P0_get", N, 255);
    /* ((0x000a0000 + (N) * 0x4) bits 0) field WPTR_RST_PUSH_P0 of register PMC_QS_REG_PUSH_PORT_P0_RST index N=0..255 */
    reg_value = _qs_reg_PUSH_PORT_P0_RST_array_read( LOG_CALLER_ARGS
                                                     b_ptr,
                                                     h_ptr,
                                                     A,
                                                     N);
    value = (reg_value & QS_REG_PUSH_PORT_P0_RST_BIT_WPTR_RST_PUSH_P0_MSK) >> QS_REG_PUSH_PORT_P0_RST_BIT_WPTR_RST_PUSH_P0_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "qs_field_WPTR_RST_PUSH_P0_get", A, N, value );

    return value;
}

#ifndef qs_field_WPTR_RST_PUSH_P1_set
#define qs_field_WPTR_RST_PUSH_P1_set( b_ptr, h_ptr, A, N, value ) \
       _qs_field_WPTR_RST_PUSH_P1_set( LOG_CALLER b_ptr, h_ptr, A, N, value )
#endif
static INLINE void _qs_field_WPTR_RST_PUSH_P1_set( LOG_CALLER_DEFN
                                                   qs_buffer_t *b_ptr,
                                                   cpb_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_WPTR_RST_PUSH_P1_set", A, 3);
    if (N > 255)
        IO_RANGE_CHECK("%s N is %d but max is %d", "qs_field_WPTR_RST_PUSH_P1_set", N, 255);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "qs_field_WPTR_RST_PUSH_P1_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "qs_field_WPTR_RST_PUSH_P1_set", A, N, value );

    /* ((0x000a0800 + (N) * 0x4) bits 0) field WPTR_RST_PUSH_P1 of register PMC_QS_REG_PUSH_PORT_P1_RST index N=0..255 */
    _qs_reg_PUSH_PORT_P1_RST_array_field_set( LOG_CALLER_ARGS
                                              b_ptr,
                                              h_ptr,
                                              A,
                                              N,
                                              QS_REG_PUSH_PORT_P1_RST_BIT_WPTR_RST_PUSH_P1_MSK,
                                              QS_REG_PUSH_PORT_P1_RST_BIT_WPTR_RST_PUSH_P1_OFF,
                                              value);
}


#ifndef qs_field_WPTR_RST_PUSH_P1_get
#define qs_field_WPTR_RST_PUSH_P1_get( b_ptr, h_ptr, A, N ) \
       _qs_field_WPTR_RST_PUSH_P1_get( LOG_CALLER b_ptr, h_ptr, A, N )
#endif
static INLINE UINT32 _qs_field_WPTR_RST_PUSH_P1_get( LOG_CALLER_DEFN
                                                     qs_buffer_t *b_ptr,
                                                     cpb_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_WPTR_RST_PUSH_P1_get", A, 3);
    if (N > 255)
        IO_RANGE_CHECK("%s N is %d but max is %d", "qs_field_WPTR_RST_PUSH_P1_get", N, 255);
    /* ((0x000a0800 + (N) * 0x4) bits 0) field WPTR_RST_PUSH_P1 of register PMC_QS_REG_PUSH_PORT_P1_RST index N=0..255 */
    reg_value = _qs_reg_PUSH_PORT_P1_RST_array_read( LOG_CALLER_ARGS
                                                     b_ptr,
                                                     h_ptr,
                                                     A,
                                                     N);
    value = (reg_value & QS_REG_PUSH_PORT_P1_RST_BIT_WPTR_RST_PUSH_P1_MSK) >> QS_REG_PUSH_PORT_P1_RST_BIT_WPTR_RST_PUSH_P1_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "qs_field_WPTR_RST_PUSH_P1_get", A, N, value );

    return value;
}

#ifndef qs_field_WPTR_RST_PUSH_P2_set
#define qs_field_WPTR_RST_PUSH_P2_set( b_ptr, h_ptr, A, N, value ) \
       _qs_field_WPTR_RST_PUSH_P2_set( LOG_CALLER b_ptr, h_ptr, A, N, value )
#endif
static INLINE void _qs_field_WPTR_RST_PUSH_P2_set( LOG_CALLER_DEFN
                                                   qs_buffer_t *b_ptr,
                                                   cpb_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_WPTR_RST_PUSH_P2_set", A, 3);
    if (N > 255)
        IO_RANGE_CHECK("%s N is %d but max is %d", "qs_field_WPTR_RST_PUSH_P2_set", N, 255);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "qs_field_WPTR_RST_PUSH_P2_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "qs_field_WPTR_RST_PUSH_P2_set", A, N, value );

    /* ((0x000a1000 + (N) * 0x4) bits 0) field WPTR_RST_PUSH_P2 of register PMC_QS_REG_PUSH_PORT_P2_RST index N=0..255 */
    _qs_reg_PUSH_PORT_P2_RST_array_field_set( LOG_CALLER_ARGS
                                              b_ptr,
                                              h_ptr,
                                              A,
                                              N,
                                              QS_REG_PUSH_PORT_P2_RST_BIT_WPTR_RST_PUSH_P2_MSK,
                                              QS_REG_PUSH_PORT_P2_RST_BIT_WPTR_RST_PUSH_P2_OFF,
                                              value);
}


#ifndef qs_field_WPTR_RST_PUSH_P2_get
#define qs_field_WPTR_RST_PUSH_P2_get( b_ptr, h_ptr, A, N ) \
       _qs_field_WPTR_RST_PUSH_P2_get( LOG_CALLER b_ptr, h_ptr, A, N )
#endif
static INLINE UINT32 _qs_field_WPTR_RST_PUSH_P2_get( LOG_CALLER_DEFN
                                                     qs_buffer_t *b_ptr,
                                                     cpb_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_WPTR_RST_PUSH_P2_get", A, 3);
    if (N > 255)
        IO_RANGE_CHECK("%s N is %d but max is %d", "qs_field_WPTR_RST_PUSH_P2_get", N, 255);
    /* ((0x000a1000 + (N) * 0x4) bits 0) field WPTR_RST_PUSH_P2 of register PMC_QS_REG_PUSH_PORT_P2_RST index N=0..255 */
    reg_value = _qs_reg_PUSH_PORT_P2_RST_array_read( LOG_CALLER_ARGS
                                                     b_ptr,
                                                     h_ptr,
                                                     A,
                                                     N);
    value = (reg_value & QS_REG_PUSH_PORT_P2_RST_BIT_WPTR_RST_PUSH_P2_MSK) >> QS_REG_PUSH_PORT_P2_RST_BIT_WPTR_RST_PUSH_P2_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "qs_field_WPTR_RST_PUSH_P2_get", A, N, value );

    return value;
}

#ifndef qs_field_WPTR_RST_PUSH_P3_set
#define qs_field_WPTR_RST_PUSH_P3_set( b_ptr, h_ptr, A, N, value ) \
       _qs_field_WPTR_RST_PUSH_P3_set( LOG_CALLER b_ptr, h_ptr, A, N, value )
#endif
static INLINE void _qs_field_WPTR_RST_PUSH_P3_set( LOG_CALLER_DEFN
                                                   qs_buffer_t *b_ptr,
                                                   cpb_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_WPTR_RST_PUSH_P3_set", A, 3);
    if (N > 255)
        IO_RANGE_CHECK("%s N is %d but max is %d", "qs_field_WPTR_RST_PUSH_P3_set", N, 255);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "qs_field_WPTR_RST_PUSH_P3_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "qs_field_WPTR_RST_PUSH_P3_set", A, N, value );

    /* ((0x000a1800 + (N) * 0x4) bits 0) field WPTR_RST_PUSH_P3 of register PMC_QS_REG_PUSH_PORT_P3_RST index N=0..255 */
    _qs_reg_PUSH_PORT_P3_RST_array_field_set( LOG_CALLER_ARGS
                                              b_ptr,
                                              h_ptr,
                                              A,
                                              N,
                                              QS_REG_PUSH_PORT_P3_RST_BIT_WPTR_RST_PUSH_P3_MSK,
                                              QS_REG_PUSH_PORT_P3_RST_BIT_WPTR_RST_PUSH_P3_OFF,
                                              value);
}


#ifndef qs_field_WPTR_RST_PUSH_P3_get
#define qs_field_WPTR_RST_PUSH_P3_get( b_ptr, h_ptr, A, N ) \
       _qs_field_WPTR_RST_PUSH_P3_get( LOG_CALLER b_ptr, h_ptr, A, N )
#endif
static INLINE UINT32 _qs_field_WPTR_RST_PUSH_P3_get( LOG_CALLER_DEFN
                                                     qs_buffer_t *b_ptr,
                                                     cpb_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_WPTR_RST_PUSH_P3_get", A, 3);
    if (N > 255)
        IO_RANGE_CHECK("%s N is %d but max is %d", "qs_field_WPTR_RST_PUSH_P3_get", N, 255);
    /* ((0x000a1800 + (N) * 0x4) bits 0) field WPTR_RST_PUSH_P3 of register PMC_QS_REG_PUSH_PORT_P3_RST index N=0..255 */
    reg_value = _qs_reg_PUSH_PORT_P3_RST_array_read( LOG_CALLER_ARGS
                                                     b_ptr,
                                                     h_ptr,
                                                     A,
                                                     N);
    value = (reg_value & QS_REG_PUSH_PORT_P3_RST_BIT_WPTR_RST_PUSH_P3_MSK) >> QS_REG_PUSH_PORT_P3_RST_BIT_WPTR_RST_PUSH_P3_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "qs_field_WPTR_RST_PUSH_P3_get", A, N, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset status
 * ==================================================================================
 */

#ifndef qs_field_FIFO_END_ADDR_CHG_SUCCESS_get
#define qs_field_FIFO_END_ADDR_CHG_SUCCESS_get( b_ptr, h_ptr, A ) \
       _qs_field_FIFO_END_ADDR_CHG_SUCCESS_get( LOG_CALLER b_ptr, h_ptr, A )
#endif
static INLINE UINT32 _qs_field_FIFO_END_ADDR_CHG_SUCCESS_get( LOG_CALLER_DEFN
                                                              qs_buffer_t *b_ptr,
                                                              cpb_handle_t *h_ptr,
                                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_FIFO_END_ADDR_CHG_SUCCESS_get", A, 3);
    /* (0x000a3d0c bits 0) field FIFO_END_ADDR_CHG_SUCCESS of register PMC_QS_REG_FIFO_CFG_STAT */
    reg_value = _qs_reg_FIFO_CFG_STAT_read( LOG_CALLER_ARGS b_ptr, h_ptr, A);
    value = (reg_value & QS_REG_FIFO_CFG_STAT_BIT_FIFO_END_ADDR_CHG_SUCCESS_MSK) >> QS_REG_FIFO_CFG_STAT_BIT_FIFO_END_ADDR_CHG_SUCCESS_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "qs_field_FIFO_END_ADDR_CHG_SUCCESS_get", A, value );

    return value;
}

#ifndef qs_field_FIFO_END_ADDR_CHG_SUCCESS_poll
#define qs_field_FIFO_END_ADDR_CHG_SUCCESS_poll( b_ptr, h_ptr, A, value, cmp, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _qs_field_FIFO_END_ADDR_CHG_SUCCESS_poll( LOG_CALLER b_ptr, h_ptr, A, value, cmp, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_POLL_RETURN_TYPE _qs_field_FIFO_END_ADDR_CHG_SUCCESS_poll( LOG_CALLER_DEFN
                                                                             qs_buffer_t *b_ptr,
                                                                             cpb_handle_t *h_ptr,
                                                                             UINT32 A,
                                                                             UINT32 value,
                                                                             PMC_POLL_COMPARISON_TYPE cmp,
                                                                             UINT32 max_count,
                                                                             UINT32 *num_failed_polls,
                                                                             UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "qs_field_FIFO_END_ADDR_CHG_SUCCESS_poll", A, value );

    /* (0x000a3d0c bits 0) field FIFO_END_ADDR_CHG_SUCCESS of register PMC_QS_REG_FIFO_CFG_STAT */
    return _qs_reg_FIFO_CFG_STAT_poll( LOG_CALLER_ARGS
                                       b_ptr,
                                       h_ptr,
                                       A,
                                       QS_REG_FIFO_CFG_STAT_BIT_FIFO_END_ADDR_CHG_SUCCESS_MSK,
                                       (value<<QS_REG_FIFO_CFG_STAT_BIT_FIFO_END_ADDR_CHG_SUCCESS_OFF),
                                       cmp,
                                       max_count,
                                       num_failed_polls,
                                       delay_between_polls_in_microseconds);
}


/*
 * ==================================================================================
 * Parameter Access Functions for Paramset status_N_size8
 * ==================================================================================
 */

#ifndef qs_field_WPTR_RST_PUSH_P0_VAL_get
#define qs_field_WPTR_RST_PUSH_P0_VAL_get( b_ptr, h_ptr, A, N ) \
       _qs_field_WPTR_RST_PUSH_P0_VAL_get( LOG_CALLER b_ptr, h_ptr, A, N )
#endif
static INLINE UINT32 _qs_field_WPTR_RST_PUSH_P0_VAL_get( LOG_CALLER_DEFN
                                                         qs_buffer_t *b_ptr,
                                                         cpb_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_WPTR_RST_PUSH_P0_VAL_get", A, 3);
    if (N > 7)
        IO_RANGE_CHECK("%s N is %d but max is %d", "qs_field_WPTR_RST_PUSH_P0_VAL_get", N, 7);
    /* ((0x000a0400 + (N) * 0x4) bits 31:0) field WPTR_RST_PUSH_P0_VAL of register PMC_QS_REG_PUSH_PORT_P0_RST_VAL index N=0..7 */
    reg_value = _qs_reg_PUSH_PORT_P0_RST_VAL_array_read( LOG_CALLER_ARGS
                                                         b_ptr,
                                                         h_ptr,
                                                         A,
                                                         N);
    value = (reg_value & QS_REG_PUSH_PORT_P0_RST_VAL_BIT_WPTR_RST_PUSH_P0_VAL_MSK) >> QS_REG_PUSH_PORT_P0_RST_VAL_BIT_WPTR_RST_PUSH_P0_VAL_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "qs_field_WPTR_RST_PUSH_P0_VAL_get", A, N, value );

    return value;
}

#ifndef qs_field_range_WPTR_RST_PUSH_P0_VAL_get
#define qs_field_range_WPTR_RST_PUSH_P0_VAL_get( b_ptr, h_ptr, A, N, start_bit, stop_bit ) \
       _qs_field_range_WPTR_RST_PUSH_P0_VAL_get( LOG_CALLER b_ptr, h_ptr, A, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _qs_field_range_WPTR_RST_PUSH_P0_VAL_get( LOG_CALLER_DEFN
                                                               qs_buffer_t *b_ptr,
                                                               cpb_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_range_WPTR_RST_PUSH_P0_VAL_get", A, 3);
    if (N > 7)
        IO_RANGE_CHECK("%s N is %d but max is %d", "qs_field_range_WPTR_RST_PUSH_P0_VAL_get", N, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "qs_field_range_WPTR_RST_PUSH_P0_VAL_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "qs_field_range_WPTR_RST_PUSH_P0_VAL_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000a0400 + (N) * 0x4) bits 31:0) field WPTR_RST_PUSH_P0_VAL of register PMC_QS_REG_PUSH_PORT_P0_RST_VAL index N=0..7 */
    reg_value = _qs_reg_PUSH_PORT_P0_RST_VAL_array_read( LOG_CALLER_ARGS
                                                         b_ptr,
                                                         h_ptr,
                                                         A,
                                                         N);
    field_value = (reg_value & QS_REG_PUSH_PORT_P0_RST_VAL_BIT_WPTR_RST_PUSH_P0_VAL_MSK)
                  >> QS_REG_PUSH_PORT_P0_RST_VAL_BIT_WPTR_RST_PUSH_P0_VAL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, QS_REG_PUSH_PORT_P0_RST_VAL_BIT_WPTR_RST_PUSH_P0_VAL_MSK, QS_REG_PUSH_PORT_P0_RST_VAL_BIT_WPTR_RST_PUSH_P0_VAL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "qs_field_range_WPTR_RST_PUSH_P0_VAL_get", A, N, start_bit, stop_bit, value );

    return value;
}

#ifndef qs_field_WPTR_RST_PUSH_P1_VAL_get
#define qs_field_WPTR_RST_PUSH_P1_VAL_get( b_ptr, h_ptr, A, N ) \
       _qs_field_WPTR_RST_PUSH_P1_VAL_get( LOG_CALLER b_ptr, h_ptr, A, N )
#endif
static INLINE UINT32 _qs_field_WPTR_RST_PUSH_P1_VAL_get( LOG_CALLER_DEFN
                                                         qs_buffer_t *b_ptr,
                                                         cpb_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_WPTR_RST_PUSH_P1_VAL_get", A, 3);
    if (N > 7)
        IO_RANGE_CHECK("%s N is %d but max is %d", "qs_field_WPTR_RST_PUSH_P1_VAL_get", N, 7);
    /* ((0x000a0c00 + (N) * 0x4) bits 31:0) field WPTR_RST_PUSH_P1_VAL of register PMC_QS_REG_PUSH_PORT_P1_RST_VAL index N=0..7 */
    reg_value = _qs_reg_PUSH_PORT_P1_RST_VAL_array_read( LOG_CALLER_ARGS
                                                         b_ptr,
                                                         h_ptr,
                                                         A,
                                                         N);
    value = (reg_value & QS_REG_PUSH_PORT_P1_RST_VAL_BIT_WPTR_RST_PUSH_P1_VAL_MSK) >> QS_REG_PUSH_PORT_P1_RST_VAL_BIT_WPTR_RST_PUSH_P1_VAL_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "qs_field_WPTR_RST_PUSH_P1_VAL_get", A, N, value );

    return value;
}

#ifndef qs_field_range_WPTR_RST_PUSH_P1_VAL_get
#define qs_field_range_WPTR_RST_PUSH_P1_VAL_get( b_ptr, h_ptr, A, N, start_bit, stop_bit ) \
       _qs_field_range_WPTR_RST_PUSH_P1_VAL_get( LOG_CALLER b_ptr, h_ptr, A, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _qs_field_range_WPTR_RST_PUSH_P1_VAL_get( LOG_CALLER_DEFN
                                                               qs_buffer_t *b_ptr,
                                                               cpb_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_range_WPTR_RST_PUSH_P1_VAL_get", A, 3);
    if (N > 7)
        IO_RANGE_CHECK("%s N is %d but max is %d", "qs_field_range_WPTR_RST_PUSH_P1_VAL_get", N, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "qs_field_range_WPTR_RST_PUSH_P1_VAL_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "qs_field_range_WPTR_RST_PUSH_P1_VAL_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000a0c00 + (N) * 0x4) bits 31:0) field WPTR_RST_PUSH_P1_VAL of register PMC_QS_REG_PUSH_PORT_P1_RST_VAL index N=0..7 */
    reg_value = _qs_reg_PUSH_PORT_P1_RST_VAL_array_read( LOG_CALLER_ARGS
                                                         b_ptr,
                                                         h_ptr,
                                                         A,
                                                         N);
    field_value = (reg_value & QS_REG_PUSH_PORT_P1_RST_VAL_BIT_WPTR_RST_PUSH_P1_VAL_MSK)
                  >> QS_REG_PUSH_PORT_P1_RST_VAL_BIT_WPTR_RST_PUSH_P1_VAL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, QS_REG_PUSH_PORT_P1_RST_VAL_BIT_WPTR_RST_PUSH_P1_VAL_MSK, QS_REG_PUSH_PORT_P1_RST_VAL_BIT_WPTR_RST_PUSH_P1_VAL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "qs_field_range_WPTR_RST_PUSH_P1_VAL_get", A, N, start_bit, stop_bit, value );

    return value;
}

#ifndef qs_field_WPTR_RST_PUSH_P2_VAL_get
#define qs_field_WPTR_RST_PUSH_P2_VAL_get( b_ptr, h_ptr, A, N ) \
       _qs_field_WPTR_RST_PUSH_P2_VAL_get( LOG_CALLER b_ptr, h_ptr, A, N )
#endif
static INLINE UINT32 _qs_field_WPTR_RST_PUSH_P2_VAL_get( LOG_CALLER_DEFN
                                                         qs_buffer_t *b_ptr,
                                                         cpb_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_WPTR_RST_PUSH_P2_VAL_get", A, 3);
    if (N > 7)
        IO_RANGE_CHECK("%s N is %d but max is %d", "qs_field_WPTR_RST_PUSH_P2_VAL_get", N, 7);
    /* ((0x000a1400 + (N) * 0x4) bits 31:0) field WPTR_RST_PUSH_P2_VAL of register PMC_QS_REG_PUSH_PORT_P2_RST_VAL index N=0..7 */
    reg_value = _qs_reg_PUSH_PORT_P2_RST_VAL_array_read( LOG_CALLER_ARGS
                                                         b_ptr,
                                                         h_ptr,
                                                         A,
                                                         N);
    value = (reg_value & QS_REG_PUSH_PORT_P2_RST_VAL_BIT_WPTR_RST_PUSH_P2_VAL_MSK) >> QS_REG_PUSH_PORT_P2_RST_VAL_BIT_WPTR_RST_PUSH_P2_VAL_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "qs_field_WPTR_RST_PUSH_P2_VAL_get", A, N, value );

    return value;
}

#ifndef qs_field_range_WPTR_RST_PUSH_P2_VAL_get
#define qs_field_range_WPTR_RST_PUSH_P2_VAL_get( b_ptr, h_ptr, A, N, start_bit, stop_bit ) \
       _qs_field_range_WPTR_RST_PUSH_P2_VAL_get( LOG_CALLER b_ptr, h_ptr, A, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _qs_field_range_WPTR_RST_PUSH_P2_VAL_get( LOG_CALLER_DEFN
                                                               qs_buffer_t *b_ptr,
                                                               cpb_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_range_WPTR_RST_PUSH_P2_VAL_get", A, 3);
    if (N > 7)
        IO_RANGE_CHECK("%s N is %d but max is %d", "qs_field_range_WPTR_RST_PUSH_P2_VAL_get", N, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "qs_field_range_WPTR_RST_PUSH_P2_VAL_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "qs_field_range_WPTR_RST_PUSH_P2_VAL_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000a1400 + (N) * 0x4) bits 31:0) field WPTR_RST_PUSH_P2_VAL of register PMC_QS_REG_PUSH_PORT_P2_RST_VAL index N=0..7 */
    reg_value = _qs_reg_PUSH_PORT_P2_RST_VAL_array_read( LOG_CALLER_ARGS
                                                         b_ptr,
                                                         h_ptr,
                                                         A,
                                                         N);
    field_value = (reg_value & QS_REG_PUSH_PORT_P2_RST_VAL_BIT_WPTR_RST_PUSH_P2_VAL_MSK)
                  >> QS_REG_PUSH_PORT_P2_RST_VAL_BIT_WPTR_RST_PUSH_P2_VAL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, QS_REG_PUSH_PORT_P2_RST_VAL_BIT_WPTR_RST_PUSH_P2_VAL_MSK, QS_REG_PUSH_PORT_P2_RST_VAL_BIT_WPTR_RST_PUSH_P2_VAL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "qs_field_range_WPTR_RST_PUSH_P2_VAL_get", A, N, start_bit, stop_bit, value );

    return value;
}

#ifndef qs_field_WPTR_RST_PUSH_P3_VAL_get
#define qs_field_WPTR_RST_PUSH_P3_VAL_get( b_ptr, h_ptr, A, N ) \
       _qs_field_WPTR_RST_PUSH_P3_VAL_get( LOG_CALLER b_ptr, h_ptr, A, N )
#endif
static INLINE UINT32 _qs_field_WPTR_RST_PUSH_P3_VAL_get( LOG_CALLER_DEFN
                                                         qs_buffer_t *b_ptr,
                                                         cpb_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_WPTR_RST_PUSH_P3_VAL_get", A, 3);
    if (N > 7)
        IO_RANGE_CHECK("%s N is %d but max is %d", "qs_field_WPTR_RST_PUSH_P3_VAL_get", N, 7);
    /* ((0x000a1c00 + (N) * 0x4) bits 31:0) field WPTR_RST_PUSH_P3_VAL of register PMC_QS_REG_PUSH_PORT_P3_RST_VAL index N=0..7 */
    reg_value = _qs_reg_PUSH_PORT_P3_RST_VAL_array_read( LOG_CALLER_ARGS
                                                         b_ptr,
                                                         h_ptr,
                                                         A,
                                                         N);
    value = (reg_value & QS_REG_PUSH_PORT_P3_RST_VAL_BIT_WPTR_RST_PUSH_P3_VAL_MSK) >> QS_REG_PUSH_PORT_P3_RST_VAL_BIT_WPTR_RST_PUSH_P3_VAL_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "qs_field_WPTR_RST_PUSH_P3_VAL_get", A, N, value );

    return value;
}

#ifndef qs_field_range_WPTR_RST_PUSH_P3_VAL_get
#define qs_field_range_WPTR_RST_PUSH_P3_VAL_get( b_ptr, h_ptr, A, N, start_bit, stop_bit ) \
       _qs_field_range_WPTR_RST_PUSH_P3_VAL_get( LOG_CALLER b_ptr, h_ptr, A, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _qs_field_range_WPTR_RST_PUSH_P3_VAL_get( LOG_CALLER_DEFN
                                                               qs_buffer_t *b_ptr,
                                                               cpb_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_range_WPTR_RST_PUSH_P3_VAL_get", A, 3);
    if (N > 7)
        IO_RANGE_CHECK("%s N is %d but max is %d", "qs_field_range_WPTR_RST_PUSH_P3_VAL_get", N, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "qs_field_range_WPTR_RST_PUSH_P3_VAL_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "qs_field_range_WPTR_RST_PUSH_P3_VAL_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000a1c00 + (N) * 0x4) bits 31:0) field WPTR_RST_PUSH_P3_VAL of register PMC_QS_REG_PUSH_PORT_P3_RST_VAL index N=0..7 */
    reg_value = _qs_reg_PUSH_PORT_P3_RST_VAL_array_read( LOG_CALLER_ARGS
                                                         b_ptr,
                                                         h_ptr,
                                                         A,
                                                         N);
    field_value = (reg_value & QS_REG_PUSH_PORT_P3_RST_VAL_BIT_WPTR_RST_PUSH_P3_VAL_MSK)
                  >> QS_REG_PUSH_PORT_P3_RST_VAL_BIT_WPTR_RST_PUSH_P3_VAL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, QS_REG_PUSH_PORT_P3_RST_VAL_BIT_WPTR_RST_PUSH_P3_VAL_MSK, QS_REG_PUSH_PORT_P3_RST_VAL_BIT_WPTR_RST_PUSH_P3_VAL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "qs_field_range_WPTR_RST_PUSH_P3_VAL_get", A, N, start_bit, stop_bit, value );

    return value;
}

#ifndef qs_field_RPTR_RST_POP_VAL_get
#define qs_field_RPTR_RST_POP_VAL_get( b_ptr, h_ptr, A, N ) \
       _qs_field_RPTR_RST_POP_VAL_get( LOG_CALLER b_ptr, h_ptr, A, N )
#endif
static INLINE UINT32 _qs_field_RPTR_RST_POP_VAL_get( LOG_CALLER_DEFN
                                                     qs_buffer_t *b_ptr,
                                                     cpb_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_RPTR_RST_POP_VAL_get", A, 3);
    if (N > 7)
        IO_RANGE_CHECK("%s N is %d but max is %d", "qs_field_RPTR_RST_POP_VAL_get", N, 7);
    /* ((0x000a2400 + (N) * 0x4) bits 31:0) field RPTR_RST_POP_VAL of register PMC_QS_REG_RPTR_RST_POP_VAL_REG index N=0..7 */
    reg_value = _qs_reg_RPTR_RST_POP_VAL_REG_array_read( LOG_CALLER_ARGS
                                                         b_ptr,
                                                         h_ptr,
                                                         A,
                                                         N);
    value = (reg_value & QS_REG_RPTR_RST_POP_VAL_REG_BIT_RPTR_RST_POP_VAL_MSK) >> QS_REG_RPTR_RST_POP_VAL_REG_BIT_RPTR_RST_POP_VAL_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "qs_field_RPTR_RST_POP_VAL_get", A, N, value );

    return value;
}

#ifndef qs_field_range_RPTR_RST_POP_VAL_get
#define qs_field_range_RPTR_RST_POP_VAL_get( b_ptr, h_ptr, A, N, start_bit, stop_bit ) \
       _qs_field_range_RPTR_RST_POP_VAL_get( LOG_CALLER b_ptr, h_ptr, A, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _qs_field_range_RPTR_RST_POP_VAL_get( LOG_CALLER_DEFN
                                                           qs_buffer_t *b_ptr,
                                                           cpb_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_range_RPTR_RST_POP_VAL_get", A, 3);
    if (N > 7)
        IO_RANGE_CHECK("%s N is %d but max is %d", "qs_field_range_RPTR_RST_POP_VAL_get", N, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "qs_field_range_RPTR_RST_POP_VAL_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "qs_field_range_RPTR_RST_POP_VAL_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000a2400 + (N) * 0x4) bits 31:0) field RPTR_RST_POP_VAL of register PMC_QS_REG_RPTR_RST_POP_VAL_REG index N=0..7 */
    reg_value = _qs_reg_RPTR_RST_POP_VAL_REG_array_read( LOG_CALLER_ARGS
                                                         b_ptr,
                                                         h_ptr,
                                                         A,
                                                         N);
    field_value = (reg_value & QS_REG_RPTR_RST_POP_VAL_REG_BIT_RPTR_RST_POP_VAL_MSK)
                  >> QS_REG_RPTR_RST_POP_VAL_REG_BIT_RPTR_RST_POP_VAL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, QS_REG_RPTR_RST_POP_VAL_REG_BIT_RPTR_RST_POP_VAL_MSK, QS_REG_RPTR_RST_POP_VAL_REG_BIT_RPTR_RST_POP_VAL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "qs_field_range_RPTR_RST_POP_VAL_get", A, N, start_bit, stop_bit, value );

    return value;
}

#ifndef qs_field_FIFO_PKT_EMPTY_get
#define qs_field_FIFO_PKT_EMPTY_get( b_ptr, h_ptr, A, N ) \
       _qs_field_FIFO_PKT_EMPTY_get( LOG_CALLER b_ptr, h_ptr, A, N )
#endif
static INLINE UINT32 _qs_field_FIFO_PKT_EMPTY_get( LOG_CALLER_DEFN
                                                   qs_buffer_t *b_ptr,
                                                   cpb_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_FIFO_PKT_EMPTY_get", A, 3);
    if (N > 7)
        IO_RANGE_CHECK("%s N is %d but max is %d", "qs_field_FIFO_PKT_EMPTY_get", N, 7);
    /* ((0x000a2600 + (N) * 0x4) bits 31:0) field FIFO_PKT_EMPTY of register PMC_QS_REG_FIFO_PTR_EMPTY_REG index N=0..7 */
    reg_value = _qs_reg_FIFO_PTR_EMPTY_REG_array_read( LOG_CALLER_ARGS
                                                       b_ptr,
                                                       h_ptr,
                                                       A,
                                                       N);
    value = (reg_value & QS_REG_FIFO_PTR_EMPTY_REG_BIT_FIFO_PKT_EMPTY_MSK) >> QS_REG_FIFO_PTR_EMPTY_REG_BIT_FIFO_PKT_EMPTY_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "qs_field_FIFO_PKT_EMPTY_get", A, N, value );

    return value;
}

#ifndef qs_field_range_FIFO_PKT_EMPTY_get
#define qs_field_range_FIFO_PKT_EMPTY_get( b_ptr, h_ptr, A, N, start_bit, stop_bit ) \
       _qs_field_range_FIFO_PKT_EMPTY_get( LOG_CALLER b_ptr, h_ptr, A, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _qs_field_range_FIFO_PKT_EMPTY_get( LOG_CALLER_DEFN
                                                         qs_buffer_t *b_ptr,
                                                         cpb_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_range_FIFO_PKT_EMPTY_get", A, 3);
    if (N > 7)
        IO_RANGE_CHECK("%s N is %d but max is %d", "qs_field_range_FIFO_PKT_EMPTY_get", N, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "qs_field_range_FIFO_PKT_EMPTY_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "qs_field_range_FIFO_PKT_EMPTY_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000a2600 + (N) * 0x4) bits 31:0) field FIFO_PKT_EMPTY of register PMC_QS_REG_FIFO_PTR_EMPTY_REG index N=0..7 */
    reg_value = _qs_reg_FIFO_PTR_EMPTY_REG_array_read( LOG_CALLER_ARGS
                                                       b_ptr,
                                                       h_ptr,
                                                       A,
                                                       N);
    field_value = (reg_value & QS_REG_FIFO_PTR_EMPTY_REG_BIT_FIFO_PKT_EMPTY_MSK)
                  >> QS_REG_FIFO_PTR_EMPTY_REG_BIT_FIFO_PKT_EMPTY_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, QS_REG_FIFO_PTR_EMPTY_REG_BIT_FIFO_PKT_EMPTY_MSK, QS_REG_FIFO_PTR_EMPTY_REG_BIT_FIFO_PKT_EMPTY_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "qs_field_range_FIFO_PKT_EMPTY_get", A, N, start_bit, stop_bit, value );

    return value;
}

#ifndef qs_field_range_FIFO_PKT_EMPTY_poll
#define qs_field_range_FIFO_PKT_EMPTY_poll( b_ptr, h_ptr, A, N, start_bit, stop_bit, value, cmp, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _qs_field_range_FIFO_PKT_EMPTY_poll( LOG_CALLER b_ptr, h_ptr, A, N, start_bit, stop_bit, value, cmp, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_POLL_RETURN_TYPE _qs_field_range_FIFO_PKT_EMPTY_poll( LOG_CALLER_DEFN
                                                                        qs_buffer_t *b_ptr,
                                                                        cpb_handle_t *h_ptr,
                                                                        UINT32 A,
                                                                        UINT32  N,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit,
                                                                        UINT32 value,
                                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                                        UINT32 max_count,
                                                                        UINT32 *num_failed_polls,
                                                                        UINT32 delay_between_polls_in_microseconds )
{
    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "qs_field_range_FIFO_PKT_EMPTY_poll", A, 3);
    if (N > 7)
        IO_RANGE_CHECK("%s N is %d but max is %d", "qs_field_range_FIFO_PKT_EMPTY_poll", N, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "qs_field_range_FIFO_PKT_EMPTY_poll", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "qs_field_range_FIFO_PKT_EMPTY_poll", stop_bit, 31 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "qs_field_range_FIFO_PKT_EMPTY_poll", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000a2600 + (N) * 0x4) bits 31:0) field FIFO_PKT_EMPTY of register PMC_QS_REG_FIFO_PTR_EMPTY_REG index N=0..7 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000a2600 + (N) * 0x4) bits 31:0) field FIFO_PKT_EMPTY of register PMC_QS_REG_FIFO_PTR_EMPTY_REG index N=0..7 */
        return _qs_reg_FIFO_PTR_EMPTY_REG_array_poll( LOG_CALLER_ARGS
                                                      b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N,
                                                      subfield_mask << (QS_REG_FIFO_PTR_EMPTY_REG_BIT_FIFO_PKT_EMPTY_OFF + subfield_offset),
                                                      value << (QS_REG_FIFO_PTR_EMPTY_REG_BIT_FIFO_PKT_EMPTY_OFF + subfield_offset),
                                                      cmp,
                                                      max_count,
                                                      num_failed_polls,
                                                      delay_between_polls_in_microseconds);
    }
    return PMC_ERR_INVALID_PARAMETERS;
}


#ifndef qs_field_FIFO_PKT_EMPTY_poll
#define qs_field_FIFO_PKT_EMPTY_poll( b_ptr, h_ptr, A, N, value, cmp, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _qs_field_FIFO_PKT_EMPTY_poll( LOG_CALLER b_ptr, h_ptr, A, N, value, cmp, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_POLL_RETURN_TYPE _qs_field_FIFO_PKT_EMPTY_poll( LOG_CALLER_DEFN
                                                                  qs_buffer_t *b_ptr,
                                                                  cpb_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32  N,
                                                                  UINT32 value,
                                                                  PMC_POLL_COMPARISON_TYPE cmp,
                                                                  UINT32 max_count,
                                                                  UINT32 *num_failed_polls,
                                                                  UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d N=%d 0x%08x", "qs_field_FIFO_PKT_EMPTY_poll", A, N, value );

    /* ((0x000a2600 + (N) * 0x4) bits 31:0) field FIFO_PKT_EMPTY of register PMC_QS_REG_FIFO_PTR_EMPTY_REG index N=0..7 */
    return _qs_reg_FIFO_PTR_EMPTY_REG_array_poll( LOG_CALLER_ARGS
                                                  b_ptr,
                                                  h_ptr,
                                                  A,
                                                  N,
                                                  QS_REG_FIFO_PTR_EMPTY_REG_BIT_FIFO_PKT_EMPTY_MSK,
                                                  (value<<QS_REG_FIFO_PTR_EMPTY_REG_BIT_FIFO_PKT_EMPTY_OFF),
                                                  cmp,
                                                  max_count,
                                                  num_failed_polls,
                                                  delay_between_polls_in_microseconds);
}


#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* _QS_IO_INLINE_H */
