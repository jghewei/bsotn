/******************************************************************************
 *   COPYRIGHT (C) 2011 PMC-SIERRA, INC. ALL RIGHTS RESERVED.
 * --------------------------------------------------------------------------
 *  This software embodies materials and concepts which are proprietary and
 *  confidential to PMC-Sierra, Inc.
 *  PMC-Sierra distributes this software to its customers pursuant to the
 *  terms and conditions of the Software License Agreement
 *  contained in the text file software.lic that is distributed along with
 *  the software. This software can only be utilized if all
 *  terms and conditions of the Software License Agreement are
 *  accepted. If there are any questions, concerns, or if the
 *  Software License Agreement text file, software.lic, is missing please
 *  contact PMC-Sierra for assistance.
 * -------------------------------------------------------------------------
 *   DESCRIPTION:
 *     contains the inline implementation of all the field accessor functions
 *     and register accessor functions for the cfc block
 * 
 *   NOTES:
 *     This file is generated by the script codegen.pm, version 1.1
 *     Do not modify this file.
 * 
 *     The input file is ../src/ioxml/lw20_15_99_generic_reg.xml
 *     block_uri "file:../docs/rda/lw20_15_99_reg.xml"
 *     block_part_number "LW20_15_99"
 *     block_mnemonic "CFC"
 * 
 *****************************************************************************/
#ifndef _CFC_IO_INLINE_H
#define _CFC_IO_INLINE_H

#include "cfc.h"
#include "cfc_regs.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * ==================================================================================
 *                 tsb level structure and access functions for cfc
 * ==================================================================================
 */
/* if logging is disabled then so is IO_LOGGING */
#ifndef NO_IO_LOGGING
# ifdef LOGGING_DISABLED
#  define NO_IO_LOGGING
# endif
#endif

/* log messages in the generated files log the caller's file/line/function instead of itself.*/
#ifndef IOLOG
# ifdef NO_IO_LOGGING
#  define IOLOG(...)
# else
#  define IOLOG(...) vaLog( LOG_CALLER_ARGS __VA_ARGS__)
# endif
#endif
#ifndef IO_RANGE_CHECK
# ifdef NO_IO_LOGGING
#  define IO_RANGE_CHECK(...)
# else
#  define IO_RANGE_CHECK(...) vaLog( LOG_CALLER_ARGS "** ERROR: range check ** " __VA_ARGS__)
# endif
#endif
#ifndef IOLOG_DATA
# ifdef NO_IO_LOGGING
#  define IOLOG_DATA(...)
# else
#  define IOLOG_DATA(...) vaLogData( LOG_CALLER_ARGS __VA_ARGS__)
# endif
#endif
typedef struct {
    coalesce_buffer_t coalesce_handle[1]; /* only used if register coalescing is enabled */
    cfc_handle_t * h;
    pmc_sys_handle_t sys_handle;
    const UINT32 base_address;
    /* maybe eventually need to add some fields here per io handle */
} cfc_buffer_t;

#ifndef cfc_buffer_init
#define cfc_buffer_init( b, h ) \
       _cfc_buffer_init( LOG_CALLER b, h )
#endif
static INLINE void _cfc_buffer_init( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    b->h                        = h;
    b->sys_handle               = ((pmc_handle_t *)h)->sys_handle;
    *(UINT32 *)&b->base_address = ((pmc_handle_t *)h)->base_address;
    /* currently this just checks that the previous function remembered to flush. */
    l1sys_init( b->coalesce_handle, (void**)b->sys_handle );
    IOLOG( "%s", "cfc_buffer_init");
    
}

#ifndef cfc_buffer_flush
#define cfc_buffer_flush( b ) \
       _cfc_buffer_flush( LOG_CALLER b )
#endif

/*
* flush any changed fields to the register file and invalidate the read cache.
*/
static INLINE void _cfc_buffer_flush( LOG_CALLER_DEFN cfc_buffer_t *b )
{
    IOLOG( "cfc_buffer_flush" );
    l1sys_flush( b->coalesce_handle );
}
static INLINE UINT32 cfc_reg_read( cfc_buffer_t *b,
                                   cfc_handle_t *h,
                                   UINT32 mem_type,
                                   UINT32 reg )
{
    UINT32 value;
    if (b != NULL)
        value = l1sys_reg_read( b->coalesce_handle,
                                mem_type,
                                b->base_address,
                                reg);
    else
        value = l2sys_reg_read( ((pmc_handle_t *)h)->sys_handle,
                                mem_type,
                                ((pmc_handle_t *)h)->base_address + reg);
    return value;
}
static INLINE void cfc_reg_write( cfc_buffer_t *b,
                                  cfc_handle_t *h,
                                  UINT32 mem_type,
                                  UINT32 reg,
                                  UINT32 value )
{
    if (b != NULL)
        l1sys_reg_write( b->coalesce_handle,
                         mem_type,
                         b->base_address,
                         reg,
                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h)->sys_handle,
                         mem_type,
                         ((pmc_handle_t *)h)->base_address + reg,
                         value);
}

static INLINE void cfc_field_set( cfc_buffer_t *b,
                                  cfc_handle_t *h,
                                  UINT32 mem_type,
                                  UINT32 reg,
                                  UINT32 mask,
                                  UINT32 unused_mask,
                                  UINT32 ofs,
                                  UINT32 value )
{
    if (b != NULL)
        l1sys_field_set2( b->coalesce_handle,
                          mem_type,
                          b->base_address,
                          reg,
                          mask,
                          unused_mask,
                          ofs,
                          value);
    else
    {
        if ((mask | unused_mask) == 0xffffffff)
        {
            l2sys_reg_write( ((pmc_handle_t *)h)->sys_handle,
                             mem_type,
                             ((pmc_handle_t *)h)->base_address + reg,
                             value<<ofs);
        }
        else
        {
            l2sys_reg_read_modify_write( ((pmc_handle_t *)h)->sys_handle,
                                         mem_type,
                                         ((pmc_handle_t *)h)->base_address + reg,
                                         mask,
                                         value<<ofs);
        }
    }
}

static INLINE void cfc_action_on_write_field_set( cfc_buffer_t *b,
                                                  cfc_handle_t *h,
                                                  UINT32 mem_type,
                                                  UINT32 reg,
                                                  UINT32 mask,
                                                  UINT32 ofs,
                                                  UINT32 value )
{
    if (b != NULL)
        l1sys_action_on_write_field_set( b->coalesce_handle,
                                         mem_type,
                                         b->base_address,
                                         reg,
                                         mask,
                                         ofs,
                                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h)->sys_handle,
                         mem_type,
                         ((pmc_handle_t *)h)->base_address + reg,
                         value<<ofs);
}

static INLINE void cfc_burst_read( cfc_buffer_t *b,
                                   cfc_handle_t *h,
                                   UINT32 mem_type,
                                   UINT32 reg,
                                   UINT32 len,
                                   UINT32 *value )
{
    if (b != NULL)
        l1sys_burst_read( b->coalesce_handle,
                          mem_type,
                          b->base_address,
                          reg,
                          len,
                          value);
    else
        l2sys_burst_read( ((pmc_handle_t *)h)->sys_handle,
                          mem_type,
                          ((pmc_handle_t *)h)->base_address + reg,
                          len,
                          value);
}

static INLINE void cfc_burst_write( cfc_buffer_t *b,
                                    cfc_handle_t *h,
                                    UINT32 mem_type,
                                    UINT32 reg,
                                    UINT32 len,
                                    UINT32 *value )
{
    if (b != NULL)
        l1sys_burst_write( b->coalesce_handle,
                           mem_type,
                           b->base_address,
                           reg,
                           len,
                           value);
    else
        l2sys_burst_write( ((pmc_handle_t *)h)->sys_handle,
                           mem_type,
                           ((pmc_handle_t *)h)->base_address + reg,
                           len,
                           value);
}

static INLINE PMC_ERROR cfc_poll_bit( cfc_buffer_t *b,
                                      cfc_handle_t *h,
                                      UINT32 mem_type,
                                      UINT32 reg,
                                      UINT32 mask,
                                      UINT32 value,
                                      UINT32 max_count,
                                      UINT32 *num_failed_polls,
                                      UINT32 delay_between_polls_in_microseconds )
{
    if (b != NULL)
        return l1sys_poll_bit( b->coalesce_handle,
                               mem_type,
                               b->base_address,
                               reg,
                               mask,
                               value,
                               max_count,
                               num_failed_polls,
                               delay_between_polls_in_microseconds);
    else
        return l2sys_poll_bit( ((pmc_handle_t *)h)->sys_handle,
                               mem_type,
                               ((pmc_handle_t *)h)->base_address + reg,
                               mask,
                               value,
                               max_count,
                               num_failed_polls,
                               delay_between_polls_in_microseconds);
}

/*
 * ==================================================================================
 *                         register access functions for cfc
 * ==================================================================================
 */

/**
 * accessor functions for register PMC_CFC_REG_FIFO_CLRB_0
 *
 * Register: FIFO Clear  0
 * Offset: 0x00000000 FIFO_CLRB_0
 *
 * bits        31:0 default 0x00000000 FIFO_CLRB
 * field_bits  31:0
 */

#ifndef cfc_reg_FIFO_CLRB_0_write
#define cfc_reg_FIFO_CLRB_0_write( b, h, value ) \
       _cfc_reg_FIFO_CLRB_0_write( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_reg_FIFO_CLRB_0_write( LOG_CALLER_DEFN
                                               cfc_buffer_t *b,
                                               cfc_handle_t *h,
                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "cfc_reg_FIFO_CLRB_0_write", value );
    cfc_reg_write( b,
                   h,
                   MEM_TYPE_CONFIG,
                   PMC_CFC_REG_FIFO_CLRB_0,
                   value);
}


#ifndef cfc_reg_FIFO_CLRB_0_field_set
#define cfc_reg_FIFO_CLRB_0_field_set( b, h, mask, ofs, value ) \
       _cfc_reg_FIFO_CLRB_0_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _cfc_reg_FIFO_CLRB_0_field_set( LOG_CALLER_DEFN
                                                   cfc_buffer_t *b,
                                                   cfc_handle_t *h,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "cfc_reg_FIFO_CLRB_0_field_set", mask, ofs, value );
    cfc_field_set( b,
                   h,
                   MEM_TYPE_CONFIG,
                   PMC_CFC_REG_FIFO_CLRB_0,
                   mask,
                   PMC_CFC_REG_FIFO_CLRB_0_UNUSED_MASK,
                   ofs,
                   value);

}


#ifndef cfc_reg_FIFO_CLRB_0_read
#define cfc_reg_FIFO_CLRB_0_read( b, h ) \
       _cfc_reg_FIFO_CLRB_0_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_FIFO_CLRB_0_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_CONFIG,
                              PMC_CFC_REG_FIFO_CLRB_0);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_FIFO_CLRB_0_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_CFC_REG_FIFO_CLRB_1
 *
 * Register: FIFO Clear 1
 * Offset: 0x00000004 FIFO_CLRB_1
 *
 * bits        31:0 default 0x00000000 FIFO_CLRB
 * field_bits  63:32
 */

#ifndef cfc_reg_FIFO_CLRB_1_write
#define cfc_reg_FIFO_CLRB_1_write( b, h, value ) \
       _cfc_reg_FIFO_CLRB_1_write( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_reg_FIFO_CLRB_1_write( LOG_CALLER_DEFN
                                               cfc_buffer_t *b,
                                               cfc_handle_t *h,
                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "cfc_reg_FIFO_CLRB_1_write", value );
    cfc_reg_write( b,
                   h,
                   MEM_TYPE_CONFIG,
                   PMC_CFC_REG_FIFO_CLRB_1,
                   value);
}


#ifndef cfc_reg_FIFO_CLRB_1_field_set
#define cfc_reg_FIFO_CLRB_1_field_set( b, h, mask, ofs, value ) \
       _cfc_reg_FIFO_CLRB_1_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _cfc_reg_FIFO_CLRB_1_field_set( LOG_CALLER_DEFN
                                                   cfc_buffer_t *b,
                                                   cfc_handle_t *h,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "cfc_reg_FIFO_CLRB_1_field_set", mask, ofs, value );
    cfc_field_set( b,
                   h,
                   MEM_TYPE_CONFIG,
                   PMC_CFC_REG_FIFO_CLRB_1,
                   mask,
                   PMC_CFC_REG_FIFO_CLRB_1_UNUSED_MASK,
                   ofs,
                   value);

}


#ifndef cfc_reg_FIFO_CLRB_1_read
#define cfc_reg_FIFO_CLRB_1_read( b, h ) \
       _cfc_reg_FIFO_CLRB_1_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_FIFO_CLRB_1_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_CONFIG,
                              PMC_CFC_REG_FIFO_CLRB_1);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_FIFO_CLRB_1_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_CFC_REG_FIFO_CLRB_2
 *
 * Register: FIFO Clear 2
 * Offset: 0x00000008 FIFO_CLRB_2
 *
 * bits        31:0 default 0x00000000 FIFO_CLRB
 * field_bits  95:64
 */

#ifndef cfc_reg_FIFO_CLRB_2_write
#define cfc_reg_FIFO_CLRB_2_write( b, h, value ) \
       _cfc_reg_FIFO_CLRB_2_write( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_reg_FIFO_CLRB_2_write( LOG_CALLER_DEFN
                                               cfc_buffer_t *b,
                                               cfc_handle_t *h,
                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "cfc_reg_FIFO_CLRB_2_write", value );
    cfc_reg_write( b,
                   h,
                   MEM_TYPE_CONFIG,
                   PMC_CFC_REG_FIFO_CLRB_2,
                   value);
}


#ifndef cfc_reg_FIFO_CLRB_2_field_set
#define cfc_reg_FIFO_CLRB_2_field_set( b, h, mask, ofs, value ) \
       _cfc_reg_FIFO_CLRB_2_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _cfc_reg_FIFO_CLRB_2_field_set( LOG_CALLER_DEFN
                                                   cfc_buffer_t *b,
                                                   cfc_handle_t *h,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "cfc_reg_FIFO_CLRB_2_field_set", mask, ofs, value );
    cfc_field_set( b,
                   h,
                   MEM_TYPE_CONFIG,
                   PMC_CFC_REG_FIFO_CLRB_2,
                   mask,
                   PMC_CFC_REG_FIFO_CLRB_2_UNUSED_MASK,
                   ofs,
                   value);

}


#ifndef cfc_reg_FIFO_CLRB_2_read
#define cfc_reg_FIFO_CLRB_2_read( b, h ) \
       _cfc_reg_FIFO_CLRB_2_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_FIFO_CLRB_2_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_CONFIG,
                              PMC_CFC_REG_FIFO_CLRB_2);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_FIFO_CLRB_2_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_CFC_REG_FIFO_CLRB_3
 *
 * Register: FIFO Clear 3
 * Offset: 0x00000010 FIFO_CLRB_3
 *
 * bits        31:0 default 0x00000000 FIFO_CLRB
 * field_bits  127:96
 */

#ifndef cfc_reg_FIFO_CLRB_3_write
#define cfc_reg_FIFO_CLRB_3_write( b, h, value ) \
       _cfc_reg_FIFO_CLRB_3_write( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_reg_FIFO_CLRB_3_write( LOG_CALLER_DEFN
                                               cfc_buffer_t *b,
                                               cfc_handle_t *h,
                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "cfc_reg_FIFO_CLRB_3_write", value );
    cfc_reg_write( b,
                   h,
                   MEM_TYPE_CONFIG,
                   PMC_CFC_REG_FIFO_CLRB_3,
                   value);
}


#ifndef cfc_reg_FIFO_CLRB_3_field_set
#define cfc_reg_FIFO_CLRB_3_field_set( b, h, mask, ofs, value ) \
       _cfc_reg_FIFO_CLRB_3_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _cfc_reg_FIFO_CLRB_3_field_set( LOG_CALLER_DEFN
                                                   cfc_buffer_t *b,
                                                   cfc_handle_t *h,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "cfc_reg_FIFO_CLRB_3_field_set", mask, ofs, value );
    cfc_field_set( b,
                   h,
                   MEM_TYPE_CONFIG,
                   PMC_CFC_REG_FIFO_CLRB_3,
                   mask,
                   PMC_CFC_REG_FIFO_CLRB_3_UNUSED_MASK,
                   ofs,
                   value);

}


#ifndef cfc_reg_FIFO_CLRB_3_read
#define cfc_reg_FIFO_CLRB_3_read( b, h ) \
       _cfc_reg_FIFO_CLRB_3_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_FIFO_CLRB_3_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_CONFIG,
                              PMC_CFC_REG_FIFO_CLRB_3);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_FIFO_CLRB_3_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_CFC_REG_FIFO_IPT_BYPASS
 *
 * Register: IPT Bypass
 * Offset: 0x00000080 FIFO_IPT_BYPASS
 *
 * bits 16 default 0 IPT_BYPASS
 */

#ifndef cfc_reg_FIFO_IPT_BYPASS_write
#define cfc_reg_FIFO_IPT_BYPASS_write( b, h, value ) \
       _cfc_reg_FIFO_IPT_BYPASS_write( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_reg_FIFO_IPT_BYPASS_write( LOG_CALLER_DEFN
                                                   cfc_buffer_t *b,
                                                   cfc_handle_t *h,
                                                   UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "cfc_reg_FIFO_IPT_BYPASS_write", value );
    cfc_reg_write( b,
                   h,
                   MEM_TYPE_CONFIG,
                   PMC_CFC_REG_FIFO_IPT_BYPASS,
                   value);
}


#ifndef cfc_reg_FIFO_IPT_BYPASS_field_set
#define cfc_reg_FIFO_IPT_BYPASS_field_set( b, h, mask, ofs, value ) \
       _cfc_reg_FIFO_IPT_BYPASS_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _cfc_reg_FIFO_IPT_BYPASS_field_set( LOG_CALLER_DEFN
                                                       cfc_buffer_t *b,
                                                       cfc_handle_t *h,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "cfc_reg_FIFO_IPT_BYPASS_field_set", mask, ofs, value );
    cfc_field_set( b,
                   h,
                   MEM_TYPE_CONFIG,
                   PMC_CFC_REG_FIFO_IPT_BYPASS,
                   mask,
                   PMC_CFC_REG_FIFO_IPT_BYPASS_UNUSED_MASK,
                   ofs,
                   value);

}


#ifndef cfc_reg_FIFO_IPT_BYPASS_read
#define cfc_reg_FIFO_IPT_BYPASS_read( b, h ) \
       _cfc_reg_FIFO_IPT_BYPASS_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_FIFO_IPT_BYPASS_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_CONFIG,
                              PMC_CFC_REG_FIFO_IPT_BYPASS);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_FIFO_IPT_BYPASS_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_CFC_REG_FIFO_IPT_MASK_CFC
 *
 * Register: IPT Page Mask
 * Offset: 0x00000084 FIFO_IPT_MASK_CFC
 *
 * bits 15:0 default 0000000000000000 IPT_PAGE_MASK
 */

#ifndef cfc_reg_FIFO_IPT_MASK_CFC_write
#define cfc_reg_FIFO_IPT_MASK_CFC_write( b, h, value ) \
       _cfc_reg_FIFO_IPT_MASK_CFC_write( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_reg_FIFO_IPT_MASK_CFC_write( LOG_CALLER_DEFN
                                                     cfc_buffer_t *b,
                                                     cfc_handle_t *h,
                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "cfc_reg_FIFO_IPT_MASK_CFC_write", value );
    cfc_reg_write( b,
                   h,
                   MEM_TYPE_CONFIG,
                   PMC_CFC_REG_FIFO_IPT_MASK_CFC,
                   value);
}


#ifndef cfc_reg_FIFO_IPT_MASK_CFC_field_set
#define cfc_reg_FIFO_IPT_MASK_CFC_field_set( b, h, mask, ofs, value ) \
       _cfc_reg_FIFO_IPT_MASK_CFC_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _cfc_reg_FIFO_IPT_MASK_CFC_field_set( LOG_CALLER_DEFN
                                                         cfc_buffer_t *b,
                                                         cfc_handle_t *h,
                                                         UINT32 mask,
                                                         UINT32 ofs,
                                                         UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "cfc_reg_FIFO_IPT_MASK_CFC_field_set", mask, ofs, value );
    cfc_field_set( b,
                   h,
                   MEM_TYPE_CONFIG,
                   PMC_CFC_REG_FIFO_IPT_MASK_CFC,
                   mask,
                   PMC_CFC_REG_FIFO_IPT_MASK_CFC_UNUSED_MASK,
                   ofs,
                   value);

}


#ifndef cfc_reg_FIFO_IPT_MASK_CFC_read
#define cfc_reg_FIFO_IPT_MASK_CFC_read( b, h ) \
       _cfc_reg_FIFO_IPT_MASK_CFC_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_FIFO_IPT_MASK_CFC_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_CONFIG,
                              PMC_CFC_REG_FIFO_IPT_MASK_CFC);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_FIFO_IPT_MASK_CFC_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_CFC_REG_FIFO_CFG
 *
 * Register: FIFO End Address Change Request
 * Offset: 0x000000a0 FIFO_CFG
 *
 * bits 28    default 0       FIFO_END_ADDR_CHG_ABORT
 *
 * bits 24    default 0       FIFO_END_ADDR_CHG_REQ
 *
 * bits 22:16 default 0000000 FIFO_END_ADDR_CHG_ID
 */

#ifndef cfc_reg_FIFO_CFG_write
#define cfc_reg_FIFO_CFG_write( b, h, value ) \
       _cfc_reg_FIFO_CFG_write( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_reg_FIFO_CFG_write( LOG_CALLER_DEFN
                                            cfc_buffer_t *b,
                                            cfc_handle_t *h,
                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "cfc_reg_FIFO_CFG_write", value );
    cfc_reg_write( b,
                   h,
                   MEM_TYPE_CONFIG,
                   PMC_CFC_REG_FIFO_CFG,
                   value);
}


#ifndef cfc_reg_FIFO_CFG_field_set
#define cfc_reg_FIFO_CFG_field_set( b, h, mask, ofs, value ) \
       _cfc_reg_FIFO_CFG_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _cfc_reg_FIFO_CFG_field_set( LOG_CALLER_DEFN
                                                cfc_buffer_t *b,
                                                cfc_handle_t *h,
                                                UINT32 mask,
                                                UINT32 ofs,
                                                UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "cfc_reg_FIFO_CFG_field_set", mask, ofs, value );
    cfc_field_set( b,
                   h,
                   MEM_TYPE_CONFIG,
                   PMC_CFC_REG_FIFO_CFG,
                   mask,
                   PMC_CFC_REG_FIFO_CFG_UNUSED_MASK,
                   ofs,
                   value);

}


#ifndef cfc_reg_FIFO_CFG_read
#define cfc_reg_FIFO_CFG_read( b, h ) \
       _cfc_reg_FIFO_CFG_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_FIFO_CFG_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_CONFIG,
                              PMC_CFC_REG_FIFO_CFG);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_FIFO_CFG_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_CFC_REG_FIFO_CFG_VAL
 *
 * Register: FIFO End Address Change Value
 * Offset: 0x000000a8 FIFO_CFG_VAL
 *
 * bits 15:0 default 0000000000000000 FIFO_END_ADDR
 */

#ifndef cfc_reg_FIFO_CFG_VAL_write
#define cfc_reg_FIFO_CFG_VAL_write( b, h, value ) \
       _cfc_reg_FIFO_CFG_VAL_write( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_reg_FIFO_CFG_VAL_write( LOG_CALLER_DEFN
                                                cfc_buffer_t *b,
                                                cfc_handle_t *h,
                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "cfc_reg_FIFO_CFG_VAL_write", value );
    cfc_reg_write( b,
                   h,
                   MEM_TYPE_CONFIG,
                   PMC_CFC_REG_FIFO_CFG_VAL,
                   value);
}


#ifndef cfc_reg_FIFO_CFG_VAL_field_set
#define cfc_reg_FIFO_CFG_VAL_field_set( b, h, mask, ofs, value ) \
       _cfc_reg_FIFO_CFG_VAL_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _cfc_reg_FIFO_CFG_VAL_field_set( LOG_CALLER_DEFN
                                                    cfc_buffer_t *b,
                                                    cfc_handle_t *h,
                                                    UINT32 mask,
                                                    UINT32 ofs,
                                                    UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "cfc_reg_FIFO_CFG_VAL_field_set", mask, ofs, value );
    cfc_field_set( b,
                   h,
                   MEM_TYPE_CONFIG,
                   PMC_CFC_REG_FIFO_CFG_VAL,
                   mask,
                   PMC_CFC_REG_FIFO_CFG_VAL_UNUSED_MASK,
                   ofs,
                   value);

}


#ifndef cfc_reg_FIFO_CFG_VAL_read
#define cfc_reg_FIFO_CFG_VAL_read( b, h ) \
       _cfc_reg_FIFO_CFG_VAL_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_FIFO_CFG_VAL_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_CONFIG,
                              PMC_CFC_REG_FIFO_CFG_VAL);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_FIFO_CFG_VAL_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_CFC_REG_DBG_CTRL
 *
 * Register: Debug Interface Control
 * Offset: 0x00000100 DBG_CTRL
 *
 * bits 16   default 0      DBG_TRIG
 *
 * bits 10:0 default 0x0000 DBG_RADDR
 */

#ifndef cfc_reg_DBG_CTRL_write
#define cfc_reg_DBG_CTRL_write( b, h, value ) \
       _cfc_reg_DBG_CTRL_write( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_reg_DBG_CTRL_write( LOG_CALLER_DEFN
                                            cfc_buffer_t *b,
                                            cfc_handle_t *h,
                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "cfc_reg_DBG_CTRL_write", value );
    cfc_reg_write( b,
                   h,
                   MEM_TYPE_CONFIG,
                   PMC_CFC_REG_DBG_CTRL,
                   value);
}


#ifndef cfc_reg_DBG_CTRL_field_set
#define cfc_reg_DBG_CTRL_field_set( b, h, mask, ofs, value ) \
       _cfc_reg_DBG_CTRL_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _cfc_reg_DBG_CTRL_field_set( LOG_CALLER_DEFN
                                                cfc_buffer_t *b,
                                                cfc_handle_t *h,
                                                UINT32 mask,
                                                UINT32 ofs,
                                                UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "cfc_reg_DBG_CTRL_field_set", mask, ofs, value );
    cfc_field_set( b,
                   h,
                   MEM_TYPE_CONFIG,
                   PMC_CFC_REG_DBG_CTRL,
                   mask,
                   PMC_CFC_REG_DBG_CTRL_UNUSED_MASK,
                   ofs,
                   value);

}


#ifndef cfc_reg_DBG_CTRL_read
#define cfc_reg_DBG_CTRL_read( b, h ) \
       _cfc_reg_DBG_CTRL_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_DBG_CTRL_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_CONFIG,
                              PMC_CFC_REG_DBG_CTRL);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_DBG_CTRL_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_CFC_REG_FIFO_IPT
 *
 * Register: IPT Entries
 * Offset: (0x00000400 + (N) * 0x04) FIFO_IPT
 *
 * bits 24    default 0       IPT_VALID
 *
 * bits 22:16 default 0000000 IPT_ID
 *
 * bits 6:0   default 0000000 IPT_VA
 */

#ifndef cfc_reg_FIFO_IPT_array_write
#define cfc_reg_FIFO_IPT_array_write( b, h, N, value ) \
       _cfc_reg_FIFO_IPT_array_write( LOG_CALLER b, h, N, value )
#endif
static INLINE void _cfc_reg_FIFO_IPT_array_write( LOG_CALLER_DEFN
                                                  cfc_buffer_t *b,
                                                  cfc_handle_t *h,
                                                  UINT32  N,
                                                  UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "cfc_reg_FIFO_IPT_array_write", value );
    cfc_reg_write( b,
                   h,
                   MEM_TYPE_CONFIG,
                   PMC_CFC_REG_FIFO_IPT(N),
                   value);
}


#ifndef cfc_reg_FIFO_IPT_array_field_set
#define cfc_reg_FIFO_IPT_array_field_set( b, h, N, mask, ofs, value ) \
       _cfc_reg_FIFO_IPT_array_field_set( LOG_CALLER b, h, N, mask, ofs, value )
#endif
static INLINE void _cfc_reg_FIFO_IPT_array_field_set( LOG_CALLER_DEFN
                                                      cfc_buffer_t *b,
                                                      cfc_handle_t *h,
                                                      UINT32  N,
                                                      UINT32 mask,
                                                      UINT32 ofs,
                                                      UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "cfc_reg_FIFO_IPT_array_field_set", N, mask, ofs, value );
    cfc_field_set( b,
                   h,
                   MEM_TYPE_CONFIG,
                   PMC_CFC_REG_FIFO_IPT(N),
                   mask,
                   PMC_CFC_REG_FIFO_IPT_UNUSED_MASK,
                   ofs,
                   value);

}


#ifndef cfc_reg_FIFO_IPT_array_read
#define cfc_reg_FIFO_IPT_array_read( b, h, N ) \
       _cfc_reg_FIFO_IPT_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _cfc_reg_FIFO_IPT_array_read( LOG_CALLER_DEFN
                                                   cfc_buffer_t *b,
                                                   cfc_handle_t *h,
                                                   UINT32  N )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_CONFIG,
                              PMC_CFC_REG_FIFO_IPT(N));

    IOLOG( "%s -> 0x%08x; N=%d", "cfc_reg_FIFO_IPT_array_read", reg_value, N);
    return reg_value;
}

/**
 * accessor functions for register PMC_CFC_REG_FIFO_OVR_INT_EN_REG_0
 *
 * Register: FIFO Overflow Interrupt Enable 0
 * Offset: 0x00000280 FIFO_OVR_INT_EN_REG_0
 *
 * bits        31:0 default 00000000000000000000000000000000 FIFO_OVR_E
 * field_bits  31:0
 */

#ifndef cfc_reg_FIFO_OVR_INT_EN_REG_0_write
#define cfc_reg_FIFO_OVR_INT_EN_REG_0_write( b, h, value ) \
       _cfc_reg_FIFO_OVR_INT_EN_REG_0_write( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_reg_FIFO_OVR_INT_EN_REG_0_write( LOG_CALLER_DEFN
                                                         cfc_buffer_t *b,
                                                         cfc_handle_t *h,
                                                         UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "cfc_reg_FIFO_OVR_INT_EN_REG_0_write", value );
    cfc_reg_write( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_OVR_INT_EN_REG_0,
                   value);
}


#ifndef cfc_reg_FIFO_OVR_INT_EN_REG_0_field_set
#define cfc_reg_FIFO_OVR_INT_EN_REG_0_field_set( b, h, mask, ofs, value ) \
       _cfc_reg_FIFO_OVR_INT_EN_REG_0_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _cfc_reg_FIFO_OVR_INT_EN_REG_0_field_set( LOG_CALLER_DEFN
                                                             cfc_buffer_t *b,
                                                             cfc_handle_t *h,
                                                             UINT32 mask,
                                                             UINT32 ofs,
                                                             UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "cfc_reg_FIFO_OVR_INT_EN_REG_0_field_set", mask, ofs, value );
    cfc_field_set( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_OVR_INT_EN_REG_0,
                   mask,
                   PMC_CFC_REG_FIFO_OVR_INT_EN_REG_0_UNUSED_MASK,
                   ofs,
                   value);

}


#ifndef cfc_reg_FIFO_OVR_INT_EN_REG_0_read
#define cfc_reg_FIFO_OVR_INT_EN_REG_0_read( b, h ) \
       _cfc_reg_FIFO_OVR_INT_EN_REG_0_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_FIFO_OVR_INT_EN_REG_0_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_CFC_REG_FIFO_OVR_INT_EN_REG_0);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_FIFO_OVR_INT_EN_REG_0_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_CFC_REG_FIFO_OVR_INT_EN_REG_1
 *
 * Register: FIFO Overflow Interrupt Enable 1
 * Offset: 0x00000284 FIFO_OVR_INT_EN_REG_1
 *
 * bits        31:0 default 00000000000000000000000000000000 FIFO_OVR_E
 * field_bits  63:32
 */

#ifndef cfc_reg_FIFO_OVR_INT_EN_REG_1_write
#define cfc_reg_FIFO_OVR_INT_EN_REG_1_write( b, h, value ) \
       _cfc_reg_FIFO_OVR_INT_EN_REG_1_write( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_reg_FIFO_OVR_INT_EN_REG_1_write( LOG_CALLER_DEFN
                                                         cfc_buffer_t *b,
                                                         cfc_handle_t *h,
                                                         UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "cfc_reg_FIFO_OVR_INT_EN_REG_1_write", value );
    cfc_reg_write( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_OVR_INT_EN_REG_1,
                   value);
}


#ifndef cfc_reg_FIFO_OVR_INT_EN_REG_1_field_set
#define cfc_reg_FIFO_OVR_INT_EN_REG_1_field_set( b, h, mask, ofs, value ) \
       _cfc_reg_FIFO_OVR_INT_EN_REG_1_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _cfc_reg_FIFO_OVR_INT_EN_REG_1_field_set( LOG_CALLER_DEFN
                                                             cfc_buffer_t *b,
                                                             cfc_handle_t *h,
                                                             UINT32 mask,
                                                             UINT32 ofs,
                                                             UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "cfc_reg_FIFO_OVR_INT_EN_REG_1_field_set", mask, ofs, value );
    cfc_field_set( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_OVR_INT_EN_REG_1,
                   mask,
                   PMC_CFC_REG_FIFO_OVR_INT_EN_REG_1_UNUSED_MASK,
                   ofs,
                   value);

}


#ifndef cfc_reg_FIFO_OVR_INT_EN_REG_1_read
#define cfc_reg_FIFO_OVR_INT_EN_REG_1_read( b, h ) \
       _cfc_reg_FIFO_OVR_INT_EN_REG_1_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_FIFO_OVR_INT_EN_REG_1_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_CFC_REG_FIFO_OVR_INT_EN_REG_1);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_FIFO_OVR_INT_EN_REG_1_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_CFC_REG_FIFO_OVR_INT_EN_REG_2
 *
 * Register: FIFO Overflow Interrupt Enable 2
 * Offset: 0x00000288 FIFO_OVR_INT_EN_REG_2
 *
 * bits        31:0 default 00000000000000000000000000000000 FIFO_OVR_E
 * field_bits  95:64
 */

#ifndef cfc_reg_FIFO_OVR_INT_EN_REG_2_write
#define cfc_reg_FIFO_OVR_INT_EN_REG_2_write( b, h, value ) \
       _cfc_reg_FIFO_OVR_INT_EN_REG_2_write( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_reg_FIFO_OVR_INT_EN_REG_2_write( LOG_CALLER_DEFN
                                                         cfc_buffer_t *b,
                                                         cfc_handle_t *h,
                                                         UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "cfc_reg_FIFO_OVR_INT_EN_REG_2_write", value );
    cfc_reg_write( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_OVR_INT_EN_REG_2,
                   value);
}


#ifndef cfc_reg_FIFO_OVR_INT_EN_REG_2_field_set
#define cfc_reg_FIFO_OVR_INT_EN_REG_2_field_set( b, h, mask, ofs, value ) \
       _cfc_reg_FIFO_OVR_INT_EN_REG_2_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _cfc_reg_FIFO_OVR_INT_EN_REG_2_field_set( LOG_CALLER_DEFN
                                                             cfc_buffer_t *b,
                                                             cfc_handle_t *h,
                                                             UINT32 mask,
                                                             UINT32 ofs,
                                                             UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "cfc_reg_FIFO_OVR_INT_EN_REG_2_field_set", mask, ofs, value );
    cfc_field_set( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_OVR_INT_EN_REG_2,
                   mask,
                   PMC_CFC_REG_FIFO_OVR_INT_EN_REG_2_UNUSED_MASK,
                   ofs,
                   value);

}


#ifndef cfc_reg_FIFO_OVR_INT_EN_REG_2_read
#define cfc_reg_FIFO_OVR_INT_EN_REG_2_read( b, h ) \
       _cfc_reg_FIFO_OVR_INT_EN_REG_2_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_FIFO_OVR_INT_EN_REG_2_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_CFC_REG_FIFO_OVR_INT_EN_REG_2);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_FIFO_OVR_INT_EN_REG_2_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_CFC_REG_FIFO_OVR_INT_EN_REG_3
 *
 * Register: FIFO Overflow Interrupt Enable 3
 * Offset: 0x0000028c FIFO_OVR_INT_EN_REG_3
 *
 * bits        31:0 default 00000000000000000000000000000000 FIFO_OVR_E
 * field_bits  127:96
 */

#ifndef cfc_reg_FIFO_OVR_INT_EN_REG_3_write
#define cfc_reg_FIFO_OVR_INT_EN_REG_3_write( b, h, value ) \
       _cfc_reg_FIFO_OVR_INT_EN_REG_3_write( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_reg_FIFO_OVR_INT_EN_REG_3_write( LOG_CALLER_DEFN
                                                         cfc_buffer_t *b,
                                                         cfc_handle_t *h,
                                                         UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "cfc_reg_FIFO_OVR_INT_EN_REG_3_write", value );
    cfc_reg_write( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_OVR_INT_EN_REG_3,
                   value);
}


#ifndef cfc_reg_FIFO_OVR_INT_EN_REG_3_field_set
#define cfc_reg_FIFO_OVR_INT_EN_REG_3_field_set( b, h, mask, ofs, value ) \
       _cfc_reg_FIFO_OVR_INT_EN_REG_3_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _cfc_reg_FIFO_OVR_INT_EN_REG_3_field_set( LOG_CALLER_DEFN
                                                             cfc_buffer_t *b,
                                                             cfc_handle_t *h,
                                                             UINT32 mask,
                                                             UINT32 ofs,
                                                             UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "cfc_reg_FIFO_OVR_INT_EN_REG_3_field_set", mask, ofs, value );
    cfc_field_set( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_OVR_INT_EN_REG_3,
                   mask,
                   PMC_CFC_REG_FIFO_OVR_INT_EN_REG_3_UNUSED_MASK,
                   ofs,
                   value);

}


#ifndef cfc_reg_FIFO_OVR_INT_EN_REG_3_read
#define cfc_reg_FIFO_OVR_INT_EN_REG_3_read( b, h ) \
       _cfc_reg_FIFO_OVR_INT_EN_REG_3_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_FIFO_OVR_INT_EN_REG_3_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_CFC_REG_FIFO_OVR_INT_EN_REG_3);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_FIFO_OVR_INT_EN_REG_3_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_CFC_REG_FIFO_UDR_INT_EN_REG_0
 *
 * Register: FIFO Underflow Interrupt Enable 0
 * Offset: 0x000002a0 FIFO_UDR_INT_EN_REG_0
 *
 * bits        31:0 default 00000000000000000000000000000000 FIFO_UDR_E
 * field_bits  31:0
 */

#ifndef cfc_reg_FIFO_UDR_INT_EN_REG_0_write
#define cfc_reg_FIFO_UDR_INT_EN_REG_0_write( b, h, value ) \
       _cfc_reg_FIFO_UDR_INT_EN_REG_0_write( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_reg_FIFO_UDR_INT_EN_REG_0_write( LOG_CALLER_DEFN
                                                         cfc_buffer_t *b,
                                                         cfc_handle_t *h,
                                                         UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "cfc_reg_FIFO_UDR_INT_EN_REG_0_write", value );
    cfc_reg_write( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_UDR_INT_EN_REG_0,
                   value);
}


#ifndef cfc_reg_FIFO_UDR_INT_EN_REG_0_field_set
#define cfc_reg_FIFO_UDR_INT_EN_REG_0_field_set( b, h, mask, ofs, value ) \
       _cfc_reg_FIFO_UDR_INT_EN_REG_0_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _cfc_reg_FIFO_UDR_INT_EN_REG_0_field_set( LOG_CALLER_DEFN
                                                             cfc_buffer_t *b,
                                                             cfc_handle_t *h,
                                                             UINT32 mask,
                                                             UINT32 ofs,
                                                             UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "cfc_reg_FIFO_UDR_INT_EN_REG_0_field_set", mask, ofs, value );
    cfc_field_set( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_UDR_INT_EN_REG_0,
                   mask,
                   PMC_CFC_REG_FIFO_UDR_INT_EN_REG_0_UNUSED_MASK,
                   ofs,
                   value);

}


#ifndef cfc_reg_FIFO_UDR_INT_EN_REG_0_read
#define cfc_reg_FIFO_UDR_INT_EN_REG_0_read( b, h ) \
       _cfc_reg_FIFO_UDR_INT_EN_REG_0_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_FIFO_UDR_INT_EN_REG_0_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_CFC_REG_FIFO_UDR_INT_EN_REG_0);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_FIFO_UDR_INT_EN_REG_0_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_CFC_REG_FIFO_UDR_INT_EN_REG_1
 *
 * Register: FIFO Underflow Interrupt Enable 1
 * Offset: 0x000002a4 FIFO_UDR_INT_EN_REG_1
 *
 * bits        31:0 default 00000000000000000000000000000000 FIFO_UDR_E
 * field_bits  63:32
 */

#ifndef cfc_reg_FIFO_UDR_INT_EN_REG_1_write
#define cfc_reg_FIFO_UDR_INT_EN_REG_1_write( b, h, value ) \
       _cfc_reg_FIFO_UDR_INT_EN_REG_1_write( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_reg_FIFO_UDR_INT_EN_REG_1_write( LOG_CALLER_DEFN
                                                         cfc_buffer_t *b,
                                                         cfc_handle_t *h,
                                                         UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "cfc_reg_FIFO_UDR_INT_EN_REG_1_write", value );
    cfc_reg_write( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_UDR_INT_EN_REG_1,
                   value);
}


#ifndef cfc_reg_FIFO_UDR_INT_EN_REG_1_field_set
#define cfc_reg_FIFO_UDR_INT_EN_REG_1_field_set( b, h, mask, ofs, value ) \
       _cfc_reg_FIFO_UDR_INT_EN_REG_1_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _cfc_reg_FIFO_UDR_INT_EN_REG_1_field_set( LOG_CALLER_DEFN
                                                             cfc_buffer_t *b,
                                                             cfc_handle_t *h,
                                                             UINT32 mask,
                                                             UINT32 ofs,
                                                             UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "cfc_reg_FIFO_UDR_INT_EN_REG_1_field_set", mask, ofs, value );
    cfc_field_set( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_UDR_INT_EN_REG_1,
                   mask,
                   PMC_CFC_REG_FIFO_UDR_INT_EN_REG_1_UNUSED_MASK,
                   ofs,
                   value);

}


#ifndef cfc_reg_FIFO_UDR_INT_EN_REG_1_read
#define cfc_reg_FIFO_UDR_INT_EN_REG_1_read( b, h ) \
       _cfc_reg_FIFO_UDR_INT_EN_REG_1_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_FIFO_UDR_INT_EN_REG_1_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_CFC_REG_FIFO_UDR_INT_EN_REG_1);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_FIFO_UDR_INT_EN_REG_1_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_CFC_REG_FIFO_UDR_INT_EN_REG_2
 *
 * Register: FIFO Underflow Interrupt Enable 2
 * Offset: 0x000002a8 FIFO_UDR_INT_EN_REG_2
 *
 * bits        31:0 default 00000000000000000000000000000000 FIFO_UDR_E
 * field_bits  95:64
 */

#ifndef cfc_reg_FIFO_UDR_INT_EN_REG_2_write
#define cfc_reg_FIFO_UDR_INT_EN_REG_2_write( b, h, value ) \
       _cfc_reg_FIFO_UDR_INT_EN_REG_2_write( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_reg_FIFO_UDR_INT_EN_REG_2_write( LOG_CALLER_DEFN
                                                         cfc_buffer_t *b,
                                                         cfc_handle_t *h,
                                                         UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "cfc_reg_FIFO_UDR_INT_EN_REG_2_write", value );
    cfc_reg_write( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_UDR_INT_EN_REG_2,
                   value);
}


#ifndef cfc_reg_FIFO_UDR_INT_EN_REG_2_field_set
#define cfc_reg_FIFO_UDR_INT_EN_REG_2_field_set( b, h, mask, ofs, value ) \
       _cfc_reg_FIFO_UDR_INT_EN_REG_2_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _cfc_reg_FIFO_UDR_INT_EN_REG_2_field_set( LOG_CALLER_DEFN
                                                             cfc_buffer_t *b,
                                                             cfc_handle_t *h,
                                                             UINT32 mask,
                                                             UINT32 ofs,
                                                             UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "cfc_reg_FIFO_UDR_INT_EN_REG_2_field_set", mask, ofs, value );
    cfc_field_set( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_UDR_INT_EN_REG_2,
                   mask,
                   PMC_CFC_REG_FIFO_UDR_INT_EN_REG_2_UNUSED_MASK,
                   ofs,
                   value);

}


#ifndef cfc_reg_FIFO_UDR_INT_EN_REG_2_read
#define cfc_reg_FIFO_UDR_INT_EN_REG_2_read( b, h ) \
       _cfc_reg_FIFO_UDR_INT_EN_REG_2_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_FIFO_UDR_INT_EN_REG_2_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_CFC_REG_FIFO_UDR_INT_EN_REG_2);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_FIFO_UDR_INT_EN_REG_2_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_CFC_REG_FIFO_UDR_INT_EN_REG_3
 *
 * Register: FIFO Underflow Interrupt Enable 3
 * Offset: 0x000002ac FIFO_UDR_INT_EN_REG_3
 *
 * bits        31:0 default 00000000000000000000000000000000 FIFO_UDR_E
 * field_bits  127:96
 */

#ifndef cfc_reg_FIFO_UDR_INT_EN_REG_3_write
#define cfc_reg_FIFO_UDR_INT_EN_REG_3_write( b, h, value ) \
       _cfc_reg_FIFO_UDR_INT_EN_REG_3_write( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_reg_FIFO_UDR_INT_EN_REG_3_write( LOG_CALLER_DEFN
                                                         cfc_buffer_t *b,
                                                         cfc_handle_t *h,
                                                         UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "cfc_reg_FIFO_UDR_INT_EN_REG_3_write", value );
    cfc_reg_write( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_UDR_INT_EN_REG_3,
                   value);
}


#ifndef cfc_reg_FIFO_UDR_INT_EN_REG_3_field_set
#define cfc_reg_FIFO_UDR_INT_EN_REG_3_field_set( b, h, mask, ofs, value ) \
       _cfc_reg_FIFO_UDR_INT_EN_REG_3_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _cfc_reg_FIFO_UDR_INT_EN_REG_3_field_set( LOG_CALLER_DEFN
                                                             cfc_buffer_t *b,
                                                             cfc_handle_t *h,
                                                             UINT32 mask,
                                                             UINT32 ofs,
                                                             UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "cfc_reg_FIFO_UDR_INT_EN_REG_3_field_set", mask, ofs, value );
    cfc_field_set( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_UDR_INT_EN_REG_3,
                   mask,
                   PMC_CFC_REG_FIFO_UDR_INT_EN_REG_3_UNUSED_MASK,
                   ofs,
                   value);

}


#ifndef cfc_reg_FIFO_UDR_INT_EN_REG_3_read
#define cfc_reg_FIFO_UDR_INT_EN_REG_3_read( b, h ) \
       _cfc_reg_FIFO_UDR_INT_EN_REG_3_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_FIFO_UDR_INT_EN_REG_3_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_CFC_REG_FIFO_UDR_INT_EN_REG_3);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_FIFO_UDR_INT_EN_REG_3_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_0
 *
 * Register: IPT Error Interrupt Enable 0
 * Offset: 0x000002c0 FIFO_IPT_ERR_INT_EN_REG_0
 *
 * bits        31:0 default 00000000000000000000000000000000 IPT_ERR_E
 * field_bits  31:0
 */

#ifndef cfc_reg_FIFO_IPT_ERR_INT_EN_REG_0_write
#define cfc_reg_FIFO_IPT_ERR_INT_EN_REG_0_write( b, h, value ) \
       _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_0_write( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_0_write( LOG_CALLER_DEFN
                                                             cfc_buffer_t *b,
                                                             cfc_handle_t *h,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "cfc_reg_FIFO_IPT_ERR_INT_EN_REG_0_write", value );
    cfc_reg_write( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_0,
                   value);
}


#ifndef cfc_reg_FIFO_IPT_ERR_INT_EN_REG_0_field_set
#define cfc_reg_FIFO_IPT_ERR_INT_EN_REG_0_field_set( b, h, mask, ofs, value ) \
       _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_0_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_0_field_set( LOG_CALLER_DEFN
                                                                 cfc_buffer_t *b,
                                                                 cfc_handle_t *h,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "cfc_reg_FIFO_IPT_ERR_INT_EN_REG_0_field_set", mask, ofs, value );
    cfc_field_set( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_0,
                   mask,
                   PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_0_UNUSED_MASK,
                   ofs,
                   value);

}


#ifndef cfc_reg_FIFO_IPT_ERR_INT_EN_REG_0_read
#define cfc_reg_FIFO_IPT_ERR_INT_EN_REG_0_read( b, h ) \
       _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_0_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_0_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_0);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_FIFO_IPT_ERR_INT_EN_REG_0_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_1
 *
 * Register: IPT Error Interrupt Enable 1
 * Offset: 0x000002c4 FIFO_IPT_ERR_INT_EN_REG_1
 *
 * bits        31:0 default 00000000000000000000000000000000 IPT_ERR_E
 * field_bits  63:32
 */

#ifndef cfc_reg_FIFO_IPT_ERR_INT_EN_REG_1_write
#define cfc_reg_FIFO_IPT_ERR_INT_EN_REG_1_write( b, h, value ) \
       _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_1_write( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_1_write( LOG_CALLER_DEFN
                                                             cfc_buffer_t *b,
                                                             cfc_handle_t *h,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "cfc_reg_FIFO_IPT_ERR_INT_EN_REG_1_write", value );
    cfc_reg_write( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_1,
                   value);
}


#ifndef cfc_reg_FIFO_IPT_ERR_INT_EN_REG_1_field_set
#define cfc_reg_FIFO_IPT_ERR_INT_EN_REG_1_field_set( b, h, mask, ofs, value ) \
       _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_1_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_1_field_set( LOG_CALLER_DEFN
                                                                 cfc_buffer_t *b,
                                                                 cfc_handle_t *h,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "cfc_reg_FIFO_IPT_ERR_INT_EN_REG_1_field_set", mask, ofs, value );
    cfc_field_set( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_1,
                   mask,
                   PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_1_UNUSED_MASK,
                   ofs,
                   value);

}


#ifndef cfc_reg_FIFO_IPT_ERR_INT_EN_REG_1_read
#define cfc_reg_FIFO_IPT_ERR_INT_EN_REG_1_read( b, h ) \
       _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_1_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_1_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_1);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_FIFO_IPT_ERR_INT_EN_REG_1_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_2
 *
 * Register: IPT Error Interrupt Enable 2
 * Offset: 0x000002c8 FIFO_IPT_ERR_INT_EN_REG_2
 *
 * bits        31:0 default 00000000000000000000000000000000 IPT_ERR_E
 * field_bits  95:64
 */

#ifndef cfc_reg_FIFO_IPT_ERR_INT_EN_REG_2_write
#define cfc_reg_FIFO_IPT_ERR_INT_EN_REG_2_write( b, h, value ) \
       _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_2_write( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_2_write( LOG_CALLER_DEFN
                                                             cfc_buffer_t *b,
                                                             cfc_handle_t *h,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "cfc_reg_FIFO_IPT_ERR_INT_EN_REG_2_write", value );
    cfc_reg_write( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_2,
                   value);
}


#ifndef cfc_reg_FIFO_IPT_ERR_INT_EN_REG_2_field_set
#define cfc_reg_FIFO_IPT_ERR_INT_EN_REG_2_field_set( b, h, mask, ofs, value ) \
       _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_2_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_2_field_set( LOG_CALLER_DEFN
                                                                 cfc_buffer_t *b,
                                                                 cfc_handle_t *h,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "cfc_reg_FIFO_IPT_ERR_INT_EN_REG_2_field_set", mask, ofs, value );
    cfc_field_set( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_2,
                   mask,
                   PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_2_UNUSED_MASK,
                   ofs,
                   value);

}


#ifndef cfc_reg_FIFO_IPT_ERR_INT_EN_REG_2_read
#define cfc_reg_FIFO_IPT_ERR_INT_EN_REG_2_read( b, h ) \
       _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_2_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_2_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_2);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_FIFO_IPT_ERR_INT_EN_REG_2_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_3
 *
 * Register: IPT Error Interrupt Enable 3
 * Offset: 0x000002cc FIFO_IPT_ERR_INT_EN_REG_3
 *
 * bits        31:0 default 00000000000000000000000000000000 IPT_ERR_E
 * field_bits  127:96
 */

#ifndef cfc_reg_FIFO_IPT_ERR_INT_EN_REG_3_write
#define cfc_reg_FIFO_IPT_ERR_INT_EN_REG_3_write( b, h, value ) \
       _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_3_write( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_3_write( LOG_CALLER_DEFN
                                                             cfc_buffer_t *b,
                                                             cfc_handle_t *h,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "cfc_reg_FIFO_IPT_ERR_INT_EN_REG_3_write", value );
    cfc_reg_write( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_3,
                   value);
}


#ifndef cfc_reg_FIFO_IPT_ERR_INT_EN_REG_3_field_set
#define cfc_reg_FIFO_IPT_ERR_INT_EN_REG_3_field_set( b, h, mask, ofs, value ) \
       _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_3_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_3_field_set( LOG_CALLER_DEFN
                                                                 cfc_buffer_t *b,
                                                                 cfc_handle_t *h,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "cfc_reg_FIFO_IPT_ERR_INT_EN_REG_3_field_set", mask, ofs, value );
    cfc_field_set( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_3,
                   mask,
                   PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_3_UNUSED_MASK,
                   ofs,
                   value);

}


#ifndef cfc_reg_FIFO_IPT_ERR_INT_EN_REG_3_read
#define cfc_reg_FIFO_IPT_ERR_INT_EN_REG_3_read( b, h ) \
       _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_3_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_3_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_3);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_FIFO_IPT_ERR_INT_EN_REG_3_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_CFC_REG_FIFO_OVR_INT_REG_0
 *
 * Register: FIFO Overflow Interrupt 0
 * Offset: 0x00000200 FIFO_OVR_INT_REG_0
 *
 * bits        31:0 default 00000000000000000000000000000000 FIFO_OVR_I
 * field_bits  31:0
 * attribute: int_edge=rising
 * attribute: clk=dpi_clk
 */

#ifndef cfc_reg_FIFO_OVR_INT_REG_0_write
#define cfc_reg_FIFO_OVR_INT_REG_0_write( b, h, value ) \
       _cfc_reg_FIFO_OVR_INT_REG_0_write( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_reg_FIFO_OVR_INT_REG_0_write( LOG_CALLER_DEFN
                                                      cfc_buffer_t *b,
                                                      cfc_handle_t *h,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "cfc_reg_FIFO_OVR_INT_REG_0_write", value );
    cfc_reg_write( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_OVR_INT_REG_0,
                   value);
}


#ifndef cfc_reg_FIFO_OVR_INT_REG_0_action_on_write_field_set
#define cfc_reg_FIFO_OVR_INT_REG_0_action_on_write_field_set( b, h, mask, ofs, value ) \
       _cfc_reg_FIFO_OVR_INT_REG_0_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _cfc_reg_FIFO_OVR_INT_REG_0_action_on_write_field_set( LOG_CALLER_DEFN
                                                                          cfc_buffer_t *b,
                                                                          cfc_handle_t *h,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "cfc_reg_FIFO_OVR_INT_REG_0_action_on_write_field_set", mask, ofs, value );
    cfc_action_on_write_field_set( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_CFC_REG_FIFO_OVR_INT_REG_0,
                                   mask,
                                   ofs,
                                   value);

}


#ifndef cfc_reg_FIFO_OVR_INT_REG_0_read
#define cfc_reg_FIFO_OVR_INT_REG_0_read( b, h ) \
       _cfc_reg_FIFO_OVR_INT_REG_0_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_FIFO_OVR_INT_REG_0_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_CFC_REG_FIFO_OVR_INT_REG_0);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_FIFO_OVR_INT_REG_0_read", reg_value);
    return reg_value;
}

#ifndef cfc_reg_FIFO_OVR_INT_REG_0_poll_bit
#define cfc_reg_FIFO_OVR_INT_REG_0_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _cfc_reg_FIFO_OVR_INT_REG_0_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _cfc_reg_FIFO_OVR_INT_REG_0_poll_bit( LOG_CALLER_DEFN
                                                              cfc_buffer_t *b,
                                                              cfc_handle_t *h,
                                                              UINT32 mask,
                                                              UINT32 value,
                                                              UINT32 max_count,
                                                              UINT32 *num_failed_polls,
                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "cfc_reg_FIFO_OVR_INT_REG_0_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return cfc_poll_bit( b,
                         h,
                         MEM_TYPE_STATUS,
                         PMC_CFC_REG_FIFO_OVR_INT_REG_0,
                         mask,
                         value,
                         max_count,
                         num_failed_polls,
                         delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_CFC_REG_FIFO_OVR_INT_REG_1
 *
 * Register: FIFO Overflow Interrupt 1
 * Offset: 0x00000204 FIFO_OVR_INT_REG_1
 *
 * bits        31:0 default 00000000000000000000000000000000 FIFO_OVR_I
 * field_bits  63:32
 * attribute: int_edge=rising
 * attribute: clk=dpi_clk
 */

#ifndef cfc_reg_FIFO_OVR_INT_REG_1_write
#define cfc_reg_FIFO_OVR_INT_REG_1_write( b, h, value ) \
       _cfc_reg_FIFO_OVR_INT_REG_1_write( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_reg_FIFO_OVR_INT_REG_1_write( LOG_CALLER_DEFN
                                                      cfc_buffer_t *b,
                                                      cfc_handle_t *h,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "cfc_reg_FIFO_OVR_INT_REG_1_write", value );
    cfc_reg_write( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_OVR_INT_REG_1,
                   value);
}


#ifndef cfc_reg_FIFO_OVR_INT_REG_1_action_on_write_field_set
#define cfc_reg_FIFO_OVR_INT_REG_1_action_on_write_field_set( b, h, mask, ofs, value ) \
       _cfc_reg_FIFO_OVR_INT_REG_1_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _cfc_reg_FIFO_OVR_INT_REG_1_action_on_write_field_set( LOG_CALLER_DEFN
                                                                          cfc_buffer_t *b,
                                                                          cfc_handle_t *h,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "cfc_reg_FIFO_OVR_INT_REG_1_action_on_write_field_set", mask, ofs, value );
    cfc_action_on_write_field_set( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_CFC_REG_FIFO_OVR_INT_REG_1,
                                   mask,
                                   ofs,
                                   value);

}


#ifndef cfc_reg_FIFO_OVR_INT_REG_1_read
#define cfc_reg_FIFO_OVR_INT_REG_1_read( b, h ) \
       _cfc_reg_FIFO_OVR_INT_REG_1_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_FIFO_OVR_INT_REG_1_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_CFC_REG_FIFO_OVR_INT_REG_1);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_FIFO_OVR_INT_REG_1_read", reg_value);
    return reg_value;
}

#ifndef cfc_reg_FIFO_OVR_INT_REG_1_poll_bit
#define cfc_reg_FIFO_OVR_INT_REG_1_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _cfc_reg_FIFO_OVR_INT_REG_1_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _cfc_reg_FIFO_OVR_INT_REG_1_poll_bit( LOG_CALLER_DEFN
                                                              cfc_buffer_t *b,
                                                              cfc_handle_t *h,
                                                              UINT32 mask,
                                                              UINT32 value,
                                                              UINT32 max_count,
                                                              UINT32 *num_failed_polls,
                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "cfc_reg_FIFO_OVR_INT_REG_1_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return cfc_poll_bit( b,
                         h,
                         MEM_TYPE_STATUS,
                         PMC_CFC_REG_FIFO_OVR_INT_REG_1,
                         mask,
                         value,
                         max_count,
                         num_failed_polls,
                         delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_CFC_REG_FIFO_OVR_INT_REG_2
 *
 * Register: FIFO Overflow Interrupt 2
 * Offset: 0x00000208 FIFO_OVR_INT_REG_2
 *
 * bits        31:0 default 00000000000000000000000000000000 FIFO_OVR_I
 * field_bits  95:64
 * attribute: int_edge=rising
 * attribute: clk=dpi_clk
 */

#ifndef cfc_reg_FIFO_OVR_INT_REG_2_write
#define cfc_reg_FIFO_OVR_INT_REG_2_write( b, h, value ) \
       _cfc_reg_FIFO_OVR_INT_REG_2_write( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_reg_FIFO_OVR_INT_REG_2_write( LOG_CALLER_DEFN
                                                      cfc_buffer_t *b,
                                                      cfc_handle_t *h,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "cfc_reg_FIFO_OVR_INT_REG_2_write", value );
    cfc_reg_write( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_OVR_INT_REG_2,
                   value);
}


#ifndef cfc_reg_FIFO_OVR_INT_REG_2_action_on_write_field_set
#define cfc_reg_FIFO_OVR_INT_REG_2_action_on_write_field_set( b, h, mask, ofs, value ) \
       _cfc_reg_FIFO_OVR_INT_REG_2_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _cfc_reg_FIFO_OVR_INT_REG_2_action_on_write_field_set( LOG_CALLER_DEFN
                                                                          cfc_buffer_t *b,
                                                                          cfc_handle_t *h,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "cfc_reg_FIFO_OVR_INT_REG_2_action_on_write_field_set", mask, ofs, value );
    cfc_action_on_write_field_set( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_CFC_REG_FIFO_OVR_INT_REG_2,
                                   mask,
                                   ofs,
                                   value);

}


#ifndef cfc_reg_FIFO_OVR_INT_REG_2_read
#define cfc_reg_FIFO_OVR_INT_REG_2_read( b, h ) \
       _cfc_reg_FIFO_OVR_INT_REG_2_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_FIFO_OVR_INT_REG_2_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_CFC_REG_FIFO_OVR_INT_REG_2);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_FIFO_OVR_INT_REG_2_read", reg_value);
    return reg_value;
}

#ifndef cfc_reg_FIFO_OVR_INT_REG_2_poll_bit
#define cfc_reg_FIFO_OVR_INT_REG_2_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _cfc_reg_FIFO_OVR_INT_REG_2_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _cfc_reg_FIFO_OVR_INT_REG_2_poll_bit( LOG_CALLER_DEFN
                                                              cfc_buffer_t *b,
                                                              cfc_handle_t *h,
                                                              UINT32 mask,
                                                              UINT32 value,
                                                              UINT32 max_count,
                                                              UINT32 *num_failed_polls,
                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "cfc_reg_FIFO_OVR_INT_REG_2_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return cfc_poll_bit( b,
                         h,
                         MEM_TYPE_STATUS,
                         PMC_CFC_REG_FIFO_OVR_INT_REG_2,
                         mask,
                         value,
                         max_count,
                         num_failed_polls,
                         delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_CFC_REG_FIFO_OVR_INT_REG_3
 *
 * Register: FIFO Overflow Interrupt 3
 * Offset: 0x0000020c FIFO_OVR_INT_REG_3
 *
 * bits        31:0 default 00000000000000000000000000000000 FIFO_OVR_I
 * field_bits  127:96
 * attribute: int_edge=rising
 * attribute: clk=dpi_clk
 */

#ifndef cfc_reg_FIFO_OVR_INT_REG_3_write
#define cfc_reg_FIFO_OVR_INT_REG_3_write( b, h, value ) \
       _cfc_reg_FIFO_OVR_INT_REG_3_write( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_reg_FIFO_OVR_INT_REG_3_write( LOG_CALLER_DEFN
                                                      cfc_buffer_t *b,
                                                      cfc_handle_t *h,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "cfc_reg_FIFO_OVR_INT_REG_3_write", value );
    cfc_reg_write( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_OVR_INT_REG_3,
                   value);
}


#ifndef cfc_reg_FIFO_OVR_INT_REG_3_action_on_write_field_set
#define cfc_reg_FIFO_OVR_INT_REG_3_action_on_write_field_set( b, h, mask, ofs, value ) \
       _cfc_reg_FIFO_OVR_INT_REG_3_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _cfc_reg_FIFO_OVR_INT_REG_3_action_on_write_field_set( LOG_CALLER_DEFN
                                                                          cfc_buffer_t *b,
                                                                          cfc_handle_t *h,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "cfc_reg_FIFO_OVR_INT_REG_3_action_on_write_field_set", mask, ofs, value );
    cfc_action_on_write_field_set( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_CFC_REG_FIFO_OVR_INT_REG_3,
                                   mask,
                                   ofs,
                                   value);

}


#ifndef cfc_reg_FIFO_OVR_INT_REG_3_read
#define cfc_reg_FIFO_OVR_INT_REG_3_read( b, h ) \
       _cfc_reg_FIFO_OVR_INT_REG_3_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_FIFO_OVR_INT_REG_3_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_CFC_REG_FIFO_OVR_INT_REG_3);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_FIFO_OVR_INT_REG_3_read", reg_value);
    return reg_value;
}

#ifndef cfc_reg_FIFO_OVR_INT_REG_3_poll_bit
#define cfc_reg_FIFO_OVR_INT_REG_3_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _cfc_reg_FIFO_OVR_INT_REG_3_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _cfc_reg_FIFO_OVR_INT_REG_3_poll_bit( LOG_CALLER_DEFN
                                                              cfc_buffer_t *b,
                                                              cfc_handle_t *h,
                                                              UINT32 mask,
                                                              UINT32 value,
                                                              UINT32 max_count,
                                                              UINT32 *num_failed_polls,
                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "cfc_reg_FIFO_OVR_INT_REG_3_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return cfc_poll_bit( b,
                         h,
                         MEM_TYPE_STATUS,
                         PMC_CFC_REG_FIFO_OVR_INT_REG_3,
                         mask,
                         value,
                         max_count,
                         num_failed_polls,
                         delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_CFC_REG_FIFO_UDR_INT_REG_0
 *
 * Register: FIFO Underflow Interrupt 0
 * Offset: 0x00000220 FIFO_UDR_INT_REG_0
 *
 * bits        31:0 default 00000000000000000000000000000000 FIFO_UDR_I
 * field_bits  31:0
 * attribute: int_edge=rising
 * attribute: clk=dpi_clk
 */

#ifndef cfc_reg_FIFO_UDR_INT_REG_0_write
#define cfc_reg_FIFO_UDR_INT_REG_0_write( b, h, value ) \
       _cfc_reg_FIFO_UDR_INT_REG_0_write( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_reg_FIFO_UDR_INT_REG_0_write( LOG_CALLER_DEFN
                                                      cfc_buffer_t *b,
                                                      cfc_handle_t *h,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "cfc_reg_FIFO_UDR_INT_REG_0_write", value );
    cfc_reg_write( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_UDR_INT_REG_0,
                   value);
}


#ifndef cfc_reg_FIFO_UDR_INT_REG_0_action_on_write_field_set
#define cfc_reg_FIFO_UDR_INT_REG_0_action_on_write_field_set( b, h, mask, ofs, value ) \
       _cfc_reg_FIFO_UDR_INT_REG_0_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _cfc_reg_FIFO_UDR_INT_REG_0_action_on_write_field_set( LOG_CALLER_DEFN
                                                                          cfc_buffer_t *b,
                                                                          cfc_handle_t *h,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "cfc_reg_FIFO_UDR_INT_REG_0_action_on_write_field_set", mask, ofs, value );
    cfc_action_on_write_field_set( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_CFC_REG_FIFO_UDR_INT_REG_0,
                                   mask,
                                   ofs,
                                   value);

}


#ifndef cfc_reg_FIFO_UDR_INT_REG_0_read
#define cfc_reg_FIFO_UDR_INT_REG_0_read( b, h ) \
       _cfc_reg_FIFO_UDR_INT_REG_0_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_FIFO_UDR_INT_REG_0_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_CFC_REG_FIFO_UDR_INT_REG_0);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_FIFO_UDR_INT_REG_0_read", reg_value);
    return reg_value;
}

#ifndef cfc_reg_FIFO_UDR_INT_REG_0_poll_bit
#define cfc_reg_FIFO_UDR_INT_REG_0_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _cfc_reg_FIFO_UDR_INT_REG_0_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _cfc_reg_FIFO_UDR_INT_REG_0_poll_bit( LOG_CALLER_DEFN
                                                              cfc_buffer_t *b,
                                                              cfc_handle_t *h,
                                                              UINT32 mask,
                                                              UINT32 value,
                                                              UINT32 max_count,
                                                              UINT32 *num_failed_polls,
                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "cfc_reg_FIFO_UDR_INT_REG_0_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return cfc_poll_bit( b,
                         h,
                         MEM_TYPE_STATUS,
                         PMC_CFC_REG_FIFO_UDR_INT_REG_0,
                         mask,
                         value,
                         max_count,
                         num_failed_polls,
                         delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_CFC_REG_FIFO_UDR_INT_REG_1
 *
 * Register: FIFO Underflow Interrupt 1
 * Offset: 0x00000224 FIFO_UDR_INT_REG_1
 *
 * bits        31:0 default 00000000000000000000000000000000 FIFO_UDR_I
 * field_bits  63:32
 * attribute: int_edge=rising
 * attribute: clk=dpi_clk
 */

#ifndef cfc_reg_FIFO_UDR_INT_REG_1_write
#define cfc_reg_FIFO_UDR_INT_REG_1_write( b, h, value ) \
       _cfc_reg_FIFO_UDR_INT_REG_1_write( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_reg_FIFO_UDR_INT_REG_1_write( LOG_CALLER_DEFN
                                                      cfc_buffer_t *b,
                                                      cfc_handle_t *h,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "cfc_reg_FIFO_UDR_INT_REG_1_write", value );
    cfc_reg_write( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_UDR_INT_REG_1,
                   value);
}


#ifndef cfc_reg_FIFO_UDR_INT_REG_1_action_on_write_field_set
#define cfc_reg_FIFO_UDR_INT_REG_1_action_on_write_field_set( b, h, mask, ofs, value ) \
       _cfc_reg_FIFO_UDR_INT_REG_1_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _cfc_reg_FIFO_UDR_INT_REG_1_action_on_write_field_set( LOG_CALLER_DEFN
                                                                          cfc_buffer_t *b,
                                                                          cfc_handle_t *h,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "cfc_reg_FIFO_UDR_INT_REG_1_action_on_write_field_set", mask, ofs, value );
    cfc_action_on_write_field_set( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_CFC_REG_FIFO_UDR_INT_REG_1,
                                   mask,
                                   ofs,
                                   value);

}


#ifndef cfc_reg_FIFO_UDR_INT_REG_1_read
#define cfc_reg_FIFO_UDR_INT_REG_1_read( b, h ) \
       _cfc_reg_FIFO_UDR_INT_REG_1_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_FIFO_UDR_INT_REG_1_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_CFC_REG_FIFO_UDR_INT_REG_1);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_FIFO_UDR_INT_REG_1_read", reg_value);
    return reg_value;
}

#ifndef cfc_reg_FIFO_UDR_INT_REG_1_poll_bit
#define cfc_reg_FIFO_UDR_INT_REG_1_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _cfc_reg_FIFO_UDR_INT_REG_1_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _cfc_reg_FIFO_UDR_INT_REG_1_poll_bit( LOG_CALLER_DEFN
                                                              cfc_buffer_t *b,
                                                              cfc_handle_t *h,
                                                              UINT32 mask,
                                                              UINT32 value,
                                                              UINT32 max_count,
                                                              UINT32 *num_failed_polls,
                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "cfc_reg_FIFO_UDR_INT_REG_1_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return cfc_poll_bit( b,
                         h,
                         MEM_TYPE_STATUS,
                         PMC_CFC_REG_FIFO_UDR_INT_REG_1,
                         mask,
                         value,
                         max_count,
                         num_failed_polls,
                         delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_CFC_REG_FIFO_UDR_INT_REG_2
 *
 * Register: FIFO Underflow Interrupt 2
 * Offset: 0x00000228 FIFO_UDR_INT_REG_2
 *
 * bits        31:0 default 00000000000000000000000000000000 FIFO_UDR_I
 * field_bits  95:64
 * attribute: int_edge=rising
 * attribute: clk=dpi_clk
 */

#ifndef cfc_reg_FIFO_UDR_INT_REG_2_write
#define cfc_reg_FIFO_UDR_INT_REG_2_write( b, h, value ) \
       _cfc_reg_FIFO_UDR_INT_REG_2_write( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_reg_FIFO_UDR_INT_REG_2_write( LOG_CALLER_DEFN
                                                      cfc_buffer_t *b,
                                                      cfc_handle_t *h,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "cfc_reg_FIFO_UDR_INT_REG_2_write", value );
    cfc_reg_write( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_UDR_INT_REG_2,
                   value);
}


#ifndef cfc_reg_FIFO_UDR_INT_REG_2_action_on_write_field_set
#define cfc_reg_FIFO_UDR_INT_REG_2_action_on_write_field_set( b, h, mask, ofs, value ) \
       _cfc_reg_FIFO_UDR_INT_REG_2_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _cfc_reg_FIFO_UDR_INT_REG_2_action_on_write_field_set( LOG_CALLER_DEFN
                                                                          cfc_buffer_t *b,
                                                                          cfc_handle_t *h,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "cfc_reg_FIFO_UDR_INT_REG_2_action_on_write_field_set", mask, ofs, value );
    cfc_action_on_write_field_set( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_CFC_REG_FIFO_UDR_INT_REG_2,
                                   mask,
                                   ofs,
                                   value);

}


#ifndef cfc_reg_FIFO_UDR_INT_REG_2_read
#define cfc_reg_FIFO_UDR_INT_REG_2_read( b, h ) \
       _cfc_reg_FIFO_UDR_INT_REG_2_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_FIFO_UDR_INT_REG_2_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_CFC_REG_FIFO_UDR_INT_REG_2);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_FIFO_UDR_INT_REG_2_read", reg_value);
    return reg_value;
}

#ifndef cfc_reg_FIFO_UDR_INT_REG_2_poll_bit
#define cfc_reg_FIFO_UDR_INT_REG_2_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _cfc_reg_FIFO_UDR_INT_REG_2_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _cfc_reg_FIFO_UDR_INT_REG_2_poll_bit( LOG_CALLER_DEFN
                                                              cfc_buffer_t *b,
                                                              cfc_handle_t *h,
                                                              UINT32 mask,
                                                              UINT32 value,
                                                              UINT32 max_count,
                                                              UINT32 *num_failed_polls,
                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "cfc_reg_FIFO_UDR_INT_REG_2_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return cfc_poll_bit( b,
                         h,
                         MEM_TYPE_STATUS,
                         PMC_CFC_REG_FIFO_UDR_INT_REG_2,
                         mask,
                         value,
                         max_count,
                         num_failed_polls,
                         delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_CFC_REG_FIFO_UDR_INT_REG_3
 *
 * Register: FIFO Underflow Interrupt 3
 * Offset: 0x0000022c FIFO_UDR_INT_REG_3
 *
 * bits        31:0 default 00000000000000000000000000000000 FIFO_UDR_I
 * field_bits  127:96
 * attribute: int_edge=rising
 * attribute: clk=dpi_clk
 */

#ifndef cfc_reg_FIFO_UDR_INT_REG_3_write
#define cfc_reg_FIFO_UDR_INT_REG_3_write( b, h, value ) \
       _cfc_reg_FIFO_UDR_INT_REG_3_write( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_reg_FIFO_UDR_INT_REG_3_write( LOG_CALLER_DEFN
                                                      cfc_buffer_t *b,
                                                      cfc_handle_t *h,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "cfc_reg_FIFO_UDR_INT_REG_3_write", value );
    cfc_reg_write( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_UDR_INT_REG_3,
                   value);
}


#ifndef cfc_reg_FIFO_UDR_INT_REG_3_action_on_write_field_set
#define cfc_reg_FIFO_UDR_INT_REG_3_action_on_write_field_set( b, h, mask, ofs, value ) \
       _cfc_reg_FIFO_UDR_INT_REG_3_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _cfc_reg_FIFO_UDR_INT_REG_3_action_on_write_field_set( LOG_CALLER_DEFN
                                                                          cfc_buffer_t *b,
                                                                          cfc_handle_t *h,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "cfc_reg_FIFO_UDR_INT_REG_3_action_on_write_field_set", mask, ofs, value );
    cfc_action_on_write_field_set( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_CFC_REG_FIFO_UDR_INT_REG_3,
                                   mask,
                                   ofs,
                                   value);

}


#ifndef cfc_reg_FIFO_UDR_INT_REG_3_read
#define cfc_reg_FIFO_UDR_INT_REG_3_read( b, h ) \
       _cfc_reg_FIFO_UDR_INT_REG_3_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_FIFO_UDR_INT_REG_3_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_CFC_REG_FIFO_UDR_INT_REG_3);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_FIFO_UDR_INT_REG_3_read", reg_value);
    return reg_value;
}

#ifndef cfc_reg_FIFO_UDR_INT_REG_3_poll_bit
#define cfc_reg_FIFO_UDR_INT_REG_3_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _cfc_reg_FIFO_UDR_INT_REG_3_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _cfc_reg_FIFO_UDR_INT_REG_3_poll_bit( LOG_CALLER_DEFN
                                                              cfc_buffer_t *b,
                                                              cfc_handle_t *h,
                                                              UINT32 mask,
                                                              UINT32 value,
                                                              UINT32 max_count,
                                                              UINT32 *num_failed_polls,
                                                              UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "cfc_reg_FIFO_UDR_INT_REG_3_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return cfc_poll_bit( b,
                         h,
                         MEM_TYPE_STATUS,
                         PMC_CFC_REG_FIFO_UDR_INT_REG_3,
                         mask,
                         value,
                         max_count,
                         num_failed_polls,
                         delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_0
 *
 * Register: IPT Error Interrupt 0
 * Offset: 0x00000240 FIFO_IPT_ERR_INT_REG_0
 *
 * bits        31:0 default 00000000000000000000000000000000 IPT_ERR_I
 * field_bits  31:0
 * attribute: int_edge=rising
 * attribute: clk=dpi_clk
 */

#ifndef cfc_reg_FIFO_IPT_ERR_INT_REG_0_write
#define cfc_reg_FIFO_IPT_ERR_INT_REG_0_write( b, h, value ) \
       _cfc_reg_FIFO_IPT_ERR_INT_REG_0_write( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_reg_FIFO_IPT_ERR_INT_REG_0_write( LOG_CALLER_DEFN
                                                          cfc_buffer_t *b,
                                                          cfc_handle_t *h,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "cfc_reg_FIFO_IPT_ERR_INT_REG_0_write", value );
    cfc_reg_write( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_0,
                   value);
}


#ifndef cfc_reg_FIFO_IPT_ERR_INT_REG_0_action_on_write_field_set
#define cfc_reg_FIFO_IPT_ERR_INT_REG_0_action_on_write_field_set( b, h, mask, ofs, value ) \
       _cfc_reg_FIFO_IPT_ERR_INT_REG_0_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _cfc_reg_FIFO_IPT_ERR_INT_REG_0_action_on_write_field_set( LOG_CALLER_DEFN
                                                                              cfc_buffer_t *b,
                                                                              cfc_handle_t *h,
                                                                              UINT32 mask,
                                                                              UINT32 ofs,
                                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "cfc_reg_FIFO_IPT_ERR_INT_REG_0_action_on_write_field_set", mask, ofs, value );
    cfc_action_on_write_field_set( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_0,
                                   mask,
                                   ofs,
                                   value);

}


#ifndef cfc_reg_FIFO_IPT_ERR_INT_REG_0_read
#define cfc_reg_FIFO_IPT_ERR_INT_REG_0_read( b, h ) \
       _cfc_reg_FIFO_IPT_ERR_INT_REG_0_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_FIFO_IPT_ERR_INT_REG_0_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_0);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_FIFO_IPT_ERR_INT_REG_0_read", reg_value);
    return reg_value;
}

#ifndef cfc_reg_FIFO_IPT_ERR_INT_REG_0_poll_bit
#define cfc_reg_FIFO_IPT_ERR_INT_REG_0_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _cfc_reg_FIFO_IPT_ERR_INT_REG_0_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _cfc_reg_FIFO_IPT_ERR_INT_REG_0_poll_bit( LOG_CALLER_DEFN
                                                                  cfc_buffer_t *b,
                                                                  cfc_handle_t *h,
                                                                  UINT32 mask,
                                                                  UINT32 value,
                                                                  UINT32 max_count,
                                                                  UINT32 *num_failed_polls,
                                                                  UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "cfc_reg_FIFO_IPT_ERR_INT_REG_0_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return cfc_poll_bit( b,
                         h,
                         MEM_TYPE_STATUS,
                         PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_0,
                         mask,
                         value,
                         max_count,
                         num_failed_polls,
                         delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_1
 *
 * Register: IPT Error Interrupt 1
 * Offset: 0x00000244 FIFO_IPT_ERR_INT_REG_1
 *
 * bits        31:0 default 00000000000000000000000000000000 IPT_ERR_I
 * field_bits  63:32
 * attribute: int_edge=rising
 * attribute: clk=dpi_clk
 */

#ifndef cfc_reg_FIFO_IPT_ERR_INT_REG_1_write
#define cfc_reg_FIFO_IPT_ERR_INT_REG_1_write( b, h, value ) \
       _cfc_reg_FIFO_IPT_ERR_INT_REG_1_write( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_reg_FIFO_IPT_ERR_INT_REG_1_write( LOG_CALLER_DEFN
                                                          cfc_buffer_t *b,
                                                          cfc_handle_t *h,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "cfc_reg_FIFO_IPT_ERR_INT_REG_1_write", value );
    cfc_reg_write( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_1,
                   value);
}


#ifndef cfc_reg_FIFO_IPT_ERR_INT_REG_1_action_on_write_field_set
#define cfc_reg_FIFO_IPT_ERR_INT_REG_1_action_on_write_field_set( b, h, mask, ofs, value ) \
       _cfc_reg_FIFO_IPT_ERR_INT_REG_1_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _cfc_reg_FIFO_IPT_ERR_INT_REG_1_action_on_write_field_set( LOG_CALLER_DEFN
                                                                              cfc_buffer_t *b,
                                                                              cfc_handle_t *h,
                                                                              UINT32 mask,
                                                                              UINT32 ofs,
                                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "cfc_reg_FIFO_IPT_ERR_INT_REG_1_action_on_write_field_set", mask, ofs, value );
    cfc_action_on_write_field_set( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_1,
                                   mask,
                                   ofs,
                                   value);

}


#ifndef cfc_reg_FIFO_IPT_ERR_INT_REG_1_read
#define cfc_reg_FIFO_IPT_ERR_INT_REG_1_read( b, h ) \
       _cfc_reg_FIFO_IPT_ERR_INT_REG_1_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_FIFO_IPT_ERR_INT_REG_1_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_1);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_FIFO_IPT_ERR_INT_REG_1_read", reg_value);
    return reg_value;
}

#ifndef cfc_reg_FIFO_IPT_ERR_INT_REG_1_poll_bit
#define cfc_reg_FIFO_IPT_ERR_INT_REG_1_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _cfc_reg_FIFO_IPT_ERR_INT_REG_1_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _cfc_reg_FIFO_IPT_ERR_INT_REG_1_poll_bit( LOG_CALLER_DEFN
                                                                  cfc_buffer_t *b,
                                                                  cfc_handle_t *h,
                                                                  UINT32 mask,
                                                                  UINT32 value,
                                                                  UINT32 max_count,
                                                                  UINT32 *num_failed_polls,
                                                                  UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "cfc_reg_FIFO_IPT_ERR_INT_REG_1_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return cfc_poll_bit( b,
                         h,
                         MEM_TYPE_STATUS,
                         PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_1,
                         mask,
                         value,
                         max_count,
                         num_failed_polls,
                         delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_2
 *
 * Register: IPT Error Interrupt  2
 * Offset: 0x00000248 FIFO_IPT_ERR_INT_REG_2
 *
 * bits        31:0 default 00000000000000000000000000000000 IPT_ERR_I
 * field_bits  95:64
 * attribute: int_edge=rising
 * attribute: clk=dpi_clk
 */

#ifndef cfc_reg_FIFO_IPT_ERR_INT_REG_2_write
#define cfc_reg_FIFO_IPT_ERR_INT_REG_2_write( b, h, value ) \
       _cfc_reg_FIFO_IPT_ERR_INT_REG_2_write( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_reg_FIFO_IPT_ERR_INT_REG_2_write( LOG_CALLER_DEFN
                                                          cfc_buffer_t *b,
                                                          cfc_handle_t *h,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "cfc_reg_FIFO_IPT_ERR_INT_REG_2_write", value );
    cfc_reg_write( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_2,
                   value);
}


#ifndef cfc_reg_FIFO_IPT_ERR_INT_REG_2_action_on_write_field_set
#define cfc_reg_FIFO_IPT_ERR_INT_REG_2_action_on_write_field_set( b, h, mask, ofs, value ) \
       _cfc_reg_FIFO_IPT_ERR_INT_REG_2_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _cfc_reg_FIFO_IPT_ERR_INT_REG_2_action_on_write_field_set( LOG_CALLER_DEFN
                                                                              cfc_buffer_t *b,
                                                                              cfc_handle_t *h,
                                                                              UINT32 mask,
                                                                              UINT32 ofs,
                                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "cfc_reg_FIFO_IPT_ERR_INT_REG_2_action_on_write_field_set", mask, ofs, value );
    cfc_action_on_write_field_set( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_2,
                                   mask,
                                   ofs,
                                   value);

}


#ifndef cfc_reg_FIFO_IPT_ERR_INT_REG_2_read
#define cfc_reg_FIFO_IPT_ERR_INT_REG_2_read( b, h ) \
       _cfc_reg_FIFO_IPT_ERR_INT_REG_2_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_FIFO_IPT_ERR_INT_REG_2_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_2);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_FIFO_IPT_ERR_INT_REG_2_read", reg_value);
    return reg_value;
}

#ifndef cfc_reg_FIFO_IPT_ERR_INT_REG_2_poll_bit
#define cfc_reg_FIFO_IPT_ERR_INT_REG_2_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _cfc_reg_FIFO_IPT_ERR_INT_REG_2_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _cfc_reg_FIFO_IPT_ERR_INT_REG_2_poll_bit( LOG_CALLER_DEFN
                                                                  cfc_buffer_t *b,
                                                                  cfc_handle_t *h,
                                                                  UINT32 mask,
                                                                  UINT32 value,
                                                                  UINT32 max_count,
                                                                  UINT32 *num_failed_polls,
                                                                  UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "cfc_reg_FIFO_IPT_ERR_INT_REG_2_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return cfc_poll_bit( b,
                         h,
                         MEM_TYPE_STATUS,
                         PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_2,
                         mask,
                         value,
                         max_count,
                         num_failed_polls,
                         delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_3
 *
 * Register: IPT Error Interrupt  3
 * Offset: 0x0000024c FIFO_IPT_ERR_INT_REG_3
 *
 * bits        31:0 default 00000000000000000000000000000000 IPT_ERR_I
 * field_bits  127:96
 * attribute: int_edge=rising
 * attribute: clk=dpi_clk
 */

#ifndef cfc_reg_FIFO_IPT_ERR_INT_REG_3_write
#define cfc_reg_FIFO_IPT_ERR_INT_REG_3_write( b, h, value ) \
       _cfc_reg_FIFO_IPT_ERR_INT_REG_3_write( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_reg_FIFO_IPT_ERR_INT_REG_3_write( LOG_CALLER_DEFN
                                                          cfc_buffer_t *b,
                                                          cfc_handle_t *h,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "cfc_reg_FIFO_IPT_ERR_INT_REG_3_write", value );
    cfc_reg_write( b,
                   h,
                   MEM_TYPE_STATUS,
                   PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_3,
                   value);
}


#ifndef cfc_reg_FIFO_IPT_ERR_INT_REG_3_action_on_write_field_set
#define cfc_reg_FIFO_IPT_ERR_INT_REG_3_action_on_write_field_set( b, h, mask, ofs, value ) \
       _cfc_reg_FIFO_IPT_ERR_INT_REG_3_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _cfc_reg_FIFO_IPT_ERR_INT_REG_3_action_on_write_field_set( LOG_CALLER_DEFN
                                                                              cfc_buffer_t *b,
                                                                              cfc_handle_t *h,
                                                                              UINT32 mask,
                                                                              UINT32 ofs,
                                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "cfc_reg_FIFO_IPT_ERR_INT_REG_3_action_on_write_field_set", mask, ofs, value );
    cfc_action_on_write_field_set( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_3,
                                   mask,
                                   ofs,
                                   value);

}


#ifndef cfc_reg_FIFO_IPT_ERR_INT_REG_3_read
#define cfc_reg_FIFO_IPT_ERR_INT_REG_3_read( b, h ) \
       _cfc_reg_FIFO_IPT_ERR_INT_REG_3_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_FIFO_IPT_ERR_INT_REG_3_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_3);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_FIFO_IPT_ERR_INT_REG_3_read", reg_value);
    return reg_value;
}

#ifndef cfc_reg_FIFO_IPT_ERR_INT_REG_3_poll_bit
#define cfc_reg_FIFO_IPT_ERR_INT_REG_3_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _cfc_reg_FIFO_IPT_ERR_INT_REG_3_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _cfc_reg_FIFO_IPT_ERR_INT_REG_3_poll_bit( LOG_CALLER_DEFN
                                                                  cfc_buffer_t *b,
                                                                  cfc_handle_t *h,
                                                                  UINT32 mask,
                                                                  UINT32 value,
                                                                  UINT32 max_count,
                                                                  UINT32 *num_failed_polls,
                                                                  UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "cfc_reg_FIFO_IPT_ERR_INT_REG_3_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return cfc_poll_bit( b,
                         h,
                         MEM_TYPE_STATUS,
                         PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_3,
                         mask,
                         value,
                         max_count,
                         num_failed_polls,
                         delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_CFC_REG_FIFO_CFG_STAT
 *
 * Register: FIFO End Address Change Status
 * Offset: 0x000000a4 FIFO_CFG_STAT
 *
 * bits 0 default 0 FIFO_END_ADDR_CHG_SUCCESS
 */

#ifndef cfc_reg_FIFO_CFG_STAT_read
#define cfc_reg_FIFO_CFG_STAT_read( b, h ) \
       _cfc_reg_FIFO_CFG_STAT_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_FIFO_CFG_STAT_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_CFC_REG_FIFO_CFG_STAT);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_FIFO_CFG_STAT_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_CFC_REG_DBG_RDATA
 *
 * Register: Debug Interface Read Data
 * Offset: 0x00000104 DBG_RDATA
 *
 * bits 31:0 default 0x0000 DBG_RDATA
 */

#ifndef cfc_reg_DBG_RDATA_read
#define cfc_reg_DBG_RDATA_read( b, h ) \
       _cfc_reg_DBG_RDATA_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_reg_DBG_RDATA_read( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_CFC_REG_DBG_RDATA);

    IOLOG( "%s -> 0x%08x;", "cfc_reg_DBG_RDATA_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_CFC_REG_FIFO_STAT
 *
 * Register: FIFO Empty/Full Status
 * Offset: (0x00000800 + (N) * 0x4) FIFO_STAT
 *
 * bits 8 default 0 FIFO_EMPTY
 *
 * bits 0 default 0 FIFO_FULL
 */

#ifndef cfc_reg_FIFO_STAT_array_read
#define cfc_reg_FIFO_STAT_array_read( b, h, N ) \
       _cfc_reg_FIFO_STAT_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _cfc_reg_FIFO_STAT_array_read( LOG_CALLER_DEFN
                                                    cfc_buffer_t *b,
                                                    cfc_handle_t *h,
                                                    UINT32  N )
{
    UINT32 reg_value;

    reg_value = cfc_reg_read( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_CFC_REG_FIFO_STAT(N));

    IOLOG( "%s -> 0x%08x; N=%d", "cfc_reg_FIFO_STAT_array_read", reg_value, N);
    return reg_value;
}

/*
 * ==================================================================================
 *                  Parameter Access Functions for Paramset config
 * ==================================================================================
 */

#ifndef cfc_lfield_FIFO_CLRB_set
#define cfc_lfield_FIFO_CLRB_set( b, h, value ) \
       _cfc_lfield_FIFO_CLRB_set( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_lfield_FIFO_CLRB_set( LOG_CALLER_DEFN
                                              cfc_buffer_t *b,
                                              cfc_handle_t *h,
                                              UINT32 value[4] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x 0x%08x", "cfc_lfield_FIFO_CLRB_set", value[3] , value[2] , value[1] , value[0] );

    /* (0x00000000 bits 31:0) bits 0:31 use field FIFO_CLRB of register PMC_CFC_REG_FIFO_CLRB_0 */
    _cfc_reg_FIFO_CLRB_0_field_set( LOG_CALLER_ARGS
                                    b,
                                    h,
                                    CFC_REG_FIFO_CLRB_0_BIT_FIFO_CLRB_MSK,
                                    CFC_REG_FIFO_CLRB_0_BIT_FIFO_CLRB_OFF,
                                    (value[0] & 0xffffffff));

    /* (0x00000004 bits 31:0) bits 32:63 use field FIFO_CLRB of register PMC_CFC_REG_FIFO_CLRB_1 */
    _cfc_reg_FIFO_CLRB_1_field_set( LOG_CALLER_ARGS
                                    b,
                                    h,
                                    CFC_REG_FIFO_CLRB_1_BIT_FIFO_CLRB_MSK,
                                    CFC_REG_FIFO_CLRB_1_BIT_FIFO_CLRB_OFF,
                                    (value[1] & 0xffffffff));

    /* (0x00000008 bits 31:0) bits 64:95 use field FIFO_CLRB of register PMC_CFC_REG_FIFO_CLRB_2 */
    _cfc_reg_FIFO_CLRB_2_field_set( LOG_CALLER_ARGS
                                    b,
                                    h,
                                    CFC_REG_FIFO_CLRB_2_BIT_FIFO_CLRB_MSK,
                                    CFC_REG_FIFO_CLRB_2_BIT_FIFO_CLRB_OFF,
                                    (value[2] & 0xffffffff));

    /* (0x00000010 bits 31:0) bits 96:127 use field FIFO_CLRB of register PMC_CFC_REG_FIFO_CLRB_3 */
    _cfc_reg_FIFO_CLRB_3_field_set( LOG_CALLER_ARGS
                                    b,
                                    h,
                                    CFC_REG_FIFO_CLRB_3_BIT_FIFO_CLRB_MSK,
                                    CFC_REG_FIFO_CLRB_3_BIT_FIFO_CLRB_OFF,
                                    (value[3] & 0xffffffff));
}


#ifndef cfc_lfield_FIFO_CLRB_get
#define cfc_lfield_FIFO_CLRB_get( b, h, value ) \
       _cfc_lfield_FIFO_CLRB_get( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_lfield_FIFO_CLRB_get( LOG_CALLER_DEFN
                                              cfc_buffer_t *b,
                                              cfc_handle_t *h,
                                              UINT32 value[4] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<4;i++)
        value[i] = 0;

    /* (0x00000000 bits 31:0) bits 0:31 use field FIFO_CLRB of register PMC_CFC_REG_FIFO_CLRB_0 */
    reg_value = _cfc_reg_FIFO_CLRB_0_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & CFC_REG_FIFO_CLRB_0_BIT_FIFO_CLRB_MSK) >> CFC_REG_FIFO_CLRB_0_BIT_FIFO_CLRB_OFF;
    value[0] |= field_value;

    /* (0x00000004 bits 31:0) bits 32:63 use field FIFO_CLRB of register PMC_CFC_REG_FIFO_CLRB_1 */
    reg_value = _cfc_reg_FIFO_CLRB_1_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & CFC_REG_FIFO_CLRB_1_BIT_FIFO_CLRB_MSK) >> CFC_REG_FIFO_CLRB_1_BIT_FIFO_CLRB_OFF;
    value[1] |= field_value;

    /* (0x00000008 bits 31:0) bits 64:95 use field FIFO_CLRB of register PMC_CFC_REG_FIFO_CLRB_2 */
    reg_value = _cfc_reg_FIFO_CLRB_2_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & CFC_REG_FIFO_CLRB_2_BIT_FIFO_CLRB_MSK) >> CFC_REG_FIFO_CLRB_2_BIT_FIFO_CLRB_OFF;
    value[2] |= field_value;

    /* (0x00000010 bits 31:0) bits 96:127 use field FIFO_CLRB of register PMC_CFC_REG_FIFO_CLRB_3 */
    reg_value = _cfc_reg_FIFO_CLRB_3_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & CFC_REG_FIFO_CLRB_3_BIT_FIFO_CLRB_MSK) >> CFC_REG_FIFO_CLRB_3_BIT_FIFO_CLRB_OFF;
    value[3] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x 0x%08x", "cfc_lfield_FIFO_CLRB_get", value[3] , value[2] , value[1] , value[0] );

}

#ifndef cfc_lfield_range_FIFO_CLRB_set
#define cfc_lfield_range_FIFO_CLRB_set( b, h, start_bit, stop_bit, value ) \
       _cfc_lfield_range_FIFO_CLRB_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _cfc_lfield_range_FIFO_CLRB_set( LOG_CALLER_DEFN
                                                    cfc_buffer_t *b,
                                                    cfc_handle_t *h,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit,
                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "cfc_lfield_range_FIFO_CLRB_set", stop_bit, start_bit );
    if (stop_bit > 127) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "cfc_lfield_range_FIFO_CLRB_set", stop_bit, 127 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "cfc_lfield_range_FIFO_CLRB_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000000 bits 31:0) bits 0:31 use field FIFO_CLRB of register PMC_CFC_REG_FIFO_CLRB_0 */
    if ((start_bit <= 31)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000000 bits 31:0) bits 0:31 use field FIFO_CLRB of register PMC_CFC_REG_FIFO_CLRB_0 */
        _cfc_reg_FIFO_CLRB_0_field_set( LOG_CALLER_ARGS
                                        b,
                                        h,
                                        subfield_mask << (CFC_REG_FIFO_CLRB_0_BIT_FIFO_CLRB_OFF + subfield_offset),
                                        CFC_REG_FIFO_CLRB_0_BIT_FIFO_CLRB_OFF + subfield_offset,
                                        value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000004 bits 31:0) bits 32:63 use field FIFO_CLRB of register PMC_CFC_REG_FIFO_CLRB_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000004 bits 31:0) bits 32:63 use field FIFO_CLRB of register PMC_CFC_REG_FIFO_CLRB_1 */
        _cfc_reg_FIFO_CLRB_1_field_set( LOG_CALLER_ARGS
                                        b,
                                        h,
                                        subfield_mask << (CFC_REG_FIFO_CLRB_1_BIT_FIFO_CLRB_OFF + subfield_offset),
                                        CFC_REG_FIFO_CLRB_1_BIT_FIFO_CLRB_OFF + subfield_offset,
                                        value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000008 bits 31:0) bits 64:95 use field FIFO_CLRB of register PMC_CFC_REG_FIFO_CLRB_2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000008 bits 31:0) bits 64:95 use field FIFO_CLRB of register PMC_CFC_REG_FIFO_CLRB_2 */
        _cfc_reg_FIFO_CLRB_2_field_set( LOG_CALLER_ARGS
                                        b,
                                        h,
                                        subfield_mask << (CFC_REG_FIFO_CLRB_2_BIT_FIFO_CLRB_OFF + subfield_offset),
                                        CFC_REG_FIFO_CLRB_2_BIT_FIFO_CLRB_OFF + subfield_offset,
                                        value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000010 bits 31:0) bits 96:127 use field FIFO_CLRB of register PMC_CFC_REG_FIFO_CLRB_3 */
    if ((start_bit <= 127) && (stop_bit >= 96)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 96) {
            subfield_offset = start_bit - 96;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  96 - start_bit;
            subfield_start_bit = 96;
        }
        if (stop_bit < 127) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 127;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000010 bits 31:0) bits 96:127 use field FIFO_CLRB of register PMC_CFC_REG_FIFO_CLRB_3 */
        _cfc_reg_FIFO_CLRB_3_field_set( LOG_CALLER_ARGS
                                        b,
                                        h,
                                        subfield_mask << (CFC_REG_FIFO_CLRB_3_BIT_FIFO_CLRB_OFF + subfield_offset),
                                        CFC_REG_FIFO_CLRB_3_BIT_FIFO_CLRB_OFF + subfield_offset,
                                        value >> subfield_shift);
    }
}


#ifndef cfc_lfield_range_FIFO_CLRB_get
#define cfc_lfield_range_FIFO_CLRB_get( b, h, start_bit, stop_bit ) \
       _cfc_lfield_range_FIFO_CLRB_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _cfc_lfield_range_FIFO_CLRB_get( LOG_CALLER_DEFN
                                                      cfc_buffer_t *b,
                                                      cfc_handle_t *h,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "cfc_lfield_range_FIFO_CLRB_get", stop_bit, start_bit );
    if (stop_bit > 127) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "cfc_lfield_range_FIFO_CLRB_get", stop_bit, 127 );
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000000 bits 31:0) bits 0:31 use field FIFO_CLRB of register PMC_CFC_REG_FIFO_CLRB_0 */
        reg_value = _cfc_reg_FIFO_CLRB_0_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & CFC_REG_FIFO_CLRB_0_BIT_FIFO_CLRB_MSK)
                      >> CFC_REG_FIFO_CLRB_0_BIT_FIFO_CLRB_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_FIFO_CLRB_0_BIT_FIFO_CLRB_MSK, CFC_REG_FIFO_CLRB_0_BIT_FIFO_CLRB_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000004 bits 31:0) bits 32:63 use field FIFO_CLRB of register PMC_CFC_REG_FIFO_CLRB_1 */
        reg_value = _cfc_reg_FIFO_CLRB_1_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & CFC_REG_FIFO_CLRB_1_BIT_FIFO_CLRB_MSK)
                      >> CFC_REG_FIFO_CLRB_1_BIT_FIFO_CLRB_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_FIFO_CLRB_1_BIT_FIFO_CLRB_MSK, CFC_REG_FIFO_CLRB_1_BIT_FIFO_CLRB_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000008 bits 31:0) bits 64:95 use field FIFO_CLRB of register PMC_CFC_REG_FIFO_CLRB_2 */
        reg_value = _cfc_reg_FIFO_CLRB_2_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & CFC_REG_FIFO_CLRB_2_BIT_FIFO_CLRB_MSK)
                      >> CFC_REG_FIFO_CLRB_2_BIT_FIFO_CLRB_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_FIFO_CLRB_2_BIT_FIFO_CLRB_MSK, CFC_REG_FIFO_CLRB_2_BIT_FIFO_CLRB_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 127) && (stop_bit >= 96)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 96) {
            subfield_offset = start_bit - 96;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 96 - start_bit;
            subfield_start_bit = 96;
        }
        if (stop_bit < 127) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 127;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000010 bits 31:0) bits 96:127 use field FIFO_CLRB of register PMC_CFC_REG_FIFO_CLRB_3 */
        reg_value = _cfc_reg_FIFO_CLRB_3_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & CFC_REG_FIFO_CLRB_3_BIT_FIFO_CLRB_MSK)
                      >> CFC_REG_FIFO_CLRB_3_BIT_FIFO_CLRB_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_FIFO_CLRB_3_BIT_FIFO_CLRB_MSK, CFC_REG_FIFO_CLRB_3_BIT_FIFO_CLRB_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "cfc_lfield_range_FIFO_CLRB_get", start_bit, stop_bit, value );

    return value;
}

#ifndef cfc_field_IPT_BYPASS_set
#define cfc_field_IPT_BYPASS_set( b, h, value ) \
       _cfc_field_IPT_BYPASS_set( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_field_IPT_BYPASS_set( LOG_CALLER_DEFN
                                              cfc_buffer_t *b,
                                              cfc_handle_t *h,
                                              UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "cfc_field_IPT_BYPASS_set", value, 1);
    IOLOG( "%s <= 0x%08x", "cfc_field_IPT_BYPASS_set", value );

    /* (0x00000080 bits 16) field IPT_BYPASS of register PMC_CFC_REG_FIFO_IPT_BYPASS */
    _cfc_reg_FIFO_IPT_BYPASS_field_set( LOG_CALLER_ARGS
                                        b,
                                        h,
                                        CFC_REG_FIFO_IPT_BYPASS_BIT_IPT_BYPASS_MSK,
                                        CFC_REG_FIFO_IPT_BYPASS_BIT_IPT_BYPASS_OFF,
                                        value);
}


#ifndef cfc_field_IPT_BYPASS_get
#define cfc_field_IPT_BYPASS_get( b, h ) \
       _cfc_field_IPT_BYPASS_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_field_IPT_BYPASS_get( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000080 bits 16) field IPT_BYPASS of register PMC_CFC_REG_FIFO_IPT_BYPASS */
    reg_value = _cfc_reg_FIFO_IPT_BYPASS_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & CFC_REG_FIFO_IPT_BYPASS_BIT_IPT_BYPASS_MSK) >> CFC_REG_FIFO_IPT_BYPASS_BIT_IPT_BYPASS_OFF;
    IOLOG( "%s -> 0x%08x", "cfc_field_IPT_BYPASS_get", value );

    return value;
}

#ifndef cfc_field_IPT_PAGE_MASK_set
#define cfc_field_IPT_PAGE_MASK_set( b, h, value ) \
       _cfc_field_IPT_PAGE_MASK_set( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_field_IPT_PAGE_MASK_set( LOG_CALLER_DEFN
                                                 cfc_buffer_t *b,
                                                 cfc_handle_t *h,
                                                 UINT32 value )
{
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "cfc_field_IPT_PAGE_MASK_set", value, 65535);
    IOLOG( "%s <= 0x%08x", "cfc_field_IPT_PAGE_MASK_set", value );

    /* (0x00000084 bits 15:0) field IPT_PAGE_MASK of register PMC_CFC_REG_FIFO_IPT_MASK_CFC */
    _cfc_reg_FIFO_IPT_MASK_CFC_field_set( LOG_CALLER_ARGS
                                          b,
                                          h,
                                          CFC_REG_FIFO_IPT_MASK_CFC_BIT_IPT_PAGE_MASK_MSK,
                                          CFC_REG_FIFO_IPT_MASK_CFC_BIT_IPT_PAGE_MASK_OFF,
                                          value);
}


#ifndef cfc_field_IPT_PAGE_MASK_get
#define cfc_field_IPT_PAGE_MASK_get( b, h ) \
       _cfc_field_IPT_PAGE_MASK_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_field_IPT_PAGE_MASK_get( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000084 bits 15:0) field IPT_PAGE_MASK of register PMC_CFC_REG_FIFO_IPT_MASK_CFC */
    reg_value = _cfc_reg_FIFO_IPT_MASK_CFC_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & CFC_REG_FIFO_IPT_MASK_CFC_BIT_IPT_PAGE_MASK_MSK) >> CFC_REG_FIFO_IPT_MASK_CFC_BIT_IPT_PAGE_MASK_OFF;
    IOLOG( "%s -> 0x%08x", "cfc_field_IPT_PAGE_MASK_get", value );

    return value;
}

#ifndef cfc_field_range_IPT_PAGE_MASK_set
#define cfc_field_range_IPT_PAGE_MASK_set( b, h, start_bit, stop_bit, value ) \
       _cfc_field_range_IPT_PAGE_MASK_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _cfc_field_range_IPT_PAGE_MASK_set( LOG_CALLER_DEFN
                                                       cfc_buffer_t *b,
                                                       cfc_handle_t *h,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "cfc_field_range_IPT_PAGE_MASK_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "cfc_field_range_IPT_PAGE_MASK_set", stop_bit, 15 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "cfc_field_range_IPT_PAGE_MASK_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000084 bits 15:0) field IPT_PAGE_MASK of register PMC_CFC_REG_FIFO_IPT_MASK_CFC */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000084 bits 15:0) field IPT_PAGE_MASK of register PMC_CFC_REG_FIFO_IPT_MASK_CFC */
        _cfc_reg_FIFO_IPT_MASK_CFC_field_set( LOG_CALLER_ARGS
                                              b,
                                              h,
                                              subfield_mask << (CFC_REG_FIFO_IPT_MASK_CFC_BIT_IPT_PAGE_MASK_OFF + subfield_offset),
                                              CFC_REG_FIFO_IPT_MASK_CFC_BIT_IPT_PAGE_MASK_OFF + subfield_offset,
                                              value >> subfield_shift);
    }
}


#ifndef cfc_field_range_IPT_PAGE_MASK_get
#define cfc_field_range_IPT_PAGE_MASK_get( b, h, start_bit, stop_bit ) \
       _cfc_field_range_IPT_PAGE_MASK_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _cfc_field_range_IPT_PAGE_MASK_get( LOG_CALLER_DEFN
                                                         cfc_buffer_t *b,
                                                         cfc_handle_t *h,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "cfc_field_range_IPT_PAGE_MASK_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "cfc_field_range_IPT_PAGE_MASK_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000084 bits 15:0) field IPT_PAGE_MASK of register PMC_CFC_REG_FIFO_IPT_MASK_CFC */
    reg_value = _cfc_reg_FIFO_IPT_MASK_CFC_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & CFC_REG_FIFO_IPT_MASK_CFC_BIT_IPT_PAGE_MASK_MSK)
                  >> CFC_REG_FIFO_IPT_MASK_CFC_BIT_IPT_PAGE_MASK_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_FIFO_IPT_MASK_CFC_BIT_IPT_PAGE_MASK_MSK, CFC_REG_FIFO_IPT_MASK_CFC_BIT_IPT_PAGE_MASK_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "cfc_field_range_IPT_PAGE_MASK_get", start_bit, stop_bit, value );

    return value;
}

#ifndef cfc_field_FIFO_END_ADDR_CHG_ID_set
#define cfc_field_FIFO_END_ADDR_CHG_ID_set( b, h, value ) \
       _cfc_field_FIFO_END_ADDR_CHG_ID_set( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_field_FIFO_END_ADDR_CHG_ID_set( LOG_CALLER_DEFN
                                                        cfc_buffer_t *b,
                                                        cfc_handle_t *h,
                                                        UINT32 value )
{
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "cfc_field_FIFO_END_ADDR_CHG_ID_set", value, 127);
    IOLOG( "%s <= 0x%08x", "cfc_field_FIFO_END_ADDR_CHG_ID_set", value );

    /* (0x000000a0 bits 22:16) field FIFO_END_ADDR_CHG_ID of register PMC_CFC_REG_FIFO_CFG */
    _cfc_reg_FIFO_CFG_field_set( LOG_CALLER_ARGS
                                 b,
                                 h,
                                 CFC_REG_FIFO_CFG_BIT_FIFO_END_ADDR_CHG_ID_MSK,
                                 CFC_REG_FIFO_CFG_BIT_FIFO_END_ADDR_CHG_ID_OFF,
                                 value);
}


#ifndef cfc_field_FIFO_END_ADDR_CHG_ID_get
#define cfc_field_FIFO_END_ADDR_CHG_ID_get( b, h ) \
       _cfc_field_FIFO_END_ADDR_CHG_ID_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_field_FIFO_END_ADDR_CHG_ID_get( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000a0 bits 22:16) field FIFO_END_ADDR_CHG_ID of register PMC_CFC_REG_FIFO_CFG */
    reg_value = _cfc_reg_FIFO_CFG_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & CFC_REG_FIFO_CFG_BIT_FIFO_END_ADDR_CHG_ID_MSK) >> CFC_REG_FIFO_CFG_BIT_FIFO_END_ADDR_CHG_ID_OFF;
    IOLOG( "%s -> 0x%08x", "cfc_field_FIFO_END_ADDR_CHG_ID_get", value );

    return value;
}

#ifndef cfc_field_range_FIFO_END_ADDR_CHG_ID_set
#define cfc_field_range_FIFO_END_ADDR_CHG_ID_set( b, h, start_bit, stop_bit, value ) \
       _cfc_field_range_FIFO_END_ADDR_CHG_ID_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _cfc_field_range_FIFO_END_ADDR_CHG_ID_set( LOG_CALLER_DEFN
                                                              cfc_buffer_t *b,
                                                              cfc_handle_t *h,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "cfc_field_range_FIFO_END_ADDR_CHG_ID_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "cfc_field_range_FIFO_END_ADDR_CHG_ID_set", stop_bit, 6 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "cfc_field_range_FIFO_END_ADDR_CHG_ID_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000000a0 bits 22:16) field FIFO_END_ADDR_CHG_ID of register PMC_CFC_REG_FIFO_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 16) {
            subfield_offset = start_bit - 16;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  16 - start_bit;
            subfield_start_bit = 16;
        }
        if (stop_bit < 22) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 22;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000a0 bits 22:16) field FIFO_END_ADDR_CHG_ID of register PMC_CFC_REG_FIFO_CFG */
        _cfc_reg_FIFO_CFG_field_set( LOG_CALLER_ARGS
                                     b,
                                     h,
                                     subfield_mask << (CFC_REG_FIFO_CFG_BIT_FIFO_END_ADDR_CHG_ID_OFF + subfield_offset),
                                     CFC_REG_FIFO_CFG_BIT_FIFO_END_ADDR_CHG_ID_OFF + subfield_offset,
                                     value >> subfield_shift);
    }
}


#ifndef cfc_field_range_FIFO_END_ADDR_CHG_ID_get
#define cfc_field_range_FIFO_END_ADDR_CHG_ID_get( b, h, start_bit, stop_bit ) \
       _cfc_field_range_FIFO_END_ADDR_CHG_ID_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _cfc_field_range_FIFO_END_ADDR_CHG_ID_get( LOG_CALLER_DEFN
                                                                cfc_buffer_t *b,
                                                                cfc_handle_t *h,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "cfc_field_range_FIFO_END_ADDR_CHG_ID_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "cfc_field_range_FIFO_END_ADDR_CHG_ID_get", stop_bit, 6 );
    if (start_bit > 16) {
        subfield_offset = start_bit - 16;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 16 - start_bit;
        subfield_start_bit = 16;
    }
    if (stop_bit < 22) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 22;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000a0 bits 22:16) field FIFO_END_ADDR_CHG_ID of register PMC_CFC_REG_FIFO_CFG */
    reg_value = _cfc_reg_FIFO_CFG_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & CFC_REG_FIFO_CFG_BIT_FIFO_END_ADDR_CHG_ID_MSK)
                  >> CFC_REG_FIFO_CFG_BIT_FIFO_END_ADDR_CHG_ID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_FIFO_CFG_BIT_FIFO_END_ADDR_CHG_ID_MSK, CFC_REG_FIFO_CFG_BIT_FIFO_END_ADDR_CHG_ID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "cfc_field_range_FIFO_END_ADDR_CHG_ID_get", start_bit, stop_bit, value );

    return value;
}

#ifndef cfc_field_FIFO_END_ADDR_set
#define cfc_field_FIFO_END_ADDR_set( b, h, value ) \
       _cfc_field_FIFO_END_ADDR_set( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_field_FIFO_END_ADDR_set( LOG_CALLER_DEFN
                                                 cfc_buffer_t *b,
                                                 cfc_handle_t *h,
                                                 UINT32 value )
{
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "cfc_field_FIFO_END_ADDR_set", value, 65535);
    IOLOG( "%s <= 0x%08x", "cfc_field_FIFO_END_ADDR_set", value );

    /* (0x000000a8 bits 15:0) field FIFO_END_ADDR of register PMC_CFC_REG_FIFO_CFG_VAL */
    _cfc_reg_FIFO_CFG_VAL_field_set( LOG_CALLER_ARGS
                                     b,
                                     h,
                                     CFC_REG_FIFO_CFG_VAL_BIT_FIFO_END_ADDR_MSK,
                                     CFC_REG_FIFO_CFG_VAL_BIT_FIFO_END_ADDR_OFF,
                                     value);
}


#ifndef cfc_field_FIFO_END_ADDR_get
#define cfc_field_FIFO_END_ADDR_get( b, h ) \
       _cfc_field_FIFO_END_ADDR_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_field_FIFO_END_ADDR_get( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000a8 bits 15:0) field FIFO_END_ADDR of register PMC_CFC_REG_FIFO_CFG_VAL */
    reg_value = _cfc_reg_FIFO_CFG_VAL_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & CFC_REG_FIFO_CFG_VAL_BIT_FIFO_END_ADDR_MSK) >> CFC_REG_FIFO_CFG_VAL_BIT_FIFO_END_ADDR_OFF;
    IOLOG( "%s -> 0x%08x", "cfc_field_FIFO_END_ADDR_get", value );

    return value;
}

#ifndef cfc_field_range_FIFO_END_ADDR_set
#define cfc_field_range_FIFO_END_ADDR_set( b, h, start_bit, stop_bit, value ) \
       _cfc_field_range_FIFO_END_ADDR_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _cfc_field_range_FIFO_END_ADDR_set( LOG_CALLER_DEFN
                                                       cfc_buffer_t *b,
                                                       cfc_handle_t *h,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "cfc_field_range_FIFO_END_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "cfc_field_range_FIFO_END_ADDR_set", stop_bit, 15 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "cfc_field_range_FIFO_END_ADDR_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000000a8 bits 15:0) field FIFO_END_ADDR of register PMC_CFC_REG_FIFO_CFG_VAL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000000a8 bits 15:0) field FIFO_END_ADDR of register PMC_CFC_REG_FIFO_CFG_VAL */
        _cfc_reg_FIFO_CFG_VAL_field_set( LOG_CALLER_ARGS
                                         b,
                                         h,
                                         subfield_mask << (CFC_REG_FIFO_CFG_VAL_BIT_FIFO_END_ADDR_OFF + subfield_offset),
                                         CFC_REG_FIFO_CFG_VAL_BIT_FIFO_END_ADDR_OFF + subfield_offset,
                                         value >> subfield_shift);
    }
}


#ifndef cfc_field_range_FIFO_END_ADDR_get
#define cfc_field_range_FIFO_END_ADDR_get( b, h, start_bit, stop_bit ) \
       _cfc_field_range_FIFO_END_ADDR_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _cfc_field_range_FIFO_END_ADDR_get( LOG_CALLER_DEFN
                                                         cfc_buffer_t *b,
                                                         cfc_handle_t *h,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "cfc_field_range_FIFO_END_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "cfc_field_range_FIFO_END_ADDR_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000000a8 bits 15:0) field FIFO_END_ADDR of register PMC_CFC_REG_FIFO_CFG_VAL */
    reg_value = _cfc_reg_FIFO_CFG_VAL_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & CFC_REG_FIFO_CFG_VAL_BIT_FIFO_END_ADDR_MSK)
                  >> CFC_REG_FIFO_CFG_VAL_BIT_FIFO_END_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_FIFO_CFG_VAL_BIT_FIFO_END_ADDR_MSK, CFC_REG_FIFO_CFG_VAL_BIT_FIFO_END_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "cfc_field_range_FIFO_END_ADDR_get", start_bit, stop_bit, value );

    return value;
}

#ifndef cfc_field_DBG_RADDR_set
#define cfc_field_DBG_RADDR_set( b, h, value ) \
       _cfc_field_DBG_RADDR_set( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_field_DBG_RADDR_set( LOG_CALLER_DEFN
                                             cfc_buffer_t *b,
                                             cfc_handle_t *h,
                                             UINT32 value )
{
    if (value > 2047)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "cfc_field_DBG_RADDR_set", value, 2047);
    IOLOG( "%s <= 0x%08x", "cfc_field_DBG_RADDR_set", value );

    /* (0x00000100 bits 10:0) field DBG_RADDR of register PMC_CFC_REG_DBG_CTRL */
    _cfc_reg_DBG_CTRL_field_set( LOG_CALLER_ARGS
                                 b,
                                 h,
                                 CFC_REG_DBG_CTRL_BIT_DBG_RADDR_MSK,
                                 CFC_REG_DBG_CTRL_BIT_DBG_RADDR_OFF,
                                 value);
}


#ifndef cfc_field_DBG_RADDR_get
#define cfc_field_DBG_RADDR_get( b, h ) \
       _cfc_field_DBG_RADDR_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_field_DBG_RADDR_get( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000100 bits 10:0) field DBG_RADDR of register PMC_CFC_REG_DBG_CTRL */
    reg_value = _cfc_reg_DBG_CTRL_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & CFC_REG_DBG_CTRL_BIT_DBG_RADDR_MSK) >> CFC_REG_DBG_CTRL_BIT_DBG_RADDR_OFF;
    IOLOG( "%s -> 0x%08x", "cfc_field_DBG_RADDR_get", value );

    return value;
}

#ifndef cfc_field_range_DBG_RADDR_set
#define cfc_field_range_DBG_RADDR_set( b, h, start_bit, stop_bit, value ) \
       _cfc_field_range_DBG_RADDR_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _cfc_field_range_DBG_RADDR_set( LOG_CALLER_DEFN
                                                   cfc_buffer_t *b,
                                                   cfc_handle_t *h,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit,
                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "cfc_field_range_DBG_RADDR_set", stop_bit, start_bit );
    if (stop_bit > 10) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "cfc_field_range_DBG_RADDR_set", stop_bit, 10 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "cfc_field_range_DBG_RADDR_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000100 bits 10:0) field DBG_RADDR of register PMC_CFC_REG_DBG_CTRL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 10) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 10;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000100 bits 10:0) field DBG_RADDR of register PMC_CFC_REG_DBG_CTRL */
        _cfc_reg_DBG_CTRL_field_set( LOG_CALLER_ARGS
                                     b,
                                     h,
                                     subfield_mask << (CFC_REG_DBG_CTRL_BIT_DBG_RADDR_OFF + subfield_offset),
                                     CFC_REG_DBG_CTRL_BIT_DBG_RADDR_OFF + subfield_offset,
                                     value >> subfield_shift);
    }
}


#ifndef cfc_field_range_DBG_RADDR_get
#define cfc_field_range_DBG_RADDR_get( b, h, start_bit, stop_bit ) \
       _cfc_field_range_DBG_RADDR_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _cfc_field_range_DBG_RADDR_get( LOG_CALLER_DEFN
                                                     cfc_buffer_t *b,
                                                     cfc_handle_t *h,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "cfc_field_range_DBG_RADDR_get", stop_bit, start_bit );
    if (stop_bit > 10) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "cfc_field_range_DBG_RADDR_get", stop_bit, 10 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 10) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 10;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000100 bits 10:0) field DBG_RADDR of register PMC_CFC_REG_DBG_CTRL */
    reg_value = _cfc_reg_DBG_CTRL_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & CFC_REG_DBG_CTRL_BIT_DBG_RADDR_MSK)
                  >> CFC_REG_DBG_CTRL_BIT_DBG_RADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_DBG_CTRL_BIT_DBG_RADDR_MSK, CFC_REG_DBG_CTRL_BIT_DBG_RADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "cfc_field_range_DBG_RADDR_get", start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 *             Parameter Access Functions for Paramset config_N_size128
 * ==================================================================================
 */

#ifndef cfc_field_IPT_VALID_set
#define cfc_field_IPT_VALID_set( b, h, N, value ) \
       _cfc_field_IPT_VALID_set( LOG_CALLER b, h, N, value )
#endif
static INLINE void _cfc_field_IPT_VALID_set( LOG_CALLER_DEFN
                                             cfc_buffer_t *b,
                                             cfc_handle_t *h,
                                             UINT32  N,
                                             UINT32 value )
{
    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "cfc_field_IPT_VALID_set", N, 127);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "cfc_field_IPT_VALID_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "cfc_field_IPT_VALID_set", N, value );

    /* ((0x00000400 + (N) * 0x04) bits 24) field IPT_VALID of register PMC_CFC_REG_FIFO_IPT index N=0..127 */
    _cfc_reg_FIFO_IPT_array_field_set( LOG_CALLER_ARGS
                                       b,
                                       h,
                                       N,
                                       CFC_REG_FIFO_IPT_BIT_IPT_VALID_MSK,
                                       CFC_REG_FIFO_IPT_BIT_IPT_VALID_OFF,
                                       value);
}


#ifndef cfc_field_IPT_VALID_get
#define cfc_field_IPT_VALID_get( b, h, N ) \
       _cfc_field_IPT_VALID_get( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _cfc_field_IPT_VALID_get( LOG_CALLER_DEFN
                                               cfc_buffer_t *b,
                                               cfc_handle_t *h,
                                               UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "cfc_field_IPT_VALID_get", N, 127);
    /* ((0x00000400 + (N) * 0x04) bits 24) field IPT_VALID of register PMC_CFC_REG_FIFO_IPT index N=0..127 */
    reg_value = _cfc_reg_FIFO_IPT_array_read( LOG_CALLER_ARGS b, h, N);
    value = (reg_value & CFC_REG_FIFO_IPT_BIT_IPT_VALID_MSK) >> CFC_REG_FIFO_IPT_BIT_IPT_VALID_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "cfc_field_IPT_VALID_get", N, value );

    return value;
}

#ifndef cfc_field_IPT_ID_set
#define cfc_field_IPT_ID_set( b, h, N, value ) \
       _cfc_field_IPT_ID_set( LOG_CALLER b, h, N, value )
#endif
static INLINE void _cfc_field_IPT_ID_set( LOG_CALLER_DEFN
                                          cfc_buffer_t *b,
                                          cfc_handle_t *h,
                                          UINT32  N,
                                          UINT32 value )
{
    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "cfc_field_IPT_ID_set", N, 127);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "cfc_field_IPT_ID_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "cfc_field_IPT_ID_set", N, value );

    /* ((0x00000400 + (N) * 0x04) bits 22:16) field IPT_ID of register PMC_CFC_REG_FIFO_IPT index N=0..127 */
    _cfc_reg_FIFO_IPT_array_field_set( LOG_CALLER_ARGS
                                       b,
                                       h,
                                       N,
                                       CFC_REG_FIFO_IPT_BIT_IPT_ID_MSK,
                                       CFC_REG_FIFO_IPT_BIT_IPT_ID_OFF,
                                       value);
}


#ifndef cfc_field_IPT_ID_get
#define cfc_field_IPT_ID_get( b, h, N ) \
       _cfc_field_IPT_ID_get( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _cfc_field_IPT_ID_get( LOG_CALLER_DEFN
                                            cfc_buffer_t *b,
                                            cfc_handle_t *h,
                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "cfc_field_IPT_ID_get", N, 127);
    /* ((0x00000400 + (N) * 0x04) bits 22:16) field IPT_ID of register PMC_CFC_REG_FIFO_IPT index N=0..127 */
    reg_value = _cfc_reg_FIFO_IPT_array_read( LOG_CALLER_ARGS b, h, N);
    value = (reg_value & CFC_REG_FIFO_IPT_BIT_IPT_ID_MSK) >> CFC_REG_FIFO_IPT_BIT_IPT_ID_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "cfc_field_IPT_ID_get", N, value );

    return value;
}

#ifndef cfc_field_range_IPT_ID_set
#define cfc_field_range_IPT_ID_set( b, h, N, start_bit, stop_bit, value ) \
       _cfc_field_range_IPT_ID_set( LOG_CALLER b, h, N, start_bit, stop_bit, value )
#endif
static INLINE void _cfc_field_range_IPT_ID_set( LOG_CALLER_DEFN
                                                cfc_buffer_t *b,
                                                cfc_handle_t *h,
                                                UINT32  N,
                                                UINT32 start_bit,
                                                UINT32 stop_bit,
                                                UINT32 value )
{
    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "cfc_field_range_IPT_ID_set", N, 127);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "cfc_field_range_IPT_ID_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "cfc_field_range_IPT_ID_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "cfc_field_range_IPT_ID_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* ((0x00000400 + (N) * 0x04) bits 22:16) field IPT_ID of register PMC_CFC_REG_FIFO_IPT index N=0..127 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 16) {
            subfield_offset = start_bit - 16;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  16 - start_bit;
            subfield_start_bit = 16;
        }
        if (stop_bit < 22) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 22;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000400 + (N) * 0x04) bits 22:16) field IPT_ID of register PMC_CFC_REG_FIFO_IPT index N=0..127 */
        _cfc_reg_FIFO_IPT_array_field_set( LOG_CALLER_ARGS
                                           b,
                                           h,
                                           N,
                                           subfield_mask << (CFC_REG_FIFO_IPT_BIT_IPT_ID_OFF + subfield_offset),
                                           CFC_REG_FIFO_IPT_BIT_IPT_ID_OFF + subfield_offset,
                                           value >> subfield_shift);
    }
}


#ifndef cfc_field_range_IPT_ID_get
#define cfc_field_range_IPT_ID_get( b, h, N, start_bit, stop_bit ) \
       _cfc_field_range_IPT_ID_get( LOG_CALLER b, h, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _cfc_field_range_IPT_ID_get( LOG_CALLER_DEFN
                                                  cfc_buffer_t *b,
                                                  cfc_handle_t *h,
                                                  UINT32  N,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "cfc_field_range_IPT_ID_get", N, 127);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "cfc_field_range_IPT_ID_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "cfc_field_range_IPT_ID_get", stop_bit, 6 );
    if (start_bit > 16) {
        subfield_offset = start_bit - 16;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 16 - start_bit;
        subfield_start_bit = 16;
    }
    if (stop_bit < 22) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 22;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000400 + (N) * 0x04) bits 22:16) field IPT_ID of register PMC_CFC_REG_FIFO_IPT index N=0..127 */
    reg_value = _cfc_reg_FIFO_IPT_array_read( LOG_CALLER_ARGS b, h, N);
    field_value = (reg_value & CFC_REG_FIFO_IPT_BIT_IPT_ID_MSK)
                  >> CFC_REG_FIFO_IPT_BIT_IPT_ID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_FIFO_IPT_BIT_IPT_ID_MSK, CFC_REG_FIFO_IPT_BIT_IPT_ID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "cfc_field_range_IPT_ID_get", N, start_bit, stop_bit, value );

    return value;
}

#ifndef cfc_field_IPT_VA_set
#define cfc_field_IPT_VA_set( b, h, N, value ) \
       _cfc_field_IPT_VA_set( LOG_CALLER b, h, N, value )
#endif
static INLINE void _cfc_field_IPT_VA_set( LOG_CALLER_DEFN
                                          cfc_buffer_t *b,
                                          cfc_handle_t *h,
                                          UINT32  N,
                                          UINT32 value )
{
    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "cfc_field_IPT_VA_set", N, 127);
    if (value > 127)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "cfc_field_IPT_VA_set", value, 127);
    IOLOG( "%s <= N=%d 0x%08x", "cfc_field_IPT_VA_set", N, value );

    /* ((0x00000400 + (N) * 0x04) bits 6:0) field IPT_VA of register PMC_CFC_REG_FIFO_IPT index N=0..127 */
    _cfc_reg_FIFO_IPT_array_field_set( LOG_CALLER_ARGS
                                       b,
                                       h,
                                       N,
                                       CFC_REG_FIFO_IPT_BIT_IPT_VA_MSK,
                                       CFC_REG_FIFO_IPT_BIT_IPT_VA_OFF,
                                       value);
}


#ifndef cfc_field_IPT_VA_get
#define cfc_field_IPT_VA_get( b, h, N ) \
       _cfc_field_IPT_VA_get( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _cfc_field_IPT_VA_get( LOG_CALLER_DEFN
                                            cfc_buffer_t *b,
                                            cfc_handle_t *h,
                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "cfc_field_IPT_VA_get", N, 127);
    /* ((0x00000400 + (N) * 0x04) bits 6:0) field IPT_VA of register PMC_CFC_REG_FIFO_IPT index N=0..127 */
    reg_value = _cfc_reg_FIFO_IPT_array_read( LOG_CALLER_ARGS b, h, N);
    value = (reg_value & CFC_REG_FIFO_IPT_BIT_IPT_VA_MSK) >> CFC_REG_FIFO_IPT_BIT_IPT_VA_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "cfc_field_IPT_VA_get", N, value );

    return value;
}

#ifndef cfc_field_range_IPT_VA_set
#define cfc_field_range_IPT_VA_set( b, h, N, start_bit, stop_bit, value ) \
       _cfc_field_range_IPT_VA_set( LOG_CALLER b, h, N, start_bit, stop_bit, value )
#endif
static INLINE void _cfc_field_range_IPT_VA_set( LOG_CALLER_DEFN
                                                cfc_buffer_t *b,
                                                cfc_handle_t *h,
                                                UINT32  N,
                                                UINT32 start_bit,
                                                UINT32 stop_bit,
                                                UINT32 value )
{
    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "cfc_field_range_IPT_VA_set", N, 127);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "cfc_field_range_IPT_VA_set", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "cfc_field_range_IPT_VA_set", stop_bit, 6 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "cfc_field_range_IPT_VA_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* ((0x00000400 + (N) * 0x04) bits 6:0) field IPT_VA of register PMC_CFC_REG_FIFO_IPT index N=0..127 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 6) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 6;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000400 + (N) * 0x04) bits 6:0) field IPT_VA of register PMC_CFC_REG_FIFO_IPT index N=0..127 */
        _cfc_reg_FIFO_IPT_array_field_set( LOG_CALLER_ARGS
                                           b,
                                           h,
                                           N,
                                           subfield_mask << (CFC_REG_FIFO_IPT_BIT_IPT_VA_OFF + subfield_offset),
                                           CFC_REG_FIFO_IPT_BIT_IPT_VA_OFF + subfield_offset,
                                           value >> subfield_shift);
    }
}


#ifndef cfc_field_range_IPT_VA_get
#define cfc_field_range_IPT_VA_get( b, h, N, start_bit, stop_bit ) \
       _cfc_field_range_IPT_VA_get( LOG_CALLER b, h, N, start_bit, stop_bit )
#endif
static INLINE UINT32 _cfc_field_range_IPT_VA_get( LOG_CALLER_DEFN
                                                  cfc_buffer_t *b,
                                                  cfc_handle_t *h,
                                                  UINT32  N,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "cfc_field_range_IPT_VA_get", N, 127);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "cfc_field_range_IPT_VA_get", stop_bit, start_bit );
    if (stop_bit > 6) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "cfc_field_range_IPT_VA_get", stop_bit, 6 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 6) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 6;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000400 + (N) * 0x04) bits 6:0) field IPT_VA of register PMC_CFC_REG_FIFO_IPT index N=0..127 */
    reg_value = _cfc_reg_FIFO_IPT_array_read( LOG_CALLER_ARGS b, h, N);
    field_value = (reg_value & CFC_REG_FIFO_IPT_BIT_IPT_VA_MSK)
                  >> CFC_REG_FIFO_IPT_BIT_IPT_VA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_FIFO_IPT_BIT_IPT_VA_MSK, CFC_REG_FIFO_IPT_BIT_IPT_VA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "cfc_field_range_IPT_VA_get", N, start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 *               Parameter Access Functions for Paramset config_edge
 * ==================================================================================
 */

#ifndef cfc_field_FIFO_END_ADDR_CHG_ABORT_set
#define cfc_field_FIFO_END_ADDR_CHG_ABORT_set( b, h, value ) \
       _cfc_field_FIFO_END_ADDR_CHG_ABORT_set( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_field_FIFO_END_ADDR_CHG_ABORT_set( LOG_CALLER_DEFN
                                                           cfc_buffer_t *b,
                                                           cfc_handle_t *h,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "cfc_field_FIFO_END_ADDR_CHG_ABORT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "cfc_field_FIFO_END_ADDR_CHG_ABORT_set", value );

    /* (0x000000a0 bits 28) field FIFO_END_ADDR_CHG_ABORT of register PMC_CFC_REG_FIFO_CFG */
    _cfc_reg_FIFO_CFG_field_set( LOG_CALLER_ARGS
                                 b,
                                 h,
                                 CFC_REG_FIFO_CFG_BIT_FIFO_END_ADDR_CHG_ABORT_MSK,
                                 CFC_REG_FIFO_CFG_BIT_FIFO_END_ADDR_CHG_ABORT_OFF,
                                 value);
}


#ifndef cfc_field_FIFO_END_ADDR_CHG_ABORT_get
#define cfc_field_FIFO_END_ADDR_CHG_ABORT_get( b, h ) \
       _cfc_field_FIFO_END_ADDR_CHG_ABORT_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_field_FIFO_END_ADDR_CHG_ABORT_get( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000a0 bits 28) field FIFO_END_ADDR_CHG_ABORT of register PMC_CFC_REG_FIFO_CFG */
    reg_value = _cfc_reg_FIFO_CFG_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & CFC_REG_FIFO_CFG_BIT_FIFO_END_ADDR_CHG_ABORT_MSK) >> CFC_REG_FIFO_CFG_BIT_FIFO_END_ADDR_CHG_ABORT_OFF;
    IOLOG( "%s -> 0x%08x", "cfc_field_FIFO_END_ADDR_CHG_ABORT_get", value );

    return value;
}

#ifndef cfc_field_FIFO_END_ADDR_CHG_REQ_set
#define cfc_field_FIFO_END_ADDR_CHG_REQ_set( b, h, value ) \
       _cfc_field_FIFO_END_ADDR_CHG_REQ_set( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_field_FIFO_END_ADDR_CHG_REQ_set( LOG_CALLER_DEFN
                                                         cfc_buffer_t *b,
                                                         cfc_handle_t *h,
                                                         UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "cfc_field_FIFO_END_ADDR_CHG_REQ_set", value, 1);
    IOLOG( "%s <= 0x%08x", "cfc_field_FIFO_END_ADDR_CHG_REQ_set", value );

    /* (0x000000a0 bits 24) field FIFO_END_ADDR_CHG_REQ of register PMC_CFC_REG_FIFO_CFG */
    _cfc_reg_FIFO_CFG_field_set( LOG_CALLER_ARGS
                                 b,
                                 h,
                                 CFC_REG_FIFO_CFG_BIT_FIFO_END_ADDR_CHG_REQ_MSK,
                                 CFC_REG_FIFO_CFG_BIT_FIFO_END_ADDR_CHG_REQ_OFF,
                                 value);
}


#ifndef cfc_field_FIFO_END_ADDR_CHG_REQ_get
#define cfc_field_FIFO_END_ADDR_CHG_REQ_get( b, h ) \
       _cfc_field_FIFO_END_ADDR_CHG_REQ_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_field_FIFO_END_ADDR_CHG_REQ_get( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000a0 bits 24) field FIFO_END_ADDR_CHG_REQ of register PMC_CFC_REG_FIFO_CFG */
    reg_value = _cfc_reg_FIFO_CFG_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & CFC_REG_FIFO_CFG_BIT_FIFO_END_ADDR_CHG_REQ_MSK) >> CFC_REG_FIFO_CFG_BIT_FIFO_END_ADDR_CHG_REQ_OFF;
    IOLOG( "%s -> 0x%08x", "cfc_field_FIFO_END_ADDR_CHG_REQ_get", value );

    return value;
}

#ifndef cfc_field_DBG_TRIG_set
#define cfc_field_DBG_TRIG_set( b, h, value ) \
       _cfc_field_DBG_TRIG_set( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_field_DBG_TRIG_set( LOG_CALLER_DEFN
                                            cfc_buffer_t *b,
                                            cfc_handle_t *h,
                                            UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "cfc_field_DBG_TRIG_set", value, 1);
    IOLOG( "%s <= 0x%08x", "cfc_field_DBG_TRIG_set", value );

    /* (0x00000100 bits 16) field DBG_TRIG of register PMC_CFC_REG_DBG_CTRL */
    _cfc_reg_DBG_CTRL_field_set( LOG_CALLER_ARGS
                                 b,
                                 h,
                                 CFC_REG_DBG_CTRL_BIT_DBG_TRIG_MSK,
                                 CFC_REG_DBG_CTRL_BIT_DBG_TRIG_OFF,
                                 value);
}


#ifndef cfc_field_DBG_TRIG_get
#define cfc_field_DBG_TRIG_get( b, h ) \
       _cfc_field_DBG_TRIG_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_field_DBG_TRIG_get( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000100 bits 16) field DBG_TRIG of register PMC_CFC_REG_DBG_CTRL */
    reg_value = _cfc_reg_DBG_CTRL_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & CFC_REG_DBG_CTRL_BIT_DBG_TRIG_MSK) >> CFC_REG_DBG_CTRL_BIT_DBG_TRIG_OFF;
    IOLOG( "%s -> 0x%08x", "cfc_field_DBG_TRIG_get", value );

    return value;
}

/*
 * ==================================================================================
 *                Parameter Access Functions for Paramset int_enable
 * ==================================================================================
 */

#ifndef cfc_lfield_FIFO_OVR_E_set
#define cfc_lfield_FIFO_OVR_E_set( b, h, value ) \
       _cfc_lfield_FIFO_OVR_E_set( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_lfield_FIFO_OVR_E_set( LOG_CALLER_DEFN
                                               cfc_buffer_t *b,
                                               cfc_handle_t *h,
                                               UINT32 value[4] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x 0x%08x", "cfc_lfield_FIFO_OVR_E_set", value[3] , value[2] , value[1] , value[0] );

    /* (0x00000280 bits 31:0) bits 0:31 use field FIFO_OVR_E of register PMC_CFC_REG_FIFO_OVR_INT_EN_REG_0 */
    _cfc_reg_FIFO_OVR_INT_EN_REG_0_field_set( LOG_CALLER_ARGS
                                              b,
                                              h,
                                              CFC_REG_FIFO_OVR_INT_EN_REG_0_BIT_FIFO_OVR_E_MSK,
                                              CFC_REG_FIFO_OVR_INT_EN_REG_0_BIT_FIFO_OVR_E_OFF,
                                              (value[0] & 0xffffffff));

    /* (0x00000284 bits 31:0) bits 32:63 use field FIFO_OVR_E of register PMC_CFC_REG_FIFO_OVR_INT_EN_REG_1 */
    _cfc_reg_FIFO_OVR_INT_EN_REG_1_field_set( LOG_CALLER_ARGS
                                              b,
                                              h,
                                              CFC_REG_FIFO_OVR_INT_EN_REG_1_BIT_FIFO_OVR_E_MSK,
                                              CFC_REG_FIFO_OVR_INT_EN_REG_1_BIT_FIFO_OVR_E_OFF,
                                              (value[1] & 0xffffffff));

    /* (0x00000288 bits 31:0) bits 64:95 use field FIFO_OVR_E of register PMC_CFC_REG_FIFO_OVR_INT_EN_REG_2 */
    _cfc_reg_FIFO_OVR_INT_EN_REG_2_field_set( LOG_CALLER_ARGS
                                              b,
                                              h,
                                              CFC_REG_FIFO_OVR_INT_EN_REG_2_BIT_FIFO_OVR_E_MSK,
                                              CFC_REG_FIFO_OVR_INT_EN_REG_2_BIT_FIFO_OVR_E_OFF,
                                              (value[2] & 0xffffffff));

    /* (0x0000028c bits 31:0) bits 96:127 use field FIFO_OVR_E of register PMC_CFC_REG_FIFO_OVR_INT_EN_REG_3 */
    _cfc_reg_FIFO_OVR_INT_EN_REG_3_field_set( LOG_CALLER_ARGS
                                              b,
                                              h,
                                              CFC_REG_FIFO_OVR_INT_EN_REG_3_BIT_FIFO_OVR_E_MSK,
                                              CFC_REG_FIFO_OVR_INT_EN_REG_3_BIT_FIFO_OVR_E_OFF,
                                              (value[3] & 0xffffffff));
}


#ifndef cfc_lfield_FIFO_OVR_E_get
#define cfc_lfield_FIFO_OVR_E_get( b, h, value ) \
       _cfc_lfield_FIFO_OVR_E_get( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_lfield_FIFO_OVR_E_get( LOG_CALLER_DEFN
                                               cfc_buffer_t *b,
                                               cfc_handle_t *h,
                                               UINT32 value[4] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<4;i++)
        value[i] = 0;

    /* (0x00000280 bits 31:0) bits 0:31 use field FIFO_OVR_E of register PMC_CFC_REG_FIFO_OVR_INT_EN_REG_0 */
    reg_value = _cfc_reg_FIFO_OVR_INT_EN_REG_0_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & CFC_REG_FIFO_OVR_INT_EN_REG_0_BIT_FIFO_OVR_E_MSK) >> CFC_REG_FIFO_OVR_INT_EN_REG_0_BIT_FIFO_OVR_E_OFF;
    value[0] |= field_value;

    /* (0x00000284 bits 31:0) bits 32:63 use field FIFO_OVR_E of register PMC_CFC_REG_FIFO_OVR_INT_EN_REG_1 */
    reg_value = _cfc_reg_FIFO_OVR_INT_EN_REG_1_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & CFC_REG_FIFO_OVR_INT_EN_REG_1_BIT_FIFO_OVR_E_MSK) >> CFC_REG_FIFO_OVR_INT_EN_REG_1_BIT_FIFO_OVR_E_OFF;
    value[1] |= field_value;

    /* (0x00000288 bits 31:0) bits 64:95 use field FIFO_OVR_E of register PMC_CFC_REG_FIFO_OVR_INT_EN_REG_2 */
    reg_value = _cfc_reg_FIFO_OVR_INT_EN_REG_2_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & CFC_REG_FIFO_OVR_INT_EN_REG_2_BIT_FIFO_OVR_E_MSK) >> CFC_REG_FIFO_OVR_INT_EN_REG_2_BIT_FIFO_OVR_E_OFF;
    value[2] |= field_value;

    /* (0x0000028c bits 31:0) bits 96:127 use field FIFO_OVR_E of register PMC_CFC_REG_FIFO_OVR_INT_EN_REG_3 */
    reg_value = _cfc_reg_FIFO_OVR_INT_EN_REG_3_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & CFC_REG_FIFO_OVR_INT_EN_REG_3_BIT_FIFO_OVR_E_MSK) >> CFC_REG_FIFO_OVR_INT_EN_REG_3_BIT_FIFO_OVR_E_OFF;
    value[3] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x 0x%08x", "cfc_lfield_FIFO_OVR_E_get", value[3] , value[2] , value[1] , value[0] );

}

#ifndef cfc_lfield_range_FIFO_OVR_E_set
#define cfc_lfield_range_FIFO_OVR_E_set( b, h, start_bit, stop_bit, value ) \
       _cfc_lfield_range_FIFO_OVR_E_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _cfc_lfield_range_FIFO_OVR_E_set( LOG_CALLER_DEFN
                                                     cfc_buffer_t *b,
                                                     cfc_handle_t *h,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "cfc_lfield_range_FIFO_OVR_E_set", stop_bit, start_bit );
    if (stop_bit > 127) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "cfc_lfield_range_FIFO_OVR_E_set", stop_bit, 127 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "cfc_lfield_range_FIFO_OVR_E_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000280 bits 31:0) bits 0:31 use field FIFO_OVR_E of register PMC_CFC_REG_FIFO_OVR_INT_EN_REG_0 */
    if ((start_bit <= 31)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000280 bits 31:0) bits 0:31 use field FIFO_OVR_E of register PMC_CFC_REG_FIFO_OVR_INT_EN_REG_0 */
        _cfc_reg_FIFO_OVR_INT_EN_REG_0_field_set( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  subfield_mask << (CFC_REG_FIFO_OVR_INT_EN_REG_0_BIT_FIFO_OVR_E_OFF + subfield_offset),
                                                  CFC_REG_FIFO_OVR_INT_EN_REG_0_BIT_FIFO_OVR_E_OFF + subfield_offset,
                                                  value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000284 bits 31:0) bits 32:63 use field FIFO_OVR_E of register PMC_CFC_REG_FIFO_OVR_INT_EN_REG_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000284 bits 31:0) bits 32:63 use field FIFO_OVR_E of register PMC_CFC_REG_FIFO_OVR_INT_EN_REG_1 */
        _cfc_reg_FIFO_OVR_INT_EN_REG_1_field_set( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  subfield_mask << (CFC_REG_FIFO_OVR_INT_EN_REG_1_BIT_FIFO_OVR_E_OFF + subfield_offset),
                                                  CFC_REG_FIFO_OVR_INT_EN_REG_1_BIT_FIFO_OVR_E_OFF + subfield_offset,
                                                  value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000288 bits 31:0) bits 64:95 use field FIFO_OVR_E of register PMC_CFC_REG_FIFO_OVR_INT_EN_REG_2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000288 bits 31:0) bits 64:95 use field FIFO_OVR_E of register PMC_CFC_REG_FIFO_OVR_INT_EN_REG_2 */
        _cfc_reg_FIFO_OVR_INT_EN_REG_2_field_set( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  subfield_mask << (CFC_REG_FIFO_OVR_INT_EN_REG_2_BIT_FIFO_OVR_E_OFF + subfield_offset),
                                                  CFC_REG_FIFO_OVR_INT_EN_REG_2_BIT_FIFO_OVR_E_OFF + subfield_offset,
                                                  value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x0000028c bits 31:0) bits 96:127 use field FIFO_OVR_E of register PMC_CFC_REG_FIFO_OVR_INT_EN_REG_3 */
    if ((start_bit <= 127) && (stop_bit >= 96)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 96) {
            subfield_offset = start_bit - 96;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  96 - start_bit;
            subfield_start_bit = 96;
        }
        if (stop_bit < 127) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 127;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000028c bits 31:0) bits 96:127 use field FIFO_OVR_E of register PMC_CFC_REG_FIFO_OVR_INT_EN_REG_3 */
        _cfc_reg_FIFO_OVR_INT_EN_REG_3_field_set( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  subfield_mask << (CFC_REG_FIFO_OVR_INT_EN_REG_3_BIT_FIFO_OVR_E_OFF + subfield_offset),
                                                  CFC_REG_FIFO_OVR_INT_EN_REG_3_BIT_FIFO_OVR_E_OFF + subfield_offset,
                                                  value >> subfield_shift);
    }
}


#ifndef cfc_lfield_range_FIFO_OVR_E_get
#define cfc_lfield_range_FIFO_OVR_E_get( b, h, start_bit, stop_bit ) \
       _cfc_lfield_range_FIFO_OVR_E_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _cfc_lfield_range_FIFO_OVR_E_get( LOG_CALLER_DEFN
                                                       cfc_buffer_t *b,
                                                       cfc_handle_t *h,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "cfc_lfield_range_FIFO_OVR_E_get", stop_bit, start_bit );
    if (stop_bit > 127) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "cfc_lfield_range_FIFO_OVR_E_get", stop_bit, 127 );
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000280 bits 31:0) bits 0:31 use field FIFO_OVR_E of register PMC_CFC_REG_FIFO_OVR_INT_EN_REG_0 */
        reg_value = _cfc_reg_FIFO_OVR_INT_EN_REG_0_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & CFC_REG_FIFO_OVR_INT_EN_REG_0_BIT_FIFO_OVR_E_MSK)
                      >> CFC_REG_FIFO_OVR_INT_EN_REG_0_BIT_FIFO_OVR_E_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_FIFO_OVR_INT_EN_REG_0_BIT_FIFO_OVR_E_MSK, CFC_REG_FIFO_OVR_INT_EN_REG_0_BIT_FIFO_OVR_E_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000284 bits 31:0) bits 32:63 use field FIFO_OVR_E of register PMC_CFC_REG_FIFO_OVR_INT_EN_REG_1 */
        reg_value = _cfc_reg_FIFO_OVR_INT_EN_REG_1_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & CFC_REG_FIFO_OVR_INT_EN_REG_1_BIT_FIFO_OVR_E_MSK)
                      >> CFC_REG_FIFO_OVR_INT_EN_REG_1_BIT_FIFO_OVR_E_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_FIFO_OVR_INT_EN_REG_1_BIT_FIFO_OVR_E_MSK, CFC_REG_FIFO_OVR_INT_EN_REG_1_BIT_FIFO_OVR_E_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000288 bits 31:0) bits 64:95 use field FIFO_OVR_E of register PMC_CFC_REG_FIFO_OVR_INT_EN_REG_2 */
        reg_value = _cfc_reg_FIFO_OVR_INT_EN_REG_2_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & CFC_REG_FIFO_OVR_INT_EN_REG_2_BIT_FIFO_OVR_E_MSK)
                      >> CFC_REG_FIFO_OVR_INT_EN_REG_2_BIT_FIFO_OVR_E_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_FIFO_OVR_INT_EN_REG_2_BIT_FIFO_OVR_E_MSK, CFC_REG_FIFO_OVR_INT_EN_REG_2_BIT_FIFO_OVR_E_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 127) && (stop_bit >= 96)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 96) {
            subfield_offset = start_bit - 96;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 96 - start_bit;
            subfield_start_bit = 96;
        }
        if (stop_bit < 127) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 127;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000028c bits 31:0) bits 96:127 use field FIFO_OVR_E of register PMC_CFC_REG_FIFO_OVR_INT_EN_REG_3 */
        reg_value = _cfc_reg_FIFO_OVR_INT_EN_REG_3_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & CFC_REG_FIFO_OVR_INT_EN_REG_3_BIT_FIFO_OVR_E_MSK)
                      >> CFC_REG_FIFO_OVR_INT_EN_REG_3_BIT_FIFO_OVR_E_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_FIFO_OVR_INT_EN_REG_3_BIT_FIFO_OVR_E_MSK, CFC_REG_FIFO_OVR_INT_EN_REG_3_BIT_FIFO_OVR_E_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "cfc_lfield_range_FIFO_OVR_E_get", start_bit, stop_bit, value );

    return value;
}

#ifndef cfc_lfield_FIFO_UDR_E_set
#define cfc_lfield_FIFO_UDR_E_set( b, h, value ) \
       _cfc_lfield_FIFO_UDR_E_set( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_lfield_FIFO_UDR_E_set( LOG_CALLER_DEFN
                                               cfc_buffer_t *b,
                                               cfc_handle_t *h,
                                               UINT32 value[4] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x 0x%08x", "cfc_lfield_FIFO_UDR_E_set", value[3] , value[2] , value[1] , value[0] );

    /* (0x000002a0 bits 31:0) bits 0:31 use field FIFO_UDR_E of register PMC_CFC_REG_FIFO_UDR_INT_EN_REG_0 */
    _cfc_reg_FIFO_UDR_INT_EN_REG_0_field_set( LOG_CALLER_ARGS
                                              b,
                                              h,
                                              CFC_REG_FIFO_UDR_INT_EN_REG_0_BIT_FIFO_UDR_E_MSK,
                                              CFC_REG_FIFO_UDR_INT_EN_REG_0_BIT_FIFO_UDR_E_OFF,
                                              (value[0] & 0xffffffff));

    /* (0x000002a4 bits 31:0) bits 32:63 use field FIFO_UDR_E of register PMC_CFC_REG_FIFO_UDR_INT_EN_REG_1 */
    _cfc_reg_FIFO_UDR_INT_EN_REG_1_field_set( LOG_CALLER_ARGS
                                              b,
                                              h,
                                              CFC_REG_FIFO_UDR_INT_EN_REG_1_BIT_FIFO_UDR_E_MSK,
                                              CFC_REG_FIFO_UDR_INT_EN_REG_1_BIT_FIFO_UDR_E_OFF,
                                              (value[1] & 0xffffffff));

    /* (0x000002a8 bits 31:0) bits 64:95 use field FIFO_UDR_E of register PMC_CFC_REG_FIFO_UDR_INT_EN_REG_2 */
    _cfc_reg_FIFO_UDR_INT_EN_REG_2_field_set( LOG_CALLER_ARGS
                                              b,
                                              h,
                                              CFC_REG_FIFO_UDR_INT_EN_REG_2_BIT_FIFO_UDR_E_MSK,
                                              CFC_REG_FIFO_UDR_INT_EN_REG_2_BIT_FIFO_UDR_E_OFF,
                                              (value[2] & 0xffffffff));

    /* (0x000002ac bits 31:0) bits 96:127 use field FIFO_UDR_E of register PMC_CFC_REG_FIFO_UDR_INT_EN_REG_3 */
    _cfc_reg_FIFO_UDR_INT_EN_REG_3_field_set( LOG_CALLER_ARGS
                                              b,
                                              h,
                                              CFC_REG_FIFO_UDR_INT_EN_REG_3_BIT_FIFO_UDR_E_MSK,
                                              CFC_REG_FIFO_UDR_INT_EN_REG_3_BIT_FIFO_UDR_E_OFF,
                                              (value[3] & 0xffffffff));
}


#ifndef cfc_lfield_FIFO_UDR_E_get
#define cfc_lfield_FIFO_UDR_E_get( b, h, value ) \
       _cfc_lfield_FIFO_UDR_E_get( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_lfield_FIFO_UDR_E_get( LOG_CALLER_DEFN
                                               cfc_buffer_t *b,
                                               cfc_handle_t *h,
                                               UINT32 value[4] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<4;i++)
        value[i] = 0;

    /* (0x000002a0 bits 31:0) bits 0:31 use field FIFO_UDR_E of register PMC_CFC_REG_FIFO_UDR_INT_EN_REG_0 */
    reg_value = _cfc_reg_FIFO_UDR_INT_EN_REG_0_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & CFC_REG_FIFO_UDR_INT_EN_REG_0_BIT_FIFO_UDR_E_MSK) >> CFC_REG_FIFO_UDR_INT_EN_REG_0_BIT_FIFO_UDR_E_OFF;
    value[0] |= field_value;

    /* (0x000002a4 bits 31:0) bits 32:63 use field FIFO_UDR_E of register PMC_CFC_REG_FIFO_UDR_INT_EN_REG_1 */
    reg_value = _cfc_reg_FIFO_UDR_INT_EN_REG_1_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & CFC_REG_FIFO_UDR_INT_EN_REG_1_BIT_FIFO_UDR_E_MSK) >> CFC_REG_FIFO_UDR_INT_EN_REG_1_BIT_FIFO_UDR_E_OFF;
    value[1] |= field_value;

    /* (0x000002a8 bits 31:0) bits 64:95 use field FIFO_UDR_E of register PMC_CFC_REG_FIFO_UDR_INT_EN_REG_2 */
    reg_value = _cfc_reg_FIFO_UDR_INT_EN_REG_2_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & CFC_REG_FIFO_UDR_INT_EN_REG_2_BIT_FIFO_UDR_E_MSK) >> CFC_REG_FIFO_UDR_INT_EN_REG_2_BIT_FIFO_UDR_E_OFF;
    value[2] |= field_value;

    /* (0x000002ac bits 31:0) bits 96:127 use field FIFO_UDR_E of register PMC_CFC_REG_FIFO_UDR_INT_EN_REG_3 */
    reg_value = _cfc_reg_FIFO_UDR_INT_EN_REG_3_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & CFC_REG_FIFO_UDR_INT_EN_REG_3_BIT_FIFO_UDR_E_MSK) >> CFC_REG_FIFO_UDR_INT_EN_REG_3_BIT_FIFO_UDR_E_OFF;
    value[3] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x 0x%08x", "cfc_lfield_FIFO_UDR_E_get", value[3] , value[2] , value[1] , value[0] );

}

#ifndef cfc_lfield_range_FIFO_UDR_E_set
#define cfc_lfield_range_FIFO_UDR_E_set( b, h, start_bit, stop_bit, value ) \
       _cfc_lfield_range_FIFO_UDR_E_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _cfc_lfield_range_FIFO_UDR_E_set( LOG_CALLER_DEFN
                                                     cfc_buffer_t *b,
                                                     cfc_handle_t *h,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "cfc_lfield_range_FIFO_UDR_E_set", stop_bit, start_bit );
    if (stop_bit > 127) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "cfc_lfield_range_FIFO_UDR_E_set", stop_bit, 127 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "cfc_lfield_range_FIFO_UDR_E_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000002a0 bits 31:0) bits 0:31 use field FIFO_UDR_E of register PMC_CFC_REG_FIFO_UDR_INT_EN_REG_0 */
    if ((start_bit <= 31)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000002a0 bits 31:0) bits 0:31 use field FIFO_UDR_E of register PMC_CFC_REG_FIFO_UDR_INT_EN_REG_0 */
        _cfc_reg_FIFO_UDR_INT_EN_REG_0_field_set( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  subfield_mask << (CFC_REG_FIFO_UDR_INT_EN_REG_0_BIT_FIFO_UDR_E_OFF + subfield_offset),
                                                  CFC_REG_FIFO_UDR_INT_EN_REG_0_BIT_FIFO_UDR_E_OFF + subfield_offset,
                                                  value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000002a4 bits 31:0) bits 32:63 use field FIFO_UDR_E of register PMC_CFC_REG_FIFO_UDR_INT_EN_REG_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000002a4 bits 31:0) bits 32:63 use field FIFO_UDR_E of register PMC_CFC_REG_FIFO_UDR_INT_EN_REG_1 */
        _cfc_reg_FIFO_UDR_INT_EN_REG_1_field_set( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  subfield_mask << (CFC_REG_FIFO_UDR_INT_EN_REG_1_BIT_FIFO_UDR_E_OFF + subfield_offset),
                                                  CFC_REG_FIFO_UDR_INT_EN_REG_1_BIT_FIFO_UDR_E_OFF + subfield_offset,
                                                  value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000002a8 bits 31:0) bits 64:95 use field FIFO_UDR_E of register PMC_CFC_REG_FIFO_UDR_INT_EN_REG_2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000002a8 bits 31:0) bits 64:95 use field FIFO_UDR_E of register PMC_CFC_REG_FIFO_UDR_INT_EN_REG_2 */
        _cfc_reg_FIFO_UDR_INT_EN_REG_2_field_set( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  subfield_mask << (CFC_REG_FIFO_UDR_INT_EN_REG_2_BIT_FIFO_UDR_E_OFF + subfield_offset),
                                                  CFC_REG_FIFO_UDR_INT_EN_REG_2_BIT_FIFO_UDR_E_OFF + subfield_offset,
                                                  value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000002ac bits 31:0) bits 96:127 use field FIFO_UDR_E of register PMC_CFC_REG_FIFO_UDR_INT_EN_REG_3 */
    if ((start_bit <= 127) && (stop_bit >= 96)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 96) {
            subfield_offset = start_bit - 96;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  96 - start_bit;
            subfield_start_bit = 96;
        }
        if (stop_bit < 127) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 127;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000002ac bits 31:0) bits 96:127 use field FIFO_UDR_E of register PMC_CFC_REG_FIFO_UDR_INT_EN_REG_3 */
        _cfc_reg_FIFO_UDR_INT_EN_REG_3_field_set( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  subfield_mask << (CFC_REG_FIFO_UDR_INT_EN_REG_3_BIT_FIFO_UDR_E_OFF + subfield_offset),
                                                  CFC_REG_FIFO_UDR_INT_EN_REG_3_BIT_FIFO_UDR_E_OFF + subfield_offset,
                                                  value >> subfield_shift);
    }
}


#ifndef cfc_lfield_range_FIFO_UDR_E_get
#define cfc_lfield_range_FIFO_UDR_E_get( b, h, start_bit, stop_bit ) \
       _cfc_lfield_range_FIFO_UDR_E_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _cfc_lfield_range_FIFO_UDR_E_get( LOG_CALLER_DEFN
                                                       cfc_buffer_t *b,
                                                       cfc_handle_t *h,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "cfc_lfield_range_FIFO_UDR_E_get", stop_bit, start_bit );
    if (stop_bit > 127) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "cfc_lfield_range_FIFO_UDR_E_get", stop_bit, 127 );
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000002a0 bits 31:0) bits 0:31 use field FIFO_UDR_E of register PMC_CFC_REG_FIFO_UDR_INT_EN_REG_0 */
        reg_value = _cfc_reg_FIFO_UDR_INT_EN_REG_0_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & CFC_REG_FIFO_UDR_INT_EN_REG_0_BIT_FIFO_UDR_E_MSK)
                      >> CFC_REG_FIFO_UDR_INT_EN_REG_0_BIT_FIFO_UDR_E_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_FIFO_UDR_INT_EN_REG_0_BIT_FIFO_UDR_E_MSK, CFC_REG_FIFO_UDR_INT_EN_REG_0_BIT_FIFO_UDR_E_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000002a4 bits 31:0) bits 32:63 use field FIFO_UDR_E of register PMC_CFC_REG_FIFO_UDR_INT_EN_REG_1 */
        reg_value = _cfc_reg_FIFO_UDR_INT_EN_REG_1_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & CFC_REG_FIFO_UDR_INT_EN_REG_1_BIT_FIFO_UDR_E_MSK)
                      >> CFC_REG_FIFO_UDR_INT_EN_REG_1_BIT_FIFO_UDR_E_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_FIFO_UDR_INT_EN_REG_1_BIT_FIFO_UDR_E_MSK, CFC_REG_FIFO_UDR_INT_EN_REG_1_BIT_FIFO_UDR_E_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000002a8 bits 31:0) bits 64:95 use field FIFO_UDR_E of register PMC_CFC_REG_FIFO_UDR_INT_EN_REG_2 */
        reg_value = _cfc_reg_FIFO_UDR_INT_EN_REG_2_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & CFC_REG_FIFO_UDR_INT_EN_REG_2_BIT_FIFO_UDR_E_MSK)
                      >> CFC_REG_FIFO_UDR_INT_EN_REG_2_BIT_FIFO_UDR_E_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_FIFO_UDR_INT_EN_REG_2_BIT_FIFO_UDR_E_MSK, CFC_REG_FIFO_UDR_INT_EN_REG_2_BIT_FIFO_UDR_E_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 127) && (stop_bit >= 96)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 96) {
            subfield_offset = start_bit - 96;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 96 - start_bit;
            subfield_start_bit = 96;
        }
        if (stop_bit < 127) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 127;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000002ac bits 31:0) bits 96:127 use field FIFO_UDR_E of register PMC_CFC_REG_FIFO_UDR_INT_EN_REG_3 */
        reg_value = _cfc_reg_FIFO_UDR_INT_EN_REG_3_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & CFC_REG_FIFO_UDR_INT_EN_REG_3_BIT_FIFO_UDR_E_MSK)
                      >> CFC_REG_FIFO_UDR_INT_EN_REG_3_BIT_FIFO_UDR_E_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_FIFO_UDR_INT_EN_REG_3_BIT_FIFO_UDR_E_MSK, CFC_REG_FIFO_UDR_INT_EN_REG_3_BIT_FIFO_UDR_E_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "cfc_lfield_range_FIFO_UDR_E_get", start_bit, stop_bit, value );

    return value;
}

#ifndef cfc_lfield_IPT_ERR_E_set
#define cfc_lfield_IPT_ERR_E_set( b, h, value ) \
       _cfc_lfield_IPT_ERR_E_set( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_lfield_IPT_ERR_E_set( LOG_CALLER_DEFN
                                              cfc_buffer_t *b,
                                              cfc_handle_t *h,
                                              UINT32 value[4] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x 0x%08x", "cfc_lfield_IPT_ERR_E_set", value[3] , value[2] , value[1] , value[0] );

    /* (0x000002c0 bits 31:0) bits 0:31 use field IPT_ERR_E of register PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_0 */
    _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_0_field_set( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  CFC_REG_FIFO_IPT_ERR_INT_EN_REG_0_BIT_IPT_ERR_E_MSK,
                                                  CFC_REG_FIFO_IPT_ERR_INT_EN_REG_0_BIT_IPT_ERR_E_OFF,
                                                  (value[0] & 0xffffffff));

    /* (0x000002c4 bits 31:0) bits 32:63 use field IPT_ERR_E of register PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_1 */
    _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_1_field_set( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  CFC_REG_FIFO_IPT_ERR_INT_EN_REG_1_BIT_IPT_ERR_E_MSK,
                                                  CFC_REG_FIFO_IPT_ERR_INT_EN_REG_1_BIT_IPT_ERR_E_OFF,
                                                  (value[1] & 0xffffffff));

    /* (0x000002c8 bits 31:0) bits 64:95 use field IPT_ERR_E of register PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_2 */
    _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_2_field_set( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  CFC_REG_FIFO_IPT_ERR_INT_EN_REG_2_BIT_IPT_ERR_E_MSK,
                                                  CFC_REG_FIFO_IPT_ERR_INT_EN_REG_2_BIT_IPT_ERR_E_OFF,
                                                  (value[2] & 0xffffffff));

    /* (0x000002cc bits 31:0) bits 96:127 use field IPT_ERR_E of register PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_3 */
    _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_3_field_set( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  CFC_REG_FIFO_IPT_ERR_INT_EN_REG_3_BIT_IPT_ERR_E_MSK,
                                                  CFC_REG_FIFO_IPT_ERR_INT_EN_REG_3_BIT_IPT_ERR_E_OFF,
                                                  (value[3] & 0xffffffff));
}


#ifndef cfc_lfield_IPT_ERR_E_get
#define cfc_lfield_IPT_ERR_E_get( b, h, value ) \
       _cfc_lfield_IPT_ERR_E_get( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_lfield_IPT_ERR_E_get( LOG_CALLER_DEFN
                                              cfc_buffer_t *b,
                                              cfc_handle_t *h,
                                              UINT32 value[4] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<4;i++)
        value[i] = 0;

    /* (0x000002c0 bits 31:0) bits 0:31 use field IPT_ERR_E of register PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_0 */
    reg_value = _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_0_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & CFC_REG_FIFO_IPT_ERR_INT_EN_REG_0_BIT_IPT_ERR_E_MSK) >> CFC_REG_FIFO_IPT_ERR_INT_EN_REG_0_BIT_IPT_ERR_E_OFF;
    value[0] |= field_value;

    /* (0x000002c4 bits 31:0) bits 32:63 use field IPT_ERR_E of register PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_1 */
    reg_value = _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_1_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & CFC_REG_FIFO_IPT_ERR_INT_EN_REG_1_BIT_IPT_ERR_E_MSK) >> CFC_REG_FIFO_IPT_ERR_INT_EN_REG_1_BIT_IPT_ERR_E_OFF;
    value[1] |= field_value;

    /* (0x000002c8 bits 31:0) bits 64:95 use field IPT_ERR_E of register PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_2 */
    reg_value = _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_2_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & CFC_REG_FIFO_IPT_ERR_INT_EN_REG_2_BIT_IPT_ERR_E_MSK) >> CFC_REG_FIFO_IPT_ERR_INT_EN_REG_2_BIT_IPT_ERR_E_OFF;
    value[2] |= field_value;

    /* (0x000002cc bits 31:0) bits 96:127 use field IPT_ERR_E of register PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_3 */
    reg_value = _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_3_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & CFC_REG_FIFO_IPT_ERR_INT_EN_REG_3_BIT_IPT_ERR_E_MSK) >> CFC_REG_FIFO_IPT_ERR_INT_EN_REG_3_BIT_IPT_ERR_E_OFF;
    value[3] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x 0x%08x", "cfc_lfield_IPT_ERR_E_get", value[3] , value[2] , value[1] , value[0] );

}

#ifndef cfc_lfield_range_IPT_ERR_E_set
#define cfc_lfield_range_IPT_ERR_E_set( b, h, start_bit, stop_bit, value ) \
       _cfc_lfield_range_IPT_ERR_E_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _cfc_lfield_range_IPT_ERR_E_set( LOG_CALLER_DEFN
                                                    cfc_buffer_t *b,
                                                    cfc_handle_t *h,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit,
                                                    UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "cfc_lfield_range_IPT_ERR_E_set", stop_bit, start_bit );
    if (stop_bit > 127) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "cfc_lfield_range_IPT_ERR_E_set", stop_bit, 127 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "cfc_lfield_range_IPT_ERR_E_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000002c0 bits 31:0) bits 0:31 use field IPT_ERR_E of register PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_0 */
    if ((start_bit <= 31)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000002c0 bits 31:0) bits 0:31 use field IPT_ERR_E of register PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_0 */
        _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_0_field_set( LOG_CALLER_ARGS
                                                      b,
                                                      h,
                                                      subfield_mask << (CFC_REG_FIFO_IPT_ERR_INT_EN_REG_0_BIT_IPT_ERR_E_OFF + subfield_offset),
                                                      CFC_REG_FIFO_IPT_ERR_INT_EN_REG_0_BIT_IPT_ERR_E_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000002c4 bits 31:0) bits 32:63 use field IPT_ERR_E of register PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000002c4 bits 31:0) bits 32:63 use field IPT_ERR_E of register PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_1 */
        _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_1_field_set( LOG_CALLER_ARGS
                                                      b,
                                                      h,
                                                      subfield_mask << (CFC_REG_FIFO_IPT_ERR_INT_EN_REG_1_BIT_IPT_ERR_E_OFF + subfield_offset),
                                                      CFC_REG_FIFO_IPT_ERR_INT_EN_REG_1_BIT_IPT_ERR_E_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000002c8 bits 31:0) bits 64:95 use field IPT_ERR_E of register PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000002c8 bits 31:0) bits 64:95 use field IPT_ERR_E of register PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_2 */
        _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_2_field_set( LOG_CALLER_ARGS
                                                      b,
                                                      h,
                                                      subfield_mask << (CFC_REG_FIFO_IPT_ERR_INT_EN_REG_2_BIT_IPT_ERR_E_OFF + subfield_offset),
                                                      CFC_REG_FIFO_IPT_ERR_INT_EN_REG_2_BIT_IPT_ERR_E_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000002cc bits 31:0) bits 96:127 use field IPT_ERR_E of register PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_3 */
    if ((start_bit <= 127) && (stop_bit >= 96)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 96) {
            subfield_offset = start_bit - 96;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  96 - start_bit;
            subfield_start_bit = 96;
        }
        if (stop_bit < 127) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 127;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000002cc bits 31:0) bits 96:127 use field IPT_ERR_E of register PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_3 */
        _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_3_field_set( LOG_CALLER_ARGS
                                                      b,
                                                      h,
                                                      subfield_mask << (CFC_REG_FIFO_IPT_ERR_INT_EN_REG_3_BIT_IPT_ERR_E_OFF + subfield_offset),
                                                      CFC_REG_FIFO_IPT_ERR_INT_EN_REG_3_BIT_IPT_ERR_E_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}


#ifndef cfc_lfield_range_IPT_ERR_E_get
#define cfc_lfield_range_IPT_ERR_E_get( b, h, start_bit, stop_bit ) \
       _cfc_lfield_range_IPT_ERR_E_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _cfc_lfield_range_IPT_ERR_E_get( LOG_CALLER_DEFN
                                                      cfc_buffer_t *b,
                                                      cfc_handle_t *h,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "cfc_lfield_range_IPT_ERR_E_get", stop_bit, start_bit );
    if (stop_bit > 127) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "cfc_lfield_range_IPT_ERR_E_get", stop_bit, 127 );
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000002c0 bits 31:0) bits 0:31 use field IPT_ERR_E of register PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_0 */
        reg_value = _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_0_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & CFC_REG_FIFO_IPT_ERR_INT_EN_REG_0_BIT_IPT_ERR_E_MSK)
                      >> CFC_REG_FIFO_IPT_ERR_INT_EN_REG_0_BIT_IPT_ERR_E_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_FIFO_IPT_ERR_INT_EN_REG_0_BIT_IPT_ERR_E_MSK, CFC_REG_FIFO_IPT_ERR_INT_EN_REG_0_BIT_IPT_ERR_E_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000002c4 bits 31:0) bits 32:63 use field IPT_ERR_E of register PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_1 */
        reg_value = _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_1_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & CFC_REG_FIFO_IPT_ERR_INT_EN_REG_1_BIT_IPT_ERR_E_MSK)
                      >> CFC_REG_FIFO_IPT_ERR_INT_EN_REG_1_BIT_IPT_ERR_E_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_FIFO_IPT_ERR_INT_EN_REG_1_BIT_IPT_ERR_E_MSK, CFC_REG_FIFO_IPT_ERR_INT_EN_REG_1_BIT_IPT_ERR_E_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000002c8 bits 31:0) bits 64:95 use field IPT_ERR_E of register PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_2 */
        reg_value = _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_2_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & CFC_REG_FIFO_IPT_ERR_INT_EN_REG_2_BIT_IPT_ERR_E_MSK)
                      >> CFC_REG_FIFO_IPT_ERR_INT_EN_REG_2_BIT_IPT_ERR_E_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_FIFO_IPT_ERR_INT_EN_REG_2_BIT_IPT_ERR_E_MSK, CFC_REG_FIFO_IPT_ERR_INT_EN_REG_2_BIT_IPT_ERR_E_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 127) && (stop_bit >= 96)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 96) {
            subfield_offset = start_bit - 96;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 96 - start_bit;
            subfield_start_bit = 96;
        }
        if (stop_bit < 127) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 127;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000002cc bits 31:0) bits 96:127 use field IPT_ERR_E of register PMC_CFC_REG_FIFO_IPT_ERR_INT_EN_REG_3 */
        reg_value = _cfc_reg_FIFO_IPT_ERR_INT_EN_REG_3_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & CFC_REG_FIFO_IPT_ERR_INT_EN_REG_3_BIT_IPT_ERR_E_MSK)
                      >> CFC_REG_FIFO_IPT_ERR_INT_EN_REG_3_BIT_IPT_ERR_E_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_FIFO_IPT_ERR_INT_EN_REG_3_BIT_IPT_ERR_E_MSK, CFC_REG_FIFO_IPT_ERR_INT_EN_REG_3_BIT_IPT_ERR_E_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "cfc_lfield_range_IPT_ERR_E_get", start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 *                 Parameter Access Functions for Paramset int_sync
 * ==================================================================================
 */

#ifndef cfc_lfield_FIFO_OVR_I_set_to_clear
#define cfc_lfield_FIFO_OVR_I_set_to_clear( b, h, value ) \
       _cfc_lfield_FIFO_OVR_I_set_to_clear( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_lfield_FIFO_OVR_I_set_to_clear( LOG_CALLER_DEFN
                                                        cfc_buffer_t *b,
                                                        cfc_handle_t *h,
                                                        UINT32 value[4] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x 0x%08x", "cfc_lfield_FIFO_OVR_I_set_to_clear", value[3] , value[2] , value[1] , value[0] );

    /* (0x00000200 bits 31:0) bits 0:31 use field FIFO_OVR_I of register PMC_CFC_REG_FIFO_OVR_INT_REG_0 */
    _cfc_reg_FIFO_OVR_INT_REG_0_action_on_write_field_set( LOG_CALLER_ARGS
                                                           b,
                                                           h,
                                                           CFC_REG_FIFO_OVR_INT_REG_0_BIT_FIFO_OVR_I_MSK,
                                                           CFC_REG_FIFO_OVR_INT_REG_0_BIT_FIFO_OVR_I_OFF,
                                                           (value[0] & 0xffffffff));

    /* (0x00000204 bits 31:0) bits 32:63 use field FIFO_OVR_I of register PMC_CFC_REG_FIFO_OVR_INT_REG_1 */
    _cfc_reg_FIFO_OVR_INT_REG_1_action_on_write_field_set( LOG_CALLER_ARGS
                                                           b,
                                                           h,
                                                           CFC_REG_FIFO_OVR_INT_REG_1_BIT_FIFO_OVR_I_MSK,
                                                           CFC_REG_FIFO_OVR_INT_REG_1_BIT_FIFO_OVR_I_OFF,
                                                           (value[1] & 0xffffffff));

    /* (0x00000208 bits 31:0) bits 64:95 use field FIFO_OVR_I of register PMC_CFC_REG_FIFO_OVR_INT_REG_2 */
    _cfc_reg_FIFO_OVR_INT_REG_2_action_on_write_field_set( LOG_CALLER_ARGS
                                                           b,
                                                           h,
                                                           CFC_REG_FIFO_OVR_INT_REG_2_BIT_FIFO_OVR_I_MSK,
                                                           CFC_REG_FIFO_OVR_INT_REG_2_BIT_FIFO_OVR_I_OFF,
                                                           (value[2] & 0xffffffff));

    /* (0x0000020c bits 31:0) bits 96:127 use field FIFO_OVR_I of register PMC_CFC_REG_FIFO_OVR_INT_REG_3 */
    _cfc_reg_FIFO_OVR_INT_REG_3_action_on_write_field_set( LOG_CALLER_ARGS
                                                           b,
                                                           h,
                                                           CFC_REG_FIFO_OVR_INT_REG_3_BIT_FIFO_OVR_I_MSK,
                                                           CFC_REG_FIFO_OVR_INT_REG_3_BIT_FIFO_OVR_I_OFF,
                                                           (value[3] & 0xffffffff));
}


#ifndef cfc_lfield_FIFO_OVR_I_get
#define cfc_lfield_FIFO_OVR_I_get( b, h, value ) \
       _cfc_lfield_FIFO_OVR_I_get( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_lfield_FIFO_OVR_I_get( LOG_CALLER_DEFN
                                               cfc_buffer_t *b,
                                               cfc_handle_t *h,
                                               UINT32 value[4] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<4;i++)
        value[i] = 0;

    /* (0x00000200 bits 31:0) bits 0:31 use field FIFO_OVR_I of register PMC_CFC_REG_FIFO_OVR_INT_REG_0 */
    reg_value = _cfc_reg_FIFO_OVR_INT_REG_0_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & CFC_REG_FIFO_OVR_INT_REG_0_BIT_FIFO_OVR_I_MSK) >> CFC_REG_FIFO_OVR_INT_REG_0_BIT_FIFO_OVR_I_OFF;
    value[0] |= field_value;

    /* (0x00000204 bits 31:0) bits 32:63 use field FIFO_OVR_I of register PMC_CFC_REG_FIFO_OVR_INT_REG_1 */
    reg_value = _cfc_reg_FIFO_OVR_INT_REG_1_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & CFC_REG_FIFO_OVR_INT_REG_1_BIT_FIFO_OVR_I_MSK) >> CFC_REG_FIFO_OVR_INT_REG_1_BIT_FIFO_OVR_I_OFF;
    value[1] |= field_value;

    /* (0x00000208 bits 31:0) bits 64:95 use field FIFO_OVR_I of register PMC_CFC_REG_FIFO_OVR_INT_REG_2 */
    reg_value = _cfc_reg_FIFO_OVR_INT_REG_2_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & CFC_REG_FIFO_OVR_INT_REG_2_BIT_FIFO_OVR_I_MSK) >> CFC_REG_FIFO_OVR_INT_REG_2_BIT_FIFO_OVR_I_OFF;
    value[2] |= field_value;

    /* (0x0000020c bits 31:0) bits 96:127 use field FIFO_OVR_I of register PMC_CFC_REG_FIFO_OVR_INT_REG_3 */
    reg_value = _cfc_reg_FIFO_OVR_INT_REG_3_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & CFC_REG_FIFO_OVR_INT_REG_3_BIT_FIFO_OVR_I_MSK) >> CFC_REG_FIFO_OVR_INT_REG_3_BIT_FIFO_OVR_I_OFF;
    value[3] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x 0x%08x", "cfc_lfield_FIFO_OVR_I_get", value[3] , value[2] , value[1] , value[0] );

}

#ifndef cfc_lfield_range_FIFO_OVR_I_set_to_clear
#define cfc_lfield_range_FIFO_OVR_I_set_to_clear( b, h, start_bit, stop_bit, value ) \
       _cfc_lfield_range_FIFO_OVR_I_set_to_clear( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _cfc_lfield_range_FIFO_OVR_I_set_to_clear( LOG_CALLER_DEFN
                                                              cfc_buffer_t *b,
                                                              cfc_handle_t *h,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "cfc_lfield_range_FIFO_OVR_I_set_to_clear", stop_bit, start_bit );
    if (stop_bit > 127) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "cfc_lfield_range_FIFO_OVR_I_set_to_clear", stop_bit, 127 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "cfc_lfield_range_FIFO_OVR_I_set_to_clear", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000200 bits 31:0) bits 0:31 use field FIFO_OVR_I of register PMC_CFC_REG_FIFO_OVR_INT_REG_0 */
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000200 bits 31:0) bits 0:31 use field FIFO_OVR_I of register PMC_CFC_REG_FIFO_OVR_INT_REG_0 */
        _cfc_reg_FIFO_OVR_INT_REG_0_action_on_write_field_set( LOG_CALLER_ARGS
                                                               b,
                                                               h,
                                                               subfield_mask << (CFC_REG_FIFO_OVR_INT_REG_0_BIT_FIFO_OVR_I_OFF + subfield_offset),
                                                               CFC_REG_FIFO_OVR_INT_REG_0_BIT_FIFO_OVR_I_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000204 bits 31:0) bits 32:63 use field FIFO_OVR_I of register PMC_CFC_REG_FIFO_OVR_INT_REG_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000204 bits 31:0) bits 32:63 use field FIFO_OVR_I of register PMC_CFC_REG_FIFO_OVR_INT_REG_1 */
        _cfc_reg_FIFO_OVR_INT_REG_1_action_on_write_field_set( LOG_CALLER_ARGS
                                                               b,
                                                               h,
                                                               subfield_mask << (CFC_REG_FIFO_OVR_INT_REG_1_BIT_FIFO_OVR_I_OFF + subfield_offset),
                                                               CFC_REG_FIFO_OVR_INT_REG_1_BIT_FIFO_OVR_I_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000208 bits 31:0) bits 64:95 use field FIFO_OVR_I of register PMC_CFC_REG_FIFO_OVR_INT_REG_2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000208 bits 31:0) bits 64:95 use field FIFO_OVR_I of register PMC_CFC_REG_FIFO_OVR_INT_REG_2 */
        _cfc_reg_FIFO_OVR_INT_REG_2_action_on_write_field_set( LOG_CALLER_ARGS
                                                               b,
                                                               h,
                                                               subfield_mask << (CFC_REG_FIFO_OVR_INT_REG_2_BIT_FIFO_OVR_I_OFF + subfield_offset),
                                                               CFC_REG_FIFO_OVR_INT_REG_2_BIT_FIFO_OVR_I_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x0000020c bits 31:0) bits 96:127 use field FIFO_OVR_I of register PMC_CFC_REG_FIFO_OVR_INT_REG_3 */
    if ((start_bit <= 127) && (stop_bit >= 96)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 96) {
            subfield_offset = start_bit - 96;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  96 - start_bit;
            subfield_start_bit = 96;
        }
        if (stop_bit < 127) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 127;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000020c bits 31:0) bits 96:127 use field FIFO_OVR_I of register PMC_CFC_REG_FIFO_OVR_INT_REG_3 */
        _cfc_reg_FIFO_OVR_INT_REG_3_action_on_write_field_set( LOG_CALLER_ARGS
                                                               b,
                                                               h,
                                                               subfield_mask << (CFC_REG_FIFO_OVR_INT_REG_3_BIT_FIFO_OVR_I_OFF + subfield_offset),
                                                               CFC_REG_FIFO_OVR_INT_REG_3_BIT_FIFO_OVR_I_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}


#ifndef cfc_lfield_range_FIFO_OVR_I_get
#define cfc_lfield_range_FIFO_OVR_I_get( b, h, start_bit, stop_bit ) \
       _cfc_lfield_range_FIFO_OVR_I_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _cfc_lfield_range_FIFO_OVR_I_get( LOG_CALLER_DEFN
                                                       cfc_buffer_t *b,
                                                       cfc_handle_t *h,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "cfc_lfield_range_FIFO_OVR_I_get", stop_bit, start_bit );
    if (stop_bit > 127) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "cfc_lfield_range_FIFO_OVR_I_get", stop_bit, 127 );
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000200 bits 31:0) bits 0:31 use field FIFO_OVR_I of register PMC_CFC_REG_FIFO_OVR_INT_REG_0 */
        reg_value = _cfc_reg_FIFO_OVR_INT_REG_0_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & CFC_REG_FIFO_OVR_INT_REG_0_BIT_FIFO_OVR_I_MSK)
                      >> CFC_REG_FIFO_OVR_INT_REG_0_BIT_FIFO_OVR_I_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_FIFO_OVR_INT_REG_0_BIT_FIFO_OVR_I_MSK, CFC_REG_FIFO_OVR_INT_REG_0_BIT_FIFO_OVR_I_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000204 bits 31:0) bits 32:63 use field FIFO_OVR_I of register PMC_CFC_REG_FIFO_OVR_INT_REG_1 */
        reg_value = _cfc_reg_FIFO_OVR_INT_REG_1_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & CFC_REG_FIFO_OVR_INT_REG_1_BIT_FIFO_OVR_I_MSK)
                      >> CFC_REG_FIFO_OVR_INT_REG_1_BIT_FIFO_OVR_I_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_FIFO_OVR_INT_REG_1_BIT_FIFO_OVR_I_MSK, CFC_REG_FIFO_OVR_INT_REG_1_BIT_FIFO_OVR_I_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000208 bits 31:0) bits 64:95 use field FIFO_OVR_I of register PMC_CFC_REG_FIFO_OVR_INT_REG_2 */
        reg_value = _cfc_reg_FIFO_OVR_INT_REG_2_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & CFC_REG_FIFO_OVR_INT_REG_2_BIT_FIFO_OVR_I_MSK)
                      >> CFC_REG_FIFO_OVR_INT_REG_2_BIT_FIFO_OVR_I_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_FIFO_OVR_INT_REG_2_BIT_FIFO_OVR_I_MSK, CFC_REG_FIFO_OVR_INT_REG_2_BIT_FIFO_OVR_I_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 127) && (stop_bit >= 96)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 96) {
            subfield_offset = start_bit - 96;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 96 - start_bit;
            subfield_start_bit = 96;
        }
        if (stop_bit < 127) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 127;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000020c bits 31:0) bits 96:127 use field FIFO_OVR_I of register PMC_CFC_REG_FIFO_OVR_INT_REG_3 */
        reg_value = _cfc_reg_FIFO_OVR_INT_REG_3_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & CFC_REG_FIFO_OVR_INT_REG_3_BIT_FIFO_OVR_I_MSK)
                      >> CFC_REG_FIFO_OVR_INT_REG_3_BIT_FIFO_OVR_I_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_FIFO_OVR_INT_REG_3_BIT_FIFO_OVR_I_MSK, CFC_REG_FIFO_OVR_INT_REG_3_BIT_FIFO_OVR_I_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "cfc_lfield_range_FIFO_OVR_I_get", start_bit, stop_bit, value );

    return value;
}

#ifndef cfc_lfield_range_FIFO_OVR_I_poll_bit
#define cfc_lfield_range_FIFO_OVR_I_poll_bit( b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _cfc_lfield_range_FIFO_OVR_I_poll_bit( LOG_CALLER b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _cfc_lfield_range_FIFO_OVR_I_poll_bit( LOG_CALLER_DEFN
                                                               cfc_buffer_t *b,
                                                               cfc_handle_t *h,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value,
                                                               UINT32 max_count,
                                                               UINT32 *num_failed_polls,
                                                               UINT32 delay_between_polls_in_microseconds )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "cfc_lfield_range_FIFO_OVR_I_poll_bit", stop_bit, start_bit );
    if (stop_bit > 127) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "cfc_lfield_range_FIFO_OVR_I_poll_bit", stop_bit, 127 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "cfc_lfield_range_FIFO_OVR_I_poll_bit", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000200 bits 31:0) bits 0:31 use field FIFO_OVR_I of register PMC_CFC_REG_FIFO_OVR_INT_REG_0 */
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000200 bits 31:0) bits 0:31 use field FIFO_OVR_I of register PMC_CFC_REG_FIFO_OVR_INT_REG_0 */
        return _cfc_reg_FIFO_OVR_INT_REG_0_poll_bit( LOG_CALLER_ARGS
                                                     b,
                                                     h,
                                                     subfield_mask << (CFC_REG_FIFO_OVR_INT_REG_0_BIT_FIFO_OVR_I_OFF + subfield_offset),
                                                     value << (CFC_REG_FIFO_OVR_INT_REG_0_BIT_FIFO_OVR_I_OFF + subfield_offset),
                                                     max_count,
                                                     num_failed_polls,
                                                     delay_between_polls_in_microseconds);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000204 bits 31:0) bits 32:63 use field FIFO_OVR_I of register PMC_CFC_REG_FIFO_OVR_INT_REG_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000204 bits 31:0) bits 32:63 use field FIFO_OVR_I of register PMC_CFC_REG_FIFO_OVR_INT_REG_1 */
        return _cfc_reg_FIFO_OVR_INT_REG_1_poll_bit( LOG_CALLER_ARGS
                                                     b,
                                                     h,
                                                     subfield_mask << (CFC_REG_FIFO_OVR_INT_REG_1_BIT_FIFO_OVR_I_OFF + subfield_offset),
                                                     value << (CFC_REG_FIFO_OVR_INT_REG_1_BIT_FIFO_OVR_I_OFF + subfield_offset),
                                                     max_count,
                                                     num_failed_polls,
                                                     delay_between_polls_in_microseconds);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000208 bits 31:0) bits 64:95 use field FIFO_OVR_I of register PMC_CFC_REG_FIFO_OVR_INT_REG_2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000208 bits 31:0) bits 64:95 use field FIFO_OVR_I of register PMC_CFC_REG_FIFO_OVR_INT_REG_2 */
        return _cfc_reg_FIFO_OVR_INT_REG_2_poll_bit( LOG_CALLER_ARGS
                                                     b,
                                                     h,
                                                     subfield_mask << (CFC_REG_FIFO_OVR_INT_REG_2_BIT_FIFO_OVR_I_OFF + subfield_offset),
                                                     value << (CFC_REG_FIFO_OVR_INT_REG_2_BIT_FIFO_OVR_I_OFF + subfield_offset),
                                                     max_count,
                                                     num_failed_polls,
                                                     delay_between_polls_in_microseconds);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x0000020c bits 31:0) bits 96:127 use field FIFO_OVR_I of register PMC_CFC_REG_FIFO_OVR_INT_REG_3 */
    if ((start_bit <= 127) && (stop_bit >= 96)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 96) {
            subfield_offset = start_bit - 96;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  96 - start_bit;
            subfield_start_bit = 96;
        }
        if (stop_bit < 127) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 127;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000020c bits 31:0) bits 96:127 use field FIFO_OVR_I of register PMC_CFC_REG_FIFO_OVR_INT_REG_3 */
        return _cfc_reg_FIFO_OVR_INT_REG_3_poll_bit( LOG_CALLER_ARGS
                                                     b,
                                                     h,
                                                     subfield_mask << (CFC_REG_FIFO_OVR_INT_REG_3_BIT_FIFO_OVR_I_OFF + subfield_offset),
                                                     value << (CFC_REG_FIFO_OVR_INT_REG_3_BIT_FIFO_OVR_I_OFF + subfield_offset),
                                                     max_count,
                                                     num_failed_polls,
                                                     delay_between_polls_in_microseconds);
    }
    return PMC_ERR_INVALID_PARAMETERS;
}


#ifndef cfc_lfield_FIFO_OVR_I_poll_bit
#define cfc_lfield_FIFO_OVR_I_poll_bit( b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _cfc_lfield_FIFO_OVR_I_poll_bit( LOG_CALLER b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _cfc_lfield_FIFO_OVR_I_poll_bit( LOG_CALLER_DEFN
                                                         cfc_buffer_t *b,
                                                         cfc_handle_t *h,
                                                         UINT32 value[4],
                                                         UINT32 max_count,
                                                         UINT32 *num_failed_polls,
                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x 0x%08x 0x%08x 0x%08x", "cfc_lfield_FIFO_OVR_I_poll_bit", value[3] , value[2] , value[1] , value[0] );

    /* (0x00000200 bits 31:0) bits 0:31 use field FIFO_OVR_I of register PMC_CFC_REG_FIFO_OVR_INT_REG_0 */
    return _cfc_reg_FIFO_OVR_INT_REG_0_poll_bit( LOG_CALLER_ARGS
                                                 b,
                                                 h,
                                                 CFC_REG_FIFO_OVR_INT_REG_0_BIT_FIFO_OVR_I_MSK,
                                                 ((value[0] & 0xffffffff)<<CFC_REG_FIFO_OVR_INT_REG_0_BIT_FIFO_OVR_I_OFF),
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);

    /* (0x00000204 bits 31:0) bits 32:63 use field FIFO_OVR_I of register PMC_CFC_REG_FIFO_OVR_INT_REG_1 */
    return _cfc_reg_FIFO_OVR_INT_REG_1_poll_bit( LOG_CALLER_ARGS
                                                 b,
                                                 h,
                                                 CFC_REG_FIFO_OVR_INT_REG_1_BIT_FIFO_OVR_I_MSK,
                                                 ((value[1] & 0xffffffff)<<CFC_REG_FIFO_OVR_INT_REG_1_BIT_FIFO_OVR_I_OFF),
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);

    /* (0x00000208 bits 31:0) bits 64:95 use field FIFO_OVR_I of register PMC_CFC_REG_FIFO_OVR_INT_REG_2 */
    return _cfc_reg_FIFO_OVR_INT_REG_2_poll_bit( LOG_CALLER_ARGS
                                                 b,
                                                 h,
                                                 CFC_REG_FIFO_OVR_INT_REG_2_BIT_FIFO_OVR_I_MSK,
                                                 ((value[2] & 0xffffffff)<<CFC_REG_FIFO_OVR_INT_REG_2_BIT_FIFO_OVR_I_OFF),
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);

    /* (0x0000020c bits 31:0) bits 96:127 use field FIFO_OVR_I of register PMC_CFC_REG_FIFO_OVR_INT_REG_3 */
    return _cfc_reg_FIFO_OVR_INT_REG_3_poll_bit( LOG_CALLER_ARGS
                                                 b,
                                                 h,
                                                 CFC_REG_FIFO_OVR_INT_REG_3_BIT_FIFO_OVR_I_MSK,
                                                 ((value[3] & 0xffffffff)<<CFC_REG_FIFO_OVR_INT_REG_3_BIT_FIFO_OVR_I_OFF),
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}


#ifndef cfc_lfield_FIFO_UDR_I_set_to_clear
#define cfc_lfield_FIFO_UDR_I_set_to_clear( b, h, value ) \
       _cfc_lfield_FIFO_UDR_I_set_to_clear( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_lfield_FIFO_UDR_I_set_to_clear( LOG_CALLER_DEFN
                                                        cfc_buffer_t *b,
                                                        cfc_handle_t *h,
                                                        UINT32 value[4] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x 0x%08x", "cfc_lfield_FIFO_UDR_I_set_to_clear", value[3] , value[2] , value[1] , value[0] );

    /* (0x00000220 bits 31:0) bits 0:31 use field FIFO_UDR_I of register PMC_CFC_REG_FIFO_UDR_INT_REG_0 */
    _cfc_reg_FIFO_UDR_INT_REG_0_action_on_write_field_set( LOG_CALLER_ARGS
                                                           b,
                                                           h,
                                                           CFC_REG_FIFO_UDR_INT_REG_0_BIT_FIFO_UDR_I_MSK,
                                                           CFC_REG_FIFO_UDR_INT_REG_0_BIT_FIFO_UDR_I_OFF,
                                                           (value[0] & 0xffffffff));

    /* (0x00000224 bits 31:0) bits 32:63 use field FIFO_UDR_I of register PMC_CFC_REG_FIFO_UDR_INT_REG_1 */
    _cfc_reg_FIFO_UDR_INT_REG_1_action_on_write_field_set( LOG_CALLER_ARGS
                                                           b,
                                                           h,
                                                           CFC_REG_FIFO_UDR_INT_REG_1_BIT_FIFO_UDR_I_MSK,
                                                           CFC_REG_FIFO_UDR_INT_REG_1_BIT_FIFO_UDR_I_OFF,
                                                           (value[1] & 0xffffffff));

    /* (0x00000228 bits 31:0) bits 64:95 use field FIFO_UDR_I of register PMC_CFC_REG_FIFO_UDR_INT_REG_2 */
    _cfc_reg_FIFO_UDR_INT_REG_2_action_on_write_field_set( LOG_CALLER_ARGS
                                                           b,
                                                           h,
                                                           CFC_REG_FIFO_UDR_INT_REG_2_BIT_FIFO_UDR_I_MSK,
                                                           CFC_REG_FIFO_UDR_INT_REG_2_BIT_FIFO_UDR_I_OFF,
                                                           (value[2] & 0xffffffff));

    /* (0x0000022c bits 31:0) bits 96:127 use field FIFO_UDR_I of register PMC_CFC_REG_FIFO_UDR_INT_REG_3 */
    _cfc_reg_FIFO_UDR_INT_REG_3_action_on_write_field_set( LOG_CALLER_ARGS
                                                           b,
                                                           h,
                                                           CFC_REG_FIFO_UDR_INT_REG_3_BIT_FIFO_UDR_I_MSK,
                                                           CFC_REG_FIFO_UDR_INT_REG_3_BIT_FIFO_UDR_I_OFF,
                                                           (value[3] & 0xffffffff));
}


#ifndef cfc_lfield_FIFO_UDR_I_get
#define cfc_lfield_FIFO_UDR_I_get( b, h, value ) \
       _cfc_lfield_FIFO_UDR_I_get( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_lfield_FIFO_UDR_I_get( LOG_CALLER_DEFN
                                               cfc_buffer_t *b,
                                               cfc_handle_t *h,
                                               UINT32 value[4] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<4;i++)
        value[i] = 0;

    /* (0x00000220 bits 31:0) bits 0:31 use field FIFO_UDR_I of register PMC_CFC_REG_FIFO_UDR_INT_REG_0 */
    reg_value = _cfc_reg_FIFO_UDR_INT_REG_0_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & CFC_REG_FIFO_UDR_INT_REG_0_BIT_FIFO_UDR_I_MSK) >> CFC_REG_FIFO_UDR_INT_REG_0_BIT_FIFO_UDR_I_OFF;
    value[0] |= field_value;

    /* (0x00000224 bits 31:0) bits 32:63 use field FIFO_UDR_I of register PMC_CFC_REG_FIFO_UDR_INT_REG_1 */
    reg_value = _cfc_reg_FIFO_UDR_INT_REG_1_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & CFC_REG_FIFO_UDR_INT_REG_1_BIT_FIFO_UDR_I_MSK) >> CFC_REG_FIFO_UDR_INT_REG_1_BIT_FIFO_UDR_I_OFF;
    value[1] |= field_value;

    /* (0x00000228 bits 31:0) bits 64:95 use field FIFO_UDR_I of register PMC_CFC_REG_FIFO_UDR_INT_REG_2 */
    reg_value = _cfc_reg_FIFO_UDR_INT_REG_2_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & CFC_REG_FIFO_UDR_INT_REG_2_BIT_FIFO_UDR_I_MSK) >> CFC_REG_FIFO_UDR_INT_REG_2_BIT_FIFO_UDR_I_OFF;
    value[2] |= field_value;

    /* (0x0000022c bits 31:0) bits 96:127 use field FIFO_UDR_I of register PMC_CFC_REG_FIFO_UDR_INT_REG_3 */
    reg_value = _cfc_reg_FIFO_UDR_INT_REG_3_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & CFC_REG_FIFO_UDR_INT_REG_3_BIT_FIFO_UDR_I_MSK) >> CFC_REG_FIFO_UDR_INT_REG_3_BIT_FIFO_UDR_I_OFF;
    value[3] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x 0x%08x", "cfc_lfield_FIFO_UDR_I_get", value[3] , value[2] , value[1] , value[0] );

}

#ifndef cfc_lfield_range_FIFO_UDR_I_set_to_clear
#define cfc_lfield_range_FIFO_UDR_I_set_to_clear( b, h, start_bit, stop_bit, value ) \
       _cfc_lfield_range_FIFO_UDR_I_set_to_clear( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _cfc_lfield_range_FIFO_UDR_I_set_to_clear( LOG_CALLER_DEFN
                                                              cfc_buffer_t *b,
                                                              cfc_handle_t *h,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "cfc_lfield_range_FIFO_UDR_I_set_to_clear", stop_bit, start_bit );
    if (stop_bit > 127) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "cfc_lfield_range_FIFO_UDR_I_set_to_clear", stop_bit, 127 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "cfc_lfield_range_FIFO_UDR_I_set_to_clear", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000220 bits 31:0) bits 0:31 use field FIFO_UDR_I of register PMC_CFC_REG_FIFO_UDR_INT_REG_0 */
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000220 bits 31:0) bits 0:31 use field FIFO_UDR_I of register PMC_CFC_REG_FIFO_UDR_INT_REG_0 */
        _cfc_reg_FIFO_UDR_INT_REG_0_action_on_write_field_set( LOG_CALLER_ARGS
                                                               b,
                                                               h,
                                                               subfield_mask << (CFC_REG_FIFO_UDR_INT_REG_0_BIT_FIFO_UDR_I_OFF + subfield_offset),
                                                               CFC_REG_FIFO_UDR_INT_REG_0_BIT_FIFO_UDR_I_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000224 bits 31:0) bits 32:63 use field FIFO_UDR_I of register PMC_CFC_REG_FIFO_UDR_INT_REG_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000224 bits 31:0) bits 32:63 use field FIFO_UDR_I of register PMC_CFC_REG_FIFO_UDR_INT_REG_1 */
        _cfc_reg_FIFO_UDR_INT_REG_1_action_on_write_field_set( LOG_CALLER_ARGS
                                                               b,
                                                               h,
                                                               subfield_mask << (CFC_REG_FIFO_UDR_INT_REG_1_BIT_FIFO_UDR_I_OFF + subfield_offset),
                                                               CFC_REG_FIFO_UDR_INT_REG_1_BIT_FIFO_UDR_I_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000228 bits 31:0) bits 64:95 use field FIFO_UDR_I of register PMC_CFC_REG_FIFO_UDR_INT_REG_2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000228 bits 31:0) bits 64:95 use field FIFO_UDR_I of register PMC_CFC_REG_FIFO_UDR_INT_REG_2 */
        _cfc_reg_FIFO_UDR_INT_REG_2_action_on_write_field_set( LOG_CALLER_ARGS
                                                               b,
                                                               h,
                                                               subfield_mask << (CFC_REG_FIFO_UDR_INT_REG_2_BIT_FIFO_UDR_I_OFF + subfield_offset),
                                                               CFC_REG_FIFO_UDR_INT_REG_2_BIT_FIFO_UDR_I_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x0000022c bits 31:0) bits 96:127 use field FIFO_UDR_I of register PMC_CFC_REG_FIFO_UDR_INT_REG_3 */
    if ((start_bit <= 127) && (stop_bit >= 96)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 96) {
            subfield_offset = start_bit - 96;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  96 - start_bit;
            subfield_start_bit = 96;
        }
        if (stop_bit < 127) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 127;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000022c bits 31:0) bits 96:127 use field FIFO_UDR_I of register PMC_CFC_REG_FIFO_UDR_INT_REG_3 */
        _cfc_reg_FIFO_UDR_INT_REG_3_action_on_write_field_set( LOG_CALLER_ARGS
                                                               b,
                                                               h,
                                                               subfield_mask << (CFC_REG_FIFO_UDR_INT_REG_3_BIT_FIFO_UDR_I_OFF + subfield_offset),
                                                               CFC_REG_FIFO_UDR_INT_REG_3_BIT_FIFO_UDR_I_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}


#ifndef cfc_lfield_range_FIFO_UDR_I_get
#define cfc_lfield_range_FIFO_UDR_I_get( b, h, start_bit, stop_bit ) \
       _cfc_lfield_range_FIFO_UDR_I_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _cfc_lfield_range_FIFO_UDR_I_get( LOG_CALLER_DEFN
                                                       cfc_buffer_t *b,
                                                       cfc_handle_t *h,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "cfc_lfield_range_FIFO_UDR_I_get", stop_bit, start_bit );
    if (stop_bit > 127) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "cfc_lfield_range_FIFO_UDR_I_get", stop_bit, 127 );
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000220 bits 31:0) bits 0:31 use field FIFO_UDR_I of register PMC_CFC_REG_FIFO_UDR_INT_REG_0 */
        reg_value = _cfc_reg_FIFO_UDR_INT_REG_0_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & CFC_REG_FIFO_UDR_INT_REG_0_BIT_FIFO_UDR_I_MSK)
                      >> CFC_REG_FIFO_UDR_INT_REG_0_BIT_FIFO_UDR_I_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_FIFO_UDR_INT_REG_0_BIT_FIFO_UDR_I_MSK, CFC_REG_FIFO_UDR_INT_REG_0_BIT_FIFO_UDR_I_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000224 bits 31:0) bits 32:63 use field FIFO_UDR_I of register PMC_CFC_REG_FIFO_UDR_INT_REG_1 */
        reg_value = _cfc_reg_FIFO_UDR_INT_REG_1_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & CFC_REG_FIFO_UDR_INT_REG_1_BIT_FIFO_UDR_I_MSK)
                      >> CFC_REG_FIFO_UDR_INT_REG_1_BIT_FIFO_UDR_I_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_FIFO_UDR_INT_REG_1_BIT_FIFO_UDR_I_MSK, CFC_REG_FIFO_UDR_INT_REG_1_BIT_FIFO_UDR_I_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000228 bits 31:0) bits 64:95 use field FIFO_UDR_I of register PMC_CFC_REG_FIFO_UDR_INT_REG_2 */
        reg_value = _cfc_reg_FIFO_UDR_INT_REG_2_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & CFC_REG_FIFO_UDR_INT_REG_2_BIT_FIFO_UDR_I_MSK)
                      >> CFC_REG_FIFO_UDR_INT_REG_2_BIT_FIFO_UDR_I_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_FIFO_UDR_INT_REG_2_BIT_FIFO_UDR_I_MSK, CFC_REG_FIFO_UDR_INT_REG_2_BIT_FIFO_UDR_I_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 127) && (stop_bit >= 96)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 96) {
            subfield_offset = start_bit - 96;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 96 - start_bit;
            subfield_start_bit = 96;
        }
        if (stop_bit < 127) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 127;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000022c bits 31:0) bits 96:127 use field FIFO_UDR_I of register PMC_CFC_REG_FIFO_UDR_INT_REG_3 */
        reg_value = _cfc_reg_FIFO_UDR_INT_REG_3_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & CFC_REG_FIFO_UDR_INT_REG_3_BIT_FIFO_UDR_I_MSK)
                      >> CFC_REG_FIFO_UDR_INT_REG_3_BIT_FIFO_UDR_I_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_FIFO_UDR_INT_REG_3_BIT_FIFO_UDR_I_MSK, CFC_REG_FIFO_UDR_INT_REG_3_BIT_FIFO_UDR_I_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "cfc_lfield_range_FIFO_UDR_I_get", start_bit, stop_bit, value );

    return value;
}

#ifndef cfc_lfield_range_FIFO_UDR_I_poll_bit
#define cfc_lfield_range_FIFO_UDR_I_poll_bit( b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _cfc_lfield_range_FIFO_UDR_I_poll_bit( LOG_CALLER b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _cfc_lfield_range_FIFO_UDR_I_poll_bit( LOG_CALLER_DEFN
                                                               cfc_buffer_t *b,
                                                               cfc_handle_t *h,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value,
                                                               UINT32 max_count,
                                                               UINT32 *num_failed_polls,
                                                               UINT32 delay_between_polls_in_microseconds )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "cfc_lfield_range_FIFO_UDR_I_poll_bit", stop_bit, start_bit );
    if (stop_bit > 127) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "cfc_lfield_range_FIFO_UDR_I_poll_bit", stop_bit, 127 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "cfc_lfield_range_FIFO_UDR_I_poll_bit", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000220 bits 31:0) bits 0:31 use field FIFO_UDR_I of register PMC_CFC_REG_FIFO_UDR_INT_REG_0 */
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000220 bits 31:0) bits 0:31 use field FIFO_UDR_I of register PMC_CFC_REG_FIFO_UDR_INT_REG_0 */
        return _cfc_reg_FIFO_UDR_INT_REG_0_poll_bit( LOG_CALLER_ARGS
                                                     b,
                                                     h,
                                                     subfield_mask << (CFC_REG_FIFO_UDR_INT_REG_0_BIT_FIFO_UDR_I_OFF + subfield_offset),
                                                     value << (CFC_REG_FIFO_UDR_INT_REG_0_BIT_FIFO_UDR_I_OFF + subfield_offset),
                                                     max_count,
                                                     num_failed_polls,
                                                     delay_between_polls_in_microseconds);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000224 bits 31:0) bits 32:63 use field FIFO_UDR_I of register PMC_CFC_REG_FIFO_UDR_INT_REG_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000224 bits 31:0) bits 32:63 use field FIFO_UDR_I of register PMC_CFC_REG_FIFO_UDR_INT_REG_1 */
        return _cfc_reg_FIFO_UDR_INT_REG_1_poll_bit( LOG_CALLER_ARGS
                                                     b,
                                                     h,
                                                     subfield_mask << (CFC_REG_FIFO_UDR_INT_REG_1_BIT_FIFO_UDR_I_OFF + subfield_offset),
                                                     value << (CFC_REG_FIFO_UDR_INT_REG_1_BIT_FIFO_UDR_I_OFF + subfield_offset),
                                                     max_count,
                                                     num_failed_polls,
                                                     delay_between_polls_in_microseconds);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000228 bits 31:0) bits 64:95 use field FIFO_UDR_I of register PMC_CFC_REG_FIFO_UDR_INT_REG_2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000228 bits 31:0) bits 64:95 use field FIFO_UDR_I of register PMC_CFC_REG_FIFO_UDR_INT_REG_2 */
        return _cfc_reg_FIFO_UDR_INT_REG_2_poll_bit( LOG_CALLER_ARGS
                                                     b,
                                                     h,
                                                     subfield_mask << (CFC_REG_FIFO_UDR_INT_REG_2_BIT_FIFO_UDR_I_OFF + subfield_offset),
                                                     value << (CFC_REG_FIFO_UDR_INT_REG_2_BIT_FIFO_UDR_I_OFF + subfield_offset),
                                                     max_count,
                                                     num_failed_polls,
                                                     delay_between_polls_in_microseconds);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x0000022c bits 31:0) bits 96:127 use field FIFO_UDR_I of register PMC_CFC_REG_FIFO_UDR_INT_REG_3 */
    if ((start_bit <= 127) && (stop_bit >= 96)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 96) {
            subfield_offset = start_bit - 96;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  96 - start_bit;
            subfield_start_bit = 96;
        }
        if (stop_bit < 127) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 127;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000022c bits 31:0) bits 96:127 use field FIFO_UDR_I of register PMC_CFC_REG_FIFO_UDR_INT_REG_3 */
        return _cfc_reg_FIFO_UDR_INT_REG_3_poll_bit( LOG_CALLER_ARGS
                                                     b,
                                                     h,
                                                     subfield_mask << (CFC_REG_FIFO_UDR_INT_REG_3_BIT_FIFO_UDR_I_OFF + subfield_offset),
                                                     value << (CFC_REG_FIFO_UDR_INT_REG_3_BIT_FIFO_UDR_I_OFF + subfield_offset),
                                                     max_count,
                                                     num_failed_polls,
                                                     delay_between_polls_in_microseconds);
    }
    return PMC_ERR_INVALID_PARAMETERS;
}


#ifndef cfc_lfield_FIFO_UDR_I_poll_bit
#define cfc_lfield_FIFO_UDR_I_poll_bit( b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _cfc_lfield_FIFO_UDR_I_poll_bit( LOG_CALLER b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _cfc_lfield_FIFO_UDR_I_poll_bit( LOG_CALLER_DEFN
                                                         cfc_buffer_t *b,
                                                         cfc_handle_t *h,
                                                         UINT32 value[4],
                                                         UINT32 max_count,
                                                         UINT32 *num_failed_polls,
                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x 0x%08x 0x%08x 0x%08x", "cfc_lfield_FIFO_UDR_I_poll_bit", value[3] , value[2] , value[1] , value[0] );

    /* (0x00000220 bits 31:0) bits 0:31 use field FIFO_UDR_I of register PMC_CFC_REG_FIFO_UDR_INT_REG_0 */
    return _cfc_reg_FIFO_UDR_INT_REG_0_poll_bit( LOG_CALLER_ARGS
                                                 b,
                                                 h,
                                                 CFC_REG_FIFO_UDR_INT_REG_0_BIT_FIFO_UDR_I_MSK,
                                                 ((value[0] & 0xffffffff)<<CFC_REG_FIFO_UDR_INT_REG_0_BIT_FIFO_UDR_I_OFF),
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);

    /* (0x00000224 bits 31:0) bits 32:63 use field FIFO_UDR_I of register PMC_CFC_REG_FIFO_UDR_INT_REG_1 */
    return _cfc_reg_FIFO_UDR_INT_REG_1_poll_bit( LOG_CALLER_ARGS
                                                 b,
                                                 h,
                                                 CFC_REG_FIFO_UDR_INT_REG_1_BIT_FIFO_UDR_I_MSK,
                                                 ((value[1] & 0xffffffff)<<CFC_REG_FIFO_UDR_INT_REG_1_BIT_FIFO_UDR_I_OFF),
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);

    /* (0x00000228 bits 31:0) bits 64:95 use field FIFO_UDR_I of register PMC_CFC_REG_FIFO_UDR_INT_REG_2 */
    return _cfc_reg_FIFO_UDR_INT_REG_2_poll_bit( LOG_CALLER_ARGS
                                                 b,
                                                 h,
                                                 CFC_REG_FIFO_UDR_INT_REG_2_BIT_FIFO_UDR_I_MSK,
                                                 ((value[2] & 0xffffffff)<<CFC_REG_FIFO_UDR_INT_REG_2_BIT_FIFO_UDR_I_OFF),
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);

    /* (0x0000022c bits 31:0) bits 96:127 use field FIFO_UDR_I of register PMC_CFC_REG_FIFO_UDR_INT_REG_3 */
    return _cfc_reg_FIFO_UDR_INT_REG_3_poll_bit( LOG_CALLER_ARGS
                                                 b,
                                                 h,
                                                 CFC_REG_FIFO_UDR_INT_REG_3_BIT_FIFO_UDR_I_MSK,
                                                 ((value[3] & 0xffffffff)<<CFC_REG_FIFO_UDR_INT_REG_3_BIT_FIFO_UDR_I_OFF),
                                                 max_count,
                                                 num_failed_polls,
                                                 delay_between_polls_in_microseconds);
}


#ifndef cfc_lfield_IPT_ERR_I_set_to_clear
#define cfc_lfield_IPT_ERR_I_set_to_clear( b, h, value ) \
       _cfc_lfield_IPT_ERR_I_set_to_clear( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_lfield_IPT_ERR_I_set_to_clear( LOG_CALLER_DEFN
                                                       cfc_buffer_t *b,
                                                       cfc_handle_t *h,
                                                       UINT32 value[4] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x 0x%08x", "cfc_lfield_IPT_ERR_I_set_to_clear", value[3] , value[2] , value[1] , value[0] );

    /* (0x00000240 bits 31:0) bits 0:31 use field IPT_ERR_I of register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_0 */
    _cfc_reg_FIFO_IPT_ERR_INT_REG_0_action_on_write_field_set( LOG_CALLER_ARGS
                                                               b,
                                                               h,
                                                               CFC_REG_FIFO_IPT_ERR_INT_REG_0_BIT_IPT_ERR_I_MSK,
                                                               CFC_REG_FIFO_IPT_ERR_INT_REG_0_BIT_IPT_ERR_I_OFF,
                                                               (value[0] & 0xffffffff));

    /* (0x00000244 bits 31:0) bits 32:63 use field IPT_ERR_I of register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_1 */
    _cfc_reg_FIFO_IPT_ERR_INT_REG_1_action_on_write_field_set( LOG_CALLER_ARGS
                                                               b,
                                                               h,
                                                               CFC_REG_FIFO_IPT_ERR_INT_REG_1_BIT_IPT_ERR_I_MSK,
                                                               CFC_REG_FIFO_IPT_ERR_INT_REG_1_BIT_IPT_ERR_I_OFF,
                                                               (value[1] & 0xffffffff));

    /* (0x00000248 bits 31:0) bits 64:95 use field IPT_ERR_I of register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_2 */
    _cfc_reg_FIFO_IPT_ERR_INT_REG_2_action_on_write_field_set( LOG_CALLER_ARGS
                                                               b,
                                                               h,
                                                               CFC_REG_FIFO_IPT_ERR_INT_REG_2_BIT_IPT_ERR_I_MSK,
                                                               CFC_REG_FIFO_IPT_ERR_INT_REG_2_BIT_IPT_ERR_I_OFF,
                                                               (value[2] & 0xffffffff));

    /* (0x0000024c bits 31:0) bits 96:127 use field IPT_ERR_I of register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_3 */
    _cfc_reg_FIFO_IPT_ERR_INT_REG_3_action_on_write_field_set( LOG_CALLER_ARGS
                                                               b,
                                                               h,
                                                               CFC_REG_FIFO_IPT_ERR_INT_REG_3_BIT_IPT_ERR_I_MSK,
                                                               CFC_REG_FIFO_IPT_ERR_INT_REG_3_BIT_IPT_ERR_I_OFF,
                                                               (value[3] & 0xffffffff));
}


#ifndef cfc_lfield_IPT_ERR_I_get
#define cfc_lfield_IPT_ERR_I_get( b, h, value ) \
       _cfc_lfield_IPT_ERR_I_get( LOG_CALLER b, h, value )
#endif
static INLINE void _cfc_lfield_IPT_ERR_I_get( LOG_CALLER_DEFN
                                              cfc_buffer_t *b,
                                              cfc_handle_t *h,
                                              UINT32 value[4] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<4;i++)
        value[i] = 0;

    /* (0x00000240 bits 31:0) bits 0:31 use field IPT_ERR_I of register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_0 */
    reg_value = _cfc_reg_FIFO_IPT_ERR_INT_REG_0_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & CFC_REG_FIFO_IPT_ERR_INT_REG_0_BIT_IPT_ERR_I_MSK) >> CFC_REG_FIFO_IPT_ERR_INT_REG_0_BIT_IPT_ERR_I_OFF;
    value[0] |= field_value;

    /* (0x00000244 bits 31:0) bits 32:63 use field IPT_ERR_I of register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_1 */
    reg_value = _cfc_reg_FIFO_IPT_ERR_INT_REG_1_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & CFC_REG_FIFO_IPT_ERR_INT_REG_1_BIT_IPT_ERR_I_MSK) >> CFC_REG_FIFO_IPT_ERR_INT_REG_1_BIT_IPT_ERR_I_OFF;
    value[1] |= field_value;

    /* (0x00000248 bits 31:0) bits 64:95 use field IPT_ERR_I of register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_2 */
    reg_value = _cfc_reg_FIFO_IPT_ERR_INT_REG_2_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & CFC_REG_FIFO_IPT_ERR_INT_REG_2_BIT_IPT_ERR_I_MSK) >> CFC_REG_FIFO_IPT_ERR_INT_REG_2_BIT_IPT_ERR_I_OFF;
    value[2] |= field_value;

    /* (0x0000024c bits 31:0) bits 96:127 use field IPT_ERR_I of register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_3 */
    reg_value = _cfc_reg_FIFO_IPT_ERR_INT_REG_3_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & CFC_REG_FIFO_IPT_ERR_INT_REG_3_BIT_IPT_ERR_I_MSK) >> CFC_REG_FIFO_IPT_ERR_INT_REG_3_BIT_IPT_ERR_I_OFF;
    value[3] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x 0x%08x", "cfc_lfield_IPT_ERR_I_get", value[3] , value[2] , value[1] , value[0] );

}

#ifndef cfc_lfield_range_IPT_ERR_I_set_to_clear
#define cfc_lfield_range_IPT_ERR_I_set_to_clear( b, h, start_bit, stop_bit, value ) \
       _cfc_lfield_range_IPT_ERR_I_set_to_clear( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _cfc_lfield_range_IPT_ERR_I_set_to_clear( LOG_CALLER_DEFN
                                                             cfc_buffer_t *b,
                                                             cfc_handle_t *h,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "cfc_lfield_range_IPT_ERR_I_set_to_clear", stop_bit, start_bit );
    if (stop_bit > 127) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "cfc_lfield_range_IPT_ERR_I_set_to_clear", stop_bit, 127 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "cfc_lfield_range_IPT_ERR_I_set_to_clear", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000240 bits 31:0) bits 0:31 use field IPT_ERR_I of register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_0 */
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000240 bits 31:0) bits 0:31 use field IPT_ERR_I of register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_0 */
        _cfc_reg_FIFO_IPT_ERR_INT_REG_0_action_on_write_field_set( LOG_CALLER_ARGS
                                                                   b,
                                                                   h,
                                                                   subfield_mask << (CFC_REG_FIFO_IPT_ERR_INT_REG_0_BIT_IPT_ERR_I_OFF + subfield_offset),
                                                                   CFC_REG_FIFO_IPT_ERR_INT_REG_0_BIT_IPT_ERR_I_OFF + subfield_offset,
                                                                   value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000244 bits 31:0) bits 32:63 use field IPT_ERR_I of register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000244 bits 31:0) bits 32:63 use field IPT_ERR_I of register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_1 */
        _cfc_reg_FIFO_IPT_ERR_INT_REG_1_action_on_write_field_set( LOG_CALLER_ARGS
                                                                   b,
                                                                   h,
                                                                   subfield_mask << (CFC_REG_FIFO_IPT_ERR_INT_REG_1_BIT_IPT_ERR_I_OFF + subfield_offset),
                                                                   CFC_REG_FIFO_IPT_ERR_INT_REG_1_BIT_IPT_ERR_I_OFF + subfield_offset,
                                                                   value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000248 bits 31:0) bits 64:95 use field IPT_ERR_I of register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000248 bits 31:0) bits 64:95 use field IPT_ERR_I of register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_2 */
        _cfc_reg_FIFO_IPT_ERR_INT_REG_2_action_on_write_field_set( LOG_CALLER_ARGS
                                                                   b,
                                                                   h,
                                                                   subfield_mask << (CFC_REG_FIFO_IPT_ERR_INT_REG_2_BIT_IPT_ERR_I_OFF + subfield_offset),
                                                                   CFC_REG_FIFO_IPT_ERR_INT_REG_2_BIT_IPT_ERR_I_OFF + subfield_offset,
                                                                   value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x0000024c bits 31:0) bits 96:127 use field IPT_ERR_I of register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_3 */
    if ((start_bit <= 127) && (stop_bit >= 96)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 96) {
            subfield_offset = start_bit - 96;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  96 - start_bit;
            subfield_start_bit = 96;
        }
        if (stop_bit < 127) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 127;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000024c bits 31:0) bits 96:127 use field IPT_ERR_I of register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_3 */
        _cfc_reg_FIFO_IPT_ERR_INT_REG_3_action_on_write_field_set( LOG_CALLER_ARGS
                                                                   b,
                                                                   h,
                                                                   subfield_mask << (CFC_REG_FIFO_IPT_ERR_INT_REG_3_BIT_IPT_ERR_I_OFF + subfield_offset),
                                                                   CFC_REG_FIFO_IPT_ERR_INT_REG_3_BIT_IPT_ERR_I_OFF + subfield_offset,
                                                                   value >> subfield_shift);
    }
}


#ifndef cfc_lfield_range_IPT_ERR_I_get
#define cfc_lfield_range_IPT_ERR_I_get( b, h, start_bit, stop_bit ) \
       _cfc_lfield_range_IPT_ERR_I_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _cfc_lfield_range_IPT_ERR_I_get( LOG_CALLER_DEFN
                                                      cfc_buffer_t *b,
                                                      cfc_handle_t *h,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "cfc_lfield_range_IPT_ERR_I_get", stop_bit, start_bit );
    if (stop_bit > 127) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "cfc_lfield_range_IPT_ERR_I_get", stop_bit, 127 );
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000240 bits 31:0) bits 0:31 use field IPT_ERR_I of register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_0 */
        reg_value = _cfc_reg_FIFO_IPT_ERR_INT_REG_0_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & CFC_REG_FIFO_IPT_ERR_INT_REG_0_BIT_IPT_ERR_I_MSK)
                      >> CFC_REG_FIFO_IPT_ERR_INT_REG_0_BIT_IPT_ERR_I_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_FIFO_IPT_ERR_INT_REG_0_BIT_IPT_ERR_I_MSK, CFC_REG_FIFO_IPT_ERR_INT_REG_0_BIT_IPT_ERR_I_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000244 bits 31:0) bits 32:63 use field IPT_ERR_I of register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_1 */
        reg_value = _cfc_reg_FIFO_IPT_ERR_INT_REG_1_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & CFC_REG_FIFO_IPT_ERR_INT_REG_1_BIT_IPT_ERR_I_MSK)
                      >> CFC_REG_FIFO_IPT_ERR_INT_REG_1_BIT_IPT_ERR_I_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_FIFO_IPT_ERR_INT_REG_1_BIT_IPT_ERR_I_MSK, CFC_REG_FIFO_IPT_ERR_INT_REG_1_BIT_IPT_ERR_I_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000248 bits 31:0) bits 64:95 use field IPT_ERR_I of register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_2 */
        reg_value = _cfc_reg_FIFO_IPT_ERR_INT_REG_2_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & CFC_REG_FIFO_IPT_ERR_INT_REG_2_BIT_IPT_ERR_I_MSK)
                      >> CFC_REG_FIFO_IPT_ERR_INT_REG_2_BIT_IPT_ERR_I_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_FIFO_IPT_ERR_INT_REG_2_BIT_IPT_ERR_I_MSK, CFC_REG_FIFO_IPT_ERR_INT_REG_2_BIT_IPT_ERR_I_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 127) && (stop_bit >= 96)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 96) {
            subfield_offset = start_bit - 96;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 96 - start_bit;
            subfield_start_bit = 96;
        }
        if (stop_bit < 127) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 127;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000024c bits 31:0) bits 96:127 use field IPT_ERR_I of register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_3 */
        reg_value = _cfc_reg_FIFO_IPT_ERR_INT_REG_3_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & CFC_REG_FIFO_IPT_ERR_INT_REG_3_BIT_IPT_ERR_I_MSK)
                      >> CFC_REG_FIFO_IPT_ERR_INT_REG_3_BIT_IPT_ERR_I_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_FIFO_IPT_ERR_INT_REG_3_BIT_IPT_ERR_I_MSK, CFC_REG_FIFO_IPT_ERR_INT_REG_3_BIT_IPT_ERR_I_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "cfc_lfield_range_IPT_ERR_I_get", start_bit, stop_bit, value );

    return value;
}

#ifndef cfc_lfield_range_IPT_ERR_I_poll_bit
#define cfc_lfield_range_IPT_ERR_I_poll_bit( b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _cfc_lfield_range_IPT_ERR_I_poll_bit( LOG_CALLER b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _cfc_lfield_range_IPT_ERR_I_poll_bit( LOG_CALLER_DEFN
                                                              cfc_buffer_t *b,
                                                              cfc_handle_t *h,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value,
                                                              UINT32 max_count,
                                                              UINT32 *num_failed_polls,
                                                              UINT32 delay_between_polls_in_microseconds )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "cfc_lfield_range_IPT_ERR_I_poll_bit", stop_bit, start_bit );
    if (stop_bit > 127) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "cfc_lfield_range_IPT_ERR_I_poll_bit", stop_bit, 127 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "cfc_lfield_range_IPT_ERR_I_poll_bit", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000240 bits 31:0) bits 0:31 use field IPT_ERR_I of register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_0 */
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000240 bits 31:0) bits 0:31 use field IPT_ERR_I of register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_0 */
        return _cfc_reg_FIFO_IPT_ERR_INT_REG_0_poll_bit( LOG_CALLER_ARGS
                                                         b,
                                                         h,
                                                         subfield_mask << (CFC_REG_FIFO_IPT_ERR_INT_REG_0_BIT_IPT_ERR_I_OFF + subfield_offset),
                                                         value << (CFC_REG_FIFO_IPT_ERR_INT_REG_0_BIT_IPT_ERR_I_OFF + subfield_offset),
                                                         max_count,
                                                         num_failed_polls,
                                                         delay_between_polls_in_microseconds);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000244 bits 31:0) bits 32:63 use field IPT_ERR_I of register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000244 bits 31:0) bits 32:63 use field IPT_ERR_I of register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_1 */
        return _cfc_reg_FIFO_IPT_ERR_INT_REG_1_poll_bit( LOG_CALLER_ARGS
                                                         b,
                                                         h,
                                                         subfield_mask << (CFC_REG_FIFO_IPT_ERR_INT_REG_1_BIT_IPT_ERR_I_OFF + subfield_offset),
                                                         value << (CFC_REG_FIFO_IPT_ERR_INT_REG_1_BIT_IPT_ERR_I_OFF + subfield_offset),
                                                         max_count,
                                                         num_failed_polls,
                                                         delay_between_polls_in_microseconds);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000248 bits 31:0) bits 64:95 use field IPT_ERR_I of register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000248 bits 31:0) bits 64:95 use field IPT_ERR_I of register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_2 */
        return _cfc_reg_FIFO_IPT_ERR_INT_REG_2_poll_bit( LOG_CALLER_ARGS
                                                         b,
                                                         h,
                                                         subfield_mask << (CFC_REG_FIFO_IPT_ERR_INT_REG_2_BIT_IPT_ERR_I_OFF + subfield_offset),
                                                         value << (CFC_REG_FIFO_IPT_ERR_INT_REG_2_BIT_IPT_ERR_I_OFF + subfield_offset),
                                                         max_count,
                                                         num_failed_polls,
                                                         delay_between_polls_in_microseconds);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x0000024c bits 31:0) bits 96:127 use field IPT_ERR_I of register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_3 */
    if ((start_bit <= 127) && (stop_bit >= 96)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 96) {
            subfield_offset = start_bit - 96;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  96 - start_bit;
            subfield_start_bit = 96;
        }
        if (stop_bit < 127) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 127;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000024c bits 31:0) bits 96:127 use field IPT_ERR_I of register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_3 */
        return _cfc_reg_FIFO_IPT_ERR_INT_REG_3_poll_bit( LOG_CALLER_ARGS
                                                         b,
                                                         h,
                                                         subfield_mask << (CFC_REG_FIFO_IPT_ERR_INT_REG_3_BIT_IPT_ERR_I_OFF + subfield_offset),
                                                         value << (CFC_REG_FIFO_IPT_ERR_INT_REG_3_BIT_IPT_ERR_I_OFF + subfield_offset),
                                                         max_count,
                                                         num_failed_polls,
                                                         delay_between_polls_in_microseconds);
    }
    return PMC_ERR_INVALID_PARAMETERS;
}


#ifndef cfc_lfield_IPT_ERR_I_poll_bit
#define cfc_lfield_IPT_ERR_I_poll_bit( b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _cfc_lfield_IPT_ERR_I_poll_bit( LOG_CALLER b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _cfc_lfield_IPT_ERR_I_poll_bit( LOG_CALLER_DEFN
                                                        cfc_buffer_t *b,
                                                        cfc_handle_t *h,
                                                        UINT32 value[4],
                                                        UINT32 max_count,
                                                        UINT32 *num_failed_polls,
                                                        UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x 0x%08x 0x%08x 0x%08x", "cfc_lfield_IPT_ERR_I_poll_bit", value[3] , value[2] , value[1] , value[0] );

    /* (0x00000240 bits 31:0) bits 0:31 use field IPT_ERR_I of register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_0 */
    return _cfc_reg_FIFO_IPT_ERR_INT_REG_0_poll_bit( LOG_CALLER_ARGS
                                                     b,
                                                     h,
                                                     CFC_REG_FIFO_IPT_ERR_INT_REG_0_BIT_IPT_ERR_I_MSK,
                                                     ((value[0] & 0xffffffff)<<CFC_REG_FIFO_IPT_ERR_INT_REG_0_BIT_IPT_ERR_I_OFF),
                                                     max_count,
                                                     num_failed_polls,
                                                     delay_between_polls_in_microseconds);

    /* (0x00000244 bits 31:0) bits 32:63 use field IPT_ERR_I of register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_1 */
    return _cfc_reg_FIFO_IPT_ERR_INT_REG_1_poll_bit( LOG_CALLER_ARGS
                                                     b,
                                                     h,
                                                     CFC_REG_FIFO_IPT_ERR_INT_REG_1_BIT_IPT_ERR_I_MSK,
                                                     ((value[1] & 0xffffffff)<<CFC_REG_FIFO_IPT_ERR_INT_REG_1_BIT_IPT_ERR_I_OFF),
                                                     max_count,
                                                     num_failed_polls,
                                                     delay_between_polls_in_microseconds);

    /* (0x00000248 bits 31:0) bits 64:95 use field IPT_ERR_I of register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_2 */
    return _cfc_reg_FIFO_IPT_ERR_INT_REG_2_poll_bit( LOG_CALLER_ARGS
                                                     b,
                                                     h,
                                                     CFC_REG_FIFO_IPT_ERR_INT_REG_2_BIT_IPT_ERR_I_MSK,
                                                     ((value[2] & 0xffffffff)<<CFC_REG_FIFO_IPT_ERR_INT_REG_2_BIT_IPT_ERR_I_OFF),
                                                     max_count,
                                                     num_failed_polls,
                                                     delay_between_polls_in_microseconds);

    /* (0x0000024c bits 31:0) bits 96:127 use field IPT_ERR_I of register PMC_CFC_REG_FIFO_IPT_ERR_INT_REG_3 */
    return _cfc_reg_FIFO_IPT_ERR_INT_REG_3_poll_bit( LOG_CALLER_ARGS
                                                     b,
                                                     h,
                                                     CFC_REG_FIFO_IPT_ERR_INT_REG_3_BIT_IPT_ERR_I_MSK,
                                                     ((value[3] & 0xffffffff)<<CFC_REG_FIFO_IPT_ERR_INT_REG_3_BIT_IPT_ERR_I_OFF),
                                                     max_count,
                                                     num_failed_polls,
                                                     delay_between_polls_in_microseconds);
}


/*
 * ==================================================================================
 *                  Parameter Access Functions for Paramset status
 * ==================================================================================
 */

#ifndef cfc_field_FIFO_END_ADDR_CHG_SUCCESS_get
#define cfc_field_FIFO_END_ADDR_CHG_SUCCESS_get( b, h ) \
       _cfc_field_FIFO_END_ADDR_CHG_SUCCESS_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_field_FIFO_END_ADDR_CHG_SUCCESS_get( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000000a4 bits 0) field FIFO_END_ADDR_CHG_SUCCESS of register PMC_CFC_REG_FIFO_CFG_STAT */
    reg_value = _cfc_reg_FIFO_CFG_STAT_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & CFC_REG_FIFO_CFG_STAT_BIT_FIFO_END_ADDR_CHG_SUCCESS_MSK) >> CFC_REG_FIFO_CFG_STAT_BIT_FIFO_END_ADDR_CHG_SUCCESS_OFF;
    IOLOG( "%s -> 0x%08x", "cfc_field_FIFO_END_ADDR_CHG_SUCCESS_get", value );

    return value;
}

#ifndef cfc_field_DBG_RDATA_get
#define cfc_field_DBG_RDATA_get( b, h ) \
       _cfc_field_DBG_RDATA_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _cfc_field_DBG_RDATA_get( LOG_CALLER_DEFN cfc_buffer_t *b, cfc_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000104 bits 31:0) field DBG_RDATA of register PMC_CFC_REG_DBG_RDATA */
    reg_value = _cfc_reg_DBG_RDATA_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & CFC_REG_DBG_RDATA_BIT_DBG_RDATA_MSK) >> CFC_REG_DBG_RDATA_BIT_DBG_RDATA_OFF;
    IOLOG( "%s -> 0x%08x", "cfc_field_DBG_RDATA_get", value );

    return value;
}

#ifndef cfc_field_range_DBG_RDATA_get
#define cfc_field_range_DBG_RDATA_get( b, h, start_bit, stop_bit ) \
       _cfc_field_range_DBG_RDATA_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _cfc_field_range_DBG_RDATA_get( LOG_CALLER_DEFN
                                                     cfc_buffer_t *b,
                                                     cfc_handle_t *h,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "cfc_field_range_DBG_RDATA_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "cfc_field_range_DBG_RDATA_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000104 bits 31:0) field DBG_RDATA of register PMC_CFC_REG_DBG_RDATA */
    reg_value = _cfc_reg_DBG_RDATA_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & CFC_REG_DBG_RDATA_BIT_DBG_RDATA_MSK)
                  >> CFC_REG_DBG_RDATA_BIT_DBG_RDATA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CFC_REG_DBG_RDATA_BIT_DBG_RDATA_MSK, CFC_REG_DBG_RDATA_BIT_DBG_RDATA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "cfc_field_range_DBG_RDATA_get", start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 *             Parameter Access Functions for Paramset status_N_size128
 * ==================================================================================
 */

#ifndef cfc_field_FIFO_EMPTY_get
#define cfc_field_FIFO_EMPTY_get( b, h, N ) \
       _cfc_field_FIFO_EMPTY_get( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _cfc_field_FIFO_EMPTY_get( LOG_CALLER_DEFN
                                                cfc_buffer_t *b,
                                                cfc_handle_t *h,
                                                UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "cfc_field_FIFO_EMPTY_get", N, 127);
    /* ((0x00000800 + (N) * 0x4) bits 8) field FIFO_EMPTY of register PMC_CFC_REG_FIFO_STAT index N=0..127 */
    reg_value = _cfc_reg_FIFO_STAT_array_read( LOG_CALLER_ARGS b, h, N);
    value = (reg_value & CFC_REG_FIFO_STAT_BIT_FIFO_EMPTY_MSK) >> CFC_REG_FIFO_STAT_BIT_FIFO_EMPTY_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "cfc_field_FIFO_EMPTY_get", N, value );

    return value;
}

#ifndef cfc_field_FIFO_FULL_get
#define cfc_field_FIFO_FULL_get( b, h, N ) \
       _cfc_field_FIFO_FULL_get( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _cfc_field_FIFO_FULL_get( LOG_CALLER_DEFN
                                               cfc_buffer_t *b,
                                               cfc_handle_t *h,
                                               UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 127)
        IO_RANGE_CHECK("%s N is %d but max is %d", "cfc_field_FIFO_FULL_get", N, 127);
    /* ((0x00000800 + (N) * 0x4) bits 0) field FIFO_FULL of register PMC_CFC_REG_FIFO_STAT index N=0..127 */
    reg_value = _cfc_reg_FIFO_STAT_array_read( LOG_CALLER_ARGS b, h, N);
    value = (reg_value & CFC_REG_FIFO_STAT_BIT_FIFO_FULL_MSK) >> CFC_REG_FIFO_STAT_BIT_FIFO_FULL_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "cfc_field_FIFO_FULL_get", N, value );

    return value;
}

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* _CFC_IO_INLINE_H */
