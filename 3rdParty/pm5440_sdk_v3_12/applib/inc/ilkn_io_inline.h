/******************************************************************************
 *   COPYRIGHT (C) 2013 PMC-SIERRA, INC. ALL RIGHTS RESERVED.
 * --------------------------------------------------------------------------
 *  This software embodies materials and concepts which are proprietary and
 *  confidential to PMC-Sierra, Inc.
 *  PMC-Sierra distributes this software to its customers pursuant to the
 *  terms and conditions of the Software License Agreement
 *  contained in the text file software.lic that is distributed along with
 *  the software. This software can only be utilized if all
 *  terms and conditions of the Software License Agreement are
 *  accepted. If there are any questions, concerns, or if the
 *  Software License Agreement text file, software.lic, is missing please
 *  contact PMC-Sierra for assistance.
 * -------------------------------------------------------------------------
 *   DESCRIPTION:
 *     contains the inline implementation of all the field accessor functions
 *     and register accessor functions for the ilkn block
 *****************************************************************************/
#ifndef _ILKN_IO_INLINE_H
#define _ILKN_IO_INLINE_H

#include "sifd_api.h"
#include "ilkn_regs.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define ILKN_IO_VERSION 2

/*
 * ==================================================================================
 *  tsb level structure and access functions for ilkn
 * ==================================================================================
 */
/* if logging is disabled then so is IO_LOGGING */
#ifndef NO_IO_LOGGING
# ifdef LOGGING_DISABLED
#  define NO_IO_LOGGING
# endif
#endif

/* log messages in the generated files log the caller's file/line/function instead of itself.*/
#ifndef IOLOG
# ifdef NO_IO_LOGGING
#  define IOLOG(...)
# else
#  define IOLOG(...) LOG( __VA_ARGS__)
# endif
#endif
#ifndef IO_RANGE_CHECK
# ifdef NO_IO_LOGGING
#  define IO_RANGE_CHECK(...)
# else
#  define IO_RANGE_CHECK(...) LOG( "** range check ** " __VA_ARGS__)
# endif
#endif
#ifndef IOLOG_DATA
# ifdef NO_IO_LOGGING
#  define IOLOG_DATA(...)
# else
#  define IOLOG_DATA(...) LOG_DATA( __VA_ARGS__)
# endif
#endif
typedef struct {
    coalesce_buffer_t coalesce_handle[1]; /* only used if register coalescing is enabled */
    sifd_handle_t * h_ptr;
    UINT32 A;
    pmc_sys_handle_t * sys_handle;
    PMC_VAR_CONST UINT32 base_address;
    /* maybe eventually need to add some fields here per io handle */
} ilkn_buffer_t;
static INLINE void ilkn_buffer_init( ilkn_buffer_t *b_ptr,
                                     sifd_handle_t *h_ptr,
                                     UINT32 A ) ALWAYS_INLINE;
static INLINE void ilkn_buffer_init( ilkn_buffer_t *b_ptr,
                                     sifd_handle_t *h_ptr,
                                     UINT32 A )
{
    b_ptr->h_ptr                    = h_ptr;
    b_ptr->A                        = A;
    b_ptr->sys_handle               = ((pmc_handle_t *)h_ptr)->sys_handle;
    *(UINT32 *)&b_ptr->base_address = (((pmc_handle_t *)h_ptr)->base_address + ((0)*0x4000) );
    /* currently this just checks that the previous function remembered to flush. */
    l1sys_init( b_ptr->coalesce_handle, b_ptr->sys_handle );
    IOLOG( "%s A=%d", "ilkn_buffer_init", A);
    
}

/* flush any changed fields to the register file and invalidate the read cache. */
static INLINE void ilkn_buffer_flush( ilkn_buffer_t *b_ptr ) ALWAYS_INLINE;
static INLINE void ilkn_buffer_flush( ilkn_buffer_t *b_ptr )
{
    IOLOG( "ilkn_buffer_flush" );
    l1sys_flush( b_ptr->coalesce_handle );
}
static INLINE UINT32 ilkn_reg_read( ilkn_buffer_t *b_ptr,
                                    sifd_handle_t *h_ptr,
                                    UINT32 A,
                                    UINT32 mem_type,
                                    UINT32 reg ) ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_read( ilkn_buffer_t *b_ptr,
                                    sifd_handle_t *h_ptr,
                                    UINT32 A,
                                    UINT32 mem_type,
                                    UINT32 reg )
{
    UINT32 value;
    if (b_ptr != NULL)
        value = l1sys_reg_read( b_ptr->coalesce_handle,
                                mem_type,
                                (b_ptr->base_address + (b_ptr->A)*0x4000),
                                reg);
    else
        value = l2sys_reg_read( ((pmc_handle_t *)h_ptr)->sys_handle,
                                mem_type,
                                (((pmc_handle_t *)h_ptr)->base_address + (A)*0x4000) + reg);
    return value;
}
static INLINE void ilkn_reg_write( ilkn_buffer_t *b_ptr,
                                   sifd_handle_t *h_ptr,
                                   UINT32 A,
                                   UINT32 mem_type,
                                   UINT32 reg,
                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_write( ilkn_buffer_t *b_ptr,
                                   sifd_handle_t *h_ptr,
                                   UINT32 A,
                                   UINT32 mem_type,
                                   UINT32 reg,
                                   UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_reg_write( b_ptr->coalesce_handle,
                         mem_type,
                         (b_ptr->base_address + (b_ptr->A)*0x4000),
                         reg,
                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                         mem_type,
                         (((pmc_handle_t *)h_ptr)->base_address + (A)*0x4000) + reg,
                         value);
}

static INLINE void ilkn_field_set( ilkn_buffer_t *b_ptr,
                                   sifd_handle_t *h_ptr,
                                   UINT32 A,
                                   UINT32 mem_type,
                                   UINT32 reg,
                                   UINT32 mask,
                                   UINT32 unused_mask,
                                   UINT32 ofs,
                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_set( ilkn_buffer_t *b_ptr,
                                   sifd_handle_t *h_ptr,
                                   UINT32 A,
                                   UINT32 mem_type,
                                   UINT32 reg,
                                   UINT32 mask,
                                   UINT32 unused_mask,
                                   UINT32 ofs,
                                   UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_field_set2( b_ptr->coalesce_handle,
                          mem_type,
                          (b_ptr->base_address + (b_ptr->A)*0x4000),
                          reg,
                          mask,
                          unused_mask,
                          ofs,
                          value);
    else
    {
        if ((mask | unused_mask) == 0xffffffff)
        {
            l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                             mem_type,
                             (((pmc_handle_t *)h_ptr)->base_address + (A)*0x4000) + reg,
                             value<<ofs);
        }
        else
        {
            l2sys_reg_read_modify_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                                         mem_type,
                                         (((pmc_handle_t *)h_ptr)->base_address + (A)*0x4000) + reg,
                                         mask,
                                         value<<ofs);
        }
    }
}

static INLINE void ilkn_action_on_write_field_set( ilkn_buffer_t *b_ptr,
                                                   sifd_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 mem_type,
                                                   UINT32 reg,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_action_on_write_field_set( ilkn_buffer_t *b_ptr,
                                                   sifd_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 mem_type,
                                                   UINT32 reg,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_action_on_write_field_set( b_ptr->coalesce_handle,
                                         mem_type,
                                         (b_ptr->base_address + (b_ptr->A)*0x4000),
                                         reg,
                                         mask,
                                         ofs,
                                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                         mem_type,
                         (((pmc_handle_t *)h_ptr)->base_address + (A)*0x4000) + reg,
                         value<<ofs);
}

static INLINE void ilkn_burst_read( ilkn_buffer_t *b_ptr,
                                    sifd_handle_t *h_ptr,
                                    UINT32 A,
                                    UINT32 mem_type,
                                    UINT32 reg,
                                    UINT32 len,
                                    UINT32 *value ) ALWAYS_INLINE;
static INLINE void ilkn_burst_read( ilkn_buffer_t *b_ptr,
                                    sifd_handle_t *h_ptr,
                                    UINT32 A,
                                    UINT32 mem_type,
                                    UINT32 reg,
                                    UINT32 len,
                                    UINT32 *value )
{
    if (b_ptr != NULL)
        l1sys_burst_read( b_ptr->coalesce_handle,
                          mem_type,
                          (b_ptr->base_address + (b_ptr->A)*0x4000),
                          reg,
                          len,
                          value);
    else
        l2sys_burst_read( ((pmc_handle_t *)h_ptr)->sys_handle,
                          mem_type,
                          (((pmc_handle_t *)h_ptr)->base_address + (A)*0x4000) + reg,
                          len,
                          value);
}

static INLINE void ilkn_burst_write( ilkn_buffer_t *b_ptr,
                                     sifd_handle_t *h_ptr,
                                     UINT32 A,
                                     UINT32 mem_type,
                                     UINT32 reg,
                                     UINT32 len,
                                     UINT32 *value ) ALWAYS_INLINE;
static INLINE void ilkn_burst_write( ilkn_buffer_t *b_ptr,
                                     sifd_handle_t *h_ptr,
                                     UINT32 A,
                                     UINT32 mem_type,
                                     UINT32 reg,
                                     UINT32 len,
                                     UINT32 *value )
{
    if (b_ptr != NULL)
        l1sys_burst_write( b_ptr->coalesce_handle,
                           mem_type,
                           (b_ptr->base_address + (b_ptr->A)*0x4000),
                           reg,
                           len,
                           value);
    else
        l2sys_burst_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                           mem_type,
                           (((pmc_handle_t *)h_ptr)->base_address + (A)*0x4000) + reg,
                           len,
                           value);
}

static INLINE PMC_POLL_RETURN_TYPE ilkn_poll( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 mem_type,
                                              UINT32 reg,
                                              UINT32 mask,
                                              UINT32 value,
                                              PMC_POLL_COMPARISON_TYPE cmp,
                                              UINT32 max_count,
                                              UINT32 *num_failed_polls,
                                              UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE ilkn_poll( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 mem_type,
                                              UINT32 reg,
                                              UINT32 mask,
                                              UINT32 value,
                                              PMC_POLL_COMPARISON_TYPE cmp,
                                              UINT32 max_count,
                                              UINT32 *num_failed_polls,
                                              UINT32 delay_between_polls_in_microseconds )
{
    if (b_ptr != NULL)
        return l1sys_poll( b_ptr->coalesce_handle,
                           mem_type,
                           (b_ptr->base_address + (b_ptr->A)*0x4000),
                           reg,
                           mask,
                           value,
                           cmp,
                           max_count,
                           num_failed_polls,
                           delay_between_polls_in_microseconds);
    else
        return l2sys_poll( ((pmc_handle_t *)h_ptr)->sys_handle,
                           mem_type,
                           (((pmc_handle_t *)h_ptr)->base_address + (A)*0x4000) + reg,
                           mask,
                           value,
                           cmp,
                           max_count,
                           num_failed_polls,
                           delay_between_polls_in_microseconds);
}

/*
 * ==================================================================================
 *  register access functions for ilkn
 * ==================================================================================
 */

static INLINE void ilkn_reg_TX_CTRL_write( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_TX_CTRL_write( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ilkn_reg_TX_CTRL_write", value );
    ilkn_reg_write( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_TX_CTRL,
                    value);
}

static INLINE void ilkn_reg_TX_CTRL_field_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 mask,
                                               UINT32 ofs,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_TX_CTRL_field_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 mask,
                                               UINT32 ofs,
                                               UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "ilkn_reg_TX_CTRL_field_set", A, mask, ofs, value );
    ilkn_field_set( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_TX_CTRL,
                    mask,
                    PMC_ILAKEN_REG_TX_CTRL_UNUSED_MASK,
                    ofs,
                    value);

}

static INLINE UINT32 ilkn_reg_TX_CTRL_read( ilkn_buffer_t *b_ptr,
                                            sifd_handle_t *h_ptr,
                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_TX_CTRL_read( ilkn_buffer_t *b_ptr,
                                            sifd_handle_t *h_ptr,
                                            UINT32 A )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_CONFIG,
                               PMC_ILAKEN_REG_TX_CTRL);

    IOLOG( "%s -> 0x%08x; A=%d", "ilkn_reg_TX_CTRL_read", reg_value, A);
    return reg_value;
}

static INLINE void ilkn_reg_TX_FIFO_CFG_write( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_TX_FIFO_CFG_write( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ilkn_reg_TX_FIFO_CFG_write", value );
    ilkn_reg_write( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_TX_FIFO_CFG,
                    value);
}

static INLINE void ilkn_reg_TX_FIFO_CFG_field_set( ilkn_buffer_t *b_ptr,
                                                   sifd_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_TX_FIFO_CFG_field_set( ilkn_buffer_t *b_ptr,
                                                   sifd_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "ilkn_reg_TX_FIFO_CFG_field_set", A, mask, ofs, value );
    ilkn_field_set( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_TX_FIFO_CFG,
                    mask,
                    PMC_ILAKEN_REG_TX_FIFO_CFG_UNUSED_MASK,
                    ofs,
                    value);

}

static INLINE UINT32 ilkn_reg_TX_FIFO_CFG_read( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_TX_FIFO_CFG_read( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_CONFIG,
                               PMC_ILAKEN_REG_TX_FIFO_CFG);

    IOLOG( "%s -> 0x%08x; A=%d", "ilkn_reg_TX_FIFO_CFG_read", reg_value, A);
    return reg_value;
}

static INLINE void ilkn_reg_TX_RATE_LIMITER_0_write( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_TX_RATE_LIMITER_0_write( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ilkn_reg_TX_RATE_LIMITER_0_write", value );
    ilkn_reg_write( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_TX_RATE_LIMITER_0,
                    value);
}

static INLINE void ilkn_reg_TX_RATE_LIMITER_0_field_set( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 mask,
                                                         UINT32 ofs,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_TX_RATE_LIMITER_0_field_set( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 mask,
                                                         UINT32 ofs,
                                                         UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "ilkn_reg_TX_RATE_LIMITER_0_field_set", A, mask, ofs, value );
    ilkn_field_set( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_TX_RATE_LIMITER_0,
                    mask,
                    PMC_ILAKEN_REG_TX_RATE_LIMITER_0_UNUSED_MASK,
                    ofs,
                    value);

}

static INLINE UINT32 ilkn_reg_TX_RATE_LIMITER_0_read( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_TX_RATE_LIMITER_0_read( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_CONFIG,
                               PMC_ILAKEN_REG_TX_RATE_LIMITER_0);

    IOLOG( "%s -> 0x%08x; A=%d", "ilkn_reg_TX_RATE_LIMITER_0_read", reg_value, A);
    return reg_value;
}

static INLINE void ilkn_reg_TX_RATE_LIMITER_1_write( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_TX_RATE_LIMITER_1_write( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ilkn_reg_TX_RATE_LIMITER_1_write", value );
    ilkn_reg_write( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_TX_RATE_LIMITER_1,
                    value);
}

static INLINE void ilkn_reg_TX_RATE_LIMITER_1_field_set( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 mask,
                                                         UINT32 ofs,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_TX_RATE_LIMITER_1_field_set( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 mask,
                                                         UINT32 ofs,
                                                         UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "ilkn_reg_TX_RATE_LIMITER_1_field_set", A, mask, ofs, value );
    ilkn_field_set( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_TX_RATE_LIMITER_1,
                    mask,
                    PMC_ILAKEN_REG_TX_RATE_LIMITER_1_UNUSED_MASK,
                    ofs,
                    value);

}

static INLINE UINT32 ilkn_reg_TX_RATE_LIMITER_1_read( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_TX_RATE_LIMITER_1_read( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_CONFIG,
                               PMC_ILAKEN_REG_TX_RATE_LIMITER_1);

    IOLOG( "%s -> 0x%08x; A=%d", "ilkn_reg_TX_RATE_LIMITER_1_read", reg_value, A);
    return reg_value;
}

static INLINE void ilkn_reg_RX_CTRL_write( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_RX_CTRL_write( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ilkn_reg_RX_CTRL_write", value );
    ilkn_reg_write( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_RX_CTRL,
                    value);
}

static INLINE void ilkn_reg_RX_CTRL_field_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 mask,
                                               UINT32 ofs,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_RX_CTRL_field_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 mask,
                                               UINT32 ofs,
                                               UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "ilkn_reg_RX_CTRL_field_set", A, mask, ofs, value );
    ilkn_field_set( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_RX_CTRL,
                    mask,
                    PMC_ILAKEN_REG_RX_CTRL_UNUSED_MASK,
                    ofs,
                    value);

}

static INLINE UINT32 ilkn_reg_RX_CTRL_read( ilkn_buffer_t *b_ptr,
                                            sifd_handle_t *h_ptr,
                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_RX_CTRL_read( ilkn_buffer_t *b_ptr,
                                            sifd_handle_t *h_ptr,
                                            UINT32 A )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_CONFIG,
                               PMC_ILAKEN_REG_RX_CTRL);

    IOLOG( "%s -> 0x%08x; A=%d", "ilkn_reg_RX_CTRL_read", reg_value, A);
    return reg_value;
}

static INLINE void ilkn_reg_RX_SERDES_FIFO_WATERMARK_write( ilkn_buffer_t *b_ptr,
                                                            sifd_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_RX_SERDES_FIFO_WATERMARK_write( ilkn_buffer_t *b_ptr,
                                                            sifd_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ilkn_reg_RX_SERDES_FIFO_WATERMARK_write", value );
    ilkn_reg_write( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_RX_SERDES_FIFO_WATERMARK,
                    value);
}

static INLINE void ilkn_reg_RX_SERDES_FIFO_WATERMARK_field_set( ilkn_buffer_t *b_ptr,
                                                                sifd_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_RX_SERDES_FIFO_WATERMARK_field_set( ilkn_buffer_t *b_ptr,
                                                                sifd_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "ilkn_reg_RX_SERDES_FIFO_WATERMARK_field_set", A, mask, ofs, value );
    ilkn_field_set( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_RX_SERDES_FIFO_WATERMARK,
                    mask,
                    PMC_ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_UNUSED_MASK,
                    ofs,
                    value);

}

static INLINE UINT32 ilkn_reg_RX_SERDES_FIFO_WATERMARK_read( ilkn_buffer_t *b_ptr,
                                                             sifd_handle_t *h_ptr,
                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_RX_SERDES_FIFO_WATERMARK_read( ilkn_buffer_t *b_ptr,
                                                             sifd_handle_t *h_ptr,
                                                             UINT32 A )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_CONFIG,
                               PMC_ILAKEN_REG_RX_SERDES_FIFO_WATERMARK);

    IOLOG( "%s -> 0x%08x; A=%d", "ilkn_reg_RX_SERDES_FIFO_WATERMARK_read", reg_value, A);
    return reg_value;
}

static INLINE void ilkn_reg_LANE_DISABLE_array_write( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_LANE_DISABLE_array_write( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ilkn_reg_LANE_DISABLE_array_write", value );
    ilkn_reg_write( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_LANE_DISABLE(N),
                    value);
}

static INLINE void ilkn_reg_LANE_DISABLE_array_field_set( ilkn_buffer_t *b_ptr,
                                                          sifd_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32  N,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_LANE_DISABLE_array_field_set( ilkn_buffer_t *b_ptr,
                                                          sifd_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32  N,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value )
{
    IOLOG( "%s <- A=%d N=%d mask=0x%08x ofs=%d value=0x%08x", "ilkn_reg_LANE_DISABLE_array_field_set", A, N, mask, ofs, value );
    ilkn_field_set( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_LANE_DISABLE(N),
                    mask,
                    PMC_ILAKEN_REG_LANE_DISABLE_UNUSED_MASK,
                    ofs,
                    value);

}

static INLINE UINT32 ilkn_reg_LANE_DISABLE_array_read( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_LANE_DISABLE_array_read( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_CONFIG,
                               PMC_ILAKEN_REG_LANE_DISABLE(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "ilkn_reg_LANE_DISABLE_array_read", reg_value, A, N);
    return reg_value;
}

static INLINE void ilkn_reg_CFG_array_write( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32  N,
                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_CFG_array_write( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32  N,
                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ilkn_reg_CFG_array_write", value );
    ilkn_reg_write( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_CFG(N),
                    value);
}

static INLINE void ilkn_reg_CFG_array_field_set( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N,
                                                 UINT32 mask,
                                                 UINT32 ofs,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_CFG_array_field_set( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N,
                                                 UINT32 mask,
                                                 UINT32 ofs,
                                                 UINT32 value )
{
    IOLOG( "%s <- A=%d N=%d mask=0x%08x ofs=%d value=0x%08x", "ilkn_reg_CFG_array_field_set", A, N, mask, ofs, value );
    ilkn_field_set( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_CFG(N),
                    mask,
                    PMC_ILAKEN_REG_CFG_UNUSED_MASK,
                    ofs,
                    value);

}

static INLINE UINT32 ilkn_reg_CFG_array_read( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_CFG_array_read( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_CONFIG,
                               PMC_ILAKEN_REG_CFG(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "ilkn_reg_CFG_array_read", reg_value, A, N);
    return reg_value;
}

static INLINE void ilkn_reg_BURST_CFG_array_write( ilkn_buffer_t *b_ptr,
                                                   sifd_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_BURST_CFG_array_write( ilkn_buffer_t *b_ptr,
                                                   sifd_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32  N,
                                                   UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ilkn_reg_BURST_CFG_array_write", value );
    ilkn_reg_write( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_BURST_CFG(N),
                    value);
}

static INLINE void ilkn_reg_BURST_CFG_array_field_set( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_BURST_CFG_array_field_set( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value )
{
    IOLOG( "%s <- A=%d N=%d mask=0x%08x ofs=%d value=0x%08x", "ilkn_reg_BURST_CFG_array_field_set", A, N, mask, ofs, value );
    ilkn_field_set( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_BURST_CFG(N),
                    mask,
                    PMC_ILAKEN_REG_BURST_CFG_UNUSED_MASK,
                    ofs,
                    value);

}

static INLINE UINT32 ilkn_reg_BURST_CFG_array_read( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_BURST_CFG_array_read( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_CONFIG,
                               PMC_ILAKEN_REG_BURST_CFG(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "ilkn_reg_BURST_CFG_array_read", reg_value, A, N);
    return reg_value;
}

static INLINE void ilkn_reg_METAFRAME_SYNC_array_write( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_METAFRAME_SYNC_array_write( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ilkn_reg_METAFRAME_SYNC_array_write", value );
    ilkn_reg_write( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_METAFRAME_SYNC(N),
                    value);
}

static INLINE void ilkn_reg_METAFRAME_SYNC_array_field_set( ilkn_buffer_t *b_ptr,
                                                            sifd_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32  N,
                                                            UINT32 mask,
                                                            UINT32 ofs,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_METAFRAME_SYNC_array_field_set( ilkn_buffer_t *b_ptr,
                                                            sifd_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32  N,
                                                            UINT32 mask,
                                                            UINT32 ofs,
                                                            UINT32 value )
{
    IOLOG( "%s <- A=%d N=%d mask=0x%08x ofs=%d value=0x%08x", "ilkn_reg_METAFRAME_SYNC_array_field_set", A, N, mask, ofs, value );
    ilkn_field_set( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_METAFRAME_SYNC(N),
                    mask,
                    PMC_ILAKEN_REG_METAFRAME_SYNC_UNUSED_MASK,
                    ofs,
                    value);

}

static INLINE UINT32 ilkn_reg_METAFRAME_SYNC_array_read( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_METAFRAME_SYNC_array_read( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32  N )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_CONFIG,
                               PMC_ILAKEN_REG_METAFRAME_SYNC(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "ilkn_reg_METAFRAME_SYNC_array_read", reg_value, A, N);
    return reg_value;
}

static INLINE void ilkn_reg_CNT_ACCESS_array_write( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_CNT_ACCESS_array_write( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ilkn_reg_CNT_ACCESS_array_write", value );
    ilkn_reg_write( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_CNT_ACCESS(N),
                    value);
}

static INLINE void ilkn_reg_CNT_ACCESS_array_field_set( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_CNT_ACCESS_array_field_set( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value )
{
    IOLOG( "%s <- A=%d N=%d mask=0x%08x ofs=%d value=0x%08x", "ilkn_reg_CNT_ACCESS_array_field_set", A, N, mask, ofs, value );
    ilkn_field_set( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_CNT_ACCESS(N),
                    mask,
                    PMC_ILAKEN_REG_CNT_ACCESS_UNUSED_MASK,
                    ofs,
                    value);

}

static INLINE UINT32 ilkn_reg_CNT_ACCESS_array_read( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_CNT_ACCESS_array_read( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_CONFIG,
                               PMC_ILAKEN_REG_CNT_ACCESS(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "ilkn_reg_CNT_ACCESS_array_read", reg_value, A, N);
    return reg_value;
}

static INLINE void ilkn_reg_BYTE_CNT_WRITE_HIGH_array_write( ilkn_buffer_t *b_ptr,
                                                             sifd_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32  N,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_BYTE_CNT_WRITE_HIGH_array_write( ilkn_buffer_t *b_ptr,
                                                             sifd_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32  N,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ilkn_reg_BYTE_CNT_WRITE_HIGH_array_write", value );
    ilkn_reg_write( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_BYTE_CNT_WRITE_HIGH(N),
                    value);
}

static INLINE void ilkn_reg_BYTE_CNT_WRITE_HIGH_array_field_set( ilkn_buffer_t *b_ptr,
                                                                 sifd_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32  N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_BYTE_CNT_WRITE_HIGH_array_field_set( ilkn_buffer_t *b_ptr,
                                                                 sifd_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32  N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- A=%d N=%d mask=0x%08x ofs=%d value=0x%08x", "ilkn_reg_BYTE_CNT_WRITE_HIGH_array_field_set", A, N, mask, ofs, value );
    ilkn_field_set( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_BYTE_CNT_WRITE_HIGH(N),
                    mask,
                    PMC_ILAKEN_REG_BYTE_CNT_WRITE_HIGH_UNUSED_MASK,
                    ofs,
                    value);

}

static INLINE UINT32 ilkn_reg_BYTE_CNT_WRITE_HIGH_array_read( ilkn_buffer_t *b_ptr,
                                                              sifd_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_BYTE_CNT_WRITE_HIGH_array_read( ilkn_buffer_t *b_ptr,
                                                              sifd_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32  N )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_CONFIG,
                               PMC_ILAKEN_REG_BYTE_CNT_WRITE_HIGH(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "ilkn_reg_BYTE_CNT_WRITE_HIGH_array_read", reg_value, A, N);
    return reg_value;
}

static INLINE void ilkn_reg_BYTE_CNT_WRITE_LOW_array_write( ilkn_buffer_t *b_ptr,
                                                            sifd_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_BYTE_CNT_WRITE_LOW_array_write( ilkn_buffer_t *b_ptr,
                                                            sifd_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32  N,
                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ilkn_reg_BYTE_CNT_WRITE_LOW_array_write", value );
    ilkn_reg_write( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_BYTE_CNT_WRITE_LOW(N),
                    value);
}

static INLINE void ilkn_reg_BYTE_CNT_WRITE_LOW_array_field_set( ilkn_buffer_t *b_ptr,
                                                                sifd_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32  N,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_BYTE_CNT_WRITE_LOW_array_field_set( ilkn_buffer_t *b_ptr,
                                                                sifd_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32  N,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- A=%d N=%d mask=0x%08x ofs=%d value=0x%08x", "ilkn_reg_BYTE_CNT_WRITE_LOW_array_field_set", A, N, mask, ofs, value );
    ilkn_field_set( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_BYTE_CNT_WRITE_LOW(N),
                    mask,
                    PMC_ILAKEN_REG_BYTE_CNT_WRITE_LOW_UNUSED_MASK,
                    ofs,
                    value);

}

static INLINE UINT32 ilkn_reg_BYTE_CNT_WRITE_LOW_array_read( ilkn_buffer_t *b_ptr,
                                                             sifd_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_BYTE_CNT_WRITE_LOW_array_read( ilkn_buffer_t *b_ptr,
                                                             sifd_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32  N )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_CONFIG,
                               PMC_ILAKEN_REG_BYTE_CNT_WRITE_LOW(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "ilkn_reg_BYTE_CNT_WRITE_LOW_array_read", reg_value, A, N);
    return reg_value;
}

static INLINE void ilkn_reg_MSB_PACKET_CNT_WRITE_array_write( ilkn_buffer_t *b_ptr,
                                                              sifd_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32  N,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_MSB_PACKET_CNT_WRITE_array_write( ilkn_buffer_t *b_ptr,
                                                              sifd_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32  N,
                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ilkn_reg_MSB_PACKET_CNT_WRITE_array_write", value );
    ilkn_reg_write( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_MSB_PACKET_CNT_WRITE(N),
                    value);
}

static INLINE void ilkn_reg_MSB_PACKET_CNT_WRITE_array_field_set( ilkn_buffer_t *b_ptr,
                                                                  sifd_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32  N,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_MSB_PACKET_CNT_WRITE_array_field_set( ilkn_buffer_t *b_ptr,
                                                                  sifd_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32  N,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value )
{
    IOLOG( "%s <- A=%d N=%d mask=0x%08x ofs=%d value=0x%08x", "ilkn_reg_MSB_PACKET_CNT_WRITE_array_field_set", A, N, mask, ofs, value );
    ilkn_field_set( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_MSB_PACKET_CNT_WRITE(N),
                    mask,
                    PMC_ILAKEN_REG_MSB_PACKET_CNT_WRITE_UNUSED_MASK,
                    ofs,
                    value);

}

static INLINE UINT32 ilkn_reg_MSB_PACKET_CNT_WRITE_array_read( ilkn_buffer_t *b_ptr,
                                                               sifd_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_MSB_PACKET_CNT_WRITE_array_read( ilkn_buffer_t *b_ptr,
                                                               sifd_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32  N )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_CONFIG,
                               PMC_ILAKEN_REG_MSB_PACKET_CNT_WRITE(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "ilkn_reg_MSB_PACKET_CNT_WRITE_array_read", reg_value, A, N);
    return reg_value;
}

static INLINE void ilkn_reg_LSB_PACKET_CNT_WRITE_array_write( ilkn_buffer_t *b_ptr,
                                                              sifd_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32  N,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_LSB_PACKET_CNT_WRITE_array_write( ilkn_buffer_t *b_ptr,
                                                              sifd_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32  N,
                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ilkn_reg_LSB_PACKET_CNT_WRITE_array_write", value );
    ilkn_reg_write( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_LSB_PACKET_CNT_WRITE(N),
                    value);
}

static INLINE void ilkn_reg_LSB_PACKET_CNT_WRITE_array_field_set( ilkn_buffer_t *b_ptr,
                                                                  sifd_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32  N,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_LSB_PACKET_CNT_WRITE_array_field_set( ilkn_buffer_t *b_ptr,
                                                                  sifd_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32  N,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value )
{
    IOLOG( "%s <- A=%d N=%d mask=0x%08x ofs=%d value=0x%08x", "ilkn_reg_LSB_PACKET_CNT_WRITE_array_field_set", A, N, mask, ofs, value );
    ilkn_field_set( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_LSB_PACKET_CNT_WRITE(N),
                    mask,
                    PMC_ILAKEN_REG_LSB_PACKET_CNT_WRITE_UNUSED_MASK,
                    ofs,
                    value);

}

static INLINE UINT32 ilkn_reg_LSB_PACKET_CNT_WRITE_array_read( ilkn_buffer_t *b_ptr,
                                                               sifd_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_LSB_PACKET_CNT_WRITE_array_read( ilkn_buffer_t *b_ptr,
                                                               sifd_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32  N )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_CONFIG,
                               PMC_ILAKEN_REG_LSB_PACKET_CNT_WRITE(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "ilkn_reg_LSB_PACKET_CNT_WRITE_array_read", reg_value, A, N);
    return reg_value;
}

static INLINE void ilkn_reg_MSB_ERROR_COUNTER_WRITE_array_write( ilkn_buffer_t *b_ptr,
                                                                 sifd_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32  N,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_MSB_ERROR_COUNTER_WRITE_array_write( ilkn_buffer_t *b_ptr,
                                                                 sifd_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ilkn_reg_MSB_ERROR_COUNTER_WRITE_array_write", value );
    ilkn_reg_write( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_MSB_ERROR_COUNTER_WRITE(N),
                    value);
}

static INLINE void ilkn_reg_MSB_ERROR_COUNTER_WRITE_array_field_set( ilkn_buffer_t *b_ptr,
                                                                     sifd_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_MSB_ERROR_COUNTER_WRITE_array_field_set( ilkn_buffer_t *b_ptr,
                                                                     sifd_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value )
{
    IOLOG( "%s <- A=%d N=%d mask=0x%08x ofs=%d value=0x%08x", "ilkn_reg_MSB_ERROR_COUNTER_WRITE_array_field_set", A, N, mask, ofs, value );
    ilkn_field_set( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_MSB_ERROR_COUNTER_WRITE(N),
                    mask,
                    PMC_ILAKEN_REG_MSB_ERROR_COUNTER_WRITE_UNUSED_MASK,
                    ofs,
                    value);

}

static INLINE UINT32 ilkn_reg_MSB_ERROR_COUNTER_WRITE_array_read( ilkn_buffer_t *b_ptr,
                                                                  sifd_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_MSB_ERROR_COUNTER_WRITE_array_read( ilkn_buffer_t *b_ptr,
                                                                  sifd_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32  N )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_CONFIG,
                               PMC_ILAKEN_REG_MSB_ERROR_COUNTER_WRITE(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "ilkn_reg_MSB_ERROR_COUNTER_WRITE_array_read", reg_value, A, N);
    return reg_value;
}

static INLINE void ilkn_reg_LSB_ERR_CNT_WRITE_array_write( ilkn_buffer_t *b_ptr,
                                                           sifd_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32  N,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_LSB_ERR_CNT_WRITE_array_write( ilkn_buffer_t *b_ptr,
                                                           sifd_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32  N,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ilkn_reg_LSB_ERR_CNT_WRITE_array_write", value );
    ilkn_reg_write( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_LSB_ERR_CNT_WRITE(N),
                    value);
}

static INLINE void ilkn_reg_LSB_ERR_CNT_WRITE_array_field_set( ilkn_buffer_t *b_ptr,
                                                               sifd_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32  N,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_LSB_ERR_CNT_WRITE_array_field_set( ilkn_buffer_t *b_ptr,
                                                               sifd_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32  N,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value )
{
    IOLOG( "%s <- A=%d N=%d mask=0x%08x ofs=%d value=0x%08x", "ilkn_reg_LSB_ERR_CNT_WRITE_array_field_set", A, N, mask, ofs, value );
    ilkn_field_set( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_LSB_ERR_CNT_WRITE(N),
                    mask,
                    PMC_ILAKEN_REG_LSB_ERR_CNT_WRITE_UNUSED_MASK,
                    ofs,
                    value);

}

static INLINE UINT32 ilkn_reg_LSB_ERR_CNT_WRITE_array_read( ilkn_buffer_t *b_ptr,
                                                            sifd_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_LSB_ERR_CNT_WRITE_array_read( ilkn_buffer_t *b_ptr,
                                                            sifd_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32  N )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_CONFIG,
                               PMC_ILAKEN_REG_LSB_ERR_CNT_WRITE(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "ilkn_reg_LSB_ERR_CNT_WRITE_array_read", reg_value, A, N);
    return reg_value;
}

static INLINE void ilkn_reg_CALENDAR_EN_array_write( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_CALENDAR_EN_array_write( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ilkn_reg_CALENDAR_EN_array_write", value );
    ilkn_reg_write( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_CALENDAR_EN(N),
                    value);
}

static INLINE void ilkn_reg_CALENDAR_EN_array_field_set( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32  N,
                                                         UINT32 mask,
                                                         UINT32 ofs,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_CALENDAR_EN_array_field_set( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32  N,
                                                         UINT32 mask,
                                                         UINT32 ofs,
                                                         UINT32 value )
{
    IOLOG( "%s <- A=%d N=%d mask=0x%08x ofs=%d value=0x%08x", "ilkn_reg_CALENDAR_EN_array_field_set", A, N, mask, ofs, value );
    ilkn_field_set( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_CALENDAR_EN(N),
                    mask,
                    PMC_ILAKEN_REG_CALENDAR_EN_UNUSED_MASK,
                    ofs,
                    value);

}

static INLINE UINT32 ilkn_reg_CALENDAR_EN_array_read( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_CALENDAR_EN_array_read( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_CONFIG,
                               PMC_ILAKEN_REG_CALENDAR_EN(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "ilkn_reg_CALENDAR_EN_array_read", reg_value, A, N);
    return reg_value;
}

static INLINE void ilkn_reg_PROGRAMMABLE_CALENDAR_ACCESS_array_write( ilkn_buffer_t *b_ptr,
                                                                      sifd_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32  N,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_PROGRAMMABLE_CALENDAR_ACCESS_array_write( ilkn_buffer_t *b_ptr,
                                                                      sifd_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32  N,
                                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ilkn_reg_PROGRAMMABLE_CALENDAR_ACCESS_array_write", value );
    ilkn_reg_write( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_PROGRAMMABLE_CALENDAR_ACCESS(N),
                    value);
}

static INLINE void ilkn_reg_PROGRAMMABLE_CALENDAR_ACCESS_array_field_set( ilkn_buffer_t *b_ptr,
                                                                          sifd_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32  N,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_PROGRAMMABLE_CALENDAR_ACCESS_array_field_set( ilkn_buffer_t *b_ptr,
                                                                          sifd_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32  N,
                                                                          UINT32 mask,
                                                                          UINT32 ofs,
                                                                          UINT32 value )
{
    IOLOG( "%s <- A=%d N=%d mask=0x%08x ofs=%d value=0x%08x", "ilkn_reg_PROGRAMMABLE_CALENDAR_ACCESS_array_field_set", A, N, mask, ofs, value );
    ilkn_field_set( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_PROGRAMMABLE_CALENDAR_ACCESS(N),
                    mask,
                    PMC_ILAKEN_REG_PROGRAMMABLE_CALENDAR_ACCESS_UNUSED_MASK,
                    ofs,
                    value);

}

static INLINE UINT32 ilkn_reg_PROGRAMMABLE_CALENDAR_ACCESS_array_read( ilkn_buffer_t *b_ptr,
                                                                       sifd_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_PROGRAMMABLE_CALENDAR_ACCESS_array_read( ilkn_buffer_t *b_ptr,
                                                                       sifd_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32  N )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_CONFIG,
                               PMC_ILAKEN_REG_PROGRAMMABLE_CALENDAR_ACCESS(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "ilkn_reg_PROGRAMMABLE_CALENDAR_ACCESS_array_read", reg_value, A, N);
    return reg_value;
}

static INLINE void ilkn_reg_PROGRAMMABLE_CALENDAR_WRITE_DATA_array_write( ilkn_buffer_t *b_ptr,
                                                                          sifd_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32  N,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_PROGRAMMABLE_CALENDAR_WRITE_DATA_array_write( ilkn_buffer_t *b_ptr,
                                                                          sifd_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32  N,
                                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ilkn_reg_PROGRAMMABLE_CALENDAR_WRITE_DATA_array_write", value );
    ilkn_reg_write( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_PROGRAMMABLE_CALENDAR_WRITE_DATA(N),
                    value);
}

static INLINE void ilkn_reg_PROGRAMMABLE_CALENDAR_WRITE_DATA_array_field_set( ilkn_buffer_t *b_ptr,
                                                                              sifd_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32  N,
                                                                              UINT32 mask,
                                                                              UINT32 ofs,
                                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_PROGRAMMABLE_CALENDAR_WRITE_DATA_array_field_set( ilkn_buffer_t *b_ptr,
                                                                              sifd_handle_t *h_ptr,
                                                                              UINT32 A,
                                                                              UINT32  N,
                                                                              UINT32 mask,
                                                                              UINT32 ofs,
                                                                              UINT32 value )
{
    IOLOG( "%s <- A=%d N=%d mask=0x%08x ofs=%d value=0x%08x", "ilkn_reg_PROGRAMMABLE_CALENDAR_WRITE_DATA_array_field_set", A, N, mask, ofs, value );
    ilkn_field_set( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_PROGRAMMABLE_CALENDAR_WRITE_DATA(N),
                    mask,
                    PMC_ILAKEN_REG_PROGRAMMABLE_CALENDAR_WRITE_DATA_UNUSED_MASK,
                    ofs,
                    value);

}

static INLINE UINT32 ilkn_reg_PROGRAMMABLE_CALENDAR_WRITE_DATA_array_read( ilkn_buffer_t *b_ptr,
                                                                           sifd_handle_t *h_ptr,
                                                                           UINT32 A,
                                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_PROGRAMMABLE_CALENDAR_WRITE_DATA_array_read( ilkn_buffer_t *b_ptr,
                                                                           sifd_handle_t *h_ptr,
                                                                           UINT32 A,
                                                                           UINT32  N )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_CONFIG,
                               PMC_ILAKEN_REG_PROGRAMMABLE_CALENDAR_WRITE_DATA(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "ilkn_reg_PROGRAMMABLE_CALENDAR_WRITE_DATA_array_read", reg_value, A, N);
    return reg_value;
}

static INLINE void ilkn_reg_SERDES_TEST_CTRL_array_write( ilkn_buffer_t *b_ptr,
                                                          sifd_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_SERDES_TEST_CTRL_array_write( ilkn_buffer_t *b_ptr,
                                                          sifd_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32  N,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ilkn_reg_SERDES_TEST_CTRL_array_write", value );
    ilkn_reg_write( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_SERDES_TEST_CTRL(N),
                    value);
}

static INLINE void ilkn_reg_SERDES_TEST_CTRL_array_field_set( ilkn_buffer_t *b_ptr,
                                                              sifd_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32  N,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_SERDES_TEST_CTRL_array_field_set( ilkn_buffer_t *b_ptr,
                                                              sifd_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32  N,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- A=%d N=%d mask=0x%08x ofs=%d value=0x%08x", "ilkn_reg_SERDES_TEST_CTRL_array_field_set", A, N, mask, ofs, value );
    ilkn_field_set( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_SERDES_TEST_CTRL(N),
                    mask,
                    PMC_ILAKEN_REG_SERDES_TEST_CTRL_UNUSED_MASK,
                    ofs,
                    value);

}

static INLINE UINT32 ilkn_reg_SERDES_TEST_CTRL_array_read( ilkn_buffer_t *b_ptr,
                                                           sifd_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_SERDES_TEST_CTRL_array_read( ilkn_buffer_t *b_ptr,
                                                           sifd_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32  N )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_CONFIG,
                               PMC_ILAKEN_REG_SERDES_TEST_CTRL(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "ilkn_reg_SERDES_TEST_CTRL_array_read", reg_value, A, N);
    return reg_value;
}

static INLINE void ilkn_reg_SERDES_TEST_PATTERN_A_array_write( ilkn_buffer_t *b_ptr,
                                                               sifd_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32  N,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_SERDES_TEST_PATTERN_A_array_write( ilkn_buffer_t *b_ptr,
                                                               sifd_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32  N,
                                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ilkn_reg_SERDES_TEST_PATTERN_A_array_write", value );
    ilkn_reg_write( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_SERDES_TEST_PATTERN_A(N),
                    value);
}

static INLINE void ilkn_reg_SERDES_TEST_PATTERN_A_array_field_set( ilkn_buffer_t *b_ptr,
                                                                   sifd_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32  N,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_SERDES_TEST_PATTERN_A_array_field_set( ilkn_buffer_t *b_ptr,
                                                                   sifd_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32  N,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value )
{
    IOLOG( "%s <- A=%d N=%d mask=0x%08x ofs=%d value=0x%08x", "ilkn_reg_SERDES_TEST_PATTERN_A_array_field_set", A, N, mask, ofs, value );
    ilkn_field_set( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_SERDES_TEST_PATTERN_A(N),
                    mask,
                    PMC_ILAKEN_REG_SERDES_TEST_PATTERN_A_UNUSED_MASK,
                    ofs,
                    value);

}

static INLINE UINT32 ilkn_reg_SERDES_TEST_PATTERN_A_array_read( ilkn_buffer_t *b_ptr,
                                                                sifd_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_SERDES_TEST_PATTERN_A_array_read( ilkn_buffer_t *b_ptr,
                                                                sifd_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32  N )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_CONFIG,
                               PMC_ILAKEN_REG_SERDES_TEST_PATTERN_A(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "ilkn_reg_SERDES_TEST_PATTERN_A_array_read", reg_value, A, N);
    return reg_value;
}

static INLINE void ilkn_reg_SERDES_TEST_PATTERN_B_array_write( ilkn_buffer_t *b_ptr,
                                                               sifd_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32  N,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_SERDES_TEST_PATTERN_B_array_write( ilkn_buffer_t *b_ptr,
                                                               sifd_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32  N,
                                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ilkn_reg_SERDES_TEST_PATTERN_B_array_write", value );
    ilkn_reg_write( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_SERDES_TEST_PATTERN_B(N),
                    value);
}

static INLINE void ilkn_reg_SERDES_TEST_PATTERN_B_array_field_set( ilkn_buffer_t *b_ptr,
                                                                   sifd_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32  N,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_SERDES_TEST_PATTERN_B_array_field_set( ilkn_buffer_t *b_ptr,
                                                                   sifd_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32  N,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value )
{
    IOLOG( "%s <- A=%d N=%d mask=0x%08x ofs=%d value=0x%08x", "ilkn_reg_SERDES_TEST_PATTERN_B_array_field_set", A, N, mask, ofs, value );
    ilkn_field_set( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_SERDES_TEST_PATTERN_B(N),
                    mask,
                    PMC_ILAKEN_REG_SERDES_TEST_PATTERN_B_UNUSED_MASK,
                    ofs,
                    value);

}

static INLINE UINT32 ilkn_reg_SERDES_TEST_PATTERN_B_array_read( ilkn_buffer_t *b_ptr,
                                                                sifd_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_SERDES_TEST_PATTERN_B_array_read( ilkn_buffer_t *b_ptr,
                                                                sifd_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32  N )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_CONFIG,
                               PMC_ILAKEN_REG_SERDES_TEST_PATTERN_B(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "ilkn_reg_SERDES_TEST_PATTERN_B_array_read", reg_value, A, N);
    return reg_value;
}

static INLINE void ilkn_reg_SERDES_TEST_PATTERN_C_array_write( ilkn_buffer_t *b_ptr,
                                                               sifd_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32  N,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_SERDES_TEST_PATTERN_C_array_write( ilkn_buffer_t *b_ptr,
                                                               sifd_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32  N,
                                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ilkn_reg_SERDES_TEST_PATTERN_C_array_write", value );
    ilkn_reg_write( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_SERDES_TEST_PATTERN_C(N),
                    value);
}

static INLINE void ilkn_reg_SERDES_TEST_PATTERN_C_array_field_set( ilkn_buffer_t *b_ptr,
                                                                   sifd_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32  N,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_SERDES_TEST_PATTERN_C_array_field_set( ilkn_buffer_t *b_ptr,
                                                                   sifd_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32  N,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value )
{
    IOLOG( "%s <- A=%d N=%d mask=0x%08x ofs=%d value=0x%08x", "ilkn_reg_SERDES_TEST_PATTERN_C_array_field_set", A, N, mask, ofs, value );
    ilkn_field_set( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_SERDES_TEST_PATTERN_C(N),
                    mask,
                    PMC_ILAKEN_REG_SERDES_TEST_PATTERN_C_UNUSED_MASK,
                    ofs,
                    value);

}

static INLINE UINT32 ilkn_reg_SERDES_TEST_PATTERN_C_array_read( ilkn_buffer_t *b_ptr,
                                                                sifd_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_SERDES_TEST_PATTERN_C_array_read( ilkn_buffer_t *b_ptr,
                                                                sifd_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32  N )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_CONFIG,
                               PMC_ILAKEN_REG_SERDES_TEST_PATTERN_C(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "ilkn_reg_SERDES_TEST_PATTERN_C_array_read", reg_value, A, N);
    return reg_value;
}

static INLINE void ilkn_reg_REMAP_LANE_5_0_array_write( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_REMAP_LANE_5_0_array_write( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ilkn_reg_REMAP_LANE_5_0_array_write", value );
    ilkn_reg_write( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_REMAP_LANE_5_0(N),
                    value);
}

static INLINE void ilkn_reg_REMAP_LANE_5_0_array_field_set( ilkn_buffer_t *b_ptr,
                                                            sifd_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32  N,
                                                            UINT32 mask,
                                                            UINT32 ofs,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_REMAP_LANE_5_0_array_field_set( ilkn_buffer_t *b_ptr,
                                                            sifd_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32  N,
                                                            UINT32 mask,
                                                            UINT32 ofs,
                                                            UINT32 value )
{
    IOLOG( "%s <- A=%d N=%d mask=0x%08x ofs=%d value=0x%08x", "ilkn_reg_REMAP_LANE_5_0_array_field_set", A, N, mask, ofs, value );
    ilkn_field_set( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_REMAP_LANE_5_0(N),
                    mask,
                    PMC_ILAKEN_REG_REMAP_LANE_5_0_UNUSED_MASK,
                    ofs,
                    value);

}

static INLINE UINT32 ilkn_reg_REMAP_LANE_5_0_array_read( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_REMAP_LANE_5_0_array_read( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32  N )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_CONFIG,
                               PMC_ILAKEN_REG_REMAP_LANE_5_0(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "ilkn_reg_REMAP_LANE_5_0_array_read", reg_value, A, N);
    return reg_value;
}

static INLINE void ilkn_reg_REMAP_LANE_11_6_array_write( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32  N,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_REMAP_LANE_11_6_array_write( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32  N,
                                                         UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ilkn_reg_REMAP_LANE_11_6_array_write", value );
    ilkn_reg_write( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_REMAP_LANE_11_6(N),
                    value);
}

static INLINE void ilkn_reg_REMAP_LANE_11_6_array_field_set( ilkn_buffer_t *b_ptr,
                                                             sifd_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32  N,
                                                             UINT32 mask,
                                                             UINT32 ofs,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_REMAP_LANE_11_6_array_field_set( ilkn_buffer_t *b_ptr,
                                                             sifd_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32  N,
                                                             UINT32 mask,
                                                             UINT32 ofs,
                                                             UINT32 value )
{
    IOLOG( "%s <- A=%d N=%d mask=0x%08x ofs=%d value=0x%08x", "ilkn_reg_REMAP_LANE_11_6_array_field_set", A, N, mask, ofs, value );
    ilkn_field_set( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_REMAP_LANE_11_6(N),
                    mask,
                    PMC_ILAKEN_REG_REMAP_LANE_11_6_UNUSED_MASK,
                    ofs,
                    value);

}

static INLINE UINT32 ilkn_reg_REMAP_LANE_11_6_array_read( ilkn_buffer_t *b_ptr,
                                                          sifd_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_REMAP_LANE_11_6_array_read( ilkn_buffer_t *b_ptr,
                                                          sifd_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32  N )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_CONFIG,
                               PMC_ILAKEN_REG_REMAP_LANE_11_6(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "ilkn_reg_REMAP_LANE_11_6_array_read", reg_value, A, N);
    return reg_value;
}

static INLINE void ilkn_reg_REMAP_LANE_17_12_array_write( ilkn_buffer_t *b_ptr,
                                                          sifd_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_REMAP_LANE_17_12_array_write( ilkn_buffer_t *b_ptr,
                                                          sifd_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32  N,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ilkn_reg_REMAP_LANE_17_12_array_write", value );
    ilkn_reg_write( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_REMAP_LANE_17_12(N),
                    value);
}

static INLINE void ilkn_reg_REMAP_LANE_17_12_array_field_set( ilkn_buffer_t *b_ptr,
                                                              sifd_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32  N,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_REMAP_LANE_17_12_array_field_set( ilkn_buffer_t *b_ptr,
                                                              sifd_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32  N,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- A=%d N=%d mask=0x%08x ofs=%d value=0x%08x", "ilkn_reg_REMAP_LANE_17_12_array_field_set", A, N, mask, ofs, value );
    ilkn_field_set( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_REMAP_LANE_17_12(N),
                    mask,
                    PMC_ILAKEN_REG_REMAP_LANE_17_12_UNUSED_MASK,
                    ofs,
                    value);

}

static INLINE UINT32 ilkn_reg_REMAP_LANE_17_12_array_read( ilkn_buffer_t *b_ptr,
                                                           sifd_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_REMAP_LANE_17_12_array_read( ilkn_buffer_t *b_ptr,
                                                           sifd_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32  N )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_CONFIG,
                               PMC_ILAKEN_REG_REMAP_LANE_17_12(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "ilkn_reg_REMAP_LANE_17_12_array_read", reg_value, A, N);
    return reg_value;
}

static INLINE void ilkn_reg_REMAP_LANE_23_18_array_write( ilkn_buffer_t *b_ptr,
                                                          sifd_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_REMAP_LANE_23_18_array_write( ilkn_buffer_t *b_ptr,
                                                          sifd_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32  N,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ilkn_reg_REMAP_LANE_23_18_array_write", value );
    ilkn_reg_write( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_REMAP_LANE_23_18(N),
                    value);
}

static INLINE void ilkn_reg_REMAP_LANE_23_18_array_field_set( ilkn_buffer_t *b_ptr,
                                                              sifd_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32  N,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_REMAP_LANE_23_18_array_field_set( ilkn_buffer_t *b_ptr,
                                                              sifd_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32  N,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- A=%d N=%d mask=0x%08x ofs=%d value=0x%08x", "ilkn_reg_REMAP_LANE_23_18_array_field_set", A, N, mask, ofs, value );
    ilkn_field_set( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_REMAP_LANE_23_18(N),
                    mask,
                    PMC_ILAKEN_REG_REMAP_LANE_23_18_UNUSED_MASK,
                    ofs,
                    value);

}

static INLINE UINT32 ilkn_reg_REMAP_LANE_23_18_array_read( ilkn_buffer_t *b_ptr,
                                                           sifd_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_REMAP_LANE_23_18_array_read( ilkn_buffer_t *b_ptr,
                                                           sifd_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32  N )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_CONFIG,
                               PMC_ILAKEN_REG_REMAP_LANE_23_18(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "ilkn_reg_REMAP_LANE_23_18_array_read", reg_value, A, N);
    return reg_value;
}

static INLINE void ilkn_reg_TX_INT_array_write( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_TX_INT_array_write( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ilkn_reg_TX_INT_array_write", value );
    ilkn_reg_write( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_TX_INT(N),
                    value);
}

static INLINE void ilkn_reg_TX_INT_array_field_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 mask,
                                                    UINT32 ofs,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_TX_INT_array_field_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 mask,
                                                    UINT32 ofs,
                                                    UINT32 value )
{
    IOLOG( "%s <- A=%d N=%d mask=0x%08x ofs=%d value=0x%08x", "ilkn_reg_TX_INT_array_field_set", A, N, mask, ofs, value );
    ilkn_field_set( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_TX_INT(N),
                    mask,
                    PMC_ILAKEN_REG_TX_INT_UNUSED_MASK,
                    ofs,
                    value);

}

static INLINE UINT32 ilkn_reg_TX_INT_array_read( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_TX_INT_array_read( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_CONFIG,
                               PMC_ILAKEN_REG_TX_INT(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "ilkn_reg_TX_INT_array_read", reg_value, A, N);
    return reg_value;
}

static INLINE void ilkn_reg_TX_INT_MASK_array_write( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_TX_INT_MASK_array_write( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ilkn_reg_TX_INT_MASK_array_write", value );
    ilkn_reg_write( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_TX_INT_MASK(N),
                    value);
}

static INLINE void ilkn_reg_TX_INT_MASK_array_field_set( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32  N,
                                                         UINT32 mask,
                                                         UINT32 ofs,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_TX_INT_MASK_array_field_set( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32  N,
                                                         UINT32 mask,
                                                         UINT32 ofs,
                                                         UINT32 value )
{
    IOLOG( "%s <- A=%d N=%d mask=0x%08x ofs=%d value=0x%08x", "ilkn_reg_TX_INT_MASK_array_field_set", A, N, mask, ofs, value );
    ilkn_field_set( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_TX_INT_MASK(N),
                    mask,
                    PMC_ILAKEN_REG_TX_INT_MASK_UNUSED_MASK,
                    ofs,
                    value);

}

static INLINE UINT32 ilkn_reg_TX_INT_MASK_array_read( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_TX_INT_MASK_array_read( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_CONFIG,
                               PMC_ILAKEN_REG_TX_INT_MASK(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "ilkn_reg_TX_INT_MASK_array_read", reg_value, A, N);
    return reg_value;
}

static INLINE void ilkn_reg_RX_INT_array_write( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_RX_INT_array_write( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ilkn_reg_RX_INT_array_write", value );
    ilkn_reg_write( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_RX_INT(N),
                    value);
}

static INLINE void ilkn_reg_RX_INT_array_field_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 mask,
                                                    UINT32 ofs,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_RX_INT_array_field_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 mask,
                                                    UINT32 ofs,
                                                    UINT32 value )
{
    IOLOG( "%s <- A=%d N=%d mask=0x%08x ofs=%d value=0x%08x", "ilkn_reg_RX_INT_array_field_set", A, N, mask, ofs, value );
    ilkn_field_set( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_RX_INT(N),
                    mask,
                    PMC_ILAKEN_REG_RX_INT_UNUSED_MASK,
                    ofs,
                    value);

}

static INLINE UINT32 ilkn_reg_RX_INT_array_read( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_RX_INT_array_read( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_CONFIG,
                               PMC_ILAKEN_REG_RX_INT(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "ilkn_reg_RX_INT_array_read", reg_value, A, N);
    return reg_value;
}

static INLINE void ilkn_reg_RX_INT_MASK_array_write( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_RX_INT_MASK_array_write( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ilkn_reg_RX_INT_MASK_array_write", value );
    ilkn_reg_write( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_RX_INT_MASK(N),
                    value);
}

static INLINE void ilkn_reg_RX_INT_MASK_array_field_set( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32  N,
                                                         UINT32 mask,
                                                         UINT32 ofs,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_reg_RX_INT_MASK_array_field_set( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32  N,
                                                         UINT32 mask,
                                                         UINT32 ofs,
                                                         UINT32 value )
{
    IOLOG( "%s <- A=%d N=%d mask=0x%08x ofs=%d value=0x%08x", "ilkn_reg_RX_INT_MASK_array_field_set", A, N, mask, ofs, value );
    ilkn_field_set( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_ILAKEN_REG_RX_INT_MASK(N),
                    mask,
                    PMC_ILAKEN_REG_RX_INT_MASK_UNUSED_MASK,
                    ofs,
                    value);

}

static INLINE UINT32 ilkn_reg_RX_INT_MASK_array_read( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_RX_INT_MASK_array_read( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_CONFIG,
                               PMC_ILAKEN_REG_RX_INT_MASK(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "ilkn_reg_RX_INT_MASK_array_read", reg_value, A, N);
    return reg_value;
}

static INLINE UINT32 ilkn_reg_TX_STAT_MESSAGE_RXD_read( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_TX_STAT_MESSAGE_RXD_read( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_STATUS,
                               PMC_ILAKEN_REG_TX_STAT_MESSAGE_RXD);

    IOLOG( "%s -> 0x%08x; A=%d", "ilkn_reg_TX_STAT_MESSAGE_RXD_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 ilkn_reg_RX_METAFRAME_ERR_read( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_RX_METAFRAME_ERR_read( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_STATUS,
                               PMC_ILAKEN_REG_RX_METAFRAME_ERR);

    IOLOG( "%s -> 0x%08x; A=%d", "ilkn_reg_RX_METAFRAME_ERR_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 ilkn_reg_RX_BAD_CTRL_WORD_ERR_read( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_RX_BAD_CTRL_WORD_ERR_read( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_STATUS,
                               PMC_ILAKEN_REG_RX_BAD_CTRL_WORD_ERR);

    IOLOG( "%s -> 0x%08x; A=%d", "ilkn_reg_RX_BAD_CTRL_WORD_ERR_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 ilkn_reg_RX_SCRAMBLER_STATE_ERR_read( ilkn_buffer_t *b_ptr,
                                                           sifd_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_RX_SCRAMBLER_STATE_ERR_read( ilkn_buffer_t *b_ptr,
                                                           sifd_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_STATUS,
                               PMC_ILAKEN_REG_RX_SCRAMBLER_STATE_ERR);

    IOLOG( "%s -> 0x%08x; A=%d", "ilkn_reg_RX_SCRAMBLER_STATE_ERR_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 ilkn_reg_RX_CRC32_ERR_read( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_RX_CRC32_ERR_read( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_STATUS,
                               PMC_ILAKEN_REG_RX_CRC32_ERR);

    IOLOG( "%s -> 0x%08x; A=%d", "ilkn_reg_RX_CRC32_ERR_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 ilkn_reg_RX_CDR_ERR_read( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_RX_CDR_ERR_read( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_STATUS,
                               PMC_ILAKEN_REG_RX_CDR_ERR);

    IOLOG( "%s -> 0x%08x; A=%d", "ilkn_reg_RX_CDR_ERR_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 ilkn_reg_RX_WORD_SYNC_CHANGED_read( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_RX_WORD_SYNC_CHANGED_read( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_STATUS,
                               PMC_ILAKEN_REG_RX_WORD_SYNC_CHANGED);

    IOLOG( "%s -> 0x%08x; A=%d", "ilkn_reg_RX_WORD_SYNC_CHANGED_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 ilkn_reg_RX_ALIGN_STAT_read( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_RX_ALIGN_STAT_read( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_STATUS,
                               PMC_ILAKEN_REG_RX_ALIGN_STAT);

    IOLOG( "%s -> 0x%08x; A=%d", "ilkn_reg_RX_ALIGN_STAT_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 ilkn_reg_STAT_MESSAGE_RXD_read( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_STAT_MESSAGE_RXD_read( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_STATUS,
                               PMC_ILAKEN_REG_STAT_MESSAGE_RXD);

    IOLOG( "%s -> 0x%08x; A=%d", "ilkn_reg_STAT_MESSAGE_RXD_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 ilkn_reg_RX_WORD_SYNC_read( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_RX_WORD_SYNC_read( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_STATUS,
                               PMC_ILAKEN_REG_RX_WORD_SYNC);

    IOLOG( "%s -> 0x%08x; A=%d", "ilkn_reg_RX_WORD_SYNC_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 ilkn_reg_CRC32_CNT_FILL_read( ilkn_buffer_t *b_ptr,
                                                   sifd_handle_t *h_ptr,
                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_CRC32_CNT_FILL_read( ilkn_buffer_t *b_ptr,
                                                   sifd_handle_t *h_ptr,
                                                   UINT32 A )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_STATUS,
                               PMC_ILAKEN_REG_CRC32_CNT_FILL);

    IOLOG( "%s -> 0x%08x; A=%d", "ilkn_reg_CRC32_CNT_FILL_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 ilkn_reg_RX_CDR_LOST_CNT_FILL_read( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_RX_CDR_LOST_CNT_FILL_read( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_STATUS,
                               PMC_ILAKEN_REG_RX_CDR_LOST_CNT_FILL);

    IOLOG( "%s -> 0x%08x; A=%d", "ilkn_reg_RX_CDR_LOST_CNT_FILL_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 ilkn_reg_RX_WORD_SYNC_CNT_FILL_read( ilkn_buffer_t *b_ptr,
                                                          sifd_handle_t *h_ptr,
                                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_RX_WORD_SYNC_CNT_FILL_read( ilkn_buffer_t *b_ptr,
                                                          sifd_handle_t *h_ptr,
                                                          UINT32 A )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_STATUS,
                               PMC_ILAKEN_REG_RX_WORD_SYNC_CNT_FILL);

    IOLOG( "%s -> 0x%08x; A=%d", "ilkn_reg_RX_WORD_SYNC_CNT_FILL_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 ilkn_reg_CNT_FILL_array_read( ilkn_buffer_t *b_ptr,
                                                   sifd_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_CNT_FILL_array_read( ilkn_buffer_t *b_ptr,
                                                   sifd_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32  N )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_STATUS,
                               PMC_ILAKEN_REG_CNT_FILL(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "ilkn_reg_CNT_FILL_array_read", reg_value, A, N);
    return reg_value;
}

static INLINE UINT32 ilkn_reg_BYTE_CNT_HIGH_READ_array_read( ilkn_buffer_t *b_ptr,
                                                             sifd_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_BYTE_CNT_HIGH_READ_array_read( ilkn_buffer_t *b_ptr,
                                                             sifd_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32  N )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_STATUS,
                               PMC_ILAKEN_REG_BYTE_CNT_HIGH_READ(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "ilkn_reg_BYTE_CNT_HIGH_READ_array_read", reg_value, A, N);
    return reg_value;
}

static INLINE UINT32 ilkn_reg_BYTE_CNT_LOW_READ_array_read( ilkn_buffer_t *b_ptr,
                                                            sifd_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_BYTE_CNT_LOW_READ_array_read( ilkn_buffer_t *b_ptr,
                                                            sifd_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32  N )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_STATUS,
                               PMC_ILAKEN_REG_BYTE_CNT_LOW_READ(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "ilkn_reg_BYTE_CNT_LOW_READ_array_read", reg_value, A, N);
    return reg_value;
}

static INLINE UINT32 ilkn_reg_PACKET_CNT_HIGH_READ_array_read( ilkn_buffer_t *b_ptr,
                                                               sifd_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_PACKET_CNT_HIGH_READ_array_read( ilkn_buffer_t *b_ptr,
                                                               sifd_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32  N )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_STATUS,
                               PMC_ILAKEN_REG_PACKET_CNT_HIGH_READ(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "ilkn_reg_PACKET_CNT_HIGH_READ_array_read", reg_value, A, N);
    return reg_value;
}

static INLINE UINT32 ilkn_reg_PACKET_CNT_LOW_READ_array_read( ilkn_buffer_t *b_ptr,
                                                              sifd_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_PACKET_CNT_LOW_READ_array_read( ilkn_buffer_t *b_ptr,
                                                              sifd_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32  N )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_STATUS,
                               PMC_ILAKEN_REG_PACKET_CNT_LOW_READ(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "ilkn_reg_PACKET_CNT_LOW_READ_array_read", reg_value, A, N);
    return reg_value;
}

static INLINE UINT32 ilkn_reg_ERR_CNT_HIGH_READ_array_read( ilkn_buffer_t *b_ptr,
                                                            sifd_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_ERR_CNT_HIGH_READ_array_read( ilkn_buffer_t *b_ptr,
                                                            sifd_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32  N )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_STATUS,
                               PMC_ILAKEN_REG_ERR_CNT_HIGH_READ(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "ilkn_reg_ERR_CNT_HIGH_READ_array_read", reg_value, A, N);
    return reg_value;
}

static INLINE UINT32 ilkn_reg_ERR_CNT_LOW_READ_array_read( ilkn_buffer_t *b_ptr,
                                                           sifd_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_ERR_CNT_LOW_READ_array_read( ilkn_buffer_t *b_ptr,
                                                           sifd_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32  N )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_STATUS,
                               PMC_ILAKEN_REG_ERR_CNT_LOW_READ(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "ilkn_reg_ERR_CNT_LOW_READ_array_read", reg_value, A, N);
    return reg_value;
}

static INLINE UINT32 ilkn_reg_PROGRAMMABLE_CALENDAR_READ_DATA_array_read( ilkn_buffer_t *b_ptr,
                                                                          sifd_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_reg_PROGRAMMABLE_CALENDAR_READ_DATA_array_read( ilkn_buffer_t *b_ptr,
                                                                          sifd_handle_t *h_ptr,
                                                                          UINT32 A,
                                                                          UINT32  N )
{
    UINT32 reg_value;

    reg_value = ilkn_reg_read( b_ptr,
                               h_ptr,
                               A,
                               MEM_TYPE_STATUS,
                               PMC_ILAKEN_REG_PROGRAMMABLE_CALENDAR_READ_DATA(N));

    IOLOG( "%s -> 0x%08x; A=%d N=%d", "ilkn_reg_PROGRAMMABLE_CALENDAR_READ_DATA_array_read", reg_value, A, N);
    return reg_value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config
 * ==================================================================================
 */
static INLINE void ilkn_field_TX_STATUS_MSG_EN_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_TX_STATUS_MSG_EN_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_TX_STATUS_MSG_EN_set", A, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_TX_STATUS_MSG_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "ilkn_field_TX_STATUS_MSG_EN_set", A, value );

    /* (0x00005418 bits 10) field TX_STATUS_MSG_EN of register PMC_ILAKEN_REG_TX_CTRL */
    ilkn_reg_TX_CTRL_field_set( b_ptr,
                                h_ptr,
                                A,
                                ILAKEN_REG_TX_CTRL_BIT_TX_STATUS_MSG_EN_MSK,
                                ILAKEN_REG_TX_CTRL_BIT_TX_STATUS_MSG_EN_OFF,
                                value);
}

static INLINE UINT32 ilkn_field_TX_STATUS_MSG_EN_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_TX_STATUS_MSG_EN_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_TX_STATUS_MSG_EN_get", A, 1);
    /* (0x00005418 bits 10) field TX_STATUS_MSG_EN of register PMC_ILAKEN_REG_TX_CTRL */
    reg_value = ilkn_reg_TX_CTRL_read(  b_ptr, h_ptr, A);
    value = (reg_value & ILAKEN_REG_TX_CTRL_BIT_TX_STATUS_MSG_EN_MSK) >> ILAKEN_REG_TX_CTRL_BIT_TX_STATUS_MSG_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_TX_STATUS_MSG_EN_get", A, value );

    return value;
}
static INLINE void ilkn_field_TX_DATA_OUT_KILL_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_TX_DATA_OUT_KILL_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_TX_DATA_OUT_KILL_set", A, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_TX_DATA_OUT_KILL_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "ilkn_field_TX_DATA_OUT_KILL_set", A, value );

    /* (0x00005418 bits 7) field TX_DATA_OUT_KILL of register PMC_ILAKEN_REG_TX_CTRL */
    ilkn_reg_TX_CTRL_field_set( b_ptr,
                                h_ptr,
                                A,
                                ILAKEN_REG_TX_CTRL_BIT_TX_DATA_OUT_KILL_MSK,
                                ILAKEN_REG_TX_CTRL_BIT_TX_DATA_OUT_KILL_OFF,
                                value);
}

static INLINE UINT32 ilkn_field_TX_DATA_OUT_KILL_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_TX_DATA_OUT_KILL_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_TX_DATA_OUT_KILL_get", A, 1);
    /* (0x00005418 bits 7) field TX_DATA_OUT_KILL of register PMC_ILAKEN_REG_TX_CTRL */
    reg_value = ilkn_reg_TX_CTRL_read(  b_ptr, h_ptr, A);
    value = (reg_value & ILAKEN_REG_TX_CTRL_BIT_TX_DATA_OUT_KILL_MSK) >> ILAKEN_REG_TX_CTRL_BIT_TX_DATA_OUT_KILL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_TX_DATA_OUT_KILL_get", A, value );

    return value;
}
static INLINE void ilkn_field_TX_FC_OUT_KILL_set( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_TX_FC_OUT_KILL_set( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_TX_FC_OUT_KILL_set", A, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_TX_FC_OUT_KILL_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "ilkn_field_TX_FC_OUT_KILL_set", A, value );

    /* (0x00005418 bits 6) field TX_FC_OUT_KILL of register PMC_ILAKEN_REG_TX_CTRL */
    ilkn_reg_TX_CTRL_field_set( b_ptr,
                                h_ptr,
                                A,
                                ILAKEN_REG_TX_CTRL_BIT_TX_FC_OUT_KILL_MSK,
                                ILAKEN_REG_TX_CTRL_BIT_TX_FC_OUT_KILL_OFF,
                                value);
}

static INLINE UINT32 ilkn_field_TX_FC_OUT_KILL_get( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_TX_FC_OUT_KILL_get( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_TX_FC_OUT_KILL_get", A, 1);
    /* (0x00005418 bits 6) field TX_FC_OUT_KILL of register PMC_ILAKEN_REG_TX_CTRL */
    reg_value = ilkn_reg_TX_CTRL_read(  b_ptr, h_ptr, A);
    value = (reg_value & ILAKEN_REG_TX_CTRL_BIT_TX_FC_OUT_KILL_MSK) >> ILAKEN_REG_TX_CTRL_BIT_TX_FC_OUT_KILL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_TX_FC_OUT_KILL_get", A, value );

    return value;
}
static INLINE void ilkn_field_IB_UNALIGN_XOFF_DIS_set( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_IB_UNALIGN_XOFF_DIS_set( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_IB_UNALIGN_XOFF_DIS_set", A, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_IB_UNALIGN_XOFF_DIS_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "ilkn_field_IB_UNALIGN_XOFF_DIS_set", A, value );

    /* (0x00005418 bits 1) field IB_UNALIGN_XOFF_DIS of register PMC_ILAKEN_REG_TX_CTRL */
    ilkn_reg_TX_CTRL_field_set( b_ptr,
                                h_ptr,
                                A,
                                ILAKEN_REG_TX_CTRL_BIT_IB_UNALIGN_XOFF_DIS_MSK,
                                ILAKEN_REG_TX_CTRL_BIT_IB_UNALIGN_XOFF_DIS_OFF,
                                value);
}

static INLINE UINT32 ilkn_field_IB_UNALIGN_XOFF_DIS_get( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_IB_UNALIGN_XOFF_DIS_get( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_IB_UNALIGN_XOFF_DIS_get", A, 1);
    /* (0x00005418 bits 1) field IB_UNALIGN_XOFF_DIS of register PMC_ILAKEN_REG_TX_CTRL */
    reg_value = ilkn_reg_TX_CTRL_read(  b_ptr, h_ptr, A);
    value = (reg_value & ILAKEN_REG_TX_CTRL_BIT_IB_UNALIGN_XOFF_DIS_MSK) >> ILAKEN_REG_TX_CTRL_BIT_IB_UNALIGN_XOFF_DIS_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_IB_UNALIGN_XOFF_DIS_get", A, value );

    return value;
}
static INLINE void ilkn_field_WM_HIGH_set( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_WM_HIGH_set( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_WM_HIGH_set", A, 1);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_WM_HIGH_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "ilkn_field_WM_HIGH_set", A, value );

    /* (0x00005420 bits 11:8) field WM_HIGH of register PMC_ILAKEN_REG_TX_FIFO_CFG */
    ilkn_reg_TX_FIFO_CFG_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    ILAKEN_REG_TX_FIFO_CFG_BIT_WM_HIGH_MSK,
                                    ILAKEN_REG_TX_FIFO_CFG_BIT_WM_HIGH_OFF,
                                    value);
}

static INLINE UINT32 ilkn_field_WM_HIGH_get( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_WM_HIGH_get( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_WM_HIGH_get", A, 1);
    /* (0x00005420 bits 11:8) field WM_HIGH of register PMC_ILAKEN_REG_TX_FIFO_CFG */
    reg_value = ilkn_reg_TX_FIFO_CFG_read(  b_ptr, h_ptr, A);
    value = (reg_value & ILAKEN_REG_TX_FIFO_CFG_BIT_WM_HIGH_MSK) >> ILAKEN_REG_TX_FIFO_CFG_BIT_WM_HIGH_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_WM_HIGH_get", A, value );

    return value;
}
static INLINE void ilkn_field_range_WM_HIGH_set( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_WM_HIGH_set( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit,
                                                 UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_WM_HIGH_set", A, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_WM_HIGH_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_WM_HIGH_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_WM_HIGH_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00005420 bits 11:8) field WM_HIGH of register PMC_ILAKEN_REG_TX_FIFO_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00005420 bits 11:8) field WM_HIGH of register PMC_ILAKEN_REG_TX_FIFO_CFG */
        ilkn_reg_TX_FIFO_CFG_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        subfield_mask << (ILAKEN_REG_TX_FIFO_CFG_BIT_WM_HIGH_OFF + subfield_offset),
                                        ILAKEN_REG_TX_FIFO_CFG_BIT_WM_HIGH_OFF + subfield_offset,
                                        value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_WM_HIGH_get( ilkn_buffer_t *b_ptr,
                                                   sifd_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_WM_HIGH_get( ilkn_buffer_t *b_ptr,
                                                   sifd_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_WM_HIGH_get", A, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_WM_HIGH_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_WM_HIGH_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00005420 bits 11:8) field WM_HIGH of register PMC_ILAKEN_REG_TX_FIFO_CFG */
    reg_value = ilkn_reg_TX_FIFO_CFG_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & ILAKEN_REG_TX_FIFO_CFG_BIT_WM_HIGH_MSK)
                  >> ILAKEN_REG_TX_FIFO_CFG_BIT_WM_HIGH_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_TX_FIFO_CFG_BIT_WM_HIGH_MSK, ILAKEN_REG_TX_FIFO_CFG_BIT_WM_HIGH_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_WM_HIGH_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_WM_LOW_set( ilkn_buffer_t *b_ptr,
                                          sifd_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_WM_LOW_set( ilkn_buffer_t *b_ptr,
                                          sifd_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_WM_LOW_set", A, 1);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_WM_LOW_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "ilkn_field_WM_LOW_set", A, value );

    /* (0x00005420 bits 3:0) field WM_LOW of register PMC_ILAKEN_REG_TX_FIFO_CFG */
    ilkn_reg_TX_FIFO_CFG_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    ILAKEN_REG_TX_FIFO_CFG_BIT_WM_LOW_MSK,
                                    ILAKEN_REG_TX_FIFO_CFG_BIT_WM_LOW_OFF,
                                    value);
}

static INLINE UINT32 ilkn_field_WM_LOW_get( ilkn_buffer_t *b_ptr,
                                            sifd_handle_t *h_ptr,
                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_WM_LOW_get( ilkn_buffer_t *b_ptr,
                                            sifd_handle_t *h_ptr,
                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_WM_LOW_get", A, 1);
    /* (0x00005420 bits 3:0) field WM_LOW of register PMC_ILAKEN_REG_TX_FIFO_CFG */
    reg_value = ilkn_reg_TX_FIFO_CFG_read(  b_ptr, h_ptr, A);
    value = (reg_value & ILAKEN_REG_TX_FIFO_CFG_BIT_WM_LOW_MSK) >> ILAKEN_REG_TX_FIFO_CFG_BIT_WM_LOW_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_WM_LOW_get", A, value );

    return value;
}
static INLINE void ilkn_field_range_WM_LOW_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 start_bit,
                                                UINT32 stop_bit,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_WM_LOW_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 start_bit,
                                                UINT32 stop_bit,
                                                UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_WM_LOW_set", A, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_WM_LOW_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_WM_LOW_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_WM_LOW_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00005420 bits 3:0) field WM_LOW of register PMC_ILAKEN_REG_TX_FIFO_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00005420 bits 3:0) field WM_LOW of register PMC_ILAKEN_REG_TX_FIFO_CFG */
        ilkn_reg_TX_FIFO_CFG_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        subfield_mask << (ILAKEN_REG_TX_FIFO_CFG_BIT_WM_LOW_OFF + subfield_offset),
                                        ILAKEN_REG_TX_FIFO_CFG_BIT_WM_LOW_OFF + subfield_offset,
                                        value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_WM_LOW_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_WM_LOW_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_WM_LOW_get", A, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_WM_LOW_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_WM_LOW_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00005420 bits 3:0) field WM_LOW of register PMC_ILAKEN_REG_TX_FIFO_CFG */
    reg_value = ilkn_reg_TX_FIFO_CFG_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & ILAKEN_REG_TX_FIFO_CFG_BIT_WM_LOW_MSK)
                  >> ILAKEN_REG_TX_FIFO_CFG_BIT_WM_LOW_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_TX_FIFO_CFG_BIT_WM_LOW_MSK, ILAKEN_REG_TX_FIFO_CFG_BIT_WM_LOW_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_WM_LOW_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_CREDIT_MAX_set( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_CREDIT_MAX_set( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CREDIT_MAX_set", A, 1);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_CREDIT_MAX_set", value, 65535);
    IOLOG( "%s <= A=%d 0x%08x", "ilkn_field_CREDIT_MAX_set", A, value );

    /* (0x00005438 bits 31:16) field CREDIT_MAX of register PMC_ILAKEN_REG_TX_RATE_LIMITER_0 */
    ilkn_reg_TX_RATE_LIMITER_0_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          ILAKEN_REG_TX_RATE_LIMITER_0_BIT_CREDIT_MAX_MSK,
                                          ILAKEN_REG_TX_RATE_LIMITER_0_BIT_CREDIT_MAX_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_CREDIT_MAX_get( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_CREDIT_MAX_get( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CREDIT_MAX_get", A, 1);
    /* (0x00005438 bits 31:16) field CREDIT_MAX of register PMC_ILAKEN_REG_TX_RATE_LIMITER_0 */
    reg_value = ilkn_reg_TX_RATE_LIMITER_0_read(  b_ptr, h_ptr, A);
    value = (reg_value & ILAKEN_REG_TX_RATE_LIMITER_0_BIT_CREDIT_MAX_MSK) >> ILAKEN_REG_TX_RATE_LIMITER_0_BIT_CREDIT_MAX_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_CREDIT_MAX_get", A, value );

    return value;
}
static INLINE void ilkn_field_range_CREDIT_MAX_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_CREDIT_MAX_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit,
                                                    UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_CREDIT_MAX_set", A, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_CREDIT_MAX_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_CREDIT_MAX_set", stop_bit, 15 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_CREDIT_MAX_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00005438 bits 31:16) field CREDIT_MAX of register PMC_ILAKEN_REG_TX_RATE_LIMITER_0 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00005438 bits 31:16) field CREDIT_MAX of register PMC_ILAKEN_REG_TX_RATE_LIMITER_0 */
        ilkn_reg_TX_RATE_LIMITER_0_field_set( b_ptr,
                                              h_ptr,
                                              A,
                                              subfield_mask << (ILAKEN_REG_TX_RATE_LIMITER_0_BIT_CREDIT_MAX_OFF + subfield_offset),
                                              ILAKEN_REG_TX_RATE_LIMITER_0_BIT_CREDIT_MAX_OFF + subfield_offset,
                                              value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_CREDIT_MAX_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_CREDIT_MAX_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_CREDIT_MAX_get", A, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_CREDIT_MAX_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_CREDIT_MAX_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00005438 bits 31:16) field CREDIT_MAX of register PMC_ILAKEN_REG_TX_RATE_LIMITER_0 */
    reg_value = ilkn_reg_TX_RATE_LIMITER_0_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & ILAKEN_REG_TX_RATE_LIMITER_0_BIT_CREDIT_MAX_MSK)
                  >> ILAKEN_REG_TX_RATE_LIMITER_0_BIT_CREDIT_MAX_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_TX_RATE_LIMITER_0_BIT_CREDIT_MAX_MSK, ILAKEN_REG_TX_RATE_LIMITER_0_BIT_CREDIT_MAX_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_CREDIT_MAX_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_BYTE_GRAN_set( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_BYTE_GRAN_set( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BYTE_GRAN_set", A, 1);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_BYTE_GRAN_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "ilkn_field_BYTE_GRAN_set", A, value );

    /* (0x00005438 bits 10:8) field BYTE_GRAN of register PMC_ILAKEN_REG_TX_RATE_LIMITER_0 */
    ilkn_reg_TX_RATE_LIMITER_0_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          ILAKEN_REG_TX_RATE_LIMITER_0_BIT_BYTE_GRAN_MSK,
                                          ILAKEN_REG_TX_RATE_LIMITER_0_BIT_BYTE_GRAN_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_BYTE_GRAN_get( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_BYTE_GRAN_get( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BYTE_GRAN_get", A, 1);
    /* (0x00005438 bits 10:8) field BYTE_GRAN of register PMC_ILAKEN_REG_TX_RATE_LIMITER_0 */
    reg_value = ilkn_reg_TX_RATE_LIMITER_0_read(  b_ptr, h_ptr, A);
    value = (reg_value & ILAKEN_REG_TX_RATE_LIMITER_0_BIT_BYTE_GRAN_MSK) >> ILAKEN_REG_TX_RATE_LIMITER_0_BIT_BYTE_GRAN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_BYTE_GRAN_get", A, value );

    return value;
}
static INLINE void ilkn_field_range_BYTE_GRAN_set( ilkn_buffer_t *b_ptr,
                                                   sifd_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_BYTE_GRAN_set( ilkn_buffer_t *b_ptr,
                                                   sifd_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit,
                                                   UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_BYTE_GRAN_set", A, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_BYTE_GRAN_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_BYTE_GRAN_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_BYTE_GRAN_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00005438 bits 10:8) field BYTE_GRAN of register PMC_ILAKEN_REG_TX_RATE_LIMITER_0 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00005438 bits 10:8) field BYTE_GRAN of register PMC_ILAKEN_REG_TX_RATE_LIMITER_0 */
        ilkn_reg_TX_RATE_LIMITER_0_field_set( b_ptr,
                                              h_ptr,
                                              A,
                                              subfield_mask << (ILAKEN_REG_TX_RATE_LIMITER_0_BIT_BYTE_GRAN_OFF + subfield_offset),
                                              ILAKEN_REG_TX_RATE_LIMITER_0_BIT_BYTE_GRAN_OFF + subfield_offset,
                                              value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_BYTE_GRAN_get( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_BYTE_GRAN_get( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_BYTE_GRAN_get", A, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_BYTE_GRAN_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_BYTE_GRAN_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00005438 bits 10:8) field BYTE_GRAN of register PMC_ILAKEN_REG_TX_RATE_LIMITER_0 */
    reg_value = ilkn_reg_TX_RATE_LIMITER_0_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & ILAKEN_REG_TX_RATE_LIMITER_0_BIT_BYTE_GRAN_MSK)
                  >> ILAKEN_REG_TX_RATE_LIMITER_0_BIT_BYTE_GRAN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_TX_RATE_LIMITER_0_BIT_BYTE_GRAN_MSK, ILAKEN_REG_TX_RATE_LIMITER_0_BIT_BYTE_GRAN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_BYTE_GRAN_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_RL_ENABLE_set( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_RL_ENABLE_set( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RL_ENABLE_set", A, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_RL_ENABLE_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "ilkn_field_RL_ENABLE_set", A, value );

    /* (0x00005438 bits 0) field RL_ENABLE of register PMC_ILAKEN_REG_TX_RATE_LIMITER_0 */
    ilkn_reg_TX_RATE_LIMITER_0_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          ILAKEN_REG_TX_RATE_LIMITER_0_BIT_RL_ENABLE_MSK,
                                          ILAKEN_REG_TX_RATE_LIMITER_0_BIT_RL_ENABLE_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_RL_ENABLE_get( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RL_ENABLE_get( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RL_ENABLE_get", A, 1);
    /* (0x00005438 bits 0) field RL_ENABLE of register PMC_ILAKEN_REG_TX_RATE_LIMITER_0 */
    reg_value = ilkn_reg_TX_RATE_LIMITER_0_read(  b_ptr, h_ptr, A);
    value = (reg_value & ILAKEN_REG_TX_RATE_LIMITER_0_BIT_RL_ENABLE_MSK) >> ILAKEN_REG_TX_RATE_LIMITER_0_BIT_RL_ENABLE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_RL_ENABLE_get", A, value );

    return value;
}
static INLINE void ilkn_field_RL_TIME_set( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_RL_TIME_set( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RL_TIME_set", A, 1);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_RL_TIME_set", value, 65535);
    IOLOG( "%s <= A=%d 0x%08x", "ilkn_field_RL_TIME_set", A, value );

    /* (0x0000543c bits 31:16) field RL_TIME of register PMC_ILAKEN_REG_TX_RATE_LIMITER_1 */
    ilkn_reg_TX_RATE_LIMITER_1_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          ILAKEN_REG_TX_RATE_LIMITER_1_BIT_RL_TIME_MSK,
                                          ILAKEN_REG_TX_RATE_LIMITER_1_BIT_RL_TIME_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_RL_TIME_get( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RL_TIME_get( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RL_TIME_get", A, 1);
    /* (0x0000543c bits 31:16) field RL_TIME of register PMC_ILAKEN_REG_TX_RATE_LIMITER_1 */
    reg_value = ilkn_reg_TX_RATE_LIMITER_1_read(  b_ptr, h_ptr, A);
    value = (reg_value & ILAKEN_REG_TX_RATE_LIMITER_1_BIT_RL_TIME_MSK) >> ILAKEN_REG_TX_RATE_LIMITER_1_BIT_RL_TIME_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_RL_TIME_get", A, value );

    return value;
}
static INLINE void ilkn_field_range_RL_TIME_set( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_RL_TIME_set( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit,
                                                 UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_RL_TIME_set", A, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_RL_TIME_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_RL_TIME_set", stop_bit, 15 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_RL_TIME_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000543c bits 31:16) field RL_TIME of register PMC_ILAKEN_REG_TX_RATE_LIMITER_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000543c bits 31:16) field RL_TIME of register PMC_ILAKEN_REG_TX_RATE_LIMITER_1 */
        ilkn_reg_TX_RATE_LIMITER_1_field_set( b_ptr,
                                              h_ptr,
                                              A,
                                              subfield_mask << (ILAKEN_REG_TX_RATE_LIMITER_1_BIT_RL_TIME_OFF + subfield_offset),
                                              ILAKEN_REG_TX_RATE_LIMITER_1_BIT_RL_TIME_OFF + subfield_offset,
                                              value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_RL_TIME_get( ilkn_buffer_t *b_ptr,
                                                   sifd_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_RL_TIME_get( ilkn_buffer_t *b_ptr,
                                                   sifd_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_RL_TIME_get", A, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_RL_TIME_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_RL_TIME_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000543c bits 31:16) field RL_TIME of register PMC_ILAKEN_REG_TX_RATE_LIMITER_1 */
    reg_value = ilkn_reg_TX_RATE_LIMITER_1_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & ILAKEN_REG_TX_RATE_LIMITER_1_BIT_RL_TIME_MSK)
                  >> ILAKEN_REG_TX_RATE_LIMITER_1_BIT_RL_TIME_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_TX_RATE_LIMITER_1_BIT_RL_TIME_MSK, ILAKEN_REG_TX_RATE_LIMITER_1_BIT_RL_TIME_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_RL_TIME_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_RL_DELTA_set( ilkn_buffer_t *b_ptr,
                                            sifd_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_RL_DELTA_set( ilkn_buffer_t *b_ptr,
                                            sifd_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RL_DELTA_set", A, 1);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_RL_DELTA_set", value, 65535);
    IOLOG( "%s <= A=%d 0x%08x", "ilkn_field_RL_DELTA_set", A, value );

    /* (0x0000543c bits 15:0) field RL_DELTA of register PMC_ILAKEN_REG_TX_RATE_LIMITER_1 */
    ilkn_reg_TX_RATE_LIMITER_1_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          ILAKEN_REG_TX_RATE_LIMITER_1_BIT_RL_DELTA_MSK,
                                          ILAKEN_REG_TX_RATE_LIMITER_1_BIT_RL_DELTA_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_RL_DELTA_get( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RL_DELTA_get( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RL_DELTA_get", A, 1);
    /* (0x0000543c bits 15:0) field RL_DELTA of register PMC_ILAKEN_REG_TX_RATE_LIMITER_1 */
    reg_value = ilkn_reg_TX_RATE_LIMITER_1_read(  b_ptr, h_ptr, A);
    value = (reg_value & ILAKEN_REG_TX_RATE_LIMITER_1_BIT_RL_DELTA_MSK) >> ILAKEN_REG_TX_RATE_LIMITER_1_BIT_RL_DELTA_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_RL_DELTA_get", A, value );

    return value;
}
static INLINE void ilkn_field_range_RL_DELTA_set( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_RL_DELTA_set( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit,
                                                  UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_RL_DELTA_set", A, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_RL_DELTA_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_RL_DELTA_set", stop_bit, 15 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_RL_DELTA_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000543c bits 15:0) field RL_DELTA of register PMC_ILAKEN_REG_TX_RATE_LIMITER_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000543c bits 15:0) field RL_DELTA of register PMC_ILAKEN_REG_TX_RATE_LIMITER_1 */
        ilkn_reg_TX_RATE_LIMITER_1_field_set( b_ptr,
                                              h_ptr,
                                              A,
                                              subfield_mask << (ILAKEN_REG_TX_RATE_LIMITER_1_BIT_RL_DELTA_OFF + subfield_offset),
                                              ILAKEN_REG_TX_RATE_LIMITER_1_BIT_RL_DELTA_OFF + subfield_offset,
                                              value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_RL_DELTA_get( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_RL_DELTA_get( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_RL_DELTA_get", A, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_RL_DELTA_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_RL_DELTA_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000543c bits 15:0) field RL_DELTA of register PMC_ILAKEN_REG_TX_RATE_LIMITER_1 */
    reg_value = ilkn_reg_TX_RATE_LIMITER_1_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & ILAKEN_REG_TX_RATE_LIMITER_1_BIT_RL_DELTA_MSK)
                  >> ILAKEN_REG_TX_RATE_LIMITER_1_BIT_RL_DELTA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_TX_RATE_LIMITER_1_BIT_RL_DELTA_MSK, ILAKEN_REG_TX_RATE_LIMITER_1_BIT_RL_DELTA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_RL_DELTA_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_RX_STATUS_MSG_CONT_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_RX_STATUS_MSG_CONT_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_STATUS_MSG_CONT_set", A, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_RX_STATUS_MSG_CONT_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "ilkn_field_RX_STATUS_MSG_CONT_set", A, value );

    /* (0x00005618 bits 11) field RX_STATUS_MSG_CONT of register PMC_ILAKEN_REG_RX_CTRL */
    ilkn_reg_RX_CTRL_field_set( b_ptr,
                                h_ptr,
                                A,
                                ILAKEN_REG_RX_CTRL_BIT_RX_STATUS_MSG_CONT_MSK,
                                ILAKEN_REG_RX_CTRL_BIT_RX_STATUS_MSG_CONT_OFF,
                                value);
}

static INLINE UINT32 ilkn_field_RX_STATUS_MSG_CONT_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RX_STATUS_MSG_CONT_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_STATUS_MSG_CONT_get", A, 1);
    /* (0x00005618 bits 11) field RX_STATUS_MSG_CONT of register PMC_ILAKEN_REG_RX_CTRL */
    reg_value = ilkn_reg_RX_CTRL_read(  b_ptr, h_ptr, A);
    value = (reg_value & ILAKEN_REG_RX_CTRL_BIT_RX_STATUS_MSG_CONT_MSK) >> ILAKEN_REG_RX_CTRL_BIT_RX_STATUS_MSG_CONT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_RX_STATUS_MSG_CONT_get", A, value );

    return value;
}
static INLINE void ilkn_field_RX_STATUS_MSG_EN_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_RX_STATUS_MSG_EN_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_STATUS_MSG_EN_set", A, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_RX_STATUS_MSG_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "ilkn_field_RX_STATUS_MSG_EN_set", A, value );

    /* (0x00005618 bits 10) field RX_STATUS_MSG_EN of register PMC_ILAKEN_REG_RX_CTRL */
    ilkn_reg_RX_CTRL_field_set( b_ptr,
                                h_ptr,
                                A,
                                ILAKEN_REG_RX_CTRL_BIT_RX_STATUS_MSG_EN_MSK,
                                ILAKEN_REG_RX_CTRL_BIT_RX_STATUS_MSG_EN_OFF,
                                value);
}

static INLINE UINT32 ilkn_field_RX_STATUS_MSG_EN_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RX_STATUS_MSG_EN_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_STATUS_MSG_EN_get", A, 1);
    /* (0x00005618 bits 10) field RX_STATUS_MSG_EN of register PMC_ILAKEN_REG_RX_CTRL */
    reg_value = ilkn_reg_RX_CTRL_read(  b_ptr, h_ptr, A);
    value = (reg_value & ILAKEN_REG_RX_CTRL_BIT_RX_STATUS_MSG_EN_MSK) >> ILAKEN_REG_RX_CTRL_BIT_RX_STATUS_MSG_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_RX_STATUS_MSG_EN_get", A, value );

    return value;
}
static INLINE void ilkn_field_RX_DATA_OUT_KILL_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_RX_DATA_OUT_KILL_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_DATA_OUT_KILL_set", A, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_RX_DATA_OUT_KILL_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "ilkn_field_RX_DATA_OUT_KILL_set", A, value );

    /* (0x00005618 bits 7) field RX_DATA_OUT_KILL of register PMC_ILAKEN_REG_RX_CTRL */
    ilkn_reg_RX_CTRL_field_set( b_ptr,
                                h_ptr,
                                A,
                                ILAKEN_REG_RX_CTRL_BIT_RX_DATA_OUT_KILL_MSK,
                                ILAKEN_REG_RX_CTRL_BIT_RX_DATA_OUT_KILL_OFF,
                                value);
}

static INLINE UINT32 ilkn_field_RX_DATA_OUT_KILL_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RX_DATA_OUT_KILL_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_DATA_OUT_KILL_get", A, 1);
    /* (0x00005618 bits 7) field RX_DATA_OUT_KILL of register PMC_ILAKEN_REG_RX_CTRL */
    reg_value = ilkn_reg_RX_CTRL_read(  b_ptr, h_ptr, A);
    value = (reg_value & ILAKEN_REG_RX_CTRL_BIT_RX_DATA_OUT_KILL_MSK) >> ILAKEN_REG_RX_CTRL_BIT_RX_DATA_OUT_KILL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_RX_DATA_OUT_KILL_get", A, value );

    return value;
}
static INLINE void ilkn_field_RX_FC_OUT_KILL_set( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_RX_FC_OUT_KILL_set( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_FC_OUT_KILL_set", A, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_RX_FC_OUT_KILL_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "ilkn_field_RX_FC_OUT_KILL_set", A, value );

    /* (0x00005618 bits 6) field RX_FC_OUT_KILL of register PMC_ILAKEN_REG_RX_CTRL */
    ilkn_reg_RX_CTRL_field_set( b_ptr,
                                h_ptr,
                                A,
                                ILAKEN_REG_RX_CTRL_BIT_RX_FC_OUT_KILL_MSK,
                                ILAKEN_REG_RX_CTRL_BIT_RX_FC_OUT_KILL_OFF,
                                value);
}

static INLINE UINT32 ilkn_field_RX_FC_OUT_KILL_get( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RX_FC_OUT_KILL_get( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_FC_OUT_KILL_get", A, 1);
    /* (0x00005618 bits 6) field RX_FC_OUT_KILL of register PMC_ILAKEN_REG_RX_CTRL */
    reg_value = ilkn_reg_RX_CTRL_read(  b_ptr, h_ptr, A);
    value = (reg_value & ILAKEN_REG_RX_CTRL_BIT_RX_FC_OUT_KILL_MSK) >> ILAKEN_REG_RX_CTRL_BIT_RX_FC_OUT_KILL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_RX_FC_OUT_KILL_get", A, value );

    return value;
}
static INLINE void ilkn_field_OB_UNALIGN_XOFF_DIS_set( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_OB_UNALIGN_XOFF_DIS_set( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_OB_UNALIGN_XOFF_DIS_set", A, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_OB_UNALIGN_XOFF_DIS_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "ilkn_field_OB_UNALIGN_XOFF_DIS_set", A, value );

    /* (0x00005618 bits 1) field OB_UNALIGN_XOFF_DIS of register PMC_ILAKEN_REG_RX_CTRL */
    ilkn_reg_RX_CTRL_field_set( b_ptr,
                                h_ptr,
                                A,
                                ILAKEN_REG_RX_CTRL_BIT_OB_UNALIGN_XOFF_DIS_MSK,
                                ILAKEN_REG_RX_CTRL_BIT_OB_UNALIGN_XOFF_DIS_OFF,
                                value);
}

static INLINE UINT32 ilkn_field_OB_UNALIGN_XOFF_DIS_get( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_OB_UNALIGN_XOFF_DIS_get( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_OB_UNALIGN_XOFF_DIS_get", A, 1);
    /* (0x00005618 bits 1) field OB_UNALIGN_XOFF_DIS of register PMC_ILAKEN_REG_RX_CTRL */
    reg_value = ilkn_reg_RX_CTRL_read(  b_ptr, h_ptr, A);
    value = (reg_value & ILAKEN_REG_RX_CTRL_BIT_OB_UNALIGN_XOFF_DIS_MSK) >> ILAKEN_REG_RX_CTRL_BIT_OB_UNALIGN_XOFF_DIS_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_OB_UNALIGN_XOFF_DIS_get", A, value );

    return value;
}
static INLINE void ilkn_field_FC_HIGH_set( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_FC_HIGH_set( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_FC_HIGH_set", A, 1);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_FC_HIGH_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "ilkn_field_FC_HIGH_set", A, value );

    /* (0x00005628 bits 27:24) field FC_HIGH of register PMC_ILAKEN_REG_RX_SERDES_FIFO_WATERMARK */
    ilkn_reg_RX_SERDES_FIFO_WATERMARK_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_FC_HIGH_MSK,
                                                 ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_FC_HIGH_OFF,
                                                 value);
}

static INLINE UINT32 ilkn_field_FC_HIGH_get( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_FC_HIGH_get( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_FC_HIGH_get", A, 1);
    /* (0x00005628 bits 27:24) field FC_HIGH of register PMC_ILAKEN_REG_RX_SERDES_FIFO_WATERMARK */
    reg_value = ilkn_reg_RX_SERDES_FIFO_WATERMARK_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_FC_HIGH_MSK) >> ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_FC_HIGH_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_FC_HIGH_get", A, value );

    return value;
}
static INLINE void ilkn_field_range_FC_HIGH_set( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_FC_HIGH_set( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit,
                                                 UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_FC_HIGH_set", A, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_FC_HIGH_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_FC_HIGH_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_FC_HIGH_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00005628 bits 27:24) field FC_HIGH of register PMC_ILAKEN_REG_RX_SERDES_FIFO_WATERMARK */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00005628 bits 27:24) field FC_HIGH of register PMC_ILAKEN_REG_RX_SERDES_FIFO_WATERMARK */
        ilkn_reg_RX_SERDES_FIFO_WATERMARK_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_FC_HIGH_OFF + subfield_offset),
                                                     ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_FC_HIGH_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_FC_HIGH_get( ilkn_buffer_t *b_ptr,
                                                   sifd_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_FC_HIGH_get( ilkn_buffer_t *b_ptr,
                                                   sifd_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_FC_HIGH_get", A, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_FC_HIGH_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_FC_HIGH_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00005628 bits 27:24) field FC_HIGH of register PMC_ILAKEN_REG_RX_SERDES_FIFO_WATERMARK */
    reg_value = ilkn_reg_RX_SERDES_FIFO_WATERMARK_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_FC_HIGH_MSK)
                  >> ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_FC_HIGH_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_FC_HIGH_MSK, ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_FC_HIGH_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_FC_HIGH_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_FC_LOW_set( ilkn_buffer_t *b_ptr,
                                          sifd_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_FC_LOW_set( ilkn_buffer_t *b_ptr,
                                          sifd_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_FC_LOW_set", A, 1);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_FC_LOW_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "ilkn_field_FC_LOW_set", A, value );

    /* (0x00005628 bits 19:16) field FC_LOW of register PMC_ILAKEN_REG_RX_SERDES_FIFO_WATERMARK */
    ilkn_reg_RX_SERDES_FIFO_WATERMARK_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_FC_LOW_MSK,
                                                 ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_FC_LOW_OFF,
                                                 value);
}

static INLINE UINT32 ilkn_field_FC_LOW_get( ilkn_buffer_t *b_ptr,
                                            sifd_handle_t *h_ptr,
                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_FC_LOW_get( ilkn_buffer_t *b_ptr,
                                            sifd_handle_t *h_ptr,
                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_FC_LOW_get", A, 1);
    /* (0x00005628 bits 19:16) field FC_LOW of register PMC_ILAKEN_REG_RX_SERDES_FIFO_WATERMARK */
    reg_value = ilkn_reg_RX_SERDES_FIFO_WATERMARK_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_FC_LOW_MSK) >> ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_FC_LOW_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_FC_LOW_get", A, value );

    return value;
}
static INLINE void ilkn_field_range_FC_LOW_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 start_bit,
                                                UINT32 stop_bit,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_FC_LOW_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 start_bit,
                                                UINT32 stop_bit,
                                                UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_FC_LOW_set", A, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_FC_LOW_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_FC_LOW_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_FC_LOW_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00005628 bits 19:16) field FC_LOW of register PMC_ILAKEN_REG_RX_SERDES_FIFO_WATERMARK */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00005628 bits 19:16) field FC_LOW of register PMC_ILAKEN_REG_RX_SERDES_FIFO_WATERMARK */
        ilkn_reg_RX_SERDES_FIFO_WATERMARK_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_FC_LOW_OFF + subfield_offset),
                                                     ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_FC_LOW_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_FC_LOW_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_FC_LOW_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_FC_LOW_get", A, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_FC_LOW_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_FC_LOW_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00005628 bits 19:16) field FC_LOW of register PMC_ILAKEN_REG_RX_SERDES_FIFO_WATERMARK */
    reg_value = ilkn_reg_RX_SERDES_FIFO_WATERMARK_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_FC_LOW_MSK)
                  >> ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_FC_LOW_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_FC_LOW_MSK, ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_FC_LOW_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_FC_LOW_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_RX_DATA_HIGH_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_RX_DATA_HIGH_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_DATA_HIGH_set", A, 1);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_RX_DATA_HIGH_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "ilkn_field_RX_DATA_HIGH_set", A, value );

    /* (0x00005628 bits 11:8) field RX_DATA_HIGH of register PMC_ILAKEN_REG_RX_SERDES_FIFO_WATERMARK */
    ilkn_reg_RX_SERDES_FIFO_WATERMARK_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_RX_DATA_HIGH_MSK,
                                                 ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_RX_DATA_HIGH_OFF,
                                                 value);
}

static INLINE UINT32 ilkn_field_RX_DATA_HIGH_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RX_DATA_HIGH_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_DATA_HIGH_get", A, 1);
    /* (0x00005628 bits 11:8) field RX_DATA_HIGH of register PMC_ILAKEN_REG_RX_SERDES_FIFO_WATERMARK */
    reg_value = ilkn_reg_RX_SERDES_FIFO_WATERMARK_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_RX_DATA_HIGH_MSK) >> ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_RX_DATA_HIGH_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_RX_DATA_HIGH_get", A, value );

    return value;
}
static INLINE void ilkn_field_range_RX_DATA_HIGH_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_RX_DATA_HIGH_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_RX_DATA_HIGH_set", A, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_RX_DATA_HIGH_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_RX_DATA_HIGH_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_RX_DATA_HIGH_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00005628 bits 11:8) field RX_DATA_HIGH of register PMC_ILAKEN_REG_RX_SERDES_FIFO_WATERMARK */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00005628 bits 11:8) field RX_DATA_HIGH of register PMC_ILAKEN_REG_RX_SERDES_FIFO_WATERMARK */
        ilkn_reg_RX_SERDES_FIFO_WATERMARK_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_RX_DATA_HIGH_OFF + subfield_offset),
                                                     ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_RX_DATA_HIGH_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_RX_DATA_HIGH_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_RX_DATA_HIGH_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_RX_DATA_HIGH_get", A, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_RX_DATA_HIGH_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_RX_DATA_HIGH_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00005628 bits 11:8) field RX_DATA_HIGH of register PMC_ILAKEN_REG_RX_SERDES_FIFO_WATERMARK */
    reg_value = ilkn_reg_RX_SERDES_FIFO_WATERMARK_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_RX_DATA_HIGH_MSK)
                  >> ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_RX_DATA_HIGH_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_RX_DATA_HIGH_MSK, ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_RX_DATA_HIGH_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_RX_DATA_HIGH_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_RX_DATA_LOW_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_RX_DATA_LOW_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_DATA_LOW_set", A, 1);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_RX_DATA_LOW_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "ilkn_field_RX_DATA_LOW_set", A, value );

    /* (0x00005628 bits 3:0) field RX_DATA_LOW of register PMC_ILAKEN_REG_RX_SERDES_FIFO_WATERMARK */
    ilkn_reg_RX_SERDES_FIFO_WATERMARK_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_RX_DATA_LOW_MSK,
                                                 ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_RX_DATA_LOW_OFF,
                                                 value);
}

static INLINE UINT32 ilkn_field_RX_DATA_LOW_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RX_DATA_LOW_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_DATA_LOW_get", A, 1);
    /* (0x00005628 bits 3:0) field RX_DATA_LOW of register PMC_ILAKEN_REG_RX_SERDES_FIFO_WATERMARK */
    reg_value = ilkn_reg_RX_SERDES_FIFO_WATERMARK_read( b_ptr,
                                                        h_ptr,
                                                        A);
    value = (reg_value & ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_RX_DATA_LOW_MSK) >> ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_RX_DATA_LOW_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_RX_DATA_LOW_get", A, value );

    return value;
}
static INLINE void ilkn_field_range_RX_DATA_LOW_set( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_RX_DATA_LOW_set( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_RX_DATA_LOW_set", A, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_RX_DATA_LOW_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_RX_DATA_LOW_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_RX_DATA_LOW_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00005628 bits 3:0) field RX_DATA_LOW of register PMC_ILAKEN_REG_RX_SERDES_FIFO_WATERMARK */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00005628 bits 3:0) field RX_DATA_LOW of register PMC_ILAKEN_REG_RX_SERDES_FIFO_WATERMARK */
        ilkn_reg_RX_SERDES_FIFO_WATERMARK_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     subfield_mask << (ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_RX_DATA_LOW_OFF + subfield_offset),
                                                     ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_RX_DATA_LOW_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_RX_DATA_LOW_get( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_RX_DATA_LOW_get( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_RX_DATA_LOW_get", A, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_RX_DATA_LOW_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_RX_DATA_LOW_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00005628 bits 3:0) field RX_DATA_LOW of register PMC_ILAKEN_REG_RX_SERDES_FIFO_WATERMARK */
    reg_value = ilkn_reg_RX_SERDES_FIFO_WATERMARK_read( b_ptr,
                                                        h_ptr,
                                                        A);
    field_value = (reg_value & ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_RX_DATA_LOW_MSK)
                  >> ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_RX_DATA_LOW_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_RX_DATA_LOW_MSK, ILAKEN_REG_RX_SERDES_FIFO_WATERMARK_BIT_RX_DATA_LOW_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_RX_DATA_LOW_get", A, start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config_N_size2
 * ==================================================================================
 */
static INLINE void ilkn_field_DISABLE_set( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32  N,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_DISABLE_set( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32  N,
                                           UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_DISABLE_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_DISABLE_set", N, 1);
    if (value > 16777215)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_DISABLE_set", value, 16777215);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_DISABLE_set", A, N, value );

    /* ((0x00005408 + (N) * 0x200) bits 23:0) field DISABLE of register PMC_ILAKEN_REG_LANE_DISABLE index N=0..1 */
    ilkn_reg_LANE_DISABLE_array_field_set( b_ptr,
                                           h_ptr,
                                           A,
                                           N,
                                           ILAKEN_REG_LANE_DISABLE_BIT_DISABLE_MSK,
                                           ILAKEN_REG_LANE_DISABLE_BIT_DISABLE_OFF,
                                           value);
}

static INLINE UINT32 ilkn_field_DISABLE_get( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_DISABLE_get( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_DISABLE_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_DISABLE_get", N, 1);
    /* ((0x00005408 + (N) * 0x200) bits 23:0) field DISABLE of register PMC_ILAKEN_REG_LANE_DISABLE index N=0..1 */
    reg_value = ilkn_reg_LANE_DISABLE_array_read( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  N);
    value = (reg_value & ILAKEN_REG_LANE_DISABLE_BIT_DISABLE_MSK) >> ILAKEN_REG_LANE_DISABLE_BIT_DISABLE_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_DISABLE_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_DISABLE_set( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_DISABLE_set( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit,
                                                 UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_DISABLE_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_DISABLE_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_DISABLE_set", stop_bit, start_bit );
    if (stop_bit > 23) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_DISABLE_set", stop_bit, 23 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_DISABLE_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005408 + (N) * 0x200) bits 23:0) field DISABLE of register PMC_ILAKEN_REG_LANE_DISABLE index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 23) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 23;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005408 + (N) * 0x200) bits 23:0) field DISABLE of register PMC_ILAKEN_REG_LANE_DISABLE index N=0..1 */
        ilkn_reg_LANE_DISABLE_array_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               N,
                                               subfield_mask << (ILAKEN_REG_LANE_DISABLE_BIT_DISABLE_OFF + subfield_offset),
                                               ILAKEN_REG_LANE_DISABLE_BIT_DISABLE_OFF + subfield_offset,
                                               value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_DISABLE_get( ilkn_buffer_t *b_ptr,
                                                   sifd_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32  N,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_DISABLE_get( ilkn_buffer_t *b_ptr,
                                                   sifd_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32  N,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_DISABLE_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_DISABLE_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_DISABLE_get", stop_bit, start_bit );
    if (stop_bit > 23) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_DISABLE_get", stop_bit, 23 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 23) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 23;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005408 + (N) * 0x200) bits 23:0) field DISABLE of register PMC_ILAKEN_REG_LANE_DISABLE index N=0..1 */
    reg_value = ilkn_reg_LANE_DISABLE_array_read( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  N);
    field_value = (reg_value & ILAKEN_REG_LANE_DISABLE_BIT_DISABLE_MSK)
                  >> ILAKEN_REG_LANE_DISABLE_BIT_DISABLE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_LANE_DISABLE_BIT_DISABLE_MSK, ILAKEN_REG_LANE_DISABLE_BIT_DISABLE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_DISABLE_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_FC_RX_TO_TX_LB_set( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_FC_RX_TO_TX_LB_set( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_FC_RX_TO_TX_LB_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_FC_RX_TO_TX_LB_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_FC_RX_TO_TX_LB_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_FC_RX_TO_TX_LB_set", A, N, value );

    /* ((0x00005410 + (N) * 0x200) bits 15) field FC_RX_TO_TX_LB of register PMC_ILAKEN_REG_CFG index N=0..1 */
    ilkn_reg_CFG_array_field_set( b_ptr,
                                  h_ptr,
                                  A,
                                  N,
                                  ILAKEN_REG_CFG_BIT_FC_RX_TO_TX_LB_MSK,
                                  ILAKEN_REG_CFG_BIT_FC_RX_TO_TX_LB_OFF,
                                  value);
}

static INLINE UINT32 ilkn_field_FC_RX_TO_TX_LB_get( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_FC_RX_TO_TX_LB_get( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_FC_RX_TO_TX_LB_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_FC_RX_TO_TX_LB_get", N, 1);
    /* ((0x00005410 + (N) * 0x200) bits 15) field FC_RX_TO_TX_LB of register PMC_ILAKEN_REG_CFG index N=0..1 */
    reg_value = ilkn_reg_CFG_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_CFG_BIT_FC_RX_TO_TX_LB_MSK) >> ILAKEN_REG_CFG_BIT_FC_RX_TO_TX_LB_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_FC_RX_TO_TX_LB_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_DATA_RX_TO_TX_LB_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_DATA_RX_TO_TX_LB_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_DATA_RX_TO_TX_LB_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_DATA_RX_TO_TX_LB_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_DATA_RX_TO_TX_LB_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_DATA_RX_TO_TX_LB_set", A, N, value );

    /* ((0x00005410 + (N) * 0x200) bits 14) field DATA_RX_TO_TX_LB of register PMC_ILAKEN_REG_CFG index N=0..1 */
    ilkn_reg_CFG_array_field_set( b_ptr,
                                  h_ptr,
                                  A,
                                  N,
                                  ILAKEN_REG_CFG_BIT_DATA_RX_TO_TX_LB_MSK,
                                  ILAKEN_REG_CFG_BIT_DATA_RX_TO_TX_LB_OFF,
                                  value);
}

static INLINE UINT32 ilkn_field_DATA_RX_TO_TX_LB_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_DATA_RX_TO_TX_LB_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_DATA_RX_TO_TX_LB_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_DATA_RX_TO_TX_LB_get", N, 1);
    /* ((0x00005410 + (N) * 0x200) bits 14) field DATA_RX_TO_TX_LB of register PMC_ILAKEN_REG_CFG index N=0..1 */
    reg_value = ilkn_reg_CFG_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_CFG_BIT_DATA_RX_TO_TX_LB_MSK) >> ILAKEN_REG_CFG_BIT_DATA_RX_TO_TX_LB_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_DATA_RX_TO_TX_LB_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_FC_TX_TO_RX_LB_set( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_FC_TX_TO_RX_LB_set( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_FC_TX_TO_RX_LB_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_FC_TX_TO_RX_LB_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_FC_TX_TO_RX_LB_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_FC_TX_TO_RX_LB_set", A, N, value );

    /* ((0x00005410 + (N) * 0x200) bits 13) field FC_TX_TO_RX_LB of register PMC_ILAKEN_REG_CFG index N=0..1 */
    ilkn_reg_CFG_array_field_set( b_ptr,
                                  h_ptr,
                                  A,
                                  N,
                                  ILAKEN_REG_CFG_BIT_FC_TX_TO_RX_LB_MSK,
                                  ILAKEN_REG_CFG_BIT_FC_TX_TO_RX_LB_OFF,
                                  value);
}

static INLINE UINT32 ilkn_field_FC_TX_TO_RX_LB_get( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_FC_TX_TO_RX_LB_get( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_FC_TX_TO_RX_LB_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_FC_TX_TO_RX_LB_get", N, 1);
    /* ((0x00005410 + (N) * 0x200) bits 13) field FC_TX_TO_RX_LB of register PMC_ILAKEN_REG_CFG index N=0..1 */
    reg_value = ilkn_reg_CFG_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_CFG_BIT_FC_TX_TO_RX_LB_MSK) >> ILAKEN_REG_CFG_BIT_FC_TX_TO_RX_LB_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_FC_TX_TO_RX_LB_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_DATA_TX_TO_RX_LB_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_DATA_TX_TO_RX_LB_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_DATA_TX_TO_RX_LB_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_DATA_TX_TO_RX_LB_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_DATA_TX_TO_RX_LB_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_DATA_TX_TO_RX_LB_set", A, N, value );

    /* ((0x00005410 + (N) * 0x200) bits 12) field DATA_TX_TO_RX_LB of register PMC_ILAKEN_REG_CFG index N=0..1 */
    ilkn_reg_CFG_array_field_set( b_ptr,
                                  h_ptr,
                                  A,
                                  N,
                                  ILAKEN_REG_CFG_BIT_DATA_TX_TO_RX_LB_MSK,
                                  ILAKEN_REG_CFG_BIT_DATA_TX_TO_RX_LB_OFF,
                                  value);
}

static INLINE UINT32 ilkn_field_DATA_TX_TO_RX_LB_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_DATA_TX_TO_RX_LB_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_DATA_TX_TO_RX_LB_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_DATA_TX_TO_RX_LB_get", N, 1);
    /* ((0x00005410 + (N) * 0x200) bits 12) field DATA_TX_TO_RX_LB of register PMC_ILAKEN_REG_CFG index N=0..1 */
    reg_value = ilkn_reg_CFG_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_CFG_BIT_DATA_TX_TO_RX_LB_MSK) >> ILAKEN_REG_CFG_BIT_DATA_TX_TO_RX_LB_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_DATA_TX_TO_RX_LB_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_OUTBAND_set( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32  N,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_OUTBAND_set( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32  N,
                                           UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_OUTBAND_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_OUTBAND_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_OUTBAND_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_OUTBAND_set", A, N, value );

    /* ((0x00005410 + (N) * 0x200) bits 7) field OUTBAND of register PMC_ILAKEN_REG_CFG index N=0..1 */
    ilkn_reg_CFG_array_field_set( b_ptr,
                                  h_ptr,
                                  A,
                                  N,
                                  ILAKEN_REG_CFG_BIT_OUTBAND_MSK,
                                  ILAKEN_REG_CFG_BIT_OUTBAND_OFF,
                                  value);
}

static INLINE UINT32 ilkn_field_OUTBAND_get( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_OUTBAND_get( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_OUTBAND_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_OUTBAND_get", N, 1);
    /* ((0x00005410 + (N) * 0x200) bits 7) field OUTBAND of register PMC_ILAKEN_REG_CFG index N=0..1 */
    reg_value = ilkn_reg_CFG_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_CFG_BIT_OUTBAND_MSK) >> ILAKEN_REG_CFG_BIT_OUTBAND_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_OUTBAND_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_INBAND_set( ilkn_buffer_t *b_ptr,
                                          sifd_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32  N,
                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_INBAND_set( ilkn_buffer_t *b_ptr,
                                          sifd_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32  N,
                                          UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_INBAND_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_INBAND_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_INBAND_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_INBAND_set", A, N, value );

    /* ((0x00005410 + (N) * 0x200) bits 6) field INBAND of register PMC_ILAKEN_REG_CFG index N=0..1 */
    ilkn_reg_CFG_array_field_set( b_ptr,
                                  h_ptr,
                                  A,
                                  N,
                                  ILAKEN_REG_CFG_BIT_INBAND_MSK,
                                  ILAKEN_REG_CFG_BIT_INBAND_OFF,
                                  value);
}

static INLINE UINT32 ilkn_field_INBAND_get( ilkn_buffer_t *b_ptr,
                                            sifd_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_INBAND_get( ilkn_buffer_t *b_ptr,
                                            sifd_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_INBAND_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_INBAND_get", N, 1);
    /* ((0x00005410 + (N) * 0x200) bits 6) field INBAND of register PMC_ILAKEN_REG_CFG index N=0..1 */
    reg_value = ilkn_reg_CFG_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_CFG_BIT_INBAND_MSK) >> ILAKEN_REG_CFG_BIT_INBAND_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_INBAND_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_MULT_FC_set( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32  N,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_MULT_FC_set( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32  N,
                                           UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_MULT_FC_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_MULT_FC_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_MULT_FC_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_MULT_FC_set", A, N, value );

    /* ((0x00005410 + (N) * 0x200) bits 3) field MULT_FC of register PMC_ILAKEN_REG_CFG index N=0..1 */
    ilkn_reg_CFG_array_field_set( b_ptr,
                                  h_ptr,
                                  A,
                                  N,
                                  ILAKEN_REG_CFG_BIT_MULT_FC_MSK,
                                  ILAKEN_REG_CFG_BIT_MULT_FC_OFF,
                                  value);
}

static INLINE UINT32 ilkn_field_MULT_FC_get( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_MULT_FC_get( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_MULT_FC_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_MULT_FC_get", N, 1);
    /* ((0x00005410 + (N) * 0x200) bits 3) field MULT_FC of register PMC_ILAKEN_REG_CFG index N=0..1 */
    reg_value = ilkn_reg_CFG_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_CFG_BIT_MULT_FC_MSK) >> ILAKEN_REG_CFG_BIT_MULT_FC_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_MULT_FC_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_BURSTMAX_set( ilkn_buffer_t *b_ptr,
                                            sifd_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32  N,
                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_BURSTMAX_set( ilkn_buffer_t *b_ptr,
                                            sifd_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32  N,
                                            UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BURSTMAX_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BURSTMAX_set", N, 1);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_BURSTMAX_set", value, 7);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_BURSTMAX_set", A, N, value );

    /* ((0x00005430 + (N) * 0x200) bits 26:24) field BURSTMAX of register PMC_ILAKEN_REG_BURST_CFG index N=0..1 */
    ilkn_reg_BURST_CFG_array_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        N,
                                        ILAKEN_REG_BURST_CFG_BIT_BURSTMAX_MSK,
                                        ILAKEN_REG_BURST_CFG_BIT_BURSTMAX_OFF,
                                        value);
}

static INLINE UINT32 ilkn_field_BURSTMAX_get( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_BURSTMAX_get( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BURSTMAX_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BURSTMAX_get", N, 1);
    /* ((0x00005430 + (N) * 0x200) bits 26:24) field BURSTMAX of register PMC_ILAKEN_REG_BURST_CFG index N=0..1 */
    reg_value = ilkn_reg_BURST_CFG_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_BURST_CFG_BIT_BURSTMAX_MSK) >> ILAKEN_REG_BURST_CFG_BIT_BURSTMAX_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_BURSTMAX_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_BURSTMAX_set( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_BURSTMAX_set( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit,
                                                  UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_BURSTMAX_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_BURSTMAX_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_BURSTMAX_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_BURSTMAX_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_BURSTMAX_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005430 + (N) * 0x200) bits 26:24) field BURSTMAX of register PMC_ILAKEN_REG_BURST_CFG index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005430 + (N) * 0x200) bits 26:24) field BURSTMAX of register PMC_ILAKEN_REG_BURST_CFG index N=0..1 */
        ilkn_reg_BURST_CFG_array_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            N,
                                            subfield_mask << (ILAKEN_REG_BURST_CFG_BIT_BURSTMAX_OFF + subfield_offset),
                                            ILAKEN_REG_BURST_CFG_BIT_BURSTMAX_OFF + subfield_offset,
                                            value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_BURSTMAX_get( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_BURSTMAX_get( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_BURSTMAX_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_BURSTMAX_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_BURSTMAX_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_BURSTMAX_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005430 + (N) * 0x200) bits 26:24) field BURSTMAX of register PMC_ILAKEN_REG_BURST_CFG index N=0..1 */
    reg_value = ilkn_reg_BURST_CFG_array_read(  b_ptr, h_ptr, A, N);
    field_value = (reg_value & ILAKEN_REG_BURST_CFG_BIT_BURSTMAX_MSK)
                  >> ILAKEN_REG_BURST_CFG_BIT_BURSTMAX_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_BURST_CFG_BIT_BURSTMAX_MSK, ILAKEN_REG_BURST_CFG_BIT_BURSTMAX_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_BURSTMAX_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_BURSTMIN_set( ilkn_buffer_t *b_ptr,
                                            sifd_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32  N,
                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_BURSTMIN_set( ilkn_buffer_t *b_ptr,
                                            sifd_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32  N,
                                            UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BURSTMIN_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BURSTMIN_set", N, 1);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_BURSTMIN_set", value, 7);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_BURSTMIN_set", A, N, value );

    /* ((0x00005430 + (N) * 0x200) bits 18:16) field BURSTMIN of register PMC_ILAKEN_REG_BURST_CFG index N=0..1 */
    ilkn_reg_BURST_CFG_array_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        N,
                                        ILAKEN_REG_BURST_CFG_BIT_BURSTMIN_MSK,
                                        ILAKEN_REG_BURST_CFG_BIT_BURSTMIN_OFF,
                                        value);
}

static INLINE UINT32 ilkn_field_BURSTMIN_get( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_BURSTMIN_get( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BURSTMIN_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BURSTMIN_get", N, 1);
    /* ((0x00005430 + (N) * 0x200) bits 18:16) field BURSTMIN of register PMC_ILAKEN_REG_BURST_CFG index N=0..1 */
    reg_value = ilkn_reg_BURST_CFG_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_BURST_CFG_BIT_BURSTMIN_MSK) >> ILAKEN_REG_BURST_CFG_BIT_BURSTMIN_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_BURSTMIN_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_BURSTMIN_set( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_BURSTMIN_set( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit,
                                                  UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_BURSTMIN_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_BURSTMIN_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_BURSTMIN_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_BURSTMIN_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_BURSTMIN_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005430 + (N) * 0x200) bits 18:16) field BURSTMIN of register PMC_ILAKEN_REG_BURST_CFG index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005430 + (N) * 0x200) bits 18:16) field BURSTMIN of register PMC_ILAKEN_REG_BURST_CFG index N=0..1 */
        ilkn_reg_BURST_CFG_array_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            N,
                                            subfield_mask << (ILAKEN_REG_BURST_CFG_BIT_BURSTMIN_OFF + subfield_offset),
                                            ILAKEN_REG_BURST_CFG_BIT_BURSTMIN_OFF + subfield_offset,
                                            value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_BURSTMIN_get( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_BURSTMIN_get( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_BURSTMIN_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_BURSTMIN_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_BURSTMIN_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_BURSTMIN_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005430 + (N) * 0x200) bits 18:16) field BURSTMIN of register PMC_ILAKEN_REG_BURST_CFG index N=0..1 */
    reg_value = ilkn_reg_BURST_CFG_array_read(  b_ptr, h_ptr, A, N);
    field_value = (reg_value & ILAKEN_REG_BURST_CFG_BIT_BURSTMIN_MSK)
                  >> ILAKEN_REG_BURST_CFG_BIT_BURSTMIN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_BURST_CFG_BIT_BURSTMIN_MSK, ILAKEN_REG_BURST_CFG_BIT_BURSTMIN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_BURSTMIN_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_BURSTSHORT_set( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_BURSTSHORT_set( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N,
                                              UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BURSTSHORT_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BURSTSHORT_set", N, 1);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_BURSTSHORT_set", value, 7);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_BURSTSHORT_set", A, N, value );

    /* ((0x00005430 + (N) * 0x200) bits 10:8) field BURSTSHORT of register PMC_ILAKEN_REG_BURST_CFG index N=0..1 */
    ilkn_reg_BURST_CFG_array_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        N,
                                        ILAKEN_REG_BURST_CFG_BIT_BURSTSHORT_MSK,
                                        ILAKEN_REG_BURST_CFG_BIT_BURSTSHORT_OFF,
                                        value);
}

static INLINE UINT32 ilkn_field_BURSTSHORT_get( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_BURSTSHORT_get( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BURSTSHORT_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BURSTSHORT_get", N, 1);
    /* ((0x00005430 + (N) * 0x200) bits 10:8) field BURSTSHORT of register PMC_ILAKEN_REG_BURST_CFG index N=0..1 */
    reg_value = ilkn_reg_BURST_CFG_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_BURST_CFG_BIT_BURSTSHORT_MSK) >> ILAKEN_REG_BURST_CFG_BIT_BURSTSHORT_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_BURSTSHORT_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_BURSTSHORT_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_BURSTSHORT_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit,
                                                    UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_BURSTSHORT_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_BURSTSHORT_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_BURSTSHORT_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_BURSTSHORT_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_BURSTSHORT_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005430 + (N) * 0x200) bits 10:8) field BURSTSHORT of register PMC_ILAKEN_REG_BURST_CFG index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005430 + (N) * 0x200) bits 10:8) field BURSTSHORT of register PMC_ILAKEN_REG_BURST_CFG index N=0..1 */
        ilkn_reg_BURST_CFG_array_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            N,
                                            subfield_mask << (ILAKEN_REG_BURST_CFG_BIT_BURSTSHORT_OFF + subfield_offset),
                                            ILAKEN_REG_BURST_CFG_BIT_BURSTSHORT_OFF + subfield_offset,
                                            value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_BURSTSHORT_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_BURSTSHORT_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_BURSTSHORT_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_BURSTSHORT_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_BURSTSHORT_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_BURSTSHORT_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005430 + (N) * 0x200) bits 10:8) field BURSTSHORT of register PMC_ILAKEN_REG_BURST_CFG index N=0..1 */
    reg_value = ilkn_reg_BURST_CFG_array_read(  b_ptr, h_ptr, A, N);
    field_value = (reg_value & ILAKEN_REG_BURST_CFG_BIT_BURSTSHORT_MSK)
                  >> ILAKEN_REG_BURST_CFG_BIT_BURSTSHORT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_BURST_CFG_BIT_BURSTSHORT_MSK, ILAKEN_REG_BURST_CFG_BIT_BURSTSHORT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_BURSTSHORT_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_MAX_DIS_set( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32  N,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_MAX_DIS_set( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32  N,
                                           UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_MAX_DIS_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_MAX_DIS_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_MAX_DIS_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_MAX_DIS_set", A, N, value );

    /* ((0x00005430 + (N) * 0x200) bits 2) field MAX_DIS of register PMC_ILAKEN_REG_BURST_CFG index N=0..1 */
    ilkn_reg_BURST_CFG_array_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        N,
                                        ILAKEN_REG_BURST_CFG_BIT_MAX_DIS_MSK,
                                        ILAKEN_REG_BURST_CFG_BIT_MAX_DIS_OFF,
                                        value);
}

static INLINE UINT32 ilkn_field_MAX_DIS_get( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_MAX_DIS_get( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_MAX_DIS_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_MAX_DIS_get", N, 1);
    /* ((0x00005430 + (N) * 0x200) bits 2) field MAX_DIS of register PMC_ILAKEN_REG_BURST_CFG index N=0..1 */
    reg_value = ilkn_reg_BURST_CFG_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_BURST_CFG_BIT_MAX_DIS_MSK) >> ILAKEN_REG_BURST_CFG_BIT_MAX_DIS_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_MAX_DIS_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_MIN_DIS_set( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32  N,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_MIN_DIS_set( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32  N,
                                           UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_MIN_DIS_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_MIN_DIS_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_MIN_DIS_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_MIN_DIS_set", A, N, value );

    /* ((0x00005430 + (N) * 0x200) bits 1) field MIN_DIS of register PMC_ILAKEN_REG_BURST_CFG index N=0..1 */
    ilkn_reg_BURST_CFG_array_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        N,
                                        ILAKEN_REG_BURST_CFG_BIT_MIN_DIS_MSK,
                                        ILAKEN_REG_BURST_CFG_BIT_MIN_DIS_OFF,
                                        value);
}

static INLINE UINT32 ilkn_field_MIN_DIS_get( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_MIN_DIS_get( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_MIN_DIS_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_MIN_DIS_get", N, 1);
    /* ((0x00005430 + (N) * 0x200) bits 1) field MIN_DIS of register PMC_ILAKEN_REG_BURST_CFG index N=0..1 */
    reg_value = ilkn_reg_BURST_CFG_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_BURST_CFG_BIT_MIN_DIS_MSK) >> ILAKEN_REG_BURST_CFG_BIT_MIN_DIS_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_MIN_DIS_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_PERIOD_set( ilkn_buffer_t *b_ptr,
                                          sifd_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32  N,
                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_PERIOD_set( ilkn_buffer_t *b_ptr,
                                          sifd_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32  N,
                                          UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_PERIOD_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_PERIOD_set", N, 1);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_PERIOD_set", value, 65535);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_PERIOD_set", A, N, value );

    /* ((0x00005434 + (N) * 0x200) bits 15:0) field PERIOD of register PMC_ILAKEN_REG_METAFRAME_SYNC index N=0..1 */
    ilkn_reg_METAFRAME_SYNC_array_field_set( b_ptr,
                                             h_ptr,
                                             A,
                                             N,
                                             ILAKEN_REG_METAFRAME_SYNC_BIT_PERIOD_MSK,
                                             ILAKEN_REG_METAFRAME_SYNC_BIT_PERIOD_OFF,
                                             value);
}

static INLINE UINT32 ilkn_field_PERIOD_get( ilkn_buffer_t *b_ptr,
                                            sifd_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_PERIOD_get( ilkn_buffer_t *b_ptr,
                                            sifd_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_PERIOD_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_PERIOD_get", N, 1);
    /* ((0x00005434 + (N) * 0x200) bits 15:0) field PERIOD of register PMC_ILAKEN_REG_METAFRAME_SYNC index N=0..1 */
    reg_value = ilkn_reg_METAFRAME_SYNC_array_read( b_ptr,
                                                    h_ptr,
                                                    A,
                                                    N);
    value = (reg_value & ILAKEN_REG_METAFRAME_SYNC_BIT_PERIOD_MSK) >> ILAKEN_REG_METAFRAME_SYNC_BIT_PERIOD_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_PERIOD_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_PERIOD_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 start_bit,
                                                UINT32 stop_bit,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_PERIOD_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 start_bit,
                                                UINT32 stop_bit,
                                                UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_PERIOD_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_PERIOD_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_PERIOD_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_PERIOD_set", stop_bit, 15 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_PERIOD_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005434 + (N) * 0x200) bits 15:0) field PERIOD of register PMC_ILAKEN_REG_METAFRAME_SYNC index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005434 + (N) * 0x200) bits 15:0) field PERIOD of register PMC_ILAKEN_REG_METAFRAME_SYNC index N=0..1 */
        ilkn_reg_METAFRAME_SYNC_array_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N,
                                                 subfield_mask << (ILAKEN_REG_METAFRAME_SYNC_BIT_PERIOD_OFF + subfield_offset),
                                                 ILAKEN_REG_METAFRAME_SYNC_BIT_PERIOD_OFF + subfield_offset,
                                                 value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_PERIOD_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_PERIOD_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_PERIOD_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_PERIOD_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_PERIOD_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_PERIOD_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005434 + (N) * 0x200) bits 15:0) field PERIOD of register PMC_ILAKEN_REG_METAFRAME_SYNC index N=0..1 */
    reg_value = ilkn_reg_METAFRAME_SYNC_array_read( b_ptr,
                                                    h_ptr,
                                                    A,
                                                    N);
    field_value = (reg_value & ILAKEN_REG_METAFRAME_SYNC_BIT_PERIOD_MSK)
                  >> ILAKEN_REG_METAFRAME_SYNC_BIT_PERIOD_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_METAFRAME_SYNC_BIT_PERIOD_MSK, ILAKEN_REG_METAFRAME_SYNC_BIT_PERIOD_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_PERIOD_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_CMD_set( ilkn_buffer_t *b_ptr,
                                       sifd_handle_t *h_ptr,
                                       UINT32 A,
                                       UINT32  N,
                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_CMD_set( ilkn_buffer_t *b_ptr,
                                       sifd_handle_t *h_ptr,
                                       UINT32 A,
                                       UINT32  N,
                                       UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CMD_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CMD_set", N, 1);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_CMD_set", value, 7);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_CMD_set", A, N, value );

    /* ((0x00005474 + (N) * 0x200) bits 26:24) field CMD of register PMC_ILAKEN_REG_CNT_ACCESS index N=0..1 */
    ilkn_reg_CNT_ACCESS_array_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         N,
                                         ILAKEN_REG_CNT_ACCESS_BIT_CMD_MSK,
                                         ILAKEN_REG_CNT_ACCESS_BIT_CMD_OFF,
                                         value);
}

static INLINE UINT32 ilkn_field_CMD_get( ilkn_buffer_t *b_ptr,
                                         sifd_handle_t *h_ptr,
                                         UINT32 A,
                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_CMD_get( ilkn_buffer_t *b_ptr,
                                         sifd_handle_t *h_ptr,
                                         UINT32 A,
                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CMD_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CMD_get", N, 1);
    /* ((0x00005474 + (N) * 0x200) bits 26:24) field CMD of register PMC_ILAKEN_REG_CNT_ACCESS index N=0..1 */
    reg_value = ilkn_reg_CNT_ACCESS_array_read( b_ptr,
                                                h_ptr,
                                                A,
                                                N);
    value = (reg_value & ILAKEN_REG_CNT_ACCESS_BIT_CMD_MSK) >> ILAKEN_REG_CNT_ACCESS_BIT_CMD_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_CMD_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_CMD_set( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32  N,
                                             UINT32 start_bit,
                                             UINT32 stop_bit,
                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_CMD_set( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32  N,
                                             UINT32 start_bit,
                                             UINT32 stop_bit,
                                             UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_CMD_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_CMD_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_CMD_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_CMD_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_CMD_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005474 + (N) * 0x200) bits 26:24) field CMD of register PMC_ILAKEN_REG_CNT_ACCESS index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005474 + (N) * 0x200) bits 26:24) field CMD of register PMC_ILAKEN_REG_CNT_ACCESS index N=0..1 */
        ilkn_reg_CNT_ACCESS_array_field_set( b_ptr,
                                             h_ptr,
                                             A,
                                             N,
                                             subfield_mask << (ILAKEN_REG_CNT_ACCESS_BIT_CMD_OFF + subfield_offset),
                                             ILAKEN_REG_CNT_ACCESS_BIT_CMD_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_CMD_get( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 start_bit,
                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_CMD_get( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 start_bit,
                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_CMD_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_CMD_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_CMD_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_CMD_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005474 + (N) * 0x200) bits 26:24) field CMD of register PMC_ILAKEN_REG_CNT_ACCESS index N=0..1 */
    reg_value = ilkn_reg_CNT_ACCESS_array_read( b_ptr,
                                                h_ptr,
                                                A,
                                                N);
    field_value = (reg_value & ILAKEN_REG_CNT_ACCESS_BIT_CMD_MSK)
                  >> ILAKEN_REG_CNT_ACCESS_BIT_CMD_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_CNT_ACCESS_BIT_CMD_MSK, ILAKEN_REG_CNT_ACCESS_BIT_CMD_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_CMD_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_ACC_TYPE_set( ilkn_buffer_t *b_ptr,
                                            sifd_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32  N,
                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_ACC_TYPE_set( ilkn_buffer_t *b_ptr,
                                            sifd_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32  N,
                                            UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_ACC_TYPE_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_ACC_TYPE_set", N, 1);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_ACC_TYPE_set", value, 15);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_ACC_TYPE_set", A, N, value );

    /* ((0x00005474 + (N) * 0x200) bits 19:16) field ACC_TYPE of register PMC_ILAKEN_REG_CNT_ACCESS index N=0..1 */
    ilkn_reg_CNT_ACCESS_array_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         N,
                                         ILAKEN_REG_CNT_ACCESS_BIT_ACC_TYPE_MSK,
                                         ILAKEN_REG_CNT_ACCESS_BIT_ACC_TYPE_OFF,
                                         value);
}

static INLINE UINT32 ilkn_field_ACC_TYPE_get( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_ACC_TYPE_get( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_ACC_TYPE_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_ACC_TYPE_get", N, 1);
    /* ((0x00005474 + (N) * 0x200) bits 19:16) field ACC_TYPE of register PMC_ILAKEN_REG_CNT_ACCESS index N=0..1 */
    reg_value = ilkn_reg_CNT_ACCESS_array_read( b_ptr,
                                                h_ptr,
                                                A,
                                                N);
    value = (reg_value & ILAKEN_REG_CNT_ACCESS_BIT_ACC_TYPE_MSK) >> ILAKEN_REG_CNT_ACCESS_BIT_ACC_TYPE_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_ACC_TYPE_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_ACC_TYPE_set( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_ACC_TYPE_set( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit,
                                                  UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_ACC_TYPE_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_ACC_TYPE_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_ACC_TYPE_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_ACC_TYPE_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_ACC_TYPE_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005474 + (N) * 0x200) bits 19:16) field ACC_TYPE of register PMC_ILAKEN_REG_CNT_ACCESS index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005474 + (N) * 0x200) bits 19:16) field ACC_TYPE of register PMC_ILAKEN_REG_CNT_ACCESS index N=0..1 */
        ilkn_reg_CNT_ACCESS_array_field_set( b_ptr,
                                             h_ptr,
                                             A,
                                             N,
                                             subfield_mask << (ILAKEN_REG_CNT_ACCESS_BIT_ACC_TYPE_OFF + subfield_offset),
                                             ILAKEN_REG_CNT_ACCESS_BIT_ACC_TYPE_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_ACC_TYPE_get( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_ACC_TYPE_get( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_ACC_TYPE_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_ACC_TYPE_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_ACC_TYPE_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_ACC_TYPE_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005474 + (N) * 0x200) bits 19:16) field ACC_TYPE of register PMC_ILAKEN_REG_CNT_ACCESS index N=0..1 */
    reg_value = ilkn_reg_CNT_ACCESS_array_read( b_ptr,
                                                h_ptr,
                                                A,
                                                N);
    field_value = (reg_value & ILAKEN_REG_CNT_ACCESS_BIT_ACC_TYPE_MSK)
                  >> ILAKEN_REG_CNT_ACCESS_BIT_ACC_TYPE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_CNT_ACCESS_BIT_ACC_TYPE_MSK, ILAKEN_REG_CNT_ACCESS_BIT_ACC_TYPE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_ACC_TYPE_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_ACC_ADDR_set( ilkn_buffer_t *b_ptr,
                                            sifd_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32  N,
                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_ACC_ADDR_set( ilkn_buffer_t *b_ptr,
                                            sifd_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32  N,
                                            UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_ACC_ADDR_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_ACC_ADDR_set", N, 1);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_ACC_ADDR_set", value, 255);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_ACC_ADDR_set", A, N, value );

    /* ((0x00005474 + (N) * 0x200) bits 7:0) field ACC_ADDR of register PMC_ILAKEN_REG_CNT_ACCESS index N=0..1 */
    ilkn_reg_CNT_ACCESS_array_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         N,
                                         ILAKEN_REG_CNT_ACCESS_BIT_ACC_ADDR_MSK,
                                         ILAKEN_REG_CNT_ACCESS_BIT_ACC_ADDR_OFF,
                                         value);
}

static INLINE UINT32 ilkn_field_ACC_ADDR_get( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_ACC_ADDR_get( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_ACC_ADDR_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_ACC_ADDR_get", N, 1);
    /* ((0x00005474 + (N) * 0x200) bits 7:0) field ACC_ADDR of register PMC_ILAKEN_REG_CNT_ACCESS index N=0..1 */
    reg_value = ilkn_reg_CNT_ACCESS_array_read( b_ptr,
                                                h_ptr,
                                                A,
                                                N);
    value = (reg_value & ILAKEN_REG_CNT_ACCESS_BIT_ACC_ADDR_MSK) >> ILAKEN_REG_CNT_ACCESS_BIT_ACC_ADDR_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_ACC_ADDR_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_ACC_ADDR_set( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_ACC_ADDR_set( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit,
                                                  UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_ACC_ADDR_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_ACC_ADDR_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_ACC_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_ACC_ADDR_set", stop_bit, 7 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_ACC_ADDR_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005474 + (N) * 0x200) bits 7:0) field ACC_ADDR of register PMC_ILAKEN_REG_CNT_ACCESS index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005474 + (N) * 0x200) bits 7:0) field ACC_ADDR of register PMC_ILAKEN_REG_CNT_ACCESS index N=0..1 */
        ilkn_reg_CNT_ACCESS_array_field_set( b_ptr,
                                             h_ptr,
                                             A,
                                             N,
                                             subfield_mask << (ILAKEN_REG_CNT_ACCESS_BIT_ACC_ADDR_OFF + subfield_offset),
                                             ILAKEN_REG_CNT_ACCESS_BIT_ACC_ADDR_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_ACC_ADDR_get( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_ACC_ADDR_get( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_ACC_ADDR_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_ACC_ADDR_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_ACC_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_ACC_ADDR_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005474 + (N) * 0x200) bits 7:0) field ACC_ADDR of register PMC_ILAKEN_REG_CNT_ACCESS index N=0..1 */
    reg_value = ilkn_reg_CNT_ACCESS_array_read( b_ptr,
                                                h_ptr,
                                                A,
                                                N);
    field_value = (reg_value & ILAKEN_REG_CNT_ACCESS_BIT_ACC_ADDR_MSK)
                  >> ILAKEN_REG_CNT_ACCESS_BIT_ACC_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_CNT_ACCESS_BIT_ACC_ADDR_MSK, ILAKEN_REG_CNT_ACCESS_BIT_ACC_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_ACC_ADDR_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_MSB_BC_WDATA_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_MSB_BC_WDATA_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_MSB_BC_WDATA_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_MSB_BC_WDATA_set", N, 1);
    if (value > 16777215)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_MSB_BC_WDATA_set", value, 16777215);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_MSB_BC_WDATA_set", A, N, value );

    /* ((0x00005480 + (N) * 0x200) bits 23:0) bits 0:23 use field MSB_BC_WDATA of register PMC_ILAKEN_REG_BYTE_CNT_WRITE_HIGH index N=0..1 */
    ilkn_reg_BYTE_CNT_WRITE_HIGH_array_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  N,
                                                  ILAKEN_REG_BYTE_CNT_WRITE_HIGH_BIT_MSB_BC_WDATA_MSK,
                                                  ILAKEN_REG_BYTE_CNT_WRITE_HIGH_BIT_MSB_BC_WDATA_OFF,
                                                  value);
}

static INLINE UINT32 ilkn_field_MSB_BC_WDATA_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_MSB_BC_WDATA_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_MSB_BC_WDATA_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_MSB_BC_WDATA_get", N, 1);
    /* ((0x00005480 + (N) * 0x200) bits 23:0) bits 0:23 use field MSB_BC_WDATA of register PMC_ILAKEN_REG_BYTE_CNT_WRITE_HIGH index N=0..1 */
    reg_value = ilkn_reg_BYTE_CNT_WRITE_HIGH_array_read( b_ptr,
                                                         h_ptr,
                                                         A,
                                                         N);
    value = (reg_value & ILAKEN_REG_BYTE_CNT_WRITE_HIGH_BIT_MSB_BC_WDATA_MSK) >> ILAKEN_REG_BYTE_CNT_WRITE_HIGH_BIT_MSB_BC_WDATA_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_MSB_BC_WDATA_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_MSB_BC_WDATA_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_MSB_BC_WDATA_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_MSB_BC_WDATA_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_MSB_BC_WDATA_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_MSB_BC_WDATA_set", stop_bit, start_bit );
    if (stop_bit > 23) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_MSB_BC_WDATA_set", stop_bit, 23 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_MSB_BC_WDATA_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005480 + (N) * 0x200) bits 23:0) bits 0:23 use field MSB_BC_WDATA of register PMC_ILAKEN_REG_BYTE_CNT_WRITE_HIGH index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 23) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 23;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005480 + (N) * 0x200) bits 23:0) bits 0:23 use field MSB_BC_WDATA of register PMC_ILAKEN_REG_BYTE_CNT_WRITE_HIGH index N=0..1 */
        ilkn_reg_BYTE_CNT_WRITE_HIGH_array_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N,
                                                      subfield_mask << (ILAKEN_REG_BYTE_CNT_WRITE_HIGH_BIT_MSB_BC_WDATA_OFF + subfield_offset),
                                                      ILAKEN_REG_BYTE_CNT_WRITE_HIGH_BIT_MSB_BC_WDATA_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_MSB_BC_WDATA_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_MSB_BC_WDATA_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_MSB_BC_WDATA_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_MSB_BC_WDATA_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_MSB_BC_WDATA_get", stop_bit, start_bit );
    if (stop_bit > 23) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_MSB_BC_WDATA_get", stop_bit, 23 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 23) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 23;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005480 + (N) * 0x200) bits 23:0) bits 0:23 use field MSB_BC_WDATA of register PMC_ILAKEN_REG_BYTE_CNT_WRITE_HIGH index N=0..1 */
    reg_value = ilkn_reg_BYTE_CNT_WRITE_HIGH_array_read( b_ptr,
                                                         h_ptr,
                                                         A,
                                                         N);
    field_value = (reg_value & ILAKEN_REG_BYTE_CNT_WRITE_HIGH_BIT_MSB_BC_WDATA_MSK)
                  >> ILAKEN_REG_BYTE_CNT_WRITE_HIGH_BIT_MSB_BC_WDATA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_BYTE_CNT_WRITE_HIGH_BIT_MSB_BC_WDATA_MSK, ILAKEN_REG_BYTE_CNT_WRITE_HIGH_BIT_MSB_BC_WDATA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_MSB_BC_WDATA_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_LSB_BC_WDATA_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_LSB_BC_WDATA_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_LSB_BC_WDATA_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_LSB_BC_WDATA_set", N, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_LSB_BC_WDATA_set", A, N, value );

    /* ((0x00005484 + (N) * 0x200) bits 31:0) bits 0:31 use field LSB_BC_WDATA of register PMC_ILAKEN_REG_BYTE_CNT_WRITE_LOW index N=0..1 */
    ilkn_reg_BYTE_CNT_WRITE_LOW_array_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N,
                                                 ILAKEN_REG_BYTE_CNT_WRITE_LOW_BIT_LSB_BC_WDATA_MSK,
                                                 ILAKEN_REG_BYTE_CNT_WRITE_LOW_BIT_LSB_BC_WDATA_OFF,
                                                 value);
}

static INLINE UINT32 ilkn_field_LSB_BC_WDATA_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_LSB_BC_WDATA_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_LSB_BC_WDATA_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_LSB_BC_WDATA_get", N, 1);
    /* ((0x00005484 + (N) * 0x200) bits 31:0) bits 0:31 use field LSB_BC_WDATA of register PMC_ILAKEN_REG_BYTE_CNT_WRITE_LOW index N=0..1 */
    reg_value = ilkn_reg_BYTE_CNT_WRITE_LOW_array_read( b_ptr,
                                                        h_ptr,
                                                        A,
                                                        N);
    value = (reg_value & ILAKEN_REG_BYTE_CNT_WRITE_LOW_BIT_LSB_BC_WDATA_MSK) >> ILAKEN_REG_BYTE_CNT_WRITE_LOW_BIT_LSB_BC_WDATA_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_LSB_BC_WDATA_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_LSB_BC_WDATA_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_LSB_BC_WDATA_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_LSB_BC_WDATA_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_LSB_BC_WDATA_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_LSB_BC_WDATA_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_LSB_BC_WDATA_set", stop_bit, 31 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_LSB_BC_WDATA_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005484 + (N) * 0x200) bits 31:0) bits 0:31 use field LSB_BC_WDATA of register PMC_ILAKEN_REG_BYTE_CNT_WRITE_LOW index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005484 + (N) * 0x200) bits 31:0) bits 0:31 use field LSB_BC_WDATA of register PMC_ILAKEN_REG_BYTE_CNT_WRITE_LOW index N=0..1 */
        ilkn_reg_BYTE_CNT_WRITE_LOW_array_field_set( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     N,
                                                     subfield_mask << (ILAKEN_REG_BYTE_CNT_WRITE_LOW_BIT_LSB_BC_WDATA_OFF + subfield_offset),
                                                     ILAKEN_REG_BYTE_CNT_WRITE_LOW_BIT_LSB_BC_WDATA_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_LSB_BC_WDATA_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_LSB_BC_WDATA_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_LSB_BC_WDATA_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_LSB_BC_WDATA_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_LSB_BC_WDATA_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_LSB_BC_WDATA_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005484 + (N) * 0x200) bits 31:0) bits 0:31 use field LSB_BC_WDATA of register PMC_ILAKEN_REG_BYTE_CNT_WRITE_LOW index N=0..1 */
    reg_value = ilkn_reg_BYTE_CNT_WRITE_LOW_array_read( b_ptr,
                                                        h_ptr,
                                                        A,
                                                        N);
    field_value = (reg_value & ILAKEN_REG_BYTE_CNT_WRITE_LOW_BIT_LSB_BC_WDATA_MSK)
                  >> ILAKEN_REG_BYTE_CNT_WRITE_LOW_BIT_LSB_BC_WDATA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_BYTE_CNT_WRITE_LOW_BIT_LSB_BC_WDATA_MSK, ILAKEN_REG_BYTE_CNT_WRITE_LOW_BIT_LSB_BC_WDATA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_LSB_BC_WDATA_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_MSB_PC_WDATA_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_MSB_PC_WDATA_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_MSB_PC_WDATA_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_MSB_PC_WDATA_set", N, 1);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_MSB_PC_WDATA_set", value, 65535);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_MSB_PC_WDATA_set", A, N, value );

    /* ((0x00005488 + (N) * 0x200) bits 15:0) bits 0:15 use field MSB_PC_WDATA of register PMC_ILAKEN_REG_MSB_PACKET_CNT_WRITE index N=0..1 */
    ilkn_reg_MSB_PACKET_CNT_WRITE_array_field_set( b_ptr,
                                                   h_ptr,
                                                   A,
                                                   N,
                                                   ILAKEN_REG_MSB_PACKET_CNT_WRITE_BIT_MSB_PC_WDATA_MSK,
                                                   ILAKEN_REG_MSB_PACKET_CNT_WRITE_BIT_MSB_PC_WDATA_OFF,
                                                   value);
}

static INLINE UINT32 ilkn_field_MSB_PC_WDATA_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_MSB_PC_WDATA_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_MSB_PC_WDATA_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_MSB_PC_WDATA_get", N, 1);
    /* ((0x00005488 + (N) * 0x200) bits 15:0) bits 0:15 use field MSB_PC_WDATA of register PMC_ILAKEN_REG_MSB_PACKET_CNT_WRITE index N=0..1 */
    reg_value = ilkn_reg_MSB_PACKET_CNT_WRITE_array_read( b_ptr,
                                                          h_ptr,
                                                          A,
                                                          N);
    value = (reg_value & ILAKEN_REG_MSB_PACKET_CNT_WRITE_BIT_MSB_PC_WDATA_MSK) >> ILAKEN_REG_MSB_PACKET_CNT_WRITE_BIT_MSB_PC_WDATA_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_MSB_PC_WDATA_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_MSB_PC_WDATA_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_MSB_PC_WDATA_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_MSB_PC_WDATA_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_MSB_PC_WDATA_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_MSB_PC_WDATA_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_MSB_PC_WDATA_set", stop_bit, 15 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_MSB_PC_WDATA_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005488 + (N) * 0x200) bits 15:0) bits 0:15 use field MSB_PC_WDATA of register PMC_ILAKEN_REG_MSB_PACKET_CNT_WRITE index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005488 + (N) * 0x200) bits 15:0) bits 0:15 use field MSB_PC_WDATA of register PMC_ILAKEN_REG_MSB_PACKET_CNT_WRITE index N=0..1 */
        ilkn_reg_MSB_PACKET_CNT_WRITE_array_field_set( b_ptr,
                                                       h_ptr,
                                                       A,
                                                       N,
                                                       subfield_mask << (ILAKEN_REG_MSB_PACKET_CNT_WRITE_BIT_MSB_PC_WDATA_OFF + subfield_offset),
                                                       ILAKEN_REG_MSB_PACKET_CNT_WRITE_BIT_MSB_PC_WDATA_OFF + subfield_offset,
                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_MSB_PC_WDATA_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_MSB_PC_WDATA_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_MSB_PC_WDATA_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_MSB_PC_WDATA_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_MSB_PC_WDATA_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_MSB_PC_WDATA_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005488 + (N) * 0x200) bits 15:0) bits 0:15 use field MSB_PC_WDATA of register PMC_ILAKEN_REG_MSB_PACKET_CNT_WRITE index N=0..1 */
    reg_value = ilkn_reg_MSB_PACKET_CNT_WRITE_array_read( b_ptr,
                                                          h_ptr,
                                                          A,
                                                          N);
    field_value = (reg_value & ILAKEN_REG_MSB_PACKET_CNT_WRITE_BIT_MSB_PC_WDATA_MSK)
                  >> ILAKEN_REG_MSB_PACKET_CNT_WRITE_BIT_MSB_PC_WDATA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_MSB_PACKET_CNT_WRITE_BIT_MSB_PC_WDATA_MSK, ILAKEN_REG_MSB_PACKET_CNT_WRITE_BIT_MSB_PC_WDATA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_MSB_PC_WDATA_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_LSB_PC_WDATA_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_LSB_PC_WDATA_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_LSB_PC_WDATA_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_LSB_PC_WDATA_set", N, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_LSB_PC_WDATA_set", A, N, value );

    /* ((0x0000548c + (N) * 0x200) bits 31:0) bits 0:31 use field LSB_PC_WDATA of register PMC_ILAKEN_REG_LSB_PACKET_CNT_WRITE index N=0..1 */
    ilkn_reg_LSB_PACKET_CNT_WRITE_array_field_set( b_ptr,
                                                   h_ptr,
                                                   A,
                                                   N,
                                                   ILAKEN_REG_LSB_PACKET_CNT_WRITE_BIT_LSB_PC_WDATA_MSK,
                                                   ILAKEN_REG_LSB_PACKET_CNT_WRITE_BIT_LSB_PC_WDATA_OFF,
                                                   value);
}

static INLINE UINT32 ilkn_field_LSB_PC_WDATA_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_LSB_PC_WDATA_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_LSB_PC_WDATA_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_LSB_PC_WDATA_get", N, 1);
    /* ((0x0000548c + (N) * 0x200) bits 31:0) bits 0:31 use field LSB_PC_WDATA of register PMC_ILAKEN_REG_LSB_PACKET_CNT_WRITE index N=0..1 */
    reg_value = ilkn_reg_LSB_PACKET_CNT_WRITE_array_read( b_ptr,
                                                          h_ptr,
                                                          A,
                                                          N);
    value = (reg_value & ILAKEN_REG_LSB_PACKET_CNT_WRITE_BIT_LSB_PC_WDATA_MSK) >> ILAKEN_REG_LSB_PACKET_CNT_WRITE_BIT_LSB_PC_WDATA_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_LSB_PC_WDATA_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_LSB_PC_WDATA_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_LSB_PC_WDATA_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_LSB_PC_WDATA_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_LSB_PC_WDATA_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_LSB_PC_WDATA_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_LSB_PC_WDATA_set", stop_bit, 31 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_LSB_PC_WDATA_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000548c + (N) * 0x200) bits 31:0) bits 0:31 use field LSB_PC_WDATA of register PMC_ILAKEN_REG_LSB_PACKET_CNT_WRITE index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000548c + (N) * 0x200) bits 31:0) bits 0:31 use field LSB_PC_WDATA of register PMC_ILAKEN_REG_LSB_PACKET_CNT_WRITE index N=0..1 */
        ilkn_reg_LSB_PACKET_CNT_WRITE_array_field_set( b_ptr,
                                                       h_ptr,
                                                       A,
                                                       N,
                                                       subfield_mask << (ILAKEN_REG_LSB_PACKET_CNT_WRITE_BIT_LSB_PC_WDATA_OFF + subfield_offset),
                                                       ILAKEN_REG_LSB_PACKET_CNT_WRITE_BIT_LSB_PC_WDATA_OFF + subfield_offset,
                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_LSB_PC_WDATA_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_LSB_PC_WDATA_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_LSB_PC_WDATA_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_LSB_PC_WDATA_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_LSB_PC_WDATA_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_LSB_PC_WDATA_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000548c + (N) * 0x200) bits 31:0) bits 0:31 use field LSB_PC_WDATA of register PMC_ILAKEN_REG_LSB_PACKET_CNT_WRITE index N=0..1 */
    reg_value = ilkn_reg_LSB_PACKET_CNT_WRITE_array_read( b_ptr,
                                                          h_ptr,
                                                          A,
                                                          N);
    field_value = (reg_value & ILAKEN_REG_LSB_PACKET_CNT_WRITE_BIT_LSB_PC_WDATA_MSK)
                  >> ILAKEN_REG_LSB_PACKET_CNT_WRITE_BIT_LSB_PC_WDATA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_LSB_PACKET_CNT_WRITE_BIT_LSB_PC_WDATA_MSK, ILAKEN_REG_LSB_PACKET_CNT_WRITE_BIT_LSB_PC_WDATA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_LSB_PC_WDATA_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_MSB_EC_WDATA_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_MSB_EC_WDATA_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_MSB_EC_WDATA_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_MSB_EC_WDATA_set", N, 1);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_MSB_EC_WDATA_set", value, 65535);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_MSB_EC_WDATA_set", A, N, value );

    /* ((0x00005490 + (N) * 0x200) bits 15:0) bits 0:15 use field MSB_EC_WDATA of register PMC_ILAKEN_REG_MSB_ERROR_COUNTER_WRITE index N=0..1 */
    ilkn_reg_MSB_ERROR_COUNTER_WRITE_array_field_set( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N,
                                                      ILAKEN_REG_MSB_ERROR_COUNTER_WRITE_BIT_MSB_EC_WDATA_MSK,
                                                      ILAKEN_REG_MSB_ERROR_COUNTER_WRITE_BIT_MSB_EC_WDATA_OFF,
                                                      value);
}

static INLINE UINT32 ilkn_field_MSB_EC_WDATA_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_MSB_EC_WDATA_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_MSB_EC_WDATA_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_MSB_EC_WDATA_get", N, 1);
    /* ((0x00005490 + (N) * 0x200) bits 15:0) bits 0:15 use field MSB_EC_WDATA of register PMC_ILAKEN_REG_MSB_ERROR_COUNTER_WRITE index N=0..1 */
    reg_value = ilkn_reg_MSB_ERROR_COUNTER_WRITE_array_read( b_ptr,
                                                             h_ptr,
                                                             A,
                                                             N);
    value = (reg_value & ILAKEN_REG_MSB_ERROR_COUNTER_WRITE_BIT_MSB_EC_WDATA_MSK) >> ILAKEN_REG_MSB_ERROR_COUNTER_WRITE_BIT_MSB_EC_WDATA_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_MSB_EC_WDATA_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_MSB_EC_WDATA_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_MSB_EC_WDATA_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_MSB_EC_WDATA_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_MSB_EC_WDATA_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_MSB_EC_WDATA_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_MSB_EC_WDATA_set", stop_bit, 15 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_MSB_EC_WDATA_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005490 + (N) * 0x200) bits 15:0) bits 0:15 use field MSB_EC_WDATA of register PMC_ILAKEN_REG_MSB_ERROR_COUNTER_WRITE index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005490 + (N) * 0x200) bits 15:0) bits 0:15 use field MSB_EC_WDATA of register PMC_ILAKEN_REG_MSB_ERROR_COUNTER_WRITE index N=0..1 */
        ilkn_reg_MSB_ERROR_COUNTER_WRITE_array_field_set( b_ptr,
                                                          h_ptr,
                                                          A,
                                                          N,
                                                          subfield_mask << (ILAKEN_REG_MSB_ERROR_COUNTER_WRITE_BIT_MSB_EC_WDATA_OFF + subfield_offset),
                                                          ILAKEN_REG_MSB_ERROR_COUNTER_WRITE_BIT_MSB_EC_WDATA_OFF + subfield_offset,
                                                          value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_MSB_EC_WDATA_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_MSB_EC_WDATA_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_MSB_EC_WDATA_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_MSB_EC_WDATA_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_MSB_EC_WDATA_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_MSB_EC_WDATA_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005490 + (N) * 0x200) bits 15:0) bits 0:15 use field MSB_EC_WDATA of register PMC_ILAKEN_REG_MSB_ERROR_COUNTER_WRITE index N=0..1 */
    reg_value = ilkn_reg_MSB_ERROR_COUNTER_WRITE_array_read( b_ptr,
                                                             h_ptr,
                                                             A,
                                                             N);
    field_value = (reg_value & ILAKEN_REG_MSB_ERROR_COUNTER_WRITE_BIT_MSB_EC_WDATA_MSK)
                  >> ILAKEN_REG_MSB_ERROR_COUNTER_WRITE_BIT_MSB_EC_WDATA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_MSB_ERROR_COUNTER_WRITE_BIT_MSB_EC_WDATA_MSK, ILAKEN_REG_MSB_ERROR_COUNTER_WRITE_BIT_MSB_EC_WDATA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_MSB_EC_WDATA_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_LSB_EC_WDATA_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_LSB_EC_WDATA_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_LSB_EC_WDATA_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_LSB_EC_WDATA_set", N, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_LSB_EC_WDATA_set", A, N, value );

    /* ((0x00005494 + (N) * 0x200) bits 31:0) field LSB_EC_WDATA of register PMC_ILAKEN_REG_LSB_ERR_CNT_WRITE index N=0..1 */
    ilkn_reg_LSB_ERR_CNT_WRITE_array_field_set( b_ptr,
                                                h_ptr,
                                                A,
                                                N,
                                                ILAKEN_REG_LSB_ERR_CNT_WRITE_BIT_LSB_EC_WDATA_MSK,
                                                ILAKEN_REG_LSB_ERR_CNT_WRITE_BIT_LSB_EC_WDATA_OFF,
                                                value);
}

static INLINE UINT32 ilkn_field_LSB_EC_WDATA_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_LSB_EC_WDATA_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_LSB_EC_WDATA_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_LSB_EC_WDATA_get", N, 1);
    /* ((0x00005494 + (N) * 0x200) bits 31:0) field LSB_EC_WDATA of register PMC_ILAKEN_REG_LSB_ERR_CNT_WRITE index N=0..1 */
    reg_value = ilkn_reg_LSB_ERR_CNT_WRITE_array_read( b_ptr,
                                                       h_ptr,
                                                       A,
                                                       N);
    value = (reg_value & ILAKEN_REG_LSB_ERR_CNT_WRITE_BIT_LSB_EC_WDATA_MSK) >> ILAKEN_REG_LSB_ERR_CNT_WRITE_BIT_LSB_EC_WDATA_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_LSB_EC_WDATA_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_LSB_EC_WDATA_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_LSB_EC_WDATA_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_LSB_EC_WDATA_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_LSB_EC_WDATA_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_LSB_EC_WDATA_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_LSB_EC_WDATA_set", stop_bit, 31 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_LSB_EC_WDATA_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005494 + (N) * 0x200) bits 31:0) field LSB_EC_WDATA of register PMC_ILAKEN_REG_LSB_ERR_CNT_WRITE index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005494 + (N) * 0x200) bits 31:0) field LSB_EC_WDATA of register PMC_ILAKEN_REG_LSB_ERR_CNT_WRITE index N=0..1 */
        ilkn_reg_LSB_ERR_CNT_WRITE_array_field_set( b_ptr,
                                                    h_ptr,
                                                    A,
                                                    N,
                                                    subfield_mask << (ILAKEN_REG_LSB_ERR_CNT_WRITE_BIT_LSB_EC_WDATA_OFF + subfield_offset),
                                                    ILAKEN_REG_LSB_ERR_CNT_WRITE_BIT_LSB_EC_WDATA_OFF + subfield_offset,
                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_LSB_EC_WDATA_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_LSB_EC_WDATA_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_LSB_EC_WDATA_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_LSB_EC_WDATA_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_LSB_EC_WDATA_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_LSB_EC_WDATA_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005494 + (N) * 0x200) bits 31:0) field LSB_EC_WDATA of register PMC_ILAKEN_REG_LSB_ERR_CNT_WRITE index N=0..1 */
    reg_value = ilkn_reg_LSB_ERR_CNT_WRITE_array_read( b_ptr,
                                                       h_ptr,
                                                       A,
                                                       N);
    field_value = (reg_value & ILAKEN_REG_LSB_ERR_CNT_WRITE_BIT_LSB_EC_WDATA_MSK)
                  >> ILAKEN_REG_LSB_ERR_CNT_WRITE_BIT_LSB_EC_WDATA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_LSB_ERR_CNT_WRITE_BIT_LSB_EC_WDATA_MSK, ILAKEN_REG_LSB_ERR_CNT_WRITE_BIT_LSB_EC_WDATA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_LSB_EC_WDATA_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_LAST_set( ilkn_buffer_t *b_ptr,
                                        sifd_handle_t *h_ptr,
                                        UINT32 A,
                                        UINT32  N,
                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_LAST_set( ilkn_buffer_t *b_ptr,
                                        sifd_handle_t *h_ptr,
                                        UINT32 A,
                                        UINT32  N,
                                        UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_LAST_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_LAST_set", N, 1);
    if (value > 2047)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_LAST_set", value, 2047);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_LAST_set", A, N, value );

    /* ((0x000054c0 + (N) * 0x200) bits 18:8) field LAST of register PMC_ILAKEN_REG_CALENDAR_EN index N=0..1 */
    ilkn_reg_CALENDAR_EN_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_CALENDAR_EN_BIT_LAST_MSK,
                                          ILAKEN_REG_CALENDAR_EN_BIT_LAST_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_LAST_get( ilkn_buffer_t *b_ptr,
                                          sifd_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_LAST_get( ilkn_buffer_t *b_ptr,
                                          sifd_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_LAST_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_LAST_get", N, 1);
    /* ((0x000054c0 + (N) * 0x200) bits 18:8) field LAST of register PMC_ILAKEN_REG_CALENDAR_EN index N=0..1 */
    reg_value = ilkn_reg_CALENDAR_EN_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_CALENDAR_EN_BIT_LAST_MSK) >> ILAKEN_REG_CALENDAR_EN_BIT_LAST_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_LAST_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_LAST_set( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N,
                                              UINT32 start_bit,
                                              UINT32 stop_bit,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_LAST_set( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N,
                                              UINT32 start_bit,
                                              UINT32 stop_bit,
                                              UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_LAST_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_LAST_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_LAST_set", stop_bit, start_bit );
    if (stop_bit > 10) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_LAST_set", stop_bit, 10 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_LAST_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000054c0 + (N) * 0x200) bits 18:8) field LAST of register PMC_ILAKEN_REG_CALENDAR_EN index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 10) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 10;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000054c0 + (N) * 0x200) bits 18:8) field LAST of register PMC_ILAKEN_REG_CALENDAR_EN index N=0..1 */
        ilkn_reg_CALENDAR_EN_array_field_set( b_ptr,
                                              h_ptr,
                                              A,
                                              N,
                                              subfield_mask << (ILAKEN_REG_CALENDAR_EN_BIT_LAST_OFF + subfield_offset),
                                              ILAKEN_REG_CALENDAR_EN_BIT_LAST_OFF + subfield_offset,
                                              value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_LAST_get( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 start_bit,
                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_LAST_get( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 start_bit,
                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_LAST_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_LAST_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_LAST_get", stop_bit, start_bit );
    if (stop_bit > 10) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_LAST_get", stop_bit, 10 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 10) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 10;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000054c0 + (N) * 0x200) bits 18:8) field LAST of register PMC_ILAKEN_REG_CALENDAR_EN index N=0..1 */
    reg_value = ilkn_reg_CALENDAR_EN_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    field_value = (reg_value & ILAKEN_REG_CALENDAR_EN_BIT_LAST_MSK)
                  >> ILAKEN_REG_CALENDAR_EN_BIT_LAST_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_CALENDAR_EN_BIT_LAST_MSK, ILAKEN_REG_CALENDAR_EN_BIT_LAST_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_LAST_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_PROG_set( ilkn_buffer_t *b_ptr,
                                        sifd_handle_t *h_ptr,
                                        UINT32 A,
                                        UINT32  N,
                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_PROG_set( ilkn_buffer_t *b_ptr,
                                        sifd_handle_t *h_ptr,
                                        UINT32 A,
                                        UINT32  N,
                                        UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_PROG_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_PROG_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_PROG_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_PROG_set", A, N, value );

    /* ((0x000054c0 + (N) * 0x200) bits 0) field PROG of register PMC_ILAKEN_REG_CALENDAR_EN index N=0..1 */
    ilkn_reg_CALENDAR_EN_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_CALENDAR_EN_BIT_PROG_MSK,
                                          ILAKEN_REG_CALENDAR_EN_BIT_PROG_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_PROG_get( ilkn_buffer_t *b_ptr,
                                          sifd_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_PROG_get( ilkn_buffer_t *b_ptr,
                                          sifd_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_PROG_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_PROG_get", N, 1);
    /* ((0x000054c0 + (N) * 0x200) bits 0) field PROG of register PMC_ILAKEN_REG_CALENDAR_EN index N=0..1 */
    reg_value = ilkn_reg_CALENDAR_EN_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_CALENDAR_EN_BIT_PROG_MSK) >> ILAKEN_REG_CALENDAR_EN_BIT_PROG_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_PROG_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_CAL_ACC_CMD_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_CAL_ACC_CMD_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CAL_ACC_CMD_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CAL_ACC_CMD_set", N, 1);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_CAL_ACC_CMD_set", value, 3);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_CAL_ACC_CMD_set", A, N, value );

    /* ((0x000054c8 + (N) * 0x200) bits 25:24) field CAL_ACC_CMD of register PMC_ILAKEN_REG_PROGRAMMABLE_CALENDAR_ACCESS index N=0..1 */
    ilkn_reg_PROGRAMMABLE_CALENDAR_ACCESS_array_field_set( b_ptr,
                                                           h_ptr,
                                                           A,
                                                           N,
                                                           ILAKEN_REG_PROGRAMMABLE_CALENDAR_ACCESS_BIT_CAL_ACC_CMD_MSK,
                                                           ILAKEN_REG_PROGRAMMABLE_CALENDAR_ACCESS_BIT_CAL_ACC_CMD_OFF,
                                                           value);
}

static INLINE UINT32 ilkn_field_CAL_ACC_CMD_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_CAL_ACC_CMD_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CAL_ACC_CMD_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CAL_ACC_CMD_get", N, 1);
    /* ((0x000054c8 + (N) * 0x200) bits 25:24) field CAL_ACC_CMD of register PMC_ILAKEN_REG_PROGRAMMABLE_CALENDAR_ACCESS index N=0..1 */
    reg_value = ilkn_reg_PROGRAMMABLE_CALENDAR_ACCESS_array_read( b_ptr,
                                                                  h_ptr,
                                                                  A,
                                                                  N);
    value = (reg_value & ILAKEN_REG_PROGRAMMABLE_CALENDAR_ACCESS_BIT_CAL_ACC_CMD_MSK) >> ILAKEN_REG_PROGRAMMABLE_CALENDAR_ACCESS_BIT_CAL_ACC_CMD_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_CAL_ACC_CMD_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_CAL_ACC_CMD_set( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_CAL_ACC_CMD_set( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_CAL_ACC_CMD_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_CAL_ACC_CMD_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_CAL_ACC_CMD_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_CAL_ACC_CMD_set", stop_bit, 1 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_CAL_ACC_CMD_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000054c8 + (N) * 0x200) bits 25:24) field CAL_ACC_CMD of register PMC_ILAKEN_REG_PROGRAMMABLE_CALENDAR_ACCESS index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000054c8 + (N) * 0x200) bits 25:24) field CAL_ACC_CMD of register PMC_ILAKEN_REG_PROGRAMMABLE_CALENDAR_ACCESS index N=0..1 */
        ilkn_reg_PROGRAMMABLE_CALENDAR_ACCESS_array_field_set( b_ptr,
                                                               h_ptr,
                                                               A,
                                                               N,
                                                               subfield_mask << (ILAKEN_REG_PROGRAMMABLE_CALENDAR_ACCESS_BIT_CAL_ACC_CMD_OFF + subfield_offset),
                                                               ILAKEN_REG_PROGRAMMABLE_CALENDAR_ACCESS_BIT_CAL_ACC_CMD_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_CAL_ACC_CMD_get( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_CAL_ACC_CMD_get( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_CAL_ACC_CMD_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_CAL_ACC_CMD_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_CAL_ACC_CMD_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_CAL_ACC_CMD_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000054c8 + (N) * 0x200) bits 25:24) field CAL_ACC_CMD of register PMC_ILAKEN_REG_PROGRAMMABLE_CALENDAR_ACCESS index N=0..1 */
    reg_value = ilkn_reg_PROGRAMMABLE_CALENDAR_ACCESS_array_read( b_ptr,
                                                                  h_ptr,
                                                                  A,
                                                                  N);
    field_value = (reg_value & ILAKEN_REG_PROGRAMMABLE_CALENDAR_ACCESS_BIT_CAL_ACC_CMD_MSK)
                  >> ILAKEN_REG_PROGRAMMABLE_CALENDAR_ACCESS_BIT_CAL_ACC_CMD_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_PROGRAMMABLE_CALENDAR_ACCESS_BIT_CAL_ACC_CMD_MSK, ILAKEN_REG_PROGRAMMABLE_CALENDAR_ACCESS_BIT_CAL_ACC_CMD_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_CAL_ACC_CMD_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_CAL_ACC_ADDR_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_CAL_ACC_ADDR_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CAL_ACC_ADDR_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CAL_ACC_ADDR_set", N, 1);
    if (value > 2047)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_CAL_ACC_ADDR_set", value, 2047);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_CAL_ACC_ADDR_set", A, N, value );

    /* ((0x000054c8 + (N) * 0x200) bits 10:0) field CAL_ACC_ADDR of register PMC_ILAKEN_REG_PROGRAMMABLE_CALENDAR_ACCESS index N=0..1 */
    ilkn_reg_PROGRAMMABLE_CALENDAR_ACCESS_array_field_set( b_ptr,
                                                           h_ptr,
                                                           A,
                                                           N,
                                                           ILAKEN_REG_PROGRAMMABLE_CALENDAR_ACCESS_BIT_CAL_ACC_ADDR_MSK,
                                                           ILAKEN_REG_PROGRAMMABLE_CALENDAR_ACCESS_BIT_CAL_ACC_ADDR_OFF,
                                                           value);
}

static INLINE UINT32 ilkn_field_CAL_ACC_ADDR_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_CAL_ACC_ADDR_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CAL_ACC_ADDR_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CAL_ACC_ADDR_get", N, 1);
    /* ((0x000054c8 + (N) * 0x200) bits 10:0) field CAL_ACC_ADDR of register PMC_ILAKEN_REG_PROGRAMMABLE_CALENDAR_ACCESS index N=0..1 */
    reg_value = ilkn_reg_PROGRAMMABLE_CALENDAR_ACCESS_array_read( b_ptr,
                                                                  h_ptr,
                                                                  A,
                                                                  N);
    value = (reg_value & ILAKEN_REG_PROGRAMMABLE_CALENDAR_ACCESS_BIT_CAL_ACC_ADDR_MSK) >> ILAKEN_REG_PROGRAMMABLE_CALENDAR_ACCESS_BIT_CAL_ACC_ADDR_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_CAL_ACC_ADDR_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_CAL_ACC_ADDR_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_CAL_ACC_ADDR_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_CAL_ACC_ADDR_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_CAL_ACC_ADDR_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_CAL_ACC_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 10) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_CAL_ACC_ADDR_set", stop_bit, 10 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_CAL_ACC_ADDR_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000054c8 + (N) * 0x200) bits 10:0) field CAL_ACC_ADDR of register PMC_ILAKEN_REG_PROGRAMMABLE_CALENDAR_ACCESS index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 10) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 10;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000054c8 + (N) * 0x200) bits 10:0) field CAL_ACC_ADDR of register PMC_ILAKEN_REG_PROGRAMMABLE_CALENDAR_ACCESS index N=0..1 */
        ilkn_reg_PROGRAMMABLE_CALENDAR_ACCESS_array_field_set( b_ptr,
                                                               h_ptr,
                                                               A,
                                                               N,
                                                               subfield_mask << (ILAKEN_REG_PROGRAMMABLE_CALENDAR_ACCESS_BIT_CAL_ACC_ADDR_OFF + subfield_offset),
                                                               ILAKEN_REG_PROGRAMMABLE_CALENDAR_ACCESS_BIT_CAL_ACC_ADDR_OFF + subfield_offset,
                                                               value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_CAL_ACC_ADDR_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_CAL_ACC_ADDR_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_CAL_ACC_ADDR_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_CAL_ACC_ADDR_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_CAL_ACC_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 10) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_CAL_ACC_ADDR_get", stop_bit, 10 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 10) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 10;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000054c8 + (N) * 0x200) bits 10:0) field CAL_ACC_ADDR of register PMC_ILAKEN_REG_PROGRAMMABLE_CALENDAR_ACCESS index N=0..1 */
    reg_value = ilkn_reg_PROGRAMMABLE_CALENDAR_ACCESS_array_read( b_ptr,
                                                                  h_ptr,
                                                                  A,
                                                                  N);
    field_value = (reg_value & ILAKEN_REG_PROGRAMMABLE_CALENDAR_ACCESS_BIT_CAL_ACC_ADDR_MSK)
                  >> ILAKEN_REG_PROGRAMMABLE_CALENDAR_ACCESS_BIT_CAL_ACC_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_PROGRAMMABLE_CALENDAR_ACCESS_BIT_CAL_ACC_ADDR_MSK, ILAKEN_REG_PROGRAMMABLE_CALENDAR_ACCESS_BIT_CAL_ACC_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_CAL_ACC_ADDR_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_CAL_WDATA_set( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32  N,
                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_CAL_WDATA_set( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32  N,
                                             UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CAL_WDATA_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CAL_WDATA_set", N, 1);
    if (value > 511)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_CAL_WDATA_set", value, 511);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_CAL_WDATA_set", A, N, value );

    /* ((0x000054d0 + (N) * 0x200) bits 8:0) field CAL_WDATA of register PMC_ILAKEN_REG_PROGRAMMABLE_CALENDAR_WRITE_DATA index N=0..1 */
    ilkn_reg_PROGRAMMABLE_CALENDAR_WRITE_DATA_array_field_set( b_ptr,
                                                               h_ptr,
                                                               A,
                                                               N,
                                                               ILAKEN_REG_PROGRAMMABLE_CALENDAR_WRITE_DATA_BIT_CAL_WDATA_MSK,
                                                               ILAKEN_REG_PROGRAMMABLE_CALENDAR_WRITE_DATA_BIT_CAL_WDATA_OFF,
                                                               value);
}

static INLINE UINT32 ilkn_field_CAL_WDATA_get( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_CAL_WDATA_get( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CAL_WDATA_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CAL_WDATA_get", N, 1);
    /* ((0x000054d0 + (N) * 0x200) bits 8:0) field CAL_WDATA of register PMC_ILAKEN_REG_PROGRAMMABLE_CALENDAR_WRITE_DATA index N=0..1 */
    reg_value = ilkn_reg_PROGRAMMABLE_CALENDAR_WRITE_DATA_array_read( b_ptr,
                                                                      h_ptr,
                                                                      A,
                                                                      N);
    value = (reg_value & ILAKEN_REG_PROGRAMMABLE_CALENDAR_WRITE_DATA_BIT_CAL_WDATA_MSK) >> ILAKEN_REG_PROGRAMMABLE_CALENDAR_WRITE_DATA_BIT_CAL_WDATA_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_CAL_WDATA_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_CAL_WDATA_set( ilkn_buffer_t *b_ptr,
                                                   sifd_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32  N,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_CAL_WDATA_set( ilkn_buffer_t *b_ptr,
                                                   sifd_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32  N,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit,
                                                   UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_CAL_WDATA_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_CAL_WDATA_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_CAL_WDATA_set", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_CAL_WDATA_set", stop_bit, 8 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_CAL_WDATA_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000054d0 + (N) * 0x200) bits 8:0) field CAL_WDATA of register PMC_ILAKEN_REG_PROGRAMMABLE_CALENDAR_WRITE_DATA index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 8) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 8;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000054d0 + (N) * 0x200) bits 8:0) field CAL_WDATA of register PMC_ILAKEN_REG_PROGRAMMABLE_CALENDAR_WRITE_DATA index N=0..1 */
        ilkn_reg_PROGRAMMABLE_CALENDAR_WRITE_DATA_array_field_set( b_ptr,
                                                                   h_ptr,
                                                                   A,
                                                                   N,
                                                                   subfield_mask << (ILAKEN_REG_PROGRAMMABLE_CALENDAR_WRITE_DATA_BIT_CAL_WDATA_OFF + subfield_offset),
                                                                   ILAKEN_REG_PROGRAMMABLE_CALENDAR_WRITE_DATA_BIT_CAL_WDATA_OFF + subfield_offset,
                                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_CAL_WDATA_get( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_CAL_WDATA_get( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_CAL_WDATA_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_CAL_WDATA_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_CAL_WDATA_get", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_CAL_WDATA_get", stop_bit, 8 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 8) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 8;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000054d0 + (N) * 0x200) bits 8:0) field CAL_WDATA of register PMC_ILAKEN_REG_PROGRAMMABLE_CALENDAR_WRITE_DATA index N=0..1 */
    reg_value = ilkn_reg_PROGRAMMABLE_CALENDAR_WRITE_DATA_array_read( b_ptr,
                                                                      h_ptr,
                                                                      A,
                                                                      N);
    field_value = (reg_value & ILAKEN_REG_PROGRAMMABLE_CALENDAR_WRITE_DATA_BIT_CAL_WDATA_MSK)
                  >> ILAKEN_REG_PROGRAMMABLE_CALENDAR_WRITE_DATA_BIT_CAL_WDATA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_PROGRAMMABLE_CALENDAR_WRITE_DATA_BIT_CAL_WDATA_MSK, ILAKEN_REG_PROGRAMMABLE_CALENDAR_WRITE_DATA_BIT_CAL_WDATA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_CAL_WDATA_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_REPC_set( ilkn_buffer_t *b_ptr,
                                        sifd_handle_t *h_ptr,
                                        UINT32 A,
                                        UINT32  N,
                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_REPC_set( ilkn_buffer_t *b_ptr,
                                        sifd_handle_t *h_ptr,
                                        UINT32 A,
                                        UINT32  N,
                                        UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REPC_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REPC_set", N, 1);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_REPC_set", value, 255);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_REPC_set", A, N, value );

    /* ((0x00005520 + (N) * 0x200) bits 31:24) field REPC of register PMC_ILAKEN_REG_SERDES_TEST_CTRL index N=0..1 */
    ilkn_reg_SERDES_TEST_CTRL_array_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               N,
                                               ILAKEN_REG_SERDES_TEST_CTRL_BIT_REPC_MSK,
                                               ILAKEN_REG_SERDES_TEST_CTRL_BIT_REPC_OFF,
                                               value);
}

static INLINE UINT32 ilkn_field_REPC_get( ilkn_buffer_t *b_ptr,
                                          sifd_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_REPC_get( ilkn_buffer_t *b_ptr,
                                          sifd_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REPC_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REPC_get", N, 1);
    /* ((0x00005520 + (N) * 0x200) bits 31:24) field REPC of register PMC_ILAKEN_REG_SERDES_TEST_CTRL index N=0..1 */
    reg_value = ilkn_reg_SERDES_TEST_CTRL_array_read( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N);
    value = (reg_value & ILAKEN_REG_SERDES_TEST_CTRL_BIT_REPC_MSK) >> ILAKEN_REG_SERDES_TEST_CTRL_BIT_REPC_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_REPC_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_REPC_set( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N,
                                              UINT32 start_bit,
                                              UINT32 stop_bit,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_REPC_set( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N,
                                              UINT32 start_bit,
                                              UINT32 stop_bit,
                                              UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REPC_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REPC_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REPC_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REPC_set", stop_bit, 7 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REPC_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005520 + (N) * 0x200) bits 31:24) field REPC of register PMC_ILAKEN_REG_SERDES_TEST_CTRL index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005520 + (N) * 0x200) bits 31:24) field REPC of register PMC_ILAKEN_REG_SERDES_TEST_CTRL index N=0..1 */
        ilkn_reg_SERDES_TEST_CTRL_array_field_set( b_ptr,
                                                   h_ptr,
                                                   A,
                                                   N,
                                                   subfield_mask << (ILAKEN_REG_SERDES_TEST_CTRL_BIT_REPC_OFF + subfield_offset),
                                                   ILAKEN_REG_SERDES_TEST_CTRL_BIT_REPC_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_REPC_get( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 start_bit,
                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_REPC_get( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 start_bit,
                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REPC_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REPC_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REPC_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REPC_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005520 + (N) * 0x200) bits 31:24) field REPC of register PMC_ILAKEN_REG_SERDES_TEST_CTRL index N=0..1 */
    reg_value = ilkn_reg_SERDES_TEST_CTRL_array_read( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N);
    field_value = (reg_value & ILAKEN_REG_SERDES_TEST_CTRL_BIT_REPC_MSK)
                  >> ILAKEN_REG_SERDES_TEST_CTRL_BIT_REPC_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_SERDES_TEST_CTRL_BIT_REPC_MSK, ILAKEN_REG_SERDES_TEST_CTRL_BIT_REPC_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REPC_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_REPB_set( ilkn_buffer_t *b_ptr,
                                        sifd_handle_t *h_ptr,
                                        UINT32 A,
                                        UINT32  N,
                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_REPB_set( ilkn_buffer_t *b_ptr,
                                        sifd_handle_t *h_ptr,
                                        UINT32 A,
                                        UINT32  N,
                                        UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REPB_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REPB_set", N, 1);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_REPB_set", value, 255);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_REPB_set", A, N, value );

    /* ((0x00005520 + (N) * 0x200) bits 23:16) field REPB of register PMC_ILAKEN_REG_SERDES_TEST_CTRL index N=0..1 */
    ilkn_reg_SERDES_TEST_CTRL_array_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               N,
                                               ILAKEN_REG_SERDES_TEST_CTRL_BIT_REPB_MSK,
                                               ILAKEN_REG_SERDES_TEST_CTRL_BIT_REPB_OFF,
                                               value);
}

static INLINE UINT32 ilkn_field_REPB_get( ilkn_buffer_t *b_ptr,
                                          sifd_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_REPB_get( ilkn_buffer_t *b_ptr,
                                          sifd_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REPB_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REPB_get", N, 1);
    /* ((0x00005520 + (N) * 0x200) bits 23:16) field REPB of register PMC_ILAKEN_REG_SERDES_TEST_CTRL index N=0..1 */
    reg_value = ilkn_reg_SERDES_TEST_CTRL_array_read( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N);
    value = (reg_value & ILAKEN_REG_SERDES_TEST_CTRL_BIT_REPB_MSK) >> ILAKEN_REG_SERDES_TEST_CTRL_BIT_REPB_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_REPB_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_REPB_set( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N,
                                              UINT32 start_bit,
                                              UINT32 stop_bit,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_REPB_set( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N,
                                              UINT32 start_bit,
                                              UINT32 stop_bit,
                                              UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REPB_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REPB_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REPB_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REPB_set", stop_bit, 7 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REPB_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005520 + (N) * 0x200) bits 23:16) field REPB of register PMC_ILAKEN_REG_SERDES_TEST_CTRL index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005520 + (N) * 0x200) bits 23:16) field REPB of register PMC_ILAKEN_REG_SERDES_TEST_CTRL index N=0..1 */
        ilkn_reg_SERDES_TEST_CTRL_array_field_set( b_ptr,
                                                   h_ptr,
                                                   A,
                                                   N,
                                                   subfield_mask << (ILAKEN_REG_SERDES_TEST_CTRL_BIT_REPB_OFF + subfield_offset),
                                                   ILAKEN_REG_SERDES_TEST_CTRL_BIT_REPB_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_REPB_get( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 start_bit,
                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_REPB_get( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 start_bit,
                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REPB_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REPB_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REPB_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REPB_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005520 + (N) * 0x200) bits 23:16) field REPB of register PMC_ILAKEN_REG_SERDES_TEST_CTRL index N=0..1 */
    reg_value = ilkn_reg_SERDES_TEST_CTRL_array_read( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N);
    field_value = (reg_value & ILAKEN_REG_SERDES_TEST_CTRL_BIT_REPB_MSK)
                  >> ILAKEN_REG_SERDES_TEST_CTRL_BIT_REPB_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_SERDES_TEST_CTRL_BIT_REPB_MSK, ILAKEN_REG_SERDES_TEST_CTRL_BIT_REPB_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REPB_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_REPA_set( ilkn_buffer_t *b_ptr,
                                        sifd_handle_t *h_ptr,
                                        UINT32 A,
                                        UINT32  N,
                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_REPA_set( ilkn_buffer_t *b_ptr,
                                        sifd_handle_t *h_ptr,
                                        UINT32 A,
                                        UINT32  N,
                                        UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REPA_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REPA_set", N, 1);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_REPA_set", value, 255);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_REPA_set", A, N, value );

    /* ((0x00005520 + (N) * 0x200) bits 15:8) field REPA of register PMC_ILAKEN_REG_SERDES_TEST_CTRL index N=0..1 */
    ilkn_reg_SERDES_TEST_CTRL_array_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               N,
                                               ILAKEN_REG_SERDES_TEST_CTRL_BIT_REPA_MSK,
                                               ILAKEN_REG_SERDES_TEST_CTRL_BIT_REPA_OFF,
                                               value);
}

static INLINE UINT32 ilkn_field_REPA_get( ilkn_buffer_t *b_ptr,
                                          sifd_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_REPA_get( ilkn_buffer_t *b_ptr,
                                          sifd_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REPA_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REPA_get", N, 1);
    /* ((0x00005520 + (N) * 0x200) bits 15:8) field REPA of register PMC_ILAKEN_REG_SERDES_TEST_CTRL index N=0..1 */
    reg_value = ilkn_reg_SERDES_TEST_CTRL_array_read( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N);
    value = (reg_value & ILAKEN_REG_SERDES_TEST_CTRL_BIT_REPA_MSK) >> ILAKEN_REG_SERDES_TEST_CTRL_BIT_REPA_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_REPA_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_REPA_set( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N,
                                              UINT32 start_bit,
                                              UINT32 stop_bit,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_REPA_set( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N,
                                              UINT32 start_bit,
                                              UINT32 stop_bit,
                                              UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REPA_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REPA_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REPA_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REPA_set", stop_bit, 7 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REPA_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005520 + (N) * 0x200) bits 15:8) field REPA of register PMC_ILAKEN_REG_SERDES_TEST_CTRL index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005520 + (N) * 0x200) bits 15:8) field REPA of register PMC_ILAKEN_REG_SERDES_TEST_CTRL index N=0..1 */
        ilkn_reg_SERDES_TEST_CTRL_array_field_set( b_ptr,
                                                   h_ptr,
                                                   A,
                                                   N,
                                                   subfield_mask << (ILAKEN_REG_SERDES_TEST_CTRL_BIT_REPA_OFF + subfield_offset),
                                                   ILAKEN_REG_SERDES_TEST_CTRL_BIT_REPA_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_REPA_get( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 start_bit,
                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_REPA_get( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 start_bit,
                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REPA_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REPA_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REPA_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REPA_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005520 + (N) * 0x200) bits 15:8) field REPA of register PMC_ILAKEN_REG_SERDES_TEST_CTRL index N=0..1 */
    reg_value = ilkn_reg_SERDES_TEST_CTRL_array_read( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N);
    field_value = (reg_value & ILAKEN_REG_SERDES_TEST_CTRL_BIT_REPA_MSK)
                  >> ILAKEN_REG_SERDES_TEST_CTRL_BIT_REPA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_SERDES_TEST_CTRL_BIT_REPA_MSK, ILAKEN_REG_SERDES_TEST_CTRL_BIT_REPA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REPA_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_PROG_EN_set( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32  N,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_PROG_EN_set( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32  N,
                                           UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_PROG_EN_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_PROG_EN_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_PROG_EN_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_PROG_EN_set", A, N, value );

    /* ((0x00005520 + (N) * 0x200) bits 1) field PROG_EN of register PMC_ILAKEN_REG_SERDES_TEST_CTRL index N=0..1 */
    ilkn_reg_SERDES_TEST_CTRL_array_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               N,
                                               ILAKEN_REG_SERDES_TEST_CTRL_BIT_PROG_EN_MSK,
                                               ILAKEN_REG_SERDES_TEST_CTRL_BIT_PROG_EN_OFF,
                                               value);
}

static INLINE UINT32 ilkn_field_PROG_EN_get( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_PROG_EN_get( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_PROG_EN_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_PROG_EN_get", N, 1);
    /* ((0x00005520 + (N) * 0x200) bits 1) field PROG_EN of register PMC_ILAKEN_REG_SERDES_TEST_CTRL index N=0..1 */
    reg_value = ilkn_reg_SERDES_TEST_CTRL_array_read( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N);
    value = (reg_value & ILAKEN_REG_SERDES_TEST_CTRL_BIT_PROG_EN_MSK) >> ILAKEN_REG_SERDES_TEST_CTRL_BIT_PROG_EN_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_PROG_EN_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_PRBS_EN_set( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32  N,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_PRBS_EN_set( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32  N,
                                           UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_PRBS_EN_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_PRBS_EN_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_PRBS_EN_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_PRBS_EN_set", A, N, value );

    /* ((0x00005520 + (N) * 0x200) bits 0) field PRBS_EN of register PMC_ILAKEN_REG_SERDES_TEST_CTRL index N=0..1 */
    ilkn_reg_SERDES_TEST_CTRL_array_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               N,
                                               ILAKEN_REG_SERDES_TEST_CTRL_BIT_PRBS_EN_MSK,
                                               ILAKEN_REG_SERDES_TEST_CTRL_BIT_PRBS_EN_OFF,
                                               value);
}

static INLINE UINT32 ilkn_field_PRBS_EN_get( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_PRBS_EN_get( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_PRBS_EN_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_PRBS_EN_get", N, 1);
    /* ((0x00005520 + (N) * 0x200) bits 0) field PRBS_EN of register PMC_ILAKEN_REG_SERDES_TEST_CTRL index N=0..1 */
    reg_value = ilkn_reg_SERDES_TEST_CTRL_array_read( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N);
    value = (reg_value & ILAKEN_REG_SERDES_TEST_CTRL_BIT_PRBS_EN_MSK) >> ILAKEN_REG_SERDES_TEST_CTRL_BIT_PRBS_EN_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_PRBS_EN_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_TST_PTRN_A_VALUE_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_TST_PTRN_A_VALUE_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_TST_PTRN_A_VALUE_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_TST_PTRN_A_VALUE_set", N, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_TST_PTRN_A_VALUE_set", A, N, value );

    /* ((0x00005524 + (N) * 0x200) bits 31:0) field TST_PTRN_A_VALUE of register PMC_ILAKEN_REG_SERDES_TEST_PATTERN_A index N=0..1 */
    ilkn_reg_SERDES_TEST_PATTERN_A_array_field_set( b_ptr,
                                                    h_ptr,
                                                    A,
                                                    N,
                                                    ILAKEN_REG_SERDES_TEST_PATTERN_A_BIT_TST_PTRN_A_VALUE_MSK,
                                                    ILAKEN_REG_SERDES_TEST_PATTERN_A_BIT_TST_PTRN_A_VALUE_OFF,
                                                    value);
}

static INLINE UINT32 ilkn_field_TST_PTRN_A_VALUE_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_TST_PTRN_A_VALUE_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_TST_PTRN_A_VALUE_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_TST_PTRN_A_VALUE_get", N, 1);
    /* ((0x00005524 + (N) * 0x200) bits 31:0) field TST_PTRN_A_VALUE of register PMC_ILAKEN_REG_SERDES_TEST_PATTERN_A index N=0..1 */
    reg_value = ilkn_reg_SERDES_TEST_PATTERN_A_array_read( b_ptr,
                                                           h_ptr,
                                                           A,
                                                           N);
    value = (reg_value & ILAKEN_REG_SERDES_TEST_PATTERN_A_BIT_TST_PTRN_A_VALUE_MSK) >> ILAKEN_REG_SERDES_TEST_PATTERN_A_BIT_TST_PTRN_A_VALUE_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_TST_PTRN_A_VALUE_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_TST_PTRN_A_VALUE_set( ilkn_buffer_t *b_ptr,
                                                          sifd_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_TST_PTRN_A_VALUE_set( ilkn_buffer_t *b_ptr,
                                                          sifd_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_TST_PTRN_A_VALUE_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_TST_PTRN_A_VALUE_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_TST_PTRN_A_VALUE_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_TST_PTRN_A_VALUE_set", stop_bit, 31 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_TST_PTRN_A_VALUE_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005524 + (N) * 0x200) bits 31:0) field TST_PTRN_A_VALUE of register PMC_ILAKEN_REG_SERDES_TEST_PATTERN_A index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005524 + (N) * 0x200) bits 31:0) field TST_PTRN_A_VALUE of register PMC_ILAKEN_REG_SERDES_TEST_PATTERN_A index N=0..1 */
        ilkn_reg_SERDES_TEST_PATTERN_A_array_field_set( b_ptr,
                                                        h_ptr,
                                                        A,
                                                        N,
                                                        subfield_mask << (ILAKEN_REG_SERDES_TEST_PATTERN_A_BIT_TST_PTRN_A_VALUE_OFF + subfield_offset),
                                                        ILAKEN_REG_SERDES_TEST_PATTERN_A_BIT_TST_PTRN_A_VALUE_OFF + subfield_offset,
                                                        value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_TST_PTRN_A_VALUE_get( ilkn_buffer_t *b_ptr,
                                                            sifd_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_TST_PTRN_A_VALUE_get( ilkn_buffer_t *b_ptr,
                                                            sifd_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_TST_PTRN_A_VALUE_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_TST_PTRN_A_VALUE_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_TST_PTRN_A_VALUE_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_TST_PTRN_A_VALUE_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005524 + (N) * 0x200) bits 31:0) field TST_PTRN_A_VALUE of register PMC_ILAKEN_REG_SERDES_TEST_PATTERN_A index N=0..1 */
    reg_value = ilkn_reg_SERDES_TEST_PATTERN_A_array_read( b_ptr,
                                                           h_ptr,
                                                           A,
                                                           N);
    field_value = (reg_value & ILAKEN_REG_SERDES_TEST_PATTERN_A_BIT_TST_PTRN_A_VALUE_MSK)
                  >> ILAKEN_REG_SERDES_TEST_PATTERN_A_BIT_TST_PTRN_A_VALUE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_SERDES_TEST_PATTERN_A_BIT_TST_PTRN_A_VALUE_MSK, ILAKEN_REG_SERDES_TEST_PATTERN_A_BIT_TST_PTRN_A_VALUE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_TST_PTRN_A_VALUE_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_TST_PTRN_B_VALUE_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_TST_PTRN_B_VALUE_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_TST_PTRN_B_VALUE_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_TST_PTRN_B_VALUE_set", N, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_TST_PTRN_B_VALUE_set", A, N, value );

    /* ((0x00005528 + (N) * 0x200) bits 31:0) field TST_PTRN_B_VALUE of register PMC_ILAKEN_REG_SERDES_TEST_PATTERN_B index N=0..1 */
    ilkn_reg_SERDES_TEST_PATTERN_B_array_field_set( b_ptr,
                                                    h_ptr,
                                                    A,
                                                    N,
                                                    ILAKEN_REG_SERDES_TEST_PATTERN_B_BIT_TST_PTRN_B_VALUE_MSK,
                                                    ILAKEN_REG_SERDES_TEST_PATTERN_B_BIT_TST_PTRN_B_VALUE_OFF,
                                                    value);
}

static INLINE UINT32 ilkn_field_TST_PTRN_B_VALUE_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_TST_PTRN_B_VALUE_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_TST_PTRN_B_VALUE_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_TST_PTRN_B_VALUE_get", N, 1);
    /* ((0x00005528 + (N) * 0x200) bits 31:0) field TST_PTRN_B_VALUE of register PMC_ILAKEN_REG_SERDES_TEST_PATTERN_B index N=0..1 */
    reg_value = ilkn_reg_SERDES_TEST_PATTERN_B_array_read( b_ptr,
                                                           h_ptr,
                                                           A,
                                                           N);
    value = (reg_value & ILAKEN_REG_SERDES_TEST_PATTERN_B_BIT_TST_PTRN_B_VALUE_MSK) >> ILAKEN_REG_SERDES_TEST_PATTERN_B_BIT_TST_PTRN_B_VALUE_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_TST_PTRN_B_VALUE_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_TST_PTRN_B_VALUE_set( ilkn_buffer_t *b_ptr,
                                                          sifd_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_TST_PTRN_B_VALUE_set( ilkn_buffer_t *b_ptr,
                                                          sifd_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_TST_PTRN_B_VALUE_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_TST_PTRN_B_VALUE_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_TST_PTRN_B_VALUE_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_TST_PTRN_B_VALUE_set", stop_bit, 31 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_TST_PTRN_B_VALUE_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005528 + (N) * 0x200) bits 31:0) field TST_PTRN_B_VALUE of register PMC_ILAKEN_REG_SERDES_TEST_PATTERN_B index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005528 + (N) * 0x200) bits 31:0) field TST_PTRN_B_VALUE of register PMC_ILAKEN_REG_SERDES_TEST_PATTERN_B index N=0..1 */
        ilkn_reg_SERDES_TEST_PATTERN_B_array_field_set( b_ptr,
                                                        h_ptr,
                                                        A,
                                                        N,
                                                        subfield_mask << (ILAKEN_REG_SERDES_TEST_PATTERN_B_BIT_TST_PTRN_B_VALUE_OFF + subfield_offset),
                                                        ILAKEN_REG_SERDES_TEST_PATTERN_B_BIT_TST_PTRN_B_VALUE_OFF + subfield_offset,
                                                        value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_TST_PTRN_B_VALUE_get( ilkn_buffer_t *b_ptr,
                                                            sifd_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_TST_PTRN_B_VALUE_get( ilkn_buffer_t *b_ptr,
                                                            sifd_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_TST_PTRN_B_VALUE_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_TST_PTRN_B_VALUE_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_TST_PTRN_B_VALUE_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_TST_PTRN_B_VALUE_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005528 + (N) * 0x200) bits 31:0) field TST_PTRN_B_VALUE of register PMC_ILAKEN_REG_SERDES_TEST_PATTERN_B index N=0..1 */
    reg_value = ilkn_reg_SERDES_TEST_PATTERN_B_array_read( b_ptr,
                                                           h_ptr,
                                                           A,
                                                           N);
    field_value = (reg_value & ILAKEN_REG_SERDES_TEST_PATTERN_B_BIT_TST_PTRN_B_VALUE_MSK)
                  >> ILAKEN_REG_SERDES_TEST_PATTERN_B_BIT_TST_PTRN_B_VALUE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_SERDES_TEST_PATTERN_B_BIT_TST_PTRN_B_VALUE_MSK, ILAKEN_REG_SERDES_TEST_PATTERN_B_BIT_TST_PTRN_B_VALUE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_TST_PTRN_B_VALUE_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_TST_PTRN_C_VALUE_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_TST_PTRN_C_VALUE_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_TST_PTRN_C_VALUE_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_TST_PTRN_C_VALUE_set", N, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_TST_PTRN_C_VALUE_set", A, N, value );

    /* ((0x0000552c + (N) * 0x200) bits 31:0) field TST_PTRN_C_VALUE of register PMC_ILAKEN_REG_SERDES_TEST_PATTERN_C index N=0..1 */
    ilkn_reg_SERDES_TEST_PATTERN_C_array_field_set( b_ptr,
                                                    h_ptr,
                                                    A,
                                                    N,
                                                    ILAKEN_REG_SERDES_TEST_PATTERN_C_BIT_TST_PTRN_C_VALUE_MSK,
                                                    ILAKEN_REG_SERDES_TEST_PATTERN_C_BIT_TST_PTRN_C_VALUE_OFF,
                                                    value);
}

static INLINE UINT32 ilkn_field_TST_PTRN_C_VALUE_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_TST_PTRN_C_VALUE_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_TST_PTRN_C_VALUE_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_TST_PTRN_C_VALUE_get", N, 1);
    /* ((0x0000552c + (N) * 0x200) bits 31:0) field TST_PTRN_C_VALUE of register PMC_ILAKEN_REG_SERDES_TEST_PATTERN_C index N=0..1 */
    reg_value = ilkn_reg_SERDES_TEST_PATTERN_C_array_read( b_ptr,
                                                           h_ptr,
                                                           A,
                                                           N);
    value = (reg_value & ILAKEN_REG_SERDES_TEST_PATTERN_C_BIT_TST_PTRN_C_VALUE_MSK) >> ILAKEN_REG_SERDES_TEST_PATTERN_C_BIT_TST_PTRN_C_VALUE_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_TST_PTRN_C_VALUE_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_TST_PTRN_C_VALUE_set( ilkn_buffer_t *b_ptr,
                                                          sifd_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_TST_PTRN_C_VALUE_set( ilkn_buffer_t *b_ptr,
                                                          sifd_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_TST_PTRN_C_VALUE_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_TST_PTRN_C_VALUE_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_TST_PTRN_C_VALUE_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_TST_PTRN_C_VALUE_set", stop_bit, 31 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_TST_PTRN_C_VALUE_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000552c + (N) * 0x200) bits 31:0) field TST_PTRN_C_VALUE of register PMC_ILAKEN_REG_SERDES_TEST_PATTERN_C index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000552c + (N) * 0x200) bits 31:0) field TST_PTRN_C_VALUE of register PMC_ILAKEN_REG_SERDES_TEST_PATTERN_C index N=0..1 */
        ilkn_reg_SERDES_TEST_PATTERN_C_array_field_set( b_ptr,
                                                        h_ptr,
                                                        A,
                                                        N,
                                                        subfield_mask << (ILAKEN_REG_SERDES_TEST_PATTERN_C_BIT_TST_PTRN_C_VALUE_OFF + subfield_offset),
                                                        ILAKEN_REG_SERDES_TEST_PATTERN_C_BIT_TST_PTRN_C_VALUE_OFF + subfield_offset,
                                                        value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_TST_PTRN_C_VALUE_get( ilkn_buffer_t *b_ptr,
                                                            sifd_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_TST_PTRN_C_VALUE_get( ilkn_buffer_t *b_ptr,
                                                            sifd_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_TST_PTRN_C_VALUE_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_TST_PTRN_C_VALUE_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_TST_PTRN_C_VALUE_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_TST_PTRN_C_VALUE_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000552c + (N) * 0x200) bits 31:0) field TST_PTRN_C_VALUE of register PMC_ILAKEN_REG_SERDES_TEST_PATTERN_C index N=0..1 */
    reg_value = ilkn_reg_SERDES_TEST_PATTERN_C_array_read( b_ptr,
                                                           h_ptr,
                                                           A,
                                                           N);
    field_value = (reg_value & ILAKEN_REG_SERDES_TEST_PATTERN_C_BIT_TST_PTRN_C_VALUE_MSK)
                  >> ILAKEN_REG_SERDES_TEST_PATTERN_C_BIT_TST_PTRN_C_VALUE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_SERDES_TEST_PATTERN_C_BIT_TST_PTRN_C_VALUE_MSK, ILAKEN_REG_SERDES_TEST_PATTERN_C_BIT_TST_PTRN_C_VALUE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_TST_PTRN_C_VALUE_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_REMAP_LANE5_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_REMAP_LANE5_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE5_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE5_set", N, 1);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_REMAP_LANE5_set", value, 31);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE5_set", A, N, value );

    /* ((0x00005550 + (N) * 0x200) bits 29:25) field REMAP_LANE5 of register PMC_ILAKEN_REG_REMAP_LANE_5_0 index N=0..1 */
    ilkn_reg_REMAP_LANE_5_0_array_field_set( b_ptr,
                                             h_ptr,
                                             A,
                                             N,
                                             ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE5_MSK,
                                             ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE5_OFF,
                                             value);
}

static INLINE UINT32 ilkn_field_REMAP_LANE5_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_REMAP_LANE5_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE5_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE5_get", N, 1);
    /* ((0x00005550 + (N) * 0x200) bits 29:25) field REMAP_LANE5 of register PMC_ILAKEN_REG_REMAP_LANE_5_0 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_5_0_array_read( b_ptr,
                                                    h_ptr,
                                                    A,
                                                    N);
    value = (reg_value & ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE5_MSK) >> ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE5_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE5_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_REMAP_LANE5_set( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_REMAP_LANE5_set( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE5_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE5_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE5_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE5_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE5_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005550 + (N) * 0x200) bits 29:25) field REMAP_LANE5 of register PMC_ILAKEN_REG_REMAP_LANE_5_0 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005550 + (N) * 0x200) bits 29:25) field REMAP_LANE5 of register PMC_ILAKEN_REG_REMAP_LANE_5_0 index N=0..1 */
        ilkn_reg_REMAP_LANE_5_0_array_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N,
                                                 subfield_mask << (ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE5_OFF + subfield_offset),
                                                 ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE5_OFF + subfield_offset,
                                                 value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_REMAP_LANE5_get( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_REMAP_LANE5_get( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE5_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE5_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE5_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE5_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005550 + (N) * 0x200) bits 29:25) field REMAP_LANE5 of register PMC_ILAKEN_REG_REMAP_LANE_5_0 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_5_0_array_read( b_ptr,
                                                    h_ptr,
                                                    A,
                                                    N);
    field_value = (reg_value & ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE5_MSK)
                  >> ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE5_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE5_MSK, ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE5_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE5_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_REMAP_LANE4_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_REMAP_LANE4_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE4_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE4_set", N, 1);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_REMAP_LANE4_set", value, 31);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE4_set", A, N, value );

    /* ((0x00005550 + (N) * 0x200) bits 24:20) field REMAP_LANE4 of register PMC_ILAKEN_REG_REMAP_LANE_5_0 index N=0..1 */
    ilkn_reg_REMAP_LANE_5_0_array_field_set( b_ptr,
                                             h_ptr,
                                             A,
                                             N,
                                             ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE4_MSK,
                                             ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE4_OFF,
                                             value);
}

static INLINE UINT32 ilkn_field_REMAP_LANE4_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_REMAP_LANE4_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE4_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE4_get", N, 1);
    /* ((0x00005550 + (N) * 0x200) bits 24:20) field REMAP_LANE4 of register PMC_ILAKEN_REG_REMAP_LANE_5_0 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_5_0_array_read( b_ptr,
                                                    h_ptr,
                                                    A,
                                                    N);
    value = (reg_value & ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE4_MSK) >> ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE4_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE4_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_REMAP_LANE4_set( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_REMAP_LANE4_set( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE4_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE4_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE4_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE4_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE4_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005550 + (N) * 0x200) bits 24:20) field REMAP_LANE4 of register PMC_ILAKEN_REG_REMAP_LANE_5_0 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005550 + (N) * 0x200) bits 24:20) field REMAP_LANE4 of register PMC_ILAKEN_REG_REMAP_LANE_5_0 index N=0..1 */
        ilkn_reg_REMAP_LANE_5_0_array_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N,
                                                 subfield_mask << (ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE4_OFF + subfield_offset),
                                                 ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE4_OFF + subfield_offset,
                                                 value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_REMAP_LANE4_get( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_REMAP_LANE4_get( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE4_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE4_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE4_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE4_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005550 + (N) * 0x200) bits 24:20) field REMAP_LANE4 of register PMC_ILAKEN_REG_REMAP_LANE_5_0 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_5_0_array_read( b_ptr,
                                                    h_ptr,
                                                    A,
                                                    N);
    field_value = (reg_value & ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE4_MSK)
                  >> ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE4_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE4_MSK, ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE4_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE4_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_REMAP_LANE3_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_REMAP_LANE3_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE3_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE3_set", N, 1);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_REMAP_LANE3_set", value, 31);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE3_set", A, N, value );

    /* ((0x00005550 + (N) * 0x200) bits 19:15) field REMAP_LANE3 of register PMC_ILAKEN_REG_REMAP_LANE_5_0 index N=0..1 */
    ilkn_reg_REMAP_LANE_5_0_array_field_set( b_ptr,
                                             h_ptr,
                                             A,
                                             N,
                                             ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE3_MSK,
                                             ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE3_OFF,
                                             value);
}

static INLINE UINT32 ilkn_field_REMAP_LANE3_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_REMAP_LANE3_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE3_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE3_get", N, 1);
    /* ((0x00005550 + (N) * 0x200) bits 19:15) field REMAP_LANE3 of register PMC_ILAKEN_REG_REMAP_LANE_5_0 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_5_0_array_read( b_ptr,
                                                    h_ptr,
                                                    A,
                                                    N);
    value = (reg_value & ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE3_MSK) >> ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE3_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE3_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_REMAP_LANE3_set( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_REMAP_LANE3_set( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE3_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE3_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE3_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE3_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE3_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005550 + (N) * 0x200) bits 19:15) field REMAP_LANE3 of register PMC_ILAKEN_REG_REMAP_LANE_5_0 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005550 + (N) * 0x200) bits 19:15) field REMAP_LANE3 of register PMC_ILAKEN_REG_REMAP_LANE_5_0 index N=0..1 */
        ilkn_reg_REMAP_LANE_5_0_array_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N,
                                                 subfield_mask << (ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE3_OFF + subfield_offset),
                                                 ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE3_OFF + subfield_offset,
                                                 value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_REMAP_LANE3_get( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_REMAP_LANE3_get( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE3_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE3_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE3_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE3_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005550 + (N) * 0x200) bits 19:15) field REMAP_LANE3 of register PMC_ILAKEN_REG_REMAP_LANE_5_0 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_5_0_array_read( b_ptr,
                                                    h_ptr,
                                                    A,
                                                    N);
    field_value = (reg_value & ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE3_MSK)
                  >> ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE3_MSK, ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE3_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_REMAP_LANE2_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_REMAP_LANE2_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE2_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE2_set", N, 1);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_REMAP_LANE2_set", value, 31);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE2_set", A, N, value );

    /* ((0x00005550 + (N) * 0x200) bits 14:10) field REMAP_LANE2 of register PMC_ILAKEN_REG_REMAP_LANE_5_0 index N=0..1 */
    ilkn_reg_REMAP_LANE_5_0_array_field_set( b_ptr,
                                             h_ptr,
                                             A,
                                             N,
                                             ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE2_MSK,
                                             ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE2_OFF,
                                             value);
}

static INLINE UINT32 ilkn_field_REMAP_LANE2_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_REMAP_LANE2_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE2_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE2_get", N, 1);
    /* ((0x00005550 + (N) * 0x200) bits 14:10) field REMAP_LANE2 of register PMC_ILAKEN_REG_REMAP_LANE_5_0 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_5_0_array_read( b_ptr,
                                                    h_ptr,
                                                    A,
                                                    N);
    value = (reg_value & ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE2_MSK) >> ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE2_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE2_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_REMAP_LANE2_set( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_REMAP_LANE2_set( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE2_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE2_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE2_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE2_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE2_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005550 + (N) * 0x200) bits 14:10) field REMAP_LANE2 of register PMC_ILAKEN_REG_REMAP_LANE_5_0 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005550 + (N) * 0x200) bits 14:10) field REMAP_LANE2 of register PMC_ILAKEN_REG_REMAP_LANE_5_0 index N=0..1 */
        ilkn_reg_REMAP_LANE_5_0_array_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N,
                                                 subfield_mask << (ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE2_OFF + subfield_offset),
                                                 ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE2_OFF + subfield_offset,
                                                 value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_REMAP_LANE2_get( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_REMAP_LANE2_get( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE2_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE2_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE2_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE2_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005550 + (N) * 0x200) bits 14:10) field REMAP_LANE2 of register PMC_ILAKEN_REG_REMAP_LANE_5_0 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_5_0_array_read( b_ptr,
                                                    h_ptr,
                                                    A,
                                                    N);
    field_value = (reg_value & ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE2_MSK)
                  >> ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE2_MSK, ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE2_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_REMAP_LANE1_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_REMAP_LANE1_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE1_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE1_set", N, 1);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_REMAP_LANE1_set", value, 31);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE1_set", A, N, value );

    /* ((0x00005550 + (N) * 0x200) bits 9:5) field REMAP_LANE1 of register PMC_ILAKEN_REG_REMAP_LANE_5_0 index N=0..1 */
    ilkn_reg_REMAP_LANE_5_0_array_field_set( b_ptr,
                                             h_ptr,
                                             A,
                                             N,
                                             ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE1_MSK,
                                             ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE1_OFF,
                                             value);
}

static INLINE UINT32 ilkn_field_REMAP_LANE1_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_REMAP_LANE1_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE1_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE1_get", N, 1);
    /* ((0x00005550 + (N) * 0x200) bits 9:5) field REMAP_LANE1 of register PMC_ILAKEN_REG_REMAP_LANE_5_0 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_5_0_array_read( b_ptr,
                                                    h_ptr,
                                                    A,
                                                    N);
    value = (reg_value & ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE1_MSK) >> ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE1_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE1_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_REMAP_LANE1_set( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_REMAP_LANE1_set( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE1_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE1_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE1_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE1_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE1_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005550 + (N) * 0x200) bits 9:5) field REMAP_LANE1 of register PMC_ILAKEN_REG_REMAP_LANE_5_0 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005550 + (N) * 0x200) bits 9:5) field REMAP_LANE1 of register PMC_ILAKEN_REG_REMAP_LANE_5_0 index N=0..1 */
        ilkn_reg_REMAP_LANE_5_0_array_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N,
                                                 subfield_mask << (ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE1_OFF + subfield_offset),
                                                 ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE1_OFF + subfield_offset,
                                                 value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_REMAP_LANE1_get( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_REMAP_LANE1_get( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE1_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE1_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE1_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE1_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005550 + (N) * 0x200) bits 9:5) field REMAP_LANE1 of register PMC_ILAKEN_REG_REMAP_LANE_5_0 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_5_0_array_read( b_ptr,
                                                    h_ptr,
                                                    A,
                                                    N);
    field_value = (reg_value & ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE1_MSK)
                  >> ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE1_MSK, ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE1_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_REMAP_LANE0_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_REMAP_LANE0_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE0_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE0_set", N, 1);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_REMAP_LANE0_set", value, 31);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE0_set", A, N, value );

    /* ((0x00005550 + (N) * 0x200) bits 4:0) field REMAP_LANE0 of register PMC_ILAKEN_REG_REMAP_LANE_5_0 index N=0..1 */
    ilkn_reg_REMAP_LANE_5_0_array_field_set( b_ptr,
                                             h_ptr,
                                             A,
                                             N,
                                             ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE0_MSK,
                                             ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE0_OFF,
                                             value);
}

static INLINE UINT32 ilkn_field_REMAP_LANE0_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_REMAP_LANE0_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE0_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE0_get", N, 1);
    /* ((0x00005550 + (N) * 0x200) bits 4:0) field REMAP_LANE0 of register PMC_ILAKEN_REG_REMAP_LANE_5_0 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_5_0_array_read( b_ptr,
                                                    h_ptr,
                                                    A,
                                                    N);
    value = (reg_value & ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE0_MSK) >> ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE0_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE0_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_REMAP_LANE0_set( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_REMAP_LANE0_set( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE0_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE0_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE0_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE0_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE0_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005550 + (N) * 0x200) bits 4:0) field REMAP_LANE0 of register PMC_ILAKEN_REG_REMAP_LANE_5_0 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005550 + (N) * 0x200) bits 4:0) field REMAP_LANE0 of register PMC_ILAKEN_REG_REMAP_LANE_5_0 index N=0..1 */
        ilkn_reg_REMAP_LANE_5_0_array_field_set( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N,
                                                 subfield_mask << (ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE0_OFF + subfield_offset),
                                                 ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE0_OFF + subfield_offset,
                                                 value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_REMAP_LANE0_get( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_REMAP_LANE0_get( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE0_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE0_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE0_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE0_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005550 + (N) * 0x200) bits 4:0) field REMAP_LANE0 of register PMC_ILAKEN_REG_REMAP_LANE_5_0 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_5_0_array_read( b_ptr,
                                                    h_ptr,
                                                    A,
                                                    N);
    field_value = (reg_value & ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE0_MSK)
                  >> ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE0_MSK, ILAKEN_REG_REMAP_LANE_5_0_BIT_REMAP_LANE0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE0_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_REMAP_LANE11_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_REMAP_LANE11_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE11_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE11_set", N, 1);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_REMAP_LANE11_set", value, 31);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE11_set", A, N, value );

    /* ((0x00005554 + (N) * 0x200) bits 29:25) field REMAP_LANE11 of register PMC_ILAKEN_REG_REMAP_LANE_11_6 index N=0..1 */
    ilkn_reg_REMAP_LANE_11_6_array_field_set( b_ptr,
                                              h_ptr,
                                              A,
                                              N,
                                              ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE11_MSK,
                                              ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE11_OFF,
                                              value);
}

static INLINE UINT32 ilkn_field_REMAP_LANE11_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_REMAP_LANE11_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE11_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE11_get", N, 1);
    /* ((0x00005554 + (N) * 0x200) bits 29:25) field REMAP_LANE11 of register PMC_ILAKEN_REG_REMAP_LANE_11_6 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_11_6_array_read( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     N);
    value = (reg_value & ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE11_MSK) >> ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE11_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE11_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_REMAP_LANE11_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_REMAP_LANE11_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE11_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE11_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE11_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE11_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE11_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005554 + (N) * 0x200) bits 29:25) field REMAP_LANE11 of register PMC_ILAKEN_REG_REMAP_LANE_11_6 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005554 + (N) * 0x200) bits 29:25) field REMAP_LANE11 of register PMC_ILAKEN_REG_REMAP_LANE_11_6 index N=0..1 */
        ilkn_reg_REMAP_LANE_11_6_array_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  N,
                                                  subfield_mask << (ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE11_OFF + subfield_offset),
                                                  ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE11_OFF + subfield_offset,
                                                  value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_REMAP_LANE11_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_REMAP_LANE11_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE11_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE11_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE11_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE11_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005554 + (N) * 0x200) bits 29:25) field REMAP_LANE11 of register PMC_ILAKEN_REG_REMAP_LANE_11_6 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_11_6_array_read( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     N);
    field_value = (reg_value & ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE11_MSK)
                  >> ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE11_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE11_MSK, ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE11_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE11_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_REMAP_LANE10_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_REMAP_LANE10_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE10_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE10_set", N, 1);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_REMAP_LANE10_set", value, 31);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE10_set", A, N, value );

    /* ((0x00005554 + (N) * 0x200) bits 24:20) field REMAP_LANE10 of register PMC_ILAKEN_REG_REMAP_LANE_11_6 index N=0..1 */
    ilkn_reg_REMAP_LANE_11_6_array_field_set( b_ptr,
                                              h_ptr,
                                              A,
                                              N,
                                              ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE10_MSK,
                                              ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE10_OFF,
                                              value);
}

static INLINE UINT32 ilkn_field_REMAP_LANE10_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_REMAP_LANE10_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE10_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE10_get", N, 1);
    /* ((0x00005554 + (N) * 0x200) bits 24:20) field REMAP_LANE10 of register PMC_ILAKEN_REG_REMAP_LANE_11_6 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_11_6_array_read( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     N);
    value = (reg_value & ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE10_MSK) >> ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE10_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE10_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_REMAP_LANE10_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_REMAP_LANE10_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE10_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE10_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE10_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE10_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE10_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005554 + (N) * 0x200) bits 24:20) field REMAP_LANE10 of register PMC_ILAKEN_REG_REMAP_LANE_11_6 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005554 + (N) * 0x200) bits 24:20) field REMAP_LANE10 of register PMC_ILAKEN_REG_REMAP_LANE_11_6 index N=0..1 */
        ilkn_reg_REMAP_LANE_11_6_array_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  N,
                                                  subfield_mask << (ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE10_OFF + subfield_offset),
                                                  ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE10_OFF + subfield_offset,
                                                  value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_REMAP_LANE10_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_REMAP_LANE10_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE10_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE10_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE10_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE10_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005554 + (N) * 0x200) bits 24:20) field REMAP_LANE10 of register PMC_ILAKEN_REG_REMAP_LANE_11_6 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_11_6_array_read( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     N);
    field_value = (reg_value & ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE10_MSK)
                  >> ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE10_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE10_MSK, ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE10_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE10_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_REMAP_LANE9_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_REMAP_LANE9_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE9_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE9_set", N, 1);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_REMAP_LANE9_set", value, 31);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE9_set", A, N, value );

    /* ((0x00005554 + (N) * 0x200) bits 19:15) field REMAP_LANE9 of register PMC_ILAKEN_REG_REMAP_LANE_11_6 index N=0..1 */
    ilkn_reg_REMAP_LANE_11_6_array_field_set( b_ptr,
                                              h_ptr,
                                              A,
                                              N,
                                              ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE9_MSK,
                                              ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE9_OFF,
                                              value);
}

static INLINE UINT32 ilkn_field_REMAP_LANE9_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_REMAP_LANE9_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE9_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE9_get", N, 1);
    /* ((0x00005554 + (N) * 0x200) bits 19:15) field REMAP_LANE9 of register PMC_ILAKEN_REG_REMAP_LANE_11_6 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_11_6_array_read( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     N);
    value = (reg_value & ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE9_MSK) >> ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE9_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE9_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_REMAP_LANE9_set( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_REMAP_LANE9_set( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE9_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE9_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE9_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE9_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE9_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005554 + (N) * 0x200) bits 19:15) field REMAP_LANE9 of register PMC_ILAKEN_REG_REMAP_LANE_11_6 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005554 + (N) * 0x200) bits 19:15) field REMAP_LANE9 of register PMC_ILAKEN_REG_REMAP_LANE_11_6 index N=0..1 */
        ilkn_reg_REMAP_LANE_11_6_array_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  N,
                                                  subfield_mask << (ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE9_OFF + subfield_offset),
                                                  ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE9_OFF + subfield_offset,
                                                  value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_REMAP_LANE9_get( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_REMAP_LANE9_get( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE9_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE9_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE9_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE9_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005554 + (N) * 0x200) bits 19:15) field REMAP_LANE9 of register PMC_ILAKEN_REG_REMAP_LANE_11_6 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_11_6_array_read( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     N);
    field_value = (reg_value & ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE9_MSK)
                  >> ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE9_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE9_MSK, ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE9_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE9_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_REMAP_LANE8_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_REMAP_LANE8_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE8_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE8_set", N, 1);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_REMAP_LANE8_set", value, 31);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE8_set", A, N, value );

    /* ((0x00005554 + (N) * 0x200) bits 14:10) field REMAP_LANE8 of register PMC_ILAKEN_REG_REMAP_LANE_11_6 index N=0..1 */
    ilkn_reg_REMAP_LANE_11_6_array_field_set( b_ptr,
                                              h_ptr,
                                              A,
                                              N,
                                              ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE8_MSK,
                                              ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE8_OFF,
                                              value);
}

static INLINE UINT32 ilkn_field_REMAP_LANE8_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_REMAP_LANE8_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE8_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE8_get", N, 1);
    /* ((0x00005554 + (N) * 0x200) bits 14:10) field REMAP_LANE8 of register PMC_ILAKEN_REG_REMAP_LANE_11_6 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_11_6_array_read( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     N);
    value = (reg_value & ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE8_MSK) >> ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE8_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE8_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_REMAP_LANE8_set( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_REMAP_LANE8_set( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE8_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE8_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE8_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE8_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE8_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005554 + (N) * 0x200) bits 14:10) field REMAP_LANE8 of register PMC_ILAKEN_REG_REMAP_LANE_11_6 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005554 + (N) * 0x200) bits 14:10) field REMAP_LANE8 of register PMC_ILAKEN_REG_REMAP_LANE_11_6 index N=0..1 */
        ilkn_reg_REMAP_LANE_11_6_array_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  N,
                                                  subfield_mask << (ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE8_OFF + subfield_offset),
                                                  ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE8_OFF + subfield_offset,
                                                  value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_REMAP_LANE8_get( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_REMAP_LANE8_get( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE8_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE8_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE8_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE8_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005554 + (N) * 0x200) bits 14:10) field REMAP_LANE8 of register PMC_ILAKEN_REG_REMAP_LANE_11_6 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_11_6_array_read( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     N);
    field_value = (reg_value & ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE8_MSK)
                  >> ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE8_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE8_MSK, ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE8_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE8_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_REMAP_LANE7_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_REMAP_LANE7_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE7_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE7_set", N, 1);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_REMAP_LANE7_set", value, 31);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE7_set", A, N, value );

    /* ((0x00005554 + (N) * 0x200) bits 9:5) field REMAP_LANE7 of register PMC_ILAKEN_REG_REMAP_LANE_11_6 index N=0..1 */
    ilkn_reg_REMAP_LANE_11_6_array_field_set( b_ptr,
                                              h_ptr,
                                              A,
                                              N,
                                              ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE7_MSK,
                                              ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE7_OFF,
                                              value);
}

static INLINE UINT32 ilkn_field_REMAP_LANE7_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_REMAP_LANE7_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE7_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE7_get", N, 1);
    /* ((0x00005554 + (N) * 0x200) bits 9:5) field REMAP_LANE7 of register PMC_ILAKEN_REG_REMAP_LANE_11_6 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_11_6_array_read( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     N);
    value = (reg_value & ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE7_MSK) >> ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE7_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE7_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_REMAP_LANE7_set( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_REMAP_LANE7_set( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE7_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE7_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE7_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE7_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE7_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005554 + (N) * 0x200) bits 9:5) field REMAP_LANE7 of register PMC_ILAKEN_REG_REMAP_LANE_11_6 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005554 + (N) * 0x200) bits 9:5) field REMAP_LANE7 of register PMC_ILAKEN_REG_REMAP_LANE_11_6 index N=0..1 */
        ilkn_reg_REMAP_LANE_11_6_array_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  N,
                                                  subfield_mask << (ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE7_OFF + subfield_offset),
                                                  ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE7_OFF + subfield_offset,
                                                  value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_REMAP_LANE7_get( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_REMAP_LANE7_get( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE7_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE7_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE7_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE7_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005554 + (N) * 0x200) bits 9:5) field REMAP_LANE7 of register PMC_ILAKEN_REG_REMAP_LANE_11_6 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_11_6_array_read( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     N);
    field_value = (reg_value & ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE7_MSK)
                  >> ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE7_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE7_MSK, ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE7_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE7_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_REMAP_LANE6_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_REMAP_LANE6_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE6_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE6_set", N, 1);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_REMAP_LANE6_set", value, 31);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE6_set", A, N, value );

    /* ((0x00005554 + (N) * 0x200) bits 4:0) field REMAP_LANE6 of register PMC_ILAKEN_REG_REMAP_LANE_11_6 index N=0..1 */
    ilkn_reg_REMAP_LANE_11_6_array_field_set( b_ptr,
                                              h_ptr,
                                              A,
                                              N,
                                              ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE6_MSK,
                                              ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE6_OFF,
                                              value);
}

static INLINE UINT32 ilkn_field_REMAP_LANE6_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_REMAP_LANE6_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE6_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE6_get", N, 1);
    /* ((0x00005554 + (N) * 0x200) bits 4:0) field REMAP_LANE6 of register PMC_ILAKEN_REG_REMAP_LANE_11_6 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_11_6_array_read( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     N);
    value = (reg_value & ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE6_MSK) >> ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE6_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE6_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_REMAP_LANE6_set( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_REMAP_LANE6_set( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE6_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE6_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE6_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE6_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE6_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005554 + (N) * 0x200) bits 4:0) field REMAP_LANE6 of register PMC_ILAKEN_REG_REMAP_LANE_11_6 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005554 + (N) * 0x200) bits 4:0) field REMAP_LANE6 of register PMC_ILAKEN_REG_REMAP_LANE_11_6 index N=0..1 */
        ilkn_reg_REMAP_LANE_11_6_array_field_set( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  N,
                                                  subfield_mask << (ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE6_OFF + subfield_offset),
                                                  ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE6_OFF + subfield_offset,
                                                  value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_REMAP_LANE6_get( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_REMAP_LANE6_get( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE6_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE6_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE6_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE6_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005554 + (N) * 0x200) bits 4:0) field REMAP_LANE6 of register PMC_ILAKEN_REG_REMAP_LANE_11_6 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_11_6_array_read( b_ptr,
                                                     h_ptr,
                                                     A,
                                                     N);
    field_value = (reg_value & ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE6_MSK)
                  >> ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE6_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE6_MSK, ILAKEN_REG_REMAP_LANE_11_6_BIT_REMAP_LANE6_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE6_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_REMAP_LANE17_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_REMAP_LANE17_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE17_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE17_set", N, 1);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_REMAP_LANE17_set", value, 31);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE17_set", A, N, value );

    /* ((0x00005558 + (N) * 0x200) bits 29:25) field REMAP_LANE17 of register PMC_ILAKEN_REG_REMAP_LANE_17_12 index N=0..1 */
    ilkn_reg_REMAP_LANE_17_12_array_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               N,
                                               ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE17_MSK,
                                               ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE17_OFF,
                                               value);
}

static INLINE UINT32 ilkn_field_REMAP_LANE17_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_REMAP_LANE17_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE17_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE17_get", N, 1);
    /* ((0x00005558 + (N) * 0x200) bits 29:25) field REMAP_LANE17 of register PMC_ILAKEN_REG_REMAP_LANE_17_12 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_17_12_array_read( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N);
    value = (reg_value & ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE17_MSK) >> ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE17_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE17_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_REMAP_LANE17_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_REMAP_LANE17_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE17_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE17_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE17_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE17_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE17_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005558 + (N) * 0x200) bits 29:25) field REMAP_LANE17 of register PMC_ILAKEN_REG_REMAP_LANE_17_12 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005558 + (N) * 0x200) bits 29:25) field REMAP_LANE17 of register PMC_ILAKEN_REG_REMAP_LANE_17_12 index N=0..1 */
        ilkn_reg_REMAP_LANE_17_12_array_field_set( b_ptr,
                                                   h_ptr,
                                                   A,
                                                   N,
                                                   subfield_mask << (ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE17_OFF + subfield_offset),
                                                   ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE17_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_REMAP_LANE17_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_REMAP_LANE17_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE17_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE17_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE17_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE17_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005558 + (N) * 0x200) bits 29:25) field REMAP_LANE17 of register PMC_ILAKEN_REG_REMAP_LANE_17_12 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_17_12_array_read( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N);
    field_value = (reg_value & ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE17_MSK)
                  >> ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE17_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE17_MSK, ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE17_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE17_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_REMAP_LANE16_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_REMAP_LANE16_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE16_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE16_set", N, 1);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_REMAP_LANE16_set", value, 31);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE16_set", A, N, value );

    /* ((0x00005558 + (N) * 0x200) bits 24:20) field REMAP_LANE16 of register PMC_ILAKEN_REG_REMAP_LANE_17_12 index N=0..1 */
    ilkn_reg_REMAP_LANE_17_12_array_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               N,
                                               ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE16_MSK,
                                               ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE16_OFF,
                                               value);
}

static INLINE UINT32 ilkn_field_REMAP_LANE16_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_REMAP_LANE16_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE16_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE16_get", N, 1);
    /* ((0x00005558 + (N) * 0x200) bits 24:20) field REMAP_LANE16 of register PMC_ILAKEN_REG_REMAP_LANE_17_12 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_17_12_array_read( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N);
    value = (reg_value & ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE16_MSK) >> ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE16_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE16_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_REMAP_LANE16_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_REMAP_LANE16_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE16_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE16_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE16_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE16_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE16_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005558 + (N) * 0x200) bits 24:20) field REMAP_LANE16 of register PMC_ILAKEN_REG_REMAP_LANE_17_12 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005558 + (N) * 0x200) bits 24:20) field REMAP_LANE16 of register PMC_ILAKEN_REG_REMAP_LANE_17_12 index N=0..1 */
        ilkn_reg_REMAP_LANE_17_12_array_field_set( b_ptr,
                                                   h_ptr,
                                                   A,
                                                   N,
                                                   subfield_mask << (ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE16_OFF + subfield_offset),
                                                   ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE16_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_REMAP_LANE16_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_REMAP_LANE16_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE16_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE16_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE16_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE16_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005558 + (N) * 0x200) bits 24:20) field REMAP_LANE16 of register PMC_ILAKEN_REG_REMAP_LANE_17_12 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_17_12_array_read( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N);
    field_value = (reg_value & ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE16_MSK)
                  >> ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE16_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE16_MSK, ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE16_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE16_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_REMAP_LANE15_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_REMAP_LANE15_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE15_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE15_set", N, 1);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_REMAP_LANE15_set", value, 31);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE15_set", A, N, value );

    /* ((0x00005558 + (N) * 0x200) bits 19:15) field REMAP_LANE15 of register PMC_ILAKEN_REG_REMAP_LANE_17_12 index N=0..1 */
    ilkn_reg_REMAP_LANE_17_12_array_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               N,
                                               ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE15_MSK,
                                               ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE15_OFF,
                                               value);
}

static INLINE UINT32 ilkn_field_REMAP_LANE15_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_REMAP_LANE15_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE15_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE15_get", N, 1);
    /* ((0x00005558 + (N) * 0x200) bits 19:15) field REMAP_LANE15 of register PMC_ILAKEN_REG_REMAP_LANE_17_12 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_17_12_array_read( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N);
    value = (reg_value & ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE15_MSK) >> ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE15_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE15_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_REMAP_LANE15_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_REMAP_LANE15_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE15_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE15_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE15_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE15_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE15_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005558 + (N) * 0x200) bits 19:15) field REMAP_LANE15 of register PMC_ILAKEN_REG_REMAP_LANE_17_12 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005558 + (N) * 0x200) bits 19:15) field REMAP_LANE15 of register PMC_ILAKEN_REG_REMAP_LANE_17_12 index N=0..1 */
        ilkn_reg_REMAP_LANE_17_12_array_field_set( b_ptr,
                                                   h_ptr,
                                                   A,
                                                   N,
                                                   subfield_mask << (ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE15_OFF + subfield_offset),
                                                   ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE15_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_REMAP_LANE15_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_REMAP_LANE15_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE15_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE15_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE15_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE15_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005558 + (N) * 0x200) bits 19:15) field REMAP_LANE15 of register PMC_ILAKEN_REG_REMAP_LANE_17_12 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_17_12_array_read( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N);
    field_value = (reg_value & ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE15_MSK)
                  >> ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE15_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE15_MSK, ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE15_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE15_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_REMAP_LANE14_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_REMAP_LANE14_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE14_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE14_set", N, 1);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_REMAP_LANE14_set", value, 31);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE14_set", A, N, value );

    /* ((0x00005558 + (N) * 0x200) bits 14:10) field REMAP_LANE14 of register PMC_ILAKEN_REG_REMAP_LANE_17_12 index N=0..1 */
    ilkn_reg_REMAP_LANE_17_12_array_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               N,
                                               ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE14_MSK,
                                               ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE14_OFF,
                                               value);
}

static INLINE UINT32 ilkn_field_REMAP_LANE14_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_REMAP_LANE14_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE14_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE14_get", N, 1);
    /* ((0x00005558 + (N) * 0x200) bits 14:10) field REMAP_LANE14 of register PMC_ILAKEN_REG_REMAP_LANE_17_12 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_17_12_array_read( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N);
    value = (reg_value & ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE14_MSK) >> ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE14_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE14_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_REMAP_LANE14_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_REMAP_LANE14_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE14_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE14_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE14_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE14_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE14_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005558 + (N) * 0x200) bits 14:10) field REMAP_LANE14 of register PMC_ILAKEN_REG_REMAP_LANE_17_12 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005558 + (N) * 0x200) bits 14:10) field REMAP_LANE14 of register PMC_ILAKEN_REG_REMAP_LANE_17_12 index N=0..1 */
        ilkn_reg_REMAP_LANE_17_12_array_field_set( b_ptr,
                                                   h_ptr,
                                                   A,
                                                   N,
                                                   subfield_mask << (ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE14_OFF + subfield_offset),
                                                   ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE14_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_REMAP_LANE14_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_REMAP_LANE14_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE14_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE14_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE14_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE14_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005558 + (N) * 0x200) bits 14:10) field REMAP_LANE14 of register PMC_ILAKEN_REG_REMAP_LANE_17_12 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_17_12_array_read( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N);
    field_value = (reg_value & ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE14_MSK)
                  >> ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE14_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE14_MSK, ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE14_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE14_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_REMAP_LANE13_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_REMAP_LANE13_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE13_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE13_set", N, 1);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_REMAP_LANE13_set", value, 31);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE13_set", A, N, value );

    /* ((0x00005558 + (N) * 0x200) bits 9:5) field REMAP_LANE13 of register PMC_ILAKEN_REG_REMAP_LANE_17_12 index N=0..1 */
    ilkn_reg_REMAP_LANE_17_12_array_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               N,
                                               ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE13_MSK,
                                               ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE13_OFF,
                                               value);
}

static INLINE UINT32 ilkn_field_REMAP_LANE13_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_REMAP_LANE13_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE13_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE13_get", N, 1);
    /* ((0x00005558 + (N) * 0x200) bits 9:5) field REMAP_LANE13 of register PMC_ILAKEN_REG_REMAP_LANE_17_12 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_17_12_array_read( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N);
    value = (reg_value & ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE13_MSK) >> ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE13_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE13_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_REMAP_LANE13_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_REMAP_LANE13_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE13_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE13_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE13_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE13_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE13_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005558 + (N) * 0x200) bits 9:5) field REMAP_LANE13 of register PMC_ILAKEN_REG_REMAP_LANE_17_12 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005558 + (N) * 0x200) bits 9:5) field REMAP_LANE13 of register PMC_ILAKEN_REG_REMAP_LANE_17_12 index N=0..1 */
        ilkn_reg_REMAP_LANE_17_12_array_field_set( b_ptr,
                                                   h_ptr,
                                                   A,
                                                   N,
                                                   subfield_mask << (ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE13_OFF + subfield_offset),
                                                   ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE13_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_REMAP_LANE13_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_REMAP_LANE13_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE13_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE13_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE13_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE13_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005558 + (N) * 0x200) bits 9:5) field REMAP_LANE13 of register PMC_ILAKEN_REG_REMAP_LANE_17_12 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_17_12_array_read( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N);
    field_value = (reg_value & ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE13_MSK)
                  >> ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE13_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE13_MSK, ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE13_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE13_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_REMAP_LANE12_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_REMAP_LANE12_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE12_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE12_set", N, 1);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_REMAP_LANE12_set", value, 31);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE12_set", A, N, value );

    /* ((0x00005558 + (N) * 0x200) bits 4:0) field REMAP_LANE12 of register PMC_ILAKEN_REG_REMAP_LANE_17_12 index N=0..1 */
    ilkn_reg_REMAP_LANE_17_12_array_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               N,
                                               ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE12_MSK,
                                               ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE12_OFF,
                                               value);
}

static INLINE UINT32 ilkn_field_REMAP_LANE12_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_REMAP_LANE12_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE12_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE12_get", N, 1);
    /* ((0x00005558 + (N) * 0x200) bits 4:0) field REMAP_LANE12 of register PMC_ILAKEN_REG_REMAP_LANE_17_12 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_17_12_array_read( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N);
    value = (reg_value & ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE12_MSK) >> ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE12_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE12_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_REMAP_LANE12_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_REMAP_LANE12_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE12_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE12_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE12_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE12_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE12_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00005558 + (N) * 0x200) bits 4:0) field REMAP_LANE12 of register PMC_ILAKEN_REG_REMAP_LANE_17_12 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00005558 + (N) * 0x200) bits 4:0) field REMAP_LANE12 of register PMC_ILAKEN_REG_REMAP_LANE_17_12 index N=0..1 */
        ilkn_reg_REMAP_LANE_17_12_array_field_set( b_ptr,
                                                   h_ptr,
                                                   A,
                                                   N,
                                                   subfield_mask << (ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE12_OFF + subfield_offset),
                                                   ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE12_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_REMAP_LANE12_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_REMAP_LANE12_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE12_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE12_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE12_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE12_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00005558 + (N) * 0x200) bits 4:0) field REMAP_LANE12 of register PMC_ILAKEN_REG_REMAP_LANE_17_12 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_17_12_array_read( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N);
    field_value = (reg_value & ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE12_MSK)
                  >> ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE12_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE12_MSK, ILAKEN_REG_REMAP_LANE_17_12_BIT_REMAP_LANE12_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE12_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_REMAP_LANE23_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_REMAP_LANE23_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE23_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE23_set", N, 1);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_REMAP_LANE23_set", value, 31);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE23_set", A, N, value );

    /* ((0x0000555c + (N) * 0x200) bits 29:25) field REMAP_LANE23 of register PMC_ILAKEN_REG_REMAP_LANE_23_18 index N=0..1 */
    ilkn_reg_REMAP_LANE_23_18_array_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               N,
                                               ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE23_MSK,
                                               ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE23_OFF,
                                               value);
}

static INLINE UINT32 ilkn_field_REMAP_LANE23_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_REMAP_LANE23_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE23_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE23_get", N, 1);
    /* ((0x0000555c + (N) * 0x200) bits 29:25) field REMAP_LANE23 of register PMC_ILAKEN_REG_REMAP_LANE_23_18 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_23_18_array_read( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N);
    value = (reg_value & ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE23_MSK) >> ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE23_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE23_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_REMAP_LANE23_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_REMAP_LANE23_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE23_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE23_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE23_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE23_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE23_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000555c + (N) * 0x200) bits 29:25) field REMAP_LANE23 of register PMC_ILAKEN_REG_REMAP_LANE_23_18 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000555c + (N) * 0x200) bits 29:25) field REMAP_LANE23 of register PMC_ILAKEN_REG_REMAP_LANE_23_18 index N=0..1 */
        ilkn_reg_REMAP_LANE_23_18_array_field_set( b_ptr,
                                                   h_ptr,
                                                   A,
                                                   N,
                                                   subfield_mask << (ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE23_OFF + subfield_offset),
                                                   ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE23_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_REMAP_LANE23_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_REMAP_LANE23_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE23_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE23_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE23_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE23_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000555c + (N) * 0x200) bits 29:25) field REMAP_LANE23 of register PMC_ILAKEN_REG_REMAP_LANE_23_18 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_23_18_array_read( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N);
    field_value = (reg_value & ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE23_MSK)
                  >> ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE23_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE23_MSK, ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE23_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE23_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_REMAP_LANE22_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_REMAP_LANE22_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE22_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE22_set", N, 1);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_REMAP_LANE22_set", value, 31);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE22_set", A, N, value );

    /* ((0x0000555c + (N) * 0x200) bits 24:20) field REMAP_LANE22 of register PMC_ILAKEN_REG_REMAP_LANE_23_18 index N=0..1 */
    ilkn_reg_REMAP_LANE_23_18_array_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               N,
                                               ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE22_MSK,
                                               ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE22_OFF,
                                               value);
}

static INLINE UINT32 ilkn_field_REMAP_LANE22_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_REMAP_LANE22_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE22_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE22_get", N, 1);
    /* ((0x0000555c + (N) * 0x200) bits 24:20) field REMAP_LANE22 of register PMC_ILAKEN_REG_REMAP_LANE_23_18 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_23_18_array_read( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N);
    value = (reg_value & ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE22_MSK) >> ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE22_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE22_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_REMAP_LANE22_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_REMAP_LANE22_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE22_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE22_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE22_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE22_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE22_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000555c + (N) * 0x200) bits 24:20) field REMAP_LANE22 of register PMC_ILAKEN_REG_REMAP_LANE_23_18 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000555c + (N) * 0x200) bits 24:20) field REMAP_LANE22 of register PMC_ILAKEN_REG_REMAP_LANE_23_18 index N=0..1 */
        ilkn_reg_REMAP_LANE_23_18_array_field_set( b_ptr,
                                                   h_ptr,
                                                   A,
                                                   N,
                                                   subfield_mask << (ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE22_OFF + subfield_offset),
                                                   ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE22_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_REMAP_LANE22_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_REMAP_LANE22_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE22_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE22_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE22_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE22_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000555c + (N) * 0x200) bits 24:20) field REMAP_LANE22 of register PMC_ILAKEN_REG_REMAP_LANE_23_18 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_23_18_array_read( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N);
    field_value = (reg_value & ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE22_MSK)
                  >> ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE22_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE22_MSK, ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE22_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE22_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_REMAP_LANE21_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_REMAP_LANE21_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE21_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE21_set", N, 1);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_REMAP_LANE21_set", value, 31);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE21_set", A, N, value );

    /* ((0x0000555c + (N) * 0x200) bits 19:15) field REMAP_LANE21 of register PMC_ILAKEN_REG_REMAP_LANE_23_18 index N=0..1 */
    ilkn_reg_REMAP_LANE_23_18_array_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               N,
                                               ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE21_MSK,
                                               ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE21_OFF,
                                               value);
}

static INLINE UINT32 ilkn_field_REMAP_LANE21_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_REMAP_LANE21_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE21_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE21_get", N, 1);
    /* ((0x0000555c + (N) * 0x200) bits 19:15) field REMAP_LANE21 of register PMC_ILAKEN_REG_REMAP_LANE_23_18 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_23_18_array_read( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N);
    value = (reg_value & ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE21_MSK) >> ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE21_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE21_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_REMAP_LANE21_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_REMAP_LANE21_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE21_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE21_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE21_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE21_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE21_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000555c + (N) * 0x200) bits 19:15) field REMAP_LANE21 of register PMC_ILAKEN_REG_REMAP_LANE_23_18 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000555c + (N) * 0x200) bits 19:15) field REMAP_LANE21 of register PMC_ILAKEN_REG_REMAP_LANE_23_18 index N=0..1 */
        ilkn_reg_REMAP_LANE_23_18_array_field_set( b_ptr,
                                                   h_ptr,
                                                   A,
                                                   N,
                                                   subfield_mask << (ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE21_OFF + subfield_offset),
                                                   ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE21_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_REMAP_LANE21_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_REMAP_LANE21_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE21_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE21_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE21_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE21_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000555c + (N) * 0x200) bits 19:15) field REMAP_LANE21 of register PMC_ILAKEN_REG_REMAP_LANE_23_18 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_23_18_array_read( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N);
    field_value = (reg_value & ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE21_MSK)
                  >> ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE21_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE21_MSK, ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE21_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE21_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_REMAP_LANE20_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_REMAP_LANE20_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE20_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE20_set", N, 1);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_REMAP_LANE20_set", value, 31);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE20_set", A, N, value );

    /* ((0x0000555c + (N) * 0x200) bits 14:10) field REMAP_LANE20 of register PMC_ILAKEN_REG_REMAP_LANE_23_18 index N=0..1 */
    ilkn_reg_REMAP_LANE_23_18_array_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               N,
                                               ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE20_MSK,
                                               ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE20_OFF,
                                               value);
}

static INLINE UINT32 ilkn_field_REMAP_LANE20_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_REMAP_LANE20_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE20_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE20_get", N, 1);
    /* ((0x0000555c + (N) * 0x200) bits 14:10) field REMAP_LANE20 of register PMC_ILAKEN_REG_REMAP_LANE_23_18 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_23_18_array_read( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N);
    value = (reg_value & ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE20_MSK) >> ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE20_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE20_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_REMAP_LANE20_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_REMAP_LANE20_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE20_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE20_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE20_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE20_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE20_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000555c + (N) * 0x200) bits 14:10) field REMAP_LANE20 of register PMC_ILAKEN_REG_REMAP_LANE_23_18 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000555c + (N) * 0x200) bits 14:10) field REMAP_LANE20 of register PMC_ILAKEN_REG_REMAP_LANE_23_18 index N=0..1 */
        ilkn_reg_REMAP_LANE_23_18_array_field_set( b_ptr,
                                                   h_ptr,
                                                   A,
                                                   N,
                                                   subfield_mask << (ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE20_OFF + subfield_offset),
                                                   ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE20_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_REMAP_LANE20_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_REMAP_LANE20_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE20_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE20_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE20_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE20_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000555c + (N) * 0x200) bits 14:10) field REMAP_LANE20 of register PMC_ILAKEN_REG_REMAP_LANE_23_18 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_23_18_array_read( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N);
    field_value = (reg_value & ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE20_MSK)
                  >> ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE20_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE20_MSK, ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE20_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE20_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_REMAP_LANE19_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_REMAP_LANE19_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE19_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE19_set", N, 1);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_REMAP_LANE19_set", value, 31);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE19_set", A, N, value );

    /* ((0x0000555c + (N) * 0x200) bits 9:5) field REMAP_LANE19 of register PMC_ILAKEN_REG_REMAP_LANE_23_18 index N=0..1 */
    ilkn_reg_REMAP_LANE_23_18_array_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               N,
                                               ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE19_MSK,
                                               ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE19_OFF,
                                               value);
}

static INLINE UINT32 ilkn_field_REMAP_LANE19_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_REMAP_LANE19_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE19_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE19_get", N, 1);
    /* ((0x0000555c + (N) * 0x200) bits 9:5) field REMAP_LANE19 of register PMC_ILAKEN_REG_REMAP_LANE_23_18 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_23_18_array_read( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N);
    value = (reg_value & ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE19_MSK) >> ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE19_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE19_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_REMAP_LANE19_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_REMAP_LANE19_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE19_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE19_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE19_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE19_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE19_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000555c + (N) * 0x200) bits 9:5) field REMAP_LANE19 of register PMC_ILAKEN_REG_REMAP_LANE_23_18 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000555c + (N) * 0x200) bits 9:5) field REMAP_LANE19 of register PMC_ILAKEN_REG_REMAP_LANE_23_18 index N=0..1 */
        ilkn_reg_REMAP_LANE_23_18_array_field_set( b_ptr,
                                                   h_ptr,
                                                   A,
                                                   N,
                                                   subfield_mask << (ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE19_OFF + subfield_offset),
                                                   ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE19_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_REMAP_LANE19_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_REMAP_LANE19_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE19_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE19_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE19_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE19_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000555c + (N) * 0x200) bits 9:5) field REMAP_LANE19 of register PMC_ILAKEN_REG_REMAP_LANE_23_18 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_23_18_array_read( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N);
    field_value = (reg_value & ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE19_MSK)
                  >> ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE19_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE19_MSK, ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE19_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE19_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_REMAP_LANE18_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_REMAP_LANE18_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE18_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE18_set", N, 1);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_REMAP_LANE18_set", value, 31);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE18_set", A, N, value );

    /* ((0x0000555c + (N) * 0x200) bits 4:0) field REMAP_LANE18 of register PMC_ILAKEN_REG_REMAP_LANE_23_18 index N=0..1 */
    ilkn_reg_REMAP_LANE_23_18_array_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               N,
                                               ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE18_MSK,
                                               ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE18_OFF,
                                               value);
}

static INLINE UINT32 ilkn_field_REMAP_LANE18_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_REMAP_LANE18_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_REMAP_LANE18_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_REMAP_LANE18_get", N, 1);
    /* ((0x0000555c + (N) * 0x200) bits 4:0) field REMAP_LANE18 of register PMC_ILAKEN_REG_REMAP_LANE_23_18 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_23_18_array_read( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N);
    value = (reg_value & ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE18_MSK) >> ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE18_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_REMAP_LANE18_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_range_REMAP_LANE18_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_range_REMAP_LANE18_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE18_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE18_set", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE18_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE18_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE18_set", A, N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000555c + (N) * 0x200) bits 4:0) field REMAP_LANE18 of register PMC_ILAKEN_REG_REMAP_LANE_23_18 index N=0..1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000555c + (N) * 0x200) bits 4:0) field REMAP_LANE18 of register PMC_ILAKEN_REG_REMAP_LANE_23_18 index N=0..1 */
        ilkn_reg_REMAP_LANE_23_18_array_field_set( b_ptr,
                                                   h_ptr,
                                                   A,
                                                   N,
                                                   subfield_mask << (ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE18_OFF + subfield_offset),
                                                   ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE18_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 ilkn_field_range_REMAP_LANE18_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_REMAP_LANE18_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_REMAP_LANE18_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_REMAP_LANE18_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_REMAP_LANE18_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_REMAP_LANE18_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000555c + (N) * 0x200) bits 4:0) field REMAP_LANE18 of register PMC_ILAKEN_REG_REMAP_LANE_23_18 index N=0..1 */
    reg_value = ilkn_reg_REMAP_LANE_23_18_array_read( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N);
    field_value = (reg_value & ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE18_MSK)
                  >> ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE18_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE18_MSK, ILAKEN_REG_REMAP_LANE_23_18_BIT_REMAP_LANE18_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_REMAP_LANE18_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE void ilkn_field_FIFO_OVER_I_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_FIFO_OVER_I_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_FIFO_OVER_I_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_FIFO_OVER_I_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_FIFO_OVER_I_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_FIFO_OVER_I_set", A, N, value );

    /* ((0x00005580 + (N) * 0x8) bits 29) field FIFO_OVER_I of register PMC_ILAKEN_REG_TX_INT index N=0..1 */
    ilkn_reg_TX_INT_array_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     N,
                                     ILAKEN_REG_TX_INT_BIT_FIFO_OVER_I_MSK,
                                     ILAKEN_REG_TX_INT_BIT_FIFO_OVER_I_OFF,
                                     value);
}

static INLINE UINT32 ilkn_field_FIFO_OVER_I_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_FIFO_OVER_I_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_FIFO_OVER_I_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_FIFO_OVER_I_get", N, 1);
    /* ((0x00005580 + (N) * 0x8) bits 29) field FIFO_OVER_I of register PMC_ILAKEN_REG_TX_INT index N=0..1 */
    reg_value = ilkn_reg_TX_INT_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_TX_INT_BIT_FIFO_OVER_I_MSK) >> ILAKEN_REG_TX_INT_BIT_FIFO_OVER_I_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_FIFO_OVER_I_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_FIFO_UNDER_I_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_FIFO_UNDER_I_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_FIFO_UNDER_I_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_FIFO_UNDER_I_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_FIFO_UNDER_I_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_FIFO_UNDER_I_set", A, N, value );

    /* ((0x00005580 + (N) * 0x8) bits 28) field FIFO_UNDER_I of register PMC_ILAKEN_REG_TX_INT index N=0..1 */
    ilkn_reg_TX_INT_array_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     N,
                                     ILAKEN_REG_TX_INT_BIT_FIFO_UNDER_I_MSK,
                                     ILAKEN_REG_TX_INT_BIT_FIFO_UNDER_I_OFF,
                                     value);
}

static INLINE UINT32 ilkn_field_FIFO_UNDER_I_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_FIFO_UNDER_I_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_FIFO_UNDER_I_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_FIFO_UNDER_I_get", N, 1);
    /* ((0x00005580 + (N) * 0x8) bits 28) field FIFO_UNDER_I of register PMC_ILAKEN_REG_TX_INT index N=0..1 */
    reg_value = ilkn_reg_TX_INT_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_TX_INT_BIT_FIFO_UNDER_I_MSK) >> ILAKEN_REG_TX_INT_BIT_FIFO_UNDER_I_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_FIFO_UNDER_I_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_OOB_FC_ERR_I_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_OOB_FC_ERR_I_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_OOB_FC_ERR_I_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_OOB_FC_ERR_I_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_OOB_FC_ERR_I_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_OOB_FC_ERR_I_set", A, N, value );

    /* ((0x00005580 + (N) * 0x8) bits 17) field OOB_FC_ERR_I of register PMC_ILAKEN_REG_TX_INT index N=0..1 */
    ilkn_reg_TX_INT_array_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     N,
                                     ILAKEN_REG_TX_INT_BIT_OOB_FC_ERR_I_MSK,
                                     ILAKEN_REG_TX_INT_BIT_OOB_FC_ERR_I_OFF,
                                     value);
}

static INLINE UINT32 ilkn_field_OOB_FC_ERR_I_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_OOB_FC_ERR_I_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_OOB_FC_ERR_I_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_OOB_FC_ERR_I_get", N, 1);
    /* ((0x00005580 + (N) * 0x8) bits 17) field OOB_FC_ERR_I of register PMC_ILAKEN_REG_TX_INT index N=0..1 */
    reg_value = ilkn_reg_TX_INT_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_TX_INT_BIT_OOB_FC_ERR_I_MSK) >> ILAKEN_REG_TX_INT_BIT_OOB_FC_ERR_I_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_OOB_FC_ERR_I_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_TX_STATUS_MSG_CHANGE_I_set( ilkn_buffer_t *b_ptr,
                                                          sifd_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_TX_STATUS_MSG_CHANGE_I_set( ilkn_buffer_t *b_ptr,
                                                          sifd_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32  N,
                                                          UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_TX_STATUS_MSG_CHANGE_I_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_TX_STATUS_MSG_CHANGE_I_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_TX_STATUS_MSG_CHANGE_I_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_TX_STATUS_MSG_CHANGE_I_set", A, N, value );

    /* ((0x00005580 + (N) * 0x8) bits 16) field TX_STATUS_MSG_CHANGE_I of register PMC_ILAKEN_REG_TX_INT index N=0..1 */
    ilkn_reg_TX_INT_array_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     N,
                                     ILAKEN_REG_TX_INT_BIT_TX_STATUS_MSG_CHANGE_I_MSK,
                                     ILAKEN_REG_TX_INT_BIT_TX_STATUS_MSG_CHANGE_I_OFF,
                                     value);
}

static INLINE UINT32 ilkn_field_TX_STATUS_MSG_CHANGE_I_get( ilkn_buffer_t *b_ptr,
                                                            sifd_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_TX_STATUS_MSG_CHANGE_I_get( ilkn_buffer_t *b_ptr,
                                                            sifd_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_TX_STATUS_MSG_CHANGE_I_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_TX_STATUS_MSG_CHANGE_I_get", N, 1);
    /* ((0x00005580 + (N) * 0x8) bits 16) field TX_STATUS_MSG_CHANGE_I of register PMC_ILAKEN_REG_TX_INT index N=0..1 */
    reg_value = ilkn_reg_TX_INT_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_TX_INT_BIT_TX_STATUS_MSG_CHANGE_I_MSK) >> ILAKEN_REG_TX_INT_BIT_TX_STATUS_MSG_CHANGE_I_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_TX_STATUS_MSG_CHANGE_I_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_TX_FC_CNT_FILL_I_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_TX_FC_CNT_FILL_I_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_TX_FC_CNT_FILL_I_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_TX_FC_CNT_FILL_I_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_TX_FC_CNT_FILL_I_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_TX_FC_CNT_FILL_I_set", A, N, value );

    /* ((0x00005580 + (N) * 0x8) bits 1) field TX_FC_CNT_FILL_I of register PMC_ILAKEN_REG_TX_INT index N=0..1 */
    ilkn_reg_TX_INT_array_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     N,
                                     ILAKEN_REG_TX_INT_BIT_TX_FC_CNT_FILL_I_MSK,
                                     ILAKEN_REG_TX_INT_BIT_TX_FC_CNT_FILL_I_OFF,
                                     value);
}

static INLINE UINT32 ilkn_field_TX_FC_CNT_FILL_I_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_TX_FC_CNT_FILL_I_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_TX_FC_CNT_FILL_I_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_TX_FC_CNT_FILL_I_get", N, 1);
    /* ((0x00005580 + (N) * 0x8) bits 1) field TX_FC_CNT_FILL_I of register PMC_ILAKEN_REG_TX_INT index N=0..1 */
    reg_value = ilkn_reg_TX_INT_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_TX_INT_BIT_TX_FC_CNT_FILL_I_MSK) >> ILAKEN_REG_TX_INT_BIT_TX_FC_CNT_FILL_I_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_TX_FC_CNT_FILL_I_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_TX_CHAN_CNT_FILL_I_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_TX_CHAN_CNT_FILL_I_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_TX_CHAN_CNT_FILL_I_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_TX_CHAN_CNT_FILL_I_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_TX_CHAN_CNT_FILL_I_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_TX_CHAN_CNT_FILL_I_set", A, N, value );

    /* ((0x00005580 + (N) * 0x8) bits 0) field TX_CHAN_CNT_FILL_I of register PMC_ILAKEN_REG_TX_INT index N=0..1 */
    ilkn_reg_TX_INT_array_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     N,
                                     ILAKEN_REG_TX_INT_BIT_TX_CHAN_CNT_FILL_I_MSK,
                                     ILAKEN_REG_TX_INT_BIT_TX_CHAN_CNT_FILL_I_OFF,
                                     value);
}

static INLINE UINT32 ilkn_field_TX_CHAN_CNT_FILL_I_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_TX_CHAN_CNT_FILL_I_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_TX_CHAN_CNT_FILL_I_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_TX_CHAN_CNT_FILL_I_get", N, 1);
    /* ((0x00005580 + (N) * 0x8) bits 0) field TX_CHAN_CNT_FILL_I of register PMC_ILAKEN_REG_TX_INT index N=0..1 */
    reg_value = ilkn_reg_TX_INT_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_TX_INT_BIT_TX_CHAN_CNT_FILL_I_MSK) >> ILAKEN_REG_TX_INT_BIT_TX_CHAN_CNT_FILL_I_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_TX_CHAN_CNT_FILL_I_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_FIFO_OVER_M_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_FIFO_OVER_M_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_FIFO_OVER_M_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_FIFO_OVER_M_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_FIFO_OVER_M_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_FIFO_OVER_M_set", A, N, value );

    /* ((0x00005584 + (N) * 0x8) bits 29) field FIFO_OVER_M of register PMC_ILAKEN_REG_TX_INT_MASK index N=0..1 */
    ilkn_reg_TX_INT_MASK_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_TX_INT_MASK_BIT_FIFO_OVER_M_MSK,
                                          ILAKEN_REG_TX_INT_MASK_BIT_FIFO_OVER_M_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_FIFO_OVER_M_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_FIFO_OVER_M_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_FIFO_OVER_M_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_FIFO_OVER_M_get", N, 1);
    /* ((0x00005584 + (N) * 0x8) bits 29) field FIFO_OVER_M of register PMC_ILAKEN_REG_TX_INT_MASK index N=0..1 */
    reg_value = ilkn_reg_TX_INT_MASK_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_TX_INT_MASK_BIT_FIFO_OVER_M_MSK) >> ILAKEN_REG_TX_INT_MASK_BIT_FIFO_OVER_M_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_FIFO_OVER_M_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_FIFO_UNDER_M_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_FIFO_UNDER_M_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_FIFO_UNDER_M_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_FIFO_UNDER_M_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_FIFO_UNDER_M_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_FIFO_UNDER_M_set", A, N, value );

    /* ((0x00005584 + (N) * 0x8) bits 28) field FIFO_UNDER_M of register PMC_ILAKEN_REG_TX_INT_MASK index N=0..1 */
    ilkn_reg_TX_INT_MASK_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_TX_INT_MASK_BIT_FIFO_UNDER_M_MSK,
                                          ILAKEN_REG_TX_INT_MASK_BIT_FIFO_UNDER_M_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_FIFO_UNDER_M_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_FIFO_UNDER_M_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_FIFO_UNDER_M_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_FIFO_UNDER_M_get", N, 1);
    /* ((0x00005584 + (N) * 0x8) bits 28) field FIFO_UNDER_M of register PMC_ILAKEN_REG_TX_INT_MASK index N=0..1 */
    reg_value = ilkn_reg_TX_INT_MASK_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_TX_INT_MASK_BIT_FIFO_UNDER_M_MSK) >> ILAKEN_REG_TX_INT_MASK_BIT_FIFO_UNDER_M_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_FIFO_UNDER_M_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_OOB_FC_ERR_M_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_OOB_FC_ERR_M_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_OOB_FC_ERR_M_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_OOB_FC_ERR_M_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_OOB_FC_ERR_M_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_OOB_FC_ERR_M_set", A, N, value );

    /* ((0x00005584 + (N) * 0x8) bits 17) field OOB_FC_ERR_M of register PMC_ILAKEN_REG_TX_INT_MASK index N=0..1 */
    ilkn_reg_TX_INT_MASK_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_TX_INT_MASK_BIT_OOB_FC_ERR_M_MSK,
                                          ILAKEN_REG_TX_INT_MASK_BIT_OOB_FC_ERR_M_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_OOB_FC_ERR_M_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_OOB_FC_ERR_M_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_OOB_FC_ERR_M_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_OOB_FC_ERR_M_get", N, 1);
    /* ((0x00005584 + (N) * 0x8) bits 17) field OOB_FC_ERR_M of register PMC_ILAKEN_REG_TX_INT_MASK index N=0..1 */
    reg_value = ilkn_reg_TX_INT_MASK_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_TX_INT_MASK_BIT_OOB_FC_ERR_M_MSK) >> ILAKEN_REG_TX_INT_MASK_BIT_OOB_FC_ERR_M_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_OOB_FC_ERR_M_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_TX_STATUS_MSG_CHANGE_M_set( ilkn_buffer_t *b_ptr,
                                                          sifd_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_TX_STATUS_MSG_CHANGE_M_set( ilkn_buffer_t *b_ptr,
                                                          sifd_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32  N,
                                                          UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_TX_STATUS_MSG_CHANGE_M_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_TX_STATUS_MSG_CHANGE_M_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_TX_STATUS_MSG_CHANGE_M_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_TX_STATUS_MSG_CHANGE_M_set", A, N, value );

    /* ((0x00005584 + (N) * 0x8) bits 16) field TX_STATUS_MSG_CHANGE_M of register PMC_ILAKEN_REG_TX_INT_MASK index N=0..1 */
    ilkn_reg_TX_INT_MASK_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_TX_INT_MASK_BIT_TX_STATUS_MSG_CHANGE_M_MSK,
                                          ILAKEN_REG_TX_INT_MASK_BIT_TX_STATUS_MSG_CHANGE_M_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_TX_STATUS_MSG_CHANGE_M_get( ilkn_buffer_t *b_ptr,
                                                            sifd_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_TX_STATUS_MSG_CHANGE_M_get( ilkn_buffer_t *b_ptr,
                                                            sifd_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_TX_STATUS_MSG_CHANGE_M_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_TX_STATUS_MSG_CHANGE_M_get", N, 1);
    /* ((0x00005584 + (N) * 0x8) bits 16) field TX_STATUS_MSG_CHANGE_M of register PMC_ILAKEN_REG_TX_INT_MASK index N=0..1 */
    reg_value = ilkn_reg_TX_INT_MASK_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_TX_INT_MASK_BIT_TX_STATUS_MSG_CHANGE_M_MSK) >> ILAKEN_REG_TX_INT_MASK_BIT_TX_STATUS_MSG_CHANGE_M_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_TX_STATUS_MSG_CHANGE_M_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_TX_FC_CNT_FILL_M_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_TX_FC_CNT_FILL_M_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_TX_FC_CNT_FILL_M_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_TX_FC_CNT_FILL_M_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_TX_FC_CNT_FILL_M_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_TX_FC_CNT_FILL_M_set", A, N, value );

    /* ((0x00005584 + (N) * 0x8) bits 1) field TX_FC_CNT_FILL_M of register PMC_ILAKEN_REG_TX_INT_MASK index N=0..1 */
    ilkn_reg_TX_INT_MASK_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_TX_INT_MASK_BIT_TX_FC_CNT_FILL_M_MSK,
                                          ILAKEN_REG_TX_INT_MASK_BIT_TX_FC_CNT_FILL_M_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_TX_FC_CNT_FILL_M_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_TX_FC_CNT_FILL_M_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_TX_FC_CNT_FILL_M_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_TX_FC_CNT_FILL_M_get", N, 1);
    /* ((0x00005584 + (N) * 0x8) bits 1) field TX_FC_CNT_FILL_M of register PMC_ILAKEN_REG_TX_INT_MASK index N=0..1 */
    reg_value = ilkn_reg_TX_INT_MASK_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_TX_INT_MASK_BIT_TX_FC_CNT_FILL_M_MSK) >> ILAKEN_REG_TX_INT_MASK_BIT_TX_FC_CNT_FILL_M_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_TX_FC_CNT_FILL_M_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_TX_CHAN_CNT_FILL_M_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_TX_CHAN_CNT_FILL_M_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_TX_CHAN_CNT_FILL_M_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_TX_CHAN_CNT_FILL_M_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_TX_CHAN_CNT_FILL_M_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_TX_CHAN_CNT_FILL_M_set", A, N, value );

    /* ((0x00005584 + (N) * 0x8) bits 0) field TX_CHAN_CNT_FILL_M of register PMC_ILAKEN_REG_TX_INT_MASK index N=0..1 */
    ilkn_reg_TX_INT_MASK_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_TX_INT_MASK_BIT_TX_CHAN_CNT_FILL_M_MSK,
                                          ILAKEN_REG_TX_INT_MASK_BIT_TX_CHAN_CNT_FILL_M_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_TX_CHAN_CNT_FILL_M_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_TX_CHAN_CNT_FILL_M_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_TX_CHAN_CNT_FILL_M_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_TX_CHAN_CNT_FILL_M_get", N, 1);
    /* ((0x00005584 + (N) * 0x8) bits 0) field TX_CHAN_CNT_FILL_M of register PMC_ILAKEN_REG_TX_INT_MASK index N=0..1 */
    reg_value = ilkn_reg_TX_INT_MASK_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_TX_INT_MASK_BIT_TX_CHAN_CNT_FILL_M_MSK) >> ILAKEN_REG_TX_INT_MASK_BIT_TX_CHAN_CNT_FILL_M_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_TX_CHAN_CNT_FILL_M_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_CTLBIT_ERR_I_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_CTLBIT_ERR_I_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CTLBIT_ERR_I_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CTLBIT_ERR_I_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_CTLBIT_ERR_I_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_CTLBIT_ERR_I_set", A, N, value );

    /* ((0x00005780 + (N) * 0x8) bits 31) field CTLBIT_ERR_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    ilkn_reg_RX_INT_array_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     N,
                                     ILAKEN_REG_RX_INT_BIT_CTLBIT_ERR_I_MSK,
                                     ILAKEN_REG_RX_INT_BIT_CTLBIT_ERR_I_OFF,
                                     value);
}

static INLINE UINT32 ilkn_field_CTLBIT_ERR_I_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_CTLBIT_ERR_I_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CTLBIT_ERR_I_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CTLBIT_ERR_I_get", N, 1);
    /* ((0x00005780 + (N) * 0x8) bits 31) field CTLBIT_ERR_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    reg_value = ilkn_reg_RX_INT_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_RX_INT_BIT_CTLBIT_ERR_I_MSK) >> ILAKEN_REG_RX_INT_BIT_CTLBIT_ERR_I_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_CTLBIT_ERR_I_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_MF_ERR_I_set( ilkn_buffer_t *b_ptr,
                                            sifd_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32  N,
                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_MF_ERR_I_set( ilkn_buffer_t *b_ptr,
                                            sifd_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32  N,
                                            UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_MF_ERR_I_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_MF_ERR_I_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_MF_ERR_I_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_MF_ERR_I_set", A, N, value );

    /* ((0x00005780 + (N) * 0x8) bits 29) field MF_ERR_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    ilkn_reg_RX_INT_array_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     N,
                                     ILAKEN_REG_RX_INT_BIT_MF_ERR_I_MSK,
                                     ILAKEN_REG_RX_INT_BIT_MF_ERR_I_OFF,
                                     value);
}

static INLINE UINT32 ilkn_field_MF_ERR_I_get( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_MF_ERR_I_get( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_MF_ERR_I_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_MF_ERR_I_get", N, 1);
    /* ((0x00005780 + (N) * 0x8) bits 29) field MF_ERR_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    reg_value = ilkn_reg_RX_INT_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_RX_INT_BIT_MF_ERR_I_MSK) >> ILAKEN_REG_RX_INT_BIT_MF_ERR_I_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_MF_ERR_I_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_BADCTL_ERR_I_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_BADCTL_ERR_I_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BADCTL_ERR_I_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BADCTL_ERR_I_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_BADCTL_ERR_I_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_BADCTL_ERR_I_set", A, N, value );

    /* ((0x00005780 + (N) * 0x8) bits 28) field BADCTL_ERR_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    ilkn_reg_RX_INT_array_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     N,
                                     ILAKEN_REG_RX_INT_BIT_BADCTL_ERR_I_MSK,
                                     ILAKEN_REG_RX_INT_BIT_BADCTL_ERR_I_OFF,
                                     value);
}

static INLINE UINT32 ilkn_field_BADCTL_ERR_I_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_BADCTL_ERR_I_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BADCTL_ERR_I_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BADCTL_ERR_I_get", N, 1);
    /* ((0x00005780 + (N) * 0x8) bits 28) field BADCTL_ERR_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    reg_value = ilkn_reg_RX_INT_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_RX_INT_BIT_BADCTL_ERR_I_MSK) >> ILAKEN_REG_RX_INT_BIT_BADCTL_ERR_I_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_BADCTL_ERR_I_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_SCRAM_ERR_I_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_SCRAM_ERR_I_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_SCRAM_ERR_I_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_SCRAM_ERR_I_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_SCRAM_ERR_I_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_SCRAM_ERR_I_set", A, N, value );

    /* ((0x00005780 + (N) * 0x8) bits 27) field SCRAM_ERR_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    ilkn_reg_RX_INT_array_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     N,
                                     ILAKEN_REG_RX_INT_BIT_SCRAM_ERR_I_MSK,
                                     ILAKEN_REG_RX_INT_BIT_SCRAM_ERR_I_OFF,
                                     value);
}

static INLINE UINT32 ilkn_field_SCRAM_ERR_I_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_SCRAM_ERR_I_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_SCRAM_ERR_I_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_SCRAM_ERR_I_get", N, 1);
    /* ((0x00005780 + (N) * 0x8) bits 27) field SCRAM_ERR_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    reg_value = ilkn_reg_RX_INT_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_RX_INT_BIT_SCRAM_ERR_I_MSK) >> ILAKEN_REG_RX_INT_BIT_SCRAM_ERR_I_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_SCRAM_ERR_I_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_CRC32_ERR_I_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_CRC32_ERR_I_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CRC32_ERR_I_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CRC32_ERR_I_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_CRC32_ERR_I_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_CRC32_ERR_I_set", A, N, value );

    /* ((0x00005780 + (N) * 0x8) bits 26) field CRC32_ERR_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    ilkn_reg_RX_INT_array_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     N,
                                     ILAKEN_REG_RX_INT_BIT_CRC32_ERR_I_MSK,
                                     ILAKEN_REG_RX_INT_BIT_CRC32_ERR_I_OFF,
                                     value);
}

static INLINE UINT32 ilkn_field_CRC32_ERR_I_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_CRC32_ERR_I_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CRC32_ERR_I_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CRC32_ERR_I_get", N, 1);
    /* ((0x00005780 + (N) * 0x8) bits 26) field CRC32_ERR_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    reg_value = ilkn_reg_RX_INT_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_RX_INT_BIT_CRC32_ERR_I_MSK) >> ILAKEN_REG_RX_INT_BIT_CRC32_ERR_I_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_CRC32_ERR_I_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_CDR_ERR_I_set( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32  N,
                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_CDR_ERR_I_set( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32  N,
                                             UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CDR_ERR_I_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CDR_ERR_I_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_CDR_ERR_I_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_CDR_ERR_I_set", A, N, value );

    /* ((0x00005780 + (N) * 0x8) bits 25) field CDR_ERR_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    ilkn_reg_RX_INT_array_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     N,
                                     ILAKEN_REG_RX_INT_BIT_CDR_ERR_I_MSK,
                                     ILAKEN_REG_RX_INT_BIT_CDR_ERR_I_OFF,
                                     value);
}

static INLINE UINT32 ilkn_field_CDR_ERR_I_get( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_CDR_ERR_I_get( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CDR_ERR_I_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CDR_ERR_I_get", N, 1);
    /* ((0x00005780 + (N) * 0x8) bits 25) field CDR_ERR_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    reg_value = ilkn_reg_RX_INT_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_RX_INT_BIT_CDR_ERR_I_MSK) >> ILAKEN_REG_RX_INT_BIT_CDR_ERR_I_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_CDR_ERR_I_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_WRD_SYNC_CHANGE_I_set( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_WRD_SYNC_CHANGE_I_set( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_WRD_SYNC_CHANGE_I_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_WRD_SYNC_CHANGE_I_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_WRD_SYNC_CHANGE_I_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_WRD_SYNC_CHANGE_I_set", A, N, value );

    /* ((0x00005780 + (N) * 0x8) bits 24) field WRD_SYNC_CHANGE_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    ilkn_reg_RX_INT_array_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     N,
                                     ILAKEN_REG_RX_INT_BIT_WRD_SYNC_CHANGE_I_MSK,
                                     ILAKEN_REG_RX_INT_BIT_WRD_SYNC_CHANGE_I_OFF,
                                     value);
}

static INLINE UINT32 ilkn_field_WRD_SYNC_CHANGE_I_get( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_WRD_SYNC_CHANGE_I_get( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_WRD_SYNC_CHANGE_I_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_WRD_SYNC_CHANGE_I_get", N, 1);
    /* ((0x00005780 + (N) * 0x8) bits 24) field WRD_SYNC_CHANGE_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    reg_value = ilkn_reg_RX_INT_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_RX_INT_BIT_WRD_SYNC_CHANGE_I_MSK) >> ILAKEN_REG_RX_INT_BIT_WRD_SYNC_CHANGE_I_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_WRD_SYNC_CHANGE_I_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_ALIGN_CHANGE_I_set( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_ALIGN_CHANGE_I_set( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_ALIGN_CHANGE_I_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_ALIGN_CHANGE_I_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_ALIGN_CHANGE_I_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_ALIGN_CHANGE_I_set", A, N, value );

    /* ((0x00005780 + (N) * 0x8) bits 23) field ALIGN_CHANGE_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    ilkn_reg_RX_INT_array_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     N,
                                     ILAKEN_REG_RX_INT_BIT_ALIGN_CHANGE_I_MSK,
                                     ILAKEN_REG_RX_INT_BIT_ALIGN_CHANGE_I_OFF,
                                     value);
}

static INLINE UINT32 ilkn_field_ALIGN_CHANGE_I_get( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_ALIGN_CHANGE_I_get( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_ALIGN_CHANGE_I_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_ALIGN_CHANGE_I_get", N, 1);
    /* ((0x00005780 + (N) * 0x8) bits 23) field ALIGN_CHANGE_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    reg_value = ilkn_reg_RX_INT_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_RX_INT_BIT_ALIGN_CHANGE_I_MSK) >> ILAKEN_REG_RX_INT_BIT_ALIGN_CHANGE_I_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_ALIGN_CHANGE_I_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_ALIGN_ERR_I_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_ALIGN_ERR_I_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_ALIGN_ERR_I_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_ALIGN_ERR_I_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_ALIGN_ERR_I_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_ALIGN_ERR_I_set", A, N, value );

    /* ((0x00005780 + (N) * 0x8) bits 22) field ALIGN_ERR_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    ilkn_reg_RX_INT_array_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     N,
                                     ILAKEN_REG_RX_INT_BIT_ALIGN_ERR_I_MSK,
                                     ILAKEN_REG_RX_INT_BIT_ALIGN_ERR_I_OFF,
                                     value);
}

static INLINE UINT32 ilkn_field_ALIGN_ERR_I_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_ALIGN_ERR_I_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_ALIGN_ERR_I_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_ALIGN_ERR_I_get", N, 1);
    /* ((0x00005780 + (N) * 0x8) bits 22) field ALIGN_ERR_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    reg_value = ilkn_reg_RX_INT_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_RX_INT_BIT_ALIGN_ERR_I_MSK) >> ILAKEN_REG_RX_INT_BIT_ALIGN_ERR_I_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_ALIGN_ERR_I_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_BURST_ERR_I_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_BURST_ERR_I_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BURST_ERR_I_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BURST_ERR_I_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_BURST_ERR_I_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_BURST_ERR_I_set", A, N, value );

    /* ((0x00005780 + (N) * 0x8) bits 21) field BURST_ERR_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    ilkn_reg_RX_INT_array_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     N,
                                     ILAKEN_REG_RX_INT_BIT_BURST_ERR_I_MSK,
                                     ILAKEN_REG_RX_INT_BIT_BURST_ERR_I_OFF,
                                     value);
}

static INLINE UINT32 ilkn_field_BURST_ERR_I_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_BURST_ERR_I_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BURST_ERR_I_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BURST_ERR_I_get", N, 1);
    /* ((0x00005780 + (N) * 0x8) bits 21) field BURST_ERR_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    reg_value = ilkn_reg_RX_INT_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_RX_INT_BIT_BURST_ERR_I_MSK) >> ILAKEN_REG_RX_INT_BIT_BURST_ERR_I_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_BURST_ERR_I_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_BMIN_ERR_I_set( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_BMIN_ERR_I_set( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N,
                                              UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BMIN_ERR_I_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BMIN_ERR_I_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_BMIN_ERR_I_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_BMIN_ERR_I_set", A, N, value );

    /* ((0x00005780 + (N) * 0x8) bits 20) field BMIN_ERR_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    ilkn_reg_RX_INT_array_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     N,
                                     ILAKEN_REG_RX_INT_BIT_BMIN_ERR_I_MSK,
                                     ILAKEN_REG_RX_INT_BIT_BMIN_ERR_I_OFF,
                                     value);
}

static INLINE UINT32 ilkn_field_BMIN_ERR_I_get( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_BMIN_ERR_I_get( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BMIN_ERR_I_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BMIN_ERR_I_get", N, 1);
    /* ((0x00005780 + (N) * 0x8) bits 20) field BMIN_ERR_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    reg_value = ilkn_reg_RX_INT_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_RX_INT_BIT_BMIN_ERR_I_MSK) >> ILAKEN_REG_RX_INT_BIT_BMIN_ERR_I_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_BMIN_ERR_I_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_BMAX_ERR_I_set( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_BMAX_ERR_I_set( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N,
                                              UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BMAX_ERR_I_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BMAX_ERR_I_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_BMAX_ERR_I_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_BMAX_ERR_I_set", A, N, value );

    /* ((0x00005780 + (N) * 0x8) bits 19) field BMAX_ERR_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    ilkn_reg_RX_INT_array_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     N,
                                     ILAKEN_REG_RX_INT_BIT_BMAX_ERR_I_MSK,
                                     ILAKEN_REG_RX_INT_BIT_BMAX_ERR_I_OFF,
                                     value);
}

static INLINE UINT32 ilkn_field_BMAX_ERR_I_get( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_BMAX_ERR_I_get( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BMAX_ERR_I_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BMAX_ERR_I_get", N, 1);
    /* ((0x00005780 + (N) * 0x8) bits 19) field BMAX_ERR_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    reg_value = ilkn_reg_RX_INT_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_RX_INT_BIT_BMAX_ERR_I_MSK) >> ILAKEN_REG_RX_INT_BIT_BMAX_ERR_I_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_BMAX_ERR_I_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_CRC24_ERR_I_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_CRC24_ERR_I_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CRC24_ERR_I_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CRC24_ERR_I_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_CRC24_ERR_I_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_CRC24_ERR_I_set", A, N, value );

    /* ((0x00005780 + (N) * 0x8) bits 18) field CRC24_ERR_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    ilkn_reg_RX_INT_array_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     N,
                                     ILAKEN_REG_RX_INT_BIT_CRC24_ERR_I_MSK,
                                     ILAKEN_REG_RX_INT_BIT_CRC24_ERR_I_OFF,
                                     value);
}

static INLINE UINT32 ilkn_field_CRC24_ERR_I_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_CRC24_ERR_I_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CRC24_ERR_I_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CRC24_ERR_I_get", N, 1);
    /* ((0x00005780 + (N) * 0x8) bits 18) field CRC24_ERR_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    reg_value = ilkn_reg_RX_INT_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_RX_INT_BIT_CRC24_ERR_I_MSK) >> ILAKEN_REG_RX_INT_BIT_CRC24_ERR_I_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_CRC24_ERR_I_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_IB_FC_ERR_I_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_IB_FC_ERR_I_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_IB_FC_ERR_I_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_IB_FC_ERR_I_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_IB_FC_ERR_I_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_IB_FC_ERR_I_set", A, N, value );

    /* ((0x00005780 + (N) * 0x8) bits 17) field IB_FC_ERR_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    ilkn_reg_RX_INT_array_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     N,
                                     ILAKEN_REG_RX_INT_BIT_IB_FC_ERR_I_MSK,
                                     ILAKEN_REG_RX_INT_BIT_IB_FC_ERR_I_OFF,
                                     value);
}

static INLINE UINT32 ilkn_field_IB_FC_ERR_I_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_IB_FC_ERR_I_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_IB_FC_ERR_I_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_IB_FC_ERR_I_get", N, 1);
    /* ((0x00005780 + (N) * 0x8) bits 17) field IB_FC_ERR_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    reg_value = ilkn_reg_RX_INT_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_RX_INT_BIT_IB_FC_ERR_I_MSK) >> ILAKEN_REG_RX_INT_BIT_IB_FC_ERR_I_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_IB_FC_ERR_I_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_RX_STATUS_MSG_CHANGE_I_set( ilkn_buffer_t *b_ptr,
                                                          sifd_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_RX_STATUS_MSG_CHANGE_I_set( ilkn_buffer_t *b_ptr,
                                                          sifd_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32  N,
                                                          UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_STATUS_MSG_CHANGE_I_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_RX_STATUS_MSG_CHANGE_I_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_RX_STATUS_MSG_CHANGE_I_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_RX_STATUS_MSG_CHANGE_I_set", A, N, value );

    /* ((0x00005780 + (N) * 0x8) bits 16) field RX_STATUS_MSG_CHANGE_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    ilkn_reg_RX_INT_array_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     N,
                                     ILAKEN_REG_RX_INT_BIT_RX_STATUS_MSG_CHANGE_I_MSK,
                                     ILAKEN_REG_RX_INT_BIT_RX_STATUS_MSG_CHANGE_I_OFF,
                                     value);
}

static INLINE UINT32 ilkn_field_RX_STATUS_MSG_CHANGE_I_get( ilkn_buffer_t *b_ptr,
                                                            sifd_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RX_STATUS_MSG_CHANGE_I_get( ilkn_buffer_t *b_ptr,
                                                            sifd_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_STATUS_MSG_CHANGE_I_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_RX_STATUS_MSG_CHANGE_I_get", N, 1);
    /* ((0x00005780 + (N) * 0x8) bits 16) field RX_STATUS_MSG_CHANGE_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    reg_value = ilkn_reg_RX_INT_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_RX_INT_BIT_RX_STATUS_MSG_CHANGE_I_MSK) >> ILAKEN_REG_RX_INT_BIT_RX_STATUS_MSG_CHANGE_I_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_RX_STATUS_MSG_CHANGE_I_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_BADCTL_CNT_FILL_I_set( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_BADCTL_CNT_FILL_I_set( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BADCTL_CNT_FILL_I_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BADCTL_CNT_FILL_I_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_BADCTL_CNT_FILL_I_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_BADCTL_CNT_FILL_I_set", A, N, value );

    /* ((0x00005780 + (N) * 0x8) bits 13) field BADCTL_CNT_FILL_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    ilkn_reg_RX_INT_array_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     N,
                                     ILAKEN_REG_RX_INT_BIT_BADCTL_CNT_FILL_I_MSK,
                                     ILAKEN_REG_RX_INT_BIT_BADCTL_CNT_FILL_I_OFF,
                                     value);
}

static INLINE UINT32 ilkn_field_BADCTL_CNT_FILL_I_get( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_BADCTL_CNT_FILL_I_get( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BADCTL_CNT_FILL_I_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BADCTL_CNT_FILL_I_get", N, 1);
    /* ((0x00005780 + (N) * 0x8) bits 13) field BADCTL_CNT_FILL_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    reg_value = ilkn_reg_RX_INT_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_RX_INT_BIT_BADCTL_CNT_FILL_I_MSK) >> ILAKEN_REG_RX_INT_BIT_BADCTL_CNT_FILL_I_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_BADCTL_CNT_FILL_I_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_CRC32_CNT_FILL_I_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_CRC32_CNT_FILL_I_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CRC32_CNT_FILL_I_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CRC32_CNT_FILL_I_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_CRC32_CNT_FILL_I_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_CRC32_CNT_FILL_I_set", A, N, value );

    /* ((0x00005780 + (N) * 0x8) bits 10) field CRC32_CNT_FILL_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    ilkn_reg_RX_INT_array_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     N,
                                     ILAKEN_REG_RX_INT_BIT_CRC32_CNT_FILL_I_MSK,
                                     ILAKEN_REG_RX_INT_BIT_CRC32_CNT_FILL_I_OFF,
                                     value);
}

static INLINE UINT32 ilkn_field_CRC32_CNT_FILL_I_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_CRC32_CNT_FILL_I_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CRC32_CNT_FILL_I_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CRC32_CNT_FILL_I_get", N, 1);
    /* ((0x00005780 + (N) * 0x8) bits 10) field CRC32_CNT_FILL_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    reg_value = ilkn_reg_RX_INT_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_RX_INT_BIT_CRC32_CNT_FILL_I_MSK) >> ILAKEN_REG_RX_INT_BIT_CRC32_CNT_FILL_I_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_CRC32_CNT_FILL_I_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_CDR_CNT_FILL_I_set( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_CDR_CNT_FILL_I_set( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CDR_CNT_FILL_I_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CDR_CNT_FILL_I_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_CDR_CNT_FILL_I_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_CDR_CNT_FILL_I_set", A, N, value );

    /* ((0x00005780 + (N) * 0x8) bits 9) field CDR_CNT_FILL_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    ilkn_reg_RX_INT_array_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     N,
                                     ILAKEN_REG_RX_INT_BIT_CDR_CNT_FILL_I_MSK,
                                     ILAKEN_REG_RX_INT_BIT_CDR_CNT_FILL_I_OFF,
                                     value);
}

static INLINE UINT32 ilkn_field_CDR_CNT_FILL_I_get( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_CDR_CNT_FILL_I_get( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CDR_CNT_FILL_I_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CDR_CNT_FILL_I_get", N, 1);
    /* ((0x00005780 + (N) * 0x8) bits 9) field CDR_CNT_FILL_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    reg_value = ilkn_reg_RX_INT_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_RX_INT_BIT_CDR_CNT_FILL_I_MSK) >> ILAKEN_REG_RX_INT_BIT_CDR_CNT_FILL_I_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_CDR_CNT_FILL_I_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_WRD_SYNC_CNT_FILL_I_set( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_WRD_SYNC_CNT_FILL_I_set( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_WRD_SYNC_CNT_FILL_I_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_WRD_SYNC_CNT_FILL_I_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_WRD_SYNC_CNT_FILL_I_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_WRD_SYNC_CNT_FILL_I_set", A, N, value );

    /* ((0x00005780 + (N) * 0x8) bits 8) field WRD_SYNC_CNT_FILL_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    ilkn_reg_RX_INT_array_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     N,
                                     ILAKEN_REG_RX_INT_BIT_WRD_SYNC_CNT_FILL_I_MSK,
                                     ILAKEN_REG_RX_INT_BIT_WRD_SYNC_CNT_FILL_I_OFF,
                                     value);
}

static INLINE UINT32 ilkn_field_WRD_SYNC_CNT_FILL_I_get( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_WRD_SYNC_CNT_FILL_I_get( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_WRD_SYNC_CNT_FILL_I_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_WRD_SYNC_CNT_FILL_I_get", N, 1);
    /* ((0x00005780 + (N) * 0x8) bits 8) field WRD_SYNC_CNT_FILL_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    reg_value = ilkn_reg_RX_INT_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_RX_INT_BIT_WRD_SYNC_CNT_FILL_I_MSK) >> ILAKEN_REG_RX_INT_BIT_WRD_SYNC_CNT_FILL_I_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_WRD_SYNC_CNT_FILL_I_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_ALIGN_FAIL_CNT_FILL_I_set( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32  N,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_ALIGN_FAIL_CNT_FILL_I_set( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32  N,
                                                         UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_ALIGN_FAIL_CNT_FILL_I_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_ALIGN_FAIL_CNT_FILL_I_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_ALIGN_FAIL_CNT_FILL_I_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_ALIGN_FAIL_CNT_FILL_I_set", A, N, value );

    /* ((0x00005780 + (N) * 0x8) bits 7) field ALIGN_FAIL_CNT_FILL_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    ilkn_reg_RX_INT_array_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     N,
                                     ILAKEN_REG_RX_INT_BIT_ALIGN_FAIL_CNT_FILL_I_MSK,
                                     ILAKEN_REG_RX_INT_BIT_ALIGN_FAIL_CNT_FILL_I_OFF,
                                     value);
}

static INLINE UINT32 ilkn_field_ALIGN_FAIL_CNT_FILL_I_get( ilkn_buffer_t *b_ptr,
                                                           sifd_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_ALIGN_FAIL_CNT_FILL_I_get( ilkn_buffer_t *b_ptr,
                                                           sifd_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_ALIGN_FAIL_CNT_FILL_I_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_ALIGN_FAIL_CNT_FILL_I_get", N, 1);
    /* ((0x00005780 + (N) * 0x8) bits 7) field ALIGN_FAIL_CNT_FILL_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    reg_value = ilkn_reg_RX_INT_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_RX_INT_BIT_ALIGN_FAIL_CNT_FILL_I_MSK) >> ILAKEN_REG_RX_INT_BIT_ALIGN_FAIL_CNT_FILL_I_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_ALIGN_FAIL_CNT_FILL_I_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_ALIGN_CNT_FILL_I_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_ALIGN_CNT_FILL_I_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_ALIGN_CNT_FILL_I_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_ALIGN_CNT_FILL_I_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_ALIGN_CNT_FILL_I_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_ALIGN_CNT_FILL_I_set", A, N, value );

    /* ((0x00005780 + (N) * 0x8) bits 6) field ALIGN_CNT_FILL_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    ilkn_reg_RX_INT_array_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     N,
                                     ILAKEN_REG_RX_INT_BIT_ALIGN_CNT_FILL_I_MSK,
                                     ILAKEN_REG_RX_INT_BIT_ALIGN_CNT_FILL_I_OFF,
                                     value);
}

static INLINE UINT32 ilkn_field_ALIGN_CNT_FILL_I_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_ALIGN_CNT_FILL_I_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_ALIGN_CNT_FILL_I_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_ALIGN_CNT_FILL_I_get", N, 1);
    /* ((0x00005780 + (N) * 0x8) bits 6) field ALIGN_CNT_FILL_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    reg_value = ilkn_reg_RX_INT_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_RX_INT_BIT_ALIGN_CNT_FILL_I_MSK) >> ILAKEN_REG_RX_INT_BIT_ALIGN_CNT_FILL_I_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_ALIGN_CNT_FILL_I_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_BURST_CNT_FILL_I_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_BURST_CNT_FILL_I_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BURST_CNT_FILL_I_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BURST_CNT_FILL_I_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_BURST_CNT_FILL_I_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_BURST_CNT_FILL_I_set", A, N, value );

    /* ((0x00005780 + (N) * 0x8) bits 5) field BURST_CNT_FILL_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    ilkn_reg_RX_INT_array_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     N,
                                     ILAKEN_REG_RX_INT_BIT_BURST_CNT_FILL_I_MSK,
                                     ILAKEN_REG_RX_INT_BIT_BURST_CNT_FILL_I_OFF,
                                     value);
}

static INLINE UINT32 ilkn_field_BURST_CNT_FILL_I_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_BURST_CNT_FILL_I_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BURST_CNT_FILL_I_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BURST_CNT_FILL_I_get", N, 1);
    /* ((0x00005780 + (N) * 0x8) bits 5) field BURST_CNT_FILL_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    reg_value = ilkn_reg_RX_INT_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_RX_INT_BIT_BURST_CNT_FILL_I_MSK) >> ILAKEN_REG_RX_INT_BIT_BURST_CNT_FILL_I_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_BURST_CNT_FILL_I_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_BMIN_CNT_FILL_I_set( ilkn_buffer_t *b_ptr,
                                                   sifd_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_BMIN_CNT_FILL_I_set( ilkn_buffer_t *b_ptr,
                                                   sifd_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BMIN_CNT_FILL_I_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BMIN_CNT_FILL_I_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_BMIN_CNT_FILL_I_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_BMIN_CNT_FILL_I_set", A, N, value );

    /* ((0x00005780 + (N) * 0x8) bits 4) field BMIN_CNT_FILL_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    ilkn_reg_RX_INT_array_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     N,
                                     ILAKEN_REG_RX_INT_BIT_BMIN_CNT_FILL_I_MSK,
                                     ILAKEN_REG_RX_INT_BIT_BMIN_CNT_FILL_I_OFF,
                                     value);
}

static INLINE UINT32 ilkn_field_BMIN_CNT_FILL_I_get( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_BMIN_CNT_FILL_I_get( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BMIN_CNT_FILL_I_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BMIN_CNT_FILL_I_get", N, 1);
    /* ((0x00005780 + (N) * 0x8) bits 4) field BMIN_CNT_FILL_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    reg_value = ilkn_reg_RX_INT_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_RX_INT_BIT_BMIN_CNT_FILL_I_MSK) >> ILAKEN_REG_RX_INT_BIT_BMIN_CNT_FILL_I_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_BMIN_CNT_FILL_I_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_BMAX_CNT_FILL_I_set( ilkn_buffer_t *b_ptr,
                                                   sifd_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_BMAX_CNT_FILL_I_set( ilkn_buffer_t *b_ptr,
                                                   sifd_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BMAX_CNT_FILL_I_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BMAX_CNT_FILL_I_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_BMAX_CNT_FILL_I_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_BMAX_CNT_FILL_I_set", A, N, value );

    /* ((0x00005780 + (N) * 0x8) bits 3) field BMAX_CNT_FILL_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    ilkn_reg_RX_INT_array_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     N,
                                     ILAKEN_REG_RX_INT_BIT_BMAX_CNT_FILL_I_MSK,
                                     ILAKEN_REG_RX_INT_BIT_BMAX_CNT_FILL_I_OFF,
                                     value);
}

static INLINE UINT32 ilkn_field_BMAX_CNT_FILL_I_get( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_BMAX_CNT_FILL_I_get( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BMAX_CNT_FILL_I_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BMAX_CNT_FILL_I_get", N, 1);
    /* ((0x00005780 + (N) * 0x8) bits 3) field BMAX_CNT_FILL_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    reg_value = ilkn_reg_RX_INT_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_RX_INT_BIT_BMAX_CNT_FILL_I_MSK) >> ILAKEN_REG_RX_INT_BIT_BMAX_CNT_FILL_I_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_BMAX_CNT_FILL_I_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_CRC24_CNT_FILL_I_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_CRC24_CNT_FILL_I_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CRC24_CNT_FILL_I_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CRC24_CNT_FILL_I_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_CRC24_CNT_FILL_I_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_CRC24_CNT_FILL_I_set", A, N, value );

    /* ((0x00005780 + (N) * 0x8) bits 2) field CRC24_CNT_FILL_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    ilkn_reg_RX_INT_array_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     N,
                                     ILAKEN_REG_RX_INT_BIT_CRC24_CNT_FILL_I_MSK,
                                     ILAKEN_REG_RX_INT_BIT_CRC24_CNT_FILL_I_OFF,
                                     value);
}

static INLINE UINT32 ilkn_field_CRC24_CNT_FILL_I_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_CRC24_CNT_FILL_I_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CRC24_CNT_FILL_I_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CRC24_CNT_FILL_I_get", N, 1);
    /* ((0x00005780 + (N) * 0x8) bits 2) field CRC24_CNT_FILL_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    reg_value = ilkn_reg_RX_INT_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_RX_INT_BIT_CRC24_CNT_FILL_I_MSK) >> ILAKEN_REG_RX_INT_BIT_CRC24_CNT_FILL_I_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_CRC24_CNT_FILL_I_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_RX_FC_CNT_FILL_I_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_RX_FC_CNT_FILL_I_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_FC_CNT_FILL_I_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_RX_FC_CNT_FILL_I_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_RX_FC_CNT_FILL_I_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_RX_FC_CNT_FILL_I_set", A, N, value );

    /* ((0x00005780 + (N) * 0x8) bits 1) field RX_FC_CNT_FILL_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    ilkn_reg_RX_INT_array_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     N,
                                     ILAKEN_REG_RX_INT_BIT_RX_FC_CNT_FILL_I_MSK,
                                     ILAKEN_REG_RX_INT_BIT_RX_FC_CNT_FILL_I_OFF,
                                     value);
}

static INLINE UINT32 ilkn_field_RX_FC_CNT_FILL_I_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RX_FC_CNT_FILL_I_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_FC_CNT_FILL_I_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_RX_FC_CNT_FILL_I_get", N, 1);
    /* ((0x00005780 + (N) * 0x8) bits 1) field RX_FC_CNT_FILL_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    reg_value = ilkn_reg_RX_INT_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_RX_INT_BIT_RX_FC_CNT_FILL_I_MSK) >> ILAKEN_REG_RX_INT_BIT_RX_FC_CNT_FILL_I_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_RX_FC_CNT_FILL_I_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_RX_CHAN_CNT_FILL_I_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_RX_CHAN_CNT_FILL_I_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_CHAN_CNT_FILL_I_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_RX_CHAN_CNT_FILL_I_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_RX_CHAN_CNT_FILL_I_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_RX_CHAN_CNT_FILL_I_set", A, N, value );

    /* ((0x00005780 + (N) * 0x8) bits 0) field RX_CHAN_CNT_FILL_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    ilkn_reg_RX_INT_array_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     N,
                                     ILAKEN_REG_RX_INT_BIT_RX_CHAN_CNT_FILL_I_MSK,
                                     ILAKEN_REG_RX_INT_BIT_RX_CHAN_CNT_FILL_I_OFF,
                                     value);
}

static INLINE UINT32 ilkn_field_RX_CHAN_CNT_FILL_I_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RX_CHAN_CNT_FILL_I_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_CHAN_CNT_FILL_I_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_RX_CHAN_CNT_FILL_I_get", N, 1);
    /* ((0x00005780 + (N) * 0x8) bits 0) field RX_CHAN_CNT_FILL_I of register PMC_ILAKEN_REG_RX_INT index N=0..1 */
    reg_value = ilkn_reg_RX_INT_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_RX_INT_BIT_RX_CHAN_CNT_FILL_I_MSK) >> ILAKEN_REG_RX_INT_BIT_RX_CHAN_CNT_FILL_I_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_RX_CHAN_CNT_FILL_I_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_CTLBIT_ERR_M_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_CTLBIT_ERR_M_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CTLBIT_ERR_M_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CTLBIT_ERR_M_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_CTLBIT_ERR_M_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_CTLBIT_ERR_M_set", A, N, value );

    /* ((0x00005784 + (N) * 0x8) bits 31) field CTLBIT_ERR_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    ilkn_reg_RX_INT_MASK_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_RX_INT_MASK_BIT_CTLBIT_ERR_M_MSK,
                                          ILAKEN_REG_RX_INT_MASK_BIT_CTLBIT_ERR_M_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_CTLBIT_ERR_M_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_CTLBIT_ERR_M_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CTLBIT_ERR_M_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CTLBIT_ERR_M_get", N, 1);
    /* ((0x00005784 + (N) * 0x8) bits 31) field CTLBIT_ERR_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    reg_value = ilkn_reg_RX_INT_MASK_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_RX_INT_MASK_BIT_CTLBIT_ERR_M_MSK) >> ILAKEN_REG_RX_INT_MASK_BIT_CTLBIT_ERR_M_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_CTLBIT_ERR_M_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_MF_ERR_M_set( ilkn_buffer_t *b_ptr,
                                            sifd_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32  N,
                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_MF_ERR_M_set( ilkn_buffer_t *b_ptr,
                                            sifd_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32  N,
                                            UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_MF_ERR_M_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_MF_ERR_M_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_MF_ERR_M_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_MF_ERR_M_set", A, N, value );

    /* ((0x00005784 + (N) * 0x8) bits 29) field MF_ERR_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    ilkn_reg_RX_INT_MASK_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_RX_INT_MASK_BIT_MF_ERR_M_MSK,
                                          ILAKEN_REG_RX_INT_MASK_BIT_MF_ERR_M_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_MF_ERR_M_get( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_MF_ERR_M_get( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_MF_ERR_M_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_MF_ERR_M_get", N, 1);
    /* ((0x00005784 + (N) * 0x8) bits 29) field MF_ERR_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    reg_value = ilkn_reg_RX_INT_MASK_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_RX_INT_MASK_BIT_MF_ERR_M_MSK) >> ILAKEN_REG_RX_INT_MASK_BIT_MF_ERR_M_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_MF_ERR_M_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_BADCTL_ERR_M_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_BADCTL_ERR_M_set( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N,
                                                UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BADCTL_ERR_M_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BADCTL_ERR_M_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_BADCTL_ERR_M_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_BADCTL_ERR_M_set", A, N, value );

    /* ((0x00005784 + (N) * 0x8) bits 28) field BADCTL_ERR_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    ilkn_reg_RX_INT_MASK_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_RX_INT_MASK_BIT_BADCTL_ERR_M_MSK,
                                          ILAKEN_REG_RX_INT_MASK_BIT_BADCTL_ERR_M_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_BADCTL_ERR_M_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_BADCTL_ERR_M_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BADCTL_ERR_M_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BADCTL_ERR_M_get", N, 1);
    /* ((0x00005784 + (N) * 0x8) bits 28) field BADCTL_ERR_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    reg_value = ilkn_reg_RX_INT_MASK_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_RX_INT_MASK_BIT_BADCTL_ERR_M_MSK) >> ILAKEN_REG_RX_INT_MASK_BIT_BADCTL_ERR_M_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_BADCTL_ERR_M_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_SCRAM_ERR_M_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_SCRAM_ERR_M_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_SCRAM_ERR_M_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_SCRAM_ERR_M_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_SCRAM_ERR_M_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_SCRAM_ERR_M_set", A, N, value );

    /* ((0x00005784 + (N) * 0x8) bits 27) field SCRAM_ERR_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    ilkn_reg_RX_INT_MASK_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_RX_INT_MASK_BIT_SCRAM_ERR_M_MSK,
                                          ILAKEN_REG_RX_INT_MASK_BIT_SCRAM_ERR_M_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_SCRAM_ERR_M_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_SCRAM_ERR_M_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_SCRAM_ERR_M_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_SCRAM_ERR_M_get", N, 1);
    /* ((0x00005784 + (N) * 0x8) bits 27) field SCRAM_ERR_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    reg_value = ilkn_reg_RX_INT_MASK_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_RX_INT_MASK_BIT_SCRAM_ERR_M_MSK) >> ILAKEN_REG_RX_INT_MASK_BIT_SCRAM_ERR_M_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_SCRAM_ERR_M_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_CRC32_ERR_M_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_CRC32_ERR_M_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CRC32_ERR_M_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CRC32_ERR_M_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_CRC32_ERR_M_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_CRC32_ERR_M_set", A, N, value );

    /* ((0x00005784 + (N) * 0x8) bits 26) field CRC32_ERR_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    ilkn_reg_RX_INT_MASK_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_RX_INT_MASK_BIT_CRC32_ERR_M_MSK,
                                          ILAKEN_REG_RX_INT_MASK_BIT_CRC32_ERR_M_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_CRC32_ERR_M_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_CRC32_ERR_M_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CRC32_ERR_M_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CRC32_ERR_M_get", N, 1);
    /* ((0x00005784 + (N) * 0x8) bits 26) field CRC32_ERR_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    reg_value = ilkn_reg_RX_INT_MASK_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_RX_INT_MASK_BIT_CRC32_ERR_M_MSK) >> ILAKEN_REG_RX_INT_MASK_BIT_CRC32_ERR_M_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_CRC32_ERR_M_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_CDR_ERR_M_set( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32  N,
                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_CDR_ERR_M_set( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32  N,
                                             UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CDR_ERR_M_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CDR_ERR_M_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_CDR_ERR_M_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_CDR_ERR_M_set", A, N, value );

    /* ((0x00005784 + (N) * 0x8) bits 25) field CDR_ERR_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    ilkn_reg_RX_INT_MASK_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_RX_INT_MASK_BIT_CDR_ERR_M_MSK,
                                          ILAKEN_REG_RX_INT_MASK_BIT_CDR_ERR_M_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_CDR_ERR_M_get( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_CDR_ERR_M_get( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CDR_ERR_M_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CDR_ERR_M_get", N, 1);
    /* ((0x00005784 + (N) * 0x8) bits 25) field CDR_ERR_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    reg_value = ilkn_reg_RX_INT_MASK_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_RX_INT_MASK_BIT_CDR_ERR_M_MSK) >> ILAKEN_REG_RX_INT_MASK_BIT_CDR_ERR_M_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_CDR_ERR_M_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_WRD_SYNC_CHANGE_M_set( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_WRD_SYNC_CHANGE_M_set( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_WRD_SYNC_CHANGE_M_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_WRD_SYNC_CHANGE_M_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_WRD_SYNC_CHANGE_M_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_WRD_SYNC_CHANGE_M_set", A, N, value );

    /* ((0x00005784 + (N) * 0x8) bits 24) field WRD_SYNC_CHANGE_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    ilkn_reg_RX_INT_MASK_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_RX_INT_MASK_BIT_WRD_SYNC_CHANGE_M_MSK,
                                          ILAKEN_REG_RX_INT_MASK_BIT_WRD_SYNC_CHANGE_M_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_WRD_SYNC_CHANGE_M_get( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_WRD_SYNC_CHANGE_M_get( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_WRD_SYNC_CHANGE_M_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_WRD_SYNC_CHANGE_M_get", N, 1);
    /* ((0x00005784 + (N) * 0x8) bits 24) field WRD_SYNC_CHANGE_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    reg_value = ilkn_reg_RX_INT_MASK_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_RX_INT_MASK_BIT_WRD_SYNC_CHANGE_M_MSK) >> ILAKEN_REG_RX_INT_MASK_BIT_WRD_SYNC_CHANGE_M_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_WRD_SYNC_CHANGE_M_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_ALIGN_CHANGE_M_set( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_ALIGN_CHANGE_M_set( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_ALIGN_CHANGE_M_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_ALIGN_CHANGE_M_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_ALIGN_CHANGE_M_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_ALIGN_CHANGE_M_set", A, N, value );

    /* ((0x00005784 + (N) * 0x8) bits 23) field ALIGN_CHANGE_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    ilkn_reg_RX_INT_MASK_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_RX_INT_MASK_BIT_ALIGN_CHANGE_M_MSK,
                                          ILAKEN_REG_RX_INT_MASK_BIT_ALIGN_CHANGE_M_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_ALIGN_CHANGE_M_get( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_ALIGN_CHANGE_M_get( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_ALIGN_CHANGE_M_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_ALIGN_CHANGE_M_get", N, 1);
    /* ((0x00005784 + (N) * 0x8) bits 23) field ALIGN_CHANGE_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    reg_value = ilkn_reg_RX_INT_MASK_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_RX_INT_MASK_BIT_ALIGN_CHANGE_M_MSK) >> ILAKEN_REG_RX_INT_MASK_BIT_ALIGN_CHANGE_M_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_ALIGN_CHANGE_M_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_ALIGN_ERR_M_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_ALIGN_ERR_M_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_ALIGN_ERR_M_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_ALIGN_ERR_M_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_ALIGN_ERR_M_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_ALIGN_ERR_M_set", A, N, value );

    /* ((0x00005784 + (N) * 0x8) bits 22) field ALIGN_ERR_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    ilkn_reg_RX_INT_MASK_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_RX_INT_MASK_BIT_ALIGN_ERR_M_MSK,
                                          ILAKEN_REG_RX_INT_MASK_BIT_ALIGN_ERR_M_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_ALIGN_ERR_M_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_ALIGN_ERR_M_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_ALIGN_ERR_M_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_ALIGN_ERR_M_get", N, 1);
    /* ((0x00005784 + (N) * 0x8) bits 22) field ALIGN_ERR_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    reg_value = ilkn_reg_RX_INT_MASK_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_RX_INT_MASK_BIT_ALIGN_ERR_M_MSK) >> ILAKEN_REG_RX_INT_MASK_BIT_ALIGN_ERR_M_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_ALIGN_ERR_M_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_BURST_ERR_M_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_BURST_ERR_M_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BURST_ERR_M_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BURST_ERR_M_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_BURST_ERR_M_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_BURST_ERR_M_set", A, N, value );

    /* ((0x00005784 + (N) * 0x8) bits 21) field BURST_ERR_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    ilkn_reg_RX_INT_MASK_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_RX_INT_MASK_BIT_BURST_ERR_M_MSK,
                                          ILAKEN_REG_RX_INT_MASK_BIT_BURST_ERR_M_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_BURST_ERR_M_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_BURST_ERR_M_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BURST_ERR_M_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BURST_ERR_M_get", N, 1);
    /* ((0x00005784 + (N) * 0x8) bits 21) field BURST_ERR_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    reg_value = ilkn_reg_RX_INT_MASK_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_RX_INT_MASK_BIT_BURST_ERR_M_MSK) >> ILAKEN_REG_RX_INT_MASK_BIT_BURST_ERR_M_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_BURST_ERR_M_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_BMIN_ERR_M_set( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_BMIN_ERR_M_set( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N,
                                              UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BMIN_ERR_M_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BMIN_ERR_M_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_BMIN_ERR_M_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_BMIN_ERR_M_set", A, N, value );

    /* ((0x00005784 + (N) * 0x8) bits 20) field BMIN_ERR_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    ilkn_reg_RX_INT_MASK_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_RX_INT_MASK_BIT_BMIN_ERR_M_MSK,
                                          ILAKEN_REG_RX_INT_MASK_BIT_BMIN_ERR_M_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_BMIN_ERR_M_get( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_BMIN_ERR_M_get( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BMIN_ERR_M_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BMIN_ERR_M_get", N, 1);
    /* ((0x00005784 + (N) * 0x8) bits 20) field BMIN_ERR_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    reg_value = ilkn_reg_RX_INT_MASK_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_RX_INT_MASK_BIT_BMIN_ERR_M_MSK) >> ILAKEN_REG_RX_INT_MASK_BIT_BMIN_ERR_M_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_BMIN_ERR_M_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_BMAX_ERR_M_set( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_BMAX_ERR_M_set( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N,
                                              UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BMAX_ERR_M_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BMAX_ERR_M_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_BMAX_ERR_M_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_BMAX_ERR_M_set", A, N, value );

    /* ((0x00005784 + (N) * 0x8) bits 19) field BMAX_ERR_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    ilkn_reg_RX_INT_MASK_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_RX_INT_MASK_BIT_BMAX_ERR_M_MSK,
                                          ILAKEN_REG_RX_INT_MASK_BIT_BMAX_ERR_M_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_BMAX_ERR_M_get( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_BMAX_ERR_M_get( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BMAX_ERR_M_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BMAX_ERR_M_get", N, 1);
    /* ((0x00005784 + (N) * 0x8) bits 19) field BMAX_ERR_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    reg_value = ilkn_reg_RX_INT_MASK_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_RX_INT_MASK_BIT_BMAX_ERR_M_MSK) >> ILAKEN_REG_RX_INT_MASK_BIT_BMAX_ERR_M_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_BMAX_ERR_M_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_CRC24_ERR_M_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_CRC24_ERR_M_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CRC24_ERR_M_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CRC24_ERR_M_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_CRC24_ERR_M_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_CRC24_ERR_M_set", A, N, value );

    /* ((0x00005784 + (N) * 0x8) bits 18) field CRC24_ERR_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    ilkn_reg_RX_INT_MASK_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_RX_INT_MASK_BIT_CRC24_ERR_M_MSK,
                                          ILAKEN_REG_RX_INT_MASK_BIT_CRC24_ERR_M_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_CRC24_ERR_M_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_CRC24_ERR_M_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CRC24_ERR_M_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CRC24_ERR_M_get", N, 1);
    /* ((0x00005784 + (N) * 0x8) bits 18) field CRC24_ERR_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    reg_value = ilkn_reg_RX_INT_MASK_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_RX_INT_MASK_BIT_CRC24_ERR_M_MSK) >> ILAKEN_REG_RX_INT_MASK_BIT_CRC24_ERR_M_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_CRC24_ERR_M_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_IB_FC_ERR_M_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_IB_FC_ERR_M_set( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N,
                                               UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_IB_FC_ERR_M_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_IB_FC_ERR_M_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_IB_FC_ERR_M_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_IB_FC_ERR_M_set", A, N, value );

    /* ((0x00005784 + (N) * 0x8) bits 17) field IB_FC_ERR_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    ilkn_reg_RX_INT_MASK_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_RX_INT_MASK_BIT_IB_FC_ERR_M_MSK,
                                          ILAKEN_REG_RX_INT_MASK_BIT_IB_FC_ERR_M_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_IB_FC_ERR_M_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_IB_FC_ERR_M_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_IB_FC_ERR_M_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_IB_FC_ERR_M_get", N, 1);
    /* ((0x00005784 + (N) * 0x8) bits 17) field IB_FC_ERR_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    reg_value = ilkn_reg_RX_INT_MASK_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_RX_INT_MASK_BIT_IB_FC_ERR_M_MSK) >> ILAKEN_REG_RX_INT_MASK_BIT_IB_FC_ERR_M_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_IB_FC_ERR_M_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_RX_STATUS_MSG_CHANGE_M_set( ilkn_buffer_t *b_ptr,
                                                          sifd_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_RX_STATUS_MSG_CHANGE_M_set( ilkn_buffer_t *b_ptr,
                                                          sifd_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32  N,
                                                          UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_STATUS_MSG_CHANGE_M_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_RX_STATUS_MSG_CHANGE_M_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_RX_STATUS_MSG_CHANGE_M_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_RX_STATUS_MSG_CHANGE_M_set", A, N, value );

    /* ((0x00005784 + (N) * 0x8) bits 16) field RX_STATUS_MSG_CHANGE_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    ilkn_reg_RX_INT_MASK_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_RX_INT_MASK_BIT_RX_STATUS_MSG_CHANGE_M_MSK,
                                          ILAKEN_REG_RX_INT_MASK_BIT_RX_STATUS_MSG_CHANGE_M_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_RX_STATUS_MSG_CHANGE_M_get( ilkn_buffer_t *b_ptr,
                                                            sifd_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RX_STATUS_MSG_CHANGE_M_get( ilkn_buffer_t *b_ptr,
                                                            sifd_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_STATUS_MSG_CHANGE_M_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_RX_STATUS_MSG_CHANGE_M_get", N, 1);
    /* ((0x00005784 + (N) * 0x8) bits 16) field RX_STATUS_MSG_CHANGE_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    reg_value = ilkn_reg_RX_INT_MASK_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_RX_INT_MASK_BIT_RX_STATUS_MSG_CHANGE_M_MSK) >> ILAKEN_REG_RX_INT_MASK_BIT_RX_STATUS_MSG_CHANGE_M_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_RX_STATUS_MSG_CHANGE_M_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_BADCTL_CNT_FILL_M_set( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_BADCTL_CNT_FILL_M_set( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BADCTL_CNT_FILL_M_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BADCTL_CNT_FILL_M_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_BADCTL_CNT_FILL_M_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_BADCTL_CNT_FILL_M_set", A, N, value );

    /* ((0x00005784 + (N) * 0x8) bits 13) field BADCTL_CNT_FILL_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    ilkn_reg_RX_INT_MASK_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_RX_INT_MASK_BIT_BADCTL_CNT_FILL_M_MSK,
                                          ILAKEN_REG_RX_INT_MASK_BIT_BADCTL_CNT_FILL_M_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_BADCTL_CNT_FILL_M_get( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_BADCTL_CNT_FILL_M_get( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BADCTL_CNT_FILL_M_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BADCTL_CNT_FILL_M_get", N, 1);
    /* ((0x00005784 + (N) * 0x8) bits 13) field BADCTL_CNT_FILL_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    reg_value = ilkn_reg_RX_INT_MASK_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_RX_INT_MASK_BIT_BADCTL_CNT_FILL_M_MSK) >> ILAKEN_REG_RX_INT_MASK_BIT_BADCTL_CNT_FILL_M_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_BADCTL_CNT_FILL_M_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_CRC32_CNT_FILL_M_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_CRC32_CNT_FILL_M_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CRC32_CNT_FILL_M_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CRC32_CNT_FILL_M_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_CRC32_CNT_FILL_M_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_CRC32_CNT_FILL_M_set", A, N, value );

    /* ((0x00005784 + (N) * 0x8) bits 10) field CRC32_CNT_FILL_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    ilkn_reg_RX_INT_MASK_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_RX_INT_MASK_BIT_CRC32_CNT_FILL_M_MSK,
                                          ILAKEN_REG_RX_INT_MASK_BIT_CRC32_CNT_FILL_M_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_CRC32_CNT_FILL_M_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_CRC32_CNT_FILL_M_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CRC32_CNT_FILL_M_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CRC32_CNT_FILL_M_get", N, 1);
    /* ((0x00005784 + (N) * 0x8) bits 10) field CRC32_CNT_FILL_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    reg_value = ilkn_reg_RX_INT_MASK_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_RX_INT_MASK_BIT_CRC32_CNT_FILL_M_MSK) >> ILAKEN_REG_RX_INT_MASK_BIT_CRC32_CNT_FILL_M_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_CRC32_CNT_FILL_M_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_CDR_CNT_FILL_M_set( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_CDR_CNT_FILL_M_set( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CDR_CNT_FILL_M_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CDR_CNT_FILL_M_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_CDR_CNT_FILL_M_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_CDR_CNT_FILL_M_set", A, N, value );

    /* ((0x00005784 + (N) * 0x8) bits 9) field CDR_CNT_FILL_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    ilkn_reg_RX_INT_MASK_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_RX_INT_MASK_BIT_CDR_CNT_FILL_M_MSK,
                                          ILAKEN_REG_RX_INT_MASK_BIT_CDR_CNT_FILL_M_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_CDR_CNT_FILL_M_get( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_CDR_CNT_FILL_M_get( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CDR_CNT_FILL_M_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CDR_CNT_FILL_M_get", N, 1);
    /* ((0x00005784 + (N) * 0x8) bits 9) field CDR_CNT_FILL_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    reg_value = ilkn_reg_RX_INT_MASK_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_RX_INT_MASK_BIT_CDR_CNT_FILL_M_MSK) >> ILAKEN_REG_RX_INT_MASK_BIT_CDR_CNT_FILL_M_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_CDR_CNT_FILL_M_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_WRD_SYNC_CNT_FILL_M_set( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_WRD_SYNC_CNT_FILL_M_set( ilkn_buffer_t *b_ptr,
                                                       sifd_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_WRD_SYNC_CNT_FILL_M_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_WRD_SYNC_CNT_FILL_M_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_WRD_SYNC_CNT_FILL_M_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_WRD_SYNC_CNT_FILL_M_set", A, N, value );

    /* ((0x00005784 + (N) * 0x8) bits 8) field WRD_SYNC_CNT_FILL_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    ilkn_reg_RX_INT_MASK_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_RX_INT_MASK_BIT_WRD_SYNC_CNT_FILL_M_MSK,
                                          ILAKEN_REG_RX_INT_MASK_BIT_WRD_SYNC_CNT_FILL_M_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_WRD_SYNC_CNT_FILL_M_get( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_WRD_SYNC_CNT_FILL_M_get( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_WRD_SYNC_CNT_FILL_M_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_WRD_SYNC_CNT_FILL_M_get", N, 1);
    /* ((0x00005784 + (N) * 0x8) bits 8) field WRD_SYNC_CNT_FILL_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    reg_value = ilkn_reg_RX_INT_MASK_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_RX_INT_MASK_BIT_WRD_SYNC_CNT_FILL_M_MSK) >> ILAKEN_REG_RX_INT_MASK_BIT_WRD_SYNC_CNT_FILL_M_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_WRD_SYNC_CNT_FILL_M_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_ALIGN_FAIL_CNT_FILL_M_set( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32  N,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_ALIGN_FAIL_CNT_FILL_M_set( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32  N,
                                                         UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_ALIGN_FAIL_CNT_FILL_M_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_ALIGN_FAIL_CNT_FILL_M_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_ALIGN_FAIL_CNT_FILL_M_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_ALIGN_FAIL_CNT_FILL_M_set", A, N, value );

    /* ((0x00005784 + (N) * 0x8) bits 7) field ALIGN_FAIL_CNT_FILL_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    ilkn_reg_RX_INT_MASK_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_RX_INT_MASK_BIT_ALIGN_FAIL_CNT_FILL_M_MSK,
                                          ILAKEN_REG_RX_INT_MASK_BIT_ALIGN_FAIL_CNT_FILL_M_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_ALIGN_FAIL_CNT_FILL_M_get( ilkn_buffer_t *b_ptr,
                                                           sifd_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_ALIGN_FAIL_CNT_FILL_M_get( ilkn_buffer_t *b_ptr,
                                                           sifd_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_ALIGN_FAIL_CNT_FILL_M_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_ALIGN_FAIL_CNT_FILL_M_get", N, 1);
    /* ((0x00005784 + (N) * 0x8) bits 7) field ALIGN_FAIL_CNT_FILL_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    reg_value = ilkn_reg_RX_INT_MASK_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_RX_INT_MASK_BIT_ALIGN_FAIL_CNT_FILL_M_MSK) >> ILAKEN_REG_RX_INT_MASK_BIT_ALIGN_FAIL_CNT_FILL_M_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_ALIGN_FAIL_CNT_FILL_M_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_ALIGN_CNT_FILL_M_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_ALIGN_CNT_FILL_M_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_ALIGN_CNT_FILL_M_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_ALIGN_CNT_FILL_M_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_ALIGN_CNT_FILL_M_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_ALIGN_CNT_FILL_M_set", A, N, value );

    /* ((0x00005784 + (N) * 0x8) bits 6) field ALIGN_CNT_FILL_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    ilkn_reg_RX_INT_MASK_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_RX_INT_MASK_BIT_ALIGN_CNT_FILL_M_MSK,
                                          ILAKEN_REG_RX_INT_MASK_BIT_ALIGN_CNT_FILL_M_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_ALIGN_CNT_FILL_M_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_ALIGN_CNT_FILL_M_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_ALIGN_CNT_FILL_M_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_ALIGN_CNT_FILL_M_get", N, 1);
    /* ((0x00005784 + (N) * 0x8) bits 6) field ALIGN_CNT_FILL_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    reg_value = ilkn_reg_RX_INT_MASK_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_RX_INT_MASK_BIT_ALIGN_CNT_FILL_M_MSK) >> ILAKEN_REG_RX_INT_MASK_BIT_ALIGN_CNT_FILL_M_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_ALIGN_CNT_FILL_M_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_BURST_CNT_FILL_M_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_BURST_CNT_FILL_M_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BURST_CNT_FILL_M_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BURST_CNT_FILL_M_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_BURST_CNT_FILL_M_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_BURST_CNT_FILL_M_set", A, N, value );

    /* ((0x00005784 + (N) * 0x8) bits 5) field BURST_CNT_FILL_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    ilkn_reg_RX_INT_MASK_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_RX_INT_MASK_BIT_BURST_CNT_FILL_M_MSK,
                                          ILAKEN_REG_RX_INT_MASK_BIT_BURST_CNT_FILL_M_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_BURST_CNT_FILL_M_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_BURST_CNT_FILL_M_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BURST_CNT_FILL_M_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BURST_CNT_FILL_M_get", N, 1);
    /* ((0x00005784 + (N) * 0x8) bits 5) field BURST_CNT_FILL_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    reg_value = ilkn_reg_RX_INT_MASK_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_RX_INT_MASK_BIT_BURST_CNT_FILL_M_MSK) >> ILAKEN_REG_RX_INT_MASK_BIT_BURST_CNT_FILL_M_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_BURST_CNT_FILL_M_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_BMIN_CNT_FILL_M_set( ilkn_buffer_t *b_ptr,
                                                   sifd_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_BMIN_CNT_FILL_M_set( ilkn_buffer_t *b_ptr,
                                                   sifd_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BMIN_CNT_FILL_M_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BMIN_CNT_FILL_M_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_BMIN_CNT_FILL_M_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_BMIN_CNT_FILL_M_set", A, N, value );

    /* ((0x00005784 + (N) * 0x8) bits 4) field BMIN_CNT_FILL_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    ilkn_reg_RX_INT_MASK_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_RX_INT_MASK_BIT_BMIN_CNT_FILL_M_MSK,
                                          ILAKEN_REG_RX_INT_MASK_BIT_BMIN_CNT_FILL_M_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_BMIN_CNT_FILL_M_get( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_BMIN_CNT_FILL_M_get( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BMIN_CNT_FILL_M_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BMIN_CNT_FILL_M_get", N, 1);
    /* ((0x00005784 + (N) * 0x8) bits 4) field BMIN_CNT_FILL_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    reg_value = ilkn_reg_RX_INT_MASK_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_RX_INT_MASK_BIT_BMIN_CNT_FILL_M_MSK) >> ILAKEN_REG_RX_INT_MASK_BIT_BMIN_CNT_FILL_M_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_BMIN_CNT_FILL_M_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_BMAX_CNT_FILL_M_set( ilkn_buffer_t *b_ptr,
                                                   sifd_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_BMAX_CNT_FILL_M_set( ilkn_buffer_t *b_ptr,
                                                   sifd_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BMAX_CNT_FILL_M_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BMAX_CNT_FILL_M_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_BMAX_CNT_FILL_M_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_BMAX_CNT_FILL_M_set", A, N, value );

    /* ((0x00005784 + (N) * 0x8) bits 3) field BMAX_CNT_FILL_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    ilkn_reg_RX_INT_MASK_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_RX_INT_MASK_BIT_BMAX_CNT_FILL_M_MSK,
                                          ILAKEN_REG_RX_INT_MASK_BIT_BMAX_CNT_FILL_M_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_BMAX_CNT_FILL_M_get( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_BMAX_CNT_FILL_M_get( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BMAX_CNT_FILL_M_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BMAX_CNT_FILL_M_get", N, 1);
    /* ((0x00005784 + (N) * 0x8) bits 3) field BMAX_CNT_FILL_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    reg_value = ilkn_reg_RX_INT_MASK_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_RX_INT_MASK_BIT_BMAX_CNT_FILL_M_MSK) >> ILAKEN_REG_RX_INT_MASK_BIT_BMAX_CNT_FILL_M_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_BMAX_CNT_FILL_M_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_CRC24_CNT_FILL_M_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_CRC24_CNT_FILL_M_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CRC24_CNT_FILL_M_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CRC24_CNT_FILL_M_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_CRC24_CNT_FILL_M_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_CRC24_CNT_FILL_M_set", A, N, value );

    /* ((0x00005784 + (N) * 0x8) bits 2) field CRC24_CNT_FILL_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    ilkn_reg_RX_INT_MASK_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_RX_INT_MASK_BIT_CRC24_CNT_FILL_M_MSK,
                                          ILAKEN_REG_RX_INT_MASK_BIT_CRC24_CNT_FILL_M_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_CRC24_CNT_FILL_M_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_CRC24_CNT_FILL_M_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CRC24_CNT_FILL_M_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CRC24_CNT_FILL_M_get", N, 1);
    /* ((0x00005784 + (N) * 0x8) bits 2) field CRC24_CNT_FILL_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    reg_value = ilkn_reg_RX_INT_MASK_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_RX_INT_MASK_BIT_CRC24_CNT_FILL_M_MSK) >> ILAKEN_REG_RX_INT_MASK_BIT_CRC24_CNT_FILL_M_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_CRC24_CNT_FILL_M_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_RX_FC_CNT_FILL_M_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_RX_FC_CNT_FILL_M_set( ilkn_buffer_t *b_ptr,
                                                    sifd_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_FC_CNT_FILL_M_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_RX_FC_CNT_FILL_M_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_RX_FC_CNT_FILL_M_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_RX_FC_CNT_FILL_M_set", A, N, value );

    /* ((0x00005784 + (N) * 0x8) bits 1) field RX_FC_CNT_FILL_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    ilkn_reg_RX_INT_MASK_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_RX_INT_MASK_BIT_RX_FC_CNT_FILL_M_MSK,
                                          ILAKEN_REG_RX_INT_MASK_BIT_RX_FC_CNT_FILL_M_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_RX_FC_CNT_FILL_M_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RX_FC_CNT_FILL_M_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_FC_CNT_FILL_M_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_RX_FC_CNT_FILL_M_get", N, 1);
    /* ((0x00005784 + (N) * 0x8) bits 1) field RX_FC_CNT_FILL_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    reg_value = ilkn_reg_RX_INT_MASK_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_RX_INT_MASK_BIT_RX_FC_CNT_FILL_M_MSK) >> ILAKEN_REG_RX_INT_MASK_BIT_RX_FC_CNT_FILL_M_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_RX_FC_CNT_FILL_M_get", A, N, value );

    return value;
}
static INLINE void ilkn_field_RX_CHAN_CNT_FILL_M_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void ilkn_field_RX_CHAN_CNT_FILL_M_set( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_CHAN_CNT_FILL_M_set", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_RX_CHAN_CNT_FILL_M_set", N, 1);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ilkn_field_RX_CHAN_CNT_FILL_M_set", value, 1);
    IOLOG( "%s <= A=%d N=%d 0x%08x", "ilkn_field_RX_CHAN_CNT_FILL_M_set", A, N, value );

    /* ((0x00005784 + (N) * 0x8) bits 0) field RX_CHAN_CNT_FILL_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    ilkn_reg_RX_INT_MASK_array_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          N,
                                          ILAKEN_REG_RX_INT_MASK_BIT_RX_CHAN_CNT_FILL_M_MSK,
                                          ILAKEN_REG_RX_INT_MASK_BIT_RX_CHAN_CNT_FILL_M_OFF,
                                          value);
}

static INLINE UINT32 ilkn_field_RX_CHAN_CNT_FILL_M_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RX_CHAN_CNT_FILL_M_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_CHAN_CNT_FILL_M_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_RX_CHAN_CNT_FILL_M_get", N, 1);
    /* ((0x00005784 + (N) * 0x8) bits 0) field RX_CHAN_CNT_FILL_M of register PMC_ILAKEN_REG_RX_INT_MASK index N=0..1 */
    reg_value = ilkn_reg_RX_INT_MASK_array_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 N);
    value = (reg_value & ILAKEN_REG_RX_INT_MASK_BIT_RX_CHAN_CNT_FILL_M_MSK) >> ILAKEN_REG_RX_INT_MASK_BIT_RX_CHAN_CNT_FILL_M_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_RX_CHAN_CNT_FILL_M_get", A, N, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset status
 * ==================================================================================
 */
static INLINE UINT32 ilkn_field_CURRENT_get( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_CURRENT_get( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CURRENT_get", A, 1);
    /* (0x00005540 bits 31) field CURRENT of register PMC_ILAKEN_REG_TX_STAT_MESSAGE_RXD */
    reg_value = ilkn_reg_TX_STAT_MESSAGE_RXD_read( b_ptr,
                                                   h_ptr,
                                                   A);
    value = (reg_value & ILAKEN_REG_TX_STAT_MESSAGE_RXD_BIT_CURRENT_MSK) >> ILAKEN_REG_TX_STAT_MESSAGE_RXD_BIT_CURRENT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_CURRENT_get", A, value );

    return value;
}
static INLINE UINT32 ilkn_field_VALID_get( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_VALID_get( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_VALID_get", A, 1);
    /* (0x00005540 bits 30) field VALID of register PMC_ILAKEN_REG_TX_STAT_MESSAGE_RXD */
    reg_value = ilkn_reg_TX_STAT_MESSAGE_RXD_read( b_ptr,
                                                   h_ptr,
                                                   A);
    value = (reg_value & ILAKEN_REG_TX_STAT_MESSAGE_RXD_BIT_VALID_MSK) >> ILAKEN_REG_TX_STAT_MESSAGE_RXD_BIT_VALID_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_VALID_get", A, value );

    return value;
}
static INLINE UINT32 ilkn_field_SYNC_get( ilkn_buffer_t *b_ptr,
                                          sifd_handle_t *h_ptr,
                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_SYNC_get( ilkn_buffer_t *b_ptr,
                                          sifd_handle_t *h_ptr,
                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_SYNC_get", A, 1);
    /* (0x00005540 bits 26) field SYNC of register PMC_ILAKEN_REG_TX_STAT_MESSAGE_RXD */
    reg_value = ilkn_reg_TX_STAT_MESSAGE_RXD_read( b_ptr,
                                                   h_ptr,
                                                   A);
    value = (reg_value & ILAKEN_REG_TX_STAT_MESSAGE_RXD_BIT_SYNC_MSK) >> ILAKEN_REG_TX_STAT_MESSAGE_RXD_BIT_SYNC_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_SYNC_get", A, value );

    return value;
}
static INLINE UINT32 ilkn_field_SIF_get( ilkn_buffer_t *b_ptr,
                                         sifd_handle_t *h_ptr,
                                         UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_SIF_get( ilkn_buffer_t *b_ptr,
                                         sifd_handle_t *h_ptr,
                                         UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_SIF_get", A, 1);
    /* (0x00005540 bits 24) field SIF of register PMC_ILAKEN_REG_TX_STAT_MESSAGE_RXD */
    reg_value = ilkn_reg_TX_STAT_MESSAGE_RXD_read( b_ptr,
                                                   h_ptr,
                                                   A);
    value = (reg_value & ILAKEN_REG_TX_STAT_MESSAGE_RXD_BIT_SIF_MSK) >> ILAKEN_REG_TX_STAT_MESSAGE_RXD_BIT_SIF_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_SIF_get", A, value );

    return value;
}
static INLINE UINT32 ilkn_field_TX_SL_get( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_TX_SL_get( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_TX_SL_get", A, 1);
    /* (0x00005540 bits 23:0) field TX_SL of register PMC_ILAKEN_REG_TX_STAT_MESSAGE_RXD */
    reg_value = ilkn_reg_TX_STAT_MESSAGE_RXD_read( b_ptr,
                                                   h_ptr,
                                                   A);
    value = (reg_value & ILAKEN_REG_TX_STAT_MESSAGE_RXD_BIT_TX_SL_MSK) >> ILAKEN_REG_TX_STAT_MESSAGE_RXD_BIT_TX_SL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_TX_SL_get", A, value );

    return value;
}
static INLINE UINT32 ilkn_field_range_TX_SL_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_TX_SL_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_TX_SL_get", A, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_TX_SL_get", stop_bit, start_bit );
    if (stop_bit > 23) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_TX_SL_get", stop_bit, 23 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 23) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 23;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00005540 bits 23:0) field TX_SL of register PMC_ILAKEN_REG_TX_STAT_MESSAGE_RXD */
    reg_value = ilkn_reg_TX_STAT_MESSAGE_RXD_read( b_ptr,
                                                   h_ptr,
                                                   A);
    field_value = (reg_value & ILAKEN_REG_TX_STAT_MESSAGE_RXD_BIT_TX_SL_MSK)
                  >> ILAKEN_REG_TX_STAT_MESSAGE_RXD_BIT_TX_SL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_TX_STAT_MESSAGE_RXD_BIT_TX_SL_MSK, ILAKEN_REG_TX_STAT_MESSAGE_RXD_BIT_TX_SL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_TX_SL_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 ilkn_field_RX_MF_ERR_get( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RX_MF_ERR_get( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_MF_ERR_get", A, 1);
    /* (0x000057ac bits 23:0) field RX_MF_ERR of register PMC_ILAKEN_REG_RX_METAFRAME_ERR */
    reg_value = ilkn_reg_RX_METAFRAME_ERR_read(  b_ptr, h_ptr, A);
    value = (reg_value & ILAKEN_REG_RX_METAFRAME_ERR_BIT_RX_MF_ERR_MSK) >> ILAKEN_REG_RX_METAFRAME_ERR_BIT_RX_MF_ERR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_RX_MF_ERR_get", A, value );

    return value;
}
static INLINE UINT32 ilkn_field_range_RX_MF_ERR_get( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_RX_MF_ERR_get( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_RX_MF_ERR_get", A, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_RX_MF_ERR_get", stop_bit, start_bit );
    if (stop_bit > 23) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_RX_MF_ERR_get", stop_bit, 23 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 23) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 23;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000057ac bits 23:0) field RX_MF_ERR of register PMC_ILAKEN_REG_RX_METAFRAME_ERR */
    reg_value = ilkn_reg_RX_METAFRAME_ERR_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & ILAKEN_REG_RX_METAFRAME_ERR_BIT_RX_MF_ERR_MSK)
                  >> ILAKEN_REG_RX_METAFRAME_ERR_BIT_RX_MF_ERR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_RX_METAFRAME_ERR_BIT_RX_MF_ERR_MSK, ILAKEN_REG_RX_METAFRAME_ERR_BIT_RX_MF_ERR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_RX_MF_ERR_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 ilkn_field_RX_BADCTL_ERR_get( ilkn_buffer_t *b_ptr,
                                                   sifd_handle_t *h_ptr,
                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RX_BADCTL_ERR_get( ilkn_buffer_t *b_ptr,
                                                   sifd_handle_t *h_ptr,
                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_BADCTL_ERR_get", A, 1);
    /* (0x000057b0 bits 23:0) field RX_BADCTL_ERR of register PMC_ILAKEN_REG_RX_BAD_CTRL_WORD_ERR */
    reg_value = ilkn_reg_RX_BAD_CTRL_WORD_ERR_read( b_ptr,
                                                    h_ptr,
                                                    A);
    value = (reg_value & ILAKEN_REG_RX_BAD_CTRL_WORD_ERR_BIT_RX_BADCTL_ERR_MSK) >> ILAKEN_REG_RX_BAD_CTRL_WORD_ERR_BIT_RX_BADCTL_ERR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_RX_BADCTL_ERR_get", A, value );

    return value;
}
static INLINE UINT32 ilkn_field_range_RX_BADCTL_ERR_get( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_RX_BADCTL_ERR_get( ilkn_buffer_t *b_ptr,
                                                         sifd_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_RX_BADCTL_ERR_get", A, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_RX_BADCTL_ERR_get", stop_bit, start_bit );
    if (stop_bit > 23) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_RX_BADCTL_ERR_get", stop_bit, 23 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 23) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 23;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000057b0 bits 23:0) field RX_BADCTL_ERR of register PMC_ILAKEN_REG_RX_BAD_CTRL_WORD_ERR */
    reg_value = ilkn_reg_RX_BAD_CTRL_WORD_ERR_read( b_ptr,
                                                    h_ptr,
                                                    A);
    field_value = (reg_value & ILAKEN_REG_RX_BAD_CTRL_WORD_ERR_BIT_RX_BADCTL_ERR_MSK)
                  >> ILAKEN_REG_RX_BAD_CTRL_WORD_ERR_BIT_RX_BADCTL_ERR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_RX_BAD_CTRL_WORD_ERR_BIT_RX_BADCTL_ERR_MSK, ILAKEN_REG_RX_BAD_CTRL_WORD_ERR_BIT_RX_BADCTL_ERR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_RX_BADCTL_ERR_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 ilkn_field_RX_SCRAM_ERR_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RX_SCRAM_ERR_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_SCRAM_ERR_get", A, 1);
    /* (0x000057b4 bits 23:0) field RX_SCRAM_ERR of register PMC_ILAKEN_REG_RX_SCRAMBLER_STATE_ERR */
    reg_value = ilkn_reg_RX_SCRAMBLER_STATE_ERR_read( b_ptr,
                                                      h_ptr,
                                                      A);
    value = (reg_value & ILAKEN_REG_RX_SCRAMBLER_STATE_ERR_BIT_RX_SCRAM_ERR_MSK) >> ILAKEN_REG_RX_SCRAMBLER_STATE_ERR_BIT_RX_SCRAM_ERR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_RX_SCRAM_ERR_get", A, value );

    return value;
}
static INLINE UINT32 ilkn_field_range_RX_SCRAM_ERR_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_RX_SCRAM_ERR_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_RX_SCRAM_ERR_get", A, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_RX_SCRAM_ERR_get", stop_bit, start_bit );
    if (stop_bit > 23) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_RX_SCRAM_ERR_get", stop_bit, 23 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 23) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 23;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000057b4 bits 23:0) field RX_SCRAM_ERR of register PMC_ILAKEN_REG_RX_SCRAMBLER_STATE_ERR */
    reg_value = ilkn_reg_RX_SCRAMBLER_STATE_ERR_read( b_ptr,
                                                      h_ptr,
                                                      A);
    field_value = (reg_value & ILAKEN_REG_RX_SCRAMBLER_STATE_ERR_BIT_RX_SCRAM_ERR_MSK)
                  >> ILAKEN_REG_RX_SCRAMBLER_STATE_ERR_BIT_RX_SCRAM_ERR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_RX_SCRAMBLER_STATE_ERR_BIT_RX_SCRAM_ERR_MSK, ILAKEN_REG_RX_SCRAMBLER_STATE_ERR_BIT_RX_SCRAM_ERR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_RX_SCRAM_ERR_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 ilkn_field_RX_CRC32_ERR_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RX_CRC32_ERR_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_CRC32_ERR_get", A, 1);
    /* (0x000057b8 bits 23:0) field RX_CRC32_ERR of register PMC_ILAKEN_REG_RX_CRC32_ERR */
    reg_value = ilkn_reg_RX_CRC32_ERR_read(  b_ptr, h_ptr, A);
    value = (reg_value & ILAKEN_REG_RX_CRC32_ERR_BIT_RX_CRC32_ERR_MSK) >> ILAKEN_REG_RX_CRC32_ERR_BIT_RX_CRC32_ERR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_RX_CRC32_ERR_get", A, value );

    return value;
}
static INLINE UINT32 ilkn_field_range_RX_CRC32_ERR_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_RX_CRC32_ERR_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_RX_CRC32_ERR_get", A, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_RX_CRC32_ERR_get", stop_bit, start_bit );
    if (stop_bit > 23) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_RX_CRC32_ERR_get", stop_bit, 23 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 23) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 23;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000057b8 bits 23:0) field RX_CRC32_ERR of register PMC_ILAKEN_REG_RX_CRC32_ERR */
    reg_value = ilkn_reg_RX_CRC32_ERR_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & ILAKEN_REG_RX_CRC32_ERR_BIT_RX_CRC32_ERR_MSK)
                  >> ILAKEN_REG_RX_CRC32_ERR_BIT_RX_CRC32_ERR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_RX_CRC32_ERR_BIT_RX_CRC32_ERR_MSK, ILAKEN_REG_RX_CRC32_ERR_BIT_RX_CRC32_ERR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_RX_CRC32_ERR_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 ilkn_field_RX_CDR_ERR_get( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RX_CDR_ERR_get( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_CDR_ERR_get", A, 1);
    /* (0x000057bc bits 23:0) field RX_CDR_ERR of register PMC_ILAKEN_REG_RX_CDR_ERR */
    reg_value = ilkn_reg_RX_CDR_ERR_read(  b_ptr, h_ptr, A);
    value = (reg_value & ILAKEN_REG_RX_CDR_ERR_BIT_RX_CDR_ERR_MSK) >> ILAKEN_REG_RX_CDR_ERR_BIT_RX_CDR_ERR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_RX_CDR_ERR_get", A, value );

    return value;
}
static INLINE UINT32 ilkn_field_range_RX_CDR_ERR_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_RX_CDR_ERR_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_RX_CDR_ERR_get", A, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_RX_CDR_ERR_get", stop_bit, start_bit );
    if (stop_bit > 23) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_RX_CDR_ERR_get", stop_bit, 23 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 23) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 23;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000057bc bits 23:0) field RX_CDR_ERR of register PMC_ILAKEN_REG_RX_CDR_ERR */
    reg_value = ilkn_reg_RX_CDR_ERR_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & ILAKEN_REG_RX_CDR_ERR_BIT_RX_CDR_ERR_MSK)
                  >> ILAKEN_REG_RX_CDR_ERR_BIT_RX_CDR_ERR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_RX_CDR_ERR_BIT_RX_CDR_ERR_MSK, ILAKEN_REG_RX_CDR_ERR_BIT_RX_CDR_ERR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_RX_CDR_ERR_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 ilkn_field_RX_WRD_SYNC_CHG_get( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RX_WRD_SYNC_CHG_get( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_WRD_SYNC_CHG_get", A, 1);
    /* (0x000057c0 bits 23:0) field RX_WRD_SYNC_CHG of register PMC_ILAKEN_REG_RX_WORD_SYNC_CHANGED */
    reg_value = ilkn_reg_RX_WORD_SYNC_CHANGED_read( b_ptr,
                                                    h_ptr,
                                                    A);
    value = (reg_value & ILAKEN_REG_RX_WORD_SYNC_CHANGED_BIT_RX_WRD_SYNC_CHG_MSK) >> ILAKEN_REG_RX_WORD_SYNC_CHANGED_BIT_RX_WRD_SYNC_CHG_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_RX_WRD_SYNC_CHG_get", A, value );

    return value;
}
static INLINE UINT32 ilkn_field_range_RX_WRD_SYNC_CHG_get( ilkn_buffer_t *b_ptr,
                                                           sifd_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_RX_WRD_SYNC_CHG_get( ilkn_buffer_t *b_ptr,
                                                           sifd_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_RX_WRD_SYNC_CHG_get", A, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_RX_WRD_SYNC_CHG_get", stop_bit, start_bit );
    if (stop_bit > 23) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_RX_WRD_SYNC_CHG_get", stop_bit, 23 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 23) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 23;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000057c0 bits 23:0) field RX_WRD_SYNC_CHG of register PMC_ILAKEN_REG_RX_WORD_SYNC_CHANGED */
    reg_value = ilkn_reg_RX_WORD_SYNC_CHANGED_read( b_ptr,
                                                    h_ptr,
                                                    A);
    field_value = (reg_value & ILAKEN_REG_RX_WORD_SYNC_CHANGED_BIT_RX_WRD_SYNC_CHG_MSK)
                  >> ILAKEN_REG_RX_WORD_SYNC_CHANGED_BIT_RX_WRD_SYNC_CHG_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_RX_WORD_SYNC_CHANGED_BIT_RX_WRD_SYNC_CHG_MSK, ILAKEN_REG_RX_WORD_SYNC_CHANGED_BIT_RX_WRD_SYNC_CHG_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_RX_WRD_SYNC_CHG_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 ilkn_field_RX_ALIGN_GOOD_get( ilkn_buffer_t *b_ptr,
                                                   sifd_handle_t *h_ptr,
                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RX_ALIGN_GOOD_get( ilkn_buffer_t *b_ptr,
                                                   sifd_handle_t *h_ptr,
                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_ALIGN_GOOD_get", A, 1);
    /* (0x000057c4 bits 23) field RX_ALIGN_GOOD of register PMC_ILAKEN_REG_RX_ALIGN_STAT */
    reg_value = ilkn_reg_RX_ALIGN_STAT_read(  b_ptr, h_ptr, A);
    value = (reg_value & ILAKEN_REG_RX_ALIGN_STAT_BIT_RX_ALIGN_GOOD_MSK) >> ILAKEN_REG_RX_ALIGN_STAT_BIT_RX_ALIGN_GOOD_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_RX_ALIGN_GOOD_get", A, value );

    return value;
}
static INLINE UINT32 ilkn_field_RX_ALIGN_ERR_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RX_ALIGN_ERR_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_ALIGN_ERR_get", A, 1);
    /* (0x000057c4 bits 22) field RX_ALIGN_ERR of register PMC_ILAKEN_REG_RX_ALIGN_STAT */
    reg_value = ilkn_reg_RX_ALIGN_STAT_read(  b_ptr, h_ptr, A);
    value = (reg_value & ILAKEN_REG_RX_ALIGN_STAT_BIT_RX_ALIGN_ERR_MSK) >> ILAKEN_REG_RX_ALIGN_STAT_BIT_RX_ALIGN_ERR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_RX_ALIGN_ERR_get", A, value );

    return value;
}
static INLINE UINT32 ilkn_field_RX_STATUS_MSG_VALID_ALL_get( ilkn_buffer_t *b_ptr,
                                                             sifd_handle_t *h_ptr,
                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RX_STATUS_MSG_VALID_ALL_get( ilkn_buffer_t *b_ptr,
                                                             sifd_handle_t *h_ptr,
                                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_STATUS_MSG_VALID_ALL_get", A, 1);
    /* (0x000057c8 bits 31) field RX_STATUS_MSG_VALID_ALL of register PMC_ILAKEN_REG_STAT_MESSAGE_RXD */
    reg_value = ilkn_reg_STAT_MESSAGE_RXD_read(  b_ptr, h_ptr, A);
    value = (reg_value & ILAKEN_REG_STAT_MESSAGE_RXD_BIT_RX_STATUS_MSG_VALID_ALL_MSK) >> ILAKEN_REG_STAT_MESSAGE_RXD_BIT_RX_STATUS_MSG_VALID_ALL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_RX_STATUS_MSG_VALID_ALL_get", A, value );

    return value;
}
static INLINE UINT32 ilkn_field_RX_STATUS_MSG_VALID_ANY_get( ilkn_buffer_t *b_ptr,
                                                             sifd_handle_t *h_ptr,
                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RX_STATUS_MSG_VALID_ANY_get( ilkn_buffer_t *b_ptr,
                                                             sifd_handle_t *h_ptr,
                                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_STATUS_MSG_VALID_ANY_get", A, 1);
    /* (0x000057c8 bits 30) field RX_STATUS_MSG_VALID_ANY of register PMC_ILAKEN_REG_STAT_MESSAGE_RXD */
    reg_value = ilkn_reg_STAT_MESSAGE_RXD_read(  b_ptr, h_ptr, A);
    value = (reg_value & ILAKEN_REG_STAT_MESSAGE_RXD_BIT_RX_STATUS_MSG_VALID_ANY_MSK) >> ILAKEN_REG_STAT_MESSAGE_RXD_BIT_RX_STATUS_MSG_VALID_ANY_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_RX_STATUS_MSG_VALID_ANY_get", A, value );

    return value;
}
static INLINE UINT32 ilkn_field_RX_STATUS_MSG_SYNC_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RX_STATUS_MSG_SYNC_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_STATUS_MSG_SYNC_get", A, 1);
    /* (0x000057c8 bits 26) field RX_STATUS_MSG_SYNC of register PMC_ILAKEN_REG_STAT_MESSAGE_RXD */
    reg_value = ilkn_reg_STAT_MESSAGE_RXD_read(  b_ptr, h_ptr, A);
    value = (reg_value & ILAKEN_REG_STAT_MESSAGE_RXD_BIT_RX_STATUS_MSG_SYNC_MSK) >> ILAKEN_REG_STAT_MESSAGE_RXD_BIT_RX_STATUS_MSG_SYNC_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_RX_STATUS_MSG_SYNC_get", A, value );

    return value;
}
static INLINE UINT32 ilkn_field_SIF_ALL_get( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_SIF_ALL_get( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_SIF_ALL_get", A, 1);
    /* (0x000057c8 bits 25) field SIF_ALL of register PMC_ILAKEN_REG_STAT_MESSAGE_RXD */
    reg_value = ilkn_reg_STAT_MESSAGE_RXD_read(  b_ptr, h_ptr, A);
    value = (reg_value & ILAKEN_REG_STAT_MESSAGE_RXD_BIT_SIF_ALL_MSK) >> ILAKEN_REG_STAT_MESSAGE_RXD_BIT_SIF_ALL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_SIF_ALL_get", A, value );

    return value;
}
static INLINE UINT32 ilkn_field_SIF_ANY_get( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_SIF_ANY_get( ilkn_buffer_t *b_ptr,
                                             sifd_handle_t *h_ptr,
                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_SIF_ANY_get", A, 1);
    /* (0x000057c8 bits 24) field SIF_ANY of register PMC_ILAKEN_REG_STAT_MESSAGE_RXD */
    reg_value = ilkn_reg_STAT_MESSAGE_RXD_read(  b_ptr, h_ptr, A);
    value = (reg_value & ILAKEN_REG_STAT_MESSAGE_RXD_BIT_SIF_ANY_MSK) >> ILAKEN_REG_STAT_MESSAGE_RXD_BIT_SIF_ANY_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_SIF_ANY_get", A, value );

    return value;
}
static INLINE UINT32 ilkn_field_RX_SL_get( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RX_SL_get( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_SL_get", A, 1);
    /* (0x000057c8 bits 23:0) field RX_SL of register PMC_ILAKEN_REG_STAT_MESSAGE_RXD */
    reg_value = ilkn_reg_STAT_MESSAGE_RXD_read(  b_ptr, h_ptr, A);
    value = (reg_value & ILAKEN_REG_STAT_MESSAGE_RXD_BIT_RX_SL_MSK) >> ILAKEN_REG_STAT_MESSAGE_RXD_BIT_RX_SL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_RX_SL_get", A, value );

    return value;
}
static INLINE UINT32 ilkn_field_range_RX_SL_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_RX_SL_get( ilkn_buffer_t *b_ptr,
                                                 sifd_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_RX_SL_get", A, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_RX_SL_get", stop_bit, start_bit );
    if (stop_bit > 23) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_RX_SL_get", stop_bit, 23 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 23) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 23;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000057c8 bits 23:0) field RX_SL of register PMC_ILAKEN_REG_STAT_MESSAGE_RXD */
    reg_value = ilkn_reg_STAT_MESSAGE_RXD_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & ILAKEN_REG_STAT_MESSAGE_RXD_BIT_RX_SL_MSK)
                  >> ILAKEN_REG_STAT_MESSAGE_RXD_BIT_RX_SL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_STAT_MESSAGE_RXD_BIT_RX_SL_MSK, ILAKEN_REG_STAT_MESSAGE_RXD_BIT_RX_SL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_RX_SL_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 ilkn_field_RX_WRD_SYNC_LANE_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RX_WRD_SYNC_LANE_get( ilkn_buffer_t *b_ptr,
                                                      sifd_handle_t *h_ptr,
                                                      UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_WRD_SYNC_LANE_get", A, 1);
    /* (0x000057cc bits 23:0) field RX_WRD_SYNC_LANE of register PMC_ILAKEN_REG_RX_WORD_SYNC */
    reg_value = ilkn_reg_RX_WORD_SYNC_read(  b_ptr, h_ptr, A);
    value = (reg_value & ILAKEN_REG_RX_WORD_SYNC_BIT_RX_WRD_SYNC_LANE_MSK) >> ILAKEN_REG_RX_WORD_SYNC_BIT_RX_WRD_SYNC_LANE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_RX_WRD_SYNC_LANE_get", A, value );

    return value;
}
static INLINE UINT32 ilkn_field_range_RX_WRD_SYNC_LANE_get( ilkn_buffer_t *b_ptr,
                                                            sifd_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_RX_WRD_SYNC_LANE_get( ilkn_buffer_t *b_ptr,
                                                            sifd_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_RX_WRD_SYNC_LANE_get", A, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_RX_WRD_SYNC_LANE_get", stop_bit, start_bit );
    if (stop_bit > 23) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_RX_WRD_SYNC_LANE_get", stop_bit, 23 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 23) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 23;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000057cc bits 23:0) field RX_WRD_SYNC_LANE of register PMC_ILAKEN_REG_RX_WORD_SYNC */
    reg_value = ilkn_reg_RX_WORD_SYNC_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & ILAKEN_REG_RX_WORD_SYNC_BIT_RX_WRD_SYNC_LANE_MSK)
                  >> ILAKEN_REG_RX_WORD_SYNC_BIT_RX_WRD_SYNC_LANE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_RX_WORD_SYNC_BIT_RX_WRD_SYNC_LANE_MSK, ILAKEN_REG_RX_WORD_SYNC_BIT_RX_WRD_SYNC_LANE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_RX_WRD_SYNC_LANE_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 ilkn_field_RX_CRC32_CNT_FILL_LANE_get( ilkn_buffer_t *b_ptr,
                                                            sifd_handle_t *h_ptr,
                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RX_CRC32_CNT_FILL_LANE_get( ilkn_buffer_t *b_ptr,
                                                            sifd_handle_t *h_ptr,
                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_CRC32_CNT_FILL_LANE_get", A, 1);
    /* (0x000057d8 bits 23:0) field RX_CRC32_CNT_FILL_LANE of register PMC_ILAKEN_REG_CRC32_CNT_FILL */
    reg_value = ilkn_reg_CRC32_CNT_FILL_read(  b_ptr, h_ptr, A);
    value = (reg_value & ILAKEN_REG_CRC32_CNT_FILL_BIT_RX_CRC32_CNT_FILL_LANE_MSK) >> ILAKEN_REG_CRC32_CNT_FILL_BIT_RX_CRC32_CNT_FILL_LANE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_RX_CRC32_CNT_FILL_LANE_get", A, value );

    return value;
}
static INLINE UINT32 ilkn_field_range_RX_CRC32_CNT_FILL_LANE_get( ilkn_buffer_t *b_ptr,
                                                                  sifd_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_RX_CRC32_CNT_FILL_LANE_get( ilkn_buffer_t *b_ptr,
                                                                  sifd_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_RX_CRC32_CNT_FILL_LANE_get", A, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_RX_CRC32_CNT_FILL_LANE_get", stop_bit, start_bit );
    if (stop_bit > 23) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_RX_CRC32_CNT_FILL_LANE_get", stop_bit, 23 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 23) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 23;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000057d8 bits 23:0) field RX_CRC32_CNT_FILL_LANE of register PMC_ILAKEN_REG_CRC32_CNT_FILL */
    reg_value = ilkn_reg_CRC32_CNT_FILL_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & ILAKEN_REG_CRC32_CNT_FILL_BIT_RX_CRC32_CNT_FILL_LANE_MSK)
                  >> ILAKEN_REG_CRC32_CNT_FILL_BIT_RX_CRC32_CNT_FILL_LANE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_CRC32_CNT_FILL_BIT_RX_CRC32_CNT_FILL_LANE_MSK, ILAKEN_REG_CRC32_CNT_FILL_BIT_RX_CRC32_CNT_FILL_LANE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_RX_CRC32_CNT_FILL_LANE_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 ilkn_field_RX_CRD_CNT_FILL_LANE_get( ilkn_buffer_t *b_ptr,
                                                          sifd_handle_t *h_ptr,
                                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RX_CRD_CNT_FILL_LANE_get( ilkn_buffer_t *b_ptr,
                                                          sifd_handle_t *h_ptr,
                                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_CRD_CNT_FILL_LANE_get", A, 1);
    /* (0x000057dc bits 23:0) field RX_CRD_CNT_FILL_LANE of register PMC_ILAKEN_REG_RX_CDR_LOST_CNT_FILL */
    reg_value = ilkn_reg_RX_CDR_LOST_CNT_FILL_read( b_ptr,
                                                    h_ptr,
                                                    A);
    value = (reg_value & ILAKEN_REG_RX_CDR_LOST_CNT_FILL_BIT_RX_CRD_CNT_FILL_LANE_MSK) >> ILAKEN_REG_RX_CDR_LOST_CNT_FILL_BIT_RX_CRD_CNT_FILL_LANE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_RX_CRD_CNT_FILL_LANE_get", A, value );

    return value;
}
static INLINE UINT32 ilkn_field_range_RX_CRD_CNT_FILL_LANE_get( ilkn_buffer_t *b_ptr,
                                                                sifd_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_RX_CRD_CNT_FILL_LANE_get( ilkn_buffer_t *b_ptr,
                                                                sifd_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_RX_CRD_CNT_FILL_LANE_get", A, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_RX_CRD_CNT_FILL_LANE_get", stop_bit, start_bit );
    if (stop_bit > 23) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_RX_CRD_CNT_FILL_LANE_get", stop_bit, 23 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 23) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 23;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000057dc bits 23:0) field RX_CRD_CNT_FILL_LANE of register PMC_ILAKEN_REG_RX_CDR_LOST_CNT_FILL */
    reg_value = ilkn_reg_RX_CDR_LOST_CNT_FILL_read( b_ptr,
                                                    h_ptr,
                                                    A);
    field_value = (reg_value & ILAKEN_REG_RX_CDR_LOST_CNT_FILL_BIT_RX_CRD_CNT_FILL_LANE_MSK)
                  >> ILAKEN_REG_RX_CDR_LOST_CNT_FILL_BIT_RX_CRD_CNT_FILL_LANE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_RX_CDR_LOST_CNT_FILL_BIT_RX_CRD_CNT_FILL_LANE_MSK, ILAKEN_REG_RX_CDR_LOST_CNT_FILL_BIT_RX_CRD_CNT_FILL_LANE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_RX_CRD_CNT_FILL_LANE_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 ilkn_field_RX_WRD_SYNC_CNT_FILL_LANE_get( ilkn_buffer_t *b_ptr,
                                                               sifd_handle_t *h_ptr,
                                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RX_WRD_SYNC_CNT_FILL_LANE_get( ilkn_buffer_t *b_ptr,
                                                               sifd_handle_t *h_ptr,
                                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RX_WRD_SYNC_CNT_FILL_LANE_get", A, 1);
    /* (0x000057e0 bits 23:0) field RX_WRD_SYNC_CNT_FILL_LANE of register PMC_ILAKEN_REG_RX_WORD_SYNC_CNT_FILL */
    reg_value = ilkn_reg_RX_WORD_SYNC_CNT_FILL_read( b_ptr,
                                                     h_ptr,
                                                     A);
    value = (reg_value & ILAKEN_REG_RX_WORD_SYNC_CNT_FILL_BIT_RX_WRD_SYNC_CNT_FILL_LANE_MSK) >> ILAKEN_REG_RX_WORD_SYNC_CNT_FILL_BIT_RX_WRD_SYNC_CNT_FILL_LANE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "ilkn_field_RX_WRD_SYNC_CNT_FILL_LANE_get", A, value );

    return value;
}
static INLINE UINT32 ilkn_field_range_RX_WRD_SYNC_CNT_FILL_LANE_get( ilkn_buffer_t *b_ptr,
                                                                     sifd_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_RX_WRD_SYNC_CNT_FILL_LANE_get( ilkn_buffer_t *b_ptr,
                                                                     sifd_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_RX_WRD_SYNC_CNT_FILL_LANE_get", A, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_RX_WRD_SYNC_CNT_FILL_LANE_get", stop_bit, start_bit );
    if (stop_bit > 23) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_RX_WRD_SYNC_CNT_FILL_LANE_get", stop_bit, 23 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 23) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 23;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000057e0 bits 23:0) field RX_WRD_SYNC_CNT_FILL_LANE of register PMC_ILAKEN_REG_RX_WORD_SYNC_CNT_FILL */
    reg_value = ilkn_reg_RX_WORD_SYNC_CNT_FILL_read( b_ptr,
                                                     h_ptr,
                                                     A);
    field_value = (reg_value & ILAKEN_REG_RX_WORD_SYNC_CNT_FILL_BIT_RX_WRD_SYNC_CNT_FILL_LANE_MSK)
                  >> ILAKEN_REG_RX_WORD_SYNC_CNT_FILL_BIT_RX_WRD_SYNC_CNT_FILL_LANE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_RX_WORD_SYNC_CNT_FILL_BIT_RX_WRD_SYNC_CNT_FILL_LANE_MSK, ILAKEN_REG_RX_WORD_SYNC_CNT_FILL_BIT_RX_WRD_SYNC_CNT_FILL_LANE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_RX_WRD_SYNC_CNT_FILL_LANE_get", A, start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset status_N_size2
 * ==================================================================================
 */
static INLINE UINT32 ilkn_field_BOVER_get( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_BOVER_get( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BOVER_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BOVER_get", N, 1);
    /* ((0x00005478 + (N) * 0x200) bits 31) field BOVER of register PMC_ILAKEN_REG_CNT_FILL index N=0..1 */
    reg_value = ilkn_reg_CNT_FILL_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_CNT_FILL_BIT_BOVER_MSK) >> ILAKEN_REG_CNT_FILL_BIT_BOVER_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_BOVER_get", A, N, value );

    return value;
}
static INLINE UINT32 ilkn_field_POVER_get( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_POVER_get( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_POVER_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_POVER_get", N, 1);
    /* ((0x00005478 + (N) * 0x200) bits 30) field POVER of register PMC_ILAKEN_REG_CNT_FILL index N=0..1 */
    reg_value = ilkn_reg_CNT_FILL_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_CNT_FILL_BIT_POVER_MSK) >> ILAKEN_REG_CNT_FILL_BIT_POVER_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_POVER_get", A, N, value );

    return value;
}
static INLINE UINT32 ilkn_field_EOVER_get( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_EOVER_get( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_EOVER_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_EOVER_get", N, 1);
    /* ((0x00005478 + (N) * 0x200) bits 29) field EOVER of register PMC_ILAKEN_REG_CNT_FILL index N=0..1 */
    reg_value = ilkn_reg_CNT_FILL_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_CNT_FILL_BIT_EOVER_MSK) >> ILAKEN_REG_CNT_FILL_BIT_EOVER_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_EOVER_get", A, N, value );

    return value;
}
static INLINE UINT32 ilkn_field_BHALF_get( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_BHALF_get( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_BHALF_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_BHALF_get", N, 1);
    /* ((0x00005478 + (N) * 0x200) bits 28) field BHALF of register PMC_ILAKEN_REG_CNT_FILL index N=0..1 */
    reg_value = ilkn_reg_CNT_FILL_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_CNT_FILL_BIT_BHALF_MSK) >> ILAKEN_REG_CNT_FILL_BIT_BHALF_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_BHALF_get", A, N, value );

    return value;
}
static INLINE UINT32 ilkn_field_PHALF_get( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_PHALF_get( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_PHALF_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_PHALF_get", N, 1);
    /* ((0x00005478 + (N) * 0x200) bits 27) field PHALF of register PMC_ILAKEN_REG_CNT_FILL index N=0..1 */
    reg_value = ilkn_reg_CNT_FILL_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_CNT_FILL_BIT_PHALF_MSK) >> ILAKEN_REG_CNT_FILL_BIT_PHALF_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_PHALF_get", A, N, value );

    return value;
}
static INLINE UINT32 ilkn_field_EHALF_get( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_EHALF_get( ilkn_buffer_t *b_ptr,
                                           sifd_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_EHALF_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_EHALF_get", N, 1);
    /* ((0x00005478 + (N) * 0x200) bits 26) field EHALF of register PMC_ILAKEN_REG_CNT_FILL index N=0..1 */
    reg_value = ilkn_reg_CNT_FILL_array_read(  b_ptr, h_ptr, A, N);
    value = (reg_value & ILAKEN_REG_CNT_FILL_BIT_EHALF_MSK) >> ILAKEN_REG_CNT_FILL_BIT_EHALF_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_EHALF_get", A, N, value );

    return value;
}
static INLINE UINT32 ilkn_field_RD_BOVER_get( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RD_BOVER_get( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RD_BOVER_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_RD_BOVER_get", N, 1);
    /* ((0x000054a0 + (N) * 0x200) bits 31) field RD_BOVER of register PMC_ILAKEN_REG_BYTE_CNT_HIGH_READ index N=0..1 */
    reg_value = ilkn_reg_BYTE_CNT_HIGH_READ_array_read( b_ptr,
                                                        h_ptr,
                                                        A,
                                                        N);
    value = (reg_value & ILAKEN_REG_BYTE_CNT_HIGH_READ_BIT_RD_BOVER_MSK) >> ILAKEN_REG_BYTE_CNT_HIGH_READ_BIT_RD_BOVER_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_RD_BOVER_get", A, N, value );

    return value;
}
static INLINE UINT32 ilkn_field_RD_BHALF_get( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RD_BHALF_get( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RD_BHALF_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_RD_BHALF_get", N, 1);
    /* ((0x000054a0 + (N) * 0x200) bits 30) field RD_BHALF of register PMC_ILAKEN_REG_BYTE_CNT_HIGH_READ index N=0..1 */
    reg_value = ilkn_reg_BYTE_CNT_HIGH_READ_array_read( b_ptr,
                                                        h_ptr,
                                                        A,
                                                        N);
    value = (reg_value & ILAKEN_REG_BYTE_CNT_HIGH_READ_BIT_RD_BHALF_MSK) >> ILAKEN_REG_BYTE_CNT_HIGH_READ_BIT_RD_BHALF_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_RD_BHALF_get", A, N, value );

    return value;
}
static INLINE UINT32 ilkn_field_RD_BUNCORR_get( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RD_BUNCORR_get( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RD_BUNCORR_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_RD_BUNCORR_get", N, 1);
    /* ((0x000054a0 + (N) * 0x200) bits 29) field RD_BUNCORR of register PMC_ILAKEN_REG_BYTE_CNT_HIGH_READ index N=0..1 */
    reg_value = ilkn_reg_BYTE_CNT_HIGH_READ_array_read( b_ptr,
                                                        h_ptr,
                                                        A,
                                                        N);
    value = (reg_value & ILAKEN_REG_BYTE_CNT_HIGH_READ_BIT_RD_BUNCORR_MSK) >> ILAKEN_REG_BYTE_CNT_HIGH_READ_BIT_RD_BUNCORR_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_RD_BUNCORR_get", A, N, value );

    return value;
}
static INLINE UINT32 ilkn_field_RD_BCORR_get( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RD_BCORR_get( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RD_BCORR_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_RD_BCORR_get", N, 1);
    /* ((0x000054a0 + (N) * 0x200) bits 28) field RD_BCORR of register PMC_ILAKEN_REG_BYTE_CNT_HIGH_READ index N=0..1 */
    reg_value = ilkn_reg_BYTE_CNT_HIGH_READ_array_read( b_ptr,
                                                        h_ptr,
                                                        A,
                                                        N);
    value = (reg_value & ILAKEN_REG_BYTE_CNT_HIGH_READ_BIT_RD_BCORR_MSK) >> ILAKEN_REG_BYTE_CNT_HIGH_READ_BIT_RD_BCORR_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_RD_BCORR_get", A, N, value );

    return value;
}
static INLINE UINT32 ilkn_field_MSB_BC_RDATA_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_MSB_BC_RDATA_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_MSB_BC_RDATA_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_MSB_BC_RDATA_get", N, 1);
    /* ((0x000054a0 + (N) * 0x200) bits 15:0) bits 0:15 use field MSB_BC_RDATA of register PMC_ILAKEN_REG_BYTE_CNT_HIGH_READ index N=0..1 */
    reg_value = ilkn_reg_BYTE_CNT_HIGH_READ_array_read( b_ptr,
                                                        h_ptr,
                                                        A,
                                                        N);
    value = (reg_value & ILAKEN_REG_BYTE_CNT_HIGH_READ_BIT_MSB_BC_RDATA_MSK) >> ILAKEN_REG_BYTE_CNT_HIGH_READ_BIT_MSB_BC_RDATA_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_MSB_BC_RDATA_get", A, N, value );

    return value;
}
static INLINE UINT32 ilkn_field_range_MSB_BC_RDATA_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_MSB_BC_RDATA_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_MSB_BC_RDATA_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_MSB_BC_RDATA_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_MSB_BC_RDATA_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_MSB_BC_RDATA_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000054a0 + (N) * 0x200) bits 15:0) bits 0:15 use field MSB_BC_RDATA of register PMC_ILAKEN_REG_BYTE_CNT_HIGH_READ index N=0..1 */
    reg_value = ilkn_reg_BYTE_CNT_HIGH_READ_array_read( b_ptr,
                                                        h_ptr,
                                                        A,
                                                        N);
    field_value = (reg_value & ILAKEN_REG_BYTE_CNT_HIGH_READ_BIT_MSB_BC_RDATA_MSK)
                  >> ILAKEN_REG_BYTE_CNT_HIGH_READ_BIT_MSB_BC_RDATA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_BYTE_CNT_HIGH_READ_BIT_MSB_BC_RDATA_MSK, ILAKEN_REG_BYTE_CNT_HIGH_READ_BIT_MSB_BC_RDATA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_MSB_BC_RDATA_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 ilkn_field_LSB_BC_RDATA_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_LSB_BC_RDATA_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_LSB_BC_RDATA_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_LSB_BC_RDATA_get", N, 1);
    /* ((0x000054a4 + (N) * 0x200) bits 31:0) bits 0:31 use field LSB_BC_RDATA of register PMC_ILAKEN_REG_BYTE_CNT_LOW_READ index N=0..1 */
    reg_value = ilkn_reg_BYTE_CNT_LOW_READ_array_read( b_ptr,
                                                       h_ptr,
                                                       A,
                                                       N);
    value = (reg_value & ILAKEN_REG_BYTE_CNT_LOW_READ_BIT_LSB_BC_RDATA_MSK) >> ILAKEN_REG_BYTE_CNT_LOW_READ_BIT_LSB_BC_RDATA_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_LSB_BC_RDATA_get", A, N, value );

    return value;
}
static INLINE UINT32 ilkn_field_range_LSB_BC_RDATA_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_LSB_BC_RDATA_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_LSB_BC_RDATA_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_LSB_BC_RDATA_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_LSB_BC_RDATA_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_LSB_BC_RDATA_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000054a4 + (N) * 0x200) bits 31:0) bits 0:31 use field LSB_BC_RDATA of register PMC_ILAKEN_REG_BYTE_CNT_LOW_READ index N=0..1 */
    reg_value = ilkn_reg_BYTE_CNT_LOW_READ_array_read( b_ptr,
                                                       h_ptr,
                                                       A,
                                                       N);
    field_value = (reg_value & ILAKEN_REG_BYTE_CNT_LOW_READ_BIT_LSB_BC_RDATA_MSK)
                  >> ILAKEN_REG_BYTE_CNT_LOW_READ_BIT_LSB_BC_RDATA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_BYTE_CNT_LOW_READ_BIT_LSB_BC_RDATA_MSK, ILAKEN_REG_BYTE_CNT_LOW_READ_BIT_LSB_BC_RDATA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_LSB_BC_RDATA_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 ilkn_field_RD_POVER_get( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RD_POVER_get( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RD_POVER_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_RD_POVER_get", N, 1);
    /* ((0x000054a8 + (N) * 0x200) bits 31) field RD_POVER of register PMC_ILAKEN_REG_PACKET_CNT_HIGH_READ index N=0..1 */
    reg_value = ilkn_reg_PACKET_CNT_HIGH_READ_array_read( b_ptr,
                                                          h_ptr,
                                                          A,
                                                          N);
    value = (reg_value & ILAKEN_REG_PACKET_CNT_HIGH_READ_BIT_RD_POVER_MSK) >> ILAKEN_REG_PACKET_CNT_HIGH_READ_BIT_RD_POVER_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_RD_POVER_get", A, N, value );

    return value;
}
static INLINE UINT32 ilkn_field_RD_PHALF_get( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RD_PHALF_get( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RD_PHALF_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_RD_PHALF_get", N, 1);
    /* ((0x000054a8 + (N) * 0x200) bits 30) field RD_PHALF of register PMC_ILAKEN_REG_PACKET_CNT_HIGH_READ index N=0..1 */
    reg_value = ilkn_reg_PACKET_CNT_HIGH_READ_array_read( b_ptr,
                                                          h_ptr,
                                                          A,
                                                          N);
    value = (reg_value & ILAKEN_REG_PACKET_CNT_HIGH_READ_BIT_RD_PHALF_MSK) >> ILAKEN_REG_PACKET_CNT_HIGH_READ_BIT_RD_PHALF_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_RD_PHALF_get", A, N, value );

    return value;
}
static INLINE UINT32 ilkn_field_RD_PUNCORR_get( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RD_PUNCORR_get( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RD_PUNCORR_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_RD_PUNCORR_get", N, 1);
    /* ((0x000054a8 + (N) * 0x200) bits 29) field RD_PUNCORR of register PMC_ILAKEN_REG_PACKET_CNT_HIGH_READ index N=0..1 */
    reg_value = ilkn_reg_PACKET_CNT_HIGH_READ_array_read( b_ptr,
                                                          h_ptr,
                                                          A,
                                                          N);
    value = (reg_value & ILAKEN_REG_PACKET_CNT_HIGH_READ_BIT_RD_PUNCORR_MSK) >> ILAKEN_REG_PACKET_CNT_HIGH_READ_BIT_RD_PUNCORR_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_RD_PUNCORR_get", A, N, value );

    return value;
}
static INLINE UINT32 ilkn_field_RD_PCORR_get( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RD_PCORR_get( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RD_PCORR_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_RD_PCORR_get", N, 1);
    /* ((0x000054a8 + (N) * 0x200) bits 28) field RD_PCORR of register PMC_ILAKEN_REG_PACKET_CNT_HIGH_READ index N=0..1 */
    reg_value = ilkn_reg_PACKET_CNT_HIGH_READ_array_read( b_ptr,
                                                          h_ptr,
                                                          A,
                                                          N);
    value = (reg_value & ILAKEN_REG_PACKET_CNT_HIGH_READ_BIT_RD_PCORR_MSK) >> ILAKEN_REG_PACKET_CNT_HIGH_READ_BIT_RD_PCORR_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_RD_PCORR_get", A, N, value );

    return value;
}
static INLINE UINT32 ilkn_field_MSB_PC_RDATA_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_MSB_PC_RDATA_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_MSB_PC_RDATA_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_MSB_PC_RDATA_get", N, 1);
    /* ((0x000054a8 + (N) * 0x200) bits 15:0) bits 0:15 use field MSB_PC_RDATA of register PMC_ILAKEN_REG_PACKET_CNT_HIGH_READ index N=0..1 */
    reg_value = ilkn_reg_PACKET_CNT_HIGH_READ_array_read( b_ptr,
                                                          h_ptr,
                                                          A,
                                                          N);
    value = (reg_value & ILAKEN_REG_PACKET_CNT_HIGH_READ_BIT_MSB_PC_RDATA_MSK) >> ILAKEN_REG_PACKET_CNT_HIGH_READ_BIT_MSB_PC_RDATA_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_MSB_PC_RDATA_get", A, N, value );

    return value;
}
static INLINE UINT32 ilkn_field_range_MSB_PC_RDATA_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_MSB_PC_RDATA_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_MSB_PC_RDATA_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_MSB_PC_RDATA_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_MSB_PC_RDATA_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_MSB_PC_RDATA_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000054a8 + (N) * 0x200) bits 15:0) bits 0:15 use field MSB_PC_RDATA of register PMC_ILAKEN_REG_PACKET_CNT_HIGH_READ index N=0..1 */
    reg_value = ilkn_reg_PACKET_CNT_HIGH_READ_array_read( b_ptr,
                                                          h_ptr,
                                                          A,
                                                          N);
    field_value = (reg_value & ILAKEN_REG_PACKET_CNT_HIGH_READ_BIT_MSB_PC_RDATA_MSK)
                  >> ILAKEN_REG_PACKET_CNT_HIGH_READ_BIT_MSB_PC_RDATA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_PACKET_CNT_HIGH_READ_BIT_MSB_PC_RDATA_MSK, ILAKEN_REG_PACKET_CNT_HIGH_READ_BIT_MSB_PC_RDATA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_MSB_PC_RDATA_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 ilkn_field_LSB_PC_RDATA_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_LSB_PC_RDATA_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_LSB_PC_RDATA_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_LSB_PC_RDATA_get", N, 1);
    /* ((0x000054ac + (N) * 0x200) bits 31:0) bits 0:31 use field LSB_PC_RDATA of register PMC_ILAKEN_REG_PACKET_CNT_LOW_READ index N=0..1 */
    reg_value = ilkn_reg_PACKET_CNT_LOW_READ_array_read( b_ptr,
                                                         h_ptr,
                                                         A,
                                                         N);
    value = (reg_value & ILAKEN_REG_PACKET_CNT_LOW_READ_BIT_LSB_PC_RDATA_MSK) >> ILAKEN_REG_PACKET_CNT_LOW_READ_BIT_LSB_PC_RDATA_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_LSB_PC_RDATA_get", A, N, value );

    return value;
}
static INLINE UINT32 ilkn_field_range_LSB_PC_RDATA_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_LSB_PC_RDATA_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_LSB_PC_RDATA_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_LSB_PC_RDATA_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_LSB_PC_RDATA_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_LSB_PC_RDATA_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000054ac + (N) * 0x200) bits 31:0) bits 0:31 use field LSB_PC_RDATA of register PMC_ILAKEN_REG_PACKET_CNT_LOW_READ index N=0..1 */
    reg_value = ilkn_reg_PACKET_CNT_LOW_READ_array_read( b_ptr,
                                                         h_ptr,
                                                         A,
                                                         N);
    field_value = (reg_value & ILAKEN_REG_PACKET_CNT_LOW_READ_BIT_LSB_PC_RDATA_MSK)
                  >> ILAKEN_REG_PACKET_CNT_LOW_READ_BIT_LSB_PC_RDATA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_PACKET_CNT_LOW_READ_BIT_LSB_PC_RDATA_MSK, ILAKEN_REG_PACKET_CNT_LOW_READ_BIT_LSB_PC_RDATA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_LSB_PC_RDATA_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 ilkn_field_RD_EOVER_get( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RD_EOVER_get( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RD_EOVER_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_RD_EOVER_get", N, 1);
    /* ((0x000054b0 + (N) * 0x200) bits 31) field RD_EOVER of register PMC_ILAKEN_REG_ERR_CNT_HIGH_READ index N=0..1 */
    reg_value = ilkn_reg_ERR_CNT_HIGH_READ_array_read( b_ptr,
                                                       h_ptr,
                                                       A,
                                                       N);
    value = (reg_value & ILAKEN_REG_ERR_CNT_HIGH_READ_BIT_RD_EOVER_MSK) >> ILAKEN_REG_ERR_CNT_HIGH_READ_BIT_RD_EOVER_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_RD_EOVER_get", A, N, value );

    return value;
}
static INLINE UINT32 ilkn_field_RD_EHALF_get( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RD_EHALF_get( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RD_EHALF_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_RD_EHALF_get", N, 1);
    /* ((0x000054b0 + (N) * 0x200) bits 30) field RD_EHALF of register PMC_ILAKEN_REG_ERR_CNT_HIGH_READ index N=0..1 */
    reg_value = ilkn_reg_ERR_CNT_HIGH_READ_array_read( b_ptr,
                                                       h_ptr,
                                                       A,
                                                       N);
    value = (reg_value & ILAKEN_REG_ERR_CNT_HIGH_READ_BIT_RD_EHALF_MSK) >> ILAKEN_REG_ERR_CNT_HIGH_READ_BIT_RD_EHALF_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_RD_EHALF_get", A, N, value );

    return value;
}
static INLINE UINT32 ilkn_field_RD_EUNCORR_get( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RD_EUNCORR_get( ilkn_buffer_t *b_ptr,
                                                sifd_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RD_EUNCORR_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_RD_EUNCORR_get", N, 1);
    /* ((0x000054b0 + (N) * 0x200) bits 29) field RD_EUNCORR of register PMC_ILAKEN_REG_ERR_CNT_HIGH_READ index N=0..1 */
    reg_value = ilkn_reg_ERR_CNT_HIGH_READ_array_read( b_ptr,
                                                       h_ptr,
                                                       A,
                                                       N);
    value = (reg_value & ILAKEN_REG_ERR_CNT_HIGH_READ_BIT_RD_EUNCORR_MSK) >> ILAKEN_REG_ERR_CNT_HIGH_READ_BIT_RD_EUNCORR_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_RD_EUNCORR_get", A, N, value );

    return value;
}
static INLINE UINT32 ilkn_field_RD_ECORR_get( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_RD_ECORR_get( ilkn_buffer_t *b_ptr,
                                              sifd_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_RD_ECORR_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_RD_ECORR_get", N, 1);
    /* ((0x000054b0 + (N) * 0x200) bits 28) field RD_ECORR of register PMC_ILAKEN_REG_ERR_CNT_HIGH_READ index N=0..1 */
    reg_value = ilkn_reg_ERR_CNT_HIGH_READ_array_read( b_ptr,
                                                       h_ptr,
                                                       A,
                                                       N);
    value = (reg_value & ILAKEN_REG_ERR_CNT_HIGH_READ_BIT_RD_ECORR_MSK) >> ILAKEN_REG_ERR_CNT_HIGH_READ_BIT_RD_ECORR_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_RD_ECORR_get", A, N, value );

    return value;
}
static INLINE UINT32 ilkn_field_MSB_EC_RDATA_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_MSB_EC_RDATA_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_MSB_EC_RDATA_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_MSB_EC_RDATA_get", N, 1);
    /* ((0x000054b0 + (N) * 0x200) bits 15:0) field MSB_EC_RDATA of register PMC_ILAKEN_REG_ERR_CNT_HIGH_READ index N=0..1 */
    reg_value = ilkn_reg_ERR_CNT_HIGH_READ_array_read( b_ptr,
                                                       h_ptr,
                                                       A,
                                                       N);
    value = (reg_value & ILAKEN_REG_ERR_CNT_HIGH_READ_BIT_MSB_EC_RDATA_MSK) >> ILAKEN_REG_ERR_CNT_HIGH_READ_BIT_MSB_EC_RDATA_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_MSB_EC_RDATA_get", A, N, value );

    return value;
}
static INLINE UINT32 ilkn_field_range_MSB_EC_RDATA_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_MSB_EC_RDATA_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_MSB_EC_RDATA_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_MSB_EC_RDATA_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_MSB_EC_RDATA_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_MSB_EC_RDATA_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000054b0 + (N) * 0x200) bits 15:0) field MSB_EC_RDATA of register PMC_ILAKEN_REG_ERR_CNT_HIGH_READ index N=0..1 */
    reg_value = ilkn_reg_ERR_CNT_HIGH_READ_array_read( b_ptr,
                                                       h_ptr,
                                                       A,
                                                       N);
    field_value = (reg_value & ILAKEN_REG_ERR_CNT_HIGH_READ_BIT_MSB_EC_RDATA_MSK)
                  >> ILAKEN_REG_ERR_CNT_HIGH_READ_BIT_MSB_EC_RDATA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_ERR_CNT_HIGH_READ_BIT_MSB_EC_RDATA_MSK, ILAKEN_REG_ERR_CNT_HIGH_READ_BIT_MSB_EC_RDATA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_MSB_EC_RDATA_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 ilkn_field_LSB_EC_RDATA_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_LSB_EC_RDATA_get( ilkn_buffer_t *b_ptr,
                                                  sifd_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_LSB_EC_RDATA_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_LSB_EC_RDATA_get", N, 1);
    /* ((0x000054b4 + (N) * 0x200) bits 31:0) field LSB_EC_RDATA of register PMC_ILAKEN_REG_ERR_CNT_LOW_READ index N=0..1 */
    reg_value = ilkn_reg_ERR_CNT_LOW_READ_array_read( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N);
    value = (reg_value & ILAKEN_REG_ERR_CNT_LOW_READ_BIT_LSB_EC_RDATA_MSK) >> ILAKEN_REG_ERR_CNT_LOW_READ_BIT_LSB_EC_RDATA_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_LSB_EC_RDATA_get", A, N, value );

    return value;
}
static INLINE UINT32 ilkn_field_range_LSB_EC_RDATA_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_LSB_EC_RDATA_get( ilkn_buffer_t *b_ptr,
                                                        sifd_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_LSB_EC_RDATA_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_LSB_EC_RDATA_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_LSB_EC_RDATA_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_LSB_EC_RDATA_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000054b4 + (N) * 0x200) bits 31:0) field LSB_EC_RDATA of register PMC_ILAKEN_REG_ERR_CNT_LOW_READ index N=0..1 */
    reg_value = ilkn_reg_ERR_CNT_LOW_READ_array_read( b_ptr,
                                                      h_ptr,
                                                      A,
                                                      N);
    field_value = (reg_value & ILAKEN_REG_ERR_CNT_LOW_READ_BIT_LSB_EC_RDATA_MSK)
                  >> ILAKEN_REG_ERR_CNT_LOW_READ_BIT_LSB_EC_RDATA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_ERR_CNT_LOW_READ_BIT_LSB_EC_RDATA_MSK, ILAKEN_REG_ERR_CNT_LOW_READ_BIT_LSB_EC_RDATA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_LSB_EC_RDATA_get", A, N, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 ilkn_field_CAL_RDATA_get( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_CAL_RDATA_get( ilkn_buffer_t *b_ptr,
                                               sifd_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_CAL_RDATA_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_CAL_RDATA_get", N, 1);
    /* ((0x000054d8 + (N) * 0x200) bits 7:0) field CAL_RDATA of register PMC_ILAKEN_REG_PROGRAMMABLE_CALENDAR_READ_DATA index N=0..1 */
    reg_value = ilkn_reg_PROGRAMMABLE_CALENDAR_READ_DATA_array_read( b_ptr,
                                                                     h_ptr,
                                                                     A,
                                                                     N);
    value = (reg_value & ILAKEN_REG_PROGRAMMABLE_CALENDAR_READ_DATA_BIT_CAL_RDATA_MSK) >> ILAKEN_REG_PROGRAMMABLE_CALENDAR_READ_DATA_BIT_CAL_RDATA_OFF;
    IOLOG( "%s -> A=%d N=%d 0x%08x", "ilkn_field_CAL_RDATA_get", A, N, value );

    return value;
}
static INLINE UINT32 ilkn_field_range_CAL_RDATA_get( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 ilkn_field_range_CAL_RDATA_get( ilkn_buffer_t *b_ptr,
                                                     sifd_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32  N,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 1)
        IO_RANGE_CHECK("%s A is %d but max is %d", "ilkn_field_range_CAL_RDATA_get", A, 1);
    if (N > 1)
        IO_RANGE_CHECK("%s N is %d but max is %d", "ilkn_field_range_CAL_RDATA_get", N, 1);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ilkn_field_range_CAL_RDATA_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ilkn_field_range_CAL_RDATA_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000054d8 + (N) * 0x200) bits 7:0) field CAL_RDATA of register PMC_ILAKEN_REG_PROGRAMMABLE_CALENDAR_READ_DATA index N=0..1 */
    reg_value = ilkn_reg_PROGRAMMABLE_CALENDAR_READ_DATA_array_read( b_ptr,
                                                                     h_ptr,
                                                                     A,
                                                                     N);
    field_value = (reg_value & ILAKEN_REG_PROGRAMMABLE_CALENDAR_READ_DATA_BIT_CAL_RDATA_MSK)
                  >> ILAKEN_REG_PROGRAMMABLE_CALENDAR_READ_DATA_BIT_CAL_RDATA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ILAKEN_REG_PROGRAMMABLE_CALENDAR_READ_DATA_BIT_CAL_RDATA_MSK, ILAKEN_REG_PROGRAMMABLE_CALENDAR_READ_DATA_BIT_CAL_RDATA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d N=%d start_bit=%d stop_bit=%d 0x%08x", "ilkn_field_range_CAL_RDATA_get", A, N, start_bit, stop_bit, value );

    return value;
}

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* _ILKN_IO_INLINE_H */
