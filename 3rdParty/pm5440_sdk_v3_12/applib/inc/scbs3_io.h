/******************************************************************************
 *   COPYRIGHT (C) 2011 PMC-SIERRA, INC. ALL RIGHTS RESERVED.
 * --------------------------------------------------------------------------
 *  This software embodies materials and concepts which are proprietary and
 *  confidential to PMC-Sierra, Inc.
 *  PMC-Sierra distributes this software to its customers pursuant to the
 *  terms and conditions of the Software License Agreement
 *  contained in the text file software.lic that is distributed along with
 *  the software. This software can only be utilized if all
 *  terms and conditions of the Software License Agreement are
 *  accepted. If there are any questions, concerns, or if the
 *  Software License Agreement text file, software.lic, is missing please
 *  contact PMC-Sierra for assistance.
 * -------------------------------------------------------------------------
 *   DESCRIPTION:
 *     contains prototypes for the field accessor functions
 *     and register accessor functions for the scbs3 block
 * 
 *   NOTES:
 *     This file is generated by the script codegen.pm, version 1.1
 *     Do not modify this file.
 * 
 *     The input file is ../src/ioxml/lw20_60_373_generic_reg.xml
 *     block_uri "../docs/rda/lw20_60_373_reg.xml"
 *     block_part_number "LW20_60_373"
 *     block_mnemonic "SCBS3"
 * 
 *****************************************************************************/

/*--------------------------------------------------------------------------------.
 | The pattern for accessing scbs3 io functions is:
 | {
 |     scbs3_buffer_t b[1];
 |     scbs3_buffer_init( b, h );
 |     value = scbs3_field_<FIELD>_get( b, h );
 |     scbs3_field_<FIELD>_set( b, h , value );
 | ...
 |     scbs3_buffer_flush( b );
 | }
 | 
 | alternatively, if register coalescing is not needed then omit the buffer like:
 | 
 | value = scbs3_field_<FIELD>_get( NULL, h );
 | scbs3_field_<FIELD>_set( NULL, h , value );
 | 
 +-------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------------------------------------------------------------------------------.
 | 
 | +---------------------------+
 | | Register 0x00000000 CFG   |
 | +---------------------------+
 | | bit  31  R/W  SCBS_RESET  |
 | | bit  25  R/W  USER_LS     |
 | | bit  24  R/W  CAL_LS      |
 | | bit  16  R/W  SCHD_MODE   |
 | | bit  15  R/W  TOC_SYNC_EN |
 | | bit  8:0 R/W  TOC_SYNC    |
 | +---------------------------+
 | 
 | void   scbs3_field_USER_LS_set        ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 value )
 | UINT32 scbs3_field_USER_LS_get        ( scbs3_buffer_t *b, scbs3_handle_t *h )
 | void   scbs3_field_CAL_LS_set         ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 value )
 | UINT32 scbs3_field_CAL_LS_get         ( scbs3_buffer_t *b, scbs3_handle_t *h )
 | void   scbs3_field_SCHD_MODE_set      ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 value )
 | UINT32 scbs3_field_SCHD_MODE_get      ( scbs3_buffer_t *b, scbs3_handle_t *h )
 | void   scbs3_field_TOC_SYNC_EN_set    ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 value )
 | UINT32 scbs3_field_TOC_SYNC_EN_get    ( scbs3_buffer_t *b, scbs3_handle_t *h )
 | void   scbs3_field_TOC_SYNC_set       ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 value )
 | UINT32 scbs3_field_TOC_SYNC_get       ( scbs3_buffer_t *b, scbs3_handle_t *h )
 | void   scbs3_field_range_TOC_SYNC_set ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 scbs3_field_range_TOC_SYNC_get ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 start_bit, UINT32 stop_bit )
 | void   scbs3_field_SCBS_RESET_set     ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 value )
 | UINT32 scbs3_field_SCBS_RESET_get     ( scbs3_buffer_t *b, scbs3_handle_t *h )
 | 
 | +-----------------------------------+
 | | Register 0x00000004 RAM_PAGE_CTRL |
 | +-----------------------------------+
 | | bit  0 R/W  PAGE_SWAP_REQ         |
 | +-----------------------------------+
 | 
 | void   scbs3_field_PAGE_SWAP_REQ_set ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 value )
 | UINT32 scbs3_field_PAGE_SWAP_REQ_get ( scbs3_buffer_t *b, scbs3_handle_t *h )
 | 
 | +-------------------------------------+
 | | Register 0x00000008 RAM_PAGE_STATUS |
 | +-------------------------------------+
 | | bit  0  R  RAM_ACTIVE_PAGE          |
 | | bit  31 R  WORK_PAGE_SEL_V          |
 | +-------------------------------------+
 | 
 | UINT32 scbs3_field_RAM_ACTIVE_PAGE_get ( scbs3_buffer_t *b, scbs3_handle_t *h )
 | UINT32 scbs3_field_WORK_PAGE_SEL_V_get ( scbs3_buffer_t *b, scbs3_handle_t *h )
 | 
 | +---------------------------------------------------------+
 | | Register (0x00000100 + (N) * 0x4) GROUP_N_STBY_CTXT_MEM |
 | |     N[0..63]                                            |
 | +---------------------------------------------------------+
 | | bit  24:16 R/W  STBY_END_ADDR                           |
 | | bit  8:0   R/W  STBY_START_ADDR                         |
 | +---------------------------------------------------------+
 | 
 | void   scbs3_field_STBY_END_ADDR_set         ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32  N, UINT32 value )
 | UINT32 scbs3_field_STBY_END_ADDR_get         ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32  N )
 | void   scbs3_field_range_STBY_END_ADDR_set   ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32  N, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 scbs3_field_range_STBY_END_ADDR_get   ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32  N, UINT32 start_bit, UINT32 stop_bit )
 | void   scbs3_field_STBY_START_ADDR_set       ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32  N, UINT32 value )
 | UINT32 scbs3_field_STBY_START_ADDR_get       ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32  N )
 | void   scbs3_field_range_STBY_START_ADDR_set ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32  N, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 scbs3_field_range_STBY_START_ADDR_get ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32  N, UINT32 start_bit, UINT32 stop_bit )
 | 
 | +---------------------------------------------------------+
 | | Register (0x00000200 + (N) * 0x4) GROUP_N_ACTV_CTXT_MEM |
 | |     N[0..63]                                            |
 | +---------------------------------------------------------+
 | | bit  24:16 R/W  ACTV_END_ADDR                           |
 | | bit  8:0   R/W  ACTV_START_ADDR                         |
 | +---------------------------------------------------------+
 | 
 | void   scbs3_field_ACTV_END_ADDR_set         ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32  N, UINT32 value )
 | UINT32 scbs3_field_ACTV_END_ADDR_get         ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32  N )
 | void   scbs3_field_range_ACTV_END_ADDR_set   ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32  N, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 scbs3_field_range_ACTV_END_ADDR_get   ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32  N, UINT32 start_bit, UINT32 stop_bit )
 | void   scbs3_field_ACTV_START_ADDR_set       ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32  N, UINT32 value )
 | UINT32 scbs3_field_ACTV_START_ADDR_get       ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32  N )
 | void   scbs3_field_range_ACTV_START_ADDR_set ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32  N, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 scbs3_field_range_ACTV_START_ADDR_get ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32  N, UINT32 start_bit, UINT32 stop_bit )
 | 
 | +-----------------------------------------------------+
 | | Register (0x00000400 + (N) * 0x4) CAL_STBY_PAGE_RAM |
 | |     N[0..127]                                       |
 | +-----------------------------------------------------+
 | | bit  31:0 R/W  STBY_CALENDAR_DAT                    |
 | +-----------------------------------------------------+
 | 
 | void   scbs3_lfield_STBY_CALENDAR_DAT_set       ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 value[128] )
 | void   scbs3_lfield_STBY_CALENDAR_DAT_get       ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 value[128] )
 | void   scbs3_lfield_range_STBY_CALENDAR_DAT_set ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 scbs3_lfield_range_STBY_CALENDAR_DAT_get ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 start_bit, UINT32 stop_bit )
 | 
 | +-----------------------------------------------------+
 | | Register (0x00000600 + (N) * 0x4) CAL_ACTV_PAGE_RAM |
 | |     N[0..127]                                       |
 | +-----------------------------------------------------+
 | | bit  31:0 R/W  ACTV_CALENDAR_DAT                    |
 | +-----------------------------------------------------+
 | 
 | void   scbs3_lfield_ACTV_CALENDAR_DAT_set       ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 value[128] )
 | void   scbs3_lfield_ACTV_CALENDAR_DAT_get       ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 value[128] )
 | void   scbs3_lfield_range_ACTV_CALENDAR_DAT_set ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 scbs3_lfield_range_ACTV_CALENDAR_DAT_get ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 start_bit, UINT32 stop_bit )
 | 
 | +-----------------------------------------------------------+
 | | Register (0x00000800 + (N) * 0x4) USER_BITS_STBY_PAGE_RAM |
 | |     N[0..127]                                             |
 | +-----------------------------------------------------------+
 | | bit  31:0 R/W  STBY_USERBITS_DAT                          |
 | +-----------------------------------------------------------+
 | 
 | void   scbs3_lfield_STBY_USERBITS_DAT_set       ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 value[128] )
 | void   scbs3_lfield_STBY_USERBITS_DAT_get       ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 value[128] )
 | void   scbs3_lfield_range_STBY_USERBITS_DAT_set ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 scbs3_lfield_range_STBY_USERBITS_DAT_get ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 start_bit, UINT32 stop_bit )
 | 
 | +-----------------------------------------------------------+
 | | Register (0x00000a00 + (N) * 0x4) USER_BITS_ACTV_PAGE_RAM |
 | |     N[0..127]                                             |
 | +-----------------------------------------------------------+
 | | bit  31:0 R/W  ACTV_USERBITS_DAT                          |
 | +-----------------------------------------------------------+
 | 
 | void   scbs3_lfield_ACTV_USERBITS_DAT_set       ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 value[128] )
 | void   scbs3_lfield_ACTV_USERBITS_DAT_get       ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 value[128] )
 | void   scbs3_lfield_range_ACTV_USERBITS_DAT_set ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 scbs3_lfield_range_ACTV_USERBITS_DAT_get ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 start_bit, UINT32 stop_bit )
 +--------------------------------------------------------------------------------------------------------------------------------------------------*/
#ifndef _SCBS3_IO_H
#define _SCBS3_IO_H

#include "scbs3_loc.h"
#include "scbs3_regs.h"
#include "scbs3_io_inline.h"


/*------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------.
 | TSB access functions
 +------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
 | These functions do not need to be accessed directly,... just included here for completeness.
 +------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
 | void      scbs3_buffer_init               ( scbs3_buffer_t *b, scbs3_handle_t *h )
 | void      scbs3_buffer_flush              ( scbs3_buffer_t *b )
 | UINT32    scbs3_reg_read                  ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 mem_type, UINT32 reg )
 | void      scbs3_reg_write                 ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 mem_type, UINT32 reg, UINT32 value )
 | void      scbs3_field_set                 ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 mem_type, UINT32 reg, UINT32 mask, UINT32 unused_mask, UINT32 ofs, UINT32 value )
 | void      scbs3_action_on_write_field_set ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 mem_type, UINT32 reg, UINT32 mask, UINT32 ofs, UINT32 value )
 | void      scbs3_burst_read                ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 mem_type, UINT32 reg, UINT32 len, UINT32 *value )
 | void      scbs3_burst_write               ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 mem_type, UINT32 reg, UINT32 len, UINT32 *value )
 | PMC_ERROR scbs3_poll_bit                  ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 mem_type, UINT32 reg, UINT32 mask, UINT32 value, UINT32 max_count, UINT32 *num_failed_polls, UINT32 delay_between_polls_in_microseconds )
 +-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------------------------------------------------------------------------------------.
 | Functions to Access Registers
 +-------------------------------------------------------------------------------------------------------------------------------------------------------+
 | These functions can be used if for some reason the field getters & setters are not appropriate.
 +-------------------------------------------------------------------------------------------------------------------------------------------------------+
 | void   scbs3_reg_CFG_write                                 ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 value )
 | void   scbs3_reg_CFG_field_set                             ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32 scbs3_reg_CFG_read                                  ( scbs3_buffer_t *b, scbs3_handle_t *h )
 | 
 | void   scbs3_reg_RAM_PAGE_CTRL_write                       ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 value )
 | void   scbs3_reg_RAM_PAGE_CTRL_field_set                   ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32 scbs3_reg_RAM_PAGE_CTRL_read                        ( scbs3_buffer_t *b, scbs3_handle_t *h )
 | 
 | void   scbs3_reg_CAL_STBY_PAGE_RAM_array_burst_write       ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 ofs, UINT32 len, UINT32 *value )
 | void   scbs3_reg_CAL_STBY_PAGE_RAM_array_field_set         ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 N, UINT32 mask, UINT32 ofs, UINT32 value )
 | void   scbs3_reg_CAL_STBY_PAGE_RAM_array_burst_read        ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 ofs, UINT32 len, UINT32 *value )
 | UINT32 scbs3_reg_CAL_STBY_PAGE_RAM_array_read              ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 N )
 | 
 | void   scbs3_reg_CAL_ACTV_PAGE_RAM_array_burst_write       ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 ofs, UINT32 len, UINT32 *value )
 | void   scbs3_reg_CAL_ACTV_PAGE_RAM_array_field_set         ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 N, UINT32 mask, UINT32 ofs, UINT32 value )
 | void   scbs3_reg_CAL_ACTV_PAGE_RAM_array_burst_read        ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 ofs, UINT32 len, UINT32 *value )
 | UINT32 scbs3_reg_CAL_ACTV_PAGE_RAM_array_read              ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 N )
 | 
 | void   scbs3_reg_USER_BITS_STBY_PAGE_RAM_array_burst_write ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 ofs, UINT32 len, UINT32 *value )
 | void   scbs3_reg_USER_BITS_STBY_PAGE_RAM_array_field_set   ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 N, UINT32 mask, UINT32 ofs, UINT32 value )
 | void   scbs3_reg_USER_BITS_STBY_PAGE_RAM_array_burst_read  ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 ofs, UINT32 len, UINT32 *value )
 | UINT32 scbs3_reg_USER_BITS_STBY_PAGE_RAM_array_read        ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 N )
 | 
 | void   scbs3_reg_USER_BITS_ACTV_PAGE_RAM_array_burst_write ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 ofs, UINT32 len, UINT32 *value )
 | void   scbs3_reg_USER_BITS_ACTV_PAGE_RAM_array_field_set   ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 N, UINT32 mask, UINT32 ofs, UINT32 value )
 | void   scbs3_reg_USER_BITS_ACTV_PAGE_RAM_array_burst_read  ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 ofs, UINT32 len, UINT32 *value )
 | UINT32 scbs3_reg_USER_BITS_ACTV_PAGE_RAM_array_read        ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32 N )
 | 
 | void   scbs3_reg_GROUP_N_STBY_CTXT_MEM_array_write         ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32  N, UINT32 value )
 | void   scbs3_reg_GROUP_N_STBY_CTXT_MEM_array_field_set     ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32  N, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32 scbs3_reg_GROUP_N_STBY_CTXT_MEM_array_read          ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32  N )
 | 
 | void   scbs3_reg_GROUP_N_ACTV_CTXT_MEM_array_write         ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32  N, UINT32 value )
 | void   scbs3_reg_GROUP_N_ACTV_CTXT_MEM_array_field_set     ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32  N, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32 scbs3_reg_GROUP_N_ACTV_CTXT_MEM_array_read          ( scbs3_buffer_t *b, scbs3_handle_t *h, UINT32  N )
 | 
 | UINT32 scbs3_reg_RAM_PAGE_STATUS_read                      ( scbs3_buffer_t *b, scbs3_handle_t *h )
 | 
 +------------------------------------------------------------------------------------------------------------------------------------------------------*/
#endif /* _SCBS3_IO_H */
