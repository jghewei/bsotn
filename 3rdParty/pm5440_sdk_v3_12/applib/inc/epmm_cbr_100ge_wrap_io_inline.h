/******************************************************************************
 *   COPYRIGHT (C) 2011 PMC-SIERRA, INC. ALL RIGHTS RESERVED.
 * --------------------------------------------------------------------------
 *  This software embodies materials and concepts which are proprietary and
 *  confidential to PMC-Sierra, Inc.
 *  PMC-Sierra distributes this software to its customers pursuant to the
 *  terms and conditions of the Software License Agreement
 *  contained in the text file software.lic that is distributed along with
 *  the software. This software can only be utilized if all
 *  terms and conditions of the Software License Agreement are
 *  accepted. If there are any questions, concerns, or if the
 *  Software License Agreement text file, software.lic, is missing please
 *  contact PMC-Sierra for assistance.
 * -------------------------------------------------------------------------
 *   DESCRIPTION:
 *     contains the inline implementation of all the field accessor functions
 *     and register accessor functions for the epmm_cbr_100ge_wrap block
 * 
 *   NOTES:
 *     This file is generated by the script codegen.pm, version 1.1
 *     Do not modify this file.
 * 
 *     The input file is ../src/ioxml/pm30_60_204_map.xml
 *     block_uri "../lw30_60_218_reg.xml"
 *     block_part_number "LW30_60_218"
 *     block_mnemonic "CBR_100GE_WRAP"
 * 
 *****************************************************************************/
#ifndef _EPMM_CBR_100GE_WRAP_IO_INLINE_H
#define _EPMM_CBR_100GE_WRAP_IO_INLINE_H

#include "epmm_loc.h"
#include "epmm_cbr_100ge_wrap_regs.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * ==================================================================================
 *         tsb level structure and access functions for epmm_cbr_100ge_wrap
 * ==================================================================================
 */
/* if logging is disabled then so is IO_LOGGING */
#ifndef NO_IO_LOGGING
# ifdef LOGGING_DISABLED
#  define NO_IO_LOGGING
# endif
#endif

/* log messages in the generated files log the caller's file/line/function instead of itself.*/
#ifndef IOLOG
# ifdef NO_IO_LOGGING
#  define IOLOG(...)
# else
#  define IOLOG(...) vaLog( LOG_CALLER_ARGS __VA_ARGS__)
# endif
#endif
#ifndef IO_RANGE_CHECK
# ifdef NO_IO_LOGGING
#  define IO_RANGE_CHECK(...)
# else
#  define IO_RANGE_CHECK(...) vaLog( LOG_CALLER_ARGS "** ERROR: range check ** " __VA_ARGS__)
# endif
#endif
#ifndef IOLOG_DATA
# ifdef NO_IO_LOGGING
#  define IOLOG_DATA(...)
# else
#  define IOLOG_DATA(...) vaLogData( LOG_CALLER_ARGS __VA_ARGS__)
# endif
#endif
typedef struct {
    coalesce_buffer_t coalesce_handle[1]; /* only used if register coalescing is enabled */
    epmm_handle_t * h;
    pmc_sys_handle_t sys_handle;
    const UINT32 base_address;
    /* maybe eventually need to add some fields here per io handle */
} epmm_cbr_100ge_wrap_buffer_t;

#ifndef epmm_cbr_100ge_wrap_buffer_init
#define epmm_cbr_100ge_wrap_buffer_init( b, h ) \
       _epmm_cbr_100ge_wrap_buffer_init( LOG_CALLER b, h )
#endif
static INLINE void _epmm_cbr_100ge_wrap_buffer_init( LOG_CALLER_DEFN epmm_cbr_100ge_wrap_buffer_t *b, epmm_handle_t *h )
{
    b->h                        = h;
    b->sys_handle               = ((pmc_handle_t *)h)->sys_handle;
    *(UINT32 *)&b->base_address = ((pmc_handle_t *)h)->base_address;
    /* currently this just checks that the previous function remembered to flush. */
    l1sys_init( b->coalesce_handle, (void**)b->sys_handle );
    IOLOG( "%s", "epmm_cbr_100ge_wrap_buffer_init");
    
}

#ifndef epmm_cbr_100ge_wrap_buffer_flush
#define epmm_cbr_100ge_wrap_buffer_flush( b ) \
       _epmm_cbr_100ge_wrap_buffer_flush( LOG_CALLER b )
#endif

/*
* flush any changed fields to the register file and invalidate the read cache.
*/
static INLINE void _epmm_cbr_100ge_wrap_buffer_flush( LOG_CALLER_DEFN epmm_cbr_100ge_wrap_buffer_t *b )
{
    IOLOG( "epmm_cbr_100ge_wrap_buffer_flush" );
    l1sys_flush( b->coalesce_handle );
}
static INLINE UINT32 epmm_cbr_100ge_wrap_reg_read( epmm_cbr_100ge_wrap_buffer_t *b,
                                                   epmm_handle_t *h,
                                                   UINT32 mem_type,
                                                   UINT32 reg )
{
    UINT32 value;
    if (b != NULL)
        value = l1sys_reg_read( b->coalesce_handle,
                                mem_type,
                                b->base_address,
                                reg);
    else
        value = l2sys_reg_read( ((pmc_handle_t *)h)->sys_handle,
                                mem_type,
                                ((pmc_handle_t *)h)->base_address + reg);
    return value;
}
static INLINE void epmm_cbr_100ge_wrap_reg_write( epmm_cbr_100ge_wrap_buffer_t *b,
                                                  epmm_handle_t *h,
                                                  UINT32 mem_type,
                                                  UINT32 reg,
                                                  UINT32 value )
{
    if (b != NULL)
        l1sys_reg_write( b->coalesce_handle,
                         mem_type,
                         b->base_address,
                         reg,
                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h)->sys_handle,
                         mem_type,
                         ((pmc_handle_t *)h)->base_address + reg,
                         value);
}

static INLINE void epmm_cbr_100ge_wrap_field_set( epmm_cbr_100ge_wrap_buffer_t *b,
                                                  epmm_handle_t *h,
                                                  UINT32 mem_type,
                                                  UINT32 reg,
                                                  UINT32 mask,
                                                  UINT32 unused_mask,
                                                  UINT32 ofs,
                                                  UINT32 value )
{
    if (b != NULL)
        l1sys_field_set2( b->coalesce_handle,
                          mem_type,
                          b->base_address,
                          reg,
                          mask,
                          unused_mask,
                          ofs,
                          value);
    else
    {
        if ((mask | unused_mask) == 0xffffffff)
        {
            l2sys_reg_write( ((pmc_handle_t *)h)->sys_handle,
                             mem_type,
                             ((pmc_handle_t *)h)->base_address + reg,
                             value<<ofs);
        }
        else
        {
            l2sys_reg_read_modify_write( ((pmc_handle_t *)h)->sys_handle,
                                         mem_type,
                                         ((pmc_handle_t *)h)->base_address + reg,
                                         mask,
                                         value<<ofs);
        }
    }
}

static INLINE void epmm_cbr_100ge_wrap_action_on_write_field_set( epmm_cbr_100ge_wrap_buffer_t *b,
                                                                  epmm_handle_t *h,
                                                                  UINT32 mem_type,
                                                                  UINT32 reg,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value )
{
    if (b != NULL)
        l1sys_action_on_write_field_set( b->coalesce_handle,
                                         mem_type,
                                         b->base_address,
                                         reg,
                                         mask,
                                         ofs,
                                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h)->sys_handle,
                         mem_type,
                         ((pmc_handle_t *)h)->base_address + reg,
                         value<<ofs);
}

static INLINE void epmm_cbr_100ge_wrap_burst_read( epmm_cbr_100ge_wrap_buffer_t *b,
                                                   epmm_handle_t *h,
                                                   UINT32 mem_type,
                                                   UINT32 reg,
                                                   UINT32 len,
                                                   UINT32 *value )
{
    if (b != NULL)
        l1sys_burst_read( b->coalesce_handle,
                          mem_type,
                          b->base_address,
                          reg,
                          len,
                          value);
    else
        l2sys_burst_read( ((pmc_handle_t *)h)->sys_handle,
                          mem_type,
                          ((pmc_handle_t *)h)->base_address + reg,
                          len,
                          value);
}

static INLINE void epmm_cbr_100ge_wrap_burst_write( epmm_cbr_100ge_wrap_buffer_t *b,
                                                    epmm_handle_t *h,
                                                    UINT32 mem_type,
                                                    UINT32 reg,
                                                    UINT32 len,
                                                    UINT32 *value )
{
    if (b != NULL)
        l1sys_burst_write( b->coalesce_handle,
                           mem_type,
                           b->base_address,
                           reg,
                           len,
                           value);
    else
        l2sys_burst_write( ((pmc_handle_t *)h)->sys_handle,
                           mem_type,
                           ((pmc_handle_t *)h)->base_address + reg,
                           len,
                           value);
}

static INLINE PMC_ERROR epmm_cbr_100ge_wrap_poll_bit( epmm_cbr_100ge_wrap_buffer_t *b,
                                                      epmm_handle_t *h,
                                                      UINT32 mem_type,
                                                      UINT32 reg,
                                                      UINT32 mask,
                                                      UINT32 value,
                                                      UINT32 max_count,
                                                      UINT32 *num_failed_polls,
                                                      UINT32 delay_between_polls_in_microseconds )
{
    if (b != NULL)
        return l1sys_poll_bit( b->coalesce_handle,
                               mem_type,
                               b->base_address,
                               reg,
                               mask,
                               value,
                               max_count,
                               num_failed_polls,
                               delay_between_polls_in_microseconds);
    else
        return l2sys_poll_bit( ((pmc_handle_t *)h)->sys_handle,
                               mem_type,
                               ((pmc_handle_t *)h)->base_address + reg,
                               mask,
                               value,
                               max_count,
                               num_failed_polls,
                               delay_between_polls_in_microseconds);
}

/*
 * ==================================================================================
 *                 register access functions for epmm_cbr_100ge_wrap
 * ==================================================================================
 */

/**
 * accessor functions for register PMC_CBR_100GE_WRAP_REG_CFG
 *
 * Register: Configuration
 * Offset: 0x00002000 CFG
 *
 * bits 0 default 1 SW_RST
 */

#ifndef epmm_cbr_100ge_wrap_reg_CFG_write
#define epmm_cbr_100ge_wrap_reg_CFG_write( b, h, value ) \
       _epmm_cbr_100ge_wrap_reg_CFG_write( LOG_CALLER b, h, value )
#endif
static INLINE void _epmm_cbr_100ge_wrap_reg_CFG_write( LOG_CALLER_DEFN
                                                       epmm_cbr_100ge_wrap_buffer_t *b,
                                                       epmm_handle_t *h,
                                                       UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "epmm_cbr_100ge_wrap_reg_CFG_write", value );
    epmm_cbr_100ge_wrap_reg_write( b,
                                   h,
                                   MEM_TYPE_CONFIG,
                                   PMC_CBR_100GE_WRAP_REG_CFG,
                                   value);
}


#ifndef epmm_cbr_100ge_wrap_reg_CFG_field_set
#define epmm_cbr_100ge_wrap_reg_CFG_field_set( b, h, mask, ofs, value ) \
       _epmm_cbr_100ge_wrap_reg_CFG_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _epmm_cbr_100ge_wrap_reg_CFG_field_set( LOG_CALLER_DEFN
                                                           epmm_cbr_100ge_wrap_buffer_t *b,
                                                           epmm_handle_t *h,
                                                           UINT32 mask,
                                                           UINT32 ofs,
                                                           UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "epmm_cbr_100ge_wrap_reg_CFG_field_set", mask, ofs, value );
    epmm_cbr_100ge_wrap_field_set( b,
                                   h,
                                   MEM_TYPE_CONFIG,
                                   PMC_CBR_100GE_WRAP_REG_CFG,
                                   mask,
                                   PMC_CBR_100GE_WRAP_REG_CFG_UNUSED_MASK,
                                   ofs,
                                   value);

}


#ifndef epmm_cbr_100ge_wrap_reg_CFG_read
#define epmm_cbr_100ge_wrap_reg_CFG_read( b, h ) \
       _epmm_cbr_100ge_wrap_reg_CFG_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _epmm_cbr_100ge_wrap_reg_CFG_read( LOG_CALLER_DEFN epmm_cbr_100ge_wrap_buffer_t *b, epmm_handle_t *h )
{
    UINT32 reg_value;

    reg_value = epmm_cbr_100ge_wrap_reg_read( b,
                                              h,
                                              MEM_TYPE_CONFIG,
                                              PMC_CBR_100GE_WRAP_REG_CFG);

    IOLOG( "%s -> 0x%08x;", "epmm_cbr_100ge_wrap_reg_CFG_read", reg_value);
    return reg_value;
}

/*
 * ==================================================================================
 *                  Parameter Access Functions for Paramset config
 * ==================================================================================
 */

#ifndef epmm_cbr_100ge_wrap_field_SW_RST_set
#define epmm_cbr_100ge_wrap_field_SW_RST_set( b, h, value ) \
       _epmm_cbr_100ge_wrap_field_SW_RST_set( LOG_CALLER b, h, value )
#endif
static INLINE void _epmm_cbr_100ge_wrap_field_SW_RST_set( LOG_CALLER_DEFN
                                                          epmm_cbr_100ge_wrap_buffer_t *b,
                                                          epmm_handle_t *h,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "epmm_cbr_100ge_wrap_field_SW_RST_set", value, 1);
    IOLOG( "%s <= 0x%08x", "epmm_cbr_100ge_wrap_field_SW_RST_set", value );

    /* (0x00002000 bits 0) field SW_RST of register PMC_CBR_100GE_WRAP_REG_CFG */
    _epmm_cbr_100ge_wrap_reg_CFG_field_set( LOG_CALLER_ARGS
                                            b,
                                            h,
                                            CBR_100GE_WRAP_REG_CFG_BIT_SW_RST_MSK,
                                            CBR_100GE_WRAP_REG_CFG_BIT_SW_RST_OFF,
                                            value);
}


#ifndef epmm_cbr_100ge_wrap_field_SW_RST_get
#define epmm_cbr_100ge_wrap_field_SW_RST_get( b, h ) \
       _epmm_cbr_100ge_wrap_field_SW_RST_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _epmm_cbr_100ge_wrap_field_SW_RST_get( LOG_CALLER_DEFN epmm_cbr_100ge_wrap_buffer_t *b, epmm_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00002000 bits 0) field SW_RST of register PMC_CBR_100GE_WRAP_REG_CFG */
    reg_value = _epmm_cbr_100ge_wrap_reg_CFG_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & CBR_100GE_WRAP_REG_CFG_BIT_SW_RST_MSK) >> CBR_100GE_WRAP_REG_CFG_BIT_SW_RST_OFF;
    IOLOG( "%s -> 0x%08x", "epmm_cbr_100ge_wrap_field_SW_RST_get", value );

    return value;
}

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* _EPMM_CBR_100GE_WRAP_IO_INLINE_H */
