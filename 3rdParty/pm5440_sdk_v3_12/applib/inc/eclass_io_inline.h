/******************************************************************************
 *   COPYRIGHT (C) 2013 PMC-SIERRA, INC. ALL RIGHTS RESERVED.
 * --------------------------------------------------------------------------
 *  This software embodies materials and concepts which are proprietary and
 *  confidential to PMC-Sierra, Inc.
 *  PMC-Sierra distributes this software to its customers pursuant to the
 *  terms and conditions of the Software License Agreement
 *  contained in the text file software.lic that is distributed along with
 *  the software. This software can only be utilized if all
 *  terms and conditions of the Software License Agreement are
 *  accepted. If there are any questions, concerns, or if the
 *  Software License Agreement text file, software.lic, is missing please
 *  contact PMC-Sierra for assistance.
 * -------------------------------------------------------------------------
 *   DESCRIPTION:
 *     contains the inline implementation of all the field accessor functions
 *     and register accessor functions for the eclass block
 *****************************************************************************/
#ifndef _ECLASS_IO_INLINE_H
#define _ECLASS_IO_INLINE_H

#include "eclass_loc.h"
#include "eclass_regs.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define ECLASS_IO_VERSION 2

/*
 * ==================================================================================
 *  tsb level structure and access functions for eclass
 * ==================================================================================
 */
/* if logging is disabled then so is IO_LOGGING */
#ifndef NO_IO_LOGGING
# ifdef LOGGING_DISABLED
#  define NO_IO_LOGGING
# endif
#endif

/* log messages in the generated files log the caller's file/line/function instead of itself.*/
#ifndef IOLOG
# ifdef NO_IO_LOGGING
#  define IOLOG(...)
# else
#  define IOLOG(...) LOG( __VA_ARGS__)
# endif
#endif
#ifndef IO_RANGE_CHECK
# ifdef NO_IO_LOGGING
#  define IO_RANGE_CHECK(...)
# else
#  define IO_RANGE_CHECK(...) LOG( "** range check ** " __VA_ARGS__)
# endif
#endif
#ifndef IOLOG_DATA
# ifdef NO_IO_LOGGING
#  define IOLOG_DATA(...)
# else
#  define IOLOG_DATA(...) LOG_DATA( __VA_ARGS__)
# endif
#endif
typedef struct {
    coalesce_buffer_t coalesce_handle[1]; /* only used if register coalescing is enabled */
    eclass_handle_t * h_ptr;
    pmc_sys_handle_t * sys_handle;
    PMC_VAR_CONST UINT32 base_address;
    /* maybe eventually need to add some fields here per io handle */
} eclass_buffer_t;
static INLINE void eclass_buffer_init( eclass_buffer_t *b_ptr, eclass_handle_t *h_ptr ) ALWAYS_INLINE;
static INLINE void eclass_buffer_init( eclass_buffer_t *b_ptr, eclass_handle_t *h_ptr )
{
    b_ptr->h_ptr                    = h_ptr;
    b_ptr->sys_handle               = ((pmc_handle_t *)h_ptr)->sys_handle;
    *(UINT32 *)&b_ptr->base_address = ((pmc_handle_t *)h_ptr)->base_address;
    /* currently this just checks that the previous function remembered to flush. */
    l1sys_init( b_ptr->coalesce_handle, b_ptr->sys_handle );
    IOLOG( "%s", "eclass_buffer_init");
    
}

/* flush any changed fields to the register file and invalidate the read cache. */
static INLINE void eclass_buffer_flush( eclass_buffer_t *b_ptr ) ALWAYS_INLINE;
static INLINE void eclass_buffer_flush( eclass_buffer_t *b_ptr )
{
    IOLOG( "eclass_buffer_flush" );
    l1sys_flush( b_ptr->coalesce_handle );
}
static INLINE UINT32 eclass_reg_read( eclass_buffer_t *b_ptr,
                                      eclass_handle_t *h_ptr,
                                      UINT32 mem_type,
                                      UINT32 reg ) ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_read( eclass_buffer_t *b_ptr,
                                      eclass_handle_t *h_ptr,
                                      UINT32 mem_type,
                                      UINT32 reg )
{
    UINT32 value;
    if (b_ptr != NULL)
        value = l1sys_reg_read( b_ptr->coalesce_handle,
                                mem_type,
                                b_ptr->base_address,
                                reg);
    else
        value = l2sys_reg_read( ((pmc_handle_t *)h_ptr)->sys_handle,
                                mem_type,
                                ((pmc_handle_t *)h_ptr)->base_address + reg);
    return value;
}
static INLINE void eclass_reg_write( eclass_buffer_t *b_ptr,
                                     eclass_handle_t *h_ptr,
                                     UINT32 mem_type,
                                     UINT32 reg,
                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_write( eclass_buffer_t *b_ptr,
                                     eclass_handle_t *h_ptr,
                                     UINT32 mem_type,
                                     UINT32 reg,
                                     UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_reg_write( b_ptr->coalesce_handle,
                         mem_type,
                         b_ptr->base_address,
                         reg,
                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                         mem_type,
                         ((pmc_handle_t *)h_ptr)->base_address + reg,
                         value);
}

static INLINE void eclass_field_set( eclass_buffer_t *b_ptr,
                                     eclass_handle_t *h_ptr,
                                     UINT32 mem_type,
                                     UINT32 reg,
                                     UINT32 mask,
                                     UINT32 unused_mask,
                                     UINT32 ofs,
                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_set( eclass_buffer_t *b_ptr,
                                     eclass_handle_t *h_ptr,
                                     UINT32 mem_type,
                                     UINT32 reg,
                                     UINT32 mask,
                                     UINT32 unused_mask,
                                     UINT32 ofs,
                                     UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_field_set2( b_ptr->coalesce_handle,
                          mem_type,
                          b_ptr->base_address,
                          reg,
                          mask,
                          unused_mask,
                          ofs,
                          value);
    else
    {
        if ((mask | unused_mask) == 0xffffffff)
        {
            l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                             mem_type,
                             ((pmc_handle_t *)h_ptr)->base_address + reg,
                             value<<ofs);
        }
        else
        {
            l2sys_reg_read_modify_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                                         mem_type,
                                         ((pmc_handle_t *)h_ptr)->base_address + reg,
                                         mask,
                                         value<<ofs);
        }
    }
}

static INLINE void eclass_action_on_write_field_set( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32 mem_type,
                                                     UINT32 reg,
                                                     UINT32 mask,
                                                     UINT32 ofs,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_action_on_write_field_set( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32 mem_type,
                                                     UINT32 reg,
                                                     UINT32 mask,
                                                     UINT32 ofs,
                                                     UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_action_on_write_field_set( b_ptr->coalesce_handle,
                                         mem_type,
                                         b_ptr->base_address,
                                         reg,
                                         mask,
                                         ofs,
                                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                         mem_type,
                         ((pmc_handle_t *)h_ptr)->base_address + reg,
                         value<<ofs);
}

static INLINE void eclass_burst_read( eclass_buffer_t *b_ptr,
                                      eclass_handle_t *h_ptr,
                                      UINT32 mem_type,
                                      UINT32 reg,
                                      UINT32 len,
                                      UINT32 *value ) ALWAYS_INLINE;
static INLINE void eclass_burst_read( eclass_buffer_t *b_ptr,
                                      eclass_handle_t *h_ptr,
                                      UINT32 mem_type,
                                      UINT32 reg,
                                      UINT32 len,
                                      UINT32 *value )
{
    if (b_ptr != NULL)
        l1sys_burst_read( b_ptr->coalesce_handle,
                          mem_type,
                          b_ptr->base_address,
                          reg,
                          len,
                          value);
    else
        l2sys_burst_read( ((pmc_handle_t *)h_ptr)->sys_handle,
                          mem_type,
                          ((pmc_handle_t *)h_ptr)->base_address + reg,
                          len,
                          value);
}

static INLINE void eclass_burst_write( eclass_buffer_t *b_ptr,
                                       eclass_handle_t *h_ptr,
                                       UINT32 mem_type,
                                       UINT32 reg,
                                       UINT32 len,
                                       UINT32 *value ) ALWAYS_INLINE;
static INLINE void eclass_burst_write( eclass_buffer_t *b_ptr,
                                       eclass_handle_t *h_ptr,
                                       UINT32 mem_type,
                                       UINT32 reg,
                                       UINT32 len,
                                       UINT32 *value )
{
    if (b_ptr != NULL)
        l1sys_burst_write( b_ptr->coalesce_handle,
                           mem_type,
                           b_ptr->base_address,
                           reg,
                           len,
                           value);
    else
        l2sys_burst_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                           mem_type,
                           ((pmc_handle_t *)h_ptr)->base_address + reg,
                           len,
                           value);
}

static INLINE PMC_POLL_RETURN_TYPE eclass_poll( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32 mem_type,
                                                UINT32 reg,
                                                UINT32 mask,
                                                UINT32 value,
                                                PMC_POLL_COMPARISON_TYPE cmp,
                                                UINT32 max_count,
                                                UINT32 *num_failed_polls,
                                                UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE eclass_poll( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32 mem_type,
                                                UINT32 reg,
                                                UINT32 mask,
                                                UINT32 value,
                                                PMC_POLL_COMPARISON_TYPE cmp,
                                                UINT32 max_count,
                                                UINT32 *num_failed_polls,
                                                UINT32 delay_between_polls_in_microseconds )
{
    if (b_ptr != NULL)
        return l1sys_poll( b_ptr->coalesce_handle,
                           mem_type,
                           b_ptr->base_address,
                           reg,
                           mask,
                           value,
                           cmp,
                           max_count,
                           num_failed_polls,
                           delay_between_polls_in_microseconds);
    else
        return l2sys_poll( ((pmc_handle_t *)h_ptr)->sys_handle,
                           mem_type,
                           ((pmc_handle_t *)h_ptr)->base_address + reg,
                           mask,
                           value,
                           cmp,
                           max_count,
                           num_failed_polls,
                           delay_between_polls_in_microseconds);
}

/*
 * ==================================================================================
 *  register access functions for eclass
 * ==================================================================================
 */

static INLINE void eclass_reg_ECLASS120_LINK_EN_write( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ECLASS120_LINK_EN_write( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_ECLASS120_LINK_EN_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ECLASS120_REG_ECLASS120_LINK_EN,
                      value);
}

static INLINE void eclass_reg_ECLASS120_LINK_EN_field_set( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32 mask,
                                                           UINT32 ofs,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ECLASS120_LINK_EN_field_set( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32 mask,
                                                           UINT32 ofs,
                                                           UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_ECLASS120_LINK_EN_field_set", mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ECLASS120_REG_ECLASS120_LINK_EN,
                      mask,
                      PMC_ECLASS120_REG_ECLASS120_LINK_EN_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_ECLASS120_LINK_EN_read( eclass_buffer_t *b_ptr, eclass_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_ECLASS120_LINK_EN_read( eclass_buffer_t *b_ptr, eclass_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ECLASS120_REG_ECLASS120_LINK_EN);

    IOLOG( "%s -> 0x%08x;", "eclass_reg_ECLASS120_LINK_EN_read", reg_value);
    return reg_value;
}

static INLINE void eclass_reg_NO_MATCH_EN_write( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_NO_MATCH_EN_write( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_NO_MATCH_EN_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ECLASS120_REG_NO_MATCH_EN,
                      value);
}

static INLINE void eclass_reg_NO_MATCH_EN_field_set( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32 mask,
                                                     UINT32 ofs,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_NO_MATCH_EN_field_set( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32 mask,
                                                     UINT32 ofs,
                                                     UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_NO_MATCH_EN_field_set", mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ECLASS120_REG_NO_MATCH_EN,
                      mask,
                      PMC_ECLASS120_REG_NO_MATCH_EN_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_NO_MATCH_EN_read( eclass_buffer_t *b_ptr, eclass_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_NO_MATCH_EN_read( eclass_buffer_t *b_ptr, eclass_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ECLASS120_REG_NO_MATCH_EN);

    IOLOG( "%s -> 0x%08x;", "eclass_reg_NO_MATCH_EN_read", reg_value);
    return reg_value;
}

static INLINE void eclass_reg_FOUT_COMB_ORIN_1_array_burst_write( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32 ofs,
                                                                  UINT32 len,
                                                                  UINT32 *value ) ALWAYS_INLINE;
static INLINE void eclass_reg_FOUT_COMB_ORIN_1_array_burst_write( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32 ofs,
                                                                  UINT32 len,
                                                                  UINT32 *value )
{
    if (len + ofs > 16)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "eclass_reg_FOUT_COMB_ORIN_1_array_burst_write", ofs, len, 16 );
    IOLOG( "%s of %d words ofs=%d len=%d", "eclass_reg_FOUT_COMB_ORIN_1_array_burst_write", 16, ofs, len);
    eclass_burst_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_ECLASS120_REG_FOUT_COMB_ORIN_1(ofs),
                        len,
                        value);

}

static INLINE void eclass_reg_FOUT_COMB_ORIN_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32 N,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_FOUT_COMB_ORIN_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32 N,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_FOUT_COMB_ORIN_1_array_field_set", mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ECLASS120_REG_FOUT_COMB_ORIN_1(N),
                      mask,
                      PMC_ECLASS120_REG_FOUT_COMB_ORIN_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE void eclass_reg_FOUT_COMB_ORIN_1_array_burst_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32 ofs,
                                                                 UINT32 len,
                                                                 UINT32 *value ) ALWAYS_INLINE;
static INLINE void eclass_reg_FOUT_COMB_ORIN_1_array_burst_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32 ofs,
                                                                 UINT32 len,
                                                                 UINT32 *value )
{
    if (len + ofs > 16)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "eclass_reg_FOUT_COMB_ORIN_1_array_burst_read", ofs, len, 16 );
    eclass_burst_read( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_ECLASS120_REG_FOUT_COMB_ORIN_1(ofs),
                       len,
                       value);

    IOLOG( "%s of %d words ofs=%d len=%d", "eclass_reg_FOUT_COMB_ORIN_1_array_burst_read", 16, ofs, len);
}

static INLINE UINT32 eclass_reg_FOUT_COMB_ORIN_1_array_read( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32 N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_FOUT_COMB_ORIN_1_array_read( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32 N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ECLASS120_REG_FOUT_COMB_ORIN_1(N));

    IOLOG( "%s -> 0x%08x;", "eclass_reg_FOUT_COMB_ORIN_1_array_read", reg_value);
    return reg_value;
}

static INLINE void eclass_reg_FOUT_COMB_OROUT_1_array_burst_write( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32 ofs,
                                                                   UINT32 len,
                                                                   UINT32 *value ) ALWAYS_INLINE;
static INLINE void eclass_reg_FOUT_COMB_OROUT_1_array_burst_write( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32 ofs,
                                                                   UINT32 len,
                                                                   UINT32 *value )
{
    if (len + ofs > 26)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "eclass_reg_FOUT_COMB_OROUT_1_array_burst_write", ofs, len, 26 );
    IOLOG( "%s of %d words ofs=%d len=%d", "eclass_reg_FOUT_COMB_OROUT_1_array_burst_write", 26, ofs, len);
    eclass_burst_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_ECLASS120_REG_FOUT_COMB_OROUT_1(ofs),
                        len,
                        value);

}

static INLINE void eclass_reg_FOUT_COMB_OROUT_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32 N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_FOUT_COMB_OROUT_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32 N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_FOUT_COMB_OROUT_1_array_field_set", mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ECLASS120_REG_FOUT_COMB_OROUT_1(N),
                      mask,
                      PMC_ECLASS120_REG_FOUT_COMB_OROUT_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE void eclass_reg_FOUT_COMB_OROUT_1_array_burst_read( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32 ofs,
                                                                  UINT32 len,
                                                                  UINT32 *value ) ALWAYS_INLINE;
static INLINE void eclass_reg_FOUT_COMB_OROUT_1_array_burst_read( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32 ofs,
                                                                  UINT32 len,
                                                                  UINT32 *value )
{
    if (len + ofs > 26)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "eclass_reg_FOUT_COMB_OROUT_1_array_burst_read", ofs, len, 26 );
    eclass_burst_read( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_ECLASS120_REG_FOUT_COMB_OROUT_1(ofs),
                       len,
                       value);

    IOLOG( "%s of %d words ofs=%d len=%d", "eclass_reg_FOUT_COMB_OROUT_1_array_burst_read", 26, ofs, len);
}

static INLINE UINT32 eclass_reg_FOUT_COMB_OROUT_1_array_read( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32 N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_FOUT_COMB_OROUT_1_array_read( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32 N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ECLASS120_REG_FOUT_COMB_OROUT_1(N));

    IOLOG( "%s -> 0x%08x;", "eclass_reg_FOUT_COMB_OROUT_1_array_read", reg_value);
    return reg_value;
}

static INLINE void eclass_reg_FOUT_COMB_AND_1_array_burst_write( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32 ofs,
                                                                 UINT32 len,
                                                                 UINT32 *value ) ALWAYS_INLINE;
static INLINE void eclass_reg_FOUT_COMB_AND_1_array_burst_write( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32 ofs,
                                                                 UINT32 len,
                                                                 UINT32 *value )
{
    if (len + ofs > 40)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "eclass_reg_FOUT_COMB_AND_1_array_burst_write", ofs, len, 40 );
    IOLOG( "%s of %d words ofs=%d len=%d", "eclass_reg_FOUT_COMB_AND_1_array_burst_write", 40, ofs, len);
    eclass_burst_write( b_ptr,
                        h_ptr,
                        MEM_TYPE_CONFIG,
                        PMC_ECLASS120_REG_FOUT_COMB_AND_1(ofs),
                        len,
                        value);

}

static INLINE void eclass_reg_FOUT_COMB_AND_1_array_field_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32 N,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_FOUT_COMB_AND_1_array_field_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32 N,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_FOUT_COMB_AND_1_array_field_set", mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ECLASS120_REG_FOUT_COMB_AND_1(N),
                      mask,
                      PMC_ECLASS120_REG_FOUT_COMB_AND_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE void eclass_reg_FOUT_COMB_AND_1_array_burst_read( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32 ofs,
                                                                UINT32 len,
                                                                UINT32 *value ) ALWAYS_INLINE;
static INLINE void eclass_reg_FOUT_COMB_AND_1_array_burst_read( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32 ofs,
                                                                UINT32 len,
                                                                UINT32 *value )
{
    if (len + ofs > 40)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "eclass_reg_FOUT_COMB_AND_1_array_burst_read", ofs, len, 40 );
    eclass_burst_read( b_ptr,
                       h_ptr,
                       MEM_TYPE_CONFIG,
                       PMC_ECLASS120_REG_FOUT_COMB_AND_1(ofs),
                       len,
                       value);

    IOLOG( "%s of %d words ofs=%d len=%d", "eclass_reg_FOUT_COMB_AND_1_array_burst_read", 40, ofs, len);
}

static INLINE UINT32 eclass_reg_FOUT_COMB_AND_1_array_read( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32 N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_FOUT_COMB_AND_1_array_read( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32 N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ECLASS120_REG_FOUT_COMB_AND_1(N));

    IOLOG( "%s -> 0x%08x;", "eclass_reg_FOUT_COMB_AND_1_array_read", reg_value);
    return reg_value;
}

static INLINE void eclass_reg_GEN_CFG_HWIRED_FILTER_array_write( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_CFG_HWIRED_FILTER_array_write( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_CFG_HWIRED_FILTER_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ECLASS120_REG_GEN_CFG_HWIRED_FILTER(N),
                      value);
}

static INLINE void eclass_reg_GEN_CFG_HWIRED_FILTER_array_field_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_CFG_HWIRED_FILTER_array_field_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_CFG_HWIRED_FILTER_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ECLASS120_REG_GEN_CFG_HWIRED_FILTER(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_CFG_HWIRED_FILTER_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_CFG_HWIRED_FILTER_array_read( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_CFG_HWIRED_FILTER_array_read( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ECLASS120_REG_GEN_CFG_HWIRED_FILTER(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_CFG_HWIRED_FILTER_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_FOUT_COMB_ORIN_2_array_write( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_FOUT_COMB_ORIN_2_array_write( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_FOUT_COMB_ORIN_2_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ECLASS120_REG_FOUT_COMB_ORIN_2(N),
                      value);
}

static INLINE void eclass_reg_FOUT_COMB_ORIN_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_FOUT_COMB_ORIN_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_FOUT_COMB_ORIN_2_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ECLASS120_REG_FOUT_COMB_ORIN_2(N),
                      mask,
                      PMC_ECLASS120_REG_FOUT_COMB_ORIN_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_FOUT_COMB_ORIN_2_array_read( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_FOUT_COMB_ORIN_2_array_read( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ECLASS120_REG_FOUT_COMB_ORIN_2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_FOUT_COMB_ORIN_2_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_FOUT_COMB_OROUT_2_array_write( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_FOUT_COMB_OROUT_2_array_write( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_FOUT_COMB_OROUT_2_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ECLASS120_REG_FOUT_COMB_OROUT_2(N),
                      value);
}

static INLINE void eclass_reg_FOUT_COMB_OROUT_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_FOUT_COMB_OROUT_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_FOUT_COMB_OROUT_2_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ECLASS120_REG_FOUT_COMB_OROUT_2(N),
                      mask,
                      PMC_ECLASS120_REG_FOUT_COMB_OROUT_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_FOUT_COMB_OROUT_2_array_read( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_FOUT_COMB_OROUT_2_array_read( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ECLASS120_REG_FOUT_COMB_OROUT_2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_FOUT_COMB_OROUT_2_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_FOUT_COMB_AND_2_array_write( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_FOUT_COMB_AND_2_array_write( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_FOUT_COMB_AND_2_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ECLASS120_REG_FOUT_COMB_AND_2(N),
                      value);
}

static INLINE void eclass_reg_FOUT_COMB_AND_2_array_field_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_FOUT_COMB_AND_2_array_field_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_FOUT_COMB_AND_2_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ECLASS120_REG_FOUT_COMB_AND_2(N),
                      mask,
                      PMC_ECLASS120_REG_FOUT_COMB_AND_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_FOUT_COMB_AND_2_array_read( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_FOUT_COMB_AND_2_array_read( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ECLASS120_REG_FOUT_COMB_AND_2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_FOUT_COMB_AND_2_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_FOUT_COMB_AND_3_array_write( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_FOUT_COMB_AND_3_array_write( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_FOUT_COMB_AND_3_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ECLASS120_REG_FOUT_COMB_AND_3(N),
                      value);
}

static INLINE void eclass_reg_FOUT_COMB_AND_3_array_field_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_FOUT_COMB_AND_3_array_field_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_FOUT_COMB_AND_3_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_CONFIG,
                      PMC_ECLASS120_REG_FOUT_COMB_AND_3(N),
                      mask,
                      PMC_ECLASS120_REG_FOUT_COMB_AND_3_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_FOUT_COMB_AND_3_array_read( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_FOUT_COMB_AND_3_array_read( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_CONFIG,
                                 PMC_ECLASS120_REG_FOUT_COMB_AND_3(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_FOUT_COMB_AND_3_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_CFG_VLAN_MPLS_array_write( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_CFG_VLAN_MPLS_array_write( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_CFG_VLAN_MPLS_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS(N),
                      value);
}

static INLINE void eclass_reg_GEN_CFG_VLAN_MPLS_array_field_set( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_CFG_VLAN_MPLS_array_field_set( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_CFG_VLAN_MPLS_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_CFG_VLAN_MPLS_array_read( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_CFG_VLAN_MPLS_array_read( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_CFG_VLAN_MPLS_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_VLAN_TPID_array_write( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_VLAN_TPID_array_write( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_VLAN_TPID_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_VLAN_TPID(N),
                      value);
}

static INLINE void eclass_reg_VLAN_TPID_array_field_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 mask,
                                                         UINT32 ofs,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_VLAN_TPID_array_field_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 mask,
                                                         UINT32 ofs,
                                                         UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_VLAN_TPID_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_VLAN_TPID(N),
                      mask,
                      PMC_ECLASS120_REG_VLAN_TPID_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_VLAN_TPID_array_read( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_VLAN_TPID_array_read( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_VLAN_TPID(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_VLAN_TPID_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_MPLS_ETHERTYPE_array_write( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_MPLS_ETHERTYPE_array_write( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_MPLS_ETHERTYPE_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_MPLS_ETHERTYPE(N),
                      value);
}

static INLINE void eclass_reg_MPLS_ETHERTYPE_array_field_set( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_MPLS_ETHERTYPE_array_field_set( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_MPLS_ETHERTYPE_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_MPLS_ETHERTYPE(N),
                      mask,
                      PMC_ECLASS120_REG_MPLS_ETHERTYPE_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_MPLS_ETHERTYPE_array_read( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_MPLS_ETHERTYPE_array_read( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_MPLS_ETHERTYPE(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_MPLS_ETHERTYPE_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_VLANMPLS_FILT20_TAG0_1_array_write( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_VLANMPLS_FILT20_TAG0_1_array_write( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_VLANMPLS_FILT20_TAG0_1_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG0_1(N),
                      value);
}

static INLINE void eclass_reg_VLANMPLS_FILT20_TAG0_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 mask,
                                                                      UINT32 ofs,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_VLANMPLS_FILT20_TAG0_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 mask,
                                                                      UINT32 ofs,
                                                                      UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_VLANMPLS_FILT20_TAG0_1_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG0_1(N),
                      mask,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG0_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_VLANMPLS_FILT20_TAG0_1_array_read( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_VLANMPLS_FILT20_TAG0_1_array_read( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG0_1(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_VLANMPLS_FILT20_TAG0_1_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_VLANMPLS_FILT20_TAG0_2_array_write( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_VLANMPLS_FILT20_TAG0_2_array_write( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_VLANMPLS_FILT20_TAG0_2_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG0_2(N),
                      value);
}

static INLINE void eclass_reg_VLANMPLS_FILT20_TAG0_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 mask,
                                                                      UINT32 ofs,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_VLANMPLS_FILT20_TAG0_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 mask,
                                                                      UINT32 ofs,
                                                                      UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_VLANMPLS_FILT20_TAG0_2_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG0_2(N),
                      mask,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_VLANMPLS_FILT20_TAG0_2_array_read( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_VLANMPLS_FILT20_TAG0_2_array_read( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG0_2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_VLANMPLS_FILT20_TAG0_2_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_VLANMPLS_FILT20_TAG1_1_array_write( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_VLANMPLS_FILT20_TAG1_1_array_write( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_VLANMPLS_FILT20_TAG1_1_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG1_1(N),
                      value);
}

static INLINE void eclass_reg_VLANMPLS_FILT20_TAG1_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 mask,
                                                                      UINT32 ofs,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_VLANMPLS_FILT20_TAG1_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 mask,
                                                                      UINT32 ofs,
                                                                      UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_VLANMPLS_FILT20_TAG1_1_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG1_1(N),
                      mask,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG1_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_VLANMPLS_FILT20_TAG1_1_array_read( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_VLANMPLS_FILT20_TAG1_1_array_read( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG1_1(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_VLANMPLS_FILT20_TAG1_1_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_VLANMPLS_FILT20_TAG1_2_array_write( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_VLANMPLS_FILT20_TAG1_2_array_write( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_VLANMPLS_FILT20_TAG1_2_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG1_2(N),
                      value);
}

static INLINE void eclass_reg_VLANMPLS_FILT20_TAG1_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 mask,
                                                                      UINT32 ofs,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_VLANMPLS_FILT20_TAG1_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 mask,
                                                                      UINT32 ofs,
                                                                      UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_VLANMPLS_FILT20_TAG1_2_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG1_2(N),
                      mask,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_VLANMPLS_FILT20_TAG1_2_array_read( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_VLANMPLS_FILT20_TAG1_2_array_read( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG1_2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_VLANMPLS_FILT20_TAG1_2_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_VLANMPLS_FILT20_TAG2_1_array_write( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_VLANMPLS_FILT20_TAG2_1_array_write( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_VLANMPLS_FILT20_TAG2_1_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG2_1(N),
                      value);
}

static INLINE void eclass_reg_VLANMPLS_FILT20_TAG2_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 mask,
                                                                      UINT32 ofs,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_VLANMPLS_FILT20_TAG2_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 mask,
                                                                      UINT32 ofs,
                                                                      UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_VLANMPLS_FILT20_TAG2_1_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG2_1(N),
                      mask,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG2_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_VLANMPLS_FILT20_TAG2_1_array_read( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_VLANMPLS_FILT20_TAG2_1_array_read( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG2_1(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_VLANMPLS_FILT20_TAG2_1_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_VLANMPLS_FILT20_TAG2_2_array_write( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_VLANMPLS_FILT20_TAG2_2_array_write( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_VLANMPLS_FILT20_TAG2_2_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG2_2(N),
                      value);
}

static INLINE void eclass_reg_VLANMPLS_FILT20_TAG2_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 mask,
                                                                      UINT32 ofs,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_VLANMPLS_FILT20_TAG2_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 mask,
                                                                      UINT32 ofs,
                                                                      UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_VLANMPLS_FILT20_TAG2_2_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG2_2(N),
                      mask,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_VLANMPLS_FILT20_TAG2_2_array_read( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_VLANMPLS_FILT20_TAG2_2_array_read( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG2_2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_VLANMPLS_FILT20_TAG2_2_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_VLANMPLS_FILT20_TAG3_1_array_write( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_VLANMPLS_FILT20_TAG3_1_array_write( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_VLANMPLS_FILT20_TAG3_1_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG3_1(N),
                      value);
}

static INLINE void eclass_reg_VLANMPLS_FILT20_TAG3_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 mask,
                                                                      UINT32 ofs,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_VLANMPLS_FILT20_TAG3_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 mask,
                                                                      UINT32 ofs,
                                                                      UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_VLANMPLS_FILT20_TAG3_1_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG3_1(N),
                      mask,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG3_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_VLANMPLS_FILT20_TAG3_1_array_read( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_VLANMPLS_FILT20_TAG3_1_array_read( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG3_1(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_VLANMPLS_FILT20_TAG3_1_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_VLANMPLS_FILT20_TAG3_2_array_write( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_VLANMPLS_FILT20_TAG3_2_array_write( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_VLANMPLS_FILT20_TAG3_2_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG3_2(N),
                      value);
}

static INLINE void eclass_reg_VLANMPLS_FILT20_TAG3_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 mask,
                                                                      UINT32 ofs,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_VLANMPLS_FILT20_TAG3_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 mask,
                                                                      UINT32 ofs,
                                                                      UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_VLANMPLS_FILT20_TAG3_2_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG3_2(N),
                      mask,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_VLANMPLS_FILT20_TAG3_2_array_read( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_VLANMPLS_FILT20_TAG3_2_array_read( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG3_2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_VLANMPLS_FILT20_TAG3_2_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_VLANMPLS_FILT20_TAG4_1_array_write( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_VLANMPLS_FILT20_TAG4_1_array_write( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_VLANMPLS_FILT20_TAG4_1_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG4_1(N),
                      value);
}

static INLINE void eclass_reg_VLANMPLS_FILT20_TAG4_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 mask,
                                                                      UINT32 ofs,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_VLANMPLS_FILT20_TAG4_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 mask,
                                                                      UINT32 ofs,
                                                                      UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_VLANMPLS_FILT20_TAG4_1_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG4_1(N),
                      mask,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG4_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_VLANMPLS_FILT20_TAG4_1_array_read( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_VLANMPLS_FILT20_TAG4_1_array_read( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG4_1(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_VLANMPLS_FILT20_TAG4_1_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_VLANMPLS_FILT20_TAG4_2_array_write( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_VLANMPLS_FILT20_TAG4_2_array_write( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_VLANMPLS_FILT20_TAG4_2_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG4_2(N),
                      value);
}

static INLINE void eclass_reg_VLANMPLS_FILT20_TAG4_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 mask,
                                                                      UINT32 ofs,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_VLANMPLS_FILT20_TAG4_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 mask,
                                                                      UINT32 ofs,
                                                                      UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_VLANMPLS_FILT20_TAG4_2_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG4_2(N),
                      mask,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_VLANMPLS_FILT20_TAG4_2_array_read( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_VLANMPLS_FILT20_TAG4_2_array_read( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG4_2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_VLANMPLS_FILT20_TAG4_2_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_VLANMPLS_FILT20_TAG5_1_array_write( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_VLANMPLS_FILT20_TAG5_1_array_write( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_VLANMPLS_FILT20_TAG5_1_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG5_1(N),
                      value);
}

static INLINE void eclass_reg_VLANMPLS_FILT20_TAG5_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 mask,
                                                                      UINT32 ofs,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_VLANMPLS_FILT20_TAG5_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 mask,
                                                                      UINT32 ofs,
                                                                      UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_VLANMPLS_FILT20_TAG5_1_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG5_1(N),
                      mask,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG5_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_VLANMPLS_FILT20_TAG5_1_array_read( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_VLANMPLS_FILT20_TAG5_1_array_read( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG5_1(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_VLANMPLS_FILT20_TAG5_1_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_VLANMPLS_FILT20_TAG5_2_array_write( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_VLANMPLS_FILT20_TAG5_2_array_write( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_VLANMPLS_FILT20_TAG5_2_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG5_2(N),
                      value);
}

static INLINE void eclass_reg_VLANMPLS_FILT20_TAG5_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 mask,
                                                                      UINT32 ofs,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_VLANMPLS_FILT20_TAG5_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 mask,
                                                                      UINT32 ofs,
                                                                      UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_VLANMPLS_FILT20_TAG5_2_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG5_2(N),
                      mask,
                      PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_VLANMPLS_FILT20_TAG5_2_array_read( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_VLANMPLS_FILT20_TAG5_2_array_read( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG5_2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_VLANMPLS_FILT20_TAG5_2_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_MAN_VLAN_CFG_array_write( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_MAN_VLAN_CFG_array_write( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_MAN_VLAN_CFG_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_MAN_VLAN_CFG(N),
                      value);
}

static INLINE void eclass_reg_MAN_VLAN_CFG_array_field_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 mask,
                                                            UINT32 ofs,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_MAN_VLAN_CFG_array_field_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 mask,
                                                            UINT32 ofs,
                                                            UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_MAN_VLAN_CFG_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_MAN_VLAN_CFG(N),
                      mask,
                      PMC_ECLASS120_REG_MAN_VLAN_CFG_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_MAN_VLAN_CFG_array_read( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_MAN_VLAN_CFG_array_read( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_MAN_VLAN_CFG(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_MAN_VLAN_CFG_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_UNICAST_DA_ETH_LSB_array_write( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_UNICAST_DA_ETH_LSB_array_write( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_UNICAST_DA_ETH_LSB_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_UNICAST_DA_ETH_LSB(N),
                      value);
}

static INLINE void eclass_reg_UNICAST_DA_ETH_LSB_array_field_set( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_UNICAST_DA_ETH_LSB_array_field_set( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_UNICAST_DA_ETH_LSB_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_UNICAST_DA_ETH_LSB(N),
                      mask,
                      PMC_ECLASS120_REG_UNICAST_DA_ETH_LSB_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_UNICAST_DA_ETH_LSB_array_read( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_UNICAST_DA_ETH_LSB_array_read( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_UNICAST_DA_ETH_LSB(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_UNICAST_DA_ETH_LSB_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_UNICAST_DA_ETH_MSB_array_write( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_UNICAST_DA_ETH_MSB_array_write( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_UNICAST_DA_ETH_MSB_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_UNICAST_DA_ETH_MSB(N),
                      value);
}

static INLINE void eclass_reg_UNICAST_DA_ETH_MSB_array_field_set( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_UNICAST_DA_ETH_MSB_array_field_set( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_UNICAST_DA_ETH_MSB_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_UNICAST_DA_ETH_MSB(N),
                      mask,
                      PMC_ECLASS120_REG_UNICAST_DA_ETH_MSB_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_UNICAST_DA_ETH_MSB_array_read( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_UNICAST_DA_ETH_MSB_array_read( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_UNICAST_DA_ETH_MSB(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_UNICAST_DA_ETH_MSB_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_UNICAST_DA_ETH_P2P_LSB_array_write( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_UNICAST_DA_ETH_P2P_LSB_array_write( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_UNICAST_DA_ETH_P2P_LSB_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_UNICAST_DA_ETH_P2P_LSB(N),
                      value);
}

static INLINE void eclass_reg_UNICAST_DA_ETH_P2P_LSB_array_field_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 mask,
                                                                      UINT32 ofs,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_UNICAST_DA_ETH_P2P_LSB_array_field_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 mask,
                                                                      UINT32 ofs,
                                                                      UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_UNICAST_DA_ETH_P2P_LSB_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_UNICAST_DA_ETH_P2P_LSB(N),
                      mask,
                      PMC_ECLASS120_REG_UNICAST_DA_ETH_P2P_LSB_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_UNICAST_DA_ETH_P2P_LSB_array_read( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_UNICAST_DA_ETH_P2P_LSB_array_read( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_UNICAST_DA_ETH_P2P_LSB(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_UNICAST_DA_ETH_P2P_LSB_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_UNICAST_DA_ETH_P2P_MSB_array_write( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_UNICAST_DA_ETH_P2P_MSB_array_write( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_UNICAST_DA_ETH_P2P_MSB_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_UNICAST_DA_ETH_P2P_MSB(N),
                      value);
}

static INLINE void eclass_reg_UNICAST_DA_ETH_P2P_MSB_array_field_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 mask,
                                                                      UINT32 ofs,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_UNICAST_DA_ETH_P2P_MSB_array_field_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 mask,
                                                                      UINT32 ofs,
                                                                      UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_UNICAST_DA_ETH_P2P_MSB_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_UNICAST_DA_ETH_P2P_MSB(N),
                      mask,
                      PMC_ECLASS120_REG_UNICAST_DA_ETH_P2P_MSB_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_UNICAST_DA_ETH_P2P_MSB_array_read( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_UNICAST_DA_ETH_P2P_MSB_array_read( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_UNICAST_DA_ETH_P2P_MSB(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_UNICAST_DA_ETH_P2P_MSB_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_UNICAST_DEST_PORT_UDP_array_write( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_UNICAST_DEST_PORT_UDP_array_write( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_UNICAST_DEST_PORT_UDP_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_UNICAST_DEST_PORT_UDP(N),
                      value);
}

static INLINE void eclass_reg_UNICAST_DEST_PORT_UDP_array_field_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_UNICAST_DEST_PORT_UDP_array_field_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_UNICAST_DEST_PORT_UDP_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_UNICAST_DEST_PORT_UDP(N),
                      mask,
                      PMC_ECLASS120_REG_UNICAST_DEST_PORT_UDP_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_UNICAST_DEST_PORT_UDP_array_read( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_UNICAST_DEST_PORT_UDP_array_read( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_UNICAST_DEST_PORT_UDP(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_UNICAST_DEST_PORT_UDP_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_UNICAST_DA_IPV4_array_write( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_UNICAST_DA_IPV4_array_write( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_UNICAST_DA_IPV4_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_UNICAST_DA_IPV4(N),
                      value);
}

static INLINE void eclass_reg_UNICAST_DA_IPV4_array_field_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_UNICAST_DA_IPV4_array_field_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_UNICAST_DA_IPV4_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_UNICAST_DA_IPV4(N),
                      mask,
                      PMC_ECLASS120_REG_UNICAST_DA_IPV4_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_UNICAST_DA_IPV4_array_read( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_UNICAST_DA_IPV4_array_read( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_UNICAST_DA_IPV4(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_UNICAST_DA_IPV4_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_UNICAST_DA_IPV4_P2P_array_write( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_UNICAST_DA_IPV4_P2P_array_write( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_UNICAST_DA_IPV4_P2P_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_UNICAST_DA_IPV4_P2P(N),
                      value);
}

static INLINE void eclass_reg_UNICAST_DA_IPV4_P2P_array_field_set( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_UNICAST_DA_IPV4_P2P_array_field_set( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_UNICAST_DA_IPV4_P2P_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_UNICAST_DA_IPV4_P2P(N),
                      mask,
                      PMC_ECLASS120_REG_UNICAST_DA_IPV4_P2P_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_UNICAST_DA_IPV4_P2P_array_read( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_UNICAST_DA_IPV4_P2P_array_read( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_UNICAST_DA_IPV4_P2P(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_UNICAST_DA_IPV4_P2P_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_UNICAST_DA_IPV6_0_array_write( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_UNICAST_DA_IPV6_0_array_write( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_UNICAST_DA_IPV6_0_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_UNICAST_DA_IPV6_0(N),
                      value);
}

static INLINE void eclass_reg_UNICAST_DA_IPV6_0_array_field_set( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_UNICAST_DA_IPV6_0_array_field_set( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_UNICAST_DA_IPV6_0_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_UNICAST_DA_IPV6_0(N),
                      mask,
                      PMC_ECLASS120_REG_UNICAST_DA_IPV6_0_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_UNICAST_DA_IPV6_0_array_read( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_UNICAST_DA_IPV6_0_array_read( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_UNICAST_DA_IPV6_0(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_UNICAST_DA_IPV6_0_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_UNICAST_DA_IPV6_1_array_write( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_UNICAST_DA_IPV6_1_array_write( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_UNICAST_DA_IPV6_1_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_UNICAST_DA_IPV6_1(N),
                      value);
}

static INLINE void eclass_reg_UNICAST_DA_IPV6_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_UNICAST_DA_IPV6_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_UNICAST_DA_IPV6_1_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_UNICAST_DA_IPV6_1(N),
                      mask,
                      PMC_ECLASS120_REG_UNICAST_DA_IPV6_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_UNICAST_DA_IPV6_1_array_read( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_UNICAST_DA_IPV6_1_array_read( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_UNICAST_DA_IPV6_1(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_UNICAST_DA_IPV6_1_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_UNICAST_DA_IPV6_2_array_write( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_UNICAST_DA_IPV6_2_array_write( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_UNICAST_DA_IPV6_2_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_UNICAST_DA_IPV6_2(N),
                      value);
}

static INLINE void eclass_reg_UNICAST_DA_IPV6_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_UNICAST_DA_IPV6_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_UNICAST_DA_IPV6_2_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_UNICAST_DA_IPV6_2(N),
                      mask,
                      PMC_ECLASS120_REG_UNICAST_DA_IPV6_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_UNICAST_DA_IPV6_2_array_read( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_UNICAST_DA_IPV6_2_array_read( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_UNICAST_DA_IPV6_2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_UNICAST_DA_IPV6_2_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_UNICAST_DA_IPV6_3_array_write( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_UNICAST_DA_IPV6_3_array_write( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_UNICAST_DA_IPV6_3_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_UNICAST_DA_IPV6_3(N),
                      value);
}

static INLINE void eclass_reg_UNICAST_DA_IPV6_3_array_field_set( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_UNICAST_DA_IPV6_3_array_field_set( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_UNICAST_DA_IPV6_3_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_UNICAST_DA_IPV6_3(N),
                      mask,
                      PMC_ECLASS120_REG_UNICAST_DA_IPV6_3_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_UNICAST_DA_IPV6_3_array_read( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_UNICAST_DA_IPV6_3_array_read( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_UNICAST_DA_IPV6_3(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_UNICAST_DA_IPV6_3_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_UNICAST_DA_IPV6_P2P_0_array_write( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_UNICAST_DA_IPV6_P2P_0_array_write( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_UNICAST_DA_IPV6_P2P_0_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_0(N),
                      value);
}

static INLINE void eclass_reg_UNICAST_DA_IPV6_P2P_0_array_field_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_UNICAST_DA_IPV6_P2P_0_array_field_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_UNICAST_DA_IPV6_P2P_0_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_0(N),
                      mask,
                      PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_0_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_UNICAST_DA_IPV6_P2P_0_array_read( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_UNICAST_DA_IPV6_P2P_0_array_read( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_0(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_UNICAST_DA_IPV6_P2P_0_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_UNICAST_DA_IPV6_P2P_1_array_write( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_UNICAST_DA_IPV6_P2P_1_array_write( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_UNICAST_DA_IPV6_P2P_1_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_1(N),
                      value);
}

static INLINE void eclass_reg_UNICAST_DA_IPV6_P2P_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_UNICAST_DA_IPV6_P2P_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_UNICAST_DA_IPV6_P2P_1_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_1(N),
                      mask,
                      PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_UNICAST_DA_IPV6_P2P_1_array_read( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_UNICAST_DA_IPV6_P2P_1_array_read( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_1(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_UNICAST_DA_IPV6_P2P_1_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_UNICAST_DA_IPV6_P2P_2_array_write( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_UNICAST_DA_IPV6_P2P_2_array_write( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_UNICAST_DA_IPV6_P2P_2_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_2(N),
                      value);
}

static INLINE void eclass_reg_UNICAST_DA_IPV6_P2P_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_UNICAST_DA_IPV6_P2P_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_UNICAST_DA_IPV6_P2P_2_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_2(N),
                      mask,
                      PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_UNICAST_DA_IPV6_P2P_2_array_read( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_UNICAST_DA_IPV6_P2P_2_array_read( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_UNICAST_DA_IPV6_P2P_2_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_UNICAST_DA_IPV6_P2P_3_array_write( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_UNICAST_DA_IPV6_P2P_3_array_write( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_UNICAST_DA_IPV6_P2P_3_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_3(N),
                      value);
}

static INLINE void eclass_reg_UNICAST_DA_IPV6_P2P_3_array_field_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_UNICAST_DA_IPV6_P2P_3_array_field_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_UNICAST_DA_IPV6_P2P_3_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_3(N),
                      mask,
                      PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_3_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_UNICAST_DA_IPV6_P2P_3_array_read( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_UNICAST_DA_IPV6_P2P_3_array_read( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_3(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_UNICAST_DA_IPV6_P2P_3_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FAND_0_array_write( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FAND_0_array_write( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FAND_0_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_0(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FAND_0_array_field_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FAND_0_array_field_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FAND_0_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_0(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_0_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FAND_0_array_read( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FAND_0_array_read( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_0(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FAND_0_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FAND_1_array_write( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FAND_1_array_write( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FAND_1_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_1(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FAND_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FAND_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FAND_1_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_1(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FAND_1_array_read( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FAND_1_array_read( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_1(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FAND_1_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FAND_2_array_write( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FAND_2_array_write( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FAND_2_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_2(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FAND_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FAND_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FAND_2_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_2(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FAND_2_array_read( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FAND_2_array_read( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FAND_2_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FAND_3_array_write( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FAND_3_array_write( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FAND_3_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_3(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FAND_3_array_field_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FAND_3_array_field_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FAND_3_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_3(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_3_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FAND_3_array_read( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FAND_3_array_read( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_3(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FAND_3_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FOR_0_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FOR_0_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FOR_0_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_0(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FOR_0_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FOR_0_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FOR_0_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_0(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_0_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FOR_0_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FOR_0_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_0(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FOR_0_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FOR_1_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FOR_1_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FOR_1_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_1(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FOR_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FOR_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FOR_1_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_1(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FOR_1_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FOR_1_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_1(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FOR_1_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FOR_2_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FOR_2_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FOR_2_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_2(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FOR_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FOR_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FOR_2_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_2(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FOR_2_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FOR_2_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FOR_2_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FOR_3_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FOR_3_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FOR_3_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_3(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FOR_3_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FOR_3_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FOR_3_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_3(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_3_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FOR_3_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FOR_3_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_3(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FOR_3_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FOR_4_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FOR_4_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FOR_4_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_4(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FOR_4_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FOR_4_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FOR_4_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_4(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_4_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FOR_4_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FOR_4_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_4(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FOR_4_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FOR_5_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FOR_5_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FOR_5_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_5(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FOR_5_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FOR_5_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FOR_5_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_5(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_5_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FOR_5_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FOR_5_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_5(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FOR_5_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FOR_6_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FOR_6_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FOR_6_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_6(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FOR_6_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FOR_6_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FOR_6_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_6(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_6_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FOR_6_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FOR_6_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_6(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FOR_6_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FOR_7_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FOR_7_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FOR_7_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_7(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FOR_7_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FOR_7_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FOR_7_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_7(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_7_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FOR_7_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FOR_7_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_7(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FOR_7_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER_OUT_0_array_write( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER_OUT_0_array_write( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER_OUT_0_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER_OUT_0_array_field_set( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 mask,
                                                                           UINT32 ofs,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER_OUT_0_array_field_set( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 mask,
                                                                           UINT32 ofs,
                                                                           UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER_OUT_0_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER_OUT_0_array_read( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER_OUT_0_array_read( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FILTER_OUT_0_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER_OUT_1_array_write( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER_OUT_1_array_write( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER_OUT_1_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER_OUT_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 mask,
                                                                           UINT32 ofs,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER_OUT_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 mask,
                                                                           UINT32 ofs,
                                                                           UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER_OUT_1_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER_OUT_1_array_read( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER_OUT_1_array_read( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FILTER_OUT_1_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER_OUT_2_array_write( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER_OUT_2_array_write( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER_OUT_2_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER_OUT_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 mask,
                                                                           UINT32 ofs,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER_OUT_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 mask,
                                                                           UINT32 ofs,
                                                                           UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER_OUT_2_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER_OUT_2_array_read( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER_OUT_2_array_read( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FILTER_OUT_2_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER_OUT_3_array_write( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER_OUT_3_array_write( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER_OUT_3_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER_OUT_3_array_field_set( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 mask,
                                                                           UINT32 ofs,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER_OUT_3_array_field_set( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 mask,
                                                                           UINT32 ofs,
                                                                           UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER_OUT_3_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER_OUT_3_array_read( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER_OUT_3_array_read( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FILTER_OUT_3_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER_OUT_4_array_write( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER_OUT_4_array_write( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER_OUT_4_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER_OUT_4_array_field_set( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 mask,
                                                                           UINT32 ofs,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER_OUT_4_array_field_set( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 mask,
                                                                           UINT32 ofs,
                                                                           UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER_OUT_4_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER_OUT_4_array_read( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER_OUT_4_array_read( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FILTER_OUT_4_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER_OUT_5_array_write( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER_OUT_5_array_write( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER_OUT_5_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER_OUT_5_array_field_set( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 mask,
                                                                           UINT32 ofs,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER_OUT_5_array_field_set( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 mask,
                                                                           UINT32 ofs,
                                                                           UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER_OUT_5_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER_OUT_5_array_read( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER_OUT_5_array_read( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FILTER_OUT_5_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER_OUT_6_array_write( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER_OUT_6_array_write( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER_OUT_6_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER_OUT_6_array_field_set( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 mask,
                                                                           UINT32 ofs,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER_OUT_6_array_field_set( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 mask,
                                                                           UINT32 ofs,
                                                                           UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER_OUT_6_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER_OUT_6_array_read( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER_OUT_6_array_read( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FILTER_OUT_6_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER_OUT_7_array_write( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER_OUT_7_array_write( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER_OUT_7_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER_OUT_7_array_field_set( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 mask,
                                                                           UINT32 ofs,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER_OUT_7_array_field_set( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 mask,
                                                                           UINT32 ofs,
                                                                           UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER_OUT_7_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER_OUT_7_array_read( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER_OUT_7_array_read( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FILTER_OUT_7_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_ROUTING_AND_FILTER_0_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_AND_FILTER_0_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_ROUTING_AND_FILTER_0_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_0(N),
                      value);
}

static INLINE void eclass_reg_ROUTING_AND_FILTER_0_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_AND_FILTER_0_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_ROUTING_AND_FILTER_0_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_0(N),
                      mask,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_0_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_ROUTING_AND_FILTER_0_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_ROUTING_AND_FILTER_0_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_ROUTING_AND_FILTER_0(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_ROUTING_AND_FILTER_0_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_ROUTING_AND_FILTER_1_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_AND_FILTER_1_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_ROUTING_AND_FILTER_1_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_1(N),
                      value);
}

static INLINE void eclass_reg_ROUTING_AND_FILTER_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_AND_FILTER_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_ROUTING_AND_FILTER_1_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_1(N),
                      mask,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_ROUTING_AND_FILTER_1_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_ROUTING_AND_FILTER_1_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_ROUTING_AND_FILTER_1(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_ROUTING_AND_FILTER_1_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_ROUTING_AND_FILTER_2_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_AND_FILTER_2_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_ROUTING_AND_FILTER_2_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_2(N),
                      value);
}

static INLINE void eclass_reg_ROUTING_AND_FILTER_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_AND_FILTER_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_ROUTING_AND_FILTER_2_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_2(N),
                      mask,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_ROUTING_AND_FILTER_2_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_ROUTING_AND_FILTER_2_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_ROUTING_AND_FILTER_2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_ROUTING_AND_FILTER_2_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_ROUTING_AND_FILTER_3_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_AND_FILTER_3_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_ROUTING_AND_FILTER_3_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_3(N),
                      value);
}

static INLINE void eclass_reg_ROUTING_AND_FILTER_3_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_AND_FILTER_3_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_ROUTING_AND_FILTER_3_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_3(N),
                      mask,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_3_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_ROUTING_AND_FILTER_3_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_ROUTING_AND_FILTER_3_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_ROUTING_AND_FILTER_3(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_ROUTING_AND_FILTER_3_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_ROUTING_AND_FILTER_4_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_AND_FILTER_4_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_ROUTING_AND_FILTER_4_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_4(N),
                      value);
}

static INLINE void eclass_reg_ROUTING_AND_FILTER_4_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_AND_FILTER_4_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_ROUTING_AND_FILTER_4_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_4(N),
                      mask,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_4_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_ROUTING_AND_FILTER_4_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_ROUTING_AND_FILTER_4_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_ROUTING_AND_FILTER_4(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_ROUTING_AND_FILTER_4_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_ROUTING_AND_FILTER_5_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_AND_FILTER_5_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_ROUTING_AND_FILTER_5_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_5(N),
                      value);
}

static INLINE void eclass_reg_ROUTING_AND_FILTER_5_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_AND_FILTER_5_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_ROUTING_AND_FILTER_5_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_5(N),
                      mask,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_5_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_ROUTING_AND_FILTER_5_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_ROUTING_AND_FILTER_5_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_ROUTING_AND_FILTER_5(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_ROUTING_AND_FILTER_5_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_ROUTING_AND_FILTER_6_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_AND_FILTER_6_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_ROUTING_AND_FILTER_6_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_6(N),
                      value);
}

static INLINE void eclass_reg_ROUTING_AND_FILTER_6_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_AND_FILTER_6_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_ROUTING_AND_FILTER_6_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_6(N),
                      mask,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_6_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_ROUTING_AND_FILTER_6_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_ROUTING_AND_FILTER_6_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_ROUTING_AND_FILTER_6(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_ROUTING_AND_FILTER_6_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_ROUTING_AND_FILTER_7_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_AND_FILTER_7_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_ROUTING_AND_FILTER_7_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_7(N),
                      value);
}

static INLINE void eclass_reg_ROUTING_AND_FILTER_7_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_AND_FILTER_7_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_ROUTING_AND_FILTER_7_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_7(N),
                      mask,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_7_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_ROUTING_AND_FILTER_7_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_ROUTING_AND_FILTER_7_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_ROUTING_AND_FILTER_7(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_ROUTING_AND_FILTER_7_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_ROUTING_AND_FILTER_8_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_AND_FILTER_8_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_ROUTING_AND_FILTER_8_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_8(N),
                      value);
}

static INLINE void eclass_reg_ROUTING_AND_FILTER_8_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_AND_FILTER_8_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_ROUTING_AND_FILTER_8_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_8(N),
                      mask,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_8_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_ROUTING_AND_FILTER_8_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_ROUTING_AND_FILTER_8_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_ROUTING_AND_FILTER_8(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_ROUTING_AND_FILTER_8_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_ROUTING_AND_FILTER_9_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_AND_FILTER_9_array_write( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_ROUTING_AND_FILTER_9_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_9(N),
                      value);
}

static INLINE void eclass_reg_ROUTING_AND_FILTER_9_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_AND_FILTER_9_array_field_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_ROUTING_AND_FILTER_9_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_9(N),
                      mask,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_9_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_ROUTING_AND_FILTER_9_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_ROUTING_AND_FILTER_9_array_read( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_ROUTING_AND_FILTER_9(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_ROUTING_AND_FILTER_9_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_ROUTING_AND_FILTER_10_array_write( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_AND_FILTER_10_array_write( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_ROUTING_AND_FILTER_10_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_10(N),
                      value);
}

static INLINE void eclass_reg_ROUTING_AND_FILTER_10_array_field_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_AND_FILTER_10_array_field_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_ROUTING_AND_FILTER_10_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_10(N),
                      mask,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_10_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_ROUTING_AND_FILTER_10_array_read( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_ROUTING_AND_FILTER_10_array_read( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_ROUTING_AND_FILTER_10(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_ROUTING_AND_FILTER_10_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_ROUTING_AND_FILTER_11_array_write( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_AND_FILTER_11_array_write( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_ROUTING_AND_FILTER_11_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_11(N),
                      value);
}

static INLINE void eclass_reg_ROUTING_AND_FILTER_11_array_field_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_AND_FILTER_11_array_field_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_ROUTING_AND_FILTER_11_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_11(N),
                      mask,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_11_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_ROUTING_AND_FILTER_11_array_read( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_ROUTING_AND_FILTER_11_array_read( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_ROUTING_AND_FILTER_11(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_ROUTING_AND_FILTER_11_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_ROUTING_AND_FILTER_12_array_write( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_AND_FILTER_12_array_write( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_ROUTING_AND_FILTER_12_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_12(N),
                      value);
}

static INLINE void eclass_reg_ROUTING_AND_FILTER_12_array_field_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_AND_FILTER_12_array_field_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_ROUTING_AND_FILTER_12_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_12(N),
                      mask,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_12_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_ROUTING_AND_FILTER_12_array_read( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_ROUTING_AND_FILTER_12_array_read( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_ROUTING_AND_FILTER_12(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_ROUTING_AND_FILTER_12_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_ROUTING_AND_FILTER_13_array_write( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_AND_FILTER_13_array_write( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_ROUTING_AND_FILTER_13_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_13(N),
                      value);
}

static INLINE void eclass_reg_ROUTING_AND_FILTER_13_array_field_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_AND_FILTER_13_array_field_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_ROUTING_AND_FILTER_13_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_13(N),
                      mask,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_13_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_ROUTING_AND_FILTER_13_array_read( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_ROUTING_AND_FILTER_13_array_read( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_ROUTING_AND_FILTER_13(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_ROUTING_AND_FILTER_13_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_ROUTING_AND_FILTER_14_array_write( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_AND_FILTER_14_array_write( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_ROUTING_AND_FILTER_14_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_14(N),
                      value);
}

static INLINE void eclass_reg_ROUTING_AND_FILTER_14_array_field_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_AND_FILTER_14_array_field_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_ROUTING_AND_FILTER_14_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_14(N),
                      mask,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_14_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_ROUTING_AND_FILTER_14_array_read( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_ROUTING_AND_FILTER_14_array_read( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_ROUTING_AND_FILTER_14(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_ROUTING_AND_FILTER_14_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_ROUTING_AND_FILTER_15_array_write( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_AND_FILTER_15_array_write( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_ROUTING_AND_FILTER_15_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_15(N),
                      value);
}

static INLINE void eclass_reg_ROUTING_AND_FILTER_15_array_field_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_AND_FILTER_15_array_field_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_ROUTING_AND_FILTER_15_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_15(N),
                      mask,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_15_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_ROUTING_AND_FILTER_15_array_read( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_ROUTING_AND_FILTER_15_array_read( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_ROUTING_AND_FILTER_15(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_ROUTING_AND_FILTER_15_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_array_write( eclass_buffer_t *b_ptr,
                                                                                     eclass_handle_t *h_ptr,
                                                                                     UINT32  N,
                                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_array_write( eclass_buffer_t *b_ptr,
                                                                                     eclass_handle_t *h_ptr,
                                                                                     UINT32  N,
                                                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW(N),
                      value);
}

static INLINE void eclass_reg_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_array_field_set( eclass_buffer_t *b_ptr,
                                                                                         eclass_handle_t *h_ptr,
                                                                                         UINT32  N,
                                                                                         UINT32 mask,
                                                                                         UINT32 ofs,
                                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_array_field_set( eclass_buffer_t *b_ptr,
                                                                                         eclass_handle_t *h_ptr,
                                                                                         UINT32  N,
                                                                                         UINT32 mask,
                                                                                         UINT32 ofs,
                                                                                         UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW(N),
                      mask,
                      PMC_ECLASS120_REG_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_array_read( eclass_buffer_t *b_ptr,
                                                                                      eclass_handle_t *h_ptr,
                                                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_array_read( eclass_buffer_t *b_ptr,
                                                                                      eclass_handle_t *h_ptr,
                                                                                      UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_ROUTING_OR_FILTER_0_REG1_array_write( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_OR_FILTER_0_REG1_array_write( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_ROUTING_OR_FILTER_0_REG1_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_0_REG1(N),
                      value);
}

static INLINE void eclass_reg_ROUTING_OR_FILTER_0_REG1_array_field_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_OR_FILTER_0_REG1_array_field_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_ROUTING_OR_FILTER_0_REG1_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_0_REG1(N),
                      mask,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_0_REG1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_ROUTING_OR_FILTER_0_REG1_array_read( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_ROUTING_OR_FILTER_0_REG1_array_read( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_ROUTING_OR_FILTER_0_REG1(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_ROUTING_OR_FILTER_0_REG1_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_ROUTING_OR_FILTER_0_REG2_array_write( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_OR_FILTER_0_REG2_array_write( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_ROUTING_OR_FILTER_0_REG2_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_0_REG2(N),
                      value);
}

static INLINE void eclass_reg_ROUTING_OR_FILTER_0_REG2_array_field_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_OR_FILTER_0_REG2_array_field_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_ROUTING_OR_FILTER_0_REG2_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_0_REG2(N),
                      mask,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_0_REG2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_ROUTING_OR_FILTER_0_REG2_array_read( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_ROUTING_OR_FILTER_0_REG2_array_read( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_ROUTING_OR_FILTER_0_REG2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_ROUTING_OR_FILTER_0_REG2_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_ROUTING_OR_FILTER_1_REG1_array_write( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_OR_FILTER_1_REG1_array_write( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_ROUTING_OR_FILTER_1_REG1_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_1_REG1(N),
                      value);
}

static INLINE void eclass_reg_ROUTING_OR_FILTER_1_REG1_array_field_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_OR_FILTER_1_REG1_array_field_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_ROUTING_OR_FILTER_1_REG1_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_1_REG1(N),
                      mask,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_1_REG1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_ROUTING_OR_FILTER_1_REG1_array_read( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_ROUTING_OR_FILTER_1_REG1_array_read( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_ROUTING_OR_FILTER_1_REG1(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_ROUTING_OR_FILTER_1_REG1_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_ROUTING_OR_FILTER_1_REG2_array_write( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_OR_FILTER_1_REG2_array_write( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_ROUTING_OR_FILTER_1_REG2_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_1_REG2(N),
                      value);
}

static INLINE void eclass_reg_ROUTING_OR_FILTER_1_REG2_array_field_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_OR_FILTER_1_REG2_array_field_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_ROUTING_OR_FILTER_1_REG2_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_1_REG2(N),
                      mask,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_1_REG2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_ROUTING_OR_FILTER_1_REG2_array_read( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_ROUTING_OR_FILTER_1_REG2_array_read( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_ROUTING_OR_FILTER_1_REG2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_ROUTING_OR_FILTER_1_REG2_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_ROUTING_OR_FILTER_2_REG1_array_write( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_OR_FILTER_2_REG1_array_write( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_ROUTING_OR_FILTER_2_REG1_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_2_REG1(N),
                      value);
}

static INLINE void eclass_reg_ROUTING_OR_FILTER_2_REG1_array_field_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_OR_FILTER_2_REG1_array_field_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_ROUTING_OR_FILTER_2_REG1_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_2_REG1(N),
                      mask,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_2_REG1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_ROUTING_OR_FILTER_2_REG1_array_read( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_ROUTING_OR_FILTER_2_REG1_array_read( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_ROUTING_OR_FILTER_2_REG1(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_ROUTING_OR_FILTER_2_REG1_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_ROUTING_OR_FILTER_2_REG2_array_write( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_OR_FILTER_2_REG2_array_write( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_ROUTING_OR_FILTER_2_REG2_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_2_REG2(N),
                      value);
}

static INLINE void eclass_reg_ROUTING_OR_FILTER_2_REG2_array_field_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_OR_FILTER_2_REG2_array_field_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_ROUTING_OR_FILTER_2_REG2_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_2_REG2(N),
                      mask,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_2_REG2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_ROUTING_OR_FILTER_2_REG2_array_read( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_ROUTING_OR_FILTER_2_REG2_array_read( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_ROUTING_OR_FILTER_2_REG2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_ROUTING_OR_FILTER_2_REG2_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_ROUTING_OR_FILTER_3_REG1_array_write( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_OR_FILTER_3_REG1_array_write( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_ROUTING_OR_FILTER_3_REG1_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_3_REG1(N),
                      value);
}

static INLINE void eclass_reg_ROUTING_OR_FILTER_3_REG1_array_field_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_OR_FILTER_3_REG1_array_field_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_ROUTING_OR_FILTER_3_REG1_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_3_REG1(N),
                      mask,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_3_REG1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_ROUTING_OR_FILTER_3_REG1_array_read( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_ROUTING_OR_FILTER_3_REG1_array_read( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_ROUTING_OR_FILTER_3_REG1(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_ROUTING_OR_FILTER_3_REG1_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_ROUTING_OR_FILTER_3_REG2_array_write( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_OR_FILTER_3_REG2_array_write( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_ROUTING_OR_FILTER_3_REG2_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_3_REG2(N),
                      value);
}

static INLINE void eclass_reg_ROUTING_OR_FILTER_3_REG2_array_field_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_OR_FILTER_3_REG2_array_field_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_ROUTING_OR_FILTER_3_REG2_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_3_REG2(N),
                      mask,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_3_REG2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_ROUTING_OR_FILTER_3_REG2_array_read( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_ROUTING_OR_FILTER_3_REG2_array_read( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_ROUTING_OR_FILTER_3_REG2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_ROUTING_OR_FILTER_3_REG2_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_ROUTING_OR_FILTER_4_REG1_array_write( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_OR_FILTER_4_REG1_array_write( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_ROUTING_OR_FILTER_4_REG1_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_4_REG1(N),
                      value);
}

static INLINE void eclass_reg_ROUTING_OR_FILTER_4_REG1_array_field_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_OR_FILTER_4_REG1_array_field_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_ROUTING_OR_FILTER_4_REG1_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_4_REG1(N),
                      mask,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_4_REG1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_ROUTING_OR_FILTER_4_REG1_array_read( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_ROUTING_OR_FILTER_4_REG1_array_read( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_ROUTING_OR_FILTER_4_REG1(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_ROUTING_OR_FILTER_4_REG1_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_ROUTING_OR_FILTER_4_REG2_array_write( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_OR_FILTER_4_REG2_array_write( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_ROUTING_OR_FILTER_4_REG2_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_4_REG2(N),
                      value);
}

static INLINE void eclass_reg_ROUTING_OR_FILTER_4_REG2_array_field_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_OR_FILTER_4_REG2_array_field_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_ROUTING_OR_FILTER_4_REG2_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_4_REG2(N),
                      mask,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_4_REG2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_ROUTING_OR_FILTER_4_REG2_array_read( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_ROUTING_OR_FILTER_4_REG2_array_read( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_ROUTING_OR_FILTER_4_REG2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_ROUTING_OR_FILTER_4_REG2_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_ROUTING_OR_FILTER_5_REG1_array_write( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_OR_FILTER_5_REG1_array_write( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_ROUTING_OR_FILTER_5_REG1_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_5_REG1(N),
                      value);
}

static INLINE void eclass_reg_ROUTING_OR_FILTER_5_REG1_array_field_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_OR_FILTER_5_REG1_array_field_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_ROUTING_OR_FILTER_5_REG1_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_5_REG1(N),
                      mask,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_5_REG1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_ROUTING_OR_FILTER_5_REG1_array_read( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_ROUTING_OR_FILTER_5_REG1_array_read( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_ROUTING_OR_FILTER_5_REG1(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_ROUTING_OR_FILTER_5_REG1_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_ROUTING_OR_FILTER_5_REG2_array_write( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_OR_FILTER_5_REG2_array_write( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_ROUTING_OR_FILTER_5_REG2_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_5_REG2(N),
                      value);
}

static INLINE void eclass_reg_ROUTING_OR_FILTER_5_REG2_array_field_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_ROUTING_OR_FILTER_5_REG2_array_field_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_ROUTING_OR_FILTER_5_REG2_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_5_REG2(N),
                      mask,
                      PMC_ECLASS120_REG_ROUTING_OR_FILTER_5_REG2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_ROUTING_OR_FILTER_5_REG2_array_read( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_ROUTING_OR_FILTER_5_REG2_array_read( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_ROUTING_OR_FILTER_5_REG2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_ROUTING_OR_FILTER_5_REG2_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_LINK_ECO_array_write( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_LINK_ECO_array_write( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_LINK_ECO_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_LINK_ECO(N),
                      value);
}

static INLINE void eclass_reg_LINK_ECO_array_field_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_LINK_ECO_array_field_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_LINK_ECO_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_LINK_ECO(N),
                      mask,
                      PMC_ECLASS120_REG_LINK_ECO_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_LINK_ECO_array_read( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_LINK_ECO_array_read( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_LINK_ECO(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_LINK_ECO_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_0_REG_1_array_write( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_0_REG_1_array_write( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER16_0_REG_1_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_1(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_0_REG_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                               eclass_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_0_REG_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                               eclass_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER16_0_REG_1_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_1(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER16_0_REG_1_array_read( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER16_0_REG_1_array_read( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_1(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FILTER16_0_REG_1_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_0_REG_2_array_write( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_0_REG_2_array_write( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER16_0_REG_2_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_2(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_0_REG_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                               eclass_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_0_REG_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                               eclass_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER16_0_REG_2_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_2(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER16_0_REG_2_array_read( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER16_0_REG_2_array_read( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FILTER16_0_REG_2_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_1_REG_1_array_write( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_1_REG_1_array_write( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER16_1_REG_1_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_1(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_1_REG_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                               eclass_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_1_REG_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                               eclass_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER16_1_REG_1_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_1(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER16_1_REG_1_array_read( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER16_1_REG_1_array_read( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_1(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FILTER16_1_REG_1_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_1_REG_2_array_write( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_1_REG_2_array_write( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER16_1_REG_2_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_2(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_1_REG_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                               eclass_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_1_REG_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                               eclass_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER16_1_REG_2_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_2(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER16_1_REG_2_array_read( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER16_1_REG_2_array_read( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FILTER16_1_REG_2_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_2_REG_1_array_write( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_2_REG_1_array_write( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER16_2_REG_1_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_1(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_2_REG_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                               eclass_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_2_REG_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                               eclass_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER16_2_REG_1_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_1(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER16_2_REG_1_array_read( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER16_2_REG_1_array_read( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_1(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FILTER16_2_REG_1_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_2_REG_2_array_write( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_2_REG_2_array_write( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER16_2_REG_2_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_2(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_2_REG_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                               eclass_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_2_REG_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                               eclass_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER16_2_REG_2_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_2(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER16_2_REG_2_array_read( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER16_2_REG_2_array_read( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FILTER16_2_REG_2_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_3_REG_1_array_write( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_3_REG_1_array_write( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER16_3_REG_1_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_1(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_3_REG_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                               eclass_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_3_REG_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                               eclass_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER16_3_REG_1_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_1(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER16_3_REG_1_array_read( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER16_3_REG_1_array_read( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_1(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FILTER16_3_REG_1_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_3_REG_2_array_write( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_3_REG_2_array_write( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER16_3_REG_2_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_2(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_3_REG_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                               eclass_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_3_REG_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                               eclass_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER16_3_REG_2_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_2(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER16_3_REG_2_array_read( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER16_3_REG_2_array_read( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FILTER16_3_REG_2_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_4_REG_1_array_write( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_4_REG_1_array_write( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER16_4_REG_1_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_1(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_4_REG_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                               eclass_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_4_REG_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                               eclass_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER16_4_REG_1_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_1(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER16_4_REG_1_array_read( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER16_4_REG_1_array_read( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_1(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FILTER16_4_REG_1_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_4_REG_2_array_write( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_4_REG_2_array_write( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER16_4_REG_2_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_2(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_4_REG_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                               eclass_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_4_REG_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                               eclass_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER16_4_REG_2_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_2(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER16_4_REG_2_array_read( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER16_4_REG_2_array_read( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FILTER16_4_REG_2_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_5_REG_1_array_write( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_5_REG_1_array_write( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER16_5_REG_1_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_1(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_5_REG_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                               eclass_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_5_REG_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                               eclass_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER16_5_REG_1_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_1(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER16_5_REG_1_array_read( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER16_5_REG_1_array_read( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_1(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FILTER16_5_REG_1_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_5_REG_2_array_write( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_5_REG_2_array_write( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER16_5_REG_2_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_2(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_5_REG_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                               eclass_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_5_REG_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                               eclass_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER16_5_REG_2_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_2(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER16_5_REG_2_array_read( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER16_5_REG_2_array_read( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FILTER16_5_REG_2_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_6_REG_1_array_write( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_6_REG_1_array_write( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER16_6_REG_1_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_1(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_6_REG_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                               eclass_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_6_REG_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                               eclass_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER16_6_REG_1_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_1(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER16_6_REG_1_array_read( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER16_6_REG_1_array_read( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_1(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FILTER16_6_REG_1_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_6_REG_2_array_write( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_6_REG_2_array_write( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER16_6_REG_2_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_2(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_6_REG_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                               eclass_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_6_REG_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                               eclass_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER16_6_REG_2_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_2(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER16_6_REG_2_array_read( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER16_6_REG_2_array_read( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FILTER16_6_REG_2_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_7_REG_1_array_write( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_7_REG_1_array_write( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER16_7_REG_1_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_1(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_7_REG_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                               eclass_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_7_REG_1_array_field_set( eclass_buffer_t *b_ptr,
                                                                               eclass_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER16_7_REG_1_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_1(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_1_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER16_7_REG_1_array_read( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER16_7_REG_1_array_read( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_1(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FILTER16_7_REG_1_array_read", reg_value, N);
    return reg_value;
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_7_REG_2_array_write( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_7_REG_2_array_write( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER16_7_REG_2_array_write", value );
    eclass_reg_write( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_2(N),
                      value);
}

static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_7_REG_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                               eclass_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_reg_GEN_FILTER_CFG_FILTER16_7_REG_2_array_field_set( eclass_buffer_t *b_ptr,
                                                                               eclass_handle_t *h_ptr,
                                                                               UINT32  N,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value )
{
    IOLOG( "%s <- N=%d mask=0x%08x ofs=%d value=0x%08x", "eclass_reg_GEN_FILTER_CFG_FILTER16_7_REG_2_array_field_set", N, mask, ofs, value );
    eclass_field_set( b_ptr,
                      h_ptr,
                      MEM_TYPE_STATUS,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_2(N),
                      mask,
                      PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_2_UNUSED_MASK,
                      ofs,
                      value);

}

static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER16_7_REG_2_array_read( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_reg_GEN_FILTER_CFG_FILTER16_7_REG_2_array_read( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N )
{
    UINT32 reg_value;

    reg_value = eclass_reg_read( b_ptr,
                                 h_ptr,
                                 MEM_TYPE_STATUS,
                                 PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_2(N));

    IOLOG( "%s -> 0x%08x; N=%d", "eclass_reg_GEN_FILTER_CFG_FILTER16_7_REG_2_array_read", reg_value, N);
    return reg_value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config
 * ==================================================================================
 */
static INLINE void eclass_field_ECLASS120_LINK11_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ECLASS120_LINK11_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ECLASS120_LINK11_EN_set", value, 1);
    IOLOG( "%s <= 0x%08x", "eclass_field_ECLASS120_LINK11_EN_set", value );

    /* (0x0000001c bits 11) field ECLASS120_LINK11_EN of register PMC_ECLASS120_REG_ECLASS120_LINK_EN */
    eclass_reg_ECLASS120_LINK_EN_field_set( b_ptr,
                                            h_ptr,
                                            ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK11_EN_MSK,
                                            ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK11_EN_OFF,
                                            value);
}

static INLINE UINT32 eclass_field_ECLASS120_LINK11_EN_get( eclass_buffer_t *b_ptr, eclass_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ECLASS120_LINK11_EN_get( eclass_buffer_t *b_ptr, eclass_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000001c bits 11) field ECLASS120_LINK11_EN of register PMC_ECLASS120_REG_ECLASS120_LINK_EN */
    reg_value = eclass_reg_ECLASS120_LINK_EN_read(  b_ptr, h_ptr);
    value = (reg_value & ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK11_EN_MSK) >> ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK11_EN_OFF;
    IOLOG( "%s -> 0x%08x", "eclass_field_ECLASS120_LINK11_EN_get", value );

    return value;
}
static INLINE void eclass_field_ECLASS120_LINK10_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ECLASS120_LINK10_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ECLASS120_LINK10_EN_set", value, 1);
    IOLOG( "%s <= 0x%08x", "eclass_field_ECLASS120_LINK10_EN_set", value );

    /* (0x0000001c bits 10) field ECLASS120_LINK10_EN of register PMC_ECLASS120_REG_ECLASS120_LINK_EN */
    eclass_reg_ECLASS120_LINK_EN_field_set( b_ptr,
                                            h_ptr,
                                            ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK10_EN_MSK,
                                            ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK10_EN_OFF,
                                            value);
}

static INLINE UINT32 eclass_field_ECLASS120_LINK10_EN_get( eclass_buffer_t *b_ptr, eclass_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ECLASS120_LINK10_EN_get( eclass_buffer_t *b_ptr, eclass_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000001c bits 10) field ECLASS120_LINK10_EN of register PMC_ECLASS120_REG_ECLASS120_LINK_EN */
    reg_value = eclass_reg_ECLASS120_LINK_EN_read(  b_ptr, h_ptr);
    value = (reg_value & ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK10_EN_MSK) >> ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK10_EN_OFF;
    IOLOG( "%s -> 0x%08x", "eclass_field_ECLASS120_LINK10_EN_get", value );

    return value;
}
static INLINE void eclass_field_ECLASS120_LINK9_EN_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ECLASS120_LINK9_EN_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ECLASS120_LINK9_EN_set", value, 1);
    IOLOG( "%s <= 0x%08x", "eclass_field_ECLASS120_LINK9_EN_set", value );

    /* (0x0000001c bits 9) field ECLASS120_LINK9_EN of register PMC_ECLASS120_REG_ECLASS120_LINK_EN */
    eclass_reg_ECLASS120_LINK_EN_field_set( b_ptr,
                                            h_ptr,
                                            ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK9_EN_MSK,
                                            ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK9_EN_OFF,
                                            value);
}

static INLINE UINT32 eclass_field_ECLASS120_LINK9_EN_get( eclass_buffer_t *b_ptr, eclass_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ECLASS120_LINK9_EN_get( eclass_buffer_t *b_ptr, eclass_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000001c bits 9) field ECLASS120_LINK9_EN of register PMC_ECLASS120_REG_ECLASS120_LINK_EN */
    reg_value = eclass_reg_ECLASS120_LINK_EN_read(  b_ptr, h_ptr);
    value = (reg_value & ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK9_EN_MSK) >> ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK9_EN_OFF;
    IOLOG( "%s -> 0x%08x", "eclass_field_ECLASS120_LINK9_EN_get", value );

    return value;
}
static INLINE void eclass_field_ECLASS120_LINK8_EN_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ECLASS120_LINK8_EN_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ECLASS120_LINK8_EN_set", value, 1);
    IOLOG( "%s <= 0x%08x", "eclass_field_ECLASS120_LINK8_EN_set", value );

    /* (0x0000001c bits 8) field ECLASS120_LINK8_EN of register PMC_ECLASS120_REG_ECLASS120_LINK_EN */
    eclass_reg_ECLASS120_LINK_EN_field_set( b_ptr,
                                            h_ptr,
                                            ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK8_EN_MSK,
                                            ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK8_EN_OFF,
                                            value);
}

static INLINE UINT32 eclass_field_ECLASS120_LINK8_EN_get( eclass_buffer_t *b_ptr, eclass_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ECLASS120_LINK8_EN_get( eclass_buffer_t *b_ptr, eclass_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000001c bits 8) field ECLASS120_LINK8_EN of register PMC_ECLASS120_REG_ECLASS120_LINK_EN */
    reg_value = eclass_reg_ECLASS120_LINK_EN_read(  b_ptr, h_ptr);
    value = (reg_value & ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK8_EN_MSK) >> ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK8_EN_OFF;
    IOLOG( "%s -> 0x%08x", "eclass_field_ECLASS120_LINK8_EN_get", value );

    return value;
}
static INLINE void eclass_field_ECLASS120_LINK7_EN_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ECLASS120_LINK7_EN_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ECLASS120_LINK7_EN_set", value, 1);
    IOLOG( "%s <= 0x%08x", "eclass_field_ECLASS120_LINK7_EN_set", value );

    /* (0x0000001c bits 7) field ECLASS120_LINK7_EN of register PMC_ECLASS120_REG_ECLASS120_LINK_EN */
    eclass_reg_ECLASS120_LINK_EN_field_set( b_ptr,
                                            h_ptr,
                                            ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK7_EN_MSK,
                                            ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK7_EN_OFF,
                                            value);
}

static INLINE UINT32 eclass_field_ECLASS120_LINK7_EN_get( eclass_buffer_t *b_ptr, eclass_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ECLASS120_LINK7_EN_get( eclass_buffer_t *b_ptr, eclass_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000001c bits 7) field ECLASS120_LINK7_EN of register PMC_ECLASS120_REG_ECLASS120_LINK_EN */
    reg_value = eclass_reg_ECLASS120_LINK_EN_read(  b_ptr, h_ptr);
    value = (reg_value & ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK7_EN_MSK) >> ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK7_EN_OFF;
    IOLOG( "%s -> 0x%08x", "eclass_field_ECLASS120_LINK7_EN_get", value );

    return value;
}
static INLINE void eclass_field_ECLASS120_LINK6_EN_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ECLASS120_LINK6_EN_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ECLASS120_LINK6_EN_set", value, 1);
    IOLOG( "%s <= 0x%08x", "eclass_field_ECLASS120_LINK6_EN_set", value );

    /* (0x0000001c bits 6) field ECLASS120_LINK6_EN of register PMC_ECLASS120_REG_ECLASS120_LINK_EN */
    eclass_reg_ECLASS120_LINK_EN_field_set( b_ptr,
                                            h_ptr,
                                            ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK6_EN_MSK,
                                            ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK6_EN_OFF,
                                            value);
}

static INLINE UINT32 eclass_field_ECLASS120_LINK6_EN_get( eclass_buffer_t *b_ptr, eclass_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ECLASS120_LINK6_EN_get( eclass_buffer_t *b_ptr, eclass_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000001c bits 6) field ECLASS120_LINK6_EN of register PMC_ECLASS120_REG_ECLASS120_LINK_EN */
    reg_value = eclass_reg_ECLASS120_LINK_EN_read(  b_ptr, h_ptr);
    value = (reg_value & ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK6_EN_MSK) >> ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK6_EN_OFF;
    IOLOG( "%s -> 0x%08x", "eclass_field_ECLASS120_LINK6_EN_get", value );

    return value;
}
static INLINE void eclass_field_ECLASS120_LINK5_EN_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ECLASS120_LINK5_EN_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ECLASS120_LINK5_EN_set", value, 1);
    IOLOG( "%s <= 0x%08x", "eclass_field_ECLASS120_LINK5_EN_set", value );

    /* (0x0000001c bits 5) field ECLASS120_LINK5_EN of register PMC_ECLASS120_REG_ECLASS120_LINK_EN */
    eclass_reg_ECLASS120_LINK_EN_field_set( b_ptr,
                                            h_ptr,
                                            ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK5_EN_MSK,
                                            ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK5_EN_OFF,
                                            value);
}

static INLINE UINT32 eclass_field_ECLASS120_LINK5_EN_get( eclass_buffer_t *b_ptr, eclass_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ECLASS120_LINK5_EN_get( eclass_buffer_t *b_ptr, eclass_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000001c bits 5) field ECLASS120_LINK5_EN of register PMC_ECLASS120_REG_ECLASS120_LINK_EN */
    reg_value = eclass_reg_ECLASS120_LINK_EN_read(  b_ptr, h_ptr);
    value = (reg_value & ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK5_EN_MSK) >> ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK5_EN_OFF;
    IOLOG( "%s -> 0x%08x", "eclass_field_ECLASS120_LINK5_EN_get", value );

    return value;
}
static INLINE void eclass_field_ECLASS120_LINK4_EN_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ECLASS120_LINK4_EN_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ECLASS120_LINK4_EN_set", value, 1);
    IOLOG( "%s <= 0x%08x", "eclass_field_ECLASS120_LINK4_EN_set", value );

    /* (0x0000001c bits 4) field ECLASS120_LINK4_EN of register PMC_ECLASS120_REG_ECLASS120_LINK_EN */
    eclass_reg_ECLASS120_LINK_EN_field_set( b_ptr,
                                            h_ptr,
                                            ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK4_EN_MSK,
                                            ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK4_EN_OFF,
                                            value);
}

static INLINE UINT32 eclass_field_ECLASS120_LINK4_EN_get( eclass_buffer_t *b_ptr, eclass_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ECLASS120_LINK4_EN_get( eclass_buffer_t *b_ptr, eclass_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000001c bits 4) field ECLASS120_LINK4_EN of register PMC_ECLASS120_REG_ECLASS120_LINK_EN */
    reg_value = eclass_reg_ECLASS120_LINK_EN_read(  b_ptr, h_ptr);
    value = (reg_value & ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK4_EN_MSK) >> ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK4_EN_OFF;
    IOLOG( "%s -> 0x%08x", "eclass_field_ECLASS120_LINK4_EN_get", value );

    return value;
}
static INLINE void eclass_field_ECLASS120_LINK3_EN_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ECLASS120_LINK3_EN_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ECLASS120_LINK3_EN_set", value, 1);
    IOLOG( "%s <= 0x%08x", "eclass_field_ECLASS120_LINK3_EN_set", value );

    /* (0x0000001c bits 3) field ECLASS120_LINK3_EN of register PMC_ECLASS120_REG_ECLASS120_LINK_EN */
    eclass_reg_ECLASS120_LINK_EN_field_set( b_ptr,
                                            h_ptr,
                                            ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK3_EN_MSK,
                                            ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK3_EN_OFF,
                                            value);
}

static INLINE UINT32 eclass_field_ECLASS120_LINK3_EN_get( eclass_buffer_t *b_ptr, eclass_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ECLASS120_LINK3_EN_get( eclass_buffer_t *b_ptr, eclass_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000001c bits 3) field ECLASS120_LINK3_EN of register PMC_ECLASS120_REG_ECLASS120_LINK_EN */
    reg_value = eclass_reg_ECLASS120_LINK_EN_read(  b_ptr, h_ptr);
    value = (reg_value & ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK3_EN_MSK) >> ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK3_EN_OFF;
    IOLOG( "%s -> 0x%08x", "eclass_field_ECLASS120_LINK3_EN_get", value );

    return value;
}
static INLINE void eclass_field_ECLASS120_LINK2_EN_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ECLASS120_LINK2_EN_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ECLASS120_LINK2_EN_set", value, 1);
    IOLOG( "%s <= 0x%08x", "eclass_field_ECLASS120_LINK2_EN_set", value );

    /* (0x0000001c bits 2) field ECLASS120_LINK2_EN of register PMC_ECLASS120_REG_ECLASS120_LINK_EN */
    eclass_reg_ECLASS120_LINK_EN_field_set( b_ptr,
                                            h_ptr,
                                            ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK2_EN_MSK,
                                            ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK2_EN_OFF,
                                            value);
}

static INLINE UINT32 eclass_field_ECLASS120_LINK2_EN_get( eclass_buffer_t *b_ptr, eclass_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ECLASS120_LINK2_EN_get( eclass_buffer_t *b_ptr, eclass_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000001c bits 2) field ECLASS120_LINK2_EN of register PMC_ECLASS120_REG_ECLASS120_LINK_EN */
    reg_value = eclass_reg_ECLASS120_LINK_EN_read(  b_ptr, h_ptr);
    value = (reg_value & ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK2_EN_MSK) >> ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK2_EN_OFF;
    IOLOG( "%s -> 0x%08x", "eclass_field_ECLASS120_LINK2_EN_get", value );

    return value;
}
static INLINE void eclass_field_ECLASS120_LINK1_EN_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ECLASS120_LINK1_EN_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ECLASS120_LINK1_EN_set", value, 1);
    IOLOG( "%s <= 0x%08x", "eclass_field_ECLASS120_LINK1_EN_set", value );

    /* (0x0000001c bits 1) field ECLASS120_LINK1_EN of register PMC_ECLASS120_REG_ECLASS120_LINK_EN */
    eclass_reg_ECLASS120_LINK_EN_field_set( b_ptr,
                                            h_ptr,
                                            ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK1_EN_MSK,
                                            ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK1_EN_OFF,
                                            value);
}

static INLINE UINT32 eclass_field_ECLASS120_LINK1_EN_get( eclass_buffer_t *b_ptr, eclass_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ECLASS120_LINK1_EN_get( eclass_buffer_t *b_ptr, eclass_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000001c bits 1) field ECLASS120_LINK1_EN of register PMC_ECLASS120_REG_ECLASS120_LINK_EN */
    reg_value = eclass_reg_ECLASS120_LINK_EN_read(  b_ptr, h_ptr);
    value = (reg_value & ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK1_EN_MSK) >> ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK1_EN_OFF;
    IOLOG( "%s -> 0x%08x", "eclass_field_ECLASS120_LINK1_EN_get", value );

    return value;
}
static INLINE void eclass_field_ECLASS120_LINK0_EN_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ECLASS120_LINK0_EN_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ECLASS120_LINK0_EN_set", value, 1);
    IOLOG( "%s <= 0x%08x", "eclass_field_ECLASS120_LINK0_EN_set", value );

    /* (0x0000001c bits 0) field ECLASS120_LINK0_EN of register PMC_ECLASS120_REG_ECLASS120_LINK_EN */
    eclass_reg_ECLASS120_LINK_EN_field_set( b_ptr,
                                            h_ptr,
                                            ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK0_EN_MSK,
                                            ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK0_EN_OFF,
                                            value);
}

static INLINE UINT32 eclass_field_ECLASS120_LINK0_EN_get( eclass_buffer_t *b_ptr, eclass_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ECLASS120_LINK0_EN_get( eclass_buffer_t *b_ptr, eclass_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000001c bits 0) field ECLASS120_LINK0_EN of register PMC_ECLASS120_REG_ECLASS120_LINK_EN */
    reg_value = eclass_reg_ECLASS120_LINK_EN_read(  b_ptr, h_ptr);
    value = (reg_value & ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK0_EN_MSK) >> ECLASS120_REG_ECLASS120_LINK_EN_BIT_ECLASS120_LINK0_EN_OFF;
    IOLOG( "%s -> 0x%08x", "eclass_field_ECLASS120_LINK0_EN_get", value );

    return value;
}
static INLINE void eclass_field_NO_MATCH_EN_VLANMPLS_set( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_NO_MATCH_EN_VLANMPLS_set( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_NO_MATCH_EN_VLANMPLS_set", value, 63);
    IOLOG( "%s <= 0x%08x", "eclass_field_NO_MATCH_EN_VLANMPLS_set", value );

    /* (0x00003900 bits 31:26) bits 0:5 use field NO_MATCH_EN_VLANMPLS of register PMC_ECLASS120_REG_NO_MATCH_EN */
    eclass_reg_NO_MATCH_EN_field_set( b_ptr,
                                      h_ptr,
                                      ECLASS120_REG_NO_MATCH_EN_BIT_NO_MATCH_EN_VLANMPLS_MSK,
                                      ECLASS120_REG_NO_MATCH_EN_BIT_NO_MATCH_EN_VLANMPLS_OFF,
                                      value);
}

static INLINE UINT32 eclass_field_NO_MATCH_EN_VLANMPLS_get( eclass_buffer_t *b_ptr, eclass_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_NO_MATCH_EN_VLANMPLS_get( eclass_buffer_t *b_ptr, eclass_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00003900 bits 31:26) bits 0:5 use field NO_MATCH_EN_VLANMPLS of register PMC_ECLASS120_REG_NO_MATCH_EN */
    reg_value = eclass_reg_NO_MATCH_EN_read(  b_ptr, h_ptr);
    value = (reg_value & ECLASS120_REG_NO_MATCH_EN_BIT_NO_MATCH_EN_VLANMPLS_MSK) >> ECLASS120_REG_NO_MATCH_EN_BIT_NO_MATCH_EN_VLANMPLS_OFF;
    IOLOG( "%s -> 0x%08x", "eclass_field_NO_MATCH_EN_VLANMPLS_get", value );

    return value;
}
static INLINE void eclass_field_range_NO_MATCH_EN_VLANMPLS_set( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_NO_MATCH_EN_VLANMPLS_set( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_NO_MATCH_EN_VLANMPLS_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_NO_MATCH_EN_VLANMPLS_set", stop_bit, 5 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_NO_MATCH_EN_VLANMPLS_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00003900 bits 31:26) bits 0:5 use field NO_MATCH_EN_VLANMPLS of register PMC_ECLASS120_REG_NO_MATCH_EN */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00003900 bits 31:26) bits 0:5 use field NO_MATCH_EN_VLANMPLS of register PMC_ECLASS120_REG_NO_MATCH_EN */
        eclass_reg_NO_MATCH_EN_field_set( b_ptr,
                                          h_ptr,
                                          subfield_mask << (ECLASS120_REG_NO_MATCH_EN_BIT_NO_MATCH_EN_VLANMPLS_OFF + subfield_offset),
                                          ECLASS120_REG_NO_MATCH_EN_BIT_NO_MATCH_EN_VLANMPLS_OFF + subfield_offset,
                                          value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_NO_MATCH_EN_VLANMPLS_get( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_NO_MATCH_EN_VLANMPLS_get( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_NO_MATCH_EN_VLANMPLS_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_NO_MATCH_EN_VLANMPLS_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00003900 bits 31:26) bits 0:5 use field NO_MATCH_EN_VLANMPLS of register PMC_ECLASS120_REG_NO_MATCH_EN */
    reg_value = eclass_reg_NO_MATCH_EN_read(  b_ptr, h_ptr);
    field_value = (reg_value & ECLASS120_REG_NO_MATCH_EN_BIT_NO_MATCH_EN_VLANMPLS_MSK)
                  >> ECLASS120_REG_NO_MATCH_EN_BIT_NO_MATCH_EN_VLANMPLS_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_NO_MATCH_EN_BIT_NO_MATCH_EN_VLANMPLS_MSK, ECLASS120_REG_NO_MATCH_EN_BIT_NO_MATCH_EN_VLANMPLS_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_NO_MATCH_EN_VLANMPLS_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_NO_MATCH_EN_GEN_set( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_NO_MATCH_EN_GEN_set( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 67108863)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_NO_MATCH_EN_GEN_set", value, 67108863);
    IOLOG( "%s <= 0x%08x", "eclass_field_NO_MATCH_EN_GEN_set", value );

    /* (0x00003900 bits 25:0) bits 0:25 use field NO_MATCH_EN_GEN of register PMC_ECLASS120_REG_NO_MATCH_EN */
    eclass_reg_NO_MATCH_EN_field_set( b_ptr,
                                      h_ptr,
                                      ECLASS120_REG_NO_MATCH_EN_BIT_NO_MATCH_EN_GEN_MSK,
                                      ECLASS120_REG_NO_MATCH_EN_BIT_NO_MATCH_EN_GEN_OFF,
                                      value);
}

static INLINE UINT32 eclass_field_NO_MATCH_EN_GEN_get( eclass_buffer_t *b_ptr, eclass_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_NO_MATCH_EN_GEN_get( eclass_buffer_t *b_ptr, eclass_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00003900 bits 25:0) bits 0:25 use field NO_MATCH_EN_GEN of register PMC_ECLASS120_REG_NO_MATCH_EN */
    reg_value = eclass_reg_NO_MATCH_EN_read(  b_ptr, h_ptr);
    value = (reg_value & ECLASS120_REG_NO_MATCH_EN_BIT_NO_MATCH_EN_GEN_MSK) >> ECLASS120_REG_NO_MATCH_EN_BIT_NO_MATCH_EN_GEN_OFF;
    IOLOG( "%s -> 0x%08x", "eclass_field_NO_MATCH_EN_GEN_get", value );

    return value;
}
static INLINE void eclass_field_range_NO_MATCH_EN_GEN_set( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_NO_MATCH_EN_GEN_set( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_NO_MATCH_EN_GEN_set", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_NO_MATCH_EN_GEN_set", stop_bit, 25 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_NO_MATCH_EN_GEN_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00003900 bits 25:0) bits 0:25 use field NO_MATCH_EN_GEN of register PMC_ECLASS120_REG_NO_MATCH_EN */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 25) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 25;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00003900 bits 25:0) bits 0:25 use field NO_MATCH_EN_GEN of register PMC_ECLASS120_REG_NO_MATCH_EN */
        eclass_reg_NO_MATCH_EN_field_set( b_ptr,
                                          h_ptr,
                                          subfield_mask << (ECLASS120_REG_NO_MATCH_EN_BIT_NO_MATCH_EN_GEN_OFF + subfield_offset),
                                          ECLASS120_REG_NO_MATCH_EN_BIT_NO_MATCH_EN_GEN_OFF + subfield_offset,
                                          value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_NO_MATCH_EN_GEN_get( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_NO_MATCH_EN_GEN_get( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_NO_MATCH_EN_GEN_get", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_NO_MATCH_EN_GEN_get", stop_bit, 25 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 25) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 25;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00003900 bits 25:0) bits 0:25 use field NO_MATCH_EN_GEN of register PMC_ECLASS120_REG_NO_MATCH_EN */
    reg_value = eclass_reg_NO_MATCH_EN_read(  b_ptr, h_ptr);
    field_value = (reg_value & ECLASS120_REG_NO_MATCH_EN_BIT_NO_MATCH_EN_GEN_MSK)
                  >> ECLASS120_REG_NO_MATCH_EN_BIT_NO_MATCH_EN_GEN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_NO_MATCH_EN_BIT_NO_MATCH_EN_GEN_MSK, ECLASS120_REG_NO_MATCH_EN_BIT_NO_MATCH_EN_GEN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_NO_MATCH_EN_GEN_get", start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config_N_burstsize16
 * ==================================================================================
 */
static INLINE void eclass_lfield_COMB_ORIN_HWIRED_FOUT_EN_LSB_set( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32 value[16] ) ALWAYS_INLINE;
static INLINE void eclass_lfield_COMB_ORIN_HWIRED_FOUT_EN_LSB_set( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32 value[16] )
{
    IOLOG( "%s ", "eclass_lfield_COMB_ORIN_HWIRED_FOUT_EN_LSB_set");
    eclass_reg_FOUT_COMB_ORIN_1_array_burst_write( b_ptr,
                                                   h_ptr,
                                                   0,
                                                   16,
                                                   value);
}

static INLINE void eclass_lfield_COMB_ORIN_HWIRED_FOUT_EN_LSB_get( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32 value[16] ) ALWAYS_INLINE;
static INLINE void eclass_lfield_COMB_ORIN_HWIRED_FOUT_EN_LSB_get( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32 value[16] )
{
    IOLOG( "%s ", "eclass_lfield_COMB_ORIN_HWIRED_FOUT_EN_LSB_get");
    eclass_reg_FOUT_COMB_ORIN_1_array_burst_read( b_ptr,
                                                  h_ptr,
                                                  0,
                                                  16,
                                                  (UINT32 *)value);
}

static INLINE void eclass_lfield_range_COMB_ORIN_HWIRED_FOUT_EN_LSB_set( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_lfield_range_COMB_ORIN_HWIRED_FOUT_EN_LSB_set( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "eclass_lfield_range_COMB_ORIN_HWIRED_FOUT_EN_LSB_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "eclass_lfield_range_COMB_ORIN_HWIRED_FOUT_EN_LSB_set", start_bit, stop_bit, value);
    eclass_reg_FOUT_COMB_ORIN_1_array_field_set( b_ptr,
                                                 h_ptr,
                                                 word_number,
                                                 mask,
                                                 field_ofs,
                                                 value);
}

static INLINE UINT32 eclass_lfield_range_COMB_ORIN_HWIRED_FOUT_EN_LSB_get( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit ) ALWAYS_INLINE;
static INLINE UINT32 eclass_lfield_range_COMB_ORIN_HWIRED_FOUT_EN_LSB_get( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits));
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "eclass_lfield_range_COMB_ORIN_HWIRED_FOUT_EN_LSB_get", start_bit, stop_bit );
    }
    reg_value = eclass_reg_FOUT_COMB_ORIN_1_array_read( b_ptr,
                                                        h_ptr,
                                                        word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "eclass_lfield_range_COMB_ORIN_HWIRED_FOUT_EN_LSB_get", start_bit, stop_bit, value );
    return value;
}


/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config_N_burstsize26
 * ==================================================================================
 */
static INLINE void eclass_lfield_COMB_OROUT_FILTAND_EN_LSB_set( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32 value[26] ) ALWAYS_INLINE;
static INLINE void eclass_lfield_COMB_OROUT_FILTAND_EN_LSB_set( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32 value[26] )
{
    IOLOG( "%s ", "eclass_lfield_COMB_OROUT_FILTAND_EN_LSB_set");
    eclass_reg_FOUT_COMB_OROUT_1_array_burst_write( b_ptr,
                                                    h_ptr,
                                                    0,
                                                    26,
                                                    value);
}

static INLINE void eclass_lfield_COMB_OROUT_FILTAND_EN_LSB_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32 value[26] ) ALWAYS_INLINE;
static INLINE void eclass_lfield_COMB_OROUT_FILTAND_EN_LSB_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32 value[26] )
{
    IOLOG( "%s ", "eclass_lfield_COMB_OROUT_FILTAND_EN_LSB_get");
    eclass_reg_FOUT_COMB_OROUT_1_array_burst_read( b_ptr,
                                                   h_ptr,
                                                   0,
                                                   26,
                                                   (UINT32 *)value);
}

static INLINE void eclass_lfield_range_COMB_OROUT_FILTAND_EN_LSB_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_lfield_range_COMB_OROUT_FILTAND_EN_LSB_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "eclass_lfield_range_COMB_OROUT_FILTAND_EN_LSB_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "eclass_lfield_range_COMB_OROUT_FILTAND_EN_LSB_set", start_bit, stop_bit, value);
    eclass_reg_FOUT_COMB_OROUT_1_array_field_set( b_ptr,
                                                  h_ptr,
                                                  word_number,
                                                  mask,
                                                  field_ofs,
                                                  value);
}

static INLINE UINT32 eclass_lfield_range_COMB_OROUT_FILTAND_EN_LSB_get( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit ) ALWAYS_INLINE;
static INLINE UINT32 eclass_lfield_range_COMB_OROUT_FILTAND_EN_LSB_get( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits));
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "eclass_lfield_range_COMB_OROUT_FILTAND_EN_LSB_get", start_bit, stop_bit );
    }
    reg_value = eclass_reg_FOUT_COMB_OROUT_1_array_read( b_ptr,
                                                         h_ptr,
                                                         word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "eclass_lfield_range_COMB_OROUT_FILTAND_EN_LSB_get", start_bit, stop_bit, value );
    return value;
}


/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config_N_burstsize40
 * ==================================================================================
 */
static INLINE void eclass_lfield_COMB_AND_HWIRED_FOUT_EN_LSB_set( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32 value[40] ) ALWAYS_INLINE;
static INLINE void eclass_lfield_COMB_AND_HWIRED_FOUT_EN_LSB_set( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32 value[40] )
{
    IOLOG( "%s ", "eclass_lfield_COMB_AND_HWIRED_FOUT_EN_LSB_set");
    eclass_reg_FOUT_COMB_AND_1_array_burst_write( b_ptr,
                                                  h_ptr,
                                                  0,
                                                  40,
                                                  value);
}

static INLINE void eclass_lfield_COMB_AND_HWIRED_FOUT_EN_LSB_get( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32 value[40] ) ALWAYS_INLINE;
static INLINE void eclass_lfield_COMB_AND_HWIRED_FOUT_EN_LSB_get( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32 value[40] )
{
    IOLOG( "%s ", "eclass_lfield_COMB_AND_HWIRED_FOUT_EN_LSB_get");
    eclass_reg_FOUT_COMB_AND_1_array_burst_read( b_ptr,
                                                 h_ptr,
                                                 0,
                                                 40,
                                                 (UINT32 *)value);
}

static INLINE void eclass_lfield_range_COMB_AND_HWIRED_FOUT_EN_LSB_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_lfield_range_COMB_AND_HWIRED_FOUT_EN_LSB_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit,
                                                                        UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "eclass_lfield_range_COMB_AND_HWIRED_FOUT_EN_LSB_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "eclass_lfield_range_COMB_AND_HWIRED_FOUT_EN_LSB_set", start_bit, stop_bit, value);
    eclass_reg_FOUT_COMB_AND_1_array_field_set( b_ptr,
                                                h_ptr,
                                                word_number,
                                                mask,
                                                field_ofs,
                                                value);
}

static INLINE UINT32 eclass_lfield_range_COMB_AND_HWIRED_FOUT_EN_LSB_get( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit ) ALWAYS_INLINE;
static INLINE UINT32 eclass_lfield_range_COMB_AND_HWIRED_FOUT_EN_LSB_get( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits));
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "eclass_lfield_range_COMB_AND_HWIRED_FOUT_EN_LSB_get", start_bit, stop_bit );
    }
    reg_value = eclass_reg_FOUT_COMB_AND_1_array_read( b_ptr,
                                                       h_ptr,
                                                       word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "eclass_lfield_range_COMB_AND_HWIRED_FOUT_EN_LSB_get", start_bit, stop_bit, value );
    return value;
}


/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config_N_size12
 * ==================================================================================
 */
static INLINE void eclass_field_ONE_WORD_GENCLASS_EN_set( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ONE_WORD_GENCLASS_EN_set( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ONE_WORD_GENCLASS_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ONE_WORD_GENCLASS_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ONE_WORD_GENCLASS_EN_set", N, value );

    /* ((0x00001b00 + (N) * 4) bits 31) field ONE_WORD_GENCLASS_EN of register PMC_ECLASS120_REG_GEN_CFG_HWIRED_FILTER index N=0..11 */
    eclass_reg_GEN_CFG_HWIRED_FILTER_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_ONE_WORD_GENCLASS_EN_MSK,
                                                      ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_ONE_WORD_GENCLASS_EN_OFF,
                                                      value);
}

static INLINE UINT32 eclass_field_ONE_WORD_GENCLASS_EN_get( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ONE_WORD_GENCLASS_EN_get( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ONE_WORD_GENCLASS_EN_get", N, 11);
    /* ((0x00001b00 + (N) * 4) bits 31) field ONE_WORD_GENCLASS_EN of register PMC_ECLASS120_REG_GEN_CFG_HWIRED_FILTER index N=0..11 */
    reg_value = eclass_reg_GEN_CFG_HWIRED_FILTER_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_ONE_WORD_GENCLASS_EN_MSK) >> ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_ONE_WORD_GENCLASS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ONE_WORD_GENCLASS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_ADDR_IPV6_P2P_UCAST_EN_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ADDR_IPV6_P2P_UCAST_EN_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_IPV6_P2P_UCAST_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ADDR_IPV6_P2P_UCAST_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ADDR_IPV6_P2P_UCAST_EN_set", N, value );

    /* ((0x00001b00 + (N) * 4) bits 28) field ADDR_IPV6_P2P_UCAST_EN of register PMC_ECLASS120_REG_GEN_CFG_HWIRED_FILTER index N=0..11 */
    eclass_reg_GEN_CFG_HWIRED_FILTER_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_ADDR_IPV6_P2P_UCAST_EN_MSK,
                                                      ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_ADDR_IPV6_P2P_UCAST_EN_OFF,
                                                      value);
}

static INLINE UINT32 eclass_field_ADDR_IPV6_P2P_UCAST_EN_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ADDR_IPV6_P2P_UCAST_EN_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_IPV6_P2P_UCAST_EN_get", N, 11);
    /* ((0x00001b00 + (N) * 4) bits 28) field ADDR_IPV6_P2P_UCAST_EN of register PMC_ECLASS120_REG_GEN_CFG_HWIRED_FILTER index N=0..11 */
    reg_value = eclass_reg_GEN_CFG_HWIRED_FILTER_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_ADDR_IPV6_P2P_UCAST_EN_MSK) >> ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_ADDR_IPV6_P2P_UCAST_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ADDR_IPV6_P2P_UCAST_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_ADDR_IPV6_UCAST_EN_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ADDR_IPV6_UCAST_EN_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_IPV6_UCAST_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ADDR_IPV6_UCAST_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ADDR_IPV6_UCAST_EN_set", N, value );

    /* ((0x00001b00 + (N) * 4) bits 24) field ADDR_IPV6_UCAST_EN of register PMC_ECLASS120_REG_GEN_CFG_HWIRED_FILTER index N=0..11 */
    eclass_reg_GEN_CFG_HWIRED_FILTER_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_ADDR_IPV6_UCAST_EN_MSK,
                                                      ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_ADDR_IPV6_UCAST_EN_OFF,
                                                      value);
}

static INLINE UINT32 eclass_field_ADDR_IPV6_UCAST_EN_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ADDR_IPV6_UCAST_EN_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_IPV6_UCAST_EN_get", N, 11);
    /* ((0x00001b00 + (N) * 4) bits 24) field ADDR_IPV6_UCAST_EN of register PMC_ECLASS120_REG_GEN_CFG_HWIRED_FILTER index N=0..11 */
    reg_value = eclass_reg_GEN_CFG_HWIRED_FILTER_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_ADDR_IPV6_UCAST_EN_MSK) >> ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_ADDR_IPV6_UCAST_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ADDR_IPV6_UCAST_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_ADDR_IPV4_P2P_UCAST_EN_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ADDR_IPV4_P2P_UCAST_EN_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_IPV4_P2P_UCAST_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ADDR_IPV4_P2P_UCAST_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ADDR_IPV4_P2P_UCAST_EN_set", N, value );

    /* ((0x00001b00 + (N) * 4) bits 20) field ADDR_IPV4_P2P_UCAST_EN of register PMC_ECLASS120_REG_GEN_CFG_HWIRED_FILTER index N=0..11 */
    eclass_reg_GEN_CFG_HWIRED_FILTER_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_ADDR_IPV4_P2P_UCAST_EN_MSK,
                                                      ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_ADDR_IPV4_P2P_UCAST_EN_OFF,
                                                      value);
}

static INLINE UINT32 eclass_field_ADDR_IPV4_P2P_UCAST_EN_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ADDR_IPV4_P2P_UCAST_EN_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_IPV4_P2P_UCAST_EN_get", N, 11);
    /* ((0x00001b00 + (N) * 4) bits 20) field ADDR_IPV4_P2P_UCAST_EN of register PMC_ECLASS120_REG_GEN_CFG_HWIRED_FILTER index N=0..11 */
    reg_value = eclass_reg_GEN_CFG_HWIRED_FILTER_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_ADDR_IPV4_P2P_UCAST_EN_MSK) >> ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_ADDR_IPV4_P2P_UCAST_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ADDR_IPV4_P2P_UCAST_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_ADDR_IPV4_UCAST_EN_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ADDR_IPV4_UCAST_EN_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_IPV4_UCAST_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ADDR_IPV4_UCAST_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ADDR_IPV4_UCAST_EN_set", N, value );

    /* ((0x00001b00 + (N) * 4) bits 16) field ADDR_IPV4_UCAST_EN of register PMC_ECLASS120_REG_GEN_CFG_HWIRED_FILTER index N=0..11 */
    eclass_reg_GEN_CFG_HWIRED_FILTER_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_ADDR_IPV4_UCAST_EN_MSK,
                                                      ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_ADDR_IPV4_UCAST_EN_OFF,
                                                      value);
}

static INLINE UINT32 eclass_field_ADDR_IPV4_UCAST_EN_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ADDR_IPV4_UCAST_EN_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_IPV4_UCAST_EN_get", N, 11);
    /* ((0x00001b00 + (N) * 4) bits 16) field ADDR_IPV4_UCAST_EN of register PMC_ECLASS120_REG_GEN_CFG_HWIRED_FILTER index N=0..11 */
    reg_value = eclass_reg_GEN_CFG_HWIRED_FILTER_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_ADDR_IPV4_UCAST_EN_MSK) >> ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_ADDR_IPV4_UCAST_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ADDR_IPV4_UCAST_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_USE_UNICAST_NDP_set( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_USE_UNICAST_NDP_set( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_USE_UNICAST_NDP_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_USE_UNICAST_NDP_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_USE_UNICAST_NDP_set", N, value );

    /* ((0x00001b00 + (N) * 4) bits 12) field USE_UNICAST_NDP of register PMC_ECLASS120_REG_GEN_CFG_HWIRED_FILTER index N=0..11 */
    eclass_reg_GEN_CFG_HWIRED_FILTER_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_USE_UNICAST_NDP_MSK,
                                                      ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_USE_UNICAST_NDP_OFF,
                                                      value);
}

static INLINE UINT32 eclass_field_USE_UNICAST_NDP_get( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_USE_UNICAST_NDP_get( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_USE_UNICAST_NDP_get", N, 11);
    /* ((0x00001b00 + (N) * 4) bits 12) field USE_UNICAST_NDP of register PMC_ECLASS120_REG_GEN_CFG_HWIRED_FILTER index N=0..11 */
    reg_value = eclass_reg_GEN_CFG_HWIRED_FILTER_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_USE_UNICAST_NDP_MSK) >> ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_USE_UNICAST_NDP_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_USE_UNICAST_NDP_get", N, value );

    return value;
}
static INLINE void eclass_field_PTP_VER_VALUE_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_PTP_VER_VALUE_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_PTP_VER_VALUE_set", N, 11);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_PTP_VER_VALUE_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_PTP_VER_VALUE_set", N, value );

    /* ((0x00001b00 + (N) * 4) bits 7:4) bits 0:3 use field PTP_VER_VALUE of register PMC_ECLASS120_REG_GEN_CFG_HWIRED_FILTER index N=0..11 */
    eclass_reg_GEN_CFG_HWIRED_FILTER_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_PTP_VER_VALUE_MSK,
                                                      ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_PTP_VER_VALUE_OFF,
                                                      value);
}

static INLINE UINT32 eclass_field_PTP_VER_VALUE_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_PTP_VER_VALUE_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_PTP_VER_VALUE_get", N, 11);
    /* ((0x00001b00 + (N) * 4) bits 7:4) bits 0:3 use field PTP_VER_VALUE of register PMC_ECLASS120_REG_GEN_CFG_HWIRED_FILTER index N=0..11 */
    reg_value = eclass_reg_GEN_CFG_HWIRED_FILTER_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_PTP_VER_VALUE_MSK) >> ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_PTP_VER_VALUE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_PTP_VER_VALUE_get", N, value );

    return value;
}
static INLINE void eclass_field_range_PTP_VER_VALUE_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_PTP_VER_VALUE_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_PTP_VER_VALUE_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_PTP_VER_VALUE_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_PTP_VER_VALUE_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_PTP_VER_VALUE_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00001b00 + (N) * 4) bits 7:4) bits 0:3 use field PTP_VER_VALUE of register PMC_ECLASS120_REG_GEN_CFG_HWIRED_FILTER index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00001b00 + (N) * 4) bits 7:4) bits 0:3 use field PTP_VER_VALUE of register PMC_ECLASS120_REG_GEN_CFG_HWIRED_FILTER index N=0..11 */
        eclass_reg_GEN_CFG_HWIRED_FILTER_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          subfield_mask << (ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_PTP_VER_VALUE_OFF + subfield_offset),
                                                          ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_PTP_VER_VALUE_OFF + subfield_offset,
                                                          value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_PTP_VER_VALUE_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_PTP_VER_VALUE_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_PTP_VER_VALUE_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_PTP_VER_VALUE_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_PTP_VER_VALUE_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00001b00 + (N) * 4) bits 7:4) bits 0:3 use field PTP_VER_VALUE of register PMC_ECLASS120_REG_GEN_CFG_HWIRED_FILTER index N=0..11 */
    reg_value = eclass_reg_GEN_CFG_HWIRED_FILTER_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    field_value = (reg_value & ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_PTP_VER_VALUE_MSK)
                  >> ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_PTP_VER_VALUE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_PTP_VER_VALUE_MSK, ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_PTP_VER_VALUE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_PTP_VER_VALUE_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_PTP_VER_CHECK_EN_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_PTP_VER_CHECK_EN_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_PTP_VER_CHECK_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_PTP_VER_CHECK_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_PTP_VER_CHECK_EN_set", N, value );

    /* ((0x00001b00 + (N) * 4) bits 0) field PTP_VER_CHECK_EN of register PMC_ECLASS120_REG_GEN_CFG_HWIRED_FILTER index N=0..11 */
    eclass_reg_GEN_CFG_HWIRED_FILTER_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_PTP_VER_CHECK_EN_MSK,
                                                      ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_PTP_VER_CHECK_EN_OFF,
                                                      value);
}

static INLINE UINT32 eclass_field_PTP_VER_CHECK_EN_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_PTP_VER_CHECK_EN_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_PTP_VER_CHECK_EN_get", N, 11);
    /* ((0x00001b00 + (N) * 4) bits 0) field PTP_VER_CHECK_EN of register PMC_ECLASS120_REG_GEN_CFG_HWIRED_FILTER index N=0..11 */
    reg_value = eclass_reg_GEN_CFG_HWIRED_FILTER_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_PTP_VER_CHECK_EN_MSK) >> ECLASS120_REG_GEN_CFG_HWIRED_FILTER_BIT_PTP_VER_CHECK_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_PTP_VER_CHECK_EN_get", N, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config_N_size16
 * ==================================================================================
 */
static INLINE void eclass_field_COMB_ORIN_OUT_INV_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_COMB_ORIN_OUT_INV_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 15)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_COMB_ORIN_OUT_INV_set", N, 15);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_COMB_ORIN_OUT_INV_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_COMB_ORIN_OUT_INV_set", N, value );

    /* ((0x00002c50 + (N) * 4) bits 31) field COMB_ORIN_OUT_INV of register PMC_ECLASS120_REG_FOUT_COMB_ORIN_2 index N=0..15 */
    eclass_reg_FOUT_COMB_ORIN_2_array_field_set( b_ptr,
                                                 h_ptr,
                                                 N,
                                                 ECLASS120_REG_FOUT_COMB_ORIN_2_BIT_COMB_ORIN_OUT_INV_MSK,
                                                 ECLASS120_REG_FOUT_COMB_ORIN_2_BIT_COMB_ORIN_OUT_INV_OFF,
                                                 value);
}

static INLINE UINT32 eclass_field_COMB_ORIN_OUT_INV_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_COMB_ORIN_OUT_INV_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 15)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_COMB_ORIN_OUT_INV_get", N, 15);
    /* ((0x00002c50 + (N) * 4) bits 31) field COMB_ORIN_OUT_INV of register PMC_ECLASS120_REG_FOUT_COMB_ORIN_2 index N=0..15 */
    reg_value = eclass_reg_FOUT_COMB_ORIN_2_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    value = (reg_value & ECLASS120_REG_FOUT_COMB_ORIN_2_BIT_COMB_ORIN_OUT_INV_MSK) >> ECLASS120_REG_FOUT_COMB_ORIN_2_BIT_COMB_ORIN_OUT_INV_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_COMB_ORIN_OUT_INV_get", N, value );

    return value;
}
static INLINE void eclass_field_COMB_ORIN_CFG_FOUT_EN_set( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_COMB_ORIN_CFG_FOUT_EN_set( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value )
{
    if (N > 15)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_COMB_ORIN_CFG_FOUT_EN_set", N, 15);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_COMB_ORIN_CFG_FOUT_EN_set", value, 255);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_COMB_ORIN_CFG_FOUT_EN_set", N, value );

    /* ((0x00002c50 + (N) * 4) bits 30:23) bits 0:7 use field COMB_ORIN_CFG_FOUT_EN of register PMC_ECLASS120_REG_FOUT_COMB_ORIN_2 index N=0..15 */
    eclass_reg_FOUT_COMB_ORIN_2_array_field_set( b_ptr,
                                                 h_ptr,
                                                 N,
                                                 ECLASS120_REG_FOUT_COMB_ORIN_2_BIT_COMB_ORIN_CFG_FOUT_EN_MSK,
                                                 ECLASS120_REG_FOUT_COMB_ORIN_2_BIT_COMB_ORIN_CFG_FOUT_EN_OFF,
                                                 value);
}

static INLINE UINT32 eclass_field_COMB_ORIN_CFG_FOUT_EN_get( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_COMB_ORIN_CFG_FOUT_EN_get( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 15)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_COMB_ORIN_CFG_FOUT_EN_get", N, 15);
    /* ((0x00002c50 + (N) * 4) bits 30:23) bits 0:7 use field COMB_ORIN_CFG_FOUT_EN of register PMC_ECLASS120_REG_FOUT_COMB_ORIN_2 index N=0..15 */
    reg_value = eclass_reg_FOUT_COMB_ORIN_2_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    value = (reg_value & ECLASS120_REG_FOUT_COMB_ORIN_2_BIT_COMB_ORIN_CFG_FOUT_EN_MSK) >> ECLASS120_REG_FOUT_COMB_ORIN_2_BIT_COMB_ORIN_CFG_FOUT_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_COMB_ORIN_CFG_FOUT_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_COMB_ORIN_CFG_FOUT_EN_set( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_COMB_ORIN_CFG_FOUT_EN_set( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (N > 15)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_COMB_ORIN_CFG_FOUT_EN_set", N, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_COMB_ORIN_CFG_FOUT_EN_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_COMB_ORIN_CFG_FOUT_EN_set", stop_bit, 7 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_COMB_ORIN_CFG_FOUT_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002c50 + (N) * 4) bits 30:23) bits 0:7 use field COMB_ORIN_CFG_FOUT_EN of register PMC_ECLASS120_REG_FOUT_COMB_ORIN_2 index N=0..15 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002c50 + (N) * 4) bits 30:23) bits 0:7 use field COMB_ORIN_CFG_FOUT_EN of register PMC_ECLASS120_REG_FOUT_COMB_ORIN_2 index N=0..15 */
        eclass_reg_FOUT_COMB_ORIN_2_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     subfield_mask << (ECLASS120_REG_FOUT_COMB_ORIN_2_BIT_COMB_ORIN_CFG_FOUT_EN_OFF + subfield_offset),
                                                     ECLASS120_REG_FOUT_COMB_ORIN_2_BIT_COMB_ORIN_CFG_FOUT_EN_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_COMB_ORIN_CFG_FOUT_EN_get( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_COMB_ORIN_CFG_FOUT_EN_get( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 15)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_COMB_ORIN_CFG_FOUT_EN_get", N, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_COMB_ORIN_CFG_FOUT_EN_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_COMB_ORIN_CFG_FOUT_EN_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002c50 + (N) * 4) bits 30:23) bits 0:7 use field COMB_ORIN_CFG_FOUT_EN of register PMC_ECLASS120_REG_FOUT_COMB_ORIN_2 index N=0..15 */
    reg_value = eclass_reg_FOUT_COMB_ORIN_2_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    field_value = (reg_value & ECLASS120_REG_FOUT_COMB_ORIN_2_BIT_COMB_ORIN_CFG_FOUT_EN_MSK)
                  >> ECLASS120_REG_FOUT_COMB_ORIN_2_BIT_COMB_ORIN_CFG_FOUT_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_FOUT_COMB_ORIN_2_BIT_COMB_ORIN_CFG_FOUT_EN_MSK, ECLASS120_REG_FOUT_COMB_ORIN_2_BIT_COMB_ORIN_CFG_FOUT_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_COMB_ORIN_CFG_FOUT_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_COMB_ORIN_HWIRED_FOUT_EN_MSB_set( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_COMB_ORIN_HWIRED_FOUT_EN_MSB_set( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 value )
{
    if (N > 15)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_COMB_ORIN_HWIRED_FOUT_EN_MSB_set", N, 15);
    if (value > 262143)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_COMB_ORIN_HWIRED_FOUT_EN_MSB_set", value, 262143);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_COMB_ORIN_HWIRED_FOUT_EN_MSB_set", N, value );

    /* ((0x00002c50 + (N) * 4) bits 17:0) bits 0:17 use field COMB_ORIN_HWIRED_FOUT_EN_MSB of register PMC_ECLASS120_REG_FOUT_COMB_ORIN_2 index N=0..15 */
    eclass_reg_FOUT_COMB_ORIN_2_array_field_set( b_ptr,
                                                 h_ptr,
                                                 N,
                                                 ECLASS120_REG_FOUT_COMB_ORIN_2_BIT_COMB_ORIN_HWIRED_FOUT_EN_MSB_MSK,
                                                 ECLASS120_REG_FOUT_COMB_ORIN_2_BIT_COMB_ORIN_HWIRED_FOUT_EN_MSB_OFF,
                                                 value);
}

static INLINE UINT32 eclass_field_COMB_ORIN_HWIRED_FOUT_EN_MSB_get( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_COMB_ORIN_HWIRED_FOUT_EN_MSB_get( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 15)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_COMB_ORIN_HWIRED_FOUT_EN_MSB_get", N, 15);
    /* ((0x00002c50 + (N) * 4) bits 17:0) bits 0:17 use field COMB_ORIN_HWIRED_FOUT_EN_MSB of register PMC_ECLASS120_REG_FOUT_COMB_ORIN_2 index N=0..15 */
    reg_value = eclass_reg_FOUT_COMB_ORIN_2_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    value = (reg_value & ECLASS120_REG_FOUT_COMB_ORIN_2_BIT_COMB_ORIN_HWIRED_FOUT_EN_MSB_MSK) >> ECLASS120_REG_FOUT_COMB_ORIN_2_BIT_COMB_ORIN_HWIRED_FOUT_EN_MSB_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_COMB_ORIN_HWIRED_FOUT_EN_MSB_get", N, value );

    return value;
}
static INLINE void eclass_field_range_COMB_ORIN_HWIRED_FOUT_EN_MSB_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_COMB_ORIN_HWIRED_FOUT_EN_MSB_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit,
                                                                        UINT32 value )
{
    if (N > 15)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_COMB_ORIN_HWIRED_FOUT_EN_MSB_set", N, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_COMB_ORIN_HWIRED_FOUT_EN_MSB_set", stop_bit, start_bit );
    if (stop_bit > 17) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_COMB_ORIN_HWIRED_FOUT_EN_MSB_set", stop_bit, 17 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_COMB_ORIN_HWIRED_FOUT_EN_MSB_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002c50 + (N) * 4) bits 17:0) bits 0:17 use field COMB_ORIN_HWIRED_FOUT_EN_MSB of register PMC_ECLASS120_REG_FOUT_COMB_ORIN_2 index N=0..15 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 17) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 17;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002c50 + (N) * 4) bits 17:0) bits 0:17 use field COMB_ORIN_HWIRED_FOUT_EN_MSB of register PMC_ECLASS120_REG_FOUT_COMB_ORIN_2 index N=0..15 */
        eclass_reg_FOUT_COMB_ORIN_2_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     subfield_mask << (ECLASS120_REG_FOUT_COMB_ORIN_2_BIT_COMB_ORIN_HWIRED_FOUT_EN_MSB_OFF + subfield_offset),
                                                     ECLASS120_REG_FOUT_COMB_ORIN_2_BIT_COMB_ORIN_HWIRED_FOUT_EN_MSB_OFF + subfield_offset,
                                                     value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_COMB_ORIN_HWIRED_FOUT_EN_MSB_get( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_COMB_ORIN_HWIRED_FOUT_EN_MSB_get( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 15)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_COMB_ORIN_HWIRED_FOUT_EN_MSB_get", N, 15);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_COMB_ORIN_HWIRED_FOUT_EN_MSB_get", stop_bit, start_bit );
    if (stop_bit > 17) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_COMB_ORIN_HWIRED_FOUT_EN_MSB_get", stop_bit, 17 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 17) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 17;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002c50 + (N) * 4) bits 17:0) bits 0:17 use field COMB_ORIN_HWIRED_FOUT_EN_MSB of register PMC_ECLASS120_REG_FOUT_COMB_ORIN_2 index N=0..15 */
    reg_value = eclass_reg_FOUT_COMB_ORIN_2_array_read( b_ptr,
                                                        h_ptr,
                                                        N);
    field_value = (reg_value & ECLASS120_REG_FOUT_COMB_ORIN_2_BIT_COMB_ORIN_HWIRED_FOUT_EN_MSB_MSK)
                  >> ECLASS120_REG_FOUT_COMB_ORIN_2_BIT_COMB_ORIN_HWIRED_FOUT_EN_MSB_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_FOUT_COMB_ORIN_2_BIT_COMB_ORIN_HWIRED_FOUT_EN_MSB_MSK, ECLASS120_REG_FOUT_COMB_ORIN_2_BIT_COMB_ORIN_HWIRED_FOUT_EN_MSB_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_COMB_ORIN_HWIRED_FOUT_EN_MSB_get", N, start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config_N_size26
 * ==================================================================================
 */
static INLINE void eclass_field_COMB_OROUT_OUT_EN_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_COMB_OROUT_OUT_EN_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 25)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_COMB_OROUT_OUT_EN_set", N, 25);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_COMB_OROUT_OUT_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_COMB_OROUT_OUT_EN_set", N, value );

    /* ((0x00002f30 + (N) * 4) bits 31) field COMB_OROUT_OUT_EN of register PMC_ECLASS120_REG_FOUT_COMB_OROUT_2 index N=0..25 */
    eclass_reg_FOUT_COMB_OROUT_2_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ECLASS120_REG_FOUT_COMB_OROUT_2_BIT_COMB_OROUT_OUT_EN_MSK,
                                                  ECLASS120_REG_FOUT_COMB_OROUT_2_BIT_COMB_OROUT_OUT_EN_OFF,
                                                  value);
}

static INLINE UINT32 eclass_field_COMB_OROUT_OUT_EN_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_COMB_OROUT_OUT_EN_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 25)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_COMB_OROUT_OUT_EN_get", N, 25);
    /* ((0x00002f30 + (N) * 4) bits 31) field COMB_OROUT_OUT_EN of register PMC_ECLASS120_REG_FOUT_COMB_OROUT_2 index N=0..25 */
    reg_value = eclass_reg_FOUT_COMB_OROUT_2_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ECLASS120_REG_FOUT_COMB_OROUT_2_BIT_COMB_OROUT_OUT_EN_MSK) >> ECLASS120_REG_FOUT_COMB_OROUT_2_BIT_COMB_OROUT_OUT_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_COMB_OROUT_OUT_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_COMB_OROUT_OUT_INV_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_COMB_OROUT_OUT_INV_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value )
{
    if (N > 25)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_COMB_OROUT_OUT_INV_set", N, 25);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_COMB_OROUT_OUT_INV_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_COMB_OROUT_OUT_INV_set", N, value );

    /* ((0x00002f30 + (N) * 4) bits 30) field COMB_OROUT_OUT_INV of register PMC_ECLASS120_REG_FOUT_COMB_OROUT_2 index N=0..25 */
    eclass_reg_FOUT_COMB_OROUT_2_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ECLASS120_REG_FOUT_COMB_OROUT_2_BIT_COMB_OROUT_OUT_INV_MSK,
                                                  ECLASS120_REG_FOUT_COMB_OROUT_2_BIT_COMB_OROUT_OUT_INV_OFF,
                                                  value);
}

static INLINE UINT32 eclass_field_COMB_OROUT_OUT_INV_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_COMB_OROUT_OUT_INV_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 25)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_COMB_OROUT_OUT_INV_get", N, 25);
    /* ((0x00002f30 + (N) * 4) bits 30) field COMB_OROUT_OUT_INV of register PMC_ECLASS120_REG_FOUT_COMB_OROUT_2 index N=0..25 */
    reg_value = eclass_reg_FOUT_COMB_OROUT_2_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ECLASS120_REG_FOUT_COMB_OROUT_2_BIT_COMB_OROUT_OUT_INV_MSK) >> ECLASS120_REG_FOUT_COMB_OROUT_2_BIT_COMB_OROUT_OUT_INV_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_COMB_OROUT_OUT_INV_get", N, value );

    return value;
}
static INLINE void eclass_field_COMB_OROUT_FILTAND_EN_MSB_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_COMB_OROUT_FILTAND_EN_MSB_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value )
{
    if (N > 25)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_COMB_OROUT_FILTAND_EN_MSB_set", N, 25);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_COMB_OROUT_FILTAND_EN_MSB_set", value, 255);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_COMB_OROUT_FILTAND_EN_MSB_set", N, value );

    /* ((0x00002f30 + (N) * 4) bits 23:16) bits 0:7 use field COMB_OROUT_FILTAND_EN_MSB of register PMC_ECLASS120_REG_FOUT_COMB_OROUT_2 index N=0..25 */
    eclass_reg_FOUT_COMB_OROUT_2_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ECLASS120_REG_FOUT_COMB_OROUT_2_BIT_COMB_OROUT_FILTAND_EN_MSB_MSK,
                                                  ECLASS120_REG_FOUT_COMB_OROUT_2_BIT_COMB_OROUT_FILTAND_EN_MSB_OFF,
                                                  value);
}

static INLINE UINT32 eclass_field_COMB_OROUT_FILTAND_EN_MSB_get( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_COMB_OROUT_FILTAND_EN_MSB_get( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 25)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_COMB_OROUT_FILTAND_EN_MSB_get", N, 25);
    /* ((0x00002f30 + (N) * 4) bits 23:16) bits 0:7 use field COMB_OROUT_FILTAND_EN_MSB of register PMC_ECLASS120_REG_FOUT_COMB_OROUT_2 index N=0..25 */
    reg_value = eclass_reg_FOUT_COMB_OROUT_2_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ECLASS120_REG_FOUT_COMB_OROUT_2_BIT_COMB_OROUT_FILTAND_EN_MSB_MSK) >> ECLASS120_REG_FOUT_COMB_OROUT_2_BIT_COMB_OROUT_FILTAND_EN_MSB_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_COMB_OROUT_FILTAND_EN_MSB_get", N, value );

    return value;
}
static INLINE void eclass_field_range_COMB_OROUT_FILTAND_EN_MSB_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_COMB_OROUT_FILTAND_EN_MSB_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value )
{
    if (N > 25)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_COMB_OROUT_FILTAND_EN_MSB_set", N, 25);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_COMB_OROUT_FILTAND_EN_MSB_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_COMB_OROUT_FILTAND_EN_MSB_set", stop_bit, 7 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_COMB_OROUT_FILTAND_EN_MSB_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002f30 + (N) * 4) bits 23:16) bits 0:7 use field COMB_OROUT_FILTAND_EN_MSB of register PMC_ECLASS120_REG_FOUT_COMB_OROUT_2 index N=0..25 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002f30 + (N) * 4) bits 23:16) bits 0:7 use field COMB_OROUT_FILTAND_EN_MSB of register PMC_ECLASS120_REG_FOUT_COMB_OROUT_2 index N=0..25 */
        eclass_reg_FOUT_COMB_OROUT_2_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      subfield_mask << (ECLASS120_REG_FOUT_COMB_OROUT_2_BIT_COMB_OROUT_FILTAND_EN_MSB_OFF + subfield_offset),
                                                      ECLASS120_REG_FOUT_COMB_OROUT_2_BIT_COMB_OROUT_FILTAND_EN_MSB_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_COMB_OROUT_FILTAND_EN_MSB_get( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_COMB_OROUT_FILTAND_EN_MSB_get( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 25)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_COMB_OROUT_FILTAND_EN_MSB_get", N, 25);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_COMB_OROUT_FILTAND_EN_MSB_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_COMB_OROUT_FILTAND_EN_MSB_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002f30 + (N) * 4) bits 23:16) bits 0:7 use field COMB_OROUT_FILTAND_EN_MSB of register PMC_ECLASS120_REG_FOUT_COMB_OROUT_2 index N=0..25 */
    reg_value = eclass_reg_FOUT_COMB_OROUT_2_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    field_value = (reg_value & ECLASS120_REG_FOUT_COMB_OROUT_2_BIT_COMB_OROUT_FILTAND_EN_MSB_MSK)
                  >> ECLASS120_REG_FOUT_COMB_OROUT_2_BIT_COMB_OROUT_FILTAND_EN_MSB_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_FOUT_COMB_OROUT_2_BIT_COMB_OROUT_FILTAND_EN_MSB_MSK, ECLASS120_REG_FOUT_COMB_OROUT_2_BIT_COMB_OROUT_FILTAND_EN_MSB_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_COMB_OROUT_FILTAND_EN_MSB_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_COMB_OROUT_CFG_FOUT_EN_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_COMB_OROUT_CFG_FOUT_EN_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    if (N > 25)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_COMB_OROUT_CFG_FOUT_EN_set", N, 25);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_COMB_OROUT_CFG_FOUT_EN_set", value, 255);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_COMB_OROUT_CFG_FOUT_EN_set", N, value );

    /* ((0x00002f30 + (N) * 4) bits 7:0) bits 0:7 use field COMB_OROUT_CFG_FOUT_EN of register PMC_ECLASS120_REG_FOUT_COMB_OROUT_2 index N=0..25 */
    eclass_reg_FOUT_COMB_OROUT_2_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ECLASS120_REG_FOUT_COMB_OROUT_2_BIT_COMB_OROUT_CFG_FOUT_EN_MSK,
                                                  ECLASS120_REG_FOUT_COMB_OROUT_2_BIT_COMB_OROUT_CFG_FOUT_EN_OFF,
                                                  value);
}

static INLINE UINT32 eclass_field_COMB_OROUT_CFG_FOUT_EN_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_COMB_OROUT_CFG_FOUT_EN_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 25)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_COMB_OROUT_CFG_FOUT_EN_get", N, 25);
    /* ((0x00002f30 + (N) * 4) bits 7:0) bits 0:7 use field COMB_OROUT_CFG_FOUT_EN of register PMC_ECLASS120_REG_FOUT_COMB_OROUT_2 index N=0..25 */
    reg_value = eclass_reg_FOUT_COMB_OROUT_2_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ECLASS120_REG_FOUT_COMB_OROUT_2_BIT_COMB_OROUT_CFG_FOUT_EN_MSK) >> ECLASS120_REG_FOUT_COMB_OROUT_2_BIT_COMB_OROUT_CFG_FOUT_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_COMB_OROUT_CFG_FOUT_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_COMB_OROUT_CFG_FOUT_EN_set( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_COMB_OROUT_CFG_FOUT_EN_set( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (N > 25)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_COMB_OROUT_CFG_FOUT_EN_set", N, 25);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_COMB_OROUT_CFG_FOUT_EN_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_COMB_OROUT_CFG_FOUT_EN_set", stop_bit, 7 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_COMB_OROUT_CFG_FOUT_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002f30 + (N) * 4) bits 7:0) bits 0:7 use field COMB_OROUT_CFG_FOUT_EN of register PMC_ECLASS120_REG_FOUT_COMB_OROUT_2 index N=0..25 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002f30 + (N) * 4) bits 7:0) bits 0:7 use field COMB_OROUT_CFG_FOUT_EN of register PMC_ECLASS120_REG_FOUT_COMB_OROUT_2 index N=0..25 */
        eclass_reg_FOUT_COMB_OROUT_2_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      subfield_mask << (ECLASS120_REG_FOUT_COMB_OROUT_2_BIT_COMB_OROUT_CFG_FOUT_EN_OFF + subfield_offset),
                                                      ECLASS120_REG_FOUT_COMB_OROUT_2_BIT_COMB_OROUT_CFG_FOUT_EN_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_COMB_OROUT_CFG_FOUT_EN_get( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_COMB_OROUT_CFG_FOUT_EN_get( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 25)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_COMB_OROUT_CFG_FOUT_EN_get", N, 25);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_COMB_OROUT_CFG_FOUT_EN_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_COMB_OROUT_CFG_FOUT_EN_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002f30 + (N) * 4) bits 7:0) bits 0:7 use field COMB_OROUT_CFG_FOUT_EN of register PMC_ECLASS120_REG_FOUT_COMB_OROUT_2 index N=0..25 */
    reg_value = eclass_reg_FOUT_COMB_OROUT_2_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    field_value = (reg_value & ECLASS120_REG_FOUT_COMB_OROUT_2_BIT_COMB_OROUT_CFG_FOUT_EN_MSK)
                  >> ECLASS120_REG_FOUT_COMB_OROUT_2_BIT_COMB_OROUT_CFG_FOUT_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_FOUT_COMB_OROUT_2_BIT_COMB_OROUT_CFG_FOUT_EN_MSK, ECLASS120_REG_FOUT_COMB_OROUT_2_BIT_COMB_OROUT_CFG_FOUT_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_COMB_OROUT_CFG_FOUT_EN_get", N, start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config_N_size40
 * ==================================================================================
 */
static INLINE void eclass_field_COMB_AND_CFG_FOUT_EN_set( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_COMB_AND_CFG_FOUT_EN_set( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    if (N > 39)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_COMB_AND_CFG_FOUT_EN_set", N, 39);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_COMB_AND_CFG_FOUT_EN_set", value, 255);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_COMB_AND_CFG_FOUT_EN_set", N, value );

    /* ((0x00002d50 + (N) * 4) bits 31:24) bits 0:7 use field COMB_AND_CFG_FOUT_EN of register PMC_ECLASS120_REG_FOUT_COMB_AND_2 index N=0..39 */
    eclass_reg_FOUT_COMB_AND_2_array_field_set( b_ptr,
                                                h_ptr,
                                                N,
                                                ECLASS120_REG_FOUT_COMB_AND_2_BIT_COMB_AND_CFG_FOUT_EN_MSK,
                                                ECLASS120_REG_FOUT_COMB_AND_2_BIT_COMB_AND_CFG_FOUT_EN_OFF,
                                                value);
}

static INLINE UINT32 eclass_field_COMB_AND_CFG_FOUT_EN_get( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_COMB_AND_CFG_FOUT_EN_get( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 39)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_COMB_AND_CFG_FOUT_EN_get", N, 39);
    /* ((0x00002d50 + (N) * 4) bits 31:24) bits 0:7 use field COMB_AND_CFG_FOUT_EN of register PMC_ECLASS120_REG_FOUT_COMB_AND_2 index N=0..39 */
    reg_value = eclass_reg_FOUT_COMB_AND_2_array_read( b_ptr,
                                                       h_ptr,
                                                       N);
    value = (reg_value & ECLASS120_REG_FOUT_COMB_AND_2_BIT_COMB_AND_CFG_FOUT_EN_MSK) >> ECLASS120_REG_FOUT_COMB_AND_2_BIT_COMB_AND_CFG_FOUT_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_COMB_AND_CFG_FOUT_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_COMB_AND_CFG_FOUT_EN_set( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_COMB_AND_CFG_FOUT_EN_set( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (N > 39)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_COMB_AND_CFG_FOUT_EN_set", N, 39);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_COMB_AND_CFG_FOUT_EN_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_COMB_AND_CFG_FOUT_EN_set", stop_bit, 7 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_COMB_AND_CFG_FOUT_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002d50 + (N) * 4) bits 31:24) bits 0:7 use field COMB_AND_CFG_FOUT_EN of register PMC_ECLASS120_REG_FOUT_COMB_AND_2 index N=0..39 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002d50 + (N) * 4) bits 31:24) bits 0:7 use field COMB_AND_CFG_FOUT_EN of register PMC_ECLASS120_REG_FOUT_COMB_AND_2 index N=0..39 */
        eclass_reg_FOUT_COMB_AND_2_array_field_set( b_ptr,
                                                    h_ptr,
                                                    N,
                                                    subfield_mask << (ECLASS120_REG_FOUT_COMB_AND_2_BIT_COMB_AND_CFG_FOUT_EN_OFF + subfield_offset),
                                                    ECLASS120_REG_FOUT_COMB_AND_2_BIT_COMB_AND_CFG_FOUT_EN_OFF + subfield_offset,
                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_COMB_AND_CFG_FOUT_EN_get( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_COMB_AND_CFG_FOUT_EN_get( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 39)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_COMB_AND_CFG_FOUT_EN_get", N, 39);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_COMB_AND_CFG_FOUT_EN_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_COMB_AND_CFG_FOUT_EN_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002d50 + (N) * 4) bits 31:24) bits 0:7 use field COMB_AND_CFG_FOUT_EN of register PMC_ECLASS120_REG_FOUT_COMB_AND_2 index N=0..39 */
    reg_value = eclass_reg_FOUT_COMB_AND_2_array_read( b_ptr,
                                                       h_ptr,
                                                       N);
    field_value = (reg_value & ECLASS120_REG_FOUT_COMB_AND_2_BIT_COMB_AND_CFG_FOUT_EN_MSK)
                  >> ECLASS120_REG_FOUT_COMB_AND_2_BIT_COMB_AND_CFG_FOUT_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_FOUT_COMB_AND_2_BIT_COMB_AND_CFG_FOUT_EN_MSK, ECLASS120_REG_FOUT_COMB_AND_2_BIT_COMB_AND_CFG_FOUT_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_COMB_AND_CFG_FOUT_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_COMB_AND_HWIRED_FOUT_EN_MSB_set( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_COMB_AND_HWIRED_FOUT_EN_MSB_set( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    if (N > 39)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_COMB_AND_HWIRED_FOUT_EN_MSB_set", N, 39);
    if (value > 262143)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_COMB_AND_HWIRED_FOUT_EN_MSB_set", value, 262143);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_COMB_AND_HWIRED_FOUT_EN_MSB_set", N, value );

    /* ((0x00002d50 + (N) * 4) bits 17:0) bits 0:17 use field COMB_AND_HWIRED_FOUT_EN_MSB of register PMC_ECLASS120_REG_FOUT_COMB_AND_2 index N=0..39 */
    eclass_reg_FOUT_COMB_AND_2_array_field_set( b_ptr,
                                                h_ptr,
                                                N,
                                                ECLASS120_REG_FOUT_COMB_AND_2_BIT_COMB_AND_HWIRED_FOUT_EN_MSB_MSK,
                                                ECLASS120_REG_FOUT_COMB_AND_2_BIT_COMB_AND_HWIRED_FOUT_EN_MSB_OFF,
                                                value);
}

static INLINE UINT32 eclass_field_COMB_AND_HWIRED_FOUT_EN_MSB_get( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_COMB_AND_HWIRED_FOUT_EN_MSB_get( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 39)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_COMB_AND_HWIRED_FOUT_EN_MSB_get", N, 39);
    /* ((0x00002d50 + (N) * 4) bits 17:0) bits 0:17 use field COMB_AND_HWIRED_FOUT_EN_MSB of register PMC_ECLASS120_REG_FOUT_COMB_AND_2 index N=0..39 */
    reg_value = eclass_reg_FOUT_COMB_AND_2_array_read( b_ptr,
                                                       h_ptr,
                                                       N);
    value = (reg_value & ECLASS120_REG_FOUT_COMB_AND_2_BIT_COMB_AND_HWIRED_FOUT_EN_MSB_MSK) >> ECLASS120_REG_FOUT_COMB_AND_2_BIT_COMB_AND_HWIRED_FOUT_EN_MSB_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_COMB_AND_HWIRED_FOUT_EN_MSB_get", N, value );

    return value;
}
static INLINE void eclass_field_range_COMB_AND_HWIRED_FOUT_EN_MSB_set( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_COMB_AND_HWIRED_FOUT_EN_MSB_set( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value )
{
    if (N > 39)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_COMB_AND_HWIRED_FOUT_EN_MSB_set", N, 39);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_COMB_AND_HWIRED_FOUT_EN_MSB_set", stop_bit, start_bit );
    if (stop_bit > 17) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_COMB_AND_HWIRED_FOUT_EN_MSB_set", stop_bit, 17 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_COMB_AND_HWIRED_FOUT_EN_MSB_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002d50 + (N) * 4) bits 17:0) bits 0:17 use field COMB_AND_HWIRED_FOUT_EN_MSB of register PMC_ECLASS120_REG_FOUT_COMB_AND_2 index N=0..39 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 17) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 17;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002d50 + (N) * 4) bits 17:0) bits 0:17 use field COMB_AND_HWIRED_FOUT_EN_MSB of register PMC_ECLASS120_REG_FOUT_COMB_AND_2 index N=0..39 */
        eclass_reg_FOUT_COMB_AND_2_array_field_set( b_ptr,
                                                    h_ptr,
                                                    N,
                                                    subfield_mask << (ECLASS120_REG_FOUT_COMB_AND_2_BIT_COMB_AND_HWIRED_FOUT_EN_MSB_OFF + subfield_offset),
                                                    ECLASS120_REG_FOUT_COMB_AND_2_BIT_COMB_AND_HWIRED_FOUT_EN_MSB_OFF + subfield_offset,
                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_COMB_AND_HWIRED_FOUT_EN_MSB_get( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_COMB_AND_HWIRED_FOUT_EN_MSB_get( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 39)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_COMB_AND_HWIRED_FOUT_EN_MSB_get", N, 39);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_COMB_AND_HWIRED_FOUT_EN_MSB_get", stop_bit, start_bit );
    if (stop_bit > 17) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_COMB_AND_HWIRED_FOUT_EN_MSB_get", stop_bit, 17 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 17) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 17;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002d50 + (N) * 4) bits 17:0) bits 0:17 use field COMB_AND_HWIRED_FOUT_EN_MSB of register PMC_ECLASS120_REG_FOUT_COMB_AND_2 index N=0..39 */
    reg_value = eclass_reg_FOUT_COMB_AND_2_array_read( b_ptr,
                                                       h_ptr,
                                                       N);
    field_value = (reg_value & ECLASS120_REG_FOUT_COMB_AND_2_BIT_COMB_AND_HWIRED_FOUT_EN_MSB_MSK)
                  >> ECLASS120_REG_FOUT_COMB_AND_2_BIT_COMB_AND_HWIRED_FOUT_EN_MSB_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_FOUT_COMB_AND_2_BIT_COMB_AND_HWIRED_FOUT_EN_MSB_MSK, ECLASS120_REG_FOUT_COMB_AND_2_BIT_COMB_AND_HWIRED_FOUT_EN_MSB_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_COMB_AND_HWIRED_FOUT_EN_MSB_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_COMB_AND_OUT_INV_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_COMB_AND_OUT_INV_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 39)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_COMB_AND_OUT_INV_set", N, 39);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_COMB_AND_OUT_INV_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_COMB_AND_OUT_INV_set", N, value );

    /* ((0x00002e00 + (N) * 4) bits 31) field COMB_AND_OUT_INV of register PMC_ECLASS120_REG_FOUT_COMB_AND_3 index N=0..39 */
    eclass_reg_FOUT_COMB_AND_3_array_field_set( b_ptr,
                                                h_ptr,
                                                N,
                                                ECLASS120_REG_FOUT_COMB_AND_3_BIT_COMB_AND_OUT_INV_MSK,
                                                ECLASS120_REG_FOUT_COMB_AND_3_BIT_COMB_AND_OUT_INV_OFF,
                                                value);
}

static INLINE UINT32 eclass_field_COMB_AND_OUT_INV_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_COMB_AND_OUT_INV_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 39)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_COMB_AND_OUT_INV_get", N, 39);
    /* ((0x00002e00 + (N) * 4) bits 31) field COMB_AND_OUT_INV of register PMC_ECLASS120_REG_FOUT_COMB_AND_3 index N=0..39 */
    reg_value = eclass_reg_FOUT_COMB_AND_3_array_read( b_ptr,
                                                       h_ptr,
                                                       N);
    value = (reg_value & ECLASS120_REG_FOUT_COMB_AND_3_BIT_COMB_AND_OUT_INV_MSK) >> ECLASS120_REG_FOUT_COMB_AND_3_BIT_COMB_AND_OUT_INV_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_COMB_AND_OUT_INV_get", N, value );

    return value;
}
static INLINE void eclass_field_COMB_AND_FILTORIN_EN_set( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_COMB_AND_FILTORIN_EN_set( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    if (N > 39)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_COMB_AND_FILTORIN_EN_set", N, 39);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_COMB_AND_FILTORIN_EN_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_COMB_AND_FILTORIN_EN_set", N, value );

    /* ((0x00002e00 + (N) * 4) bits 15:0) bits 0:15 use field COMB_AND_FILTORIN_EN of register PMC_ECLASS120_REG_FOUT_COMB_AND_3 index N=0..39 */
    eclass_reg_FOUT_COMB_AND_3_array_field_set( b_ptr,
                                                h_ptr,
                                                N,
                                                ECLASS120_REG_FOUT_COMB_AND_3_BIT_COMB_AND_FILTORIN_EN_MSK,
                                                ECLASS120_REG_FOUT_COMB_AND_3_BIT_COMB_AND_FILTORIN_EN_OFF,
                                                value);
}

static INLINE UINT32 eclass_field_COMB_AND_FILTORIN_EN_get( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_COMB_AND_FILTORIN_EN_get( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 39)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_COMB_AND_FILTORIN_EN_get", N, 39);
    /* ((0x00002e00 + (N) * 4) bits 15:0) bits 0:15 use field COMB_AND_FILTORIN_EN of register PMC_ECLASS120_REG_FOUT_COMB_AND_3 index N=0..39 */
    reg_value = eclass_reg_FOUT_COMB_AND_3_array_read( b_ptr,
                                                       h_ptr,
                                                       N);
    value = (reg_value & ECLASS120_REG_FOUT_COMB_AND_3_BIT_COMB_AND_FILTORIN_EN_MSK) >> ECLASS120_REG_FOUT_COMB_AND_3_BIT_COMB_AND_FILTORIN_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_COMB_AND_FILTORIN_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_COMB_AND_FILTORIN_EN_set( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_COMB_AND_FILTORIN_EN_set( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (N > 39)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_COMB_AND_FILTORIN_EN_set", N, 39);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_COMB_AND_FILTORIN_EN_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_COMB_AND_FILTORIN_EN_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_COMB_AND_FILTORIN_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002e00 + (N) * 4) bits 15:0) bits 0:15 use field COMB_AND_FILTORIN_EN of register PMC_ECLASS120_REG_FOUT_COMB_AND_3 index N=0..39 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002e00 + (N) * 4) bits 15:0) bits 0:15 use field COMB_AND_FILTORIN_EN of register PMC_ECLASS120_REG_FOUT_COMB_AND_3 index N=0..39 */
        eclass_reg_FOUT_COMB_AND_3_array_field_set( b_ptr,
                                                    h_ptr,
                                                    N,
                                                    subfield_mask << (ECLASS120_REG_FOUT_COMB_AND_3_BIT_COMB_AND_FILTORIN_EN_OFF + subfield_offset),
                                                    ECLASS120_REG_FOUT_COMB_AND_3_BIT_COMB_AND_FILTORIN_EN_OFF + subfield_offset,
                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_COMB_AND_FILTORIN_EN_get( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_COMB_AND_FILTORIN_EN_get( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 39)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_COMB_AND_FILTORIN_EN_get", N, 39);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_COMB_AND_FILTORIN_EN_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_COMB_AND_FILTORIN_EN_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002e00 + (N) * 4) bits 15:0) bits 0:15 use field COMB_AND_FILTORIN_EN of register PMC_ECLASS120_REG_FOUT_COMB_AND_3 index N=0..39 */
    reg_value = eclass_reg_FOUT_COMB_AND_3_array_read( b_ptr,
                                                       h_ptr,
                                                       N);
    field_value = (reg_value & ECLASS120_REG_FOUT_COMB_AND_3_BIT_COMB_AND_FILTORIN_EN_MSK)
                  >> ECLASS120_REG_FOUT_COMB_AND_3_BIT_COMB_AND_FILTORIN_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_FOUT_COMB_AND_3_BIT_COMB_AND_FILTORIN_EN_MSK, ECLASS120_REG_FOUT_COMB_AND_3_BIT_COMB_AND_FILTORIN_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_COMB_AND_FILTORIN_EN_get", N, start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset ram_N_size12
 * ==================================================================================
 */
static INLINE void eclass_field_MPLS_ETYPE_CUSTOM_EN_set( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_MPLS_ETYPE_CUSTOM_EN_set( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_MPLS_ETYPE_CUSTOM_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_MPLS_ETYPE_CUSTOM_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_MPLS_ETYPE_CUSTOM_EN_set", N, value );

    /* ((0x00000024 + (N) * 512) bits 30) field MPLS_ETYPE_CUSTOM_EN of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    eclass_reg_GEN_CFG_VLAN_MPLS_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_ETYPE_CUSTOM_EN_MSK,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_ETYPE_CUSTOM_EN_OFF,
                                                  value);
}

static INLINE UINT32 eclass_field_MPLS_ETYPE_CUSTOM_EN_get( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_MPLS_ETYPE_CUSTOM_EN_get( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_MPLS_ETYPE_CUSTOM_EN_get", N, 11);
    /* ((0x00000024 + (N) * 512) bits 30) field MPLS_ETYPE_CUSTOM_EN of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    reg_value = eclass_reg_GEN_CFG_VLAN_MPLS_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_ETYPE_CUSTOM_EN_MSK) >> ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_ETYPE_CUSTOM_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_MPLS_ETYPE_CUSTOM_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_MPLS_ETYPE_8848_EN_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_MPLS_ETYPE_8848_EN_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_MPLS_ETYPE_8848_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_MPLS_ETYPE_8848_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_MPLS_ETYPE_8848_EN_set", N, value );

    /* ((0x00000024 + (N) * 512) bits 29) field MPLS_ETYPE_8848_EN of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    eclass_reg_GEN_CFG_VLAN_MPLS_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_ETYPE_8848_EN_MSK,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_ETYPE_8848_EN_OFF,
                                                  value);
}

static INLINE UINT32 eclass_field_MPLS_ETYPE_8848_EN_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_MPLS_ETYPE_8848_EN_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_MPLS_ETYPE_8848_EN_get", N, 11);
    /* ((0x00000024 + (N) * 512) bits 29) field MPLS_ETYPE_8848_EN of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    reg_value = eclass_reg_GEN_CFG_VLAN_MPLS_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_ETYPE_8848_EN_MSK) >> ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_ETYPE_8848_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_MPLS_ETYPE_8848_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_MPLS_ETYPE_8847_EN_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_MPLS_ETYPE_8847_EN_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_MPLS_ETYPE_8847_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_MPLS_ETYPE_8847_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_MPLS_ETYPE_8847_EN_set", N, value );

    /* ((0x00000024 + (N) * 512) bits 28) field MPLS_ETYPE_8847_EN of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    eclass_reg_GEN_CFG_VLAN_MPLS_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_ETYPE_8847_EN_MSK,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_ETYPE_8847_EN_OFF,
                                                  value);
}

static INLINE UINT32 eclass_field_MPLS_ETYPE_8847_EN_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_MPLS_ETYPE_8847_EN_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_MPLS_ETYPE_8847_EN_get", N, 11);
    /* ((0x00000024 + (N) * 512) bits 28) field MPLS_ETYPE_8847_EN of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    reg_value = eclass_reg_GEN_CFG_VLAN_MPLS_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_ETYPE_8847_EN_MSK) >> ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_ETYPE_8847_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_MPLS_ETYPE_8847_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_MPLS_NB_LEVELS_set( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_MPLS_NB_LEVELS_set( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_MPLS_NB_LEVELS_set", N, 11);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_MPLS_NB_LEVELS_set", value, 3);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_MPLS_NB_LEVELS_set", N, value );

    /* ((0x00000024 + (N) * 512) bits 27:26) field MPLS_NB_LEVELS of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    eclass_reg_GEN_CFG_VLAN_MPLS_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_NB_LEVELS_MSK,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_NB_LEVELS_OFF,
                                                  value);
}

static INLINE UINT32 eclass_field_MPLS_NB_LEVELS_get( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_MPLS_NB_LEVELS_get( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_MPLS_NB_LEVELS_get", N, 11);
    /* ((0x00000024 + (N) * 512) bits 27:26) field MPLS_NB_LEVELS of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    reg_value = eclass_reg_GEN_CFG_VLAN_MPLS_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_NB_LEVELS_MSK) >> ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_NB_LEVELS_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_MPLS_NB_LEVELS_get", N, value );

    return value;
}
static INLINE void eclass_field_range_MPLS_NB_LEVELS_set( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_MPLS_NB_LEVELS_set( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_MPLS_NB_LEVELS_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_MPLS_NB_LEVELS_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_MPLS_NB_LEVELS_set", stop_bit, 1 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_MPLS_NB_LEVELS_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000024 + (N) * 512) bits 27:26) field MPLS_NB_LEVELS of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000024 + (N) * 512) bits 27:26) field MPLS_NB_LEVELS of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
        eclass_reg_GEN_CFG_VLAN_MPLS_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      subfield_mask << (ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_NB_LEVELS_OFF + subfield_offset),
                                                      ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_NB_LEVELS_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_MPLS_NB_LEVELS_get( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_MPLS_NB_LEVELS_get( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_MPLS_NB_LEVELS_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_MPLS_NB_LEVELS_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_MPLS_NB_LEVELS_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000024 + (N) * 512) bits 27:26) field MPLS_NB_LEVELS of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    reg_value = eclass_reg_GEN_CFG_VLAN_MPLS_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    field_value = (reg_value & ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_NB_LEVELS_MSK)
                  >> ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_NB_LEVELS_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_NB_LEVELS_MSK, ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_NB_LEVELS_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_MPLS_NB_LEVELS_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_MPLS_OVERFLOW_CFG_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_MPLS_OVERFLOW_CFG_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_MPLS_OVERFLOW_CFG_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_MPLS_OVERFLOW_CFG_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_MPLS_OVERFLOW_CFG_set", N, value );

    /* ((0x00000024 + (N) * 512) bits 25) field MPLS_OVERFLOW_CFG of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    eclass_reg_GEN_CFG_VLAN_MPLS_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_OVERFLOW_CFG_MSK,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_OVERFLOW_CFG_OFF,
                                                  value);
}

static INLINE UINT32 eclass_field_MPLS_OVERFLOW_CFG_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_MPLS_OVERFLOW_CFG_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_MPLS_OVERFLOW_CFG_get", N, 11);
    /* ((0x00000024 + (N) * 512) bits 25) field MPLS_OVERFLOW_CFG of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    reg_value = eclass_reg_GEN_CFG_VLAN_MPLS_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_OVERFLOW_CFG_MSK) >> ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_OVERFLOW_CFG_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_MPLS_OVERFLOW_CFG_get", N, value );

    return value;
}
static INLINE void eclass_field_MPLS_MESS_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_MPLS_MESS_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_MPLS_MESS_set", N, 11);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_MPLS_MESS_set", value, 3);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_MPLS_MESS_set", N, value );

    /* ((0x00000024 + (N) * 512) bits 24:23) field MPLS_MESS of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    eclass_reg_GEN_CFG_VLAN_MPLS_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_MESS_MSK,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_MESS_OFF,
                                                  value);
}

static INLINE UINT32 eclass_field_MPLS_MESS_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_MPLS_MESS_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_MPLS_MESS_get", N, 11);
    /* ((0x00000024 + (N) * 512) bits 24:23) field MPLS_MESS of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    reg_value = eclass_reg_GEN_CFG_VLAN_MPLS_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_MESS_MSK) >> ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_MESS_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_MPLS_MESS_get", N, value );

    return value;
}
static INLINE void eclass_field_range_MPLS_MESS_set( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_MPLS_MESS_set( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_MPLS_MESS_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_MPLS_MESS_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_MPLS_MESS_set", stop_bit, 1 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_MPLS_MESS_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000024 + (N) * 512) bits 24:23) field MPLS_MESS of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000024 + (N) * 512) bits 24:23) field MPLS_MESS of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
        eclass_reg_GEN_CFG_VLAN_MPLS_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      subfield_mask << (ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_MESS_OFF + subfield_offset),
                                                      ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_MESS_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_MPLS_MESS_get( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_MPLS_MESS_get( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_MPLS_MESS_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_MPLS_MESS_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_MPLS_MESS_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000024 + (N) * 512) bits 24:23) field MPLS_MESS of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    reg_value = eclass_reg_GEN_CFG_VLAN_MPLS_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    field_value = (reg_value & ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_MESS_MSK)
                  >> ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_MESS_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_MESS_MSK, ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_MPLS_MESS_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_MPLS_MESS_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_VLAN_TPID_CUSTOM_OUTER_EN_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_VLAN_TPID_CUSTOM_OUTER_EN_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_VLAN_TPID_CUSTOM_OUTER_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_VLAN_TPID_CUSTOM_OUTER_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_VLAN_TPID_CUSTOM_OUTER_EN_set", N, value );

    /* ((0x00000024 + (N) * 512) bits 22) field VLAN_TPID_CUSTOM_OUTER_EN of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    eclass_reg_GEN_CFG_VLAN_MPLS_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_TPID_CUSTOM_OUTER_EN_MSK,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_TPID_CUSTOM_OUTER_EN_OFF,
                                                  value);
}

static INLINE UINT32 eclass_field_VLAN_TPID_CUSTOM_OUTER_EN_get( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_VLAN_TPID_CUSTOM_OUTER_EN_get( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_VLAN_TPID_CUSTOM_OUTER_EN_get", N, 11);
    /* ((0x00000024 + (N) * 512) bits 22) field VLAN_TPID_CUSTOM_OUTER_EN of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    reg_value = eclass_reg_GEN_CFG_VLAN_MPLS_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_TPID_CUSTOM_OUTER_EN_MSK) >> ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_TPID_CUSTOM_OUTER_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_VLAN_TPID_CUSTOM_OUTER_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_VLAN_TPID_CUSTOM_INNER_EN_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_VLAN_TPID_CUSTOM_INNER_EN_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_VLAN_TPID_CUSTOM_INNER_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_VLAN_TPID_CUSTOM_INNER_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_VLAN_TPID_CUSTOM_INNER_EN_set", N, value );

    /* ((0x00000024 + (N) * 512) bits 21) field VLAN_TPID_CUSTOM_INNER_EN of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    eclass_reg_GEN_CFG_VLAN_MPLS_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_TPID_CUSTOM_INNER_EN_MSK,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_TPID_CUSTOM_INNER_EN_OFF,
                                                  value);
}

static INLINE UINT32 eclass_field_VLAN_TPID_CUSTOM_INNER_EN_get( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_VLAN_TPID_CUSTOM_INNER_EN_get( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_VLAN_TPID_CUSTOM_INNER_EN_get", N, 11);
    /* ((0x00000024 + (N) * 512) bits 21) field VLAN_TPID_CUSTOM_INNER_EN of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    reg_value = eclass_reg_GEN_CFG_VLAN_MPLS_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_TPID_CUSTOM_INNER_EN_MSK) >> ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_TPID_CUSTOM_INNER_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_VLAN_TPID_CUSTOM_INNER_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_VLAN_TPID_88A8_EN_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_VLAN_TPID_88A8_EN_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_VLAN_TPID_88A8_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_VLAN_TPID_88A8_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_VLAN_TPID_88A8_EN_set", N, value );

    /* ((0x00000024 + (N) * 512) bits 20) field VLAN_TPID_88A8_EN of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    eclass_reg_GEN_CFG_VLAN_MPLS_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_TPID_88A8_EN_MSK,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_TPID_88A8_EN_OFF,
                                                  value);
}

static INLINE UINT32 eclass_field_VLAN_TPID_88A8_EN_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_VLAN_TPID_88A8_EN_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_VLAN_TPID_88A8_EN_get", N, 11);
    /* ((0x00000024 + (N) * 512) bits 20) field VLAN_TPID_88A8_EN of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    reg_value = eclass_reg_GEN_CFG_VLAN_MPLS_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_TPID_88A8_EN_MSK) >> ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_TPID_88A8_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_VLAN_TPID_88A8_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_VLAN_TPID_9100_EN_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_VLAN_TPID_9100_EN_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_VLAN_TPID_9100_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_VLAN_TPID_9100_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_VLAN_TPID_9100_EN_set", N, value );

    /* ((0x00000024 + (N) * 512) bits 19) field VLAN_TPID_9100_EN of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    eclass_reg_GEN_CFG_VLAN_MPLS_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_TPID_9100_EN_MSK,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_TPID_9100_EN_OFF,
                                                  value);
}

static INLINE UINT32 eclass_field_VLAN_TPID_9100_EN_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_VLAN_TPID_9100_EN_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_VLAN_TPID_9100_EN_get", N, 11);
    /* ((0x00000024 + (N) * 512) bits 19) field VLAN_TPID_9100_EN of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    reg_value = eclass_reg_GEN_CFG_VLAN_MPLS_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_TPID_9100_EN_MSK) >> ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_TPID_9100_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_VLAN_TPID_9100_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_VLAN_TPID_8100_EN_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_VLAN_TPID_8100_EN_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_VLAN_TPID_8100_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_VLAN_TPID_8100_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_VLAN_TPID_8100_EN_set", N, value );

    /* ((0x00000024 + (N) * 512) bits 18) field VLAN_TPID_8100_EN of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    eclass_reg_GEN_CFG_VLAN_MPLS_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_TPID_8100_EN_MSK,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_TPID_8100_EN_OFF,
                                                  value);
}

static INLINE UINT32 eclass_field_VLAN_TPID_8100_EN_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_VLAN_TPID_8100_EN_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_VLAN_TPID_8100_EN_get", N, 11);
    /* ((0x00000024 + (N) * 512) bits 18) field VLAN_TPID_8100_EN of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    reg_value = eclass_reg_GEN_CFG_VLAN_MPLS_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_TPID_8100_EN_MSK) >> ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_TPID_8100_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_VLAN_TPID_8100_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_VLAN_OUTER_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_VLAN_OUTER_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_VLAN_OUTER_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_VLAN_OUTER_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_VLAN_OUTER_EN_set", N, value );

    /* ((0x00000024 + (N) * 512) bits 17) field VLAN_OUTER_EN of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    eclass_reg_GEN_CFG_VLAN_MPLS_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_OUTER_EN_MSK,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_OUTER_EN_OFF,
                                                  value);
}

static INLINE UINT32 eclass_field_VLAN_OUTER_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_VLAN_OUTER_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_VLAN_OUTER_EN_get", N, 11);
    /* ((0x00000024 + (N) * 512) bits 17) field VLAN_OUTER_EN of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    reg_value = eclass_reg_GEN_CFG_VLAN_MPLS_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_OUTER_EN_MSK) >> ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_OUTER_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_VLAN_OUTER_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_VLAN_INNER_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_VLAN_INNER_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_VLAN_INNER_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_VLAN_INNER_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_VLAN_INNER_EN_set", N, value );

    /* ((0x00000024 + (N) * 512) bits 16) field VLAN_INNER_EN of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    eclass_reg_GEN_CFG_VLAN_MPLS_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_INNER_EN_MSK,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_INNER_EN_OFF,
                                                  value);
}

static INLINE UINT32 eclass_field_VLAN_INNER_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_VLAN_INNER_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_VLAN_INNER_EN_get", N, 11);
    /* ((0x00000024 + (N) * 512) bits 16) field VLAN_INNER_EN of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    reg_value = eclass_reg_GEN_CFG_VLAN_MPLS_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_INNER_EN_MSK) >> ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_INNER_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_VLAN_INNER_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_VLAN_MPLS_STATE_EN_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_VLAN_MPLS_STATE_EN_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_VLAN_MPLS_STATE_EN_set", N, 11);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_VLAN_MPLS_STATE_EN_set", value, 3);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_VLAN_MPLS_STATE_EN_set", N, value );

    /* ((0x00000024 + (N) * 512) bits 10:9) field VLAN_MPLS_STATE_EN of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    eclass_reg_GEN_CFG_VLAN_MPLS_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_STATE_EN_MSK,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_STATE_EN_OFF,
                                                  value);
}

static INLINE UINT32 eclass_field_VLAN_MPLS_STATE_EN_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_VLAN_MPLS_STATE_EN_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_VLAN_MPLS_STATE_EN_get", N, 11);
    /* ((0x00000024 + (N) * 512) bits 10:9) field VLAN_MPLS_STATE_EN of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    reg_value = eclass_reg_GEN_CFG_VLAN_MPLS_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_STATE_EN_MSK) >> ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_STATE_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_VLAN_MPLS_STATE_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_VLAN_MPLS_STATE_EN_set( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_VLAN_MPLS_STATE_EN_set( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_VLAN_MPLS_STATE_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_VLAN_MPLS_STATE_EN_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_VLAN_MPLS_STATE_EN_set", stop_bit, 1 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_VLAN_MPLS_STATE_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000024 + (N) * 512) bits 10:9) field VLAN_MPLS_STATE_EN of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000024 + (N) * 512) bits 10:9) field VLAN_MPLS_STATE_EN of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
        eclass_reg_GEN_CFG_VLAN_MPLS_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      subfield_mask << (ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_STATE_EN_OFF + subfield_offset),
                                                      ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_STATE_EN_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_VLAN_MPLS_STATE_EN_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_VLAN_MPLS_STATE_EN_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_VLAN_MPLS_STATE_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_VLAN_MPLS_STATE_EN_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_VLAN_MPLS_STATE_EN_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000024 + (N) * 512) bits 10:9) field VLAN_MPLS_STATE_EN of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    reg_value = eclass_reg_GEN_CFG_VLAN_MPLS_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    field_value = (reg_value & ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_STATE_EN_MSK)
                  >> ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_STATE_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_STATE_EN_MSK, ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_STATE_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_VLAN_MPLS_STATE_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_VLAN_MPLS_PRIO_EN_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_VLAN_MPLS_PRIO_EN_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_VLAN_MPLS_PRIO_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_VLAN_MPLS_PRIO_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_VLAN_MPLS_PRIO_EN_set", N, value );

    /* ((0x00000024 + (N) * 512) bits 7) field VLAN_MPLS_PRIO_EN of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    eclass_reg_GEN_CFG_VLAN_MPLS_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_PRIO_EN_MSK,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_PRIO_EN_OFF,
                                                  value);
}

static INLINE UINT32 eclass_field_VLAN_MPLS_PRIO_EN_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_VLAN_MPLS_PRIO_EN_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_VLAN_MPLS_PRIO_EN_get", N, 11);
    /* ((0x00000024 + (N) * 512) bits 7) field VLAN_MPLS_PRIO_EN of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    reg_value = eclass_reg_GEN_CFG_VLAN_MPLS_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_PRIO_EN_MSK) >> ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_PRIO_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_VLAN_MPLS_PRIO_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_VLAN_MPLS_PRIO_DEFAULT_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_VLAN_MPLS_PRIO_DEFAULT_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_VLAN_MPLS_PRIO_DEFAULT_set", N, 11);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_VLAN_MPLS_PRIO_DEFAULT_set", value, 7);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_VLAN_MPLS_PRIO_DEFAULT_set", N, value );

    /* ((0x00000024 + (N) * 512) bits 6:4) field VLAN_MPLS_PRIO_DEFAULT of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    eclass_reg_GEN_CFG_VLAN_MPLS_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_PRIO_DEFAULT_MSK,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_PRIO_DEFAULT_OFF,
                                                  value);
}

static INLINE UINT32 eclass_field_VLAN_MPLS_PRIO_DEFAULT_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_VLAN_MPLS_PRIO_DEFAULT_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_VLAN_MPLS_PRIO_DEFAULT_get", N, 11);
    /* ((0x00000024 + (N) * 512) bits 6:4) field VLAN_MPLS_PRIO_DEFAULT of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    reg_value = eclass_reg_GEN_CFG_VLAN_MPLS_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_PRIO_DEFAULT_MSK) >> ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_PRIO_DEFAULT_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_VLAN_MPLS_PRIO_DEFAULT_get", N, value );

    return value;
}
static INLINE void eclass_field_range_VLAN_MPLS_PRIO_DEFAULT_set( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_VLAN_MPLS_PRIO_DEFAULT_set( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_VLAN_MPLS_PRIO_DEFAULT_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_VLAN_MPLS_PRIO_DEFAULT_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_VLAN_MPLS_PRIO_DEFAULT_set", stop_bit, 2 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_VLAN_MPLS_PRIO_DEFAULT_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000024 + (N) * 512) bits 6:4) field VLAN_MPLS_PRIO_DEFAULT of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000024 + (N) * 512) bits 6:4) field VLAN_MPLS_PRIO_DEFAULT of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
        eclass_reg_GEN_CFG_VLAN_MPLS_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      subfield_mask << (ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_PRIO_DEFAULT_OFF + subfield_offset),
                                                      ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_PRIO_DEFAULT_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_VLAN_MPLS_PRIO_DEFAULT_get( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_VLAN_MPLS_PRIO_DEFAULT_get( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_VLAN_MPLS_PRIO_DEFAULT_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_VLAN_MPLS_PRIO_DEFAULT_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_VLAN_MPLS_PRIO_DEFAULT_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000024 + (N) * 512) bits 6:4) field VLAN_MPLS_PRIO_DEFAULT of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    reg_value = eclass_reg_GEN_CFG_VLAN_MPLS_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    field_value = (reg_value & ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_PRIO_DEFAULT_MSK)
                  >> ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_PRIO_DEFAULT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_PRIO_DEFAULT_MSK, ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_PRIO_DEFAULT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_VLAN_MPLS_PRIO_DEFAULT_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_VLAN_MPLS_PRIO_LEVEL_set( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_VLAN_MPLS_PRIO_LEVEL_set( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_VLAN_MPLS_PRIO_LEVEL_set", N, 11);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_VLAN_MPLS_PRIO_LEVEL_set", value, 3);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_VLAN_MPLS_PRIO_LEVEL_set", N, value );

    /* ((0x00000024 + (N) * 512) bits 3:2) field VLAN_MPLS_PRIO_LEVEL of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    eclass_reg_GEN_CFG_VLAN_MPLS_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_PRIO_LEVEL_MSK,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_PRIO_LEVEL_OFF,
                                                  value);
}

static INLINE UINT32 eclass_field_VLAN_MPLS_PRIO_LEVEL_get( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_VLAN_MPLS_PRIO_LEVEL_get( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_VLAN_MPLS_PRIO_LEVEL_get", N, 11);
    /* ((0x00000024 + (N) * 512) bits 3:2) field VLAN_MPLS_PRIO_LEVEL of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    reg_value = eclass_reg_GEN_CFG_VLAN_MPLS_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_PRIO_LEVEL_MSK) >> ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_PRIO_LEVEL_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_VLAN_MPLS_PRIO_LEVEL_get", N, value );

    return value;
}
static INLINE void eclass_field_range_VLAN_MPLS_PRIO_LEVEL_set( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_VLAN_MPLS_PRIO_LEVEL_set( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_VLAN_MPLS_PRIO_LEVEL_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_VLAN_MPLS_PRIO_LEVEL_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_VLAN_MPLS_PRIO_LEVEL_set", stop_bit, 1 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_VLAN_MPLS_PRIO_LEVEL_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000024 + (N) * 512) bits 3:2) field VLAN_MPLS_PRIO_LEVEL of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000024 + (N) * 512) bits 3:2) field VLAN_MPLS_PRIO_LEVEL of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
        eclass_reg_GEN_CFG_VLAN_MPLS_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      subfield_mask << (ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_PRIO_LEVEL_OFF + subfield_offset),
                                                      ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_PRIO_LEVEL_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_VLAN_MPLS_PRIO_LEVEL_get( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_VLAN_MPLS_PRIO_LEVEL_get( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_VLAN_MPLS_PRIO_LEVEL_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_VLAN_MPLS_PRIO_LEVEL_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_VLAN_MPLS_PRIO_LEVEL_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000024 + (N) * 512) bits 3:2) field VLAN_MPLS_PRIO_LEVEL of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    reg_value = eclass_reg_GEN_CFG_VLAN_MPLS_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    field_value = (reg_value & ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_PRIO_LEVEL_MSK)
                  >> ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_PRIO_LEVEL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_PRIO_LEVEL_MSK, ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_PRIO_LEVEL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_VLAN_MPLS_PRIO_LEVEL_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_VLAN_MPLS_PRIO_TYPE_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_VLAN_MPLS_PRIO_TYPE_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_VLAN_MPLS_PRIO_TYPE_set", N, 11);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_VLAN_MPLS_PRIO_TYPE_set", value, 3);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_VLAN_MPLS_PRIO_TYPE_set", N, value );

    /* ((0x00000024 + (N) * 512) bits 1:0) field VLAN_MPLS_PRIO_TYPE of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    eclass_reg_GEN_CFG_VLAN_MPLS_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_PRIO_TYPE_MSK,
                                                  ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_PRIO_TYPE_OFF,
                                                  value);
}

static INLINE UINT32 eclass_field_VLAN_MPLS_PRIO_TYPE_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_VLAN_MPLS_PRIO_TYPE_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_VLAN_MPLS_PRIO_TYPE_get", N, 11);
    /* ((0x00000024 + (N) * 512) bits 1:0) field VLAN_MPLS_PRIO_TYPE of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    reg_value = eclass_reg_GEN_CFG_VLAN_MPLS_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_PRIO_TYPE_MSK) >> ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_PRIO_TYPE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_VLAN_MPLS_PRIO_TYPE_get", N, value );

    return value;
}
static INLINE void eclass_field_range_VLAN_MPLS_PRIO_TYPE_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_VLAN_MPLS_PRIO_TYPE_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_VLAN_MPLS_PRIO_TYPE_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_VLAN_MPLS_PRIO_TYPE_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_VLAN_MPLS_PRIO_TYPE_set", stop_bit, 1 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_VLAN_MPLS_PRIO_TYPE_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000024 + (N) * 512) bits 1:0) field VLAN_MPLS_PRIO_TYPE of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000024 + (N) * 512) bits 1:0) field VLAN_MPLS_PRIO_TYPE of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
        eclass_reg_GEN_CFG_VLAN_MPLS_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      subfield_mask << (ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_PRIO_TYPE_OFF + subfield_offset),
                                                      ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_PRIO_TYPE_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_VLAN_MPLS_PRIO_TYPE_get( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_VLAN_MPLS_PRIO_TYPE_get( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_VLAN_MPLS_PRIO_TYPE_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_VLAN_MPLS_PRIO_TYPE_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_VLAN_MPLS_PRIO_TYPE_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000024 + (N) * 512) bits 1:0) field VLAN_MPLS_PRIO_TYPE of register PMC_ECLASS120_REG_GEN_CFG_VLAN_MPLS index N=0..11 */
    reg_value = eclass_reg_GEN_CFG_VLAN_MPLS_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    field_value = (reg_value & ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_PRIO_TYPE_MSK)
                  >> ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_PRIO_TYPE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_PRIO_TYPE_MSK, ECLASS120_REG_GEN_CFG_VLAN_MPLS_BIT_VLAN_MPLS_PRIO_TYPE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_VLAN_MPLS_PRIO_TYPE_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_VLAN_CUSTOM_TPID_OUTER_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_VLAN_CUSTOM_TPID_OUTER_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_VLAN_CUSTOM_TPID_OUTER_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_VLAN_CUSTOM_TPID_OUTER_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_VLAN_CUSTOM_TPID_OUTER_set", N, value );

    /* ((0x00000028 + (N) * 512) bits 31:16) field VLAN_CUSTOM_TPID_OUTER of register PMC_ECLASS120_REG_VLAN_TPID index N=0..11 */
    eclass_reg_VLAN_TPID_array_field_set( b_ptr,
                                          h_ptr,
                                          N,
                                          ECLASS120_REG_VLAN_TPID_BIT_VLAN_CUSTOM_TPID_OUTER_MSK,
                                          ECLASS120_REG_VLAN_TPID_BIT_VLAN_CUSTOM_TPID_OUTER_OFF,
                                          value);
}

static INLINE UINT32 eclass_field_VLAN_CUSTOM_TPID_OUTER_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_VLAN_CUSTOM_TPID_OUTER_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_VLAN_CUSTOM_TPID_OUTER_get", N, 11);
    /* ((0x00000028 + (N) * 512) bits 31:16) field VLAN_CUSTOM_TPID_OUTER of register PMC_ECLASS120_REG_VLAN_TPID index N=0..11 */
    reg_value = eclass_reg_VLAN_TPID_array_read(  b_ptr, h_ptr, N);
    value = (reg_value & ECLASS120_REG_VLAN_TPID_BIT_VLAN_CUSTOM_TPID_OUTER_MSK) >> ECLASS120_REG_VLAN_TPID_BIT_VLAN_CUSTOM_TPID_OUTER_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_VLAN_CUSTOM_TPID_OUTER_get", N, value );

    return value;
}
static INLINE void eclass_field_range_VLAN_CUSTOM_TPID_OUTER_set( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_VLAN_CUSTOM_TPID_OUTER_set( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_VLAN_CUSTOM_TPID_OUTER_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_VLAN_CUSTOM_TPID_OUTER_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_VLAN_CUSTOM_TPID_OUTER_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_VLAN_CUSTOM_TPID_OUTER_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000028 + (N) * 512) bits 31:16) field VLAN_CUSTOM_TPID_OUTER of register PMC_ECLASS120_REG_VLAN_TPID index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000028 + (N) * 512) bits 31:16) field VLAN_CUSTOM_TPID_OUTER of register PMC_ECLASS120_REG_VLAN_TPID index N=0..11 */
        eclass_reg_VLAN_TPID_array_field_set( b_ptr,
                                              h_ptr,
                                              N,
                                              subfield_mask << (ECLASS120_REG_VLAN_TPID_BIT_VLAN_CUSTOM_TPID_OUTER_OFF + subfield_offset),
                                              ECLASS120_REG_VLAN_TPID_BIT_VLAN_CUSTOM_TPID_OUTER_OFF + subfield_offset,
                                              value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_VLAN_CUSTOM_TPID_OUTER_get( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_VLAN_CUSTOM_TPID_OUTER_get( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_VLAN_CUSTOM_TPID_OUTER_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_VLAN_CUSTOM_TPID_OUTER_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_VLAN_CUSTOM_TPID_OUTER_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000028 + (N) * 512) bits 31:16) field VLAN_CUSTOM_TPID_OUTER of register PMC_ECLASS120_REG_VLAN_TPID index N=0..11 */
    reg_value = eclass_reg_VLAN_TPID_array_read(  b_ptr, h_ptr, N);
    field_value = (reg_value & ECLASS120_REG_VLAN_TPID_BIT_VLAN_CUSTOM_TPID_OUTER_MSK)
                  >> ECLASS120_REG_VLAN_TPID_BIT_VLAN_CUSTOM_TPID_OUTER_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_VLAN_TPID_BIT_VLAN_CUSTOM_TPID_OUTER_MSK, ECLASS120_REG_VLAN_TPID_BIT_VLAN_CUSTOM_TPID_OUTER_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_VLAN_CUSTOM_TPID_OUTER_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_VLAN_CUSTOM_TPID_INNER_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_VLAN_CUSTOM_TPID_INNER_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_VLAN_CUSTOM_TPID_INNER_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_VLAN_CUSTOM_TPID_INNER_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_VLAN_CUSTOM_TPID_INNER_set", N, value );

    /* ((0x00000028 + (N) * 512) bits 15:0) field VLAN_CUSTOM_TPID_INNER of register PMC_ECLASS120_REG_VLAN_TPID index N=0..11 */
    eclass_reg_VLAN_TPID_array_field_set( b_ptr,
                                          h_ptr,
                                          N,
                                          ECLASS120_REG_VLAN_TPID_BIT_VLAN_CUSTOM_TPID_INNER_MSK,
                                          ECLASS120_REG_VLAN_TPID_BIT_VLAN_CUSTOM_TPID_INNER_OFF,
                                          value);
}

static INLINE UINT32 eclass_field_VLAN_CUSTOM_TPID_INNER_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_VLAN_CUSTOM_TPID_INNER_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_VLAN_CUSTOM_TPID_INNER_get", N, 11);
    /* ((0x00000028 + (N) * 512) bits 15:0) field VLAN_CUSTOM_TPID_INNER of register PMC_ECLASS120_REG_VLAN_TPID index N=0..11 */
    reg_value = eclass_reg_VLAN_TPID_array_read(  b_ptr, h_ptr, N);
    value = (reg_value & ECLASS120_REG_VLAN_TPID_BIT_VLAN_CUSTOM_TPID_INNER_MSK) >> ECLASS120_REG_VLAN_TPID_BIT_VLAN_CUSTOM_TPID_INNER_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_VLAN_CUSTOM_TPID_INNER_get", N, value );

    return value;
}
static INLINE void eclass_field_range_VLAN_CUSTOM_TPID_INNER_set( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_VLAN_CUSTOM_TPID_INNER_set( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_VLAN_CUSTOM_TPID_INNER_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_VLAN_CUSTOM_TPID_INNER_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_VLAN_CUSTOM_TPID_INNER_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_VLAN_CUSTOM_TPID_INNER_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000028 + (N) * 512) bits 15:0) field VLAN_CUSTOM_TPID_INNER of register PMC_ECLASS120_REG_VLAN_TPID index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000028 + (N) * 512) bits 15:0) field VLAN_CUSTOM_TPID_INNER of register PMC_ECLASS120_REG_VLAN_TPID index N=0..11 */
        eclass_reg_VLAN_TPID_array_field_set( b_ptr,
                                              h_ptr,
                                              N,
                                              subfield_mask << (ECLASS120_REG_VLAN_TPID_BIT_VLAN_CUSTOM_TPID_INNER_OFF + subfield_offset),
                                              ECLASS120_REG_VLAN_TPID_BIT_VLAN_CUSTOM_TPID_INNER_OFF + subfield_offset,
                                              value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_VLAN_CUSTOM_TPID_INNER_get( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_VLAN_CUSTOM_TPID_INNER_get( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_VLAN_CUSTOM_TPID_INNER_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_VLAN_CUSTOM_TPID_INNER_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_VLAN_CUSTOM_TPID_INNER_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000028 + (N) * 512) bits 15:0) field VLAN_CUSTOM_TPID_INNER of register PMC_ECLASS120_REG_VLAN_TPID index N=0..11 */
    reg_value = eclass_reg_VLAN_TPID_array_read(  b_ptr, h_ptr, N);
    field_value = (reg_value & ECLASS120_REG_VLAN_TPID_BIT_VLAN_CUSTOM_TPID_INNER_MSK)
                  >> ECLASS120_REG_VLAN_TPID_BIT_VLAN_CUSTOM_TPID_INNER_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_VLAN_TPID_BIT_VLAN_CUSTOM_TPID_INNER_MSK, ECLASS120_REG_VLAN_TPID_BIT_VLAN_CUSTOM_TPID_INNER_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_VLAN_CUSTOM_TPID_INNER_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_MPLS_CUSTOM_ETHERTYPE_set( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_MPLS_CUSTOM_ETHERTYPE_set( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_MPLS_CUSTOM_ETHERTYPE_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_MPLS_CUSTOM_ETHERTYPE_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_MPLS_CUSTOM_ETHERTYPE_set", N, value );

    /* ((0x00000030 + (N) * 512) bits 15:0) field MPLS_CUSTOM_ETHERTYPE of register PMC_ECLASS120_REG_MPLS_ETHERTYPE index N=0..11 */
    eclass_reg_MPLS_ETHERTYPE_array_field_set( b_ptr,
                                               h_ptr,
                                               N,
                                               ECLASS120_REG_MPLS_ETHERTYPE_BIT_MPLS_CUSTOM_ETHERTYPE_MSK,
                                               ECLASS120_REG_MPLS_ETHERTYPE_BIT_MPLS_CUSTOM_ETHERTYPE_OFF,
                                               value);
}

static INLINE UINT32 eclass_field_MPLS_CUSTOM_ETHERTYPE_get( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_MPLS_CUSTOM_ETHERTYPE_get( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_MPLS_CUSTOM_ETHERTYPE_get", N, 11);
    /* ((0x00000030 + (N) * 512) bits 15:0) field MPLS_CUSTOM_ETHERTYPE of register PMC_ECLASS120_REG_MPLS_ETHERTYPE index N=0..11 */
    reg_value = eclass_reg_MPLS_ETHERTYPE_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    value = (reg_value & ECLASS120_REG_MPLS_ETHERTYPE_BIT_MPLS_CUSTOM_ETHERTYPE_MSK) >> ECLASS120_REG_MPLS_ETHERTYPE_BIT_MPLS_CUSTOM_ETHERTYPE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_MPLS_CUSTOM_ETHERTYPE_get", N, value );

    return value;
}
static INLINE void eclass_field_range_MPLS_CUSTOM_ETHERTYPE_set( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_MPLS_CUSTOM_ETHERTYPE_set( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_MPLS_CUSTOM_ETHERTYPE_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_MPLS_CUSTOM_ETHERTYPE_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_MPLS_CUSTOM_ETHERTYPE_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_MPLS_CUSTOM_ETHERTYPE_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000030 + (N) * 512) bits 15:0) field MPLS_CUSTOM_ETHERTYPE of register PMC_ECLASS120_REG_MPLS_ETHERTYPE index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000030 + (N) * 512) bits 15:0) field MPLS_CUSTOM_ETHERTYPE of register PMC_ECLASS120_REG_MPLS_ETHERTYPE index N=0..11 */
        eclass_reg_MPLS_ETHERTYPE_array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   subfield_mask << (ECLASS120_REG_MPLS_ETHERTYPE_BIT_MPLS_CUSTOM_ETHERTYPE_OFF + subfield_offset),
                                                   ECLASS120_REG_MPLS_ETHERTYPE_BIT_MPLS_CUSTOM_ETHERTYPE_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_MPLS_CUSTOM_ETHERTYPE_get( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_MPLS_CUSTOM_ETHERTYPE_get( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_MPLS_CUSTOM_ETHERTYPE_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_MPLS_CUSTOM_ETHERTYPE_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_MPLS_CUSTOM_ETHERTYPE_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000030 + (N) * 512) bits 15:0) field MPLS_CUSTOM_ETHERTYPE of register PMC_ECLASS120_REG_MPLS_ETHERTYPE index N=0..11 */
    reg_value = eclass_reg_MPLS_ETHERTYPE_array_read( b_ptr,
                                                      h_ptr,
                                                      N);
    field_value = (reg_value & ECLASS120_REG_MPLS_ETHERTYPE_BIT_MPLS_CUSTOM_ETHERTYPE_MSK)
                  >> ECLASS120_REG_MPLS_ETHERTYPE_BIT_MPLS_CUSTOM_ETHERTYPE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_MPLS_ETHERTYPE_BIT_MPLS_CUSTOM_ETHERTYPE_MSK, ECLASS120_REG_MPLS_ETHERTYPE_BIT_MPLS_CUSTOM_ETHERTYPE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_MPLS_CUSTOM_ETHERTYPE_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FILT20_TAG0_VALUE_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FILT20_TAG0_VALUE_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG0_VALUE_set", N, 11);
    if (value > 1048575)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FILT20_TAG0_VALUE_set", value, 1048575);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FILT20_TAG0_VALUE_set", N, value );

    /* ((0x00000038 + (N) * 512) bits 19:0) field FILT20_TAG0_VALUE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG0_1 index N=0..11 */
    eclass_reg_VLANMPLS_FILT20_TAG0_1_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG0_1_BIT_FILT20_TAG0_VALUE_MSK,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG0_1_BIT_FILT20_TAG0_VALUE_OFF,
                                                       value);
}

static INLINE UINT32 eclass_field_FILT20_TAG0_VALUE_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FILT20_TAG0_VALUE_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG0_VALUE_get", N, 11);
    /* ((0x00000038 + (N) * 512) bits 19:0) field FILT20_TAG0_VALUE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG0_1 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG0_1_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG0_1_BIT_FILT20_TAG0_VALUE_MSK) >> ECLASS120_REG_VLANMPLS_FILT20_TAG0_1_BIT_FILT20_TAG0_VALUE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FILT20_TAG0_VALUE_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FILT20_TAG0_VALUE_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FILT20_TAG0_VALUE_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG0_VALUE_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG0_VALUE_set", stop_bit, start_bit );
    if (stop_bit > 19) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG0_VALUE_set", stop_bit, 19 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG0_VALUE_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000038 + (N) * 512) bits 19:0) field FILT20_TAG0_VALUE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG0_1 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 19) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 19;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000038 + (N) * 512) bits 19:0) field FILT20_TAG0_VALUE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG0_1 index N=0..11 */
        eclass_reg_VLANMPLS_FILT20_TAG0_1_array_field_set( b_ptr,
                                                           h_ptr,
                                                           N,
                                                           subfield_mask << (ECLASS120_REG_VLANMPLS_FILT20_TAG0_1_BIT_FILT20_TAG0_VALUE_OFF + subfield_offset),
                                                           ECLASS120_REG_VLANMPLS_FILT20_TAG0_1_BIT_FILT20_TAG0_VALUE_OFF + subfield_offset,
                                                           value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FILT20_TAG0_VALUE_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FILT20_TAG0_VALUE_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG0_VALUE_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG0_VALUE_get", stop_bit, start_bit );
    if (stop_bit > 19) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG0_VALUE_get", stop_bit, 19 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 19) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 19;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000038 + (N) * 512) bits 19:0) field FILT20_TAG0_VALUE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG0_1 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG0_1_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    field_value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG0_1_BIT_FILT20_TAG0_VALUE_MSK)
                  >> ECLASS120_REG_VLANMPLS_FILT20_TAG0_1_BIT_FILT20_TAG0_VALUE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_VLANMPLS_FILT20_TAG0_1_BIT_FILT20_TAG0_VALUE_MSK, ECLASS120_REG_VLANMPLS_FILT20_TAG0_1_BIT_FILT20_TAG0_VALUE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG0_VALUE_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FILT20_TAG0_TYPE_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FILT20_TAG0_TYPE_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG0_TYPE_set", N, 11);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FILT20_TAG0_TYPE_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FILT20_TAG0_TYPE_set", N, value );

    /* ((0x0000003c + (N) * 512) bits 31:28) field FILT20_TAG0_TYPE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG0_2 index N=0..11 */
    eclass_reg_VLANMPLS_FILT20_TAG0_2_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_BIT_FILT20_TAG0_TYPE_MSK,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_BIT_FILT20_TAG0_TYPE_OFF,
                                                       value);
}

static INLINE UINT32 eclass_field_FILT20_TAG0_TYPE_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FILT20_TAG0_TYPE_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG0_TYPE_get", N, 11);
    /* ((0x0000003c + (N) * 512) bits 31:28) field FILT20_TAG0_TYPE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG0_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG0_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_BIT_FILT20_TAG0_TYPE_MSK) >> ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_BIT_FILT20_TAG0_TYPE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FILT20_TAG0_TYPE_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FILT20_TAG0_TYPE_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FILT20_TAG0_TYPE_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG0_TYPE_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG0_TYPE_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG0_TYPE_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG0_TYPE_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000003c + (N) * 512) bits 31:28) field FILT20_TAG0_TYPE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG0_2 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000003c + (N) * 512) bits 31:28) field FILT20_TAG0_TYPE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG0_2 index N=0..11 */
        eclass_reg_VLANMPLS_FILT20_TAG0_2_array_field_set( b_ptr,
                                                           h_ptr,
                                                           N,
                                                           subfield_mask << (ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_BIT_FILT20_TAG0_TYPE_OFF + subfield_offset),
                                                           ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_BIT_FILT20_TAG0_TYPE_OFF + subfield_offset,
                                                           value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FILT20_TAG0_TYPE_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FILT20_TAG0_TYPE_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG0_TYPE_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG0_TYPE_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG0_TYPE_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000003c + (N) * 512) bits 31:28) field FILT20_TAG0_TYPE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG0_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG0_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    field_value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_BIT_FILT20_TAG0_TYPE_MSK)
                  >> ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_BIT_FILT20_TAG0_TYPE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_BIT_FILT20_TAG0_TYPE_MSK, ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_BIT_FILT20_TAG0_TYPE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG0_TYPE_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FILT20_TAG0_INV_set( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FILT20_TAG0_INV_set( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG0_INV_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FILT20_TAG0_INV_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FILT20_TAG0_INV_set", N, value );

    /* ((0x0000003c + (N) * 512) bits 24) field FILT20_TAG0_INV of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG0_2 index N=0..11 */
    eclass_reg_VLANMPLS_FILT20_TAG0_2_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_BIT_FILT20_TAG0_INV_MSK,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_BIT_FILT20_TAG0_INV_OFF,
                                                       value);
}

static INLINE UINT32 eclass_field_FILT20_TAG0_INV_get( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FILT20_TAG0_INV_get( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG0_INV_get", N, 11);
    /* ((0x0000003c + (N) * 512) bits 24) field FILT20_TAG0_INV of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG0_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG0_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_BIT_FILT20_TAG0_INV_MSK) >> ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_BIT_FILT20_TAG0_INV_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FILT20_TAG0_INV_get", N, value );

    return value;
}
static INLINE void eclass_field_FILT20_TAG0_ADDR_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FILT20_TAG0_ADDR_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG0_ADDR_set", N, 11);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FILT20_TAG0_ADDR_set", value, 7);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FILT20_TAG0_ADDR_set", N, value );

    /* ((0x0000003c + (N) * 512) bits 22:20) field FILT20_TAG0_ADDR of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG0_2 index N=0..11 */
    eclass_reg_VLANMPLS_FILT20_TAG0_2_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_BIT_FILT20_TAG0_ADDR_MSK,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_BIT_FILT20_TAG0_ADDR_OFF,
                                                       value);
}

static INLINE UINT32 eclass_field_FILT20_TAG0_ADDR_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FILT20_TAG0_ADDR_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG0_ADDR_get", N, 11);
    /* ((0x0000003c + (N) * 512) bits 22:20) field FILT20_TAG0_ADDR of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG0_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG0_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_BIT_FILT20_TAG0_ADDR_MSK) >> ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_BIT_FILT20_TAG0_ADDR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FILT20_TAG0_ADDR_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FILT20_TAG0_ADDR_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FILT20_TAG0_ADDR_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG0_ADDR_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG0_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG0_ADDR_set", stop_bit, 2 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG0_ADDR_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000003c + (N) * 512) bits 22:20) field FILT20_TAG0_ADDR of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG0_2 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000003c + (N) * 512) bits 22:20) field FILT20_TAG0_ADDR of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG0_2 index N=0..11 */
        eclass_reg_VLANMPLS_FILT20_TAG0_2_array_field_set( b_ptr,
                                                           h_ptr,
                                                           N,
                                                           subfield_mask << (ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_BIT_FILT20_TAG0_ADDR_OFF + subfield_offset),
                                                           ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_BIT_FILT20_TAG0_ADDR_OFF + subfield_offset,
                                                           value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FILT20_TAG0_ADDR_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FILT20_TAG0_ADDR_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG0_ADDR_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG0_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG0_ADDR_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000003c + (N) * 512) bits 22:20) field FILT20_TAG0_ADDR of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG0_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG0_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    field_value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_BIT_FILT20_TAG0_ADDR_MSK)
                  >> ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_BIT_FILT20_TAG0_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_BIT_FILT20_TAG0_ADDR_MSK, ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_BIT_FILT20_TAG0_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG0_ADDR_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FILT20_TAG0_MASK_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FILT20_TAG0_MASK_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG0_MASK_set", N, 11);
    if (value > 1048575)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FILT20_TAG0_MASK_set", value, 1048575);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FILT20_TAG0_MASK_set", N, value );

    /* ((0x0000003c + (N) * 512) bits 19:0) field FILT20_TAG0_MASK of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG0_2 index N=0..11 */
    eclass_reg_VLANMPLS_FILT20_TAG0_2_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_BIT_FILT20_TAG0_MASK_MSK,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_BIT_FILT20_TAG0_MASK_OFF,
                                                       value);
}

static INLINE UINT32 eclass_field_FILT20_TAG0_MASK_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FILT20_TAG0_MASK_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG0_MASK_get", N, 11);
    /* ((0x0000003c + (N) * 512) bits 19:0) field FILT20_TAG0_MASK of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG0_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG0_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_BIT_FILT20_TAG0_MASK_MSK) >> ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_BIT_FILT20_TAG0_MASK_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FILT20_TAG0_MASK_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FILT20_TAG0_MASK_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FILT20_TAG0_MASK_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG0_MASK_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG0_MASK_set", stop_bit, start_bit );
    if (stop_bit > 19) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG0_MASK_set", stop_bit, 19 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG0_MASK_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000003c + (N) * 512) bits 19:0) field FILT20_TAG0_MASK of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG0_2 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 19) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 19;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000003c + (N) * 512) bits 19:0) field FILT20_TAG0_MASK of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG0_2 index N=0..11 */
        eclass_reg_VLANMPLS_FILT20_TAG0_2_array_field_set( b_ptr,
                                                           h_ptr,
                                                           N,
                                                           subfield_mask << (ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_BIT_FILT20_TAG0_MASK_OFF + subfield_offset),
                                                           ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_BIT_FILT20_TAG0_MASK_OFF + subfield_offset,
                                                           value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FILT20_TAG0_MASK_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FILT20_TAG0_MASK_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG0_MASK_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG0_MASK_get", stop_bit, start_bit );
    if (stop_bit > 19) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG0_MASK_get", stop_bit, 19 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 19) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 19;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000003c + (N) * 512) bits 19:0) field FILT20_TAG0_MASK of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG0_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG0_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    field_value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_BIT_FILT20_TAG0_MASK_MSK)
                  >> ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_BIT_FILT20_TAG0_MASK_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_BIT_FILT20_TAG0_MASK_MSK, ECLASS120_REG_VLANMPLS_FILT20_TAG0_2_BIT_FILT20_TAG0_MASK_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG0_MASK_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FILT20_TAG1_VALUE_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FILT20_TAG1_VALUE_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG1_VALUE_set", N, 11);
    if (value > 1048575)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FILT20_TAG1_VALUE_set", value, 1048575);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FILT20_TAG1_VALUE_set", N, value );

    /* ((0x00000040 + (N) * 512) bits 19:0) field FILT20_TAG1_VALUE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG1_1 index N=0..11 */
    eclass_reg_VLANMPLS_FILT20_TAG1_1_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG1_1_BIT_FILT20_TAG1_VALUE_MSK,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG1_1_BIT_FILT20_TAG1_VALUE_OFF,
                                                       value);
}

static INLINE UINT32 eclass_field_FILT20_TAG1_VALUE_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FILT20_TAG1_VALUE_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG1_VALUE_get", N, 11);
    /* ((0x00000040 + (N) * 512) bits 19:0) field FILT20_TAG1_VALUE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG1_1 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG1_1_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG1_1_BIT_FILT20_TAG1_VALUE_MSK) >> ECLASS120_REG_VLANMPLS_FILT20_TAG1_1_BIT_FILT20_TAG1_VALUE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FILT20_TAG1_VALUE_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FILT20_TAG1_VALUE_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FILT20_TAG1_VALUE_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG1_VALUE_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG1_VALUE_set", stop_bit, start_bit );
    if (stop_bit > 19) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG1_VALUE_set", stop_bit, 19 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG1_VALUE_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000040 + (N) * 512) bits 19:0) field FILT20_TAG1_VALUE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG1_1 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 19) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 19;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000040 + (N) * 512) bits 19:0) field FILT20_TAG1_VALUE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG1_1 index N=0..11 */
        eclass_reg_VLANMPLS_FILT20_TAG1_1_array_field_set( b_ptr,
                                                           h_ptr,
                                                           N,
                                                           subfield_mask << (ECLASS120_REG_VLANMPLS_FILT20_TAG1_1_BIT_FILT20_TAG1_VALUE_OFF + subfield_offset),
                                                           ECLASS120_REG_VLANMPLS_FILT20_TAG1_1_BIT_FILT20_TAG1_VALUE_OFF + subfield_offset,
                                                           value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FILT20_TAG1_VALUE_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FILT20_TAG1_VALUE_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG1_VALUE_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG1_VALUE_get", stop_bit, start_bit );
    if (stop_bit > 19) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG1_VALUE_get", stop_bit, 19 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 19) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 19;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000040 + (N) * 512) bits 19:0) field FILT20_TAG1_VALUE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG1_1 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG1_1_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    field_value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG1_1_BIT_FILT20_TAG1_VALUE_MSK)
                  >> ECLASS120_REG_VLANMPLS_FILT20_TAG1_1_BIT_FILT20_TAG1_VALUE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_VLANMPLS_FILT20_TAG1_1_BIT_FILT20_TAG1_VALUE_MSK, ECLASS120_REG_VLANMPLS_FILT20_TAG1_1_BIT_FILT20_TAG1_VALUE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG1_VALUE_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FILT20_TAG1_TYPE_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FILT20_TAG1_TYPE_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG1_TYPE_set", N, 11);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FILT20_TAG1_TYPE_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FILT20_TAG1_TYPE_set", N, value );

    /* ((0x00000044 + (N) * 512) bits 31:28) field FILT20_TAG1_TYPE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG1_2 index N=0..11 */
    eclass_reg_VLANMPLS_FILT20_TAG1_2_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_BIT_FILT20_TAG1_TYPE_MSK,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_BIT_FILT20_TAG1_TYPE_OFF,
                                                       value);
}

static INLINE UINT32 eclass_field_FILT20_TAG1_TYPE_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FILT20_TAG1_TYPE_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG1_TYPE_get", N, 11);
    /* ((0x00000044 + (N) * 512) bits 31:28) field FILT20_TAG1_TYPE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG1_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG1_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_BIT_FILT20_TAG1_TYPE_MSK) >> ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_BIT_FILT20_TAG1_TYPE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FILT20_TAG1_TYPE_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FILT20_TAG1_TYPE_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FILT20_TAG1_TYPE_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG1_TYPE_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG1_TYPE_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG1_TYPE_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG1_TYPE_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000044 + (N) * 512) bits 31:28) field FILT20_TAG1_TYPE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG1_2 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000044 + (N) * 512) bits 31:28) field FILT20_TAG1_TYPE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG1_2 index N=0..11 */
        eclass_reg_VLANMPLS_FILT20_TAG1_2_array_field_set( b_ptr,
                                                           h_ptr,
                                                           N,
                                                           subfield_mask << (ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_BIT_FILT20_TAG1_TYPE_OFF + subfield_offset),
                                                           ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_BIT_FILT20_TAG1_TYPE_OFF + subfield_offset,
                                                           value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FILT20_TAG1_TYPE_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FILT20_TAG1_TYPE_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG1_TYPE_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG1_TYPE_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG1_TYPE_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000044 + (N) * 512) bits 31:28) field FILT20_TAG1_TYPE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG1_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG1_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    field_value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_BIT_FILT20_TAG1_TYPE_MSK)
                  >> ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_BIT_FILT20_TAG1_TYPE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_BIT_FILT20_TAG1_TYPE_MSK, ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_BIT_FILT20_TAG1_TYPE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG1_TYPE_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FILT20_TAG1_INV_set( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FILT20_TAG1_INV_set( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG1_INV_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FILT20_TAG1_INV_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FILT20_TAG1_INV_set", N, value );

    /* ((0x00000044 + (N) * 512) bits 24) field FILT20_TAG1_INV of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG1_2 index N=0..11 */
    eclass_reg_VLANMPLS_FILT20_TAG1_2_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_BIT_FILT20_TAG1_INV_MSK,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_BIT_FILT20_TAG1_INV_OFF,
                                                       value);
}

static INLINE UINT32 eclass_field_FILT20_TAG1_INV_get( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FILT20_TAG1_INV_get( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG1_INV_get", N, 11);
    /* ((0x00000044 + (N) * 512) bits 24) field FILT20_TAG1_INV of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG1_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG1_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_BIT_FILT20_TAG1_INV_MSK) >> ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_BIT_FILT20_TAG1_INV_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FILT20_TAG1_INV_get", N, value );

    return value;
}
static INLINE void eclass_field_FILT20_TAG1_ADDR_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FILT20_TAG1_ADDR_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG1_ADDR_set", N, 11);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FILT20_TAG1_ADDR_set", value, 7);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FILT20_TAG1_ADDR_set", N, value );

    /* ((0x00000044 + (N) * 512) bits 22:20) field FILT20_TAG1_ADDR of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG1_2 index N=0..11 */
    eclass_reg_VLANMPLS_FILT20_TAG1_2_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_BIT_FILT20_TAG1_ADDR_MSK,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_BIT_FILT20_TAG1_ADDR_OFF,
                                                       value);
}

static INLINE UINT32 eclass_field_FILT20_TAG1_ADDR_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FILT20_TAG1_ADDR_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG1_ADDR_get", N, 11);
    /* ((0x00000044 + (N) * 512) bits 22:20) field FILT20_TAG1_ADDR of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG1_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG1_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_BIT_FILT20_TAG1_ADDR_MSK) >> ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_BIT_FILT20_TAG1_ADDR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FILT20_TAG1_ADDR_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FILT20_TAG1_ADDR_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FILT20_TAG1_ADDR_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG1_ADDR_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG1_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG1_ADDR_set", stop_bit, 2 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG1_ADDR_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000044 + (N) * 512) bits 22:20) field FILT20_TAG1_ADDR of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG1_2 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000044 + (N) * 512) bits 22:20) field FILT20_TAG1_ADDR of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG1_2 index N=0..11 */
        eclass_reg_VLANMPLS_FILT20_TAG1_2_array_field_set( b_ptr,
                                                           h_ptr,
                                                           N,
                                                           subfield_mask << (ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_BIT_FILT20_TAG1_ADDR_OFF + subfield_offset),
                                                           ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_BIT_FILT20_TAG1_ADDR_OFF + subfield_offset,
                                                           value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FILT20_TAG1_ADDR_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FILT20_TAG1_ADDR_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG1_ADDR_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG1_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG1_ADDR_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000044 + (N) * 512) bits 22:20) field FILT20_TAG1_ADDR of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG1_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG1_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    field_value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_BIT_FILT20_TAG1_ADDR_MSK)
                  >> ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_BIT_FILT20_TAG1_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_BIT_FILT20_TAG1_ADDR_MSK, ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_BIT_FILT20_TAG1_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG1_ADDR_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FILT20_TAG1_MASK_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FILT20_TAG1_MASK_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG1_MASK_set", N, 11);
    if (value > 1048575)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FILT20_TAG1_MASK_set", value, 1048575);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FILT20_TAG1_MASK_set", N, value );

    /* ((0x00000044 + (N) * 512) bits 19:0) field FILT20_TAG1_MASK of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG1_2 index N=0..11 */
    eclass_reg_VLANMPLS_FILT20_TAG1_2_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_BIT_FILT20_TAG1_MASK_MSK,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_BIT_FILT20_TAG1_MASK_OFF,
                                                       value);
}

static INLINE UINT32 eclass_field_FILT20_TAG1_MASK_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FILT20_TAG1_MASK_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG1_MASK_get", N, 11);
    /* ((0x00000044 + (N) * 512) bits 19:0) field FILT20_TAG1_MASK of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG1_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG1_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_BIT_FILT20_TAG1_MASK_MSK) >> ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_BIT_FILT20_TAG1_MASK_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FILT20_TAG1_MASK_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FILT20_TAG1_MASK_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FILT20_TAG1_MASK_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG1_MASK_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG1_MASK_set", stop_bit, start_bit );
    if (stop_bit > 19) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG1_MASK_set", stop_bit, 19 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG1_MASK_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000044 + (N) * 512) bits 19:0) field FILT20_TAG1_MASK of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG1_2 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 19) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 19;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000044 + (N) * 512) bits 19:0) field FILT20_TAG1_MASK of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG1_2 index N=0..11 */
        eclass_reg_VLANMPLS_FILT20_TAG1_2_array_field_set( b_ptr,
                                                           h_ptr,
                                                           N,
                                                           subfield_mask << (ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_BIT_FILT20_TAG1_MASK_OFF + subfield_offset),
                                                           ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_BIT_FILT20_TAG1_MASK_OFF + subfield_offset,
                                                           value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FILT20_TAG1_MASK_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FILT20_TAG1_MASK_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG1_MASK_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG1_MASK_get", stop_bit, start_bit );
    if (stop_bit > 19) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG1_MASK_get", stop_bit, 19 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 19) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 19;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000044 + (N) * 512) bits 19:0) field FILT20_TAG1_MASK of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG1_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG1_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    field_value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_BIT_FILT20_TAG1_MASK_MSK)
                  >> ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_BIT_FILT20_TAG1_MASK_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_BIT_FILT20_TAG1_MASK_MSK, ECLASS120_REG_VLANMPLS_FILT20_TAG1_2_BIT_FILT20_TAG1_MASK_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG1_MASK_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FILT20_TAG2_VALUE_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FILT20_TAG2_VALUE_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG2_VALUE_set", N, 11);
    if (value > 1048575)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FILT20_TAG2_VALUE_set", value, 1048575);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FILT20_TAG2_VALUE_set", N, value );

    /* ((0x00000048 + (N) * 512) bits 19:0) field FILT20_TAG2_VALUE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG2_1 index N=0..11 */
    eclass_reg_VLANMPLS_FILT20_TAG2_1_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG2_1_BIT_FILT20_TAG2_VALUE_MSK,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG2_1_BIT_FILT20_TAG2_VALUE_OFF,
                                                       value);
}

static INLINE UINT32 eclass_field_FILT20_TAG2_VALUE_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FILT20_TAG2_VALUE_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG2_VALUE_get", N, 11);
    /* ((0x00000048 + (N) * 512) bits 19:0) field FILT20_TAG2_VALUE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG2_1 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG2_1_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG2_1_BIT_FILT20_TAG2_VALUE_MSK) >> ECLASS120_REG_VLANMPLS_FILT20_TAG2_1_BIT_FILT20_TAG2_VALUE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FILT20_TAG2_VALUE_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FILT20_TAG2_VALUE_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FILT20_TAG2_VALUE_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG2_VALUE_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG2_VALUE_set", stop_bit, start_bit );
    if (stop_bit > 19) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG2_VALUE_set", stop_bit, 19 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG2_VALUE_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000048 + (N) * 512) bits 19:0) field FILT20_TAG2_VALUE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG2_1 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 19) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 19;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000048 + (N) * 512) bits 19:0) field FILT20_TAG2_VALUE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG2_1 index N=0..11 */
        eclass_reg_VLANMPLS_FILT20_TAG2_1_array_field_set( b_ptr,
                                                           h_ptr,
                                                           N,
                                                           subfield_mask << (ECLASS120_REG_VLANMPLS_FILT20_TAG2_1_BIT_FILT20_TAG2_VALUE_OFF + subfield_offset),
                                                           ECLASS120_REG_VLANMPLS_FILT20_TAG2_1_BIT_FILT20_TAG2_VALUE_OFF + subfield_offset,
                                                           value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FILT20_TAG2_VALUE_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FILT20_TAG2_VALUE_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG2_VALUE_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG2_VALUE_get", stop_bit, start_bit );
    if (stop_bit > 19) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG2_VALUE_get", stop_bit, 19 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 19) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 19;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000048 + (N) * 512) bits 19:0) field FILT20_TAG2_VALUE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG2_1 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG2_1_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    field_value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG2_1_BIT_FILT20_TAG2_VALUE_MSK)
                  >> ECLASS120_REG_VLANMPLS_FILT20_TAG2_1_BIT_FILT20_TAG2_VALUE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_VLANMPLS_FILT20_TAG2_1_BIT_FILT20_TAG2_VALUE_MSK, ECLASS120_REG_VLANMPLS_FILT20_TAG2_1_BIT_FILT20_TAG2_VALUE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG2_VALUE_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FILT20_TAG2_TYPE_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FILT20_TAG2_TYPE_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG2_TYPE_set", N, 11);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FILT20_TAG2_TYPE_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FILT20_TAG2_TYPE_set", N, value );

    /* ((0x0000004c + (N) * 512) bits 31:28) field FILT20_TAG2_TYPE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG2_2 index N=0..11 */
    eclass_reg_VLANMPLS_FILT20_TAG2_2_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_BIT_FILT20_TAG2_TYPE_MSK,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_BIT_FILT20_TAG2_TYPE_OFF,
                                                       value);
}

static INLINE UINT32 eclass_field_FILT20_TAG2_TYPE_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FILT20_TAG2_TYPE_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG2_TYPE_get", N, 11);
    /* ((0x0000004c + (N) * 512) bits 31:28) field FILT20_TAG2_TYPE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG2_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG2_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_BIT_FILT20_TAG2_TYPE_MSK) >> ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_BIT_FILT20_TAG2_TYPE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FILT20_TAG2_TYPE_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FILT20_TAG2_TYPE_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FILT20_TAG2_TYPE_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG2_TYPE_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG2_TYPE_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG2_TYPE_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG2_TYPE_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000004c + (N) * 512) bits 31:28) field FILT20_TAG2_TYPE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG2_2 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000004c + (N) * 512) bits 31:28) field FILT20_TAG2_TYPE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG2_2 index N=0..11 */
        eclass_reg_VLANMPLS_FILT20_TAG2_2_array_field_set( b_ptr,
                                                           h_ptr,
                                                           N,
                                                           subfield_mask << (ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_BIT_FILT20_TAG2_TYPE_OFF + subfield_offset),
                                                           ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_BIT_FILT20_TAG2_TYPE_OFF + subfield_offset,
                                                           value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FILT20_TAG2_TYPE_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FILT20_TAG2_TYPE_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG2_TYPE_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG2_TYPE_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG2_TYPE_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000004c + (N) * 512) bits 31:28) field FILT20_TAG2_TYPE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG2_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG2_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    field_value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_BIT_FILT20_TAG2_TYPE_MSK)
                  >> ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_BIT_FILT20_TAG2_TYPE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_BIT_FILT20_TAG2_TYPE_MSK, ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_BIT_FILT20_TAG2_TYPE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG2_TYPE_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FILT20_TAG2_INV_set( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FILT20_TAG2_INV_set( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG2_INV_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FILT20_TAG2_INV_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FILT20_TAG2_INV_set", N, value );

    /* ((0x0000004c + (N) * 512) bits 24) field FILT20_TAG2_INV of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG2_2 index N=0..11 */
    eclass_reg_VLANMPLS_FILT20_TAG2_2_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_BIT_FILT20_TAG2_INV_MSK,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_BIT_FILT20_TAG2_INV_OFF,
                                                       value);
}

static INLINE UINT32 eclass_field_FILT20_TAG2_INV_get( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FILT20_TAG2_INV_get( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG2_INV_get", N, 11);
    /* ((0x0000004c + (N) * 512) bits 24) field FILT20_TAG2_INV of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG2_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG2_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_BIT_FILT20_TAG2_INV_MSK) >> ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_BIT_FILT20_TAG2_INV_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FILT20_TAG2_INV_get", N, value );

    return value;
}
static INLINE void eclass_field_FILT20_TAG2_ADDR_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FILT20_TAG2_ADDR_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG2_ADDR_set", N, 11);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FILT20_TAG2_ADDR_set", value, 7);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FILT20_TAG2_ADDR_set", N, value );

    /* ((0x0000004c + (N) * 512) bits 22:20) field FILT20_TAG2_ADDR of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG2_2 index N=0..11 */
    eclass_reg_VLANMPLS_FILT20_TAG2_2_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_BIT_FILT20_TAG2_ADDR_MSK,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_BIT_FILT20_TAG2_ADDR_OFF,
                                                       value);
}

static INLINE UINT32 eclass_field_FILT20_TAG2_ADDR_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FILT20_TAG2_ADDR_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG2_ADDR_get", N, 11);
    /* ((0x0000004c + (N) * 512) bits 22:20) field FILT20_TAG2_ADDR of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG2_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG2_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_BIT_FILT20_TAG2_ADDR_MSK) >> ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_BIT_FILT20_TAG2_ADDR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FILT20_TAG2_ADDR_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FILT20_TAG2_ADDR_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FILT20_TAG2_ADDR_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG2_ADDR_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG2_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG2_ADDR_set", stop_bit, 2 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG2_ADDR_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000004c + (N) * 512) bits 22:20) field FILT20_TAG2_ADDR of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG2_2 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000004c + (N) * 512) bits 22:20) field FILT20_TAG2_ADDR of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG2_2 index N=0..11 */
        eclass_reg_VLANMPLS_FILT20_TAG2_2_array_field_set( b_ptr,
                                                           h_ptr,
                                                           N,
                                                           subfield_mask << (ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_BIT_FILT20_TAG2_ADDR_OFF + subfield_offset),
                                                           ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_BIT_FILT20_TAG2_ADDR_OFF + subfield_offset,
                                                           value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FILT20_TAG2_ADDR_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FILT20_TAG2_ADDR_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG2_ADDR_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG2_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG2_ADDR_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000004c + (N) * 512) bits 22:20) field FILT20_TAG2_ADDR of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG2_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG2_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    field_value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_BIT_FILT20_TAG2_ADDR_MSK)
                  >> ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_BIT_FILT20_TAG2_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_BIT_FILT20_TAG2_ADDR_MSK, ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_BIT_FILT20_TAG2_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG2_ADDR_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FILT20_TAG2_MASK_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FILT20_TAG2_MASK_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG2_MASK_set", N, 11);
    if (value > 1048575)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FILT20_TAG2_MASK_set", value, 1048575);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FILT20_TAG2_MASK_set", N, value );

    /* ((0x0000004c + (N) * 512) bits 19:0) field FILT20_TAG2_MASK of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG2_2 index N=0..11 */
    eclass_reg_VLANMPLS_FILT20_TAG2_2_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_BIT_FILT20_TAG2_MASK_MSK,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_BIT_FILT20_TAG2_MASK_OFF,
                                                       value);
}

static INLINE UINT32 eclass_field_FILT20_TAG2_MASK_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FILT20_TAG2_MASK_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG2_MASK_get", N, 11);
    /* ((0x0000004c + (N) * 512) bits 19:0) field FILT20_TAG2_MASK of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG2_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG2_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_BIT_FILT20_TAG2_MASK_MSK) >> ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_BIT_FILT20_TAG2_MASK_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FILT20_TAG2_MASK_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FILT20_TAG2_MASK_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FILT20_TAG2_MASK_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG2_MASK_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG2_MASK_set", stop_bit, start_bit );
    if (stop_bit > 19) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG2_MASK_set", stop_bit, 19 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG2_MASK_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000004c + (N) * 512) bits 19:0) field FILT20_TAG2_MASK of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG2_2 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 19) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 19;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000004c + (N) * 512) bits 19:0) field FILT20_TAG2_MASK of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG2_2 index N=0..11 */
        eclass_reg_VLANMPLS_FILT20_TAG2_2_array_field_set( b_ptr,
                                                           h_ptr,
                                                           N,
                                                           subfield_mask << (ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_BIT_FILT20_TAG2_MASK_OFF + subfield_offset),
                                                           ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_BIT_FILT20_TAG2_MASK_OFF + subfield_offset,
                                                           value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FILT20_TAG2_MASK_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FILT20_TAG2_MASK_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG2_MASK_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG2_MASK_get", stop_bit, start_bit );
    if (stop_bit > 19) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG2_MASK_get", stop_bit, 19 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 19) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 19;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000004c + (N) * 512) bits 19:0) field FILT20_TAG2_MASK of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG2_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG2_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    field_value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_BIT_FILT20_TAG2_MASK_MSK)
                  >> ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_BIT_FILT20_TAG2_MASK_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_BIT_FILT20_TAG2_MASK_MSK, ECLASS120_REG_VLANMPLS_FILT20_TAG2_2_BIT_FILT20_TAG2_MASK_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG2_MASK_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FILT20_TAG3_VALUE_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FILT20_TAG3_VALUE_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG3_VALUE_set", N, 11);
    if (value > 1048575)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FILT20_TAG3_VALUE_set", value, 1048575);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FILT20_TAG3_VALUE_set", N, value );

    /* ((0x00000050 + (N) * 512) bits 19:0) field FILT20_TAG3_VALUE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG3_1 index N=0..11 */
    eclass_reg_VLANMPLS_FILT20_TAG3_1_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG3_1_BIT_FILT20_TAG3_VALUE_MSK,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG3_1_BIT_FILT20_TAG3_VALUE_OFF,
                                                       value);
}

static INLINE UINT32 eclass_field_FILT20_TAG3_VALUE_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FILT20_TAG3_VALUE_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG3_VALUE_get", N, 11);
    /* ((0x00000050 + (N) * 512) bits 19:0) field FILT20_TAG3_VALUE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG3_1 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG3_1_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG3_1_BIT_FILT20_TAG3_VALUE_MSK) >> ECLASS120_REG_VLANMPLS_FILT20_TAG3_1_BIT_FILT20_TAG3_VALUE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FILT20_TAG3_VALUE_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FILT20_TAG3_VALUE_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FILT20_TAG3_VALUE_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG3_VALUE_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG3_VALUE_set", stop_bit, start_bit );
    if (stop_bit > 19) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG3_VALUE_set", stop_bit, 19 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG3_VALUE_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000050 + (N) * 512) bits 19:0) field FILT20_TAG3_VALUE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG3_1 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 19) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 19;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000050 + (N) * 512) bits 19:0) field FILT20_TAG3_VALUE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG3_1 index N=0..11 */
        eclass_reg_VLANMPLS_FILT20_TAG3_1_array_field_set( b_ptr,
                                                           h_ptr,
                                                           N,
                                                           subfield_mask << (ECLASS120_REG_VLANMPLS_FILT20_TAG3_1_BIT_FILT20_TAG3_VALUE_OFF + subfield_offset),
                                                           ECLASS120_REG_VLANMPLS_FILT20_TAG3_1_BIT_FILT20_TAG3_VALUE_OFF + subfield_offset,
                                                           value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FILT20_TAG3_VALUE_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FILT20_TAG3_VALUE_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG3_VALUE_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG3_VALUE_get", stop_bit, start_bit );
    if (stop_bit > 19) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG3_VALUE_get", stop_bit, 19 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 19) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 19;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000050 + (N) * 512) bits 19:0) field FILT20_TAG3_VALUE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG3_1 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG3_1_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    field_value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG3_1_BIT_FILT20_TAG3_VALUE_MSK)
                  >> ECLASS120_REG_VLANMPLS_FILT20_TAG3_1_BIT_FILT20_TAG3_VALUE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_VLANMPLS_FILT20_TAG3_1_BIT_FILT20_TAG3_VALUE_MSK, ECLASS120_REG_VLANMPLS_FILT20_TAG3_1_BIT_FILT20_TAG3_VALUE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG3_VALUE_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FILT20_TAG3_TYPE_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FILT20_TAG3_TYPE_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG3_TYPE_set", N, 11);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FILT20_TAG3_TYPE_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FILT20_TAG3_TYPE_set", N, value );

    /* ((0x00000054 + (N) * 512) bits 31:28) field FILT20_TAG3_TYPE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG3_2 index N=0..11 */
    eclass_reg_VLANMPLS_FILT20_TAG3_2_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_BIT_FILT20_TAG3_TYPE_MSK,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_BIT_FILT20_TAG3_TYPE_OFF,
                                                       value);
}

static INLINE UINT32 eclass_field_FILT20_TAG3_TYPE_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FILT20_TAG3_TYPE_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG3_TYPE_get", N, 11);
    /* ((0x00000054 + (N) * 512) bits 31:28) field FILT20_TAG3_TYPE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG3_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG3_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_BIT_FILT20_TAG3_TYPE_MSK) >> ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_BIT_FILT20_TAG3_TYPE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FILT20_TAG3_TYPE_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FILT20_TAG3_TYPE_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FILT20_TAG3_TYPE_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG3_TYPE_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG3_TYPE_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG3_TYPE_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG3_TYPE_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000054 + (N) * 512) bits 31:28) field FILT20_TAG3_TYPE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG3_2 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000054 + (N) * 512) bits 31:28) field FILT20_TAG3_TYPE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG3_2 index N=0..11 */
        eclass_reg_VLANMPLS_FILT20_TAG3_2_array_field_set( b_ptr,
                                                           h_ptr,
                                                           N,
                                                           subfield_mask << (ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_BIT_FILT20_TAG3_TYPE_OFF + subfield_offset),
                                                           ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_BIT_FILT20_TAG3_TYPE_OFF + subfield_offset,
                                                           value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FILT20_TAG3_TYPE_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FILT20_TAG3_TYPE_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG3_TYPE_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG3_TYPE_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG3_TYPE_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000054 + (N) * 512) bits 31:28) field FILT20_TAG3_TYPE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG3_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG3_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    field_value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_BIT_FILT20_TAG3_TYPE_MSK)
                  >> ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_BIT_FILT20_TAG3_TYPE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_BIT_FILT20_TAG3_TYPE_MSK, ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_BIT_FILT20_TAG3_TYPE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG3_TYPE_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FILT20_TAG3_INV_set( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FILT20_TAG3_INV_set( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG3_INV_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FILT20_TAG3_INV_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FILT20_TAG3_INV_set", N, value );

    /* ((0x00000054 + (N) * 512) bits 24) field FILT20_TAG3_INV of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG3_2 index N=0..11 */
    eclass_reg_VLANMPLS_FILT20_TAG3_2_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_BIT_FILT20_TAG3_INV_MSK,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_BIT_FILT20_TAG3_INV_OFF,
                                                       value);
}

static INLINE UINT32 eclass_field_FILT20_TAG3_INV_get( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FILT20_TAG3_INV_get( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG3_INV_get", N, 11);
    /* ((0x00000054 + (N) * 512) bits 24) field FILT20_TAG3_INV of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG3_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG3_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_BIT_FILT20_TAG3_INV_MSK) >> ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_BIT_FILT20_TAG3_INV_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FILT20_TAG3_INV_get", N, value );

    return value;
}
static INLINE void eclass_field_FILT20_TAG3_ADDR_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FILT20_TAG3_ADDR_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG3_ADDR_set", N, 11);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FILT20_TAG3_ADDR_set", value, 7);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FILT20_TAG3_ADDR_set", N, value );

    /* ((0x00000054 + (N) * 512) bits 22:20) field FILT20_TAG3_ADDR of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG3_2 index N=0..11 */
    eclass_reg_VLANMPLS_FILT20_TAG3_2_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_BIT_FILT20_TAG3_ADDR_MSK,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_BIT_FILT20_TAG3_ADDR_OFF,
                                                       value);
}

static INLINE UINT32 eclass_field_FILT20_TAG3_ADDR_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FILT20_TAG3_ADDR_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG3_ADDR_get", N, 11);
    /* ((0x00000054 + (N) * 512) bits 22:20) field FILT20_TAG3_ADDR of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG3_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG3_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_BIT_FILT20_TAG3_ADDR_MSK) >> ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_BIT_FILT20_TAG3_ADDR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FILT20_TAG3_ADDR_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FILT20_TAG3_ADDR_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FILT20_TAG3_ADDR_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG3_ADDR_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG3_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG3_ADDR_set", stop_bit, 2 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG3_ADDR_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000054 + (N) * 512) bits 22:20) field FILT20_TAG3_ADDR of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG3_2 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000054 + (N) * 512) bits 22:20) field FILT20_TAG3_ADDR of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG3_2 index N=0..11 */
        eclass_reg_VLANMPLS_FILT20_TAG3_2_array_field_set( b_ptr,
                                                           h_ptr,
                                                           N,
                                                           subfield_mask << (ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_BIT_FILT20_TAG3_ADDR_OFF + subfield_offset),
                                                           ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_BIT_FILT20_TAG3_ADDR_OFF + subfield_offset,
                                                           value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FILT20_TAG3_ADDR_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FILT20_TAG3_ADDR_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG3_ADDR_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG3_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG3_ADDR_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000054 + (N) * 512) bits 22:20) field FILT20_TAG3_ADDR of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG3_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG3_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    field_value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_BIT_FILT20_TAG3_ADDR_MSK)
                  >> ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_BIT_FILT20_TAG3_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_BIT_FILT20_TAG3_ADDR_MSK, ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_BIT_FILT20_TAG3_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG3_ADDR_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FILT20_TAG3_MASK_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FILT20_TAG3_MASK_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG3_MASK_set", N, 11);
    if (value > 1048575)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FILT20_TAG3_MASK_set", value, 1048575);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FILT20_TAG3_MASK_set", N, value );

    /* ((0x00000054 + (N) * 512) bits 19:0) field FILT20_TAG3_MASK of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG3_2 index N=0..11 */
    eclass_reg_VLANMPLS_FILT20_TAG3_2_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_BIT_FILT20_TAG3_MASK_MSK,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_BIT_FILT20_TAG3_MASK_OFF,
                                                       value);
}

static INLINE UINT32 eclass_field_FILT20_TAG3_MASK_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FILT20_TAG3_MASK_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG3_MASK_get", N, 11);
    /* ((0x00000054 + (N) * 512) bits 19:0) field FILT20_TAG3_MASK of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG3_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG3_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_BIT_FILT20_TAG3_MASK_MSK) >> ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_BIT_FILT20_TAG3_MASK_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FILT20_TAG3_MASK_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FILT20_TAG3_MASK_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FILT20_TAG3_MASK_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG3_MASK_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG3_MASK_set", stop_bit, start_bit );
    if (stop_bit > 19) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG3_MASK_set", stop_bit, 19 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG3_MASK_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000054 + (N) * 512) bits 19:0) field FILT20_TAG3_MASK of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG3_2 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 19) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 19;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000054 + (N) * 512) bits 19:0) field FILT20_TAG3_MASK of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG3_2 index N=0..11 */
        eclass_reg_VLANMPLS_FILT20_TAG3_2_array_field_set( b_ptr,
                                                           h_ptr,
                                                           N,
                                                           subfield_mask << (ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_BIT_FILT20_TAG3_MASK_OFF + subfield_offset),
                                                           ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_BIT_FILT20_TAG3_MASK_OFF + subfield_offset,
                                                           value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FILT20_TAG3_MASK_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FILT20_TAG3_MASK_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG3_MASK_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG3_MASK_get", stop_bit, start_bit );
    if (stop_bit > 19) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG3_MASK_get", stop_bit, 19 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 19) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 19;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000054 + (N) * 512) bits 19:0) field FILT20_TAG3_MASK of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG3_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG3_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    field_value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_BIT_FILT20_TAG3_MASK_MSK)
                  >> ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_BIT_FILT20_TAG3_MASK_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_BIT_FILT20_TAG3_MASK_MSK, ECLASS120_REG_VLANMPLS_FILT20_TAG3_2_BIT_FILT20_TAG3_MASK_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG3_MASK_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FILT20_TAG4_VALUE_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FILT20_TAG4_VALUE_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG4_VALUE_set", N, 11);
    if (value > 1048575)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FILT20_TAG4_VALUE_set", value, 1048575);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FILT20_TAG4_VALUE_set", N, value );

    /* ((0x00000058 + (N) * 512) bits 19:0) field FILT20_TAG4_VALUE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG4_1 index N=0..11 */
    eclass_reg_VLANMPLS_FILT20_TAG4_1_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG4_1_BIT_FILT20_TAG4_VALUE_MSK,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG4_1_BIT_FILT20_TAG4_VALUE_OFF,
                                                       value);
}

static INLINE UINT32 eclass_field_FILT20_TAG4_VALUE_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FILT20_TAG4_VALUE_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG4_VALUE_get", N, 11);
    /* ((0x00000058 + (N) * 512) bits 19:0) field FILT20_TAG4_VALUE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG4_1 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG4_1_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG4_1_BIT_FILT20_TAG4_VALUE_MSK) >> ECLASS120_REG_VLANMPLS_FILT20_TAG4_1_BIT_FILT20_TAG4_VALUE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FILT20_TAG4_VALUE_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FILT20_TAG4_VALUE_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FILT20_TAG4_VALUE_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG4_VALUE_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG4_VALUE_set", stop_bit, start_bit );
    if (stop_bit > 19) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG4_VALUE_set", stop_bit, 19 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG4_VALUE_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000058 + (N) * 512) bits 19:0) field FILT20_TAG4_VALUE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG4_1 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 19) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 19;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000058 + (N) * 512) bits 19:0) field FILT20_TAG4_VALUE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG4_1 index N=0..11 */
        eclass_reg_VLANMPLS_FILT20_TAG4_1_array_field_set( b_ptr,
                                                           h_ptr,
                                                           N,
                                                           subfield_mask << (ECLASS120_REG_VLANMPLS_FILT20_TAG4_1_BIT_FILT20_TAG4_VALUE_OFF + subfield_offset),
                                                           ECLASS120_REG_VLANMPLS_FILT20_TAG4_1_BIT_FILT20_TAG4_VALUE_OFF + subfield_offset,
                                                           value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FILT20_TAG4_VALUE_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FILT20_TAG4_VALUE_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG4_VALUE_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG4_VALUE_get", stop_bit, start_bit );
    if (stop_bit > 19) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG4_VALUE_get", stop_bit, 19 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 19) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 19;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000058 + (N) * 512) bits 19:0) field FILT20_TAG4_VALUE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG4_1 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG4_1_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    field_value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG4_1_BIT_FILT20_TAG4_VALUE_MSK)
                  >> ECLASS120_REG_VLANMPLS_FILT20_TAG4_1_BIT_FILT20_TAG4_VALUE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_VLANMPLS_FILT20_TAG4_1_BIT_FILT20_TAG4_VALUE_MSK, ECLASS120_REG_VLANMPLS_FILT20_TAG4_1_BIT_FILT20_TAG4_VALUE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG4_VALUE_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FILT20_TAG4_TYPE_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FILT20_TAG4_TYPE_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG4_TYPE_set", N, 11);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FILT20_TAG4_TYPE_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FILT20_TAG4_TYPE_set", N, value );

    /* ((0x0000005c + (N) * 512) bits 31:28) field FILT20_TAG4_TYPE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG4_2 index N=0..11 */
    eclass_reg_VLANMPLS_FILT20_TAG4_2_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_BIT_FILT20_TAG4_TYPE_MSK,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_BIT_FILT20_TAG4_TYPE_OFF,
                                                       value);
}

static INLINE UINT32 eclass_field_FILT20_TAG4_TYPE_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FILT20_TAG4_TYPE_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG4_TYPE_get", N, 11);
    /* ((0x0000005c + (N) * 512) bits 31:28) field FILT20_TAG4_TYPE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG4_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG4_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_BIT_FILT20_TAG4_TYPE_MSK) >> ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_BIT_FILT20_TAG4_TYPE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FILT20_TAG4_TYPE_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FILT20_TAG4_TYPE_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FILT20_TAG4_TYPE_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG4_TYPE_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG4_TYPE_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG4_TYPE_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG4_TYPE_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000005c + (N) * 512) bits 31:28) field FILT20_TAG4_TYPE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG4_2 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000005c + (N) * 512) bits 31:28) field FILT20_TAG4_TYPE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG4_2 index N=0..11 */
        eclass_reg_VLANMPLS_FILT20_TAG4_2_array_field_set( b_ptr,
                                                           h_ptr,
                                                           N,
                                                           subfield_mask << (ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_BIT_FILT20_TAG4_TYPE_OFF + subfield_offset),
                                                           ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_BIT_FILT20_TAG4_TYPE_OFF + subfield_offset,
                                                           value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FILT20_TAG4_TYPE_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FILT20_TAG4_TYPE_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG4_TYPE_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG4_TYPE_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG4_TYPE_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000005c + (N) * 512) bits 31:28) field FILT20_TAG4_TYPE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG4_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG4_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    field_value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_BIT_FILT20_TAG4_TYPE_MSK)
                  >> ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_BIT_FILT20_TAG4_TYPE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_BIT_FILT20_TAG4_TYPE_MSK, ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_BIT_FILT20_TAG4_TYPE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG4_TYPE_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FILT20_TAG4_INV_set( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FILT20_TAG4_INV_set( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG4_INV_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FILT20_TAG4_INV_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FILT20_TAG4_INV_set", N, value );

    /* ((0x0000005c + (N) * 512) bits 24) field FILT20_TAG4_INV of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG4_2 index N=0..11 */
    eclass_reg_VLANMPLS_FILT20_TAG4_2_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_BIT_FILT20_TAG4_INV_MSK,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_BIT_FILT20_TAG4_INV_OFF,
                                                       value);
}

static INLINE UINT32 eclass_field_FILT20_TAG4_INV_get( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FILT20_TAG4_INV_get( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG4_INV_get", N, 11);
    /* ((0x0000005c + (N) * 512) bits 24) field FILT20_TAG4_INV of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG4_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG4_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_BIT_FILT20_TAG4_INV_MSK) >> ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_BIT_FILT20_TAG4_INV_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FILT20_TAG4_INV_get", N, value );

    return value;
}
static INLINE void eclass_field_FILT20_TAG4_ADDR_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FILT20_TAG4_ADDR_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG4_ADDR_set", N, 11);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FILT20_TAG4_ADDR_set", value, 7);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FILT20_TAG4_ADDR_set", N, value );

    /* ((0x0000005c + (N) * 512) bits 22:20) field FILT20_TAG4_ADDR of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG4_2 index N=0..11 */
    eclass_reg_VLANMPLS_FILT20_TAG4_2_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_BIT_FILT20_TAG4_ADDR_MSK,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_BIT_FILT20_TAG4_ADDR_OFF,
                                                       value);
}

static INLINE UINT32 eclass_field_FILT20_TAG4_ADDR_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FILT20_TAG4_ADDR_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG4_ADDR_get", N, 11);
    /* ((0x0000005c + (N) * 512) bits 22:20) field FILT20_TAG4_ADDR of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG4_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG4_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_BIT_FILT20_TAG4_ADDR_MSK) >> ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_BIT_FILT20_TAG4_ADDR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FILT20_TAG4_ADDR_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FILT20_TAG4_ADDR_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FILT20_TAG4_ADDR_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG4_ADDR_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG4_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG4_ADDR_set", stop_bit, 2 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG4_ADDR_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000005c + (N) * 512) bits 22:20) field FILT20_TAG4_ADDR of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG4_2 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000005c + (N) * 512) bits 22:20) field FILT20_TAG4_ADDR of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG4_2 index N=0..11 */
        eclass_reg_VLANMPLS_FILT20_TAG4_2_array_field_set( b_ptr,
                                                           h_ptr,
                                                           N,
                                                           subfield_mask << (ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_BIT_FILT20_TAG4_ADDR_OFF + subfield_offset),
                                                           ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_BIT_FILT20_TAG4_ADDR_OFF + subfield_offset,
                                                           value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FILT20_TAG4_ADDR_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FILT20_TAG4_ADDR_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG4_ADDR_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG4_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG4_ADDR_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000005c + (N) * 512) bits 22:20) field FILT20_TAG4_ADDR of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG4_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG4_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    field_value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_BIT_FILT20_TAG4_ADDR_MSK)
                  >> ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_BIT_FILT20_TAG4_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_BIT_FILT20_TAG4_ADDR_MSK, ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_BIT_FILT20_TAG4_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG4_ADDR_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FILT20_TAG4_MASK_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FILT20_TAG4_MASK_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG4_MASK_set", N, 11);
    if (value > 1048575)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FILT20_TAG4_MASK_set", value, 1048575);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FILT20_TAG4_MASK_set", N, value );

    /* ((0x0000005c + (N) * 512) bits 19:0) field FILT20_TAG4_MASK of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG4_2 index N=0..11 */
    eclass_reg_VLANMPLS_FILT20_TAG4_2_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_BIT_FILT20_TAG4_MASK_MSK,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_BIT_FILT20_TAG4_MASK_OFF,
                                                       value);
}

static INLINE UINT32 eclass_field_FILT20_TAG4_MASK_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FILT20_TAG4_MASK_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG4_MASK_get", N, 11);
    /* ((0x0000005c + (N) * 512) bits 19:0) field FILT20_TAG4_MASK of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG4_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG4_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_BIT_FILT20_TAG4_MASK_MSK) >> ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_BIT_FILT20_TAG4_MASK_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FILT20_TAG4_MASK_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FILT20_TAG4_MASK_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FILT20_TAG4_MASK_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG4_MASK_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG4_MASK_set", stop_bit, start_bit );
    if (stop_bit > 19) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG4_MASK_set", stop_bit, 19 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG4_MASK_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000005c + (N) * 512) bits 19:0) field FILT20_TAG4_MASK of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG4_2 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 19) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 19;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000005c + (N) * 512) bits 19:0) field FILT20_TAG4_MASK of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG4_2 index N=0..11 */
        eclass_reg_VLANMPLS_FILT20_TAG4_2_array_field_set( b_ptr,
                                                           h_ptr,
                                                           N,
                                                           subfield_mask << (ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_BIT_FILT20_TAG4_MASK_OFF + subfield_offset),
                                                           ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_BIT_FILT20_TAG4_MASK_OFF + subfield_offset,
                                                           value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FILT20_TAG4_MASK_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FILT20_TAG4_MASK_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG4_MASK_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG4_MASK_get", stop_bit, start_bit );
    if (stop_bit > 19) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG4_MASK_get", stop_bit, 19 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 19) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 19;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000005c + (N) * 512) bits 19:0) field FILT20_TAG4_MASK of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG4_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG4_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    field_value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_BIT_FILT20_TAG4_MASK_MSK)
                  >> ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_BIT_FILT20_TAG4_MASK_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_BIT_FILT20_TAG4_MASK_MSK, ECLASS120_REG_VLANMPLS_FILT20_TAG4_2_BIT_FILT20_TAG4_MASK_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG4_MASK_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FILT20_TAG5_VALUE_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FILT20_TAG5_VALUE_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG5_VALUE_set", N, 11);
    if (value > 1048575)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FILT20_TAG5_VALUE_set", value, 1048575);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FILT20_TAG5_VALUE_set", N, value );

    /* ((0x00000060 + (N) * 512) bits 19:0) field FILT20_TAG5_VALUE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG5_1 index N=0..11 */
    eclass_reg_VLANMPLS_FILT20_TAG5_1_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG5_1_BIT_FILT20_TAG5_VALUE_MSK,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG5_1_BIT_FILT20_TAG5_VALUE_OFF,
                                                       value);
}

static INLINE UINT32 eclass_field_FILT20_TAG5_VALUE_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FILT20_TAG5_VALUE_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG5_VALUE_get", N, 11);
    /* ((0x00000060 + (N) * 512) bits 19:0) field FILT20_TAG5_VALUE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG5_1 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG5_1_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG5_1_BIT_FILT20_TAG5_VALUE_MSK) >> ECLASS120_REG_VLANMPLS_FILT20_TAG5_1_BIT_FILT20_TAG5_VALUE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FILT20_TAG5_VALUE_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FILT20_TAG5_VALUE_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FILT20_TAG5_VALUE_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG5_VALUE_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG5_VALUE_set", stop_bit, start_bit );
    if (stop_bit > 19) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG5_VALUE_set", stop_bit, 19 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG5_VALUE_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000060 + (N) * 512) bits 19:0) field FILT20_TAG5_VALUE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG5_1 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 19) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 19;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000060 + (N) * 512) bits 19:0) field FILT20_TAG5_VALUE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG5_1 index N=0..11 */
        eclass_reg_VLANMPLS_FILT20_TAG5_1_array_field_set( b_ptr,
                                                           h_ptr,
                                                           N,
                                                           subfield_mask << (ECLASS120_REG_VLANMPLS_FILT20_TAG5_1_BIT_FILT20_TAG5_VALUE_OFF + subfield_offset),
                                                           ECLASS120_REG_VLANMPLS_FILT20_TAG5_1_BIT_FILT20_TAG5_VALUE_OFF + subfield_offset,
                                                           value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FILT20_TAG5_VALUE_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FILT20_TAG5_VALUE_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG5_VALUE_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG5_VALUE_get", stop_bit, start_bit );
    if (stop_bit > 19) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG5_VALUE_get", stop_bit, 19 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 19) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 19;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000060 + (N) * 512) bits 19:0) field FILT20_TAG5_VALUE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG5_1 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG5_1_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    field_value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG5_1_BIT_FILT20_TAG5_VALUE_MSK)
                  >> ECLASS120_REG_VLANMPLS_FILT20_TAG5_1_BIT_FILT20_TAG5_VALUE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_VLANMPLS_FILT20_TAG5_1_BIT_FILT20_TAG5_VALUE_MSK, ECLASS120_REG_VLANMPLS_FILT20_TAG5_1_BIT_FILT20_TAG5_VALUE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG5_VALUE_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FILT20_TAG5_TYPE_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FILT20_TAG5_TYPE_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG5_TYPE_set", N, 11);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FILT20_TAG5_TYPE_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FILT20_TAG5_TYPE_set", N, value );

    /* ((0x00000064 + (N) * 512) bits 31:28) field FILT20_TAG5_TYPE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG5_2 index N=0..11 */
    eclass_reg_VLANMPLS_FILT20_TAG5_2_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_BIT_FILT20_TAG5_TYPE_MSK,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_BIT_FILT20_TAG5_TYPE_OFF,
                                                       value);
}

static INLINE UINT32 eclass_field_FILT20_TAG5_TYPE_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FILT20_TAG5_TYPE_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG5_TYPE_get", N, 11);
    /* ((0x00000064 + (N) * 512) bits 31:28) field FILT20_TAG5_TYPE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG5_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG5_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_BIT_FILT20_TAG5_TYPE_MSK) >> ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_BIT_FILT20_TAG5_TYPE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FILT20_TAG5_TYPE_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FILT20_TAG5_TYPE_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FILT20_TAG5_TYPE_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG5_TYPE_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG5_TYPE_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG5_TYPE_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG5_TYPE_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000064 + (N) * 512) bits 31:28) field FILT20_TAG5_TYPE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG5_2 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000064 + (N) * 512) bits 31:28) field FILT20_TAG5_TYPE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG5_2 index N=0..11 */
        eclass_reg_VLANMPLS_FILT20_TAG5_2_array_field_set( b_ptr,
                                                           h_ptr,
                                                           N,
                                                           subfield_mask << (ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_BIT_FILT20_TAG5_TYPE_OFF + subfield_offset),
                                                           ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_BIT_FILT20_TAG5_TYPE_OFF + subfield_offset,
                                                           value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FILT20_TAG5_TYPE_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FILT20_TAG5_TYPE_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG5_TYPE_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG5_TYPE_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG5_TYPE_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000064 + (N) * 512) bits 31:28) field FILT20_TAG5_TYPE of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG5_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG5_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    field_value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_BIT_FILT20_TAG5_TYPE_MSK)
                  >> ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_BIT_FILT20_TAG5_TYPE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_BIT_FILT20_TAG5_TYPE_MSK, ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_BIT_FILT20_TAG5_TYPE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG5_TYPE_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FILT20_TAG5_INV_set( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FILT20_TAG5_INV_set( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG5_INV_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FILT20_TAG5_INV_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FILT20_TAG5_INV_set", N, value );

    /* ((0x00000064 + (N) * 512) bits 24) field FILT20_TAG5_INV of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG5_2 index N=0..11 */
    eclass_reg_VLANMPLS_FILT20_TAG5_2_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_BIT_FILT20_TAG5_INV_MSK,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_BIT_FILT20_TAG5_INV_OFF,
                                                       value);
}

static INLINE UINT32 eclass_field_FILT20_TAG5_INV_get( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FILT20_TAG5_INV_get( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG5_INV_get", N, 11);
    /* ((0x00000064 + (N) * 512) bits 24) field FILT20_TAG5_INV of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG5_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG5_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_BIT_FILT20_TAG5_INV_MSK) >> ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_BIT_FILT20_TAG5_INV_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FILT20_TAG5_INV_get", N, value );

    return value;
}
static INLINE void eclass_field_FILT20_TAG5_ADDR_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FILT20_TAG5_ADDR_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG5_ADDR_set", N, 11);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FILT20_TAG5_ADDR_set", value, 7);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FILT20_TAG5_ADDR_set", N, value );

    /* ((0x00000064 + (N) * 512) bits 22:20) field FILT20_TAG5_ADDR of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG5_2 index N=0..11 */
    eclass_reg_VLANMPLS_FILT20_TAG5_2_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_BIT_FILT20_TAG5_ADDR_MSK,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_BIT_FILT20_TAG5_ADDR_OFF,
                                                       value);
}

static INLINE UINT32 eclass_field_FILT20_TAG5_ADDR_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FILT20_TAG5_ADDR_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG5_ADDR_get", N, 11);
    /* ((0x00000064 + (N) * 512) bits 22:20) field FILT20_TAG5_ADDR of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG5_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG5_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_BIT_FILT20_TAG5_ADDR_MSK) >> ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_BIT_FILT20_TAG5_ADDR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FILT20_TAG5_ADDR_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FILT20_TAG5_ADDR_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FILT20_TAG5_ADDR_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG5_ADDR_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG5_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG5_ADDR_set", stop_bit, 2 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG5_ADDR_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000064 + (N) * 512) bits 22:20) field FILT20_TAG5_ADDR of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG5_2 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000064 + (N) * 512) bits 22:20) field FILT20_TAG5_ADDR of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG5_2 index N=0..11 */
        eclass_reg_VLANMPLS_FILT20_TAG5_2_array_field_set( b_ptr,
                                                           h_ptr,
                                                           N,
                                                           subfield_mask << (ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_BIT_FILT20_TAG5_ADDR_OFF + subfield_offset),
                                                           ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_BIT_FILT20_TAG5_ADDR_OFF + subfield_offset,
                                                           value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FILT20_TAG5_ADDR_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FILT20_TAG5_ADDR_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG5_ADDR_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG5_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG5_ADDR_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000064 + (N) * 512) bits 22:20) field FILT20_TAG5_ADDR of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG5_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG5_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    field_value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_BIT_FILT20_TAG5_ADDR_MSK)
                  >> ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_BIT_FILT20_TAG5_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_BIT_FILT20_TAG5_ADDR_MSK, ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_BIT_FILT20_TAG5_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG5_ADDR_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FILT20_TAG5_MASK_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FILT20_TAG5_MASK_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG5_MASK_set", N, 11);
    if (value > 1048575)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FILT20_TAG5_MASK_set", value, 1048575);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FILT20_TAG5_MASK_set", N, value );

    /* ((0x00000064 + (N) * 512) bits 19:0) field FILT20_TAG5_MASK of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG5_2 index N=0..11 */
    eclass_reg_VLANMPLS_FILT20_TAG5_2_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_BIT_FILT20_TAG5_MASK_MSK,
                                                       ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_BIT_FILT20_TAG5_MASK_OFF,
                                                       value);
}

static INLINE UINT32 eclass_field_FILT20_TAG5_MASK_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FILT20_TAG5_MASK_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FILT20_TAG5_MASK_get", N, 11);
    /* ((0x00000064 + (N) * 512) bits 19:0) field FILT20_TAG5_MASK of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG5_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG5_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_BIT_FILT20_TAG5_MASK_MSK) >> ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_BIT_FILT20_TAG5_MASK_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FILT20_TAG5_MASK_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FILT20_TAG5_MASK_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FILT20_TAG5_MASK_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG5_MASK_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG5_MASK_set", stop_bit, start_bit );
    if (stop_bit > 19) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG5_MASK_set", stop_bit, 19 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG5_MASK_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000064 + (N) * 512) bits 19:0) field FILT20_TAG5_MASK of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG5_2 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 19) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 19;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000064 + (N) * 512) bits 19:0) field FILT20_TAG5_MASK of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG5_2 index N=0..11 */
        eclass_reg_VLANMPLS_FILT20_TAG5_2_array_field_set( b_ptr,
                                                           h_ptr,
                                                           N,
                                                           subfield_mask << (ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_BIT_FILT20_TAG5_MASK_OFF + subfield_offset),
                                                           ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_BIT_FILT20_TAG5_MASK_OFF + subfield_offset,
                                                           value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FILT20_TAG5_MASK_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FILT20_TAG5_MASK_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FILT20_TAG5_MASK_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FILT20_TAG5_MASK_get", stop_bit, start_bit );
    if (stop_bit > 19) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FILT20_TAG5_MASK_get", stop_bit, 19 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 19) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 19;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000064 + (N) * 512) bits 19:0) field FILT20_TAG5_MASK of register PMC_ECLASS120_REG_VLANMPLS_FILT20_TAG5_2 index N=0..11 */
    reg_value = eclass_reg_VLANMPLS_FILT20_TAG5_2_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    field_value = (reg_value & ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_BIT_FILT20_TAG5_MASK_MSK)
                  >> ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_BIT_FILT20_TAG5_MASK_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_BIT_FILT20_TAG5_MASK_MSK, ECLASS120_REG_VLANMPLS_FILT20_TAG5_2_BIT_FILT20_TAG5_MASK_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FILT20_TAG5_MASK_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_MANAGEMENT_VLAN_TCI_VLANID_set( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_MANAGEMENT_VLAN_TCI_VLANID_set( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_MANAGEMENT_VLAN_TCI_VLANID_set", N, 11);
    if (value > 4095)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_MANAGEMENT_VLAN_TCI_VLANID_set", value, 4095);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_MANAGEMENT_VLAN_TCI_VLANID_set", N, value );

    /* ((0x00000070 + (N) * 512) bits 27:16) field MANAGEMENT_VLAN_TCI_VLANID of register PMC_ECLASS120_REG_MAN_VLAN_CFG index N=0..11 */
    eclass_reg_MAN_VLAN_CFG_array_field_set( b_ptr,
                                             h_ptr,
                                             N,
                                             ECLASS120_REG_MAN_VLAN_CFG_BIT_MANAGEMENT_VLAN_TCI_VLANID_MSK,
                                             ECLASS120_REG_MAN_VLAN_CFG_BIT_MANAGEMENT_VLAN_TCI_VLANID_OFF,
                                             value);
}

static INLINE UINT32 eclass_field_MANAGEMENT_VLAN_TCI_VLANID_get( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_MANAGEMENT_VLAN_TCI_VLANID_get( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_MANAGEMENT_VLAN_TCI_VLANID_get", N, 11);
    /* ((0x00000070 + (N) * 512) bits 27:16) field MANAGEMENT_VLAN_TCI_VLANID of register PMC_ECLASS120_REG_MAN_VLAN_CFG index N=0..11 */
    reg_value = eclass_reg_MAN_VLAN_CFG_array_read( b_ptr,
                                                    h_ptr,
                                                    N);
    value = (reg_value & ECLASS120_REG_MAN_VLAN_CFG_BIT_MANAGEMENT_VLAN_TCI_VLANID_MSK) >> ECLASS120_REG_MAN_VLAN_CFG_BIT_MANAGEMENT_VLAN_TCI_VLANID_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_MANAGEMENT_VLAN_TCI_VLANID_get", N, value );

    return value;
}
static INLINE void eclass_field_range_MANAGEMENT_VLAN_TCI_VLANID_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_MANAGEMENT_VLAN_TCI_VLANID_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_MANAGEMENT_VLAN_TCI_VLANID_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_MANAGEMENT_VLAN_TCI_VLANID_set", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_MANAGEMENT_VLAN_TCI_VLANID_set", stop_bit, 11 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_MANAGEMENT_VLAN_TCI_VLANID_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000070 + (N) * 512) bits 27:16) field MANAGEMENT_VLAN_TCI_VLANID of register PMC_ECLASS120_REG_MAN_VLAN_CFG index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 11) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 11;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000070 + (N) * 512) bits 27:16) field MANAGEMENT_VLAN_TCI_VLANID of register PMC_ECLASS120_REG_MAN_VLAN_CFG index N=0..11 */
        eclass_reg_MAN_VLAN_CFG_array_field_set( b_ptr,
                                                 h_ptr,
                                                 N,
                                                 subfield_mask << (ECLASS120_REG_MAN_VLAN_CFG_BIT_MANAGEMENT_VLAN_TCI_VLANID_OFF + subfield_offset),
                                                 ECLASS120_REG_MAN_VLAN_CFG_BIT_MANAGEMENT_VLAN_TCI_VLANID_OFF + subfield_offset,
                                                 value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_MANAGEMENT_VLAN_TCI_VLANID_get( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_MANAGEMENT_VLAN_TCI_VLANID_get( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_MANAGEMENT_VLAN_TCI_VLANID_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_MANAGEMENT_VLAN_TCI_VLANID_get", stop_bit, start_bit );
    if (stop_bit > 11) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_MANAGEMENT_VLAN_TCI_VLANID_get", stop_bit, 11 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 11) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 11;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000070 + (N) * 512) bits 27:16) field MANAGEMENT_VLAN_TCI_VLANID of register PMC_ECLASS120_REG_MAN_VLAN_CFG index N=0..11 */
    reg_value = eclass_reg_MAN_VLAN_CFG_array_read( b_ptr,
                                                    h_ptr,
                                                    N);
    field_value = (reg_value & ECLASS120_REG_MAN_VLAN_CFG_BIT_MANAGEMENT_VLAN_TCI_VLANID_MSK)
                  >> ECLASS120_REG_MAN_VLAN_CFG_BIT_MANAGEMENT_VLAN_TCI_VLANID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_MAN_VLAN_CFG_BIT_MANAGEMENT_VLAN_TCI_VLANID_MSK, ECLASS120_REG_MAN_VLAN_CFG_BIT_MANAGEMENT_VLAN_TCI_VLANID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_MANAGEMENT_VLAN_TCI_VLANID_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_MANAGEMENT_VLAN_TPID_set( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_MANAGEMENT_VLAN_TPID_set( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_MANAGEMENT_VLAN_TPID_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_MANAGEMENT_VLAN_TPID_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_MANAGEMENT_VLAN_TPID_set", N, value );

    /* ((0x00000070 + (N) * 512) bits 15:0) field MANAGEMENT_VLAN_TPID of register PMC_ECLASS120_REG_MAN_VLAN_CFG index N=0..11 */
    eclass_reg_MAN_VLAN_CFG_array_field_set( b_ptr,
                                             h_ptr,
                                             N,
                                             ECLASS120_REG_MAN_VLAN_CFG_BIT_MANAGEMENT_VLAN_TPID_MSK,
                                             ECLASS120_REG_MAN_VLAN_CFG_BIT_MANAGEMENT_VLAN_TPID_OFF,
                                             value);
}

static INLINE UINT32 eclass_field_MANAGEMENT_VLAN_TPID_get( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_MANAGEMENT_VLAN_TPID_get( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_MANAGEMENT_VLAN_TPID_get", N, 11);
    /* ((0x00000070 + (N) * 512) bits 15:0) field MANAGEMENT_VLAN_TPID of register PMC_ECLASS120_REG_MAN_VLAN_CFG index N=0..11 */
    reg_value = eclass_reg_MAN_VLAN_CFG_array_read( b_ptr,
                                                    h_ptr,
                                                    N);
    value = (reg_value & ECLASS120_REG_MAN_VLAN_CFG_BIT_MANAGEMENT_VLAN_TPID_MSK) >> ECLASS120_REG_MAN_VLAN_CFG_BIT_MANAGEMENT_VLAN_TPID_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_MANAGEMENT_VLAN_TPID_get", N, value );

    return value;
}
static INLINE void eclass_field_range_MANAGEMENT_VLAN_TPID_set( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_MANAGEMENT_VLAN_TPID_set( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_MANAGEMENT_VLAN_TPID_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_MANAGEMENT_VLAN_TPID_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_MANAGEMENT_VLAN_TPID_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_MANAGEMENT_VLAN_TPID_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000070 + (N) * 512) bits 15:0) field MANAGEMENT_VLAN_TPID of register PMC_ECLASS120_REG_MAN_VLAN_CFG index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000070 + (N) * 512) bits 15:0) field MANAGEMENT_VLAN_TPID of register PMC_ECLASS120_REG_MAN_VLAN_CFG index N=0..11 */
        eclass_reg_MAN_VLAN_CFG_array_field_set( b_ptr,
                                                 h_ptr,
                                                 N,
                                                 subfield_mask << (ECLASS120_REG_MAN_VLAN_CFG_BIT_MANAGEMENT_VLAN_TPID_OFF + subfield_offset),
                                                 ECLASS120_REG_MAN_VLAN_CFG_BIT_MANAGEMENT_VLAN_TPID_OFF + subfield_offset,
                                                 value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_MANAGEMENT_VLAN_TPID_get( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_MANAGEMENT_VLAN_TPID_get( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_MANAGEMENT_VLAN_TPID_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_MANAGEMENT_VLAN_TPID_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_MANAGEMENT_VLAN_TPID_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000070 + (N) * 512) bits 15:0) field MANAGEMENT_VLAN_TPID of register PMC_ECLASS120_REG_MAN_VLAN_CFG index N=0..11 */
    reg_value = eclass_reg_MAN_VLAN_CFG_array_read( b_ptr,
                                                    h_ptr,
                                                    N);
    field_value = (reg_value & ECLASS120_REG_MAN_VLAN_CFG_BIT_MANAGEMENT_VLAN_TPID_MSK)
                  >> ECLASS120_REG_MAN_VLAN_CFG_BIT_MANAGEMENT_VLAN_TPID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_MAN_VLAN_CFG_BIT_MANAGEMENT_VLAN_TPID_MSK, ECLASS120_REG_MAN_VLAN_CFG_BIT_MANAGEMENT_VLAN_TPID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_MANAGEMENT_VLAN_TPID_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ADDR_LSB_set( eclass_buffer_t *b_ptr,
                                              eclass_handle_t *h_ptr,
                                              UINT32  N,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ADDR_LSB_set( eclass_buffer_t *b_ptr,
                                              eclass_handle_t *h_ptr,
                                              UINT32  N,
                                              UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_LSB_set", N, 11);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ADDR_LSB_set", N, value );

    /* ((0x00000074 + (N) * 512) bits 31:0) field ADDR_LSB of register PMC_ECLASS120_REG_UNICAST_DA_ETH_LSB index N=0..11 */
    eclass_reg_UNICAST_DA_ETH_LSB_array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   ECLASS120_REG_UNICAST_DA_ETH_LSB_BIT_ADDR_LSB_MSK,
                                                   ECLASS120_REG_UNICAST_DA_ETH_LSB_BIT_ADDR_LSB_OFF,
                                                   value);
}

static INLINE UINT32 eclass_field_ADDR_LSB_get( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ADDR_LSB_get( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_LSB_get", N, 11);
    /* ((0x00000074 + (N) * 512) bits 31:0) field ADDR_LSB of register PMC_ECLASS120_REG_UNICAST_DA_ETH_LSB index N=0..11 */
    reg_value = eclass_reg_UNICAST_DA_ETH_LSB_array_read( b_ptr,
                                                          h_ptr,
                                                          N);
    value = (reg_value & ECLASS120_REG_UNICAST_DA_ETH_LSB_BIT_ADDR_LSB_MSK) >> ECLASS120_REG_UNICAST_DA_ETH_LSB_BIT_ADDR_LSB_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ADDR_LSB_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ADDR_LSB_set( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ADDR_LSB_set( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit,
                                                    UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ADDR_LSB_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ADDR_LSB_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ADDR_LSB_set", stop_bit, 31 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ADDR_LSB_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000074 + (N) * 512) bits 31:0) field ADDR_LSB of register PMC_ECLASS120_REG_UNICAST_DA_ETH_LSB index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000074 + (N) * 512) bits 31:0) field ADDR_LSB of register PMC_ECLASS120_REG_UNICAST_DA_ETH_LSB index N=0..11 */
        eclass_reg_UNICAST_DA_ETH_LSB_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       subfield_mask << (ECLASS120_REG_UNICAST_DA_ETH_LSB_BIT_ADDR_LSB_OFF + subfield_offset),
                                                       ECLASS120_REG_UNICAST_DA_ETH_LSB_BIT_ADDR_LSB_OFF + subfield_offset,
                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ADDR_LSB_get( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ADDR_LSB_get( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ADDR_LSB_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ADDR_LSB_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ADDR_LSB_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000074 + (N) * 512) bits 31:0) field ADDR_LSB of register PMC_ECLASS120_REG_UNICAST_DA_ETH_LSB index N=0..11 */
    reg_value = eclass_reg_UNICAST_DA_ETH_LSB_array_read( b_ptr,
                                                          h_ptr,
                                                          N);
    field_value = (reg_value & ECLASS120_REG_UNICAST_DA_ETH_LSB_BIT_ADDR_LSB_MSK)
                  >> ECLASS120_REG_UNICAST_DA_ETH_LSB_BIT_ADDR_LSB_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_UNICAST_DA_ETH_LSB_BIT_ADDR_LSB_MSK, ECLASS120_REG_UNICAST_DA_ETH_LSB_BIT_ADDR_LSB_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ADDR_LSB_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ADDR_EN_set( eclass_buffer_t *b_ptr,
                                             eclass_handle_t *h_ptr,
                                             UINT32  N,
                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ADDR_EN_set( eclass_buffer_t *b_ptr,
                                             eclass_handle_t *h_ptr,
                                             UINT32  N,
                                             UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ADDR_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ADDR_EN_set", N, value );

    /* ((0x00000078 + (N) * 512) bits 16) field ADDR_EN of register PMC_ECLASS120_REG_UNICAST_DA_ETH_MSB index N=0..11 */
    eclass_reg_UNICAST_DA_ETH_MSB_array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   ECLASS120_REG_UNICAST_DA_ETH_MSB_BIT_ADDR_EN_MSK,
                                                   ECLASS120_REG_UNICAST_DA_ETH_MSB_BIT_ADDR_EN_OFF,
                                                   value);
}

static INLINE UINT32 eclass_field_ADDR_EN_get( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ADDR_EN_get( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_EN_get", N, 11);
    /* ((0x00000078 + (N) * 512) bits 16) field ADDR_EN of register PMC_ECLASS120_REG_UNICAST_DA_ETH_MSB index N=0..11 */
    reg_value = eclass_reg_UNICAST_DA_ETH_MSB_array_read( b_ptr,
                                                          h_ptr,
                                                          N);
    value = (reg_value & ECLASS120_REG_UNICAST_DA_ETH_MSB_BIT_ADDR_EN_MSK) >> ECLASS120_REG_UNICAST_DA_ETH_MSB_BIT_ADDR_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ADDR_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_ADDR_MSB_set( eclass_buffer_t *b_ptr,
                                              eclass_handle_t *h_ptr,
                                              UINT32  N,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ADDR_MSB_set( eclass_buffer_t *b_ptr,
                                              eclass_handle_t *h_ptr,
                                              UINT32  N,
                                              UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_MSB_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ADDR_MSB_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ADDR_MSB_set", N, value );

    /* ((0x00000078 + (N) * 512) bits 15:0) field ADDR_MSB of register PMC_ECLASS120_REG_UNICAST_DA_ETH_MSB index N=0..11 */
    eclass_reg_UNICAST_DA_ETH_MSB_array_field_set( b_ptr,
                                                   h_ptr,
                                                   N,
                                                   ECLASS120_REG_UNICAST_DA_ETH_MSB_BIT_ADDR_MSB_MSK,
                                                   ECLASS120_REG_UNICAST_DA_ETH_MSB_BIT_ADDR_MSB_OFF,
                                                   value);
}

static INLINE UINT32 eclass_field_ADDR_MSB_get( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ADDR_MSB_get( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_MSB_get", N, 11);
    /* ((0x00000078 + (N) * 512) bits 15:0) field ADDR_MSB of register PMC_ECLASS120_REG_UNICAST_DA_ETH_MSB index N=0..11 */
    reg_value = eclass_reg_UNICAST_DA_ETH_MSB_array_read( b_ptr,
                                                          h_ptr,
                                                          N);
    value = (reg_value & ECLASS120_REG_UNICAST_DA_ETH_MSB_BIT_ADDR_MSB_MSK) >> ECLASS120_REG_UNICAST_DA_ETH_MSB_BIT_ADDR_MSB_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ADDR_MSB_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ADDR_MSB_set( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ADDR_MSB_set( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit,
                                                    UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ADDR_MSB_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ADDR_MSB_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ADDR_MSB_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ADDR_MSB_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000078 + (N) * 512) bits 15:0) field ADDR_MSB of register PMC_ECLASS120_REG_UNICAST_DA_ETH_MSB index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000078 + (N) * 512) bits 15:0) field ADDR_MSB of register PMC_ECLASS120_REG_UNICAST_DA_ETH_MSB index N=0..11 */
        eclass_reg_UNICAST_DA_ETH_MSB_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       subfield_mask << (ECLASS120_REG_UNICAST_DA_ETH_MSB_BIT_ADDR_MSB_OFF + subfield_offset),
                                                       ECLASS120_REG_UNICAST_DA_ETH_MSB_BIT_ADDR_MSB_OFF + subfield_offset,
                                                       value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ADDR_MSB_get( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ADDR_MSB_get( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ADDR_MSB_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ADDR_MSB_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ADDR_MSB_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000078 + (N) * 512) bits 15:0) field ADDR_MSB of register PMC_ECLASS120_REG_UNICAST_DA_ETH_MSB index N=0..11 */
    reg_value = eclass_reg_UNICAST_DA_ETH_MSB_array_read( b_ptr,
                                                          h_ptr,
                                                          N);
    field_value = (reg_value & ECLASS120_REG_UNICAST_DA_ETH_MSB_BIT_ADDR_MSB_MSK)
                  >> ECLASS120_REG_UNICAST_DA_ETH_MSB_BIT_ADDR_MSB_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_UNICAST_DA_ETH_MSB_BIT_ADDR_MSB_MSK, ECLASS120_REG_UNICAST_DA_ETH_MSB_BIT_ADDR_MSB_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ADDR_MSB_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ADDR_P2P_LSB_set( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ADDR_P2P_LSB_set( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_P2P_LSB_set", N, 11);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ADDR_P2P_LSB_set", N, value );

    /* ((0x0000007c + (N) * 512) bits 31:0) field ADDR_P2P_LSB of register PMC_ECLASS120_REG_UNICAST_DA_ETH_P2P_LSB index N=0..11 */
    eclass_reg_UNICAST_DA_ETH_P2P_LSB_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       ECLASS120_REG_UNICAST_DA_ETH_P2P_LSB_BIT_ADDR_P2P_LSB_MSK,
                                                       ECLASS120_REG_UNICAST_DA_ETH_P2P_LSB_BIT_ADDR_P2P_LSB_OFF,
                                                       value);
}

static INLINE UINT32 eclass_field_ADDR_P2P_LSB_get( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ADDR_P2P_LSB_get( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_P2P_LSB_get", N, 11);
    /* ((0x0000007c + (N) * 512) bits 31:0) field ADDR_P2P_LSB of register PMC_ECLASS120_REG_UNICAST_DA_ETH_P2P_LSB index N=0..11 */
    reg_value = eclass_reg_UNICAST_DA_ETH_P2P_LSB_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & ECLASS120_REG_UNICAST_DA_ETH_P2P_LSB_BIT_ADDR_P2P_LSB_MSK) >> ECLASS120_REG_UNICAST_DA_ETH_P2P_LSB_BIT_ADDR_P2P_LSB_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ADDR_P2P_LSB_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ADDR_P2P_LSB_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ADDR_P2P_LSB_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ADDR_P2P_LSB_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ADDR_P2P_LSB_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ADDR_P2P_LSB_set", stop_bit, 31 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ADDR_P2P_LSB_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000007c + (N) * 512) bits 31:0) field ADDR_P2P_LSB of register PMC_ECLASS120_REG_UNICAST_DA_ETH_P2P_LSB index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000007c + (N) * 512) bits 31:0) field ADDR_P2P_LSB of register PMC_ECLASS120_REG_UNICAST_DA_ETH_P2P_LSB index N=0..11 */
        eclass_reg_UNICAST_DA_ETH_P2P_LSB_array_field_set( b_ptr,
                                                           h_ptr,
                                                           N,
                                                           subfield_mask << (ECLASS120_REG_UNICAST_DA_ETH_P2P_LSB_BIT_ADDR_P2P_LSB_OFF + subfield_offset),
                                                           ECLASS120_REG_UNICAST_DA_ETH_P2P_LSB_BIT_ADDR_P2P_LSB_OFF + subfield_offset,
                                                           value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ADDR_P2P_LSB_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ADDR_P2P_LSB_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ADDR_P2P_LSB_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ADDR_P2P_LSB_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ADDR_P2P_LSB_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000007c + (N) * 512) bits 31:0) field ADDR_P2P_LSB of register PMC_ECLASS120_REG_UNICAST_DA_ETH_P2P_LSB index N=0..11 */
    reg_value = eclass_reg_UNICAST_DA_ETH_P2P_LSB_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    field_value = (reg_value & ECLASS120_REG_UNICAST_DA_ETH_P2P_LSB_BIT_ADDR_P2P_LSB_MSK)
                  >> ECLASS120_REG_UNICAST_DA_ETH_P2P_LSB_BIT_ADDR_P2P_LSB_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_UNICAST_DA_ETH_P2P_LSB_BIT_ADDR_P2P_LSB_MSK, ECLASS120_REG_UNICAST_DA_ETH_P2P_LSB_BIT_ADDR_P2P_LSB_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ADDR_P2P_LSB_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ADDR_P2P_EN_set( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ADDR_P2P_EN_set( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_P2P_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ADDR_P2P_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ADDR_P2P_EN_set", N, value );

    /* ((0x00000080 + (N) * 512) bits 16) field ADDR_P2P_EN of register PMC_ECLASS120_REG_UNICAST_DA_ETH_P2P_MSB index N=0..11 */
    eclass_reg_UNICAST_DA_ETH_P2P_MSB_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       ECLASS120_REG_UNICAST_DA_ETH_P2P_MSB_BIT_ADDR_P2P_EN_MSK,
                                                       ECLASS120_REG_UNICAST_DA_ETH_P2P_MSB_BIT_ADDR_P2P_EN_OFF,
                                                       value);
}

static INLINE UINT32 eclass_field_ADDR_P2P_EN_get( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ADDR_P2P_EN_get( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_P2P_EN_get", N, 11);
    /* ((0x00000080 + (N) * 512) bits 16) field ADDR_P2P_EN of register PMC_ECLASS120_REG_UNICAST_DA_ETH_P2P_MSB index N=0..11 */
    reg_value = eclass_reg_UNICAST_DA_ETH_P2P_MSB_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & ECLASS120_REG_UNICAST_DA_ETH_P2P_MSB_BIT_ADDR_P2P_EN_MSK) >> ECLASS120_REG_UNICAST_DA_ETH_P2P_MSB_BIT_ADDR_P2P_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ADDR_P2P_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_ADDR_P2P_MSB_set( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ADDR_P2P_MSB_set( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_P2P_MSB_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ADDR_P2P_MSB_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ADDR_P2P_MSB_set", N, value );

    /* ((0x00000080 + (N) * 512) bits 15:0) field ADDR_P2P_MSB of register PMC_ECLASS120_REG_UNICAST_DA_ETH_P2P_MSB index N=0..11 */
    eclass_reg_UNICAST_DA_ETH_P2P_MSB_array_field_set( b_ptr,
                                                       h_ptr,
                                                       N,
                                                       ECLASS120_REG_UNICAST_DA_ETH_P2P_MSB_BIT_ADDR_P2P_MSB_MSK,
                                                       ECLASS120_REG_UNICAST_DA_ETH_P2P_MSB_BIT_ADDR_P2P_MSB_OFF,
                                                       value);
}

static INLINE UINT32 eclass_field_ADDR_P2P_MSB_get( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ADDR_P2P_MSB_get( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_P2P_MSB_get", N, 11);
    /* ((0x00000080 + (N) * 512) bits 15:0) field ADDR_P2P_MSB of register PMC_ECLASS120_REG_UNICAST_DA_ETH_P2P_MSB index N=0..11 */
    reg_value = eclass_reg_UNICAST_DA_ETH_P2P_MSB_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    value = (reg_value & ECLASS120_REG_UNICAST_DA_ETH_P2P_MSB_BIT_ADDR_P2P_MSB_MSK) >> ECLASS120_REG_UNICAST_DA_ETH_P2P_MSB_BIT_ADDR_P2P_MSB_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ADDR_P2P_MSB_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ADDR_P2P_MSB_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ADDR_P2P_MSB_set( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ADDR_P2P_MSB_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ADDR_P2P_MSB_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ADDR_P2P_MSB_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ADDR_P2P_MSB_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000080 + (N) * 512) bits 15:0) field ADDR_P2P_MSB of register PMC_ECLASS120_REG_UNICAST_DA_ETH_P2P_MSB index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000080 + (N) * 512) bits 15:0) field ADDR_P2P_MSB of register PMC_ECLASS120_REG_UNICAST_DA_ETH_P2P_MSB index N=0..11 */
        eclass_reg_UNICAST_DA_ETH_P2P_MSB_array_field_set( b_ptr,
                                                           h_ptr,
                                                           N,
                                                           subfield_mask << (ECLASS120_REG_UNICAST_DA_ETH_P2P_MSB_BIT_ADDR_P2P_MSB_OFF + subfield_offset),
                                                           ECLASS120_REG_UNICAST_DA_ETH_P2P_MSB_BIT_ADDR_P2P_MSB_OFF + subfield_offset,
                                                           value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ADDR_P2P_MSB_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ADDR_P2P_MSB_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ADDR_P2P_MSB_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ADDR_P2P_MSB_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ADDR_P2P_MSB_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000080 + (N) * 512) bits 15:0) field ADDR_P2P_MSB of register PMC_ECLASS120_REG_UNICAST_DA_ETH_P2P_MSB index N=0..11 */
    reg_value = eclass_reg_UNICAST_DA_ETH_P2P_MSB_array_read( b_ptr,
                                                              h_ptr,
                                                              N);
    field_value = (reg_value & ECLASS120_REG_UNICAST_DA_ETH_P2P_MSB_BIT_ADDR_P2P_MSB_MSK)
                  >> ECLASS120_REG_UNICAST_DA_ETH_P2P_MSB_BIT_ADDR_P2P_MSB_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_UNICAST_DA_ETH_P2P_MSB_BIT_ADDR_P2P_MSB_MSK, ECLASS120_REG_UNICAST_DA_ETH_P2P_MSB_BIT_ADDR_P2P_MSB_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ADDR_P2P_MSB_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_UDP_PORT_IPV6_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_UDP_PORT_IPV6_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_UDP_PORT_IPV6_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_UDP_PORT_IPV6_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_UDP_PORT_IPV6_set", N, value );

    /* ((0x00000084 + (N) * 512) bits 31:16) field UDP_PORT_IPV6 of register PMC_ECLASS120_REG_UNICAST_DEST_PORT_UDP index N=0..11 */
    eclass_reg_UNICAST_DEST_PORT_UDP_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      ECLASS120_REG_UNICAST_DEST_PORT_UDP_BIT_UDP_PORT_IPV6_MSK,
                                                      ECLASS120_REG_UNICAST_DEST_PORT_UDP_BIT_UDP_PORT_IPV6_OFF,
                                                      value);
}

static INLINE UINT32 eclass_field_UDP_PORT_IPV6_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_UDP_PORT_IPV6_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_UDP_PORT_IPV6_get", N, 11);
    /* ((0x00000084 + (N) * 512) bits 31:16) field UDP_PORT_IPV6 of register PMC_ECLASS120_REG_UNICAST_DEST_PORT_UDP index N=0..11 */
    reg_value = eclass_reg_UNICAST_DEST_PORT_UDP_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_UNICAST_DEST_PORT_UDP_BIT_UDP_PORT_IPV6_MSK) >> ECLASS120_REG_UNICAST_DEST_PORT_UDP_BIT_UDP_PORT_IPV6_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_UDP_PORT_IPV6_get", N, value );

    return value;
}
static INLINE void eclass_field_range_UDP_PORT_IPV6_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_UDP_PORT_IPV6_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_UDP_PORT_IPV6_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_UDP_PORT_IPV6_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_UDP_PORT_IPV6_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_UDP_PORT_IPV6_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000084 + (N) * 512) bits 31:16) field UDP_PORT_IPV6 of register PMC_ECLASS120_REG_UNICAST_DEST_PORT_UDP index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000084 + (N) * 512) bits 31:16) field UDP_PORT_IPV6 of register PMC_ECLASS120_REG_UNICAST_DEST_PORT_UDP index N=0..11 */
        eclass_reg_UNICAST_DEST_PORT_UDP_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          subfield_mask << (ECLASS120_REG_UNICAST_DEST_PORT_UDP_BIT_UDP_PORT_IPV6_OFF + subfield_offset),
                                                          ECLASS120_REG_UNICAST_DEST_PORT_UDP_BIT_UDP_PORT_IPV6_OFF + subfield_offset,
                                                          value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_UDP_PORT_IPV6_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_UDP_PORT_IPV6_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_UDP_PORT_IPV6_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_UDP_PORT_IPV6_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_UDP_PORT_IPV6_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000084 + (N) * 512) bits 31:16) field UDP_PORT_IPV6 of register PMC_ECLASS120_REG_UNICAST_DEST_PORT_UDP index N=0..11 */
    reg_value = eclass_reg_UNICAST_DEST_PORT_UDP_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    field_value = (reg_value & ECLASS120_REG_UNICAST_DEST_PORT_UDP_BIT_UDP_PORT_IPV6_MSK)
                  >> ECLASS120_REG_UNICAST_DEST_PORT_UDP_BIT_UDP_PORT_IPV6_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_UNICAST_DEST_PORT_UDP_BIT_UDP_PORT_IPV6_MSK, ECLASS120_REG_UNICAST_DEST_PORT_UDP_BIT_UDP_PORT_IPV6_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_UDP_PORT_IPV6_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_UDP_PORT_IPV4_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_UDP_PORT_IPV4_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_UDP_PORT_IPV4_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_UDP_PORT_IPV4_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_UDP_PORT_IPV4_set", N, value );

    /* ((0x00000084 + (N) * 512) bits 15:0) field UDP_PORT_IPV4 of register PMC_ECLASS120_REG_UNICAST_DEST_PORT_UDP index N=0..11 */
    eclass_reg_UNICAST_DEST_PORT_UDP_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      ECLASS120_REG_UNICAST_DEST_PORT_UDP_BIT_UDP_PORT_IPV4_MSK,
                                                      ECLASS120_REG_UNICAST_DEST_PORT_UDP_BIT_UDP_PORT_IPV4_OFF,
                                                      value);
}

static INLINE UINT32 eclass_field_UDP_PORT_IPV4_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_UDP_PORT_IPV4_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_UDP_PORT_IPV4_get", N, 11);
    /* ((0x00000084 + (N) * 512) bits 15:0) field UDP_PORT_IPV4 of register PMC_ECLASS120_REG_UNICAST_DEST_PORT_UDP index N=0..11 */
    reg_value = eclass_reg_UNICAST_DEST_PORT_UDP_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_UNICAST_DEST_PORT_UDP_BIT_UDP_PORT_IPV4_MSK) >> ECLASS120_REG_UNICAST_DEST_PORT_UDP_BIT_UDP_PORT_IPV4_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_UDP_PORT_IPV4_get", N, value );

    return value;
}
static INLINE void eclass_field_range_UDP_PORT_IPV4_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_UDP_PORT_IPV4_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_UDP_PORT_IPV4_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_UDP_PORT_IPV4_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_UDP_PORT_IPV4_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_UDP_PORT_IPV4_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000084 + (N) * 512) bits 15:0) field UDP_PORT_IPV4 of register PMC_ECLASS120_REG_UNICAST_DEST_PORT_UDP index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000084 + (N) * 512) bits 15:0) field UDP_PORT_IPV4 of register PMC_ECLASS120_REG_UNICAST_DEST_PORT_UDP index N=0..11 */
        eclass_reg_UNICAST_DEST_PORT_UDP_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          subfield_mask << (ECLASS120_REG_UNICAST_DEST_PORT_UDP_BIT_UDP_PORT_IPV4_OFF + subfield_offset),
                                                          ECLASS120_REG_UNICAST_DEST_PORT_UDP_BIT_UDP_PORT_IPV4_OFF + subfield_offset,
                                                          value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_UDP_PORT_IPV4_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_UDP_PORT_IPV4_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_UDP_PORT_IPV4_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_UDP_PORT_IPV4_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_UDP_PORT_IPV4_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000084 + (N) * 512) bits 15:0) field UDP_PORT_IPV4 of register PMC_ECLASS120_REG_UNICAST_DEST_PORT_UDP index N=0..11 */
    reg_value = eclass_reg_UNICAST_DEST_PORT_UDP_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    field_value = (reg_value & ECLASS120_REG_UNICAST_DEST_PORT_UDP_BIT_UDP_PORT_IPV4_MSK)
                  >> ECLASS120_REG_UNICAST_DEST_PORT_UDP_BIT_UDP_PORT_IPV4_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_UNICAST_DEST_PORT_UDP_BIT_UDP_PORT_IPV4_MSK, ECLASS120_REG_UNICAST_DEST_PORT_UDP_BIT_UDP_PORT_IPV4_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_UDP_PORT_IPV4_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ADDR_IPV4_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ADDR_IPV4_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_IPV4_set", N, 11);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ADDR_IPV4_set", N, value );

    /* ((0x00000088 + (N) * 512) bits 31:0) field ADDR_IPV4 of register PMC_ECLASS120_REG_UNICAST_DA_IPV4 index N=0..11 */
    eclass_reg_UNICAST_DA_IPV4_array_field_set( b_ptr,
                                                h_ptr,
                                                N,
                                                ECLASS120_REG_UNICAST_DA_IPV4_BIT_ADDR_IPV4_MSK,
                                                ECLASS120_REG_UNICAST_DA_IPV4_BIT_ADDR_IPV4_OFF,
                                                value);
}

static INLINE UINT32 eclass_field_ADDR_IPV4_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ADDR_IPV4_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_IPV4_get", N, 11);
    /* ((0x00000088 + (N) * 512) bits 31:0) field ADDR_IPV4 of register PMC_ECLASS120_REG_UNICAST_DA_IPV4 index N=0..11 */
    reg_value = eclass_reg_UNICAST_DA_IPV4_array_read( b_ptr,
                                                       h_ptr,
                                                       N);
    value = (reg_value & ECLASS120_REG_UNICAST_DA_IPV4_BIT_ADDR_IPV4_MSK) >> ECLASS120_REG_UNICAST_DA_IPV4_BIT_ADDR_IPV4_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ADDR_IPV4_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ADDR_IPV4_set( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ADDR_IPV4_set( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ADDR_IPV4_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ADDR_IPV4_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ADDR_IPV4_set", stop_bit, 31 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ADDR_IPV4_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000088 + (N) * 512) bits 31:0) field ADDR_IPV4 of register PMC_ECLASS120_REG_UNICAST_DA_IPV4 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000088 + (N) * 512) bits 31:0) field ADDR_IPV4 of register PMC_ECLASS120_REG_UNICAST_DA_IPV4 index N=0..11 */
        eclass_reg_UNICAST_DA_IPV4_array_field_set( b_ptr,
                                                    h_ptr,
                                                    N,
                                                    subfield_mask << (ECLASS120_REG_UNICAST_DA_IPV4_BIT_ADDR_IPV4_OFF + subfield_offset),
                                                    ECLASS120_REG_UNICAST_DA_IPV4_BIT_ADDR_IPV4_OFF + subfield_offset,
                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ADDR_IPV4_get( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ADDR_IPV4_get( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ADDR_IPV4_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ADDR_IPV4_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ADDR_IPV4_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000088 + (N) * 512) bits 31:0) field ADDR_IPV4 of register PMC_ECLASS120_REG_UNICAST_DA_IPV4 index N=0..11 */
    reg_value = eclass_reg_UNICAST_DA_IPV4_array_read( b_ptr,
                                                       h_ptr,
                                                       N);
    field_value = (reg_value & ECLASS120_REG_UNICAST_DA_IPV4_BIT_ADDR_IPV4_MSK)
                  >> ECLASS120_REG_UNICAST_DA_IPV4_BIT_ADDR_IPV4_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_UNICAST_DA_IPV4_BIT_ADDR_IPV4_MSK, ECLASS120_REG_UNICAST_DA_IPV4_BIT_ADDR_IPV4_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ADDR_IPV4_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ADDR_IPV4_P2P_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ADDR_IPV4_P2P_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_IPV4_P2P_set", N, 11);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ADDR_IPV4_P2P_set", N, value );

    /* ((0x0000008c + (N) * 512) bits 31:0) field ADDR_IPV4_P2P of register PMC_ECLASS120_REG_UNICAST_DA_IPV4_P2P index N=0..11 */
    eclass_reg_UNICAST_DA_IPV4_P2P_array_field_set( b_ptr,
                                                    h_ptr,
                                                    N,
                                                    ECLASS120_REG_UNICAST_DA_IPV4_P2P_BIT_ADDR_IPV4_P2P_MSK,
                                                    ECLASS120_REG_UNICAST_DA_IPV4_P2P_BIT_ADDR_IPV4_P2P_OFF,
                                                    value);
}

static INLINE UINT32 eclass_field_ADDR_IPV4_P2P_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ADDR_IPV4_P2P_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_IPV4_P2P_get", N, 11);
    /* ((0x0000008c + (N) * 512) bits 31:0) field ADDR_IPV4_P2P of register PMC_ECLASS120_REG_UNICAST_DA_IPV4_P2P index N=0..11 */
    reg_value = eclass_reg_UNICAST_DA_IPV4_P2P_array_read( b_ptr,
                                                           h_ptr,
                                                           N);
    value = (reg_value & ECLASS120_REG_UNICAST_DA_IPV4_P2P_BIT_ADDR_IPV4_P2P_MSK) >> ECLASS120_REG_UNICAST_DA_IPV4_P2P_BIT_ADDR_IPV4_P2P_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ADDR_IPV4_P2P_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ADDR_IPV4_P2P_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ADDR_IPV4_P2P_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ADDR_IPV4_P2P_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ADDR_IPV4_P2P_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ADDR_IPV4_P2P_set", stop_bit, 31 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ADDR_IPV4_P2P_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000008c + (N) * 512) bits 31:0) field ADDR_IPV4_P2P of register PMC_ECLASS120_REG_UNICAST_DA_IPV4_P2P index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000008c + (N) * 512) bits 31:0) field ADDR_IPV4_P2P of register PMC_ECLASS120_REG_UNICAST_DA_IPV4_P2P index N=0..11 */
        eclass_reg_UNICAST_DA_IPV4_P2P_array_field_set( b_ptr,
                                                        h_ptr,
                                                        N,
                                                        subfield_mask << (ECLASS120_REG_UNICAST_DA_IPV4_P2P_BIT_ADDR_IPV4_P2P_OFF + subfield_offset),
                                                        ECLASS120_REG_UNICAST_DA_IPV4_P2P_BIT_ADDR_IPV4_P2P_OFF + subfield_offset,
                                                        value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ADDR_IPV4_P2P_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ADDR_IPV4_P2P_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ADDR_IPV4_P2P_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ADDR_IPV4_P2P_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ADDR_IPV4_P2P_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000008c + (N) * 512) bits 31:0) field ADDR_IPV4_P2P of register PMC_ECLASS120_REG_UNICAST_DA_IPV4_P2P index N=0..11 */
    reg_value = eclass_reg_UNICAST_DA_IPV4_P2P_array_read( b_ptr,
                                                           h_ptr,
                                                           N);
    field_value = (reg_value & ECLASS120_REG_UNICAST_DA_IPV4_P2P_BIT_ADDR_IPV4_P2P_MSK)
                  >> ECLASS120_REG_UNICAST_DA_IPV4_P2P_BIT_ADDR_IPV4_P2P_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_UNICAST_DA_IPV4_P2P_BIT_ADDR_IPV4_P2P_MSK, ECLASS120_REG_UNICAST_DA_IPV4_P2P_BIT_ADDR_IPV4_P2P_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ADDR_IPV4_P2P_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ADDR_IPV6_0_set( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ADDR_IPV6_0_set( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_IPV6_0_set", N, 11);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ADDR_IPV6_0_set", N, value );

    /* ((0x00000090 + (N) * 512) bits 31:0) field ADDR_IPV6_0 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_0 index N=0..11 */
    eclass_reg_UNICAST_DA_IPV6_0_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ECLASS120_REG_UNICAST_DA_IPV6_0_BIT_ADDR_IPV6_0_MSK,
                                                  ECLASS120_REG_UNICAST_DA_IPV6_0_BIT_ADDR_IPV6_0_OFF,
                                                  value);
}

static INLINE UINT32 eclass_field_ADDR_IPV6_0_get( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ADDR_IPV6_0_get( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_IPV6_0_get", N, 11);
    /* ((0x00000090 + (N) * 512) bits 31:0) field ADDR_IPV6_0 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_0 index N=0..11 */
    reg_value = eclass_reg_UNICAST_DA_IPV6_0_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ECLASS120_REG_UNICAST_DA_IPV6_0_BIT_ADDR_IPV6_0_MSK) >> ECLASS120_REG_UNICAST_DA_IPV6_0_BIT_ADDR_IPV6_0_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ADDR_IPV6_0_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ADDR_IPV6_0_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ADDR_IPV6_0_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ADDR_IPV6_0_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ADDR_IPV6_0_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ADDR_IPV6_0_set", stop_bit, 31 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ADDR_IPV6_0_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000090 + (N) * 512) bits 31:0) field ADDR_IPV6_0 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_0 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000090 + (N) * 512) bits 31:0) field ADDR_IPV6_0 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_0 index N=0..11 */
        eclass_reg_UNICAST_DA_IPV6_0_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      subfield_mask << (ECLASS120_REG_UNICAST_DA_IPV6_0_BIT_ADDR_IPV6_0_OFF + subfield_offset),
                                                      ECLASS120_REG_UNICAST_DA_IPV6_0_BIT_ADDR_IPV6_0_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ADDR_IPV6_0_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ADDR_IPV6_0_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ADDR_IPV6_0_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ADDR_IPV6_0_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ADDR_IPV6_0_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000090 + (N) * 512) bits 31:0) field ADDR_IPV6_0 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_0 index N=0..11 */
    reg_value = eclass_reg_UNICAST_DA_IPV6_0_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    field_value = (reg_value & ECLASS120_REG_UNICAST_DA_IPV6_0_BIT_ADDR_IPV6_0_MSK)
                  >> ECLASS120_REG_UNICAST_DA_IPV6_0_BIT_ADDR_IPV6_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_UNICAST_DA_IPV6_0_BIT_ADDR_IPV6_0_MSK, ECLASS120_REG_UNICAST_DA_IPV6_0_BIT_ADDR_IPV6_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ADDR_IPV6_0_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ADDR_IPV6_1_set( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ADDR_IPV6_1_set( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_IPV6_1_set", N, 11);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ADDR_IPV6_1_set", N, value );

    /* ((0x00000094 + (N) * 512) bits 31:0) field ADDR_IPV6_1 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_1 index N=0..11 */
    eclass_reg_UNICAST_DA_IPV6_1_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ECLASS120_REG_UNICAST_DA_IPV6_1_BIT_ADDR_IPV6_1_MSK,
                                                  ECLASS120_REG_UNICAST_DA_IPV6_1_BIT_ADDR_IPV6_1_OFF,
                                                  value);
}

static INLINE UINT32 eclass_field_ADDR_IPV6_1_get( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ADDR_IPV6_1_get( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_IPV6_1_get", N, 11);
    /* ((0x00000094 + (N) * 512) bits 31:0) field ADDR_IPV6_1 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_1 index N=0..11 */
    reg_value = eclass_reg_UNICAST_DA_IPV6_1_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ECLASS120_REG_UNICAST_DA_IPV6_1_BIT_ADDR_IPV6_1_MSK) >> ECLASS120_REG_UNICAST_DA_IPV6_1_BIT_ADDR_IPV6_1_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ADDR_IPV6_1_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ADDR_IPV6_1_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ADDR_IPV6_1_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ADDR_IPV6_1_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ADDR_IPV6_1_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ADDR_IPV6_1_set", stop_bit, 31 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ADDR_IPV6_1_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000094 + (N) * 512) bits 31:0) field ADDR_IPV6_1 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_1 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000094 + (N) * 512) bits 31:0) field ADDR_IPV6_1 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_1 index N=0..11 */
        eclass_reg_UNICAST_DA_IPV6_1_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      subfield_mask << (ECLASS120_REG_UNICAST_DA_IPV6_1_BIT_ADDR_IPV6_1_OFF + subfield_offset),
                                                      ECLASS120_REG_UNICAST_DA_IPV6_1_BIT_ADDR_IPV6_1_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ADDR_IPV6_1_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ADDR_IPV6_1_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ADDR_IPV6_1_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ADDR_IPV6_1_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ADDR_IPV6_1_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000094 + (N) * 512) bits 31:0) field ADDR_IPV6_1 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_1 index N=0..11 */
    reg_value = eclass_reg_UNICAST_DA_IPV6_1_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    field_value = (reg_value & ECLASS120_REG_UNICAST_DA_IPV6_1_BIT_ADDR_IPV6_1_MSK)
                  >> ECLASS120_REG_UNICAST_DA_IPV6_1_BIT_ADDR_IPV6_1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_UNICAST_DA_IPV6_1_BIT_ADDR_IPV6_1_MSK, ECLASS120_REG_UNICAST_DA_IPV6_1_BIT_ADDR_IPV6_1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ADDR_IPV6_1_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ADDR_IPV6_2_set( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ADDR_IPV6_2_set( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_IPV6_2_set", N, 11);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ADDR_IPV6_2_set", N, value );

    /* ((0x00000098 + (N) * 512) bits 31:0) field ADDR_IPV6_2 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_2 index N=0..11 */
    eclass_reg_UNICAST_DA_IPV6_2_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ECLASS120_REG_UNICAST_DA_IPV6_2_BIT_ADDR_IPV6_2_MSK,
                                                  ECLASS120_REG_UNICAST_DA_IPV6_2_BIT_ADDR_IPV6_2_OFF,
                                                  value);
}

static INLINE UINT32 eclass_field_ADDR_IPV6_2_get( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ADDR_IPV6_2_get( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_IPV6_2_get", N, 11);
    /* ((0x00000098 + (N) * 512) bits 31:0) field ADDR_IPV6_2 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_2 index N=0..11 */
    reg_value = eclass_reg_UNICAST_DA_IPV6_2_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ECLASS120_REG_UNICAST_DA_IPV6_2_BIT_ADDR_IPV6_2_MSK) >> ECLASS120_REG_UNICAST_DA_IPV6_2_BIT_ADDR_IPV6_2_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ADDR_IPV6_2_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ADDR_IPV6_2_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ADDR_IPV6_2_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ADDR_IPV6_2_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ADDR_IPV6_2_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ADDR_IPV6_2_set", stop_bit, 31 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ADDR_IPV6_2_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000098 + (N) * 512) bits 31:0) field ADDR_IPV6_2 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_2 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000098 + (N) * 512) bits 31:0) field ADDR_IPV6_2 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_2 index N=0..11 */
        eclass_reg_UNICAST_DA_IPV6_2_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      subfield_mask << (ECLASS120_REG_UNICAST_DA_IPV6_2_BIT_ADDR_IPV6_2_OFF + subfield_offset),
                                                      ECLASS120_REG_UNICAST_DA_IPV6_2_BIT_ADDR_IPV6_2_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ADDR_IPV6_2_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ADDR_IPV6_2_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ADDR_IPV6_2_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ADDR_IPV6_2_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ADDR_IPV6_2_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000098 + (N) * 512) bits 31:0) field ADDR_IPV6_2 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_2 index N=0..11 */
    reg_value = eclass_reg_UNICAST_DA_IPV6_2_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    field_value = (reg_value & ECLASS120_REG_UNICAST_DA_IPV6_2_BIT_ADDR_IPV6_2_MSK)
                  >> ECLASS120_REG_UNICAST_DA_IPV6_2_BIT_ADDR_IPV6_2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_UNICAST_DA_IPV6_2_BIT_ADDR_IPV6_2_MSK, ECLASS120_REG_UNICAST_DA_IPV6_2_BIT_ADDR_IPV6_2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ADDR_IPV6_2_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ADDR_IPV6_3_set( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ADDR_IPV6_3_set( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_IPV6_3_set", N, 11);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ADDR_IPV6_3_set", N, value );

    /* ((0x0000009c + (N) * 512) bits 31:0) field ADDR_IPV6_3 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_3 index N=0..11 */
    eclass_reg_UNICAST_DA_IPV6_3_array_field_set( b_ptr,
                                                  h_ptr,
                                                  N,
                                                  ECLASS120_REG_UNICAST_DA_IPV6_3_BIT_ADDR_IPV6_3_MSK,
                                                  ECLASS120_REG_UNICAST_DA_IPV6_3_BIT_ADDR_IPV6_3_OFF,
                                                  value);
}

static INLINE UINT32 eclass_field_ADDR_IPV6_3_get( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ADDR_IPV6_3_get( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_IPV6_3_get", N, 11);
    /* ((0x0000009c + (N) * 512) bits 31:0) field ADDR_IPV6_3 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_3 index N=0..11 */
    reg_value = eclass_reg_UNICAST_DA_IPV6_3_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    value = (reg_value & ECLASS120_REG_UNICAST_DA_IPV6_3_BIT_ADDR_IPV6_3_MSK) >> ECLASS120_REG_UNICAST_DA_IPV6_3_BIT_ADDR_IPV6_3_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ADDR_IPV6_3_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ADDR_IPV6_3_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ADDR_IPV6_3_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ADDR_IPV6_3_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ADDR_IPV6_3_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ADDR_IPV6_3_set", stop_bit, 31 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ADDR_IPV6_3_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000009c + (N) * 512) bits 31:0) field ADDR_IPV6_3 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_3 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000009c + (N) * 512) bits 31:0) field ADDR_IPV6_3 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_3 index N=0..11 */
        eclass_reg_UNICAST_DA_IPV6_3_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      subfield_mask << (ECLASS120_REG_UNICAST_DA_IPV6_3_BIT_ADDR_IPV6_3_OFF + subfield_offset),
                                                      ECLASS120_REG_UNICAST_DA_IPV6_3_BIT_ADDR_IPV6_3_OFF + subfield_offset,
                                                      value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ADDR_IPV6_3_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ADDR_IPV6_3_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ADDR_IPV6_3_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ADDR_IPV6_3_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ADDR_IPV6_3_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000009c + (N) * 512) bits 31:0) field ADDR_IPV6_3 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_3 index N=0..11 */
    reg_value = eclass_reg_UNICAST_DA_IPV6_3_array_read( b_ptr,
                                                         h_ptr,
                                                         N);
    field_value = (reg_value & ECLASS120_REG_UNICAST_DA_IPV6_3_BIT_ADDR_IPV6_3_MSK)
                  >> ECLASS120_REG_UNICAST_DA_IPV6_3_BIT_ADDR_IPV6_3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_UNICAST_DA_IPV6_3_BIT_ADDR_IPV6_3_MSK, ECLASS120_REG_UNICAST_DA_IPV6_3_BIT_ADDR_IPV6_3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ADDR_IPV6_3_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ADDR_IPV6_P2P_0_set( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ADDR_IPV6_P2P_0_set( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_IPV6_P2P_0_set", N, 11);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ADDR_IPV6_P2P_0_set", N, value );

    /* ((0x000000a4 + (N) * 512) bits 31:0) field ADDR_IPV6_P2P_0 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_0 index N=0..11 */
    eclass_reg_UNICAST_DA_IPV6_P2P_0_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      ECLASS120_REG_UNICAST_DA_IPV6_P2P_0_BIT_ADDR_IPV6_P2P_0_MSK,
                                                      ECLASS120_REG_UNICAST_DA_IPV6_P2P_0_BIT_ADDR_IPV6_P2P_0_OFF,
                                                      value);
}

static INLINE UINT32 eclass_field_ADDR_IPV6_P2P_0_get( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ADDR_IPV6_P2P_0_get( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_IPV6_P2P_0_get", N, 11);
    /* ((0x000000a4 + (N) * 512) bits 31:0) field ADDR_IPV6_P2P_0 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_0 index N=0..11 */
    reg_value = eclass_reg_UNICAST_DA_IPV6_P2P_0_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_UNICAST_DA_IPV6_P2P_0_BIT_ADDR_IPV6_P2P_0_MSK) >> ECLASS120_REG_UNICAST_DA_IPV6_P2P_0_BIT_ADDR_IPV6_P2P_0_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ADDR_IPV6_P2P_0_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ADDR_IPV6_P2P_0_set( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ADDR_IPV6_P2P_0_set( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ADDR_IPV6_P2P_0_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ADDR_IPV6_P2P_0_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ADDR_IPV6_P2P_0_set", stop_bit, 31 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ADDR_IPV6_P2P_0_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000000a4 + (N) * 512) bits 31:0) field ADDR_IPV6_P2P_0 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_0 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000000a4 + (N) * 512) bits 31:0) field ADDR_IPV6_P2P_0 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_0 index N=0..11 */
        eclass_reg_UNICAST_DA_IPV6_P2P_0_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          subfield_mask << (ECLASS120_REG_UNICAST_DA_IPV6_P2P_0_BIT_ADDR_IPV6_P2P_0_OFF + subfield_offset),
                                                          ECLASS120_REG_UNICAST_DA_IPV6_P2P_0_BIT_ADDR_IPV6_P2P_0_OFF + subfield_offset,
                                                          value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ADDR_IPV6_P2P_0_get( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ADDR_IPV6_P2P_0_get( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ADDR_IPV6_P2P_0_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ADDR_IPV6_P2P_0_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ADDR_IPV6_P2P_0_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000a4 + (N) * 512) bits 31:0) field ADDR_IPV6_P2P_0 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_0 index N=0..11 */
    reg_value = eclass_reg_UNICAST_DA_IPV6_P2P_0_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    field_value = (reg_value & ECLASS120_REG_UNICAST_DA_IPV6_P2P_0_BIT_ADDR_IPV6_P2P_0_MSK)
                  >> ECLASS120_REG_UNICAST_DA_IPV6_P2P_0_BIT_ADDR_IPV6_P2P_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_UNICAST_DA_IPV6_P2P_0_BIT_ADDR_IPV6_P2P_0_MSK, ECLASS120_REG_UNICAST_DA_IPV6_P2P_0_BIT_ADDR_IPV6_P2P_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ADDR_IPV6_P2P_0_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ADDR_IPV6_P2P_1_set( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ADDR_IPV6_P2P_1_set( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_IPV6_P2P_1_set", N, 11);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ADDR_IPV6_P2P_1_set", N, value );

    /* ((0x000000a8 + (N) * 512) bits 31:0) field ADDR_IPV6_P2P_1 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_1 index N=0..11 */
    eclass_reg_UNICAST_DA_IPV6_P2P_1_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      ECLASS120_REG_UNICAST_DA_IPV6_P2P_1_BIT_ADDR_IPV6_P2P_1_MSK,
                                                      ECLASS120_REG_UNICAST_DA_IPV6_P2P_1_BIT_ADDR_IPV6_P2P_1_OFF,
                                                      value);
}

static INLINE UINT32 eclass_field_ADDR_IPV6_P2P_1_get( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ADDR_IPV6_P2P_1_get( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_IPV6_P2P_1_get", N, 11);
    /* ((0x000000a8 + (N) * 512) bits 31:0) field ADDR_IPV6_P2P_1 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_1 index N=0..11 */
    reg_value = eclass_reg_UNICAST_DA_IPV6_P2P_1_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_UNICAST_DA_IPV6_P2P_1_BIT_ADDR_IPV6_P2P_1_MSK) >> ECLASS120_REG_UNICAST_DA_IPV6_P2P_1_BIT_ADDR_IPV6_P2P_1_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ADDR_IPV6_P2P_1_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ADDR_IPV6_P2P_1_set( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ADDR_IPV6_P2P_1_set( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ADDR_IPV6_P2P_1_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ADDR_IPV6_P2P_1_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ADDR_IPV6_P2P_1_set", stop_bit, 31 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ADDR_IPV6_P2P_1_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000000a8 + (N) * 512) bits 31:0) field ADDR_IPV6_P2P_1 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_1 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000000a8 + (N) * 512) bits 31:0) field ADDR_IPV6_P2P_1 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_1 index N=0..11 */
        eclass_reg_UNICAST_DA_IPV6_P2P_1_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          subfield_mask << (ECLASS120_REG_UNICAST_DA_IPV6_P2P_1_BIT_ADDR_IPV6_P2P_1_OFF + subfield_offset),
                                                          ECLASS120_REG_UNICAST_DA_IPV6_P2P_1_BIT_ADDR_IPV6_P2P_1_OFF + subfield_offset,
                                                          value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ADDR_IPV6_P2P_1_get( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ADDR_IPV6_P2P_1_get( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ADDR_IPV6_P2P_1_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ADDR_IPV6_P2P_1_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ADDR_IPV6_P2P_1_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000a8 + (N) * 512) bits 31:0) field ADDR_IPV6_P2P_1 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_1 index N=0..11 */
    reg_value = eclass_reg_UNICAST_DA_IPV6_P2P_1_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    field_value = (reg_value & ECLASS120_REG_UNICAST_DA_IPV6_P2P_1_BIT_ADDR_IPV6_P2P_1_MSK)
                  >> ECLASS120_REG_UNICAST_DA_IPV6_P2P_1_BIT_ADDR_IPV6_P2P_1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_UNICAST_DA_IPV6_P2P_1_BIT_ADDR_IPV6_P2P_1_MSK, ECLASS120_REG_UNICAST_DA_IPV6_P2P_1_BIT_ADDR_IPV6_P2P_1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ADDR_IPV6_P2P_1_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ADDR_IPV6_P2P_2_set( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ADDR_IPV6_P2P_2_set( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_IPV6_P2P_2_set", N, 11);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ADDR_IPV6_P2P_2_set", N, value );

    /* ((0x000000ac + (N) * 512) bits 31:0) field ADDR_IPV6_P2P_2 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_2 index N=0..11 */
    eclass_reg_UNICAST_DA_IPV6_P2P_2_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      ECLASS120_REG_UNICAST_DA_IPV6_P2P_2_BIT_ADDR_IPV6_P2P_2_MSK,
                                                      ECLASS120_REG_UNICAST_DA_IPV6_P2P_2_BIT_ADDR_IPV6_P2P_2_OFF,
                                                      value);
}

static INLINE UINT32 eclass_field_ADDR_IPV6_P2P_2_get( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ADDR_IPV6_P2P_2_get( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_IPV6_P2P_2_get", N, 11);
    /* ((0x000000ac + (N) * 512) bits 31:0) field ADDR_IPV6_P2P_2 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_2 index N=0..11 */
    reg_value = eclass_reg_UNICAST_DA_IPV6_P2P_2_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_UNICAST_DA_IPV6_P2P_2_BIT_ADDR_IPV6_P2P_2_MSK) >> ECLASS120_REG_UNICAST_DA_IPV6_P2P_2_BIT_ADDR_IPV6_P2P_2_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ADDR_IPV6_P2P_2_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ADDR_IPV6_P2P_2_set( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ADDR_IPV6_P2P_2_set( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ADDR_IPV6_P2P_2_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ADDR_IPV6_P2P_2_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ADDR_IPV6_P2P_2_set", stop_bit, 31 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ADDR_IPV6_P2P_2_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000000ac + (N) * 512) bits 31:0) field ADDR_IPV6_P2P_2 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_2 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000000ac + (N) * 512) bits 31:0) field ADDR_IPV6_P2P_2 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_2 index N=0..11 */
        eclass_reg_UNICAST_DA_IPV6_P2P_2_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          subfield_mask << (ECLASS120_REG_UNICAST_DA_IPV6_P2P_2_BIT_ADDR_IPV6_P2P_2_OFF + subfield_offset),
                                                          ECLASS120_REG_UNICAST_DA_IPV6_P2P_2_BIT_ADDR_IPV6_P2P_2_OFF + subfield_offset,
                                                          value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ADDR_IPV6_P2P_2_get( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ADDR_IPV6_P2P_2_get( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ADDR_IPV6_P2P_2_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ADDR_IPV6_P2P_2_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ADDR_IPV6_P2P_2_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000ac + (N) * 512) bits 31:0) field ADDR_IPV6_P2P_2 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_2 index N=0..11 */
    reg_value = eclass_reg_UNICAST_DA_IPV6_P2P_2_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    field_value = (reg_value & ECLASS120_REG_UNICAST_DA_IPV6_P2P_2_BIT_ADDR_IPV6_P2P_2_MSK)
                  >> ECLASS120_REG_UNICAST_DA_IPV6_P2P_2_BIT_ADDR_IPV6_P2P_2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_UNICAST_DA_IPV6_P2P_2_BIT_ADDR_IPV6_P2P_2_MSK, ECLASS120_REG_UNICAST_DA_IPV6_P2P_2_BIT_ADDR_IPV6_P2P_2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ADDR_IPV6_P2P_2_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ADDR_IPV6_P2P_3_set( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ADDR_IPV6_P2P_3_set( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N,
                                                     UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_IPV6_P2P_3_set", N, 11);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ADDR_IPV6_P2P_3_set", N, value );

    /* ((0x000000b0 + (N) * 512) bits 31:0) field ADDR_IPV6_P2P_3 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_3 index N=0..11 */
    eclass_reg_UNICAST_DA_IPV6_P2P_3_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      ECLASS120_REG_UNICAST_DA_IPV6_P2P_3_BIT_ADDR_IPV6_P2P_3_MSK,
                                                      ECLASS120_REG_UNICAST_DA_IPV6_P2P_3_BIT_ADDR_IPV6_P2P_3_OFF,
                                                      value);
}

static INLINE UINT32 eclass_field_ADDR_IPV6_P2P_3_get( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ADDR_IPV6_P2P_3_get( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ADDR_IPV6_P2P_3_get", N, 11);
    /* ((0x000000b0 + (N) * 512) bits 31:0) field ADDR_IPV6_P2P_3 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_3 index N=0..11 */
    reg_value = eclass_reg_UNICAST_DA_IPV6_P2P_3_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_UNICAST_DA_IPV6_P2P_3_BIT_ADDR_IPV6_P2P_3_MSK) >> ECLASS120_REG_UNICAST_DA_IPV6_P2P_3_BIT_ADDR_IPV6_P2P_3_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ADDR_IPV6_P2P_3_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ADDR_IPV6_P2P_3_set( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ADDR_IPV6_P2P_3_set( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ADDR_IPV6_P2P_3_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ADDR_IPV6_P2P_3_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ADDR_IPV6_P2P_3_set", stop_bit, 31 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ADDR_IPV6_P2P_3_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000000b0 + (N) * 512) bits 31:0) field ADDR_IPV6_P2P_3 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_3 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000000b0 + (N) * 512) bits 31:0) field ADDR_IPV6_P2P_3 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_3 index N=0..11 */
        eclass_reg_UNICAST_DA_IPV6_P2P_3_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          subfield_mask << (ECLASS120_REG_UNICAST_DA_IPV6_P2P_3_BIT_ADDR_IPV6_P2P_3_OFF + subfield_offset),
                                                          ECLASS120_REG_UNICAST_DA_IPV6_P2P_3_BIT_ADDR_IPV6_P2P_3_OFF + subfield_offset,
                                                          value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ADDR_IPV6_P2P_3_get( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ADDR_IPV6_P2P_3_get( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ADDR_IPV6_P2P_3_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ADDR_IPV6_P2P_3_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ADDR_IPV6_P2P_3_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000b0 + (N) * 512) bits 31:0) field ADDR_IPV6_P2P_3 of register PMC_ECLASS120_REG_UNICAST_DA_IPV6_P2P_3 index N=0..11 */
    reg_value = eclass_reg_UNICAST_DA_IPV6_P2P_3_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    field_value = (reg_value & ECLASS120_REG_UNICAST_DA_IPV6_P2P_3_BIT_ADDR_IPV6_P2P_3_MSK)
                  >> ECLASS120_REG_UNICAST_DA_IPV6_P2P_3_BIT_ADDR_IPV6_P2P_3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_UNICAST_DA_IPV6_P2P_3_BIT_ADDR_IPV6_P2P_3_MSK, ECLASS120_REG_UNICAST_DA_IPV6_P2P_3_BIT_ADDR_IPV6_P2P_3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ADDR_IPV6_P2P_3_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 eclass_field_FAND_0_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FAND_0_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FAND_0_UNUSEDZEROS_get", N, 11);
    /* ((0x000000d0 + (N) * 512) bits 31:29) field FAND_0_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_0 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FAND_0_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FAND_0_BIT_FAND_0_UNUSEDZEROS_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FAND_0_BIT_FAND_0_UNUSEDZEROS_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FAND_0_UNUSEDZEROS_get", N, value );

    return value;
}
static INLINE UINT32 eclass_field_range_FAND_0_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FAND_0_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FAND_0_UNUSEDZEROS_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FAND_0_UNUSEDZEROS_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FAND_0_UNUSEDZEROS_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000d0 + (N) * 512) bits 31:29) field FAND_0_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_0 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FAND_0_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FAND_0_BIT_FAND_0_UNUSEDZEROS_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FAND_0_BIT_FAND_0_UNUSEDZEROS_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FAND_0_BIT_FAND_0_UNUSEDZEROS_MSK, ECLASS120_REG_GEN_FILTER_CFG_FAND_0_BIT_FAND_0_UNUSEDZEROS_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FAND_0_UNUSEDZEROS_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FAND_0_OR_CFG_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FAND_0_OR_CFG_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FAND_0_OR_CFG_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FAND_0_OR_CFG_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FAND_0_OR_CFG_set", N, value );

    /* ((0x000000d0 + (N) * 512) bits 16) field FAND_0_OR_CFG of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_0 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FAND_0_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      ECLASS120_REG_GEN_FILTER_CFG_FAND_0_BIT_FAND_0_OR_CFG_MSK,
                                                      ECLASS120_REG_GEN_FILTER_CFG_FAND_0_BIT_FAND_0_OR_CFG_OFF,
                                                      value);
}

static INLINE UINT32 eclass_field_FAND_0_OR_CFG_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FAND_0_OR_CFG_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FAND_0_OR_CFG_get", N, 11);
    /* ((0x000000d0 + (N) * 512) bits 16) field FAND_0_OR_CFG of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_0 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FAND_0_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FAND_0_BIT_FAND_0_OR_CFG_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FAND_0_BIT_FAND_0_OR_CFG_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FAND_0_OR_CFG_get", N, value );

    return value;
}
static INLINE void eclass_field_FAND_0_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FAND_0_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FAND_0_F16BITS_EN_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FAND_0_F16BITS_EN_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FAND_0_F16BITS_EN_set", N, value );

    /* ((0x000000d0 + (N) * 512) bits 15:0) field FAND_0_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_0 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FAND_0_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      ECLASS120_REG_GEN_FILTER_CFG_FAND_0_BIT_FAND_0_F16BITS_EN_MSK,
                                                      ECLASS120_REG_GEN_FILTER_CFG_FAND_0_BIT_FAND_0_F16BITS_EN_OFF,
                                                      value);
}

static INLINE UINT32 eclass_field_FAND_0_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FAND_0_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FAND_0_F16BITS_EN_get", N, 11);
    /* ((0x000000d0 + (N) * 512) bits 15:0) field FAND_0_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_0 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FAND_0_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FAND_0_BIT_FAND_0_F16BITS_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FAND_0_BIT_FAND_0_F16BITS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FAND_0_F16BITS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FAND_0_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FAND_0_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FAND_0_F16BITS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FAND_0_F16BITS_EN_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FAND_0_F16BITS_EN_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FAND_0_F16BITS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000000d0 + (N) * 512) bits 15:0) field FAND_0_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_0 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000000d0 + (N) * 512) bits 15:0) field FAND_0_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_0 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FAND_0_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FAND_0_BIT_FAND_0_F16BITS_EN_OFF + subfield_offset),
                                                          ECLASS120_REG_GEN_FILTER_CFG_FAND_0_BIT_FAND_0_F16BITS_EN_OFF + subfield_offset,
                                                          value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FAND_0_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FAND_0_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FAND_0_F16BITS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FAND_0_F16BITS_EN_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FAND_0_F16BITS_EN_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000d0 + (N) * 512) bits 15:0) field FAND_0_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_0 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FAND_0_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FAND_0_BIT_FAND_0_F16BITS_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FAND_0_BIT_FAND_0_F16BITS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FAND_0_BIT_FAND_0_F16BITS_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FAND_0_BIT_FAND_0_F16BITS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FAND_0_F16BITS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 eclass_field_FAND_1_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FAND_1_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FAND_1_UNUSEDZEROS_get", N, 11);
    /* ((0x000000d4 + (N) * 512) bits 31:29) field FAND_1_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_1 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FAND_1_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FAND_1_BIT_FAND_1_UNUSEDZEROS_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FAND_1_BIT_FAND_1_UNUSEDZEROS_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FAND_1_UNUSEDZEROS_get", N, value );

    return value;
}
static INLINE UINT32 eclass_field_range_FAND_1_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FAND_1_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FAND_1_UNUSEDZEROS_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FAND_1_UNUSEDZEROS_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FAND_1_UNUSEDZEROS_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000d4 + (N) * 512) bits 31:29) field FAND_1_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_1 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FAND_1_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FAND_1_BIT_FAND_1_UNUSEDZEROS_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FAND_1_BIT_FAND_1_UNUSEDZEROS_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FAND_1_BIT_FAND_1_UNUSEDZEROS_MSK, ECLASS120_REG_GEN_FILTER_CFG_FAND_1_BIT_FAND_1_UNUSEDZEROS_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FAND_1_UNUSEDZEROS_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FAND_1_OR_CFG_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FAND_1_OR_CFG_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FAND_1_OR_CFG_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FAND_1_OR_CFG_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FAND_1_OR_CFG_set", N, value );

    /* ((0x000000d4 + (N) * 512) bits 16) field FAND_1_OR_CFG of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_1 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FAND_1_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      ECLASS120_REG_GEN_FILTER_CFG_FAND_1_BIT_FAND_1_OR_CFG_MSK,
                                                      ECLASS120_REG_GEN_FILTER_CFG_FAND_1_BIT_FAND_1_OR_CFG_OFF,
                                                      value);
}

static INLINE UINT32 eclass_field_FAND_1_OR_CFG_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FAND_1_OR_CFG_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FAND_1_OR_CFG_get", N, 11);
    /* ((0x000000d4 + (N) * 512) bits 16) field FAND_1_OR_CFG of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_1 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FAND_1_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FAND_1_BIT_FAND_1_OR_CFG_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FAND_1_BIT_FAND_1_OR_CFG_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FAND_1_OR_CFG_get", N, value );

    return value;
}
static INLINE void eclass_field_FAND_1_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FAND_1_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FAND_1_F16BITS_EN_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FAND_1_F16BITS_EN_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FAND_1_F16BITS_EN_set", N, value );

    /* ((0x000000d4 + (N) * 512) bits 15:0) field FAND_1_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_1 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FAND_1_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      ECLASS120_REG_GEN_FILTER_CFG_FAND_1_BIT_FAND_1_F16BITS_EN_MSK,
                                                      ECLASS120_REG_GEN_FILTER_CFG_FAND_1_BIT_FAND_1_F16BITS_EN_OFF,
                                                      value);
}

static INLINE UINT32 eclass_field_FAND_1_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FAND_1_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FAND_1_F16BITS_EN_get", N, 11);
    /* ((0x000000d4 + (N) * 512) bits 15:0) field FAND_1_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_1 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FAND_1_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FAND_1_BIT_FAND_1_F16BITS_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FAND_1_BIT_FAND_1_F16BITS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FAND_1_F16BITS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FAND_1_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FAND_1_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FAND_1_F16BITS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FAND_1_F16BITS_EN_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FAND_1_F16BITS_EN_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FAND_1_F16BITS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000000d4 + (N) * 512) bits 15:0) field FAND_1_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_1 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000000d4 + (N) * 512) bits 15:0) field FAND_1_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_1 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FAND_1_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FAND_1_BIT_FAND_1_F16BITS_EN_OFF + subfield_offset),
                                                          ECLASS120_REG_GEN_FILTER_CFG_FAND_1_BIT_FAND_1_F16BITS_EN_OFF + subfield_offset,
                                                          value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FAND_1_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FAND_1_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FAND_1_F16BITS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FAND_1_F16BITS_EN_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FAND_1_F16BITS_EN_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000d4 + (N) * 512) bits 15:0) field FAND_1_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_1 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FAND_1_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FAND_1_BIT_FAND_1_F16BITS_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FAND_1_BIT_FAND_1_F16BITS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FAND_1_BIT_FAND_1_F16BITS_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FAND_1_BIT_FAND_1_F16BITS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FAND_1_F16BITS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 eclass_field_FAND_2_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FAND_2_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FAND_2_UNUSEDZEROS_get", N, 11);
    /* ((0x000000d8 + (N) * 512) bits 31:29) field FAND_2_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_2 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FAND_2_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FAND_2_BIT_FAND_2_UNUSEDZEROS_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FAND_2_BIT_FAND_2_UNUSEDZEROS_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FAND_2_UNUSEDZEROS_get", N, value );

    return value;
}
static INLINE UINT32 eclass_field_range_FAND_2_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FAND_2_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FAND_2_UNUSEDZEROS_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FAND_2_UNUSEDZEROS_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FAND_2_UNUSEDZEROS_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000d8 + (N) * 512) bits 31:29) field FAND_2_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_2 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FAND_2_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FAND_2_BIT_FAND_2_UNUSEDZEROS_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FAND_2_BIT_FAND_2_UNUSEDZEROS_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FAND_2_BIT_FAND_2_UNUSEDZEROS_MSK, ECLASS120_REG_GEN_FILTER_CFG_FAND_2_BIT_FAND_2_UNUSEDZEROS_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FAND_2_UNUSEDZEROS_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FAND_2_OR_CFG_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FAND_2_OR_CFG_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FAND_2_OR_CFG_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FAND_2_OR_CFG_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FAND_2_OR_CFG_set", N, value );

    /* ((0x000000d8 + (N) * 512) bits 16) field FAND_2_OR_CFG of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_2 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FAND_2_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      ECLASS120_REG_GEN_FILTER_CFG_FAND_2_BIT_FAND_2_OR_CFG_MSK,
                                                      ECLASS120_REG_GEN_FILTER_CFG_FAND_2_BIT_FAND_2_OR_CFG_OFF,
                                                      value);
}

static INLINE UINT32 eclass_field_FAND_2_OR_CFG_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FAND_2_OR_CFG_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FAND_2_OR_CFG_get", N, 11);
    /* ((0x000000d8 + (N) * 512) bits 16) field FAND_2_OR_CFG of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_2 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FAND_2_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FAND_2_BIT_FAND_2_OR_CFG_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FAND_2_BIT_FAND_2_OR_CFG_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FAND_2_OR_CFG_get", N, value );

    return value;
}
static INLINE void eclass_field_FAND_2_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FAND_2_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FAND_2_F16BITS_EN_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FAND_2_F16BITS_EN_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FAND_2_F16BITS_EN_set", N, value );

    /* ((0x000000d8 + (N) * 512) bits 15:0) field FAND_2_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_2 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FAND_2_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      ECLASS120_REG_GEN_FILTER_CFG_FAND_2_BIT_FAND_2_F16BITS_EN_MSK,
                                                      ECLASS120_REG_GEN_FILTER_CFG_FAND_2_BIT_FAND_2_F16BITS_EN_OFF,
                                                      value);
}

static INLINE UINT32 eclass_field_FAND_2_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FAND_2_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FAND_2_F16BITS_EN_get", N, 11);
    /* ((0x000000d8 + (N) * 512) bits 15:0) field FAND_2_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_2 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FAND_2_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FAND_2_BIT_FAND_2_F16BITS_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FAND_2_BIT_FAND_2_F16BITS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FAND_2_F16BITS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FAND_2_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FAND_2_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FAND_2_F16BITS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FAND_2_F16BITS_EN_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FAND_2_F16BITS_EN_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FAND_2_F16BITS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000000d8 + (N) * 512) bits 15:0) field FAND_2_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_2 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000000d8 + (N) * 512) bits 15:0) field FAND_2_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_2 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FAND_2_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FAND_2_BIT_FAND_2_F16BITS_EN_OFF + subfield_offset),
                                                          ECLASS120_REG_GEN_FILTER_CFG_FAND_2_BIT_FAND_2_F16BITS_EN_OFF + subfield_offset,
                                                          value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FAND_2_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FAND_2_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FAND_2_F16BITS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FAND_2_F16BITS_EN_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FAND_2_F16BITS_EN_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000d8 + (N) * 512) bits 15:0) field FAND_2_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_2 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FAND_2_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FAND_2_BIT_FAND_2_F16BITS_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FAND_2_BIT_FAND_2_F16BITS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FAND_2_BIT_FAND_2_F16BITS_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FAND_2_BIT_FAND_2_F16BITS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FAND_2_F16BITS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 eclass_field_FAND_3_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FAND_3_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FAND_3_UNUSEDZEROS_get", N, 11);
    /* ((0x000000dc + (N) * 512) bits 31:29) field FAND_3_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_3 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FAND_3_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FAND_3_BIT_FAND_3_UNUSEDZEROS_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FAND_3_BIT_FAND_3_UNUSEDZEROS_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FAND_3_UNUSEDZEROS_get", N, value );

    return value;
}
static INLINE UINT32 eclass_field_range_FAND_3_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FAND_3_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FAND_3_UNUSEDZEROS_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FAND_3_UNUSEDZEROS_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FAND_3_UNUSEDZEROS_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000dc + (N) * 512) bits 31:29) field FAND_3_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_3 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FAND_3_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FAND_3_BIT_FAND_3_UNUSEDZEROS_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FAND_3_BIT_FAND_3_UNUSEDZEROS_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FAND_3_BIT_FAND_3_UNUSEDZEROS_MSK, ECLASS120_REG_GEN_FILTER_CFG_FAND_3_BIT_FAND_3_UNUSEDZEROS_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FAND_3_UNUSEDZEROS_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FAND_3_OR_CFG_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FAND_3_OR_CFG_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FAND_3_OR_CFG_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FAND_3_OR_CFG_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FAND_3_OR_CFG_set", N, value );

    /* ((0x000000dc + (N) * 512) bits 16) field FAND_3_OR_CFG of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_3 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FAND_3_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      ECLASS120_REG_GEN_FILTER_CFG_FAND_3_BIT_FAND_3_OR_CFG_MSK,
                                                      ECLASS120_REG_GEN_FILTER_CFG_FAND_3_BIT_FAND_3_OR_CFG_OFF,
                                                      value);
}

static INLINE UINT32 eclass_field_FAND_3_OR_CFG_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FAND_3_OR_CFG_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FAND_3_OR_CFG_get", N, 11);
    /* ((0x000000dc + (N) * 512) bits 16) field FAND_3_OR_CFG of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_3 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FAND_3_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FAND_3_BIT_FAND_3_OR_CFG_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FAND_3_BIT_FAND_3_OR_CFG_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FAND_3_OR_CFG_get", N, value );

    return value;
}
static INLINE void eclass_field_FAND_3_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FAND_3_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FAND_3_F16BITS_EN_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FAND_3_F16BITS_EN_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FAND_3_F16BITS_EN_set", N, value );

    /* ((0x000000dc + (N) * 512) bits 15:0) field FAND_3_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_3 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FAND_3_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      ECLASS120_REG_GEN_FILTER_CFG_FAND_3_BIT_FAND_3_F16BITS_EN_MSK,
                                                      ECLASS120_REG_GEN_FILTER_CFG_FAND_3_BIT_FAND_3_F16BITS_EN_OFF,
                                                      value);
}

static INLINE UINT32 eclass_field_FAND_3_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FAND_3_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FAND_3_F16BITS_EN_get", N, 11);
    /* ((0x000000dc + (N) * 512) bits 15:0) field FAND_3_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_3 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FAND_3_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FAND_3_BIT_FAND_3_F16BITS_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FAND_3_BIT_FAND_3_F16BITS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FAND_3_F16BITS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FAND_3_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FAND_3_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FAND_3_F16BITS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FAND_3_F16BITS_EN_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FAND_3_F16BITS_EN_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FAND_3_F16BITS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000000dc + (N) * 512) bits 15:0) field FAND_3_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_3 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000000dc + (N) * 512) bits 15:0) field FAND_3_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_3 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FAND_3_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FAND_3_BIT_FAND_3_F16BITS_EN_OFF + subfield_offset),
                                                          ECLASS120_REG_GEN_FILTER_CFG_FAND_3_BIT_FAND_3_F16BITS_EN_OFF + subfield_offset,
                                                          value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FAND_3_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FAND_3_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FAND_3_F16BITS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FAND_3_F16BITS_EN_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FAND_3_F16BITS_EN_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000dc + (N) * 512) bits 15:0) field FAND_3_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FAND_3 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FAND_3_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FAND_3_BIT_FAND_3_F16BITS_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FAND_3_BIT_FAND_3_F16BITS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FAND_3_BIT_FAND_3_F16BITS_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FAND_3_BIT_FAND_3_F16BITS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FAND_3_F16BITS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 eclass_field_FOR_0_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOR_0_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_0_UNUSEDZEROS_get", N, 11);
    /* ((0x000000e0 + (N) * 512) bits 31:29) field FOR_0_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_0 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_0_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_0_BIT_FOR_0_UNUSEDZEROS_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FOR_0_BIT_FOR_0_UNUSEDZEROS_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOR_0_UNUSEDZEROS_get", N, value );

    return value;
}
static INLINE UINT32 eclass_field_range_FOR_0_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOR_0_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_0_UNUSEDZEROS_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_0_UNUSEDZEROS_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_0_UNUSEDZEROS_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000e0 + (N) * 512) bits 31:29) field FOR_0_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_0 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_0_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_0_BIT_FOR_0_UNUSEDZEROS_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FOR_0_BIT_FOR_0_UNUSEDZEROS_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FOR_0_BIT_FOR_0_UNUSEDZEROS_MSK, ECLASS120_REG_GEN_FILTER_CFG_FOR_0_BIT_FOR_0_UNUSEDZEROS_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_0_UNUSEDZEROS_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOR_0_INV_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOR_0_INV_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_0_INV_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOR_0_INV_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOR_0_INV_set", N, value );

    /* ((0x000000e0 + (N) * 512) bits 20) field FOR_0_INV of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_0 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FOR_0_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_0_BIT_FOR_0_INV_MSK,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_0_BIT_FOR_0_INV_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_FOR_0_INV_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOR_0_INV_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_0_INV_get", N, 11);
    /* ((0x000000e0 + (N) * 512) bits 20) field FOR_0_INV of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_0 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_0_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_0_BIT_FOR_0_INV_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FOR_0_BIT_FOR_0_INV_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOR_0_INV_get", N, value );

    return value;
}
static INLINE void eclass_field_FOR_0_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOR_0_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_0_FAND_EN_set", N, 11);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOR_0_FAND_EN_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOR_0_FAND_EN_set", N, value );

    /* ((0x000000e0 + (N) * 512) bits 19:16) field FOR_0_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_0 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FOR_0_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_0_BIT_FOR_0_FAND_EN_MSK,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_0_BIT_FOR_0_FAND_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_FOR_0_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOR_0_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_0_FAND_EN_get", N, 11);
    /* ((0x000000e0 + (N) * 512) bits 19:16) field FOR_0_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_0 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_0_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_0_BIT_FOR_0_FAND_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FOR_0_BIT_FOR_0_FAND_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOR_0_FAND_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOR_0_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOR_0_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_0_FAND_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_0_FAND_EN_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_0_FAND_EN_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_0_FAND_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000000e0 + (N) * 512) bits 19:16) field FOR_0_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_0 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000000e0 + (N) * 512) bits 19:16) field FOR_0_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_0 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FOR_0_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FOR_0_BIT_FOR_0_FAND_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_GEN_FILTER_CFG_FOR_0_BIT_FOR_0_FAND_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOR_0_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOR_0_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_0_FAND_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_0_FAND_EN_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_0_FAND_EN_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000e0 + (N) * 512) bits 19:16) field FOR_0_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_0 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_0_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_0_BIT_FOR_0_FAND_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FOR_0_BIT_FOR_0_FAND_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FOR_0_BIT_FOR_0_FAND_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FOR_0_BIT_FOR_0_FAND_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_0_FAND_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOR_0_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOR_0_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_0_F16BITS_EN_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOR_0_F16BITS_EN_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOR_0_F16BITS_EN_set", N, value );

    /* ((0x000000e0 + (N) * 512) bits 15:0) field FOR_0_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_0 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FOR_0_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_0_BIT_FOR_0_F16BITS_EN_MSK,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_0_BIT_FOR_0_F16BITS_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_FOR_0_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOR_0_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_0_F16BITS_EN_get", N, 11);
    /* ((0x000000e0 + (N) * 512) bits 15:0) field FOR_0_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_0 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_0_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_0_BIT_FOR_0_F16BITS_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FOR_0_BIT_FOR_0_F16BITS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOR_0_F16BITS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOR_0_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOR_0_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_0_F16BITS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_0_F16BITS_EN_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_0_F16BITS_EN_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_0_F16BITS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000000e0 + (N) * 512) bits 15:0) field FOR_0_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_0 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000000e0 + (N) * 512) bits 15:0) field FOR_0_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_0 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FOR_0_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FOR_0_BIT_FOR_0_F16BITS_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_GEN_FILTER_CFG_FOR_0_BIT_FOR_0_F16BITS_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOR_0_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOR_0_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_0_F16BITS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_0_F16BITS_EN_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_0_F16BITS_EN_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000e0 + (N) * 512) bits 15:0) field FOR_0_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_0 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_0_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_0_BIT_FOR_0_F16BITS_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FOR_0_BIT_FOR_0_F16BITS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FOR_0_BIT_FOR_0_F16BITS_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FOR_0_BIT_FOR_0_F16BITS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_0_F16BITS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 eclass_field_FOR_1_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOR_1_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_1_UNUSEDZEROS_get", N, 11);
    /* ((0x000000e4 + (N) * 512) bits 31:29) field FOR_1_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_1 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_1_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_1_BIT_FOR_1_UNUSEDZEROS_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FOR_1_BIT_FOR_1_UNUSEDZEROS_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOR_1_UNUSEDZEROS_get", N, value );

    return value;
}
static INLINE UINT32 eclass_field_range_FOR_1_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOR_1_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_1_UNUSEDZEROS_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_1_UNUSEDZEROS_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_1_UNUSEDZEROS_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000e4 + (N) * 512) bits 31:29) field FOR_1_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_1 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_1_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_1_BIT_FOR_1_UNUSEDZEROS_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FOR_1_BIT_FOR_1_UNUSEDZEROS_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FOR_1_BIT_FOR_1_UNUSEDZEROS_MSK, ECLASS120_REG_GEN_FILTER_CFG_FOR_1_BIT_FOR_1_UNUSEDZEROS_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_1_UNUSEDZEROS_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOR_1_INV_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOR_1_INV_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_1_INV_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOR_1_INV_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOR_1_INV_set", N, value );

    /* ((0x000000e4 + (N) * 512) bits 20) field FOR_1_INV of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_1 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FOR_1_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_1_BIT_FOR_1_INV_MSK,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_1_BIT_FOR_1_INV_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_FOR_1_INV_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOR_1_INV_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_1_INV_get", N, 11);
    /* ((0x000000e4 + (N) * 512) bits 20) field FOR_1_INV of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_1 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_1_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_1_BIT_FOR_1_INV_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FOR_1_BIT_FOR_1_INV_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOR_1_INV_get", N, value );

    return value;
}
static INLINE void eclass_field_FOR_1_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOR_1_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_1_FAND_EN_set", N, 11);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOR_1_FAND_EN_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOR_1_FAND_EN_set", N, value );

    /* ((0x000000e4 + (N) * 512) bits 19:16) field FOR_1_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_1 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FOR_1_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_1_BIT_FOR_1_FAND_EN_MSK,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_1_BIT_FOR_1_FAND_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_FOR_1_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOR_1_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_1_FAND_EN_get", N, 11);
    /* ((0x000000e4 + (N) * 512) bits 19:16) field FOR_1_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_1 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_1_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_1_BIT_FOR_1_FAND_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FOR_1_BIT_FOR_1_FAND_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOR_1_FAND_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOR_1_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOR_1_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_1_FAND_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_1_FAND_EN_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_1_FAND_EN_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_1_FAND_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000000e4 + (N) * 512) bits 19:16) field FOR_1_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_1 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000000e4 + (N) * 512) bits 19:16) field FOR_1_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_1 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FOR_1_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FOR_1_BIT_FOR_1_FAND_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_GEN_FILTER_CFG_FOR_1_BIT_FOR_1_FAND_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOR_1_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOR_1_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_1_FAND_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_1_FAND_EN_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_1_FAND_EN_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000e4 + (N) * 512) bits 19:16) field FOR_1_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_1 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_1_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_1_BIT_FOR_1_FAND_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FOR_1_BIT_FOR_1_FAND_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FOR_1_BIT_FOR_1_FAND_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FOR_1_BIT_FOR_1_FAND_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_1_FAND_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOR_1_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOR_1_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_1_F16BITS_EN_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOR_1_F16BITS_EN_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOR_1_F16BITS_EN_set", N, value );

    /* ((0x000000e4 + (N) * 512) bits 15:0) field FOR_1_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_1 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FOR_1_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_1_BIT_FOR_1_F16BITS_EN_MSK,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_1_BIT_FOR_1_F16BITS_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_FOR_1_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOR_1_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_1_F16BITS_EN_get", N, 11);
    /* ((0x000000e4 + (N) * 512) bits 15:0) field FOR_1_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_1 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_1_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_1_BIT_FOR_1_F16BITS_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FOR_1_BIT_FOR_1_F16BITS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOR_1_F16BITS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOR_1_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOR_1_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_1_F16BITS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_1_F16BITS_EN_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_1_F16BITS_EN_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_1_F16BITS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000000e4 + (N) * 512) bits 15:0) field FOR_1_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_1 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000000e4 + (N) * 512) bits 15:0) field FOR_1_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_1 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FOR_1_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FOR_1_BIT_FOR_1_F16BITS_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_GEN_FILTER_CFG_FOR_1_BIT_FOR_1_F16BITS_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOR_1_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOR_1_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_1_F16BITS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_1_F16BITS_EN_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_1_F16BITS_EN_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000e4 + (N) * 512) bits 15:0) field FOR_1_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_1 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_1_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_1_BIT_FOR_1_F16BITS_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FOR_1_BIT_FOR_1_F16BITS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FOR_1_BIT_FOR_1_F16BITS_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FOR_1_BIT_FOR_1_F16BITS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_1_F16BITS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 eclass_field_FOR_2_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOR_2_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_2_UNUSEDZEROS_get", N, 11);
    /* ((0x000000e8 + (N) * 512) bits 31:29) field FOR_2_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_2 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_2_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_2_BIT_FOR_2_UNUSEDZEROS_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FOR_2_BIT_FOR_2_UNUSEDZEROS_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOR_2_UNUSEDZEROS_get", N, value );

    return value;
}
static INLINE UINT32 eclass_field_range_FOR_2_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOR_2_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_2_UNUSEDZEROS_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_2_UNUSEDZEROS_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_2_UNUSEDZEROS_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000e8 + (N) * 512) bits 31:29) field FOR_2_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_2 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_2_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_2_BIT_FOR_2_UNUSEDZEROS_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FOR_2_BIT_FOR_2_UNUSEDZEROS_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FOR_2_BIT_FOR_2_UNUSEDZEROS_MSK, ECLASS120_REG_GEN_FILTER_CFG_FOR_2_BIT_FOR_2_UNUSEDZEROS_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_2_UNUSEDZEROS_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOR_2_INV_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOR_2_INV_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_2_INV_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOR_2_INV_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOR_2_INV_set", N, value );

    /* ((0x000000e8 + (N) * 512) bits 20) field FOR_2_INV of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_2 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FOR_2_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_2_BIT_FOR_2_INV_MSK,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_2_BIT_FOR_2_INV_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_FOR_2_INV_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOR_2_INV_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_2_INV_get", N, 11);
    /* ((0x000000e8 + (N) * 512) bits 20) field FOR_2_INV of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_2 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_2_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_2_BIT_FOR_2_INV_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FOR_2_BIT_FOR_2_INV_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOR_2_INV_get", N, value );

    return value;
}
static INLINE void eclass_field_FOR_2_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOR_2_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_2_FAND_EN_set", N, 11);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOR_2_FAND_EN_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOR_2_FAND_EN_set", N, value );

    /* ((0x000000e8 + (N) * 512) bits 19:16) field FOR_2_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_2 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FOR_2_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_2_BIT_FOR_2_FAND_EN_MSK,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_2_BIT_FOR_2_FAND_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_FOR_2_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOR_2_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_2_FAND_EN_get", N, 11);
    /* ((0x000000e8 + (N) * 512) bits 19:16) field FOR_2_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_2 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_2_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_2_BIT_FOR_2_FAND_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FOR_2_BIT_FOR_2_FAND_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOR_2_FAND_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOR_2_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOR_2_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_2_FAND_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_2_FAND_EN_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_2_FAND_EN_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_2_FAND_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000000e8 + (N) * 512) bits 19:16) field FOR_2_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_2 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000000e8 + (N) * 512) bits 19:16) field FOR_2_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_2 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FOR_2_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FOR_2_BIT_FOR_2_FAND_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_GEN_FILTER_CFG_FOR_2_BIT_FOR_2_FAND_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOR_2_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOR_2_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_2_FAND_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_2_FAND_EN_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_2_FAND_EN_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000e8 + (N) * 512) bits 19:16) field FOR_2_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_2 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_2_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_2_BIT_FOR_2_FAND_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FOR_2_BIT_FOR_2_FAND_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FOR_2_BIT_FOR_2_FAND_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FOR_2_BIT_FOR_2_FAND_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_2_FAND_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOR_2_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOR_2_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_2_F16BITS_EN_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOR_2_F16BITS_EN_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOR_2_F16BITS_EN_set", N, value );

    /* ((0x000000e8 + (N) * 512) bits 15:0) field FOR_2_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_2 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FOR_2_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_2_BIT_FOR_2_F16BITS_EN_MSK,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_2_BIT_FOR_2_F16BITS_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_FOR_2_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOR_2_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_2_F16BITS_EN_get", N, 11);
    /* ((0x000000e8 + (N) * 512) bits 15:0) field FOR_2_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_2 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_2_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_2_BIT_FOR_2_F16BITS_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FOR_2_BIT_FOR_2_F16BITS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOR_2_F16BITS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOR_2_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOR_2_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_2_F16BITS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_2_F16BITS_EN_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_2_F16BITS_EN_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_2_F16BITS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000000e8 + (N) * 512) bits 15:0) field FOR_2_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_2 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000000e8 + (N) * 512) bits 15:0) field FOR_2_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_2 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FOR_2_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FOR_2_BIT_FOR_2_F16BITS_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_GEN_FILTER_CFG_FOR_2_BIT_FOR_2_F16BITS_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOR_2_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOR_2_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_2_F16BITS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_2_F16BITS_EN_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_2_F16BITS_EN_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000e8 + (N) * 512) bits 15:0) field FOR_2_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_2 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_2_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_2_BIT_FOR_2_F16BITS_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FOR_2_BIT_FOR_2_F16BITS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FOR_2_BIT_FOR_2_F16BITS_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FOR_2_BIT_FOR_2_F16BITS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_2_F16BITS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 eclass_field_FOR_3_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOR_3_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_3_UNUSEDZEROS_get", N, 11);
    /* ((0x000000ec + (N) * 512) bits 31:29) field FOR_3_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_3 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_3_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_3_BIT_FOR_3_UNUSEDZEROS_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FOR_3_BIT_FOR_3_UNUSEDZEROS_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOR_3_UNUSEDZEROS_get", N, value );

    return value;
}
static INLINE UINT32 eclass_field_range_FOR_3_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOR_3_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_3_UNUSEDZEROS_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_3_UNUSEDZEROS_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_3_UNUSEDZEROS_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000ec + (N) * 512) bits 31:29) field FOR_3_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_3 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_3_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_3_BIT_FOR_3_UNUSEDZEROS_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FOR_3_BIT_FOR_3_UNUSEDZEROS_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FOR_3_BIT_FOR_3_UNUSEDZEROS_MSK, ECLASS120_REG_GEN_FILTER_CFG_FOR_3_BIT_FOR_3_UNUSEDZEROS_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_3_UNUSEDZEROS_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOR_3_INV_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOR_3_INV_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_3_INV_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOR_3_INV_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOR_3_INV_set", N, value );

    /* ((0x000000ec + (N) * 512) bits 20) field FOR_3_INV of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_3 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FOR_3_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_3_BIT_FOR_3_INV_MSK,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_3_BIT_FOR_3_INV_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_FOR_3_INV_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOR_3_INV_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_3_INV_get", N, 11);
    /* ((0x000000ec + (N) * 512) bits 20) field FOR_3_INV of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_3 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_3_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_3_BIT_FOR_3_INV_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FOR_3_BIT_FOR_3_INV_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOR_3_INV_get", N, value );

    return value;
}
static INLINE void eclass_field_FOR_3_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOR_3_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_3_FAND_EN_set", N, 11);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOR_3_FAND_EN_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOR_3_FAND_EN_set", N, value );

    /* ((0x000000ec + (N) * 512) bits 19:16) field FOR_3_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_3 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FOR_3_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_3_BIT_FOR_3_FAND_EN_MSK,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_3_BIT_FOR_3_FAND_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_FOR_3_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOR_3_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_3_FAND_EN_get", N, 11);
    /* ((0x000000ec + (N) * 512) bits 19:16) field FOR_3_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_3 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_3_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_3_BIT_FOR_3_FAND_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FOR_3_BIT_FOR_3_FAND_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOR_3_FAND_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOR_3_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOR_3_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_3_FAND_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_3_FAND_EN_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_3_FAND_EN_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_3_FAND_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000000ec + (N) * 512) bits 19:16) field FOR_3_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_3 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000000ec + (N) * 512) bits 19:16) field FOR_3_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_3 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FOR_3_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FOR_3_BIT_FOR_3_FAND_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_GEN_FILTER_CFG_FOR_3_BIT_FOR_3_FAND_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOR_3_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOR_3_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_3_FAND_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_3_FAND_EN_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_3_FAND_EN_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000ec + (N) * 512) bits 19:16) field FOR_3_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_3 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_3_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_3_BIT_FOR_3_FAND_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FOR_3_BIT_FOR_3_FAND_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FOR_3_BIT_FOR_3_FAND_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FOR_3_BIT_FOR_3_FAND_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_3_FAND_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOR_3_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOR_3_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_3_F16BITS_EN_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOR_3_F16BITS_EN_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOR_3_F16BITS_EN_set", N, value );

    /* ((0x000000ec + (N) * 512) bits 15:0) field FOR_3_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_3 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FOR_3_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_3_BIT_FOR_3_F16BITS_EN_MSK,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_3_BIT_FOR_3_F16BITS_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_FOR_3_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOR_3_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_3_F16BITS_EN_get", N, 11);
    /* ((0x000000ec + (N) * 512) bits 15:0) field FOR_3_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_3 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_3_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_3_BIT_FOR_3_F16BITS_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FOR_3_BIT_FOR_3_F16BITS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOR_3_F16BITS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOR_3_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOR_3_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_3_F16BITS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_3_F16BITS_EN_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_3_F16BITS_EN_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_3_F16BITS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000000ec + (N) * 512) bits 15:0) field FOR_3_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_3 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000000ec + (N) * 512) bits 15:0) field FOR_3_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_3 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FOR_3_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FOR_3_BIT_FOR_3_F16BITS_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_GEN_FILTER_CFG_FOR_3_BIT_FOR_3_F16BITS_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOR_3_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOR_3_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_3_F16BITS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_3_F16BITS_EN_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_3_F16BITS_EN_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000ec + (N) * 512) bits 15:0) field FOR_3_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_3 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_3_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_3_BIT_FOR_3_F16BITS_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FOR_3_BIT_FOR_3_F16BITS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FOR_3_BIT_FOR_3_F16BITS_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FOR_3_BIT_FOR_3_F16BITS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_3_F16BITS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 eclass_field_FOR_4_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOR_4_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_4_UNUSEDZEROS_get", N, 11);
    /* ((0x000000f0 + (N) * 512) bits 31:29) field FOR_4_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_4 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_4_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_4_BIT_FOR_4_UNUSEDZEROS_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FOR_4_BIT_FOR_4_UNUSEDZEROS_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOR_4_UNUSEDZEROS_get", N, value );

    return value;
}
static INLINE UINT32 eclass_field_range_FOR_4_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOR_4_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_4_UNUSEDZEROS_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_4_UNUSEDZEROS_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_4_UNUSEDZEROS_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000f0 + (N) * 512) bits 31:29) field FOR_4_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_4 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_4_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_4_BIT_FOR_4_UNUSEDZEROS_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FOR_4_BIT_FOR_4_UNUSEDZEROS_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FOR_4_BIT_FOR_4_UNUSEDZEROS_MSK, ECLASS120_REG_GEN_FILTER_CFG_FOR_4_BIT_FOR_4_UNUSEDZEROS_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_4_UNUSEDZEROS_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOR_4_INV_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOR_4_INV_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_4_INV_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOR_4_INV_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOR_4_INV_set", N, value );

    /* ((0x000000f0 + (N) * 512) bits 20) field FOR_4_INV of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_4 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FOR_4_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_4_BIT_FOR_4_INV_MSK,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_4_BIT_FOR_4_INV_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_FOR_4_INV_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOR_4_INV_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_4_INV_get", N, 11);
    /* ((0x000000f0 + (N) * 512) bits 20) field FOR_4_INV of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_4 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_4_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_4_BIT_FOR_4_INV_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FOR_4_BIT_FOR_4_INV_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOR_4_INV_get", N, value );

    return value;
}
static INLINE void eclass_field_FOR_4_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOR_4_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_4_FAND_EN_set", N, 11);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOR_4_FAND_EN_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOR_4_FAND_EN_set", N, value );

    /* ((0x000000f0 + (N) * 512) bits 19:16) field FOR_4_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_4 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FOR_4_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_4_BIT_FOR_4_FAND_EN_MSK,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_4_BIT_FOR_4_FAND_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_FOR_4_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOR_4_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_4_FAND_EN_get", N, 11);
    /* ((0x000000f0 + (N) * 512) bits 19:16) field FOR_4_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_4 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_4_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_4_BIT_FOR_4_FAND_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FOR_4_BIT_FOR_4_FAND_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOR_4_FAND_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOR_4_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOR_4_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_4_FAND_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_4_FAND_EN_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_4_FAND_EN_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_4_FAND_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000000f0 + (N) * 512) bits 19:16) field FOR_4_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_4 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000000f0 + (N) * 512) bits 19:16) field FOR_4_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_4 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FOR_4_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FOR_4_BIT_FOR_4_FAND_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_GEN_FILTER_CFG_FOR_4_BIT_FOR_4_FAND_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOR_4_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOR_4_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_4_FAND_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_4_FAND_EN_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_4_FAND_EN_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000f0 + (N) * 512) bits 19:16) field FOR_4_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_4 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_4_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_4_BIT_FOR_4_FAND_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FOR_4_BIT_FOR_4_FAND_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FOR_4_BIT_FOR_4_FAND_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FOR_4_BIT_FOR_4_FAND_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_4_FAND_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOR_4_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOR_4_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_4_F16BITS_EN_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOR_4_F16BITS_EN_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOR_4_F16BITS_EN_set", N, value );

    /* ((0x000000f0 + (N) * 512) bits 15:0) field FOR_4_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_4 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FOR_4_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_4_BIT_FOR_4_F16BITS_EN_MSK,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_4_BIT_FOR_4_F16BITS_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_FOR_4_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOR_4_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_4_F16BITS_EN_get", N, 11);
    /* ((0x000000f0 + (N) * 512) bits 15:0) field FOR_4_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_4 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_4_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_4_BIT_FOR_4_F16BITS_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FOR_4_BIT_FOR_4_F16BITS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOR_4_F16BITS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOR_4_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOR_4_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_4_F16BITS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_4_F16BITS_EN_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_4_F16BITS_EN_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_4_F16BITS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000000f0 + (N) * 512) bits 15:0) field FOR_4_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_4 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000000f0 + (N) * 512) bits 15:0) field FOR_4_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_4 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FOR_4_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FOR_4_BIT_FOR_4_F16BITS_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_GEN_FILTER_CFG_FOR_4_BIT_FOR_4_F16BITS_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOR_4_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOR_4_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_4_F16BITS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_4_F16BITS_EN_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_4_F16BITS_EN_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000f0 + (N) * 512) bits 15:0) field FOR_4_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_4 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_4_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_4_BIT_FOR_4_F16BITS_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FOR_4_BIT_FOR_4_F16BITS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FOR_4_BIT_FOR_4_F16BITS_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FOR_4_BIT_FOR_4_F16BITS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_4_F16BITS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 eclass_field_FOR_5_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOR_5_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_5_UNUSEDZEROS_get", N, 11);
    /* ((0x000000f4 + (N) * 512) bits 31:29) field FOR_5_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_5 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_5_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_5_BIT_FOR_5_UNUSEDZEROS_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FOR_5_BIT_FOR_5_UNUSEDZEROS_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOR_5_UNUSEDZEROS_get", N, value );

    return value;
}
static INLINE UINT32 eclass_field_range_FOR_5_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOR_5_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_5_UNUSEDZEROS_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_5_UNUSEDZEROS_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_5_UNUSEDZEROS_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000f4 + (N) * 512) bits 31:29) field FOR_5_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_5 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_5_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_5_BIT_FOR_5_UNUSEDZEROS_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FOR_5_BIT_FOR_5_UNUSEDZEROS_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FOR_5_BIT_FOR_5_UNUSEDZEROS_MSK, ECLASS120_REG_GEN_FILTER_CFG_FOR_5_BIT_FOR_5_UNUSEDZEROS_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_5_UNUSEDZEROS_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOR_5_INV_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOR_5_INV_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_5_INV_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOR_5_INV_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOR_5_INV_set", N, value );

    /* ((0x000000f4 + (N) * 512) bits 20) field FOR_5_INV of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_5 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FOR_5_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_5_BIT_FOR_5_INV_MSK,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_5_BIT_FOR_5_INV_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_FOR_5_INV_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOR_5_INV_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_5_INV_get", N, 11);
    /* ((0x000000f4 + (N) * 512) bits 20) field FOR_5_INV of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_5 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_5_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_5_BIT_FOR_5_INV_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FOR_5_BIT_FOR_5_INV_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOR_5_INV_get", N, value );

    return value;
}
static INLINE void eclass_field_FOR_5_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOR_5_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_5_FAND_EN_set", N, 11);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOR_5_FAND_EN_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOR_5_FAND_EN_set", N, value );

    /* ((0x000000f4 + (N) * 512) bits 19:16) field FOR_5_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_5 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FOR_5_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_5_BIT_FOR_5_FAND_EN_MSK,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_5_BIT_FOR_5_FAND_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_FOR_5_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOR_5_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_5_FAND_EN_get", N, 11);
    /* ((0x000000f4 + (N) * 512) bits 19:16) field FOR_5_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_5 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_5_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_5_BIT_FOR_5_FAND_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FOR_5_BIT_FOR_5_FAND_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOR_5_FAND_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOR_5_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOR_5_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_5_FAND_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_5_FAND_EN_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_5_FAND_EN_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_5_FAND_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000000f4 + (N) * 512) bits 19:16) field FOR_5_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_5 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000000f4 + (N) * 512) bits 19:16) field FOR_5_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_5 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FOR_5_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FOR_5_BIT_FOR_5_FAND_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_GEN_FILTER_CFG_FOR_5_BIT_FOR_5_FAND_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOR_5_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOR_5_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_5_FAND_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_5_FAND_EN_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_5_FAND_EN_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000f4 + (N) * 512) bits 19:16) field FOR_5_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_5 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_5_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_5_BIT_FOR_5_FAND_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FOR_5_BIT_FOR_5_FAND_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FOR_5_BIT_FOR_5_FAND_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FOR_5_BIT_FOR_5_FAND_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_5_FAND_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOR_5_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOR_5_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_5_F16BITS_EN_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOR_5_F16BITS_EN_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOR_5_F16BITS_EN_set", N, value );

    /* ((0x000000f4 + (N) * 512) bits 15:0) field FOR_5_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_5 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FOR_5_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_5_BIT_FOR_5_F16BITS_EN_MSK,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_5_BIT_FOR_5_F16BITS_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_FOR_5_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOR_5_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_5_F16BITS_EN_get", N, 11);
    /* ((0x000000f4 + (N) * 512) bits 15:0) field FOR_5_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_5 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_5_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_5_BIT_FOR_5_F16BITS_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FOR_5_BIT_FOR_5_F16BITS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOR_5_F16BITS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOR_5_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOR_5_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_5_F16BITS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_5_F16BITS_EN_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_5_F16BITS_EN_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_5_F16BITS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000000f4 + (N) * 512) bits 15:0) field FOR_5_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_5 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000000f4 + (N) * 512) bits 15:0) field FOR_5_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_5 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FOR_5_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FOR_5_BIT_FOR_5_F16BITS_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_GEN_FILTER_CFG_FOR_5_BIT_FOR_5_F16BITS_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOR_5_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOR_5_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_5_F16BITS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_5_F16BITS_EN_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_5_F16BITS_EN_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000f4 + (N) * 512) bits 15:0) field FOR_5_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_5 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_5_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_5_BIT_FOR_5_F16BITS_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FOR_5_BIT_FOR_5_F16BITS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FOR_5_BIT_FOR_5_F16BITS_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FOR_5_BIT_FOR_5_F16BITS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_5_F16BITS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 eclass_field_FOR_6_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOR_6_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_6_UNUSEDZEROS_get", N, 11);
    /* ((0x000000f8 + (N) * 512) bits 31:29) field FOR_6_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_6 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_6_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_6_BIT_FOR_6_UNUSEDZEROS_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FOR_6_BIT_FOR_6_UNUSEDZEROS_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOR_6_UNUSEDZEROS_get", N, value );

    return value;
}
static INLINE UINT32 eclass_field_range_FOR_6_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOR_6_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_6_UNUSEDZEROS_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_6_UNUSEDZEROS_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_6_UNUSEDZEROS_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000f8 + (N) * 512) bits 31:29) field FOR_6_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_6 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_6_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_6_BIT_FOR_6_UNUSEDZEROS_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FOR_6_BIT_FOR_6_UNUSEDZEROS_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FOR_6_BIT_FOR_6_UNUSEDZEROS_MSK, ECLASS120_REG_GEN_FILTER_CFG_FOR_6_BIT_FOR_6_UNUSEDZEROS_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_6_UNUSEDZEROS_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOR_6_INV_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOR_6_INV_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_6_INV_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOR_6_INV_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOR_6_INV_set", N, value );

    /* ((0x000000f8 + (N) * 512) bits 20) field FOR_6_INV of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_6 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FOR_6_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_6_BIT_FOR_6_INV_MSK,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_6_BIT_FOR_6_INV_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_FOR_6_INV_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOR_6_INV_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_6_INV_get", N, 11);
    /* ((0x000000f8 + (N) * 512) bits 20) field FOR_6_INV of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_6 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_6_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_6_BIT_FOR_6_INV_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FOR_6_BIT_FOR_6_INV_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOR_6_INV_get", N, value );

    return value;
}
static INLINE void eclass_field_FOR_6_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOR_6_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_6_FAND_EN_set", N, 11);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOR_6_FAND_EN_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOR_6_FAND_EN_set", N, value );

    /* ((0x000000f8 + (N) * 512) bits 19:16) field FOR_6_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_6 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FOR_6_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_6_BIT_FOR_6_FAND_EN_MSK,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_6_BIT_FOR_6_FAND_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_FOR_6_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOR_6_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_6_FAND_EN_get", N, 11);
    /* ((0x000000f8 + (N) * 512) bits 19:16) field FOR_6_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_6 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_6_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_6_BIT_FOR_6_FAND_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FOR_6_BIT_FOR_6_FAND_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOR_6_FAND_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOR_6_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOR_6_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_6_FAND_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_6_FAND_EN_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_6_FAND_EN_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_6_FAND_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000000f8 + (N) * 512) bits 19:16) field FOR_6_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_6 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000000f8 + (N) * 512) bits 19:16) field FOR_6_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_6 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FOR_6_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FOR_6_BIT_FOR_6_FAND_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_GEN_FILTER_CFG_FOR_6_BIT_FOR_6_FAND_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOR_6_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOR_6_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_6_FAND_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_6_FAND_EN_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_6_FAND_EN_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000f8 + (N) * 512) bits 19:16) field FOR_6_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_6 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_6_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_6_BIT_FOR_6_FAND_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FOR_6_BIT_FOR_6_FAND_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FOR_6_BIT_FOR_6_FAND_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FOR_6_BIT_FOR_6_FAND_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_6_FAND_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOR_6_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOR_6_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_6_F16BITS_EN_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOR_6_F16BITS_EN_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOR_6_F16BITS_EN_set", N, value );

    /* ((0x000000f8 + (N) * 512) bits 15:0) field FOR_6_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_6 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FOR_6_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_6_BIT_FOR_6_F16BITS_EN_MSK,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_6_BIT_FOR_6_F16BITS_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_FOR_6_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOR_6_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_6_F16BITS_EN_get", N, 11);
    /* ((0x000000f8 + (N) * 512) bits 15:0) field FOR_6_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_6 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_6_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_6_BIT_FOR_6_F16BITS_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FOR_6_BIT_FOR_6_F16BITS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOR_6_F16BITS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOR_6_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOR_6_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_6_F16BITS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_6_F16BITS_EN_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_6_F16BITS_EN_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_6_F16BITS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000000f8 + (N) * 512) bits 15:0) field FOR_6_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_6 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000000f8 + (N) * 512) bits 15:0) field FOR_6_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_6 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FOR_6_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FOR_6_BIT_FOR_6_F16BITS_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_GEN_FILTER_CFG_FOR_6_BIT_FOR_6_F16BITS_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOR_6_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOR_6_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_6_F16BITS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_6_F16BITS_EN_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_6_F16BITS_EN_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000f8 + (N) * 512) bits 15:0) field FOR_6_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_6 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_6_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_6_BIT_FOR_6_F16BITS_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FOR_6_BIT_FOR_6_F16BITS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FOR_6_BIT_FOR_6_F16BITS_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FOR_6_BIT_FOR_6_F16BITS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_6_F16BITS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 eclass_field_FOR_7_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOR_7_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_7_UNUSEDZEROS_get", N, 11);
    /* ((0x000000fc + (N) * 512) bits 31:29) field FOR_7_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_7 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_7_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_7_BIT_FOR_7_UNUSEDZEROS_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FOR_7_BIT_FOR_7_UNUSEDZEROS_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOR_7_UNUSEDZEROS_get", N, value );

    return value;
}
static INLINE UINT32 eclass_field_range_FOR_7_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOR_7_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_7_UNUSEDZEROS_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_7_UNUSEDZEROS_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_7_UNUSEDZEROS_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000fc + (N) * 512) bits 31:29) field FOR_7_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_7 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_7_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_7_BIT_FOR_7_UNUSEDZEROS_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FOR_7_BIT_FOR_7_UNUSEDZEROS_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FOR_7_BIT_FOR_7_UNUSEDZEROS_MSK, ECLASS120_REG_GEN_FILTER_CFG_FOR_7_BIT_FOR_7_UNUSEDZEROS_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_7_UNUSEDZEROS_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOR_7_INV_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOR_7_INV_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_7_INV_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOR_7_INV_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOR_7_INV_set", N, value );

    /* ((0x000000fc + (N) * 512) bits 20) field FOR_7_INV of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_7 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FOR_7_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_7_BIT_FOR_7_INV_MSK,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_7_BIT_FOR_7_INV_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_FOR_7_INV_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOR_7_INV_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_7_INV_get", N, 11);
    /* ((0x000000fc + (N) * 512) bits 20) field FOR_7_INV of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_7 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_7_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_7_BIT_FOR_7_INV_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FOR_7_BIT_FOR_7_INV_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOR_7_INV_get", N, value );

    return value;
}
static INLINE void eclass_field_FOR_7_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOR_7_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_7_FAND_EN_set", N, 11);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOR_7_FAND_EN_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOR_7_FAND_EN_set", N, value );

    /* ((0x000000fc + (N) * 512) bits 19:16) field FOR_7_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_7 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FOR_7_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_7_BIT_FOR_7_FAND_EN_MSK,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_7_BIT_FOR_7_FAND_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_FOR_7_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOR_7_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_7_FAND_EN_get", N, 11);
    /* ((0x000000fc + (N) * 512) bits 19:16) field FOR_7_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_7 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_7_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_7_BIT_FOR_7_FAND_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FOR_7_BIT_FOR_7_FAND_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOR_7_FAND_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOR_7_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOR_7_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_7_FAND_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_7_FAND_EN_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_7_FAND_EN_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_7_FAND_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000000fc + (N) * 512) bits 19:16) field FOR_7_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_7 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000000fc + (N) * 512) bits 19:16) field FOR_7_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_7 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FOR_7_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FOR_7_BIT_FOR_7_FAND_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_GEN_FILTER_CFG_FOR_7_BIT_FOR_7_FAND_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOR_7_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOR_7_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_7_FAND_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_7_FAND_EN_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_7_FAND_EN_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000fc + (N) * 512) bits 19:16) field FOR_7_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_7 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_7_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_7_BIT_FOR_7_FAND_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FOR_7_BIT_FOR_7_FAND_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FOR_7_BIT_FOR_7_FAND_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FOR_7_BIT_FOR_7_FAND_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_7_FAND_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOR_7_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOR_7_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_7_F16BITS_EN_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOR_7_F16BITS_EN_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOR_7_F16BITS_EN_set", N, value );

    /* ((0x000000fc + (N) * 512) bits 15:0) field FOR_7_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_7 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FOR_7_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_7_BIT_FOR_7_F16BITS_EN_MSK,
                                                     ECLASS120_REG_GEN_FILTER_CFG_FOR_7_BIT_FOR_7_F16BITS_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_FOR_7_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOR_7_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOR_7_F16BITS_EN_get", N, 11);
    /* ((0x000000fc + (N) * 512) bits 15:0) field FOR_7_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_7 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_7_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_7_BIT_FOR_7_F16BITS_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FOR_7_BIT_FOR_7_F16BITS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOR_7_F16BITS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOR_7_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOR_7_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_7_F16BITS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_7_F16BITS_EN_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_7_F16BITS_EN_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_7_F16BITS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000000fc + (N) * 512) bits 15:0) field FOR_7_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_7 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000000fc + (N) * 512) bits 15:0) field FOR_7_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_7 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FOR_7_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FOR_7_BIT_FOR_7_F16BITS_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_GEN_FILTER_CFG_FOR_7_BIT_FOR_7_F16BITS_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOR_7_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOR_7_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOR_7_F16BITS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOR_7_F16BITS_EN_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOR_7_F16BITS_EN_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000000fc + (N) * 512) bits 15:0) field FOR_7_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FOR_7 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FOR_7_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FOR_7_BIT_FOR_7_F16BITS_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FOR_7_BIT_FOR_7_F16BITS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FOR_7_BIT_FOR_7_F16BITS_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FOR_7_BIT_FOR_7_F16BITS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOR_7_F16BITS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 eclass_field_FOUT_0_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_0_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_0_UNUSEDZEROS_get", N, 11);
    /* ((0x00000110 + (N) * 512) bits 31:29) field FOUT_0_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_0_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_UNUSEDZEROS_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_UNUSEDZEROS_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_0_UNUSEDZEROS_get", N, value );

    return value;
}
static INLINE UINT32 eclass_field_range_FOUT_0_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOUT_0_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_0_UNUSEDZEROS_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_0_UNUSEDZEROS_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_0_UNUSEDZEROS_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000110 + (N) * 512) bits 31:29) field FOUT_0_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_0_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_UNUSEDZEROS_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_UNUSEDZEROS_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_UNUSEDZEROS_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_UNUSEDZEROS_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_0_UNUSEDZEROS_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOUT_0_EN_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOUT_0_EN_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_0_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOUT_0_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOUT_0_EN_set", N, value );

    /* ((0x00000110 + (N) * 512) bits 28) field FOUT_0_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FILTER_OUT_0_array_field_set( b_ptr,
                                                            h_ptr,
                                                            N,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_EN_MSK,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_EN_OFF,
                                                            value);
}

static INLINE UINT32 eclass_field_FOUT_0_EN_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_0_EN_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_0_EN_get", N, 11);
    /* ((0x00000110 + (N) * 512) bits 28) field FOUT_0_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_0_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_0_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_FOUT_0_FOR_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOUT_0_FOR_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_0_FOR_EN_set", N, 11);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOUT_0_FOR_EN_set", value, 255);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOUT_0_FOR_EN_set", N, value );

    /* ((0x00000110 + (N) * 512) bits 27:20) field FOUT_0_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FILTER_OUT_0_array_field_set( b_ptr,
                                                            h_ptr,
                                                            N,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_FOR_EN_MSK,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_FOR_EN_OFF,
                                                            value);
}

static INLINE UINT32 eclass_field_FOUT_0_FOR_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_0_FOR_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_0_FOR_EN_get", N, 11);
    /* ((0x00000110 + (N) * 512) bits 27:20) field FOUT_0_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_0_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_FOR_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_FOR_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_0_FOR_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOUT_0_FOR_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOUT_0_FOR_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_0_FOR_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_0_FOR_EN_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_0_FOR_EN_set", stop_bit, 7 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_0_FOR_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000110 + (N) * 512) bits 27:20) field FOUT_0_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000110 + (N) * 512) bits 27:20) field FOUT_0_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FILTER_OUT_0_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_FOR_EN_OFF + subfield_offset),
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_FOR_EN_OFF + subfield_offset,
                                                                value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOUT_0_FOR_EN_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOUT_0_FOR_EN_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_0_FOR_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_0_FOR_EN_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_0_FOR_EN_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000110 + (N) * 512) bits 27:20) field FOUT_0_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_0_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_FOR_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_FOR_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_FOR_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_FOR_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_0_FOR_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOUT_0_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOUT_0_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_0_FAND_EN_set", N, 11);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOUT_0_FAND_EN_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOUT_0_FAND_EN_set", N, value );

    /* ((0x00000110 + (N) * 512) bits 19:16) field FOUT_0_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FILTER_OUT_0_array_field_set( b_ptr,
                                                            h_ptr,
                                                            N,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_FAND_EN_MSK,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_FAND_EN_OFF,
                                                            value);
}

static INLINE UINT32 eclass_field_FOUT_0_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_0_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_0_FAND_EN_get", N, 11);
    /* ((0x00000110 + (N) * 512) bits 19:16) field FOUT_0_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_0_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_FAND_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_FAND_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_0_FAND_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOUT_0_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOUT_0_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_0_FAND_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_0_FAND_EN_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_0_FAND_EN_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_0_FAND_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000110 + (N) * 512) bits 19:16) field FOUT_0_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000110 + (N) * 512) bits 19:16) field FOUT_0_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FILTER_OUT_0_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_FAND_EN_OFF + subfield_offset),
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_FAND_EN_OFF + subfield_offset,
                                                                value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOUT_0_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOUT_0_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_0_FAND_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_0_FAND_EN_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_0_FAND_EN_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000110 + (N) * 512) bits 19:16) field FOUT_0_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_0_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_FAND_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_FAND_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_FAND_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_FAND_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_0_FAND_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOUT_0_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOUT_0_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_0_F16BITS_EN_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOUT_0_F16BITS_EN_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOUT_0_F16BITS_EN_set", N, value );

    /* ((0x00000110 + (N) * 512) bits 15:0) field FOUT_0_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FILTER_OUT_0_array_field_set( b_ptr,
                                                            h_ptr,
                                                            N,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_F16BITS_EN_MSK,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_F16BITS_EN_OFF,
                                                            value);
}

static INLINE UINT32 eclass_field_FOUT_0_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_0_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_0_F16BITS_EN_get", N, 11);
    /* ((0x00000110 + (N) * 512) bits 15:0) field FOUT_0_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_0_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_F16BITS_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_F16BITS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_0_F16BITS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOUT_0_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOUT_0_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_0_F16BITS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_0_F16BITS_EN_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_0_F16BITS_EN_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_0_F16BITS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000110 + (N) * 512) bits 15:0) field FOUT_0_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000110 + (N) * 512) bits 15:0) field FOUT_0_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FILTER_OUT_0_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_F16BITS_EN_OFF + subfield_offset),
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_F16BITS_EN_OFF + subfield_offset,
                                                                value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOUT_0_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOUT_0_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_0_F16BITS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_0_F16BITS_EN_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_0_F16BITS_EN_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000110 + (N) * 512) bits 15:0) field FOUT_0_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_0_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_F16BITS_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_F16BITS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_F16BITS_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_0_BIT_FOUT_0_F16BITS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_0_F16BITS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 eclass_field_FOUT_1_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_1_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_1_UNUSEDZEROS_get", N, 11);
    /* ((0x00000114 + (N) * 512) bits 31:29) field FOUT_1_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_1_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_UNUSEDZEROS_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_UNUSEDZEROS_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_1_UNUSEDZEROS_get", N, value );

    return value;
}
static INLINE UINT32 eclass_field_range_FOUT_1_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOUT_1_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_1_UNUSEDZEROS_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_1_UNUSEDZEROS_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_1_UNUSEDZEROS_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000114 + (N) * 512) bits 31:29) field FOUT_1_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_1_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_UNUSEDZEROS_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_UNUSEDZEROS_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_UNUSEDZEROS_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_UNUSEDZEROS_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_1_UNUSEDZEROS_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOUT_1_EN_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOUT_1_EN_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_1_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOUT_1_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOUT_1_EN_set", N, value );

    /* ((0x00000114 + (N) * 512) bits 28) field FOUT_1_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FILTER_OUT_1_array_field_set( b_ptr,
                                                            h_ptr,
                                                            N,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_EN_MSK,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_EN_OFF,
                                                            value);
}

static INLINE UINT32 eclass_field_FOUT_1_EN_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_1_EN_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_1_EN_get", N, 11);
    /* ((0x00000114 + (N) * 512) bits 28) field FOUT_1_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_1_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_1_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_FOUT_1_FOR_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOUT_1_FOR_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_1_FOR_EN_set", N, 11);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOUT_1_FOR_EN_set", value, 255);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOUT_1_FOR_EN_set", N, value );

    /* ((0x00000114 + (N) * 512) bits 27:20) field FOUT_1_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FILTER_OUT_1_array_field_set( b_ptr,
                                                            h_ptr,
                                                            N,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_FOR_EN_MSK,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_FOR_EN_OFF,
                                                            value);
}

static INLINE UINT32 eclass_field_FOUT_1_FOR_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_1_FOR_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_1_FOR_EN_get", N, 11);
    /* ((0x00000114 + (N) * 512) bits 27:20) field FOUT_1_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_1_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_FOR_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_FOR_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_1_FOR_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOUT_1_FOR_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOUT_1_FOR_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_1_FOR_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_1_FOR_EN_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_1_FOR_EN_set", stop_bit, 7 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_1_FOR_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000114 + (N) * 512) bits 27:20) field FOUT_1_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000114 + (N) * 512) bits 27:20) field FOUT_1_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FILTER_OUT_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_FOR_EN_OFF + subfield_offset),
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_FOR_EN_OFF + subfield_offset,
                                                                value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOUT_1_FOR_EN_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOUT_1_FOR_EN_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_1_FOR_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_1_FOR_EN_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_1_FOR_EN_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000114 + (N) * 512) bits 27:20) field FOUT_1_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_1_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_FOR_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_FOR_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_FOR_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_FOR_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_1_FOR_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOUT_1_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOUT_1_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_1_FAND_EN_set", N, 11);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOUT_1_FAND_EN_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOUT_1_FAND_EN_set", N, value );

    /* ((0x00000114 + (N) * 512) bits 19:16) field FOUT_1_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FILTER_OUT_1_array_field_set( b_ptr,
                                                            h_ptr,
                                                            N,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_FAND_EN_MSK,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_FAND_EN_OFF,
                                                            value);
}

static INLINE UINT32 eclass_field_FOUT_1_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_1_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_1_FAND_EN_get", N, 11);
    /* ((0x00000114 + (N) * 512) bits 19:16) field FOUT_1_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_1_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_FAND_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_FAND_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_1_FAND_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOUT_1_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOUT_1_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_1_FAND_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_1_FAND_EN_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_1_FAND_EN_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_1_FAND_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000114 + (N) * 512) bits 19:16) field FOUT_1_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000114 + (N) * 512) bits 19:16) field FOUT_1_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FILTER_OUT_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_FAND_EN_OFF + subfield_offset),
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_FAND_EN_OFF + subfield_offset,
                                                                value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOUT_1_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOUT_1_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_1_FAND_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_1_FAND_EN_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_1_FAND_EN_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000114 + (N) * 512) bits 19:16) field FOUT_1_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_1_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_FAND_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_FAND_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_FAND_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_FAND_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_1_FAND_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOUT_1_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOUT_1_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_1_F16BITS_EN_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOUT_1_F16BITS_EN_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOUT_1_F16BITS_EN_set", N, value );

    /* ((0x00000114 + (N) * 512) bits 15:0) field FOUT_1_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FILTER_OUT_1_array_field_set( b_ptr,
                                                            h_ptr,
                                                            N,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_F16BITS_EN_MSK,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_F16BITS_EN_OFF,
                                                            value);
}

static INLINE UINT32 eclass_field_FOUT_1_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_1_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_1_F16BITS_EN_get", N, 11);
    /* ((0x00000114 + (N) * 512) bits 15:0) field FOUT_1_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_1_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_F16BITS_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_F16BITS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_1_F16BITS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOUT_1_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOUT_1_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_1_F16BITS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_1_F16BITS_EN_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_1_F16BITS_EN_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_1_F16BITS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000114 + (N) * 512) bits 15:0) field FOUT_1_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000114 + (N) * 512) bits 15:0) field FOUT_1_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FILTER_OUT_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_F16BITS_EN_OFF + subfield_offset),
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_F16BITS_EN_OFF + subfield_offset,
                                                                value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOUT_1_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOUT_1_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_1_F16BITS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_1_F16BITS_EN_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_1_F16BITS_EN_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000114 + (N) * 512) bits 15:0) field FOUT_1_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_1_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_F16BITS_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_F16BITS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_F16BITS_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_1_BIT_FOUT_1_F16BITS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_1_F16BITS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 eclass_field_FOUT_2_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_2_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_2_UNUSEDZEROS_get", N, 11);
    /* ((0x00000118 + (N) * 512) bits 31:29) field FOUT_2_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_2_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_UNUSEDZEROS_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_UNUSEDZEROS_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_2_UNUSEDZEROS_get", N, value );

    return value;
}
static INLINE UINT32 eclass_field_range_FOUT_2_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOUT_2_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_2_UNUSEDZEROS_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_2_UNUSEDZEROS_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_2_UNUSEDZEROS_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000118 + (N) * 512) bits 31:29) field FOUT_2_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_2_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_UNUSEDZEROS_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_UNUSEDZEROS_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_UNUSEDZEROS_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_UNUSEDZEROS_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_2_UNUSEDZEROS_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOUT_2_EN_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOUT_2_EN_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_2_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOUT_2_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOUT_2_EN_set", N, value );

    /* ((0x00000118 + (N) * 512) bits 28) field FOUT_2_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FILTER_OUT_2_array_field_set( b_ptr,
                                                            h_ptr,
                                                            N,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_EN_MSK,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_EN_OFF,
                                                            value);
}

static INLINE UINT32 eclass_field_FOUT_2_EN_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_2_EN_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_2_EN_get", N, 11);
    /* ((0x00000118 + (N) * 512) bits 28) field FOUT_2_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_2_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_2_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_FOUT_2_FOR_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOUT_2_FOR_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_2_FOR_EN_set", N, 11);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOUT_2_FOR_EN_set", value, 255);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOUT_2_FOR_EN_set", N, value );

    /* ((0x00000118 + (N) * 512) bits 27:20) field FOUT_2_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FILTER_OUT_2_array_field_set( b_ptr,
                                                            h_ptr,
                                                            N,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_FOR_EN_MSK,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_FOR_EN_OFF,
                                                            value);
}

static INLINE UINT32 eclass_field_FOUT_2_FOR_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_2_FOR_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_2_FOR_EN_get", N, 11);
    /* ((0x00000118 + (N) * 512) bits 27:20) field FOUT_2_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_2_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_FOR_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_FOR_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_2_FOR_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOUT_2_FOR_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOUT_2_FOR_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_2_FOR_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_2_FOR_EN_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_2_FOR_EN_set", stop_bit, 7 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_2_FOR_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000118 + (N) * 512) bits 27:20) field FOUT_2_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000118 + (N) * 512) bits 27:20) field FOUT_2_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FILTER_OUT_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_FOR_EN_OFF + subfield_offset),
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_FOR_EN_OFF + subfield_offset,
                                                                value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOUT_2_FOR_EN_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOUT_2_FOR_EN_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_2_FOR_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_2_FOR_EN_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_2_FOR_EN_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000118 + (N) * 512) bits 27:20) field FOUT_2_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_2_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_FOR_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_FOR_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_FOR_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_FOR_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_2_FOR_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOUT_2_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOUT_2_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_2_FAND_EN_set", N, 11);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOUT_2_FAND_EN_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOUT_2_FAND_EN_set", N, value );

    /* ((0x00000118 + (N) * 512) bits 19:16) field FOUT_2_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FILTER_OUT_2_array_field_set( b_ptr,
                                                            h_ptr,
                                                            N,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_FAND_EN_MSK,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_FAND_EN_OFF,
                                                            value);
}

static INLINE UINT32 eclass_field_FOUT_2_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_2_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_2_FAND_EN_get", N, 11);
    /* ((0x00000118 + (N) * 512) bits 19:16) field FOUT_2_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_2_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_FAND_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_FAND_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_2_FAND_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOUT_2_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOUT_2_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_2_FAND_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_2_FAND_EN_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_2_FAND_EN_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_2_FAND_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000118 + (N) * 512) bits 19:16) field FOUT_2_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000118 + (N) * 512) bits 19:16) field FOUT_2_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FILTER_OUT_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_FAND_EN_OFF + subfield_offset),
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_FAND_EN_OFF + subfield_offset,
                                                                value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOUT_2_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOUT_2_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_2_FAND_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_2_FAND_EN_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_2_FAND_EN_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000118 + (N) * 512) bits 19:16) field FOUT_2_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_2_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_FAND_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_FAND_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_FAND_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_FAND_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_2_FAND_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOUT_2_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOUT_2_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_2_F16BITS_EN_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOUT_2_F16BITS_EN_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOUT_2_F16BITS_EN_set", N, value );

    /* ((0x00000118 + (N) * 512) bits 15:0) field FOUT_2_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FILTER_OUT_2_array_field_set( b_ptr,
                                                            h_ptr,
                                                            N,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_F16BITS_EN_MSK,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_F16BITS_EN_OFF,
                                                            value);
}

static INLINE UINT32 eclass_field_FOUT_2_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_2_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_2_F16BITS_EN_get", N, 11);
    /* ((0x00000118 + (N) * 512) bits 15:0) field FOUT_2_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_2_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_F16BITS_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_F16BITS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_2_F16BITS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOUT_2_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOUT_2_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_2_F16BITS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_2_F16BITS_EN_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_2_F16BITS_EN_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_2_F16BITS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000118 + (N) * 512) bits 15:0) field FOUT_2_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000118 + (N) * 512) bits 15:0) field FOUT_2_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FILTER_OUT_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_F16BITS_EN_OFF + subfield_offset),
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_F16BITS_EN_OFF + subfield_offset,
                                                                value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOUT_2_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOUT_2_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_2_F16BITS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_2_F16BITS_EN_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_2_F16BITS_EN_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000118 + (N) * 512) bits 15:0) field FOUT_2_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_2_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_F16BITS_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_F16BITS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_F16BITS_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_2_BIT_FOUT_2_F16BITS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_2_F16BITS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 eclass_field_FOUT_3_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_3_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_3_UNUSEDZEROS_get", N, 11);
    /* ((0x0000011c + (N) * 512) bits 31:29) field FOUT_3_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_3_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_UNUSEDZEROS_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_UNUSEDZEROS_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_3_UNUSEDZEROS_get", N, value );

    return value;
}
static INLINE UINT32 eclass_field_range_FOUT_3_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOUT_3_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_3_UNUSEDZEROS_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_3_UNUSEDZEROS_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_3_UNUSEDZEROS_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000011c + (N) * 512) bits 31:29) field FOUT_3_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_3_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_UNUSEDZEROS_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_UNUSEDZEROS_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_UNUSEDZEROS_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_UNUSEDZEROS_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_3_UNUSEDZEROS_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOUT_3_EN_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOUT_3_EN_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_3_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOUT_3_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOUT_3_EN_set", N, value );

    /* ((0x0000011c + (N) * 512) bits 28) field FOUT_3_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FILTER_OUT_3_array_field_set( b_ptr,
                                                            h_ptr,
                                                            N,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_EN_MSK,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_EN_OFF,
                                                            value);
}

static INLINE UINT32 eclass_field_FOUT_3_EN_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_3_EN_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_3_EN_get", N, 11);
    /* ((0x0000011c + (N) * 512) bits 28) field FOUT_3_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_3_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_3_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_FOUT_3_FOR_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOUT_3_FOR_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_3_FOR_EN_set", N, 11);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOUT_3_FOR_EN_set", value, 255);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOUT_3_FOR_EN_set", N, value );

    /* ((0x0000011c + (N) * 512) bits 27:20) field FOUT_3_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FILTER_OUT_3_array_field_set( b_ptr,
                                                            h_ptr,
                                                            N,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_FOR_EN_MSK,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_FOR_EN_OFF,
                                                            value);
}

static INLINE UINT32 eclass_field_FOUT_3_FOR_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_3_FOR_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_3_FOR_EN_get", N, 11);
    /* ((0x0000011c + (N) * 512) bits 27:20) field FOUT_3_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_3_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_FOR_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_FOR_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_3_FOR_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOUT_3_FOR_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOUT_3_FOR_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_3_FOR_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_3_FOR_EN_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_3_FOR_EN_set", stop_bit, 7 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_3_FOR_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000011c + (N) * 512) bits 27:20) field FOUT_3_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000011c + (N) * 512) bits 27:20) field FOUT_3_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FILTER_OUT_3_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_FOR_EN_OFF + subfield_offset),
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_FOR_EN_OFF + subfield_offset,
                                                                value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOUT_3_FOR_EN_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOUT_3_FOR_EN_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_3_FOR_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_3_FOR_EN_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_3_FOR_EN_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000011c + (N) * 512) bits 27:20) field FOUT_3_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_3_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_FOR_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_FOR_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_FOR_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_FOR_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_3_FOR_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOUT_3_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOUT_3_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_3_FAND_EN_set", N, 11);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOUT_3_FAND_EN_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOUT_3_FAND_EN_set", N, value );

    /* ((0x0000011c + (N) * 512) bits 19:16) field FOUT_3_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FILTER_OUT_3_array_field_set( b_ptr,
                                                            h_ptr,
                                                            N,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_FAND_EN_MSK,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_FAND_EN_OFF,
                                                            value);
}

static INLINE UINT32 eclass_field_FOUT_3_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_3_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_3_FAND_EN_get", N, 11);
    /* ((0x0000011c + (N) * 512) bits 19:16) field FOUT_3_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_3_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_FAND_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_FAND_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_3_FAND_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOUT_3_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOUT_3_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_3_FAND_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_3_FAND_EN_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_3_FAND_EN_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_3_FAND_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000011c + (N) * 512) bits 19:16) field FOUT_3_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000011c + (N) * 512) bits 19:16) field FOUT_3_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FILTER_OUT_3_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_FAND_EN_OFF + subfield_offset),
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_FAND_EN_OFF + subfield_offset,
                                                                value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOUT_3_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOUT_3_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_3_FAND_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_3_FAND_EN_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_3_FAND_EN_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000011c + (N) * 512) bits 19:16) field FOUT_3_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_3_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_FAND_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_FAND_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_FAND_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_FAND_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_3_FAND_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOUT_3_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOUT_3_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_3_F16BITS_EN_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOUT_3_F16BITS_EN_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOUT_3_F16BITS_EN_set", N, value );

    /* ((0x0000011c + (N) * 512) bits 15:0) field FOUT_3_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FILTER_OUT_3_array_field_set( b_ptr,
                                                            h_ptr,
                                                            N,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_F16BITS_EN_MSK,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_F16BITS_EN_OFF,
                                                            value);
}

static INLINE UINT32 eclass_field_FOUT_3_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_3_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_3_F16BITS_EN_get", N, 11);
    /* ((0x0000011c + (N) * 512) bits 15:0) field FOUT_3_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_3_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_F16BITS_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_F16BITS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_3_F16BITS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOUT_3_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOUT_3_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_3_F16BITS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_3_F16BITS_EN_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_3_F16BITS_EN_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_3_F16BITS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000011c + (N) * 512) bits 15:0) field FOUT_3_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000011c + (N) * 512) bits 15:0) field FOUT_3_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FILTER_OUT_3_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_F16BITS_EN_OFF + subfield_offset),
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_F16BITS_EN_OFF + subfield_offset,
                                                                value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOUT_3_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOUT_3_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_3_F16BITS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_3_F16BITS_EN_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_3_F16BITS_EN_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000011c + (N) * 512) bits 15:0) field FOUT_3_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_3_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_F16BITS_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_F16BITS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_F16BITS_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_3_BIT_FOUT_3_F16BITS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_3_F16BITS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 eclass_field_FOUT_4_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_4_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_4_UNUSEDZEROS_get", N, 11);
    /* ((0x00000120 + (N) * 512) bits 31:29) field FOUT_4_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_4_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_UNUSEDZEROS_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_UNUSEDZEROS_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_4_UNUSEDZEROS_get", N, value );

    return value;
}
static INLINE UINT32 eclass_field_range_FOUT_4_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOUT_4_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_4_UNUSEDZEROS_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_4_UNUSEDZEROS_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_4_UNUSEDZEROS_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000120 + (N) * 512) bits 31:29) field FOUT_4_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_4_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_UNUSEDZEROS_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_UNUSEDZEROS_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_UNUSEDZEROS_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_UNUSEDZEROS_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_4_UNUSEDZEROS_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOUT_4_EN_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOUT_4_EN_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_4_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOUT_4_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOUT_4_EN_set", N, value );

    /* ((0x00000120 + (N) * 512) bits 28) field FOUT_4_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FILTER_OUT_4_array_field_set( b_ptr,
                                                            h_ptr,
                                                            N,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_EN_MSK,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_EN_OFF,
                                                            value);
}

static INLINE UINT32 eclass_field_FOUT_4_EN_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_4_EN_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_4_EN_get", N, 11);
    /* ((0x00000120 + (N) * 512) bits 28) field FOUT_4_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_4_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_4_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_FOUT_4_FOR_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOUT_4_FOR_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_4_FOR_EN_set", N, 11);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOUT_4_FOR_EN_set", value, 255);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOUT_4_FOR_EN_set", N, value );

    /* ((0x00000120 + (N) * 512) bits 27:20) field FOUT_4_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FILTER_OUT_4_array_field_set( b_ptr,
                                                            h_ptr,
                                                            N,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_FOR_EN_MSK,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_FOR_EN_OFF,
                                                            value);
}

static INLINE UINT32 eclass_field_FOUT_4_FOR_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_4_FOR_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_4_FOR_EN_get", N, 11);
    /* ((0x00000120 + (N) * 512) bits 27:20) field FOUT_4_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_4_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_FOR_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_FOR_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_4_FOR_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOUT_4_FOR_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOUT_4_FOR_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_4_FOR_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_4_FOR_EN_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_4_FOR_EN_set", stop_bit, 7 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_4_FOR_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000120 + (N) * 512) bits 27:20) field FOUT_4_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000120 + (N) * 512) bits 27:20) field FOUT_4_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FILTER_OUT_4_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_FOR_EN_OFF + subfield_offset),
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_FOR_EN_OFF + subfield_offset,
                                                                value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOUT_4_FOR_EN_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOUT_4_FOR_EN_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_4_FOR_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_4_FOR_EN_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_4_FOR_EN_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000120 + (N) * 512) bits 27:20) field FOUT_4_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_4_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_FOR_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_FOR_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_FOR_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_FOR_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_4_FOR_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOUT_4_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOUT_4_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_4_FAND_EN_set", N, 11);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOUT_4_FAND_EN_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOUT_4_FAND_EN_set", N, value );

    /* ((0x00000120 + (N) * 512) bits 19:16) field FOUT_4_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FILTER_OUT_4_array_field_set( b_ptr,
                                                            h_ptr,
                                                            N,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_FAND_EN_MSK,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_FAND_EN_OFF,
                                                            value);
}

static INLINE UINT32 eclass_field_FOUT_4_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_4_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_4_FAND_EN_get", N, 11);
    /* ((0x00000120 + (N) * 512) bits 19:16) field FOUT_4_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_4_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_FAND_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_FAND_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_4_FAND_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOUT_4_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOUT_4_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_4_FAND_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_4_FAND_EN_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_4_FAND_EN_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_4_FAND_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000120 + (N) * 512) bits 19:16) field FOUT_4_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000120 + (N) * 512) bits 19:16) field FOUT_4_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FILTER_OUT_4_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_FAND_EN_OFF + subfield_offset),
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_FAND_EN_OFF + subfield_offset,
                                                                value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOUT_4_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOUT_4_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_4_FAND_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_4_FAND_EN_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_4_FAND_EN_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000120 + (N) * 512) bits 19:16) field FOUT_4_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_4_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_FAND_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_FAND_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_FAND_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_FAND_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_4_FAND_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOUT_4_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOUT_4_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_4_F16BITS_EN_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOUT_4_F16BITS_EN_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOUT_4_F16BITS_EN_set", N, value );

    /* ((0x00000120 + (N) * 512) bits 15:0) field FOUT_4_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FILTER_OUT_4_array_field_set( b_ptr,
                                                            h_ptr,
                                                            N,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_F16BITS_EN_MSK,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_F16BITS_EN_OFF,
                                                            value);
}

static INLINE UINT32 eclass_field_FOUT_4_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_4_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_4_F16BITS_EN_get", N, 11);
    /* ((0x00000120 + (N) * 512) bits 15:0) field FOUT_4_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_4_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_F16BITS_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_F16BITS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_4_F16BITS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOUT_4_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOUT_4_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_4_F16BITS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_4_F16BITS_EN_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_4_F16BITS_EN_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_4_F16BITS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000120 + (N) * 512) bits 15:0) field FOUT_4_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000120 + (N) * 512) bits 15:0) field FOUT_4_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FILTER_OUT_4_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_F16BITS_EN_OFF + subfield_offset),
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_F16BITS_EN_OFF + subfield_offset,
                                                                value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOUT_4_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOUT_4_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_4_F16BITS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_4_F16BITS_EN_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_4_F16BITS_EN_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000120 + (N) * 512) bits 15:0) field FOUT_4_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_4_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_F16BITS_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_F16BITS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_F16BITS_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_4_BIT_FOUT_4_F16BITS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_4_F16BITS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 eclass_field_FOUT_5_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_5_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_5_UNUSEDZEROS_get", N, 11);
    /* ((0x00000124 + (N) * 512) bits 31:29) field FOUT_5_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_5_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_UNUSEDZEROS_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_UNUSEDZEROS_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_5_UNUSEDZEROS_get", N, value );

    return value;
}
static INLINE UINT32 eclass_field_range_FOUT_5_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOUT_5_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_5_UNUSEDZEROS_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_5_UNUSEDZEROS_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_5_UNUSEDZEROS_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000124 + (N) * 512) bits 31:29) field FOUT_5_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_5_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_UNUSEDZEROS_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_UNUSEDZEROS_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_UNUSEDZEROS_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_UNUSEDZEROS_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_5_UNUSEDZEROS_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOUT_5_EN_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOUT_5_EN_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_5_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOUT_5_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOUT_5_EN_set", N, value );

    /* ((0x00000124 + (N) * 512) bits 28) field FOUT_5_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FILTER_OUT_5_array_field_set( b_ptr,
                                                            h_ptr,
                                                            N,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_EN_MSK,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_EN_OFF,
                                                            value);
}

static INLINE UINT32 eclass_field_FOUT_5_EN_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_5_EN_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_5_EN_get", N, 11);
    /* ((0x00000124 + (N) * 512) bits 28) field FOUT_5_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_5_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_5_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_FOUT_5_FOR_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOUT_5_FOR_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_5_FOR_EN_set", N, 11);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOUT_5_FOR_EN_set", value, 255);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOUT_5_FOR_EN_set", N, value );

    /* ((0x00000124 + (N) * 512) bits 27:20) field FOUT_5_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FILTER_OUT_5_array_field_set( b_ptr,
                                                            h_ptr,
                                                            N,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_FOR_EN_MSK,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_FOR_EN_OFF,
                                                            value);
}

static INLINE UINT32 eclass_field_FOUT_5_FOR_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_5_FOR_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_5_FOR_EN_get", N, 11);
    /* ((0x00000124 + (N) * 512) bits 27:20) field FOUT_5_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_5_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_FOR_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_FOR_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_5_FOR_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOUT_5_FOR_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOUT_5_FOR_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_5_FOR_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_5_FOR_EN_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_5_FOR_EN_set", stop_bit, 7 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_5_FOR_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000124 + (N) * 512) bits 27:20) field FOUT_5_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000124 + (N) * 512) bits 27:20) field FOUT_5_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FILTER_OUT_5_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_FOR_EN_OFF + subfield_offset),
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_FOR_EN_OFF + subfield_offset,
                                                                value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOUT_5_FOR_EN_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOUT_5_FOR_EN_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_5_FOR_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_5_FOR_EN_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_5_FOR_EN_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000124 + (N) * 512) bits 27:20) field FOUT_5_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_5_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_FOR_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_FOR_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_FOR_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_FOR_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_5_FOR_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOUT_5_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOUT_5_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_5_FAND_EN_set", N, 11);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOUT_5_FAND_EN_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOUT_5_FAND_EN_set", N, value );

    /* ((0x00000124 + (N) * 512) bits 19:16) field FOUT_5_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FILTER_OUT_5_array_field_set( b_ptr,
                                                            h_ptr,
                                                            N,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_FAND_EN_MSK,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_FAND_EN_OFF,
                                                            value);
}

static INLINE UINT32 eclass_field_FOUT_5_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_5_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_5_FAND_EN_get", N, 11);
    /* ((0x00000124 + (N) * 512) bits 19:16) field FOUT_5_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_5_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_FAND_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_FAND_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_5_FAND_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOUT_5_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOUT_5_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_5_FAND_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_5_FAND_EN_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_5_FAND_EN_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_5_FAND_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000124 + (N) * 512) bits 19:16) field FOUT_5_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000124 + (N) * 512) bits 19:16) field FOUT_5_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FILTER_OUT_5_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_FAND_EN_OFF + subfield_offset),
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_FAND_EN_OFF + subfield_offset,
                                                                value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOUT_5_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOUT_5_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_5_FAND_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_5_FAND_EN_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_5_FAND_EN_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000124 + (N) * 512) bits 19:16) field FOUT_5_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_5_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_FAND_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_FAND_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_FAND_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_FAND_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_5_FAND_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOUT_5_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOUT_5_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_5_F16BITS_EN_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOUT_5_F16BITS_EN_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOUT_5_F16BITS_EN_set", N, value );

    /* ((0x00000124 + (N) * 512) bits 15:0) field FOUT_5_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FILTER_OUT_5_array_field_set( b_ptr,
                                                            h_ptr,
                                                            N,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_F16BITS_EN_MSK,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_F16BITS_EN_OFF,
                                                            value);
}

static INLINE UINT32 eclass_field_FOUT_5_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_5_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_5_F16BITS_EN_get", N, 11);
    /* ((0x00000124 + (N) * 512) bits 15:0) field FOUT_5_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_5_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_F16BITS_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_F16BITS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_5_F16BITS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOUT_5_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOUT_5_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_5_F16BITS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_5_F16BITS_EN_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_5_F16BITS_EN_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_5_F16BITS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000124 + (N) * 512) bits 15:0) field FOUT_5_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000124 + (N) * 512) bits 15:0) field FOUT_5_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FILTER_OUT_5_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_F16BITS_EN_OFF + subfield_offset),
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_F16BITS_EN_OFF + subfield_offset,
                                                                value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOUT_5_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOUT_5_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_5_F16BITS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_5_F16BITS_EN_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_5_F16BITS_EN_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000124 + (N) * 512) bits 15:0) field FOUT_5_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_5_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_F16BITS_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_F16BITS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_F16BITS_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_5_BIT_FOUT_5_F16BITS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_5_F16BITS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 eclass_field_FOUT_6_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_6_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_6_UNUSEDZEROS_get", N, 11);
    /* ((0x00000128 + (N) * 512) bits 31:29) field FOUT_6_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_6_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_UNUSEDZEROS_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_UNUSEDZEROS_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_6_UNUSEDZEROS_get", N, value );

    return value;
}
static INLINE UINT32 eclass_field_range_FOUT_6_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOUT_6_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_6_UNUSEDZEROS_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_6_UNUSEDZEROS_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_6_UNUSEDZEROS_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000128 + (N) * 512) bits 31:29) field FOUT_6_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_6_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_UNUSEDZEROS_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_UNUSEDZEROS_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_UNUSEDZEROS_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_UNUSEDZEROS_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_6_UNUSEDZEROS_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOUT_6_EN_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOUT_6_EN_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_6_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOUT_6_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOUT_6_EN_set", N, value );

    /* ((0x00000128 + (N) * 512) bits 28) field FOUT_6_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FILTER_OUT_6_array_field_set( b_ptr,
                                                            h_ptr,
                                                            N,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_EN_MSK,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_EN_OFF,
                                                            value);
}

static INLINE UINT32 eclass_field_FOUT_6_EN_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_6_EN_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_6_EN_get", N, 11);
    /* ((0x00000128 + (N) * 512) bits 28) field FOUT_6_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_6_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_6_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_FOUT_6_FOR_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOUT_6_FOR_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_6_FOR_EN_set", N, 11);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOUT_6_FOR_EN_set", value, 255);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOUT_6_FOR_EN_set", N, value );

    /* ((0x00000128 + (N) * 512) bits 27:20) field FOUT_6_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FILTER_OUT_6_array_field_set( b_ptr,
                                                            h_ptr,
                                                            N,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_FOR_EN_MSK,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_FOR_EN_OFF,
                                                            value);
}

static INLINE UINT32 eclass_field_FOUT_6_FOR_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_6_FOR_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_6_FOR_EN_get", N, 11);
    /* ((0x00000128 + (N) * 512) bits 27:20) field FOUT_6_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_6_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_FOR_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_FOR_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_6_FOR_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOUT_6_FOR_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOUT_6_FOR_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_6_FOR_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_6_FOR_EN_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_6_FOR_EN_set", stop_bit, 7 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_6_FOR_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000128 + (N) * 512) bits 27:20) field FOUT_6_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000128 + (N) * 512) bits 27:20) field FOUT_6_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FILTER_OUT_6_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_FOR_EN_OFF + subfield_offset),
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_FOR_EN_OFF + subfield_offset,
                                                                value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOUT_6_FOR_EN_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOUT_6_FOR_EN_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_6_FOR_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_6_FOR_EN_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_6_FOR_EN_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000128 + (N) * 512) bits 27:20) field FOUT_6_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_6_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_FOR_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_FOR_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_FOR_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_FOR_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_6_FOR_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOUT_6_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOUT_6_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_6_FAND_EN_set", N, 11);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOUT_6_FAND_EN_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOUT_6_FAND_EN_set", N, value );

    /* ((0x00000128 + (N) * 512) bits 19:16) field FOUT_6_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FILTER_OUT_6_array_field_set( b_ptr,
                                                            h_ptr,
                                                            N,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_FAND_EN_MSK,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_FAND_EN_OFF,
                                                            value);
}

static INLINE UINT32 eclass_field_FOUT_6_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_6_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_6_FAND_EN_get", N, 11);
    /* ((0x00000128 + (N) * 512) bits 19:16) field FOUT_6_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_6_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_FAND_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_FAND_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_6_FAND_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOUT_6_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOUT_6_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_6_FAND_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_6_FAND_EN_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_6_FAND_EN_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_6_FAND_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000128 + (N) * 512) bits 19:16) field FOUT_6_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000128 + (N) * 512) bits 19:16) field FOUT_6_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FILTER_OUT_6_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_FAND_EN_OFF + subfield_offset),
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_FAND_EN_OFF + subfield_offset,
                                                                value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOUT_6_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOUT_6_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_6_FAND_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_6_FAND_EN_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_6_FAND_EN_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000128 + (N) * 512) bits 19:16) field FOUT_6_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_6_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_FAND_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_FAND_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_FAND_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_FAND_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_6_FAND_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOUT_6_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOUT_6_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_6_F16BITS_EN_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOUT_6_F16BITS_EN_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOUT_6_F16BITS_EN_set", N, value );

    /* ((0x00000128 + (N) * 512) bits 15:0) field FOUT_6_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FILTER_OUT_6_array_field_set( b_ptr,
                                                            h_ptr,
                                                            N,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_F16BITS_EN_MSK,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_F16BITS_EN_OFF,
                                                            value);
}

static INLINE UINT32 eclass_field_FOUT_6_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_6_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_6_F16BITS_EN_get", N, 11);
    /* ((0x00000128 + (N) * 512) bits 15:0) field FOUT_6_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_6_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_F16BITS_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_F16BITS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_6_F16BITS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOUT_6_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOUT_6_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_6_F16BITS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_6_F16BITS_EN_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_6_F16BITS_EN_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_6_F16BITS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000128 + (N) * 512) bits 15:0) field FOUT_6_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000128 + (N) * 512) bits 15:0) field FOUT_6_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FILTER_OUT_6_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_F16BITS_EN_OFF + subfield_offset),
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_F16BITS_EN_OFF + subfield_offset,
                                                                value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOUT_6_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOUT_6_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_6_F16BITS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_6_F16BITS_EN_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_6_F16BITS_EN_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000128 + (N) * 512) bits 15:0) field FOUT_6_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_6_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_F16BITS_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_F16BITS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_F16BITS_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_6_BIT_FOUT_6_F16BITS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_6_F16BITS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 eclass_field_FOUT_7_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_7_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_7_UNUSEDZEROS_get", N, 11);
    /* ((0x0000012c + (N) * 512) bits 31:29) field FOUT_7_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_7_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_UNUSEDZEROS_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_UNUSEDZEROS_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_7_UNUSEDZEROS_get", N, value );

    return value;
}
static INLINE UINT32 eclass_field_range_FOUT_7_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOUT_7_UNUSEDZEROS_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_7_UNUSEDZEROS_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_7_UNUSEDZEROS_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_7_UNUSEDZEROS_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000012c + (N) * 512) bits 31:29) field FOUT_7_UNUSEDZEROS of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_7_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_UNUSEDZEROS_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_UNUSEDZEROS_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_UNUSEDZEROS_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_UNUSEDZEROS_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_7_UNUSEDZEROS_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOUT_7_EN_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOUT_7_EN_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_7_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOUT_7_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOUT_7_EN_set", N, value );

    /* ((0x0000012c + (N) * 512) bits 28) field FOUT_7_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FILTER_OUT_7_array_field_set( b_ptr,
                                                            h_ptr,
                                                            N,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_EN_MSK,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_EN_OFF,
                                                            value);
}

static INLINE UINT32 eclass_field_FOUT_7_EN_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_7_EN_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_7_EN_get", N, 11);
    /* ((0x0000012c + (N) * 512) bits 28) field FOUT_7_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_7_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_7_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_FOUT_7_FOR_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOUT_7_FOR_EN_set( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N,
                                                   UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_7_FOR_EN_set", N, 11);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOUT_7_FOR_EN_set", value, 255);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOUT_7_FOR_EN_set", N, value );

    /* ((0x0000012c + (N) * 512) bits 27:20) field FOUT_7_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FILTER_OUT_7_array_field_set( b_ptr,
                                                            h_ptr,
                                                            N,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_FOR_EN_MSK,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_FOR_EN_OFF,
                                                            value);
}

static INLINE UINT32 eclass_field_FOUT_7_FOR_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_7_FOR_EN_get( eclass_buffer_t *b_ptr,
                                                     eclass_handle_t *h_ptr,
                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_7_FOR_EN_get", N, 11);
    /* ((0x0000012c + (N) * 512) bits 27:20) field FOUT_7_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_7_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_FOR_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_FOR_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_7_FOR_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOUT_7_FOR_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOUT_7_FOR_EN_set( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_7_FOR_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_7_FOR_EN_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_7_FOR_EN_set", stop_bit, 7 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_7_FOR_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000012c + (N) * 512) bits 27:20) field FOUT_7_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000012c + (N) * 512) bits 27:20) field FOUT_7_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FILTER_OUT_7_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_FOR_EN_OFF + subfield_offset),
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_FOR_EN_OFF + subfield_offset,
                                                                value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOUT_7_FOR_EN_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOUT_7_FOR_EN_get( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_7_FOR_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_7_FOR_EN_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_7_FOR_EN_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000012c + (N) * 512) bits 27:20) field FOUT_7_FOR_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_7_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_FOR_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_FOR_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_FOR_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_FOR_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_7_FOR_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOUT_7_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOUT_7_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_7_FAND_EN_set", N, 11);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOUT_7_FAND_EN_set", value, 15);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOUT_7_FAND_EN_set", N, value );

    /* ((0x0000012c + (N) * 512) bits 19:16) field FOUT_7_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FILTER_OUT_7_array_field_set( b_ptr,
                                                            h_ptr,
                                                            N,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_FAND_EN_MSK,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_FAND_EN_OFF,
                                                            value);
}

static INLINE UINT32 eclass_field_FOUT_7_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_7_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_7_FAND_EN_get", N, 11);
    /* ((0x0000012c + (N) * 512) bits 19:16) field FOUT_7_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_7_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_FAND_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_FAND_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_7_FAND_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOUT_7_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOUT_7_FAND_EN_set( eclass_buffer_t *b_ptr,
                                                          eclass_handle_t *h_ptr,
                                                          UINT32  N,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_7_FAND_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_7_FAND_EN_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_7_FAND_EN_set", stop_bit, 3 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_7_FAND_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000012c + (N) * 512) bits 19:16) field FOUT_7_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000012c + (N) * 512) bits 19:16) field FOUT_7_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FILTER_OUT_7_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_FAND_EN_OFF + subfield_offset),
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_FAND_EN_OFF + subfield_offset,
                                                                value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOUT_7_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOUT_7_FAND_EN_get( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_7_FAND_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_7_FAND_EN_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_7_FAND_EN_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000012c + (N) * 512) bits 19:16) field FOUT_7_FAND_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_7_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_FAND_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_FAND_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_FAND_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_FAND_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_7_FAND_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_FOUT_7_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_FOUT_7_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_7_F16BITS_EN_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_FOUT_7_F16BITS_EN_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_FOUT_7_F16BITS_EN_set", N, value );

    /* ((0x0000012c + (N) * 512) bits 15:0) field FOUT_7_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7 index N=0..11 */
    eclass_reg_GEN_FILTER_CFG_FILTER_OUT_7_array_field_set( b_ptr,
                                                            h_ptr,
                                                            N,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_F16BITS_EN_MSK,
                                                            ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_F16BITS_EN_OFF,
                                                            value);
}

static INLINE UINT32 eclass_field_FOUT_7_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_FOUT_7_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_FOUT_7_F16BITS_EN_get", N, 11);
    /* ((0x0000012c + (N) * 512) bits 15:0) field FOUT_7_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_7_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_F16BITS_EN_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_F16BITS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_FOUT_7_F16BITS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_FOUT_7_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_FOUT_7_F16BITS_EN_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_7_F16BITS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_7_F16BITS_EN_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_7_F16BITS_EN_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_7_F16BITS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000012c + (N) * 512) bits 15:0) field FOUT_7_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000012c + (N) * 512) bits 15:0) field FOUT_7_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7 index N=0..11 */
        eclass_reg_GEN_FILTER_CFG_FILTER_OUT_7_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_F16BITS_EN_OFF + subfield_offset),
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_F16BITS_EN_OFF + subfield_offset,
                                                                value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_FOUT_7_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_FOUT_7_F16BITS_EN_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_FOUT_7_F16BITS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_FOUT_7_F16BITS_EN_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_FOUT_7_F16BITS_EN_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000012c + (N) * 512) bits 15:0) field FOUT_7_F16BITS_EN of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7 index N=0..11 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER_OUT_7_array_read( b_ptr,
                                                                   h_ptr,
                                                                   N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_F16BITS_EN_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_F16BITS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_F16BITS_EN_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER_OUT_7_BIT_FOUT_7_F16BITS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_FOUT_7_F16BITS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_AND0_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_AND0_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND0_INPUT_VLANMPLS_EN_set", N, 11);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_AND0_INPUT_VLANMPLS_EN_set", value, 63);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_AND0_INPUT_VLANMPLS_EN_set", N, value );

    /* ((0x00000140 + (N) * 512) bits 31:26) field ROUTING_AND0_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_0 index N=0..11 */
    eclass_reg_ROUTING_AND_FILTER_0_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_0_BIT_ROUTING_AND0_INPUT_VLANMPLS_EN_MSK,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_0_BIT_ROUTING_AND0_INPUT_VLANMPLS_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_ROUTING_AND0_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_AND0_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND0_INPUT_VLANMPLS_EN_get", N, 11);
    /* ((0x00000140 + (N) * 512) bits 31:26) field ROUTING_AND0_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_0 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_0_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_0_BIT_ROUTING_AND0_INPUT_VLANMPLS_EN_MSK) >> ECLASS120_REG_ROUTING_AND_FILTER_0_BIT_ROUTING_AND0_INPUT_VLANMPLS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_AND0_INPUT_VLANMPLS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_AND0_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_AND0_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND0_INPUT_VLANMPLS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND0_INPUT_VLANMPLS_EN_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND0_INPUT_VLANMPLS_EN_set", stop_bit, 5 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND0_INPUT_VLANMPLS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000140 + (N) * 512) bits 31:26) field ROUTING_AND0_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_0 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000140 + (N) * 512) bits 31:26) field ROUTING_AND0_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_0 index N=0..11 */
        eclass_reg_ROUTING_AND_FILTER_0_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_ROUTING_AND_FILTER_0_BIT_ROUTING_AND0_INPUT_VLANMPLS_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_ROUTING_AND_FILTER_0_BIT_ROUTING_AND0_INPUT_VLANMPLS_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_AND0_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_AND0_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND0_INPUT_VLANMPLS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND0_INPUT_VLANMPLS_EN_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND0_INPUT_VLANMPLS_EN_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000140 + (N) * 512) bits 31:26) field ROUTING_AND0_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_0 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_0_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_0_BIT_ROUTING_AND0_INPUT_VLANMPLS_EN_MSK)
                  >> ECLASS120_REG_ROUTING_AND_FILTER_0_BIT_ROUTING_AND0_INPUT_VLANMPLS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_AND_FILTER_0_BIT_ROUTING_AND0_INPUT_VLANMPLS_EN_MSK, ECLASS120_REG_ROUTING_AND_FILTER_0_BIT_ROUTING_AND0_INPUT_VLANMPLS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND0_INPUT_VLANMPLS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_AND0_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_AND0_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND0_INPUT_GEN_EN_set", N, 11);
    if (value > 67108863)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_AND0_INPUT_GEN_EN_set", value, 67108863);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_AND0_INPUT_GEN_EN_set", N, value );

    /* ((0x00000140 + (N) * 512) bits 25:0) field ROUTING_AND0_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_0 index N=0..11 */
    eclass_reg_ROUTING_AND_FILTER_0_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_0_BIT_ROUTING_AND0_INPUT_GEN_EN_MSK,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_0_BIT_ROUTING_AND0_INPUT_GEN_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_ROUTING_AND0_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_AND0_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND0_INPUT_GEN_EN_get", N, 11);
    /* ((0x00000140 + (N) * 512) bits 25:0) field ROUTING_AND0_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_0 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_0_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_0_BIT_ROUTING_AND0_INPUT_GEN_EN_MSK) >> ECLASS120_REG_ROUTING_AND_FILTER_0_BIT_ROUTING_AND0_INPUT_GEN_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_AND0_INPUT_GEN_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_AND0_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_AND0_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND0_INPUT_GEN_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND0_INPUT_GEN_EN_set", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND0_INPUT_GEN_EN_set", stop_bit, 25 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND0_INPUT_GEN_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000140 + (N) * 512) bits 25:0) field ROUTING_AND0_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_0 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 25) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 25;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000140 + (N) * 512) bits 25:0) field ROUTING_AND0_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_0 index N=0..11 */
        eclass_reg_ROUTING_AND_FILTER_0_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_ROUTING_AND_FILTER_0_BIT_ROUTING_AND0_INPUT_GEN_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_ROUTING_AND_FILTER_0_BIT_ROUTING_AND0_INPUT_GEN_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_AND0_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_AND0_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND0_INPUT_GEN_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND0_INPUT_GEN_EN_get", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND0_INPUT_GEN_EN_get", stop_bit, 25 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 25) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 25;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000140 + (N) * 512) bits 25:0) field ROUTING_AND0_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_0 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_0_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_0_BIT_ROUTING_AND0_INPUT_GEN_EN_MSK)
                  >> ECLASS120_REG_ROUTING_AND_FILTER_0_BIT_ROUTING_AND0_INPUT_GEN_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_AND_FILTER_0_BIT_ROUTING_AND0_INPUT_GEN_EN_MSK, ECLASS120_REG_ROUTING_AND_FILTER_0_BIT_ROUTING_AND0_INPUT_GEN_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND0_INPUT_GEN_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_AND1_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_AND1_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND1_INPUT_VLANMPLS_EN_set", N, 11);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_AND1_INPUT_VLANMPLS_EN_set", value, 63);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_AND1_INPUT_VLANMPLS_EN_set", N, value );

    /* ((0x00000144 + (N) * 512) bits 31:26) field ROUTING_AND1_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_1 index N=0..11 */
    eclass_reg_ROUTING_AND_FILTER_1_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_1_BIT_ROUTING_AND1_INPUT_VLANMPLS_EN_MSK,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_1_BIT_ROUTING_AND1_INPUT_VLANMPLS_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_ROUTING_AND1_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_AND1_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND1_INPUT_VLANMPLS_EN_get", N, 11);
    /* ((0x00000144 + (N) * 512) bits 31:26) field ROUTING_AND1_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_1 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_1_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_1_BIT_ROUTING_AND1_INPUT_VLANMPLS_EN_MSK) >> ECLASS120_REG_ROUTING_AND_FILTER_1_BIT_ROUTING_AND1_INPUT_VLANMPLS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_AND1_INPUT_VLANMPLS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_AND1_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_AND1_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND1_INPUT_VLANMPLS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND1_INPUT_VLANMPLS_EN_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND1_INPUT_VLANMPLS_EN_set", stop_bit, 5 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND1_INPUT_VLANMPLS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000144 + (N) * 512) bits 31:26) field ROUTING_AND1_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_1 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000144 + (N) * 512) bits 31:26) field ROUTING_AND1_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_1 index N=0..11 */
        eclass_reg_ROUTING_AND_FILTER_1_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_ROUTING_AND_FILTER_1_BIT_ROUTING_AND1_INPUT_VLANMPLS_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_ROUTING_AND_FILTER_1_BIT_ROUTING_AND1_INPUT_VLANMPLS_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_AND1_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_AND1_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND1_INPUT_VLANMPLS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND1_INPUT_VLANMPLS_EN_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND1_INPUT_VLANMPLS_EN_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000144 + (N) * 512) bits 31:26) field ROUTING_AND1_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_1 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_1_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_1_BIT_ROUTING_AND1_INPUT_VLANMPLS_EN_MSK)
                  >> ECLASS120_REG_ROUTING_AND_FILTER_1_BIT_ROUTING_AND1_INPUT_VLANMPLS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_AND_FILTER_1_BIT_ROUTING_AND1_INPUT_VLANMPLS_EN_MSK, ECLASS120_REG_ROUTING_AND_FILTER_1_BIT_ROUTING_AND1_INPUT_VLANMPLS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND1_INPUT_VLANMPLS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_AND1_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_AND1_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND1_INPUT_GEN_EN_set", N, 11);
    if (value > 67108863)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_AND1_INPUT_GEN_EN_set", value, 67108863);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_AND1_INPUT_GEN_EN_set", N, value );

    /* ((0x00000144 + (N) * 512) bits 25:0) field ROUTING_AND1_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_1 index N=0..11 */
    eclass_reg_ROUTING_AND_FILTER_1_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_1_BIT_ROUTING_AND1_INPUT_GEN_EN_MSK,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_1_BIT_ROUTING_AND1_INPUT_GEN_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_ROUTING_AND1_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_AND1_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND1_INPUT_GEN_EN_get", N, 11);
    /* ((0x00000144 + (N) * 512) bits 25:0) field ROUTING_AND1_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_1 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_1_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_1_BIT_ROUTING_AND1_INPUT_GEN_EN_MSK) >> ECLASS120_REG_ROUTING_AND_FILTER_1_BIT_ROUTING_AND1_INPUT_GEN_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_AND1_INPUT_GEN_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_AND1_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_AND1_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND1_INPUT_GEN_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND1_INPUT_GEN_EN_set", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND1_INPUT_GEN_EN_set", stop_bit, 25 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND1_INPUT_GEN_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000144 + (N) * 512) bits 25:0) field ROUTING_AND1_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_1 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 25) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 25;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000144 + (N) * 512) bits 25:0) field ROUTING_AND1_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_1 index N=0..11 */
        eclass_reg_ROUTING_AND_FILTER_1_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_ROUTING_AND_FILTER_1_BIT_ROUTING_AND1_INPUT_GEN_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_ROUTING_AND_FILTER_1_BIT_ROUTING_AND1_INPUT_GEN_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_AND1_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_AND1_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND1_INPUT_GEN_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND1_INPUT_GEN_EN_get", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND1_INPUT_GEN_EN_get", stop_bit, 25 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 25) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 25;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000144 + (N) * 512) bits 25:0) field ROUTING_AND1_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_1 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_1_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_1_BIT_ROUTING_AND1_INPUT_GEN_EN_MSK)
                  >> ECLASS120_REG_ROUTING_AND_FILTER_1_BIT_ROUTING_AND1_INPUT_GEN_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_AND_FILTER_1_BIT_ROUTING_AND1_INPUT_GEN_EN_MSK, ECLASS120_REG_ROUTING_AND_FILTER_1_BIT_ROUTING_AND1_INPUT_GEN_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND1_INPUT_GEN_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_AND2_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_AND2_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND2_INPUT_VLANMPLS_EN_set", N, 11);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_AND2_INPUT_VLANMPLS_EN_set", value, 63);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_AND2_INPUT_VLANMPLS_EN_set", N, value );

    /* ((0x00000148 + (N) * 512) bits 31:26) field ROUTING_AND2_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_2 index N=0..11 */
    eclass_reg_ROUTING_AND_FILTER_2_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_2_BIT_ROUTING_AND2_INPUT_VLANMPLS_EN_MSK,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_2_BIT_ROUTING_AND2_INPUT_VLANMPLS_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_ROUTING_AND2_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_AND2_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND2_INPUT_VLANMPLS_EN_get", N, 11);
    /* ((0x00000148 + (N) * 512) bits 31:26) field ROUTING_AND2_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_2_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_2_BIT_ROUTING_AND2_INPUT_VLANMPLS_EN_MSK) >> ECLASS120_REG_ROUTING_AND_FILTER_2_BIT_ROUTING_AND2_INPUT_VLANMPLS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_AND2_INPUT_VLANMPLS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_AND2_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_AND2_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND2_INPUT_VLANMPLS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND2_INPUT_VLANMPLS_EN_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND2_INPUT_VLANMPLS_EN_set", stop_bit, 5 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND2_INPUT_VLANMPLS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000148 + (N) * 512) bits 31:26) field ROUTING_AND2_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_2 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000148 + (N) * 512) bits 31:26) field ROUTING_AND2_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_2 index N=0..11 */
        eclass_reg_ROUTING_AND_FILTER_2_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_ROUTING_AND_FILTER_2_BIT_ROUTING_AND2_INPUT_VLANMPLS_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_ROUTING_AND_FILTER_2_BIT_ROUTING_AND2_INPUT_VLANMPLS_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_AND2_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_AND2_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND2_INPUT_VLANMPLS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND2_INPUT_VLANMPLS_EN_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND2_INPUT_VLANMPLS_EN_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000148 + (N) * 512) bits 31:26) field ROUTING_AND2_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_2_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_2_BIT_ROUTING_AND2_INPUT_VLANMPLS_EN_MSK)
                  >> ECLASS120_REG_ROUTING_AND_FILTER_2_BIT_ROUTING_AND2_INPUT_VLANMPLS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_AND_FILTER_2_BIT_ROUTING_AND2_INPUT_VLANMPLS_EN_MSK, ECLASS120_REG_ROUTING_AND_FILTER_2_BIT_ROUTING_AND2_INPUT_VLANMPLS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND2_INPUT_VLANMPLS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_AND2_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_AND2_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND2_INPUT_GEN_EN_set", N, 11);
    if (value > 67108863)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_AND2_INPUT_GEN_EN_set", value, 67108863);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_AND2_INPUT_GEN_EN_set", N, value );

    /* ((0x00000148 + (N) * 512) bits 25:0) field ROUTING_AND2_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_2 index N=0..11 */
    eclass_reg_ROUTING_AND_FILTER_2_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_2_BIT_ROUTING_AND2_INPUT_GEN_EN_MSK,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_2_BIT_ROUTING_AND2_INPUT_GEN_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_ROUTING_AND2_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_AND2_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND2_INPUT_GEN_EN_get", N, 11);
    /* ((0x00000148 + (N) * 512) bits 25:0) field ROUTING_AND2_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_2_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_2_BIT_ROUTING_AND2_INPUT_GEN_EN_MSK) >> ECLASS120_REG_ROUTING_AND_FILTER_2_BIT_ROUTING_AND2_INPUT_GEN_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_AND2_INPUT_GEN_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_AND2_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_AND2_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND2_INPUT_GEN_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND2_INPUT_GEN_EN_set", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND2_INPUT_GEN_EN_set", stop_bit, 25 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND2_INPUT_GEN_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000148 + (N) * 512) bits 25:0) field ROUTING_AND2_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_2 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 25) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 25;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000148 + (N) * 512) bits 25:0) field ROUTING_AND2_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_2 index N=0..11 */
        eclass_reg_ROUTING_AND_FILTER_2_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_ROUTING_AND_FILTER_2_BIT_ROUTING_AND2_INPUT_GEN_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_ROUTING_AND_FILTER_2_BIT_ROUTING_AND2_INPUT_GEN_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_AND2_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_AND2_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND2_INPUT_GEN_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND2_INPUT_GEN_EN_get", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND2_INPUT_GEN_EN_get", stop_bit, 25 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 25) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 25;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000148 + (N) * 512) bits 25:0) field ROUTING_AND2_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_2_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_2_BIT_ROUTING_AND2_INPUT_GEN_EN_MSK)
                  >> ECLASS120_REG_ROUTING_AND_FILTER_2_BIT_ROUTING_AND2_INPUT_GEN_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_AND_FILTER_2_BIT_ROUTING_AND2_INPUT_GEN_EN_MSK, ECLASS120_REG_ROUTING_AND_FILTER_2_BIT_ROUTING_AND2_INPUT_GEN_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND2_INPUT_GEN_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_AND3_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_AND3_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND3_INPUT_VLANMPLS_EN_set", N, 11);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_AND3_INPUT_VLANMPLS_EN_set", value, 63);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_AND3_INPUT_VLANMPLS_EN_set", N, value );

    /* ((0x0000014c + (N) * 512) bits 31:26) field ROUTING_AND3_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_3 index N=0..11 */
    eclass_reg_ROUTING_AND_FILTER_3_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_3_BIT_ROUTING_AND3_INPUT_VLANMPLS_EN_MSK,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_3_BIT_ROUTING_AND3_INPUT_VLANMPLS_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_ROUTING_AND3_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_AND3_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND3_INPUT_VLANMPLS_EN_get", N, 11);
    /* ((0x0000014c + (N) * 512) bits 31:26) field ROUTING_AND3_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_3 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_3_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_3_BIT_ROUTING_AND3_INPUT_VLANMPLS_EN_MSK) >> ECLASS120_REG_ROUTING_AND_FILTER_3_BIT_ROUTING_AND3_INPUT_VLANMPLS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_AND3_INPUT_VLANMPLS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_AND3_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_AND3_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND3_INPUT_VLANMPLS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND3_INPUT_VLANMPLS_EN_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND3_INPUT_VLANMPLS_EN_set", stop_bit, 5 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND3_INPUT_VLANMPLS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000014c + (N) * 512) bits 31:26) field ROUTING_AND3_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_3 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000014c + (N) * 512) bits 31:26) field ROUTING_AND3_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_3 index N=0..11 */
        eclass_reg_ROUTING_AND_FILTER_3_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_ROUTING_AND_FILTER_3_BIT_ROUTING_AND3_INPUT_VLANMPLS_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_ROUTING_AND_FILTER_3_BIT_ROUTING_AND3_INPUT_VLANMPLS_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_AND3_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_AND3_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND3_INPUT_VLANMPLS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND3_INPUT_VLANMPLS_EN_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND3_INPUT_VLANMPLS_EN_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000014c + (N) * 512) bits 31:26) field ROUTING_AND3_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_3 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_3_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_3_BIT_ROUTING_AND3_INPUT_VLANMPLS_EN_MSK)
                  >> ECLASS120_REG_ROUTING_AND_FILTER_3_BIT_ROUTING_AND3_INPUT_VLANMPLS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_AND_FILTER_3_BIT_ROUTING_AND3_INPUT_VLANMPLS_EN_MSK, ECLASS120_REG_ROUTING_AND_FILTER_3_BIT_ROUTING_AND3_INPUT_VLANMPLS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND3_INPUT_VLANMPLS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_AND3_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_AND3_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND3_INPUT_GEN_EN_set", N, 11);
    if (value > 67108863)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_AND3_INPUT_GEN_EN_set", value, 67108863);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_AND3_INPUT_GEN_EN_set", N, value );

    /* ((0x0000014c + (N) * 512) bits 25:0) field ROUTING_AND3_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_3 index N=0..11 */
    eclass_reg_ROUTING_AND_FILTER_3_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_3_BIT_ROUTING_AND3_INPUT_GEN_EN_MSK,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_3_BIT_ROUTING_AND3_INPUT_GEN_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_ROUTING_AND3_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_AND3_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND3_INPUT_GEN_EN_get", N, 11);
    /* ((0x0000014c + (N) * 512) bits 25:0) field ROUTING_AND3_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_3 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_3_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_3_BIT_ROUTING_AND3_INPUT_GEN_EN_MSK) >> ECLASS120_REG_ROUTING_AND_FILTER_3_BIT_ROUTING_AND3_INPUT_GEN_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_AND3_INPUT_GEN_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_AND3_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_AND3_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND3_INPUT_GEN_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND3_INPUT_GEN_EN_set", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND3_INPUT_GEN_EN_set", stop_bit, 25 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND3_INPUT_GEN_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000014c + (N) * 512) bits 25:0) field ROUTING_AND3_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_3 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 25) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 25;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000014c + (N) * 512) bits 25:0) field ROUTING_AND3_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_3 index N=0..11 */
        eclass_reg_ROUTING_AND_FILTER_3_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_ROUTING_AND_FILTER_3_BIT_ROUTING_AND3_INPUT_GEN_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_ROUTING_AND_FILTER_3_BIT_ROUTING_AND3_INPUT_GEN_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_AND3_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_AND3_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND3_INPUT_GEN_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND3_INPUT_GEN_EN_get", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND3_INPUT_GEN_EN_get", stop_bit, 25 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 25) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 25;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000014c + (N) * 512) bits 25:0) field ROUTING_AND3_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_3 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_3_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_3_BIT_ROUTING_AND3_INPUT_GEN_EN_MSK)
                  >> ECLASS120_REG_ROUTING_AND_FILTER_3_BIT_ROUTING_AND3_INPUT_GEN_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_AND_FILTER_3_BIT_ROUTING_AND3_INPUT_GEN_EN_MSK, ECLASS120_REG_ROUTING_AND_FILTER_3_BIT_ROUTING_AND3_INPUT_GEN_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND3_INPUT_GEN_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_AND4_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_AND4_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND4_INPUT_VLANMPLS_EN_set", N, 11);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_AND4_INPUT_VLANMPLS_EN_set", value, 63);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_AND4_INPUT_VLANMPLS_EN_set", N, value );

    /* ((0x00000150 + (N) * 512) bits 31:26) field ROUTING_AND4_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_4 index N=0..11 */
    eclass_reg_ROUTING_AND_FILTER_4_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_4_BIT_ROUTING_AND4_INPUT_VLANMPLS_EN_MSK,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_4_BIT_ROUTING_AND4_INPUT_VLANMPLS_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_ROUTING_AND4_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_AND4_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND4_INPUT_VLANMPLS_EN_get", N, 11);
    /* ((0x00000150 + (N) * 512) bits 31:26) field ROUTING_AND4_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_4 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_4_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_4_BIT_ROUTING_AND4_INPUT_VLANMPLS_EN_MSK) >> ECLASS120_REG_ROUTING_AND_FILTER_4_BIT_ROUTING_AND4_INPUT_VLANMPLS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_AND4_INPUT_VLANMPLS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_AND4_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_AND4_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND4_INPUT_VLANMPLS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND4_INPUT_VLANMPLS_EN_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND4_INPUT_VLANMPLS_EN_set", stop_bit, 5 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND4_INPUT_VLANMPLS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000150 + (N) * 512) bits 31:26) field ROUTING_AND4_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_4 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000150 + (N) * 512) bits 31:26) field ROUTING_AND4_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_4 index N=0..11 */
        eclass_reg_ROUTING_AND_FILTER_4_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_ROUTING_AND_FILTER_4_BIT_ROUTING_AND4_INPUT_VLANMPLS_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_ROUTING_AND_FILTER_4_BIT_ROUTING_AND4_INPUT_VLANMPLS_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_AND4_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_AND4_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND4_INPUT_VLANMPLS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND4_INPUT_VLANMPLS_EN_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND4_INPUT_VLANMPLS_EN_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000150 + (N) * 512) bits 31:26) field ROUTING_AND4_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_4 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_4_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_4_BIT_ROUTING_AND4_INPUT_VLANMPLS_EN_MSK)
                  >> ECLASS120_REG_ROUTING_AND_FILTER_4_BIT_ROUTING_AND4_INPUT_VLANMPLS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_AND_FILTER_4_BIT_ROUTING_AND4_INPUT_VLANMPLS_EN_MSK, ECLASS120_REG_ROUTING_AND_FILTER_4_BIT_ROUTING_AND4_INPUT_VLANMPLS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND4_INPUT_VLANMPLS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_AND4_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_AND4_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND4_INPUT_GEN_EN_set", N, 11);
    if (value > 67108863)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_AND4_INPUT_GEN_EN_set", value, 67108863);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_AND4_INPUT_GEN_EN_set", N, value );

    /* ((0x00000150 + (N) * 512) bits 25:0) field ROUTING_AND4_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_4 index N=0..11 */
    eclass_reg_ROUTING_AND_FILTER_4_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_4_BIT_ROUTING_AND4_INPUT_GEN_EN_MSK,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_4_BIT_ROUTING_AND4_INPUT_GEN_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_ROUTING_AND4_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_AND4_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND4_INPUT_GEN_EN_get", N, 11);
    /* ((0x00000150 + (N) * 512) bits 25:0) field ROUTING_AND4_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_4 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_4_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_4_BIT_ROUTING_AND4_INPUT_GEN_EN_MSK) >> ECLASS120_REG_ROUTING_AND_FILTER_4_BIT_ROUTING_AND4_INPUT_GEN_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_AND4_INPUT_GEN_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_AND4_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_AND4_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND4_INPUT_GEN_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND4_INPUT_GEN_EN_set", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND4_INPUT_GEN_EN_set", stop_bit, 25 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND4_INPUT_GEN_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000150 + (N) * 512) bits 25:0) field ROUTING_AND4_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_4 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 25) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 25;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000150 + (N) * 512) bits 25:0) field ROUTING_AND4_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_4 index N=0..11 */
        eclass_reg_ROUTING_AND_FILTER_4_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_ROUTING_AND_FILTER_4_BIT_ROUTING_AND4_INPUT_GEN_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_ROUTING_AND_FILTER_4_BIT_ROUTING_AND4_INPUT_GEN_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_AND4_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_AND4_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND4_INPUT_GEN_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND4_INPUT_GEN_EN_get", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND4_INPUT_GEN_EN_get", stop_bit, 25 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 25) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 25;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000150 + (N) * 512) bits 25:0) field ROUTING_AND4_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_4 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_4_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_4_BIT_ROUTING_AND4_INPUT_GEN_EN_MSK)
                  >> ECLASS120_REG_ROUTING_AND_FILTER_4_BIT_ROUTING_AND4_INPUT_GEN_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_AND_FILTER_4_BIT_ROUTING_AND4_INPUT_GEN_EN_MSK, ECLASS120_REG_ROUTING_AND_FILTER_4_BIT_ROUTING_AND4_INPUT_GEN_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND4_INPUT_GEN_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_AND5_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_AND5_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND5_INPUT_VLANMPLS_EN_set", N, 11);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_AND5_INPUT_VLANMPLS_EN_set", value, 63);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_AND5_INPUT_VLANMPLS_EN_set", N, value );

    /* ((0x00000154 + (N) * 512) bits 31:26) field ROUTING_AND5_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_5 index N=0..11 */
    eclass_reg_ROUTING_AND_FILTER_5_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_5_BIT_ROUTING_AND5_INPUT_VLANMPLS_EN_MSK,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_5_BIT_ROUTING_AND5_INPUT_VLANMPLS_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_ROUTING_AND5_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_AND5_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND5_INPUT_VLANMPLS_EN_get", N, 11);
    /* ((0x00000154 + (N) * 512) bits 31:26) field ROUTING_AND5_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_5 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_5_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_5_BIT_ROUTING_AND5_INPUT_VLANMPLS_EN_MSK) >> ECLASS120_REG_ROUTING_AND_FILTER_5_BIT_ROUTING_AND5_INPUT_VLANMPLS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_AND5_INPUT_VLANMPLS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_AND5_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_AND5_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND5_INPUT_VLANMPLS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND5_INPUT_VLANMPLS_EN_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND5_INPUT_VLANMPLS_EN_set", stop_bit, 5 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND5_INPUT_VLANMPLS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000154 + (N) * 512) bits 31:26) field ROUTING_AND5_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_5 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000154 + (N) * 512) bits 31:26) field ROUTING_AND5_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_5 index N=0..11 */
        eclass_reg_ROUTING_AND_FILTER_5_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_ROUTING_AND_FILTER_5_BIT_ROUTING_AND5_INPUT_VLANMPLS_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_ROUTING_AND_FILTER_5_BIT_ROUTING_AND5_INPUT_VLANMPLS_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_AND5_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_AND5_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND5_INPUT_VLANMPLS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND5_INPUT_VLANMPLS_EN_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND5_INPUT_VLANMPLS_EN_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000154 + (N) * 512) bits 31:26) field ROUTING_AND5_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_5 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_5_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_5_BIT_ROUTING_AND5_INPUT_VLANMPLS_EN_MSK)
                  >> ECLASS120_REG_ROUTING_AND_FILTER_5_BIT_ROUTING_AND5_INPUT_VLANMPLS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_AND_FILTER_5_BIT_ROUTING_AND5_INPUT_VLANMPLS_EN_MSK, ECLASS120_REG_ROUTING_AND_FILTER_5_BIT_ROUTING_AND5_INPUT_VLANMPLS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND5_INPUT_VLANMPLS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_AND5_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_AND5_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND5_INPUT_GEN_EN_set", N, 11);
    if (value > 67108863)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_AND5_INPUT_GEN_EN_set", value, 67108863);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_AND5_INPUT_GEN_EN_set", N, value );

    /* ((0x00000154 + (N) * 512) bits 25:0) field ROUTING_AND5_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_5 index N=0..11 */
    eclass_reg_ROUTING_AND_FILTER_5_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_5_BIT_ROUTING_AND5_INPUT_GEN_EN_MSK,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_5_BIT_ROUTING_AND5_INPUT_GEN_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_ROUTING_AND5_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_AND5_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND5_INPUT_GEN_EN_get", N, 11);
    /* ((0x00000154 + (N) * 512) bits 25:0) field ROUTING_AND5_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_5 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_5_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_5_BIT_ROUTING_AND5_INPUT_GEN_EN_MSK) >> ECLASS120_REG_ROUTING_AND_FILTER_5_BIT_ROUTING_AND5_INPUT_GEN_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_AND5_INPUT_GEN_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_AND5_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_AND5_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND5_INPUT_GEN_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND5_INPUT_GEN_EN_set", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND5_INPUT_GEN_EN_set", stop_bit, 25 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND5_INPUT_GEN_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000154 + (N) * 512) bits 25:0) field ROUTING_AND5_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_5 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 25) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 25;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000154 + (N) * 512) bits 25:0) field ROUTING_AND5_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_5 index N=0..11 */
        eclass_reg_ROUTING_AND_FILTER_5_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_ROUTING_AND_FILTER_5_BIT_ROUTING_AND5_INPUT_GEN_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_ROUTING_AND_FILTER_5_BIT_ROUTING_AND5_INPUT_GEN_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_AND5_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_AND5_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND5_INPUT_GEN_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND5_INPUT_GEN_EN_get", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND5_INPUT_GEN_EN_get", stop_bit, 25 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 25) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 25;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000154 + (N) * 512) bits 25:0) field ROUTING_AND5_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_5 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_5_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_5_BIT_ROUTING_AND5_INPUT_GEN_EN_MSK)
                  >> ECLASS120_REG_ROUTING_AND_FILTER_5_BIT_ROUTING_AND5_INPUT_GEN_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_AND_FILTER_5_BIT_ROUTING_AND5_INPUT_GEN_EN_MSK, ECLASS120_REG_ROUTING_AND_FILTER_5_BIT_ROUTING_AND5_INPUT_GEN_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND5_INPUT_GEN_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_AND6_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_AND6_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND6_INPUT_VLANMPLS_EN_set", N, 11);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_AND6_INPUT_VLANMPLS_EN_set", value, 63);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_AND6_INPUT_VLANMPLS_EN_set", N, value );

    /* ((0x00000158 + (N) * 512) bits 31:26) field ROUTING_AND6_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_6 index N=0..11 */
    eclass_reg_ROUTING_AND_FILTER_6_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_6_BIT_ROUTING_AND6_INPUT_VLANMPLS_EN_MSK,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_6_BIT_ROUTING_AND6_INPUT_VLANMPLS_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_ROUTING_AND6_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_AND6_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND6_INPUT_VLANMPLS_EN_get", N, 11);
    /* ((0x00000158 + (N) * 512) bits 31:26) field ROUTING_AND6_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_6 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_6_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_6_BIT_ROUTING_AND6_INPUT_VLANMPLS_EN_MSK) >> ECLASS120_REG_ROUTING_AND_FILTER_6_BIT_ROUTING_AND6_INPUT_VLANMPLS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_AND6_INPUT_VLANMPLS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_AND6_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_AND6_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND6_INPUT_VLANMPLS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND6_INPUT_VLANMPLS_EN_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND6_INPUT_VLANMPLS_EN_set", stop_bit, 5 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND6_INPUT_VLANMPLS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000158 + (N) * 512) bits 31:26) field ROUTING_AND6_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_6 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000158 + (N) * 512) bits 31:26) field ROUTING_AND6_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_6 index N=0..11 */
        eclass_reg_ROUTING_AND_FILTER_6_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_ROUTING_AND_FILTER_6_BIT_ROUTING_AND6_INPUT_VLANMPLS_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_ROUTING_AND_FILTER_6_BIT_ROUTING_AND6_INPUT_VLANMPLS_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_AND6_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_AND6_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND6_INPUT_VLANMPLS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND6_INPUT_VLANMPLS_EN_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND6_INPUT_VLANMPLS_EN_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000158 + (N) * 512) bits 31:26) field ROUTING_AND6_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_6 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_6_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_6_BIT_ROUTING_AND6_INPUT_VLANMPLS_EN_MSK)
                  >> ECLASS120_REG_ROUTING_AND_FILTER_6_BIT_ROUTING_AND6_INPUT_VLANMPLS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_AND_FILTER_6_BIT_ROUTING_AND6_INPUT_VLANMPLS_EN_MSK, ECLASS120_REG_ROUTING_AND_FILTER_6_BIT_ROUTING_AND6_INPUT_VLANMPLS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND6_INPUT_VLANMPLS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_AND6_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_AND6_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND6_INPUT_GEN_EN_set", N, 11);
    if (value > 67108863)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_AND6_INPUT_GEN_EN_set", value, 67108863);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_AND6_INPUT_GEN_EN_set", N, value );

    /* ((0x00000158 + (N) * 512) bits 25:0) field ROUTING_AND6_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_6 index N=0..11 */
    eclass_reg_ROUTING_AND_FILTER_6_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_6_BIT_ROUTING_AND6_INPUT_GEN_EN_MSK,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_6_BIT_ROUTING_AND6_INPUT_GEN_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_ROUTING_AND6_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_AND6_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND6_INPUT_GEN_EN_get", N, 11);
    /* ((0x00000158 + (N) * 512) bits 25:0) field ROUTING_AND6_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_6 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_6_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_6_BIT_ROUTING_AND6_INPUT_GEN_EN_MSK) >> ECLASS120_REG_ROUTING_AND_FILTER_6_BIT_ROUTING_AND6_INPUT_GEN_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_AND6_INPUT_GEN_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_AND6_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_AND6_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND6_INPUT_GEN_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND6_INPUT_GEN_EN_set", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND6_INPUT_GEN_EN_set", stop_bit, 25 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND6_INPUT_GEN_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000158 + (N) * 512) bits 25:0) field ROUTING_AND6_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_6 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 25) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 25;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000158 + (N) * 512) bits 25:0) field ROUTING_AND6_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_6 index N=0..11 */
        eclass_reg_ROUTING_AND_FILTER_6_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_ROUTING_AND_FILTER_6_BIT_ROUTING_AND6_INPUT_GEN_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_ROUTING_AND_FILTER_6_BIT_ROUTING_AND6_INPUT_GEN_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_AND6_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_AND6_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND6_INPUT_GEN_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND6_INPUT_GEN_EN_get", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND6_INPUT_GEN_EN_get", stop_bit, 25 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 25) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 25;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000158 + (N) * 512) bits 25:0) field ROUTING_AND6_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_6 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_6_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_6_BIT_ROUTING_AND6_INPUT_GEN_EN_MSK)
                  >> ECLASS120_REG_ROUTING_AND_FILTER_6_BIT_ROUTING_AND6_INPUT_GEN_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_AND_FILTER_6_BIT_ROUTING_AND6_INPUT_GEN_EN_MSK, ECLASS120_REG_ROUTING_AND_FILTER_6_BIT_ROUTING_AND6_INPUT_GEN_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND6_INPUT_GEN_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_AND7_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_AND7_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND7_INPUT_VLANMPLS_EN_set", N, 11);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_AND7_INPUT_VLANMPLS_EN_set", value, 63);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_AND7_INPUT_VLANMPLS_EN_set", N, value );

    /* ((0x0000015c + (N) * 512) bits 31:26) field ROUTING_AND7_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_7 index N=0..11 */
    eclass_reg_ROUTING_AND_FILTER_7_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_7_BIT_ROUTING_AND7_INPUT_VLANMPLS_EN_MSK,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_7_BIT_ROUTING_AND7_INPUT_VLANMPLS_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_ROUTING_AND7_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_AND7_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND7_INPUT_VLANMPLS_EN_get", N, 11);
    /* ((0x0000015c + (N) * 512) bits 31:26) field ROUTING_AND7_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_7 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_7_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_7_BIT_ROUTING_AND7_INPUT_VLANMPLS_EN_MSK) >> ECLASS120_REG_ROUTING_AND_FILTER_7_BIT_ROUTING_AND7_INPUT_VLANMPLS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_AND7_INPUT_VLANMPLS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_AND7_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_AND7_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND7_INPUT_VLANMPLS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND7_INPUT_VLANMPLS_EN_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND7_INPUT_VLANMPLS_EN_set", stop_bit, 5 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND7_INPUT_VLANMPLS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000015c + (N) * 512) bits 31:26) field ROUTING_AND7_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_7 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000015c + (N) * 512) bits 31:26) field ROUTING_AND7_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_7 index N=0..11 */
        eclass_reg_ROUTING_AND_FILTER_7_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_ROUTING_AND_FILTER_7_BIT_ROUTING_AND7_INPUT_VLANMPLS_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_ROUTING_AND_FILTER_7_BIT_ROUTING_AND7_INPUT_VLANMPLS_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_AND7_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_AND7_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND7_INPUT_VLANMPLS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND7_INPUT_VLANMPLS_EN_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND7_INPUT_VLANMPLS_EN_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000015c + (N) * 512) bits 31:26) field ROUTING_AND7_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_7 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_7_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_7_BIT_ROUTING_AND7_INPUT_VLANMPLS_EN_MSK)
                  >> ECLASS120_REG_ROUTING_AND_FILTER_7_BIT_ROUTING_AND7_INPUT_VLANMPLS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_AND_FILTER_7_BIT_ROUTING_AND7_INPUT_VLANMPLS_EN_MSK, ECLASS120_REG_ROUTING_AND_FILTER_7_BIT_ROUTING_AND7_INPUT_VLANMPLS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND7_INPUT_VLANMPLS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_AND7_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_AND7_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND7_INPUT_GEN_EN_set", N, 11);
    if (value > 67108863)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_AND7_INPUT_GEN_EN_set", value, 67108863);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_AND7_INPUT_GEN_EN_set", N, value );

    /* ((0x0000015c + (N) * 512) bits 25:0) field ROUTING_AND7_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_7 index N=0..11 */
    eclass_reg_ROUTING_AND_FILTER_7_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_7_BIT_ROUTING_AND7_INPUT_GEN_EN_MSK,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_7_BIT_ROUTING_AND7_INPUT_GEN_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_ROUTING_AND7_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_AND7_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND7_INPUT_GEN_EN_get", N, 11);
    /* ((0x0000015c + (N) * 512) bits 25:0) field ROUTING_AND7_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_7 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_7_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_7_BIT_ROUTING_AND7_INPUT_GEN_EN_MSK) >> ECLASS120_REG_ROUTING_AND_FILTER_7_BIT_ROUTING_AND7_INPUT_GEN_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_AND7_INPUT_GEN_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_AND7_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_AND7_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND7_INPUT_GEN_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND7_INPUT_GEN_EN_set", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND7_INPUT_GEN_EN_set", stop_bit, 25 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND7_INPUT_GEN_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000015c + (N) * 512) bits 25:0) field ROUTING_AND7_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_7 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 25) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 25;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000015c + (N) * 512) bits 25:0) field ROUTING_AND7_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_7 index N=0..11 */
        eclass_reg_ROUTING_AND_FILTER_7_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_ROUTING_AND_FILTER_7_BIT_ROUTING_AND7_INPUT_GEN_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_ROUTING_AND_FILTER_7_BIT_ROUTING_AND7_INPUT_GEN_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_AND7_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_AND7_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND7_INPUT_GEN_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND7_INPUT_GEN_EN_get", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND7_INPUT_GEN_EN_get", stop_bit, 25 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 25) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 25;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000015c + (N) * 512) bits 25:0) field ROUTING_AND7_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_7 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_7_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_7_BIT_ROUTING_AND7_INPUT_GEN_EN_MSK)
                  >> ECLASS120_REG_ROUTING_AND_FILTER_7_BIT_ROUTING_AND7_INPUT_GEN_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_AND_FILTER_7_BIT_ROUTING_AND7_INPUT_GEN_EN_MSK, ECLASS120_REG_ROUTING_AND_FILTER_7_BIT_ROUTING_AND7_INPUT_GEN_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND7_INPUT_GEN_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_AND8_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_AND8_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND8_INPUT_VLANMPLS_EN_set", N, 11);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_AND8_INPUT_VLANMPLS_EN_set", value, 63);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_AND8_INPUT_VLANMPLS_EN_set", N, value );

    /* ((0x00000160 + (N) * 512) bits 31:26) field ROUTING_AND8_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_8 index N=0..11 */
    eclass_reg_ROUTING_AND_FILTER_8_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_8_BIT_ROUTING_AND8_INPUT_VLANMPLS_EN_MSK,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_8_BIT_ROUTING_AND8_INPUT_VLANMPLS_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_ROUTING_AND8_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_AND8_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND8_INPUT_VLANMPLS_EN_get", N, 11);
    /* ((0x00000160 + (N) * 512) bits 31:26) field ROUTING_AND8_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_8 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_8_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_8_BIT_ROUTING_AND8_INPUT_VLANMPLS_EN_MSK) >> ECLASS120_REG_ROUTING_AND_FILTER_8_BIT_ROUTING_AND8_INPUT_VLANMPLS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_AND8_INPUT_VLANMPLS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_AND8_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_AND8_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND8_INPUT_VLANMPLS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND8_INPUT_VLANMPLS_EN_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND8_INPUT_VLANMPLS_EN_set", stop_bit, 5 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND8_INPUT_VLANMPLS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000160 + (N) * 512) bits 31:26) field ROUTING_AND8_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_8 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000160 + (N) * 512) bits 31:26) field ROUTING_AND8_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_8 index N=0..11 */
        eclass_reg_ROUTING_AND_FILTER_8_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_ROUTING_AND_FILTER_8_BIT_ROUTING_AND8_INPUT_VLANMPLS_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_ROUTING_AND_FILTER_8_BIT_ROUTING_AND8_INPUT_VLANMPLS_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_AND8_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_AND8_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND8_INPUT_VLANMPLS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND8_INPUT_VLANMPLS_EN_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND8_INPUT_VLANMPLS_EN_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000160 + (N) * 512) bits 31:26) field ROUTING_AND8_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_8 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_8_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_8_BIT_ROUTING_AND8_INPUT_VLANMPLS_EN_MSK)
                  >> ECLASS120_REG_ROUTING_AND_FILTER_8_BIT_ROUTING_AND8_INPUT_VLANMPLS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_AND_FILTER_8_BIT_ROUTING_AND8_INPUT_VLANMPLS_EN_MSK, ECLASS120_REG_ROUTING_AND_FILTER_8_BIT_ROUTING_AND8_INPUT_VLANMPLS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND8_INPUT_VLANMPLS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_AND8_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_AND8_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND8_INPUT_GEN_EN_set", N, 11);
    if (value > 67108863)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_AND8_INPUT_GEN_EN_set", value, 67108863);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_AND8_INPUT_GEN_EN_set", N, value );

    /* ((0x00000160 + (N) * 512) bits 25:0) field ROUTING_AND8_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_8 index N=0..11 */
    eclass_reg_ROUTING_AND_FILTER_8_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_8_BIT_ROUTING_AND8_INPUT_GEN_EN_MSK,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_8_BIT_ROUTING_AND8_INPUT_GEN_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_ROUTING_AND8_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_AND8_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND8_INPUT_GEN_EN_get", N, 11);
    /* ((0x00000160 + (N) * 512) bits 25:0) field ROUTING_AND8_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_8 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_8_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_8_BIT_ROUTING_AND8_INPUT_GEN_EN_MSK) >> ECLASS120_REG_ROUTING_AND_FILTER_8_BIT_ROUTING_AND8_INPUT_GEN_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_AND8_INPUT_GEN_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_AND8_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_AND8_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND8_INPUT_GEN_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND8_INPUT_GEN_EN_set", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND8_INPUT_GEN_EN_set", stop_bit, 25 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND8_INPUT_GEN_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000160 + (N) * 512) bits 25:0) field ROUTING_AND8_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_8 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 25) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 25;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000160 + (N) * 512) bits 25:0) field ROUTING_AND8_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_8 index N=0..11 */
        eclass_reg_ROUTING_AND_FILTER_8_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_ROUTING_AND_FILTER_8_BIT_ROUTING_AND8_INPUT_GEN_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_ROUTING_AND_FILTER_8_BIT_ROUTING_AND8_INPUT_GEN_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_AND8_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_AND8_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND8_INPUT_GEN_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND8_INPUT_GEN_EN_get", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND8_INPUT_GEN_EN_get", stop_bit, 25 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 25) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 25;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000160 + (N) * 512) bits 25:0) field ROUTING_AND8_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_8 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_8_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_8_BIT_ROUTING_AND8_INPUT_GEN_EN_MSK)
                  >> ECLASS120_REG_ROUTING_AND_FILTER_8_BIT_ROUTING_AND8_INPUT_GEN_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_AND_FILTER_8_BIT_ROUTING_AND8_INPUT_GEN_EN_MSK, ECLASS120_REG_ROUTING_AND_FILTER_8_BIT_ROUTING_AND8_INPUT_GEN_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND8_INPUT_GEN_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_AND9_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_AND9_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND9_INPUT_VLANMPLS_EN_set", N, 11);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_AND9_INPUT_VLANMPLS_EN_set", value, 63);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_AND9_INPUT_VLANMPLS_EN_set", N, value );

    /* ((0x00000164 + (N) * 512) bits 31:26) field ROUTING_AND9_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_9 index N=0..11 */
    eclass_reg_ROUTING_AND_FILTER_9_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_9_BIT_ROUTING_AND9_INPUT_VLANMPLS_EN_MSK,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_9_BIT_ROUTING_AND9_INPUT_VLANMPLS_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_ROUTING_AND9_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_AND9_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND9_INPUT_VLANMPLS_EN_get", N, 11);
    /* ((0x00000164 + (N) * 512) bits 31:26) field ROUTING_AND9_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_9 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_9_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_9_BIT_ROUTING_AND9_INPUT_VLANMPLS_EN_MSK) >> ECLASS120_REG_ROUTING_AND_FILTER_9_BIT_ROUTING_AND9_INPUT_VLANMPLS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_AND9_INPUT_VLANMPLS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_AND9_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_AND9_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit,
                                                                          UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND9_INPUT_VLANMPLS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND9_INPUT_VLANMPLS_EN_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND9_INPUT_VLANMPLS_EN_set", stop_bit, 5 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND9_INPUT_VLANMPLS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000164 + (N) * 512) bits 31:26) field ROUTING_AND9_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_9 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000164 + (N) * 512) bits 31:26) field ROUTING_AND9_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_9 index N=0..11 */
        eclass_reg_ROUTING_AND_FILTER_9_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_ROUTING_AND_FILTER_9_BIT_ROUTING_AND9_INPUT_VLANMPLS_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_ROUTING_AND_FILTER_9_BIT_ROUTING_AND9_INPUT_VLANMPLS_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_AND9_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_AND9_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                            eclass_handle_t *h_ptr,
                                                                            UINT32  N,
                                                                            UINT32 start_bit,
                                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND9_INPUT_VLANMPLS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND9_INPUT_VLANMPLS_EN_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND9_INPUT_VLANMPLS_EN_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000164 + (N) * 512) bits 31:26) field ROUTING_AND9_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_9 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_9_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_9_BIT_ROUTING_AND9_INPUT_VLANMPLS_EN_MSK)
                  >> ECLASS120_REG_ROUTING_AND_FILTER_9_BIT_ROUTING_AND9_INPUT_VLANMPLS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_AND_FILTER_9_BIT_ROUTING_AND9_INPUT_VLANMPLS_EN_MSK, ECLASS120_REG_ROUTING_AND_FILTER_9_BIT_ROUTING_AND9_INPUT_VLANMPLS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND9_INPUT_VLANMPLS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_AND9_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_AND9_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N,
                                                               UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND9_INPUT_GEN_EN_set", N, 11);
    if (value > 67108863)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_AND9_INPUT_GEN_EN_set", value, 67108863);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_AND9_INPUT_GEN_EN_set", N, value );

    /* ((0x00000164 + (N) * 512) bits 25:0) field ROUTING_AND9_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_9 index N=0..11 */
    eclass_reg_ROUTING_AND_FILTER_9_array_field_set( b_ptr,
                                                     h_ptr,
                                                     N,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_9_BIT_ROUTING_AND9_INPUT_GEN_EN_MSK,
                                                     ECLASS120_REG_ROUTING_AND_FILTER_9_BIT_ROUTING_AND9_INPUT_GEN_EN_OFF,
                                                     value);
}

static INLINE UINT32 eclass_field_ROUTING_AND9_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_AND9_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND9_INPUT_GEN_EN_get", N, 11);
    /* ((0x00000164 + (N) * 512) bits 25:0) field ROUTING_AND9_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_9 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_9_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_9_BIT_ROUTING_AND9_INPUT_GEN_EN_MSK) >> ECLASS120_REG_ROUTING_AND_FILTER_9_BIT_ROUTING_AND9_INPUT_GEN_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_AND9_INPUT_GEN_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_AND9_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_AND9_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND9_INPUT_GEN_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND9_INPUT_GEN_EN_set", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND9_INPUT_GEN_EN_set", stop_bit, 25 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND9_INPUT_GEN_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000164 + (N) * 512) bits 25:0) field ROUTING_AND9_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_9 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 25) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 25;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000164 + (N) * 512) bits 25:0) field ROUTING_AND9_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_9 index N=0..11 */
        eclass_reg_ROUTING_AND_FILTER_9_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         subfield_mask << (ECLASS120_REG_ROUTING_AND_FILTER_9_BIT_ROUTING_AND9_INPUT_GEN_EN_OFF + subfield_offset),
                                                         ECLASS120_REG_ROUTING_AND_FILTER_9_BIT_ROUTING_AND9_INPUT_GEN_EN_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_AND9_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_AND9_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND9_INPUT_GEN_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND9_INPUT_GEN_EN_get", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND9_INPUT_GEN_EN_get", stop_bit, 25 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 25) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 25;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000164 + (N) * 512) bits 25:0) field ROUTING_AND9_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_9 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_9_array_read( b_ptr,
                                                            h_ptr,
                                                            N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_9_BIT_ROUTING_AND9_INPUT_GEN_EN_MSK)
                  >> ECLASS120_REG_ROUTING_AND_FILTER_9_BIT_ROUTING_AND9_INPUT_GEN_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_AND_FILTER_9_BIT_ROUTING_AND9_INPUT_GEN_EN_MSK, ECLASS120_REG_ROUTING_AND_FILTER_9_BIT_ROUTING_AND9_INPUT_GEN_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND9_INPUT_GEN_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_AND10_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_AND10_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND10_INPUT_VLANMPLS_EN_set", N, 11);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_AND10_INPUT_VLANMPLS_EN_set", value, 63);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_AND10_INPUT_VLANMPLS_EN_set", N, value );

    /* ((0x00000168 + (N) * 512) bits 31:26) field ROUTING_AND10_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_10 index N=0..11 */
    eclass_reg_ROUTING_AND_FILTER_10_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      ECLASS120_REG_ROUTING_AND_FILTER_10_BIT_ROUTING_AND10_INPUT_VLANMPLS_EN_MSK,
                                                      ECLASS120_REG_ROUTING_AND_FILTER_10_BIT_ROUTING_AND10_INPUT_VLANMPLS_EN_OFF,
                                                      value);
}

static INLINE UINT32 eclass_field_ROUTING_AND10_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_AND10_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND10_INPUT_VLANMPLS_EN_get", N, 11);
    /* ((0x00000168 + (N) * 512) bits 31:26) field ROUTING_AND10_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_10 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_10_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_10_BIT_ROUTING_AND10_INPUT_VLANMPLS_EN_MSK) >> ECLASS120_REG_ROUTING_AND_FILTER_10_BIT_ROUTING_AND10_INPUT_VLANMPLS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_AND10_INPUT_VLANMPLS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_AND10_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_AND10_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit,
                                                                           UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND10_INPUT_VLANMPLS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND10_INPUT_VLANMPLS_EN_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND10_INPUT_VLANMPLS_EN_set", stop_bit, 5 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND10_INPUT_VLANMPLS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000168 + (N) * 512) bits 31:26) field ROUTING_AND10_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_10 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000168 + (N) * 512) bits 31:26) field ROUTING_AND10_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_10 index N=0..11 */
        eclass_reg_ROUTING_AND_FILTER_10_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          subfield_mask << (ECLASS120_REG_ROUTING_AND_FILTER_10_BIT_ROUTING_AND10_INPUT_VLANMPLS_EN_OFF + subfield_offset),
                                                          ECLASS120_REG_ROUTING_AND_FILTER_10_BIT_ROUTING_AND10_INPUT_VLANMPLS_EN_OFF + subfield_offset,
                                                          value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_AND10_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                             eclass_handle_t *h_ptr,
                                                                             UINT32  N,
                                                                             UINT32 start_bit,
                                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_AND10_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                             eclass_handle_t *h_ptr,
                                                                             UINT32  N,
                                                                             UINT32 start_bit,
                                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND10_INPUT_VLANMPLS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND10_INPUT_VLANMPLS_EN_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND10_INPUT_VLANMPLS_EN_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000168 + (N) * 512) bits 31:26) field ROUTING_AND10_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_10 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_10_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_10_BIT_ROUTING_AND10_INPUT_VLANMPLS_EN_MSK)
                  >> ECLASS120_REG_ROUTING_AND_FILTER_10_BIT_ROUTING_AND10_INPUT_VLANMPLS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_AND_FILTER_10_BIT_ROUTING_AND10_INPUT_VLANMPLS_EN_MSK, ECLASS120_REG_ROUTING_AND_FILTER_10_BIT_ROUTING_AND10_INPUT_VLANMPLS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND10_INPUT_VLANMPLS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_AND10_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_AND10_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND10_INPUT_GEN_EN_set", N, 11);
    if (value > 67108863)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_AND10_INPUT_GEN_EN_set", value, 67108863);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_AND10_INPUT_GEN_EN_set", N, value );

    /* ((0x00000168 + (N) * 512) bits 25:0) field ROUTING_AND10_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_10 index N=0..11 */
    eclass_reg_ROUTING_AND_FILTER_10_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      ECLASS120_REG_ROUTING_AND_FILTER_10_BIT_ROUTING_AND10_INPUT_GEN_EN_MSK,
                                                      ECLASS120_REG_ROUTING_AND_FILTER_10_BIT_ROUTING_AND10_INPUT_GEN_EN_OFF,
                                                      value);
}

static INLINE UINT32 eclass_field_ROUTING_AND10_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_AND10_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND10_INPUT_GEN_EN_get", N, 11);
    /* ((0x00000168 + (N) * 512) bits 25:0) field ROUTING_AND10_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_10 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_10_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_10_BIT_ROUTING_AND10_INPUT_GEN_EN_MSK) >> ECLASS120_REG_ROUTING_AND_FILTER_10_BIT_ROUTING_AND10_INPUT_GEN_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_AND10_INPUT_GEN_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_AND10_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_AND10_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND10_INPUT_GEN_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND10_INPUT_GEN_EN_set", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND10_INPUT_GEN_EN_set", stop_bit, 25 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND10_INPUT_GEN_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000168 + (N) * 512) bits 25:0) field ROUTING_AND10_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_10 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 25) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 25;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000168 + (N) * 512) bits 25:0) field ROUTING_AND10_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_10 index N=0..11 */
        eclass_reg_ROUTING_AND_FILTER_10_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          subfield_mask << (ECLASS120_REG_ROUTING_AND_FILTER_10_BIT_ROUTING_AND10_INPUT_GEN_EN_OFF + subfield_offset),
                                                          ECLASS120_REG_ROUTING_AND_FILTER_10_BIT_ROUTING_AND10_INPUT_GEN_EN_OFF + subfield_offset,
                                                          value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_AND10_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_AND10_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND10_INPUT_GEN_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND10_INPUT_GEN_EN_get", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND10_INPUT_GEN_EN_get", stop_bit, 25 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 25) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 25;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000168 + (N) * 512) bits 25:0) field ROUTING_AND10_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_10 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_10_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_10_BIT_ROUTING_AND10_INPUT_GEN_EN_MSK)
                  >> ECLASS120_REG_ROUTING_AND_FILTER_10_BIT_ROUTING_AND10_INPUT_GEN_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_AND_FILTER_10_BIT_ROUTING_AND10_INPUT_GEN_EN_MSK, ECLASS120_REG_ROUTING_AND_FILTER_10_BIT_ROUTING_AND10_INPUT_GEN_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND10_INPUT_GEN_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_AND11_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_AND11_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND11_INPUT_VLANMPLS_EN_set", N, 11);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_AND11_INPUT_VLANMPLS_EN_set", value, 63);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_AND11_INPUT_VLANMPLS_EN_set", N, value );

    /* ((0x0000016c + (N) * 512) bits 31:26) field ROUTING_AND11_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_11 index N=0..11 */
    eclass_reg_ROUTING_AND_FILTER_11_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      ECLASS120_REG_ROUTING_AND_FILTER_11_BIT_ROUTING_AND11_INPUT_VLANMPLS_EN_MSK,
                                                      ECLASS120_REG_ROUTING_AND_FILTER_11_BIT_ROUTING_AND11_INPUT_VLANMPLS_EN_OFF,
                                                      value);
}

static INLINE UINT32 eclass_field_ROUTING_AND11_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_AND11_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND11_INPUT_VLANMPLS_EN_get", N, 11);
    /* ((0x0000016c + (N) * 512) bits 31:26) field ROUTING_AND11_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_11 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_11_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_11_BIT_ROUTING_AND11_INPUT_VLANMPLS_EN_MSK) >> ECLASS120_REG_ROUTING_AND_FILTER_11_BIT_ROUTING_AND11_INPUT_VLANMPLS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_AND11_INPUT_VLANMPLS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_AND11_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_AND11_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit,
                                                                           UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND11_INPUT_VLANMPLS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND11_INPUT_VLANMPLS_EN_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND11_INPUT_VLANMPLS_EN_set", stop_bit, 5 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND11_INPUT_VLANMPLS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000016c + (N) * 512) bits 31:26) field ROUTING_AND11_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_11 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000016c + (N) * 512) bits 31:26) field ROUTING_AND11_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_11 index N=0..11 */
        eclass_reg_ROUTING_AND_FILTER_11_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          subfield_mask << (ECLASS120_REG_ROUTING_AND_FILTER_11_BIT_ROUTING_AND11_INPUT_VLANMPLS_EN_OFF + subfield_offset),
                                                          ECLASS120_REG_ROUTING_AND_FILTER_11_BIT_ROUTING_AND11_INPUT_VLANMPLS_EN_OFF + subfield_offset,
                                                          value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_AND11_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                             eclass_handle_t *h_ptr,
                                                                             UINT32  N,
                                                                             UINT32 start_bit,
                                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_AND11_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                             eclass_handle_t *h_ptr,
                                                                             UINT32  N,
                                                                             UINT32 start_bit,
                                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND11_INPUT_VLANMPLS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND11_INPUT_VLANMPLS_EN_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND11_INPUT_VLANMPLS_EN_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000016c + (N) * 512) bits 31:26) field ROUTING_AND11_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_11 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_11_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_11_BIT_ROUTING_AND11_INPUT_VLANMPLS_EN_MSK)
                  >> ECLASS120_REG_ROUTING_AND_FILTER_11_BIT_ROUTING_AND11_INPUT_VLANMPLS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_AND_FILTER_11_BIT_ROUTING_AND11_INPUT_VLANMPLS_EN_MSK, ECLASS120_REG_ROUTING_AND_FILTER_11_BIT_ROUTING_AND11_INPUT_VLANMPLS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND11_INPUT_VLANMPLS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_AND11_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_AND11_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND11_INPUT_GEN_EN_set", N, 11);
    if (value > 67108863)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_AND11_INPUT_GEN_EN_set", value, 67108863);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_AND11_INPUT_GEN_EN_set", N, value );

    /* ((0x0000016c + (N) * 512) bits 25:0) field ROUTING_AND11_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_11 index N=0..11 */
    eclass_reg_ROUTING_AND_FILTER_11_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      ECLASS120_REG_ROUTING_AND_FILTER_11_BIT_ROUTING_AND11_INPUT_GEN_EN_MSK,
                                                      ECLASS120_REG_ROUTING_AND_FILTER_11_BIT_ROUTING_AND11_INPUT_GEN_EN_OFF,
                                                      value);
}

static INLINE UINT32 eclass_field_ROUTING_AND11_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_AND11_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND11_INPUT_GEN_EN_get", N, 11);
    /* ((0x0000016c + (N) * 512) bits 25:0) field ROUTING_AND11_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_11 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_11_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_11_BIT_ROUTING_AND11_INPUT_GEN_EN_MSK) >> ECLASS120_REG_ROUTING_AND_FILTER_11_BIT_ROUTING_AND11_INPUT_GEN_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_AND11_INPUT_GEN_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_AND11_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_AND11_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND11_INPUT_GEN_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND11_INPUT_GEN_EN_set", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND11_INPUT_GEN_EN_set", stop_bit, 25 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND11_INPUT_GEN_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000016c + (N) * 512) bits 25:0) field ROUTING_AND11_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_11 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 25) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 25;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000016c + (N) * 512) bits 25:0) field ROUTING_AND11_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_11 index N=0..11 */
        eclass_reg_ROUTING_AND_FILTER_11_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          subfield_mask << (ECLASS120_REG_ROUTING_AND_FILTER_11_BIT_ROUTING_AND11_INPUT_GEN_EN_OFF + subfield_offset),
                                                          ECLASS120_REG_ROUTING_AND_FILTER_11_BIT_ROUTING_AND11_INPUT_GEN_EN_OFF + subfield_offset,
                                                          value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_AND11_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_AND11_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND11_INPUT_GEN_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND11_INPUT_GEN_EN_get", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND11_INPUT_GEN_EN_get", stop_bit, 25 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 25) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 25;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000016c + (N) * 512) bits 25:0) field ROUTING_AND11_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_11 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_11_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_11_BIT_ROUTING_AND11_INPUT_GEN_EN_MSK)
                  >> ECLASS120_REG_ROUTING_AND_FILTER_11_BIT_ROUTING_AND11_INPUT_GEN_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_AND_FILTER_11_BIT_ROUTING_AND11_INPUT_GEN_EN_MSK, ECLASS120_REG_ROUTING_AND_FILTER_11_BIT_ROUTING_AND11_INPUT_GEN_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND11_INPUT_GEN_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_AND12_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_AND12_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND12_INPUT_VLANMPLS_EN_set", N, 11);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_AND12_INPUT_VLANMPLS_EN_set", value, 63);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_AND12_INPUT_VLANMPLS_EN_set", N, value );

    /* ((0x00000170 + (N) * 512) bits 31:26) field ROUTING_AND12_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_12 index N=0..11 */
    eclass_reg_ROUTING_AND_FILTER_12_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      ECLASS120_REG_ROUTING_AND_FILTER_12_BIT_ROUTING_AND12_INPUT_VLANMPLS_EN_MSK,
                                                      ECLASS120_REG_ROUTING_AND_FILTER_12_BIT_ROUTING_AND12_INPUT_VLANMPLS_EN_OFF,
                                                      value);
}

static INLINE UINT32 eclass_field_ROUTING_AND12_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_AND12_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND12_INPUT_VLANMPLS_EN_get", N, 11);
    /* ((0x00000170 + (N) * 512) bits 31:26) field ROUTING_AND12_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_12 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_12_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_12_BIT_ROUTING_AND12_INPUT_VLANMPLS_EN_MSK) >> ECLASS120_REG_ROUTING_AND_FILTER_12_BIT_ROUTING_AND12_INPUT_VLANMPLS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_AND12_INPUT_VLANMPLS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_AND12_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_AND12_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit,
                                                                           UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND12_INPUT_VLANMPLS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND12_INPUT_VLANMPLS_EN_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND12_INPUT_VLANMPLS_EN_set", stop_bit, 5 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND12_INPUT_VLANMPLS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000170 + (N) * 512) bits 31:26) field ROUTING_AND12_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_12 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000170 + (N) * 512) bits 31:26) field ROUTING_AND12_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_12 index N=0..11 */
        eclass_reg_ROUTING_AND_FILTER_12_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          subfield_mask << (ECLASS120_REG_ROUTING_AND_FILTER_12_BIT_ROUTING_AND12_INPUT_VLANMPLS_EN_OFF + subfield_offset),
                                                          ECLASS120_REG_ROUTING_AND_FILTER_12_BIT_ROUTING_AND12_INPUT_VLANMPLS_EN_OFF + subfield_offset,
                                                          value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_AND12_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                             eclass_handle_t *h_ptr,
                                                                             UINT32  N,
                                                                             UINT32 start_bit,
                                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_AND12_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                             eclass_handle_t *h_ptr,
                                                                             UINT32  N,
                                                                             UINT32 start_bit,
                                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND12_INPUT_VLANMPLS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND12_INPUT_VLANMPLS_EN_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND12_INPUT_VLANMPLS_EN_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000170 + (N) * 512) bits 31:26) field ROUTING_AND12_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_12 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_12_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_12_BIT_ROUTING_AND12_INPUT_VLANMPLS_EN_MSK)
                  >> ECLASS120_REG_ROUTING_AND_FILTER_12_BIT_ROUTING_AND12_INPUT_VLANMPLS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_AND_FILTER_12_BIT_ROUTING_AND12_INPUT_VLANMPLS_EN_MSK, ECLASS120_REG_ROUTING_AND_FILTER_12_BIT_ROUTING_AND12_INPUT_VLANMPLS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND12_INPUT_VLANMPLS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_AND12_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_AND12_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND12_INPUT_GEN_EN_set", N, 11);
    if (value > 67108863)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_AND12_INPUT_GEN_EN_set", value, 67108863);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_AND12_INPUT_GEN_EN_set", N, value );

    /* ((0x00000170 + (N) * 512) bits 25:0) field ROUTING_AND12_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_12 index N=0..11 */
    eclass_reg_ROUTING_AND_FILTER_12_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      ECLASS120_REG_ROUTING_AND_FILTER_12_BIT_ROUTING_AND12_INPUT_GEN_EN_MSK,
                                                      ECLASS120_REG_ROUTING_AND_FILTER_12_BIT_ROUTING_AND12_INPUT_GEN_EN_OFF,
                                                      value);
}

static INLINE UINT32 eclass_field_ROUTING_AND12_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_AND12_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND12_INPUT_GEN_EN_get", N, 11);
    /* ((0x00000170 + (N) * 512) bits 25:0) field ROUTING_AND12_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_12 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_12_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_12_BIT_ROUTING_AND12_INPUT_GEN_EN_MSK) >> ECLASS120_REG_ROUTING_AND_FILTER_12_BIT_ROUTING_AND12_INPUT_GEN_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_AND12_INPUT_GEN_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_AND12_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_AND12_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND12_INPUT_GEN_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND12_INPUT_GEN_EN_set", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND12_INPUT_GEN_EN_set", stop_bit, 25 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND12_INPUT_GEN_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000170 + (N) * 512) bits 25:0) field ROUTING_AND12_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_12 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 25) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 25;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000170 + (N) * 512) bits 25:0) field ROUTING_AND12_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_12 index N=0..11 */
        eclass_reg_ROUTING_AND_FILTER_12_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          subfield_mask << (ECLASS120_REG_ROUTING_AND_FILTER_12_BIT_ROUTING_AND12_INPUT_GEN_EN_OFF + subfield_offset),
                                                          ECLASS120_REG_ROUTING_AND_FILTER_12_BIT_ROUTING_AND12_INPUT_GEN_EN_OFF + subfield_offset,
                                                          value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_AND12_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_AND12_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND12_INPUT_GEN_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND12_INPUT_GEN_EN_get", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND12_INPUT_GEN_EN_get", stop_bit, 25 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 25) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 25;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000170 + (N) * 512) bits 25:0) field ROUTING_AND12_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_12 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_12_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_12_BIT_ROUTING_AND12_INPUT_GEN_EN_MSK)
                  >> ECLASS120_REG_ROUTING_AND_FILTER_12_BIT_ROUTING_AND12_INPUT_GEN_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_AND_FILTER_12_BIT_ROUTING_AND12_INPUT_GEN_EN_MSK, ECLASS120_REG_ROUTING_AND_FILTER_12_BIT_ROUTING_AND12_INPUT_GEN_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND12_INPUT_GEN_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_AND13_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_AND13_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND13_INPUT_VLANMPLS_EN_set", N, 11);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_AND13_INPUT_VLANMPLS_EN_set", value, 63);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_AND13_INPUT_VLANMPLS_EN_set", N, value );

    /* ((0x00000174 + (N) * 512) bits 31:26) field ROUTING_AND13_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_13 index N=0..11 */
    eclass_reg_ROUTING_AND_FILTER_13_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      ECLASS120_REG_ROUTING_AND_FILTER_13_BIT_ROUTING_AND13_INPUT_VLANMPLS_EN_MSK,
                                                      ECLASS120_REG_ROUTING_AND_FILTER_13_BIT_ROUTING_AND13_INPUT_VLANMPLS_EN_OFF,
                                                      value);
}

static INLINE UINT32 eclass_field_ROUTING_AND13_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_AND13_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND13_INPUT_VLANMPLS_EN_get", N, 11);
    /* ((0x00000174 + (N) * 512) bits 31:26) field ROUTING_AND13_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_13 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_13_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_13_BIT_ROUTING_AND13_INPUT_VLANMPLS_EN_MSK) >> ECLASS120_REG_ROUTING_AND_FILTER_13_BIT_ROUTING_AND13_INPUT_VLANMPLS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_AND13_INPUT_VLANMPLS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_AND13_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_AND13_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit,
                                                                           UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND13_INPUT_VLANMPLS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND13_INPUT_VLANMPLS_EN_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND13_INPUT_VLANMPLS_EN_set", stop_bit, 5 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND13_INPUT_VLANMPLS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000174 + (N) * 512) bits 31:26) field ROUTING_AND13_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_13 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000174 + (N) * 512) bits 31:26) field ROUTING_AND13_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_13 index N=0..11 */
        eclass_reg_ROUTING_AND_FILTER_13_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          subfield_mask << (ECLASS120_REG_ROUTING_AND_FILTER_13_BIT_ROUTING_AND13_INPUT_VLANMPLS_EN_OFF + subfield_offset),
                                                          ECLASS120_REG_ROUTING_AND_FILTER_13_BIT_ROUTING_AND13_INPUT_VLANMPLS_EN_OFF + subfield_offset,
                                                          value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_AND13_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                             eclass_handle_t *h_ptr,
                                                                             UINT32  N,
                                                                             UINT32 start_bit,
                                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_AND13_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                             eclass_handle_t *h_ptr,
                                                                             UINT32  N,
                                                                             UINT32 start_bit,
                                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND13_INPUT_VLANMPLS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND13_INPUT_VLANMPLS_EN_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND13_INPUT_VLANMPLS_EN_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000174 + (N) * 512) bits 31:26) field ROUTING_AND13_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_13 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_13_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_13_BIT_ROUTING_AND13_INPUT_VLANMPLS_EN_MSK)
                  >> ECLASS120_REG_ROUTING_AND_FILTER_13_BIT_ROUTING_AND13_INPUT_VLANMPLS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_AND_FILTER_13_BIT_ROUTING_AND13_INPUT_VLANMPLS_EN_MSK, ECLASS120_REG_ROUTING_AND_FILTER_13_BIT_ROUTING_AND13_INPUT_VLANMPLS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND13_INPUT_VLANMPLS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_AND13_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_AND13_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND13_INPUT_GEN_EN_set", N, 11);
    if (value > 67108863)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_AND13_INPUT_GEN_EN_set", value, 67108863);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_AND13_INPUT_GEN_EN_set", N, value );

    /* ((0x00000174 + (N) * 512) bits 25:0) field ROUTING_AND13_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_13 index N=0..11 */
    eclass_reg_ROUTING_AND_FILTER_13_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      ECLASS120_REG_ROUTING_AND_FILTER_13_BIT_ROUTING_AND13_INPUT_GEN_EN_MSK,
                                                      ECLASS120_REG_ROUTING_AND_FILTER_13_BIT_ROUTING_AND13_INPUT_GEN_EN_OFF,
                                                      value);
}

static INLINE UINT32 eclass_field_ROUTING_AND13_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_AND13_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND13_INPUT_GEN_EN_get", N, 11);
    /* ((0x00000174 + (N) * 512) bits 25:0) field ROUTING_AND13_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_13 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_13_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_13_BIT_ROUTING_AND13_INPUT_GEN_EN_MSK) >> ECLASS120_REG_ROUTING_AND_FILTER_13_BIT_ROUTING_AND13_INPUT_GEN_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_AND13_INPUT_GEN_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_AND13_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_AND13_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND13_INPUT_GEN_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND13_INPUT_GEN_EN_set", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND13_INPUT_GEN_EN_set", stop_bit, 25 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND13_INPUT_GEN_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000174 + (N) * 512) bits 25:0) field ROUTING_AND13_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_13 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 25) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 25;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000174 + (N) * 512) bits 25:0) field ROUTING_AND13_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_13 index N=0..11 */
        eclass_reg_ROUTING_AND_FILTER_13_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          subfield_mask << (ECLASS120_REG_ROUTING_AND_FILTER_13_BIT_ROUTING_AND13_INPUT_GEN_EN_OFF + subfield_offset),
                                                          ECLASS120_REG_ROUTING_AND_FILTER_13_BIT_ROUTING_AND13_INPUT_GEN_EN_OFF + subfield_offset,
                                                          value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_AND13_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_AND13_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND13_INPUT_GEN_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND13_INPUT_GEN_EN_get", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND13_INPUT_GEN_EN_get", stop_bit, 25 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 25) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 25;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000174 + (N) * 512) bits 25:0) field ROUTING_AND13_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_13 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_13_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_13_BIT_ROUTING_AND13_INPUT_GEN_EN_MSK)
                  >> ECLASS120_REG_ROUTING_AND_FILTER_13_BIT_ROUTING_AND13_INPUT_GEN_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_AND_FILTER_13_BIT_ROUTING_AND13_INPUT_GEN_EN_MSK, ECLASS120_REG_ROUTING_AND_FILTER_13_BIT_ROUTING_AND13_INPUT_GEN_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND13_INPUT_GEN_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_AND14_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_AND14_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND14_INPUT_VLANMPLS_EN_set", N, 11);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_AND14_INPUT_VLANMPLS_EN_set", value, 63);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_AND14_INPUT_VLANMPLS_EN_set", N, value );

    /* ((0x00000178 + (N) * 512) bits 31:26) field ROUTING_AND14_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_14 index N=0..11 */
    eclass_reg_ROUTING_AND_FILTER_14_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      ECLASS120_REG_ROUTING_AND_FILTER_14_BIT_ROUTING_AND14_INPUT_VLANMPLS_EN_MSK,
                                                      ECLASS120_REG_ROUTING_AND_FILTER_14_BIT_ROUTING_AND14_INPUT_VLANMPLS_EN_OFF,
                                                      value);
}

static INLINE UINT32 eclass_field_ROUTING_AND14_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_AND14_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND14_INPUT_VLANMPLS_EN_get", N, 11);
    /* ((0x00000178 + (N) * 512) bits 31:26) field ROUTING_AND14_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_14 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_14_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_14_BIT_ROUTING_AND14_INPUT_VLANMPLS_EN_MSK) >> ECLASS120_REG_ROUTING_AND_FILTER_14_BIT_ROUTING_AND14_INPUT_VLANMPLS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_AND14_INPUT_VLANMPLS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_AND14_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_AND14_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit,
                                                                           UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND14_INPUT_VLANMPLS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND14_INPUT_VLANMPLS_EN_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND14_INPUT_VLANMPLS_EN_set", stop_bit, 5 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND14_INPUT_VLANMPLS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000178 + (N) * 512) bits 31:26) field ROUTING_AND14_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_14 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000178 + (N) * 512) bits 31:26) field ROUTING_AND14_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_14 index N=0..11 */
        eclass_reg_ROUTING_AND_FILTER_14_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          subfield_mask << (ECLASS120_REG_ROUTING_AND_FILTER_14_BIT_ROUTING_AND14_INPUT_VLANMPLS_EN_OFF + subfield_offset),
                                                          ECLASS120_REG_ROUTING_AND_FILTER_14_BIT_ROUTING_AND14_INPUT_VLANMPLS_EN_OFF + subfield_offset,
                                                          value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_AND14_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                             eclass_handle_t *h_ptr,
                                                                             UINT32  N,
                                                                             UINT32 start_bit,
                                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_AND14_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                             eclass_handle_t *h_ptr,
                                                                             UINT32  N,
                                                                             UINT32 start_bit,
                                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND14_INPUT_VLANMPLS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND14_INPUT_VLANMPLS_EN_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND14_INPUT_VLANMPLS_EN_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000178 + (N) * 512) bits 31:26) field ROUTING_AND14_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_14 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_14_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_14_BIT_ROUTING_AND14_INPUT_VLANMPLS_EN_MSK)
                  >> ECLASS120_REG_ROUTING_AND_FILTER_14_BIT_ROUTING_AND14_INPUT_VLANMPLS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_AND_FILTER_14_BIT_ROUTING_AND14_INPUT_VLANMPLS_EN_MSK, ECLASS120_REG_ROUTING_AND_FILTER_14_BIT_ROUTING_AND14_INPUT_VLANMPLS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND14_INPUT_VLANMPLS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_AND14_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_AND14_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND14_INPUT_GEN_EN_set", N, 11);
    if (value > 67108863)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_AND14_INPUT_GEN_EN_set", value, 67108863);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_AND14_INPUT_GEN_EN_set", N, value );

    /* ((0x00000178 + (N) * 512) bits 25:0) field ROUTING_AND14_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_14 index N=0..11 */
    eclass_reg_ROUTING_AND_FILTER_14_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      ECLASS120_REG_ROUTING_AND_FILTER_14_BIT_ROUTING_AND14_INPUT_GEN_EN_MSK,
                                                      ECLASS120_REG_ROUTING_AND_FILTER_14_BIT_ROUTING_AND14_INPUT_GEN_EN_OFF,
                                                      value);
}

static INLINE UINT32 eclass_field_ROUTING_AND14_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_AND14_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND14_INPUT_GEN_EN_get", N, 11);
    /* ((0x00000178 + (N) * 512) bits 25:0) field ROUTING_AND14_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_14 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_14_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_14_BIT_ROUTING_AND14_INPUT_GEN_EN_MSK) >> ECLASS120_REG_ROUTING_AND_FILTER_14_BIT_ROUTING_AND14_INPUT_GEN_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_AND14_INPUT_GEN_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_AND14_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_AND14_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND14_INPUT_GEN_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND14_INPUT_GEN_EN_set", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND14_INPUT_GEN_EN_set", stop_bit, 25 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND14_INPUT_GEN_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00000178 + (N) * 512) bits 25:0) field ROUTING_AND14_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_14 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 25) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 25;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00000178 + (N) * 512) bits 25:0) field ROUTING_AND14_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_14 index N=0..11 */
        eclass_reg_ROUTING_AND_FILTER_14_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          subfield_mask << (ECLASS120_REG_ROUTING_AND_FILTER_14_BIT_ROUTING_AND14_INPUT_GEN_EN_OFF + subfield_offset),
                                                          ECLASS120_REG_ROUTING_AND_FILTER_14_BIT_ROUTING_AND14_INPUT_GEN_EN_OFF + subfield_offset,
                                                          value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_AND14_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_AND14_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND14_INPUT_GEN_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND14_INPUT_GEN_EN_get", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND14_INPUT_GEN_EN_get", stop_bit, 25 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 25) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 25;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00000178 + (N) * 512) bits 25:0) field ROUTING_AND14_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_14 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_14_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_14_BIT_ROUTING_AND14_INPUT_GEN_EN_MSK)
                  >> ECLASS120_REG_ROUTING_AND_FILTER_14_BIT_ROUTING_AND14_INPUT_GEN_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_AND_FILTER_14_BIT_ROUTING_AND14_INPUT_GEN_EN_MSK, ECLASS120_REG_ROUTING_AND_FILTER_14_BIT_ROUTING_AND14_INPUT_GEN_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND14_INPUT_GEN_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_AND15_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_AND15_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND15_INPUT_VLANMPLS_EN_set", N, 11);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_AND15_INPUT_VLANMPLS_EN_set", value, 63);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_AND15_INPUT_VLANMPLS_EN_set", N, value );

    /* ((0x0000017c + (N) * 512) bits 31:26) field ROUTING_AND15_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_15 index N=0..11 */
    eclass_reg_ROUTING_AND_FILTER_15_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      ECLASS120_REG_ROUTING_AND_FILTER_15_BIT_ROUTING_AND15_INPUT_VLANMPLS_EN_MSK,
                                                      ECLASS120_REG_ROUTING_AND_FILTER_15_BIT_ROUTING_AND15_INPUT_VLANMPLS_EN_OFF,
                                                      value);
}

static INLINE UINT32 eclass_field_ROUTING_AND15_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_AND15_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND15_INPUT_VLANMPLS_EN_get", N, 11);
    /* ((0x0000017c + (N) * 512) bits 31:26) field ROUTING_AND15_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_15 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_15_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_15_BIT_ROUTING_AND15_INPUT_VLANMPLS_EN_MSK) >> ECLASS120_REG_ROUTING_AND_FILTER_15_BIT_ROUTING_AND15_INPUT_VLANMPLS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_AND15_INPUT_VLANMPLS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_AND15_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit,
                                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_AND15_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit,
                                                                           UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND15_INPUT_VLANMPLS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND15_INPUT_VLANMPLS_EN_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND15_INPUT_VLANMPLS_EN_set", stop_bit, 5 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND15_INPUT_VLANMPLS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000017c + (N) * 512) bits 31:26) field ROUTING_AND15_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_15 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000017c + (N) * 512) bits 31:26) field ROUTING_AND15_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_15 index N=0..11 */
        eclass_reg_ROUTING_AND_FILTER_15_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          subfield_mask << (ECLASS120_REG_ROUTING_AND_FILTER_15_BIT_ROUTING_AND15_INPUT_VLANMPLS_EN_OFF + subfield_offset),
                                                          ECLASS120_REG_ROUTING_AND_FILTER_15_BIT_ROUTING_AND15_INPUT_VLANMPLS_EN_OFF + subfield_offset,
                                                          value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_AND15_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                             eclass_handle_t *h_ptr,
                                                                             UINT32  N,
                                                                             UINT32 start_bit,
                                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_AND15_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                             eclass_handle_t *h_ptr,
                                                                             UINT32  N,
                                                                             UINT32 start_bit,
                                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND15_INPUT_VLANMPLS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND15_INPUT_VLANMPLS_EN_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND15_INPUT_VLANMPLS_EN_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000017c + (N) * 512) bits 31:26) field ROUTING_AND15_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_15 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_15_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_15_BIT_ROUTING_AND15_INPUT_VLANMPLS_EN_MSK)
                  >> ECLASS120_REG_ROUTING_AND_FILTER_15_BIT_ROUTING_AND15_INPUT_VLANMPLS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_AND_FILTER_15_BIT_ROUTING_AND15_INPUT_VLANMPLS_EN_MSK, ECLASS120_REG_ROUTING_AND_FILTER_15_BIT_ROUTING_AND15_INPUT_VLANMPLS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND15_INPUT_VLANMPLS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_AND15_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_AND15_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N,
                                                                UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND15_INPUT_GEN_EN_set", N, 11);
    if (value > 67108863)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_AND15_INPUT_GEN_EN_set", value, 67108863);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_AND15_INPUT_GEN_EN_set", N, value );

    /* ((0x0000017c + (N) * 512) bits 25:0) field ROUTING_AND15_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_15 index N=0..11 */
    eclass_reg_ROUTING_AND_FILTER_15_array_field_set( b_ptr,
                                                      h_ptr,
                                                      N,
                                                      ECLASS120_REG_ROUTING_AND_FILTER_15_BIT_ROUTING_AND15_INPUT_GEN_EN_MSK,
                                                      ECLASS120_REG_ROUTING_AND_FILTER_15_BIT_ROUTING_AND15_INPUT_GEN_EN_OFF,
                                                      value);
}

static INLINE UINT32 eclass_field_ROUTING_AND15_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_AND15_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND15_INPUT_GEN_EN_get", N, 11);
    /* ((0x0000017c + (N) * 512) bits 25:0) field ROUTING_AND15_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_15 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_15_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_15_BIT_ROUTING_AND15_INPUT_GEN_EN_MSK) >> ECLASS120_REG_ROUTING_AND_FILTER_15_BIT_ROUTING_AND15_INPUT_GEN_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_AND15_INPUT_GEN_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_AND15_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_AND15_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND15_INPUT_GEN_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND15_INPUT_GEN_EN_set", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND15_INPUT_GEN_EN_set", stop_bit, 25 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND15_INPUT_GEN_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000017c + (N) * 512) bits 25:0) field ROUTING_AND15_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_15 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 25) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 25;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000017c + (N) * 512) bits 25:0) field ROUTING_AND15_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_15 index N=0..11 */
        eclass_reg_ROUTING_AND_FILTER_15_array_field_set( b_ptr,
                                                          h_ptr,
                                                          N,
                                                          subfield_mask << (ECLASS120_REG_ROUTING_AND_FILTER_15_BIT_ROUTING_AND15_INPUT_GEN_EN_OFF + subfield_offset),
                                                          ECLASS120_REG_ROUTING_AND_FILTER_15_BIT_ROUTING_AND15_INPUT_GEN_EN_OFF + subfield_offset,
                                                          value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_AND15_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_AND15_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND15_INPUT_GEN_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND15_INPUT_GEN_EN_get", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND15_INPUT_GEN_EN_get", stop_bit, 25 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 25) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 25;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000017c + (N) * 512) bits 25:0) field ROUTING_AND15_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_15 index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_15_array_read( b_ptr,
                                                             h_ptr,
                                                             N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_15_BIT_ROUTING_AND15_INPUT_GEN_EN_MSK)
                  >> ECLASS120_REG_ROUTING_AND_FILTER_15_BIT_ROUTING_AND15_INPUT_GEN_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_AND_FILTER_15_BIT_ROUTING_AND15_INPUT_GEN_EN_MSK, ECLASS120_REG_ROUTING_AND_FILTER_15_BIT_ROUTING_AND15_INPUT_GEN_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND15_INPUT_GEN_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_AND_MPLS_OVERFLOW_EN_set( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_AND_MPLS_OVERFLOW_EN_set( eclass_buffer_t *b_ptr,
                                                                  eclass_handle_t *h_ptr,
                                                                  UINT32  N,
                                                                  UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND_MPLS_OVERFLOW_EN_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_AND_MPLS_OVERFLOW_EN_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_AND_MPLS_OVERFLOW_EN_set", N, value );

    /* ((0x0000018c + (N) * 512) bits 31:16) field ROUTING_AND_MPLS_OVERFLOW_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW index N=0..11 */
    eclass_reg_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_array_field_set( b_ptr,
                                                                          h_ptr,
                                                                          N,
                                                                          ECLASS120_REG_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_BIT_ROUTING_AND_MPLS_OVERFLOW_EN_MSK,
                                                                          ECLASS120_REG_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_BIT_ROUTING_AND_MPLS_OVERFLOW_EN_OFF,
                                                                          value);
}

static INLINE UINT32 eclass_field_ROUTING_AND_MPLS_OVERFLOW_EN_get( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_AND_MPLS_OVERFLOW_EN_get( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND_MPLS_OVERFLOW_EN_get", N, 11);
    /* ((0x0000018c + (N) * 512) bits 31:16) field ROUTING_AND_MPLS_OVERFLOW_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_array_read( b_ptr,
                                                                                 h_ptr,
                                                                                 N);
    value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_BIT_ROUTING_AND_MPLS_OVERFLOW_EN_MSK) >> ECLASS120_REG_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_BIT_ROUTING_AND_MPLS_OVERFLOW_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_AND_MPLS_OVERFLOW_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_AND_MPLS_OVERFLOW_EN_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_AND_MPLS_OVERFLOW_EN_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit,
                                                                        UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND_MPLS_OVERFLOW_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND_MPLS_OVERFLOW_EN_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND_MPLS_OVERFLOW_EN_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND_MPLS_OVERFLOW_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000018c + (N) * 512) bits 31:16) field ROUTING_AND_MPLS_OVERFLOW_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000018c + (N) * 512) bits 31:16) field ROUTING_AND_MPLS_OVERFLOW_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW index N=0..11 */
        eclass_reg_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_array_field_set( b_ptr,
                                                                              h_ptr,
                                                                              N,
                                                                              subfield_mask << (ECLASS120_REG_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_BIT_ROUTING_AND_MPLS_OVERFLOW_EN_OFF + subfield_offset),
                                                                              ECLASS120_REG_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_BIT_ROUTING_AND_MPLS_OVERFLOW_EN_OFF + subfield_offset,
                                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_AND_MPLS_OVERFLOW_EN_get( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_AND_MPLS_OVERFLOW_EN_get( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND_MPLS_OVERFLOW_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND_MPLS_OVERFLOW_EN_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND_MPLS_OVERFLOW_EN_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000018c + (N) * 512) bits 31:16) field ROUTING_AND_MPLS_OVERFLOW_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_array_read( b_ptr,
                                                                                 h_ptr,
                                                                                 N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_BIT_ROUTING_AND_MPLS_OVERFLOW_EN_MSK)
                  >> ECLASS120_REG_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_BIT_ROUTING_AND_MPLS_OVERFLOW_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_BIT_ROUTING_AND_MPLS_OVERFLOW_EN_MSK, ECLASS120_REG_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_BIT_ROUTING_AND_MPLS_OVERFLOW_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND_MPLS_OVERFLOW_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_AND_NO_MATCH_EN_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_AND_NO_MATCH_EN_set( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N,
                                                             UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND_NO_MATCH_EN_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_AND_NO_MATCH_EN_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_AND_NO_MATCH_EN_set", N, value );

    /* ((0x0000018c + (N) * 512) bits 15:0) field ROUTING_AND_NO_MATCH_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW index N=0..11 */
    eclass_reg_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_array_field_set( b_ptr,
                                                                          h_ptr,
                                                                          N,
                                                                          ECLASS120_REG_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_BIT_ROUTING_AND_NO_MATCH_EN_MSK,
                                                                          ECLASS120_REG_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_BIT_ROUTING_AND_NO_MATCH_EN_OFF,
                                                                          value);
}

static INLINE UINT32 eclass_field_ROUTING_AND_NO_MATCH_EN_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_AND_NO_MATCH_EN_get( eclass_buffer_t *b_ptr,
                                                               eclass_handle_t *h_ptr,
                                                               UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_AND_NO_MATCH_EN_get", N, 11);
    /* ((0x0000018c + (N) * 512) bits 15:0) field ROUTING_AND_NO_MATCH_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_array_read( b_ptr,
                                                                                 h_ptr,
                                                                                 N);
    value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_BIT_ROUTING_AND_NO_MATCH_EN_MSK) >> ECLASS120_REG_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_BIT_ROUTING_AND_NO_MATCH_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_AND_NO_MATCH_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_AND_NO_MATCH_EN_set( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_AND_NO_MATCH_EN_set( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit,
                                                                   UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND_NO_MATCH_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND_NO_MATCH_EN_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND_NO_MATCH_EN_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND_NO_MATCH_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000018c + (N) * 512) bits 15:0) field ROUTING_AND_NO_MATCH_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000018c + (N) * 512) bits 15:0) field ROUTING_AND_NO_MATCH_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW index N=0..11 */
        eclass_reg_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_array_field_set( b_ptr,
                                                                              h_ptr,
                                                                              N,
                                                                              subfield_mask << (ECLASS120_REG_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_BIT_ROUTING_AND_NO_MATCH_EN_OFF + subfield_offset),
                                                                              ECLASS120_REG_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_BIT_ROUTING_AND_NO_MATCH_EN_OFF + subfield_offset,
                                                                              value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_AND_NO_MATCH_EN_get( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_AND_NO_MATCH_EN_get( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_AND_NO_MATCH_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_AND_NO_MATCH_EN_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_AND_NO_MATCH_EN_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000018c + (N) * 512) bits 15:0) field ROUTING_AND_NO_MATCH_EN of register PMC_ECLASS120_REG_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW index N=0..11 */
    reg_value = eclass_reg_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_array_read( b_ptr,
                                                                                 h_ptr,
                                                                                 N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_BIT_ROUTING_AND_NO_MATCH_EN_MSK)
                  >> ECLASS120_REG_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_BIT_ROUTING_AND_NO_MATCH_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_BIT_ROUTING_AND_NO_MATCH_EN_MSK, ECLASS120_REG_ROUTING_AND_FILTER_NO_MATCH_MPLS_OVERFLOW_BIT_ROUTING_AND_NO_MATCH_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_AND_NO_MATCH_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR0_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR0_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR0_INPUT_VLANMPLS_EN_set", N, 11);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR0_INPUT_VLANMPLS_EN_set", value, 63);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR0_INPUT_VLANMPLS_EN_set", N, value );

    /* ((0x000001a0 + (N) * 512) bits 31:26) field ROUTING_OR0_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_0_REG1 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_0_REG1_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_0_REG1_BIT_ROUTING_OR0_INPUT_VLANMPLS_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_0_REG1_BIT_ROUTING_OR0_INPUT_VLANMPLS_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR0_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR0_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR0_INPUT_VLANMPLS_EN_get", N, 11);
    /* ((0x000001a0 + (N) * 512) bits 31:26) field ROUTING_OR0_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_0_REG1 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_0_REG1_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_0_REG1_BIT_ROUTING_OR0_INPUT_VLANMPLS_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_0_REG1_BIT_ROUTING_OR0_INPUT_VLANMPLS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR0_INPUT_VLANMPLS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_OR0_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_OR0_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR0_INPUT_VLANMPLS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR0_INPUT_VLANMPLS_EN_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR0_INPUT_VLANMPLS_EN_set", stop_bit, 5 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR0_INPUT_VLANMPLS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000001a0 + (N) * 512) bits 31:26) field ROUTING_OR0_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_0_REG1 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000001a0 + (N) * 512) bits 31:26) field ROUTING_OR0_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_0_REG1 index N=0..11 */
        eclass_reg_ROUTING_OR_FILTER_0_REG1_array_field_set( b_ptr,
                                                             h_ptr,
                                                             N,
                                                             subfield_mask << (ECLASS120_REG_ROUTING_OR_FILTER_0_REG1_BIT_ROUTING_OR0_INPUT_VLANMPLS_EN_OFF + subfield_offset),
                                                             ECLASS120_REG_ROUTING_OR_FILTER_0_REG1_BIT_ROUTING_OR0_INPUT_VLANMPLS_EN_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_OR0_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_OR0_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR0_INPUT_VLANMPLS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR0_INPUT_VLANMPLS_EN_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR0_INPUT_VLANMPLS_EN_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000001a0 + (N) * 512) bits 31:26) field ROUTING_OR0_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_0_REG1 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_0_REG1_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_0_REG1_BIT_ROUTING_OR0_INPUT_VLANMPLS_EN_MSK)
                  >> ECLASS120_REG_ROUTING_OR_FILTER_0_REG1_BIT_ROUTING_OR0_INPUT_VLANMPLS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_OR_FILTER_0_REG1_BIT_ROUTING_OR0_INPUT_VLANMPLS_EN_MSK, ECLASS120_REG_ROUTING_OR_FILTER_0_REG1_BIT_ROUTING_OR0_INPUT_VLANMPLS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR0_INPUT_VLANMPLS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR0_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR0_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR0_INPUT_GEN_EN_set", N, 11);
    if (value > 67108863)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR0_INPUT_GEN_EN_set", value, 67108863);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR0_INPUT_GEN_EN_set", N, value );

    /* ((0x000001a0 + (N) * 512) bits 25:0) field ROUTING_OR0_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_0_REG1 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_0_REG1_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_0_REG1_BIT_ROUTING_OR0_INPUT_GEN_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_0_REG1_BIT_ROUTING_OR0_INPUT_GEN_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR0_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR0_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR0_INPUT_GEN_EN_get", N, 11);
    /* ((0x000001a0 + (N) * 512) bits 25:0) field ROUTING_OR0_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_0_REG1 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_0_REG1_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_0_REG1_BIT_ROUTING_OR0_INPUT_GEN_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_0_REG1_BIT_ROUTING_OR0_INPUT_GEN_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR0_INPUT_GEN_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_OR0_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_OR0_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR0_INPUT_GEN_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR0_INPUT_GEN_EN_set", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR0_INPUT_GEN_EN_set", stop_bit, 25 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR0_INPUT_GEN_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000001a0 + (N) * 512) bits 25:0) field ROUTING_OR0_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_0_REG1 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 25) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 25;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000001a0 + (N) * 512) bits 25:0) field ROUTING_OR0_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_0_REG1 index N=0..11 */
        eclass_reg_ROUTING_OR_FILTER_0_REG1_array_field_set( b_ptr,
                                                             h_ptr,
                                                             N,
                                                             subfield_mask << (ECLASS120_REG_ROUTING_OR_FILTER_0_REG1_BIT_ROUTING_OR0_INPUT_GEN_EN_OFF + subfield_offset),
                                                             ECLASS120_REG_ROUTING_OR_FILTER_0_REG1_BIT_ROUTING_OR0_INPUT_GEN_EN_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_OR0_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_OR0_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR0_INPUT_GEN_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR0_INPUT_GEN_EN_get", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR0_INPUT_GEN_EN_get", stop_bit, 25 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 25) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 25;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000001a0 + (N) * 512) bits 25:0) field ROUTING_OR0_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_0_REG1 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_0_REG1_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_0_REG1_BIT_ROUTING_OR0_INPUT_GEN_EN_MSK)
                  >> ECLASS120_REG_ROUTING_OR_FILTER_0_REG1_BIT_ROUTING_OR0_INPUT_GEN_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_OR_FILTER_0_REG1_BIT_ROUTING_OR0_INPUT_GEN_EN_MSK, ECLASS120_REG_ROUTING_OR_FILTER_0_REG1_BIT_ROUTING_OR0_INPUT_GEN_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR0_INPUT_GEN_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR0_OUTPUT_EN_set( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR0_OUTPUT_EN_set( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR0_OUTPUT_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR0_OUTPUT_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR0_OUTPUT_EN_set", N, value );

    /* ((0x000001a4 + (N) * 512) bits 31) field ROUTING_OR0_OUTPUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_0_REG2 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_0_REG2_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_0_REG2_BIT_ROUTING_OR0_OUTPUT_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_0_REG2_BIT_ROUTING_OR0_OUTPUT_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR0_OUTPUT_EN_get( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR0_OUTPUT_EN_get( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR0_OUTPUT_EN_get", N, 11);
    /* ((0x000001a4 + (N) * 512) bits 31) field ROUTING_OR0_OUTPUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_0_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_0_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_0_REG2_BIT_ROUTING_OR0_OUTPUT_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_0_REG2_BIT_ROUTING_OR0_OUTPUT_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR0_OUTPUT_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR0_OUTPUT_INV_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR0_OUTPUT_INV_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR0_OUTPUT_INV_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR0_OUTPUT_INV_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR0_OUTPUT_INV_set", N, value );

    /* ((0x000001a4 + (N) * 512) bits 28) field ROUTING_OR0_OUTPUT_INV of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_0_REG2 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_0_REG2_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_0_REG2_BIT_ROUTING_OR0_OUTPUT_INV_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_0_REG2_BIT_ROUTING_OR0_OUTPUT_INV_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR0_OUTPUT_INV_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR0_OUTPUT_INV_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR0_OUTPUT_INV_get", N, 11);
    /* ((0x000001a4 + (N) * 512) bits 28) field ROUTING_OR0_OUTPUT_INV of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_0_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_0_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_0_REG2_BIT_ROUTING_OR0_OUTPUT_INV_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_0_REG2_BIT_ROUTING_OR0_OUTPUT_INV_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR0_OUTPUT_INV_get", N, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR0_INPUT_MPLS_OVERFLOW_EN_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR0_INPUT_MPLS_OVERFLOW_EN_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR0_INPUT_MPLS_OVERFLOW_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR0_INPUT_MPLS_OVERFLOW_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR0_INPUT_MPLS_OVERFLOW_EN_set", N, value );

    /* ((0x000001a4 + (N) * 512) bits 20) field ROUTING_OR0_INPUT_MPLS_OVERFLOW_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_0_REG2 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_0_REG2_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_0_REG2_BIT_ROUTING_OR0_INPUT_MPLS_OVERFLOW_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_0_REG2_BIT_ROUTING_OR0_INPUT_MPLS_OVERFLOW_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR0_INPUT_MPLS_OVERFLOW_EN_get( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR0_INPUT_MPLS_OVERFLOW_EN_get( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR0_INPUT_MPLS_OVERFLOW_EN_get", N, 11);
    /* ((0x000001a4 + (N) * 512) bits 20) field ROUTING_OR0_INPUT_MPLS_OVERFLOW_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_0_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_0_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_0_REG2_BIT_ROUTING_OR0_INPUT_MPLS_OVERFLOW_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_0_REG2_BIT_ROUTING_OR0_INPUT_MPLS_OVERFLOW_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR0_INPUT_MPLS_OVERFLOW_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR0_INPUT_NO_MATCH_ALL_EN_set( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR0_INPUT_NO_MATCH_ALL_EN_set( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR0_INPUT_NO_MATCH_ALL_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR0_INPUT_NO_MATCH_ALL_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR0_INPUT_NO_MATCH_ALL_EN_set", N, value );

    /* ((0x000001a4 + (N) * 512) bits 16) field ROUTING_OR0_INPUT_NO_MATCH_ALL_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_0_REG2 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_0_REG2_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_0_REG2_BIT_ROUTING_OR0_INPUT_NO_MATCH_ALL_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_0_REG2_BIT_ROUTING_OR0_INPUT_NO_MATCH_ALL_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR0_INPUT_NO_MATCH_ALL_EN_get( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR0_INPUT_NO_MATCH_ALL_EN_get( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR0_INPUT_NO_MATCH_ALL_EN_get", N, 11);
    /* ((0x000001a4 + (N) * 512) bits 16) field ROUTING_OR0_INPUT_NO_MATCH_ALL_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_0_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_0_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_0_REG2_BIT_ROUTING_OR0_INPUT_NO_MATCH_ALL_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_0_REG2_BIT_ROUTING_OR0_INPUT_NO_MATCH_ALL_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR0_INPUT_NO_MATCH_ALL_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR0_INPUT_ANDOUT_EN_set( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR0_INPUT_ANDOUT_EN_set( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR0_INPUT_ANDOUT_EN_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR0_INPUT_ANDOUT_EN_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR0_INPUT_ANDOUT_EN_set", N, value );

    /* ((0x000001a4 + (N) * 512) bits 15:0) field ROUTING_OR0_INPUT_ANDOUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_0_REG2 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_0_REG2_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_0_REG2_BIT_ROUTING_OR0_INPUT_ANDOUT_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_0_REG2_BIT_ROUTING_OR0_INPUT_ANDOUT_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR0_INPUT_ANDOUT_EN_get( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR0_INPUT_ANDOUT_EN_get( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR0_INPUT_ANDOUT_EN_get", N, 11);
    /* ((0x000001a4 + (N) * 512) bits 15:0) field ROUTING_OR0_INPUT_ANDOUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_0_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_0_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_0_REG2_BIT_ROUTING_OR0_INPUT_ANDOUT_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_0_REG2_BIT_ROUTING_OR0_INPUT_ANDOUT_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR0_INPUT_ANDOUT_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_OR0_INPUT_ANDOUT_EN_set( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_OR0_INPUT_ANDOUT_EN_set( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR0_INPUT_ANDOUT_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR0_INPUT_ANDOUT_EN_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR0_INPUT_ANDOUT_EN_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR0_INPUT_ANDOUT_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000001a4 + (N) * 512) bits 15:0) field ROUTING_OR0_INPUT_ANDOUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_0_REG2 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000001a4 + (N) * 512) bits 15:0) field ROUTING_OR0_INPUT_ANDOUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_0_REG2 index N=0..11 */
        eclass_reg_ROUTING_OR_FILTER_0_REG2_array_field_set( b_ptr,
                                                             h_ptr,
                                                             N,
                                                             subfield_mask << (ECLASS120_REG_ROUTING_OR_FILTER_0_REG2_BIT_ROUTING_OR0_INPUT_ANDOUT_EN_OFF + subfield_offset),
                                                             ECLASS120_REG_ROUTING_OR_FILTER_0_REG2_BIT_ROUTING_OR0_INPUT_ANDOUT_EN_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_OR0_INPUT_ANDOUT_EN_get( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_OR0_INPUT_ANDOUT_EN_get( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR0_INPUT_ANDOUT_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR0_INPUT_ANDOUT_EN_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR0_INPUT_ANDOUT_EN_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000001a4 + (N) * 512) bits 15:0) field ROUTING_OR0_INPUT_ANDOUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_0_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_0_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_0_REG2_BIT_ROUTING_OR0_INPUT_ANDOUT_EN_MSK)
                  >> ECLASS120_REG_ROUTING_OR_FILTER_0_REG2_BIT_ROUTING_OR0_INPUT_ANDOUT_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_OR_FILTER_0_REG2_BIT_ROUTING_OR0_INPUT_ANDOUT_EN_MSK, ECLASS120_REG_ROUTING_OR_FILTER_0_REG2_BIT_ROUTING_OR0_INPUT_ANDOUT_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR0_INPUT_ANDOUT_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR1_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR1_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR1_INPUT_VLANMPLS_EN_set", N, 11);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR1_INPUT_VLANMPLS_EN_set", value, 63);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR1_INPUT_VLANMPLS_EN_set", N, value );

    /* ((0x000001a8 + (N) * 512) bits 31:26) field ROUTING_OR1_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_1_REG1 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_1_REG1_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_1_REG1_BIT_ROUTING_OR1_INPUT_VLANMPLS_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_1_REG1_BIT_ROUTING_OR1_INPUT_VLANMPLS_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR1_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR1_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR1_INPUT_VLANMPLS_EN_get", N, 11);
    /* ((0x000001a8 + (N) * 512) bits 31:26) field ROUTING_OR1_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_1_REG1 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_1_REG1_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_1_REG1_BIT_ROUTING_OR1_INPUT_VLANMPLS_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_1_REG1_BIT_ROUTING_OR1_INPUT_VLANMPLS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR1_INPUT_VLANMPLS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_OR1_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_OR1_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR1_INPUT_VLANMPLS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR1_INPUT_VLANMPLS_EN_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR1_INPUT_VLANMPLS_EN_set", stop_bit, 5 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR1_INPUT_VLANMPLS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000001a8 + (N) * 512) bits 31:26) field ROUTING_OR1_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_1_REG1 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000001a8 + (N) * 512) bits 31:26) field ROUTING_OR1_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_1_REG1 index N=0..11 */
        eclass_reg_ROUTING_OR_FILTER_1_REG1_array_field_set( b_ptr,
                                                             h_ptr,
                                                             N,
                                                             subfield_mask << (ECLASS120_REG_ROUTING_OR_FILTER_1_REG1_BIT_ROUTING_OR1_INPUT_VLANMPLS_EN_OFF + subfield_offset),
                                                             ECLASS120_REG_ROUTING_OR_FILTER_1_REG1_BIT_ROUTING_OR1_INPUT_VLANMPLS_EN_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_OR1_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_OR1_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR1_INPUT_VLANMPLS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR1_INPUT_VLANMPLS_EN_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR1_INPUT_VLANMPLS_EN_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000001a8 + (N) * 512) bits 31:26) field ROUTING_OR1_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_1_REG1 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_1_REG1_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_1_REG1_BIT_ROUTING_OR1_INPUT_VLANMPLS_EN_MSK)
                  >> ECLASS120_REG_ROUTING_OR_FILTER_1_REG1_BIT_ROUTING_OR1_INPUT_VLANMPLS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_OR_FILTER_1_REG1_BIT_ROUTING_OR1_INPUT_VLANMPLS_EN_MSK, ECLASS120_REG_ROUTING_OR_FILTER_1_REG1_BIT_ROUTING_OR1_INPUT_VLANMPLS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR1_INPUT_VLANMPLS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR1_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR1_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR1_INPUT_GEN_EN_set", N, 11);
    if (value > 67108863)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR1_INPUT_GEN_EN_set", value, 67108863);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR1_INPUT_GEN_EN_set", N, value );

    /* ((0x000001a8 + (N) * 512) bits 25:0) field ROUTING_OR1_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_1_REG1 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_1_REG1_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_1_REG1_BIT_ROUTING_OR1_INPUT_GEN_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_1_REG1_BIT_ROUTING_OR1_INPUT_GEN_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR1_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR1_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR1_INPUT_GEN_EN_get", N, 11);
    /* ((0x000001a8 + (N) * 512) bits 25:0) field ROUTING_OR1_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_1_REG1 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_1_REG1_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_1_REG1_BIT_ROUTING_OR1_INPUT_GEN_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_1_REG1_BIT_ROUTING_OR1_INPUT_GEN_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR1_INPUT_GEN_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_OR1_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_OR1_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR1_INPUT_GEN_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR1_INPUT_GEN_EN_set", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR1_INPUT_GEN_EN_set", stop_bit, 25 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR1_INPUT_GEN_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000001a8 + (N) * 512) bits 25:0) field ROUTING_OR1_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_1_REG1 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 25) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 25;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000001a8 + (N) * 512) bits 25:0) field ROUTING_OR1_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_1_REG1 index N=0..11 */
        eclass_reg_ROUTING_OR_FILTER_1_REG1_array_field_set( b_ptr,
                                                             h_ptr,
                                                             N,
                                                             subfield_mask << (ECLASS120_REG_ROUTING_OR_FILTER_1_REG1_BIT_ROUTING_OR1_INPUT_GEN_EN_OFF + subfield_offset),
                                                             ECLASS120_REG_ROUTING_OR_FILTER_1_REG1_BIT_ROUTING_OR1_INPUT_GEN_EN_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_OR1_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_OR1_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR1_INPUT_GEN_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR1_INPUT_GEN_EN_get", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR1_INPUT_GEN_EN_get", stop_bit, 25 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 25) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 25;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000001a8 + (N) * 512) bits 25:0) field ROUTING_OR1_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_1_REG1 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_1_REG1_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_1_REG1_BIT_ROUTING_OR1_INPUT_GEN_EN_MSK)
                  >> ECLASS120_REG_ROUTING_OR_FILTER_1_REG1_BIT_ROUTING_OR1_INPUT_GEN_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_OR_FILTER_1_REG1_BIT_ROUTING_OR1_INPUT_GEN_EN_MSK, ECLASS120_REG_ROUTING_OR_FILTER_1_REG1_BIT_ROUTING_OR1_INPUT_GEN_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR1_INPUT_GEN_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR1_OUTPUT_EN_set( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR1_OUTPUT_EN_set( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR1_OUTPUT_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR1_OUTPUT_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR1_OUTPUT_EN_set", N, value );

    /* ((0x000001ac + (N) * 512) bits 31) field ROUTING_OR1_OUTPUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_1_REG2 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_1_REG2_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_1_REG2_BIT_ROUTING_OR1_OUTPUT_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_1_REG2_BIT_ROUTING_OR1_OUTPUT_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR1_OUTPUT_EN_get( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR1_OUTPUT_EN_get( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR1_OUTPUT_EN_get", N, 11);
    /* ((0x000001ac + (N) * 512) bits 31) field ROUTING_OR1_OUTPUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_1_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_1_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_1_REG2_BIT_ROUTING_OR1_OUTPUT_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_1_REG2_BIT_ROUTING_OR1_OUTPUT_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR1_OUTPUT_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR1_OUTPUT_INV_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR1_OUTPUT_INV_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR1_OUTPUT_INV_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR1_OUTPUT_INV_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR1_OUTPUT_INV_set", N, value );

    /* ((0x000001ac + (N) * 512) bits 28) field ROUTING_OR1_OUTPUT_INV of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_1_REG2 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_1_REG2_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_1_REG2_BIT_ROUTING_OR1_OUTPUT_INV_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_1_REG2_BIT_ROUTING_OR1_OUTPUT_INV_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR1_OUTPUT_INV_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR1_OUTPUT_INV_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR1_OUTPUT_INV_get", N, 11);
    /* ((0x000001ac + (N) * 512) bits 28) field ROUTING_OR1_OUTPUT_INV of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_1_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_1_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_1_REG2_BIT_ROUTING_OR1_OUTPUT_INV_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_1_REG2_BIT_ROUTING_OR1_OUTPUT_INV_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR1_OUTPUT_INV_get", N, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR1_INPUT_MPLS_OVERFLOW_EN_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR1_INPUT_MPLS_OVERFLOW_EN_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR1_INPUT_MPLS_OVERFLOW_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR1_INPUT_MPLS_OVERFLOW_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR1_INPUT_MPLS_OVERFLOW_EN_set", N, value );

    /* ((0x000001ac + (N) * 512) bits 20) field ROUTING_OR1_INPUT_MPLS_OVERFLOW_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_1_REG2 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_1_REG2_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_1_REG2_BIT_ROUTING_OR1_INPUT_MPLS_OVERFLOW_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_1_REG2_BIT_ROUTING_OR1_INPUT_MPLS_OVERFLOW_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR1_INPUT_MPLS_OVERFLOW_EN_get( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR1_INPUT_MPLS_OVERFLOW_EN_get( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR1_INPUT_MPLS_OVERFLOW_EN_get", N, 11);
    /* ((0x000001ac + (N) * 512) bits 20) field ROUTING_OR1_INPUT_MPLS_OVERFLOW_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_1_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_1_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_1_REG2_BIT_ROUTING_OR1_INPUT_MPLS_OVERFLOW_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_1_REG2_BIT_ROUTING_OR1_INPUT_MPLS_OVERFLOW_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR1_INPUT_MPLS_OVERFLOW_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR1_INPUT_NO_MATCH_ALL_EN_set( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR1_INPUT_NO_MATCH_ALL_EN_set( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR1_INPUT_NO_MATCH_ALL_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR1_INPUT_NO_MATCH_ALL_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR1_INPUT_NO_MATCH_ALL_EN_set", N, value );

    /* ((0x000001ac + (N) * 512) bits 16) field ROUTING_OR1_INPUT_NO_MATCH_ALL_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_1_REG2 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_1_REG2_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_1_REG2_BIT_ROUTING_OR1_INPUT_NO_MATCH_ALL_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_1_REG2_BIT_ROUTING_OR1_INPUT_NO_MATCH_ALL_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR1_INPUT_NO_MATCH_ALL_EN_get( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR1_INPUT_NO_MATCH_ALL_EN_get( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR1_INPUT_NO_MATCH_ALL_EN_get", N, 11);
    /* ((0x000001ac + (N) * 512) bits 16) field ROUTING_OR1_INPUT_NO_MATCH_ALL_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_1_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_1_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_1_REG2_BIT_ROUTING_OR1_INPUT_NO_MATCH_ALL_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_1_REG2_BIT_ROUTING_OR1_INPUT_NO_MATCH_ALL_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR1_INPUT_NO_MATCH_ALL_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR1_INPUT_ANDOUT_EN_set( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR1_INPUT_ANDOUT_EN_set( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR1_INPUT_ANDOUT_EN_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR1_INPUT_ANDOUT_EN_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR1_INPUT_ANDOUT_EN_set", N, value );

    /* ((0x000001ac + (N) * 512) bits 15:0) field ROUTING_OR1_INPUT_ANDOUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_1_REG2 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_1_REG2_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_1_REG2_BIT_ROUTING_OR1_INPUT_ANDOUT_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_1_REG2_BIT_ROUTING_OR1_INPUT_ANDOUT_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR1_INPUT_ANDOUT_EN_get( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR1_INPUT_ANDOUT_EN_get( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR1_INPUT_ANDOUT_EN_get", N, 11);
    /* ((0x000001ac + (N) * 512) bits 15:0) field ROUTING_OR1_INPUT_ANDOUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_1_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_1_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_1_REG2_BIT_ROUTING_OR1_INPUT_ANDOUT_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_1_REG2_BIT_ROUTING_OR1_INPUT_ANDOUT_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR1_INPUT_ANDOUT_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_OR1_INPUT_ANDOUT_EN_set( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_OR1_INPUT_ANDOUT_EN_set( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR1_INPUT_ANDOUT_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR1_INPUT_ANDOUT_EN_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR1_INPUT_ANDOUT_EN_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR1_INPUT_ANDOUT_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000001ac + (N) * 512) bits 15:0) field ROUTING_OR1_INPUT_ANDOUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_1_REG2 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000001ac + (N) * 512) bits 15:0) field ROUTING_OR1_INPUT_ANDOUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_1_REG2 index N=0..11 */
        eclass_reg_ROUTING_OR_FILTER_1_REG2_array_field_set( b_ptr,
                                                             h_ptr,
                                                             N,
                                                             subfield_mask << (ECLASS120_REG_ROUTING_OR_FILTER_1_REG2_BIT_ROUTING_OR1_INPUT_ANDOUT_EN_OFF + subfield_offset),
                                                             ECLASS120_REG_ROUTING_OR_FILTER_1_REG2_BIT_ROUTING_OR1_INPUT_ANDOUT_EN_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_OR1_INPUT_ANDOUT_EN_get( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_OR1_INPUT_ANDOUT_EN_get( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR1_INPUT_ANDOUT_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR1_INPUT_ANDOUT_EN_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR1_INPUT_ANDOUT_EN_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000001ac + (N) * 512) bits 15:0) field ROUTING_OR1_INPUT_ANDOUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_1_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_1_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_1_REG2_BIT_ROUTING_OR1_INPUT_ANDOUT_EN_MSK)
                  >> ECLASS120_REG_ROUTING_OR_FILTER_1_REG2_BIT_ROUTING_OR1_INPUT_ANDOUT_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_OR_FILTER_1_REG2_BIT_ROUTING_OR1_INPUT_ANDOUT_EN_MSK, ECLASS120_REG_ROUTING_OR_FILTER_1_REG2_BIT_ROUTING_OR1_INPUT_ANDOUT_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR1_INPUT_ANDOUT_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR2_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR2_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR2_INPUT_VLANMPLS_EN_set", N, 11);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR2_INPUT_VLANMPLS_EN_set", value, 63);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR2_INPUT_VLANMPLS_EN_set", N, value );

    /* ((0x000001b0 + (N) * 512) bits 31:26) field ROUTING_OR2_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_2_REG1 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_2_REG1_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_2_REG1_BIT_ROUTING_OR2_INPUT_VLANMPLS_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_2_REG1_BIT_ROUTING_OR2_INPUT_VLANMPLS_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR2_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR2_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR2_INPUT_VLANMPLS_EN_get", N, 11);
    /* ((0x000001b0 + (N) * 512) bits 31:26) field ROUTING_OR2_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_2_REG1 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_2_REG1_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_2_REG1_BIT_ROUTING_OR2_INPUT_VLANMPLS_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_2_REG1_BIT_ROUTING_OR2_INPUT_VLANMPLS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR2_INPUT_VLANMPLS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_OR2_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_OR2_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR2_INPUT_VLANMPLS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR2_INPUT_VLANMPLS_EN_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR2_INPUT_VLANMPLS_EN_set", stop_bit, 5 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR2_INPUT_VLANMPLS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000001b0 + (N) * 512) bits 31:26) field ROUTING_OR2_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_2_REG1 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000001b0 + (N) * 512) bits 31:26) field ROUTING_OR2_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_2_REG1 index N=0..11 */
        eclass_reg_ROUTING_OR_FILTER_2_REG1_array_field_set( b_ptr,
                                                             h_ptr,
                                                             N,
                                                             subfield_mask << (ECLASS120_REG_ROUTING_OR_FILTER_2_REG1_BIT_ROUTING_OR2_INPUT_VLANMPLS_EN_OFF + subfield_offset),
                                                             ECLASS120_REG_ROUTING_OR_FILTER_2_REG1_BIT_ROUTING_OR2_INPUT_VLANMPLS_EN_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_OR2_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_OR2_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR2_INPUT_VLANMPLS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR2_INPUT_VLANMPLS_EN_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR2_INPUT_VLANMPLS_EN_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000001b0 + (N) * 512) bits 31:26) field ROUTING_OR2_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_2_REG1 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_2_REG1_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_2_REG1_BIT_ROUTING_OR2_INPUT_VLANMPLS_EN_MSK)
                  >> ECLASS120_REG_ROUTING_OR_FILTER_2_REG1_BIT_ROUTING_OR2_INPUT_VLANMPLS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_OR_FILTER_2_REG1_BIT_ROUTING_OR2_INPUT_VLANMPLS_EN_MSK, ECLASS120_REG_ROUTING_OR_FILTER_2_REG1_BIT_ROUTING_OR2_INPUT_VLANMPLS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR2_INPUT_VLANMPLS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR2_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR2_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR2_INPUT_GEN_EN_set", N, 11);
    if (value > 67108863)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR2_INPUT_GEN_EN_set", value, 67108863);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR2_INPUT_GEN_EN_set", N, value );

    /* ((0x000001b0 + (N) * 512) bits 25:0) field ROUTING_OR2_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_2_REG1 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_2_REG1_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_2_REG1_BIT_ROUTING_OR2_INPUT_GEN_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_2_REG1_BIT_ROUTING_OR2_INPUT_GEN_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR2_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR2_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR2_INPUT_GEN_EN_get", N, 11);
    /* ((0x000001b0 + (N) * 512) bits 25:0) field ROUTING_OR2_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_2_REG1 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_2_REG1_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_2_REG1_BIT_ROUTING_OR2_INPUT_GEN_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_2_REG1_BIT_ROUTING_OR2_INPUT_GEN_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR2_INPUT_GEN_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_OR2_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_OR2_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR2_INPUT_GEN_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR2_INPUT_GEN_EN_set", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR2_INPUT_GEN_EN_set", stop_bit, 25 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR2_INPUT_GEN_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000001b0 + (N) * 512) bits 25:0) field ROUTING_OR2_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_2_REG1 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 25) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 25;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000001b0 + (N) * 512) bits 25:0) field ROUTING_OR2_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_2_REG1 index N=0..11 */
        eclass_reg_ROUTING_OR_FILTER_2_REG1_array_field_set( b_ptr,
                                                             h_ptr,
                                                             N,
                                                             subfield_mask << (ECLASS120_REG_ROUTING_OR_FILTER_2_REG1_BIT_ROUTING_OR2_INPUT_GEN_EN_OFF + subfield_offset),
                                                             ECLASS120_REG_ROUTING_OR_FILTER_2_REG1_BIT_ROUTING_OR2_INPUT_GEN_EN_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_OR2_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_OR2_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR2_INPUT_GEN_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR2_INPUT_GEN_EN_get", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR2_INPUT_GEN_EN_get", stop_bit, 25 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 25) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 25;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000001b0 + (N) * 512) bits 25:0) field ROUTING_OR2_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_2_REG1 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_2_REG1_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_2_REG1_BIT_ROUTING_OR2_INPUT_GEN_EN_MSK)
                  >> ECLASS120_REG_ROUTING_OR_FILTER_2_REG1_BIT_ROUTING_OR2_INPUT_GEN_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_OR_FILTER_2_REG1_BIT_ROUTING_OR2_INPUT_GEN_EN_MSK, ECLASS120_REG_ROUTING_OR_FILTER_2_REG1_BIT_ROUTING_OR2_INPUT_GEN_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR2_INPUT_GEN_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR2_OUTPUT_EN_set( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR2_OUTPUT_EN_set( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR2_OUTPUT_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR2_OUTPUT_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR2_OUTPUT_EN_set", N, value );

    /* ((0x000001b4 + (N) * 512) bits 31) field ROUTING_OR2_OUTPUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_2_REG2 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_2_REG2_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_2_REG2_BIT_ROUTING_OR2_OUTPUT_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_2_REG2_BIT_ROUTING_OR2_OUTPUT_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR2_OUTPUT_EN_get( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR2_OUTPUT_EN_get( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR2_OUTPUT_EN_get", N, 11);
    /* ((0x000001b4 + (N) * 512) bits 31) field ROUTING_OR2_OUTPUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_2_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_2_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_2_REG2_BIT_ROUTING_OR2_OUTPUT_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_2_REG2_BIT_ROUTING_OR2_OUTPUT_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR2_OUTPUT_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR2_OUTPUT_INV_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR2_OUTPUT_INV_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR2_OUTPUT_INV_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR2_OUTPUT_INV_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR2_OUTPUT_INV_set", N, value );

    /* ((0x000001b4 + (N) * 512) bits 28) field ROUTING_OR2_OUTPUT_INV of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_2_REG2 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_2_REG2_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_2_REG2_BIT_ROUTING_OR2_OUTPUT_INV_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_2_REG2_BIT_ROUTING_OR2_OUTPUT_INV_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR2_OUTPUT_INV_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR2_OUTPUT_INV_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR2_OUTPUT_INV_get", N, 11);
    /* ((0x000001b4 + (N) * 512) bits 28) field ROUTING_OR2_OUTPUT_INV of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_2_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_2_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_2_REG2_BIT_ROUTING_OR2_OUTPUT_INV_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_2_REG2_BIT_ROUTING_OR2_OUTPUT_INV_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR2_OUTPUT_INV_get", N, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR2_INPUT_MPLS_OVERFLOW_EN_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR2_INPUT_MPLS_OVERFLOW_EN_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR2_INPUT_MPLS_OVERFLOW_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR2_INPUT_MPLS_OVERFLOW_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR2_INPUT_MPLS_OVERFLOW_EN_set", N, value );

    /* ((0x000001b4 + (N) * 512) bits 20) field ROUTING_OR2_INPUT_MPLS_OVERFLOW_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_2_REG2 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_2_REG2_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_2_REG2_BIT_ROUTING_OR2_INPUT_MPLS_OVERFLOW_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_2_REG2_BIT_ROUTING_OR2_INPUT_MPLS_OVERFLOW_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR2_INPUT_MPLS_OVERFLOW_EN_get( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR2_INPUT_MPLS_OVERFLOW_EN_get( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR2_INPUT_MPLS_OVERFLOW_EN_get", N, 11);
    /* ((0x000001b4 + (N) * 512) bits 20) field ROUTING_OR2_INPUT_MPLS_OVERFLOW_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_2_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_2_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_2_REG2_BIT_ROUTING_OR2_INPUT_MPLS_OVERFLOW_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_2_REG2_BIT_ROUTING_OR2_INPUT_MPLS_OVERFLOW_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR2_INPUT_MPLS_OVERFLOW_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR2_INPUT_NO_MATCH_ALL_EN_set( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR2_INPUT_NO_MATCH_ALL_EN_set( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR2_INPUT_NO_MATCH_ALL_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR2_INPUT_NO_MATCH_ALL_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR2_INPUT_NO_MATCH_ALL_EN_set", N, value );

    /* ((0x000001b4 + (N) * 512) bits 16) field ROUTING_OR2_INPUT_NO_MATCH_ALL_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_2_REG2 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_2_REG2_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_2_REG2_BIT_ROUTING_OR2_INPUT_NO_MATCH_ALL_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_2_REG2_BIT_ROUTING_OR2_INPUT_NO_MATCH_ALL_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR2_INPUT_NO_MATCH_ALL_EN_get( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR2_INPUT_NO_MATCH_ALL_EN_get( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR2_INPUT_NO_MATCH_ALL_EN_get", N, 11);
    /* ((0x000001b4 + (N) * 512) bits 16) field ROUTING_OR2_INPUT_NO_MATCH_ALL_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_2_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_2_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_2_REG2_BIT_ROUTING_OR2_INPUT_NO_MATCH_ALL_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_2_REG2_BIT_ROUTING_OR2_INPUT_NO_MATCH_ALL_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR2_INPUT_NO_MATCH_ALL_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR2_INPUT_ANDOUT_EN_set( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR2_INPUT_ANDOUT_EN_set( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR2_INPUT_ANDOUT_EN_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR2_INPUT_ANDOUT_EN_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR2_INPUT_ANDOUT_EN_set", N, value );

    /* ((0x000001b4 + (N) * 512) bits 15:0) field ROUTING_OR2_INPUT_ANDOUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_2_REG2 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_2_REG2_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_2_REG2_BIT_ROUTING_OR2_INPUT_ANDOUT_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_2_REG2_BIT_ROUTING_OR2_INPUT_ANDOUT_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR2_INPUT_ANDOUT_EN_get( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR2_INPUT_ANDOUT_EN_get( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR2_INPUT_ANDOUT_EN_get", N, 11);
    /* ((0x000001b4 + (N) * 512) bits 15:0) field ROUTING_OR2_INPUT_ANDOUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_2_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_2_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_2_REG2_BIT_ROUTING_OR2_INPUT_ANDOUT_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_2_REG2_BIT_ROUTING_OR2_INPUT_ANDOUT_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR2_INPUT_ANDOUT_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_OR2_INPUT_ANDOUT_EN_set( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_OR2_INPUT_ANDOUT_EN_set( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR2_INPUT_ANDOUT_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR2_INPUT_ANDOUT_EN_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR2_INPUT_ANDOUT_EN_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR2_INPUT_ANDOUT_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000001b4 + (N) * 512) bits 15:0) field ROUTING_OR2_INPUT_ANDOUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_2_REG2 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000001b4 + (N) * 512) bits 15:0) field ROUTING_OR2_INPUT_ANDOUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_2_REG2 index N=0..11 */
        eclass_reg_ROUTING_OR_FILTER_2_REG2_array_field_set( b_ptr,
                                                             h_ptr,
                                                             N,
                                                             subfield_mask << (ECLASS120_REG_ROUTING_OR_FILTER_2_REG2_BIT_ROUTING_OR2_INPUT_ANDOUT_EN_OFF + subfield_offset),
                                                             ECLASS120_REG_ROUTING_OR_FILTER_2_REG2_BIT_ROUTING_OR2_INPUT_ANDOUT_EN_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_OR2_INPUT_ANDOUT_EN_get( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_OR2_INPUT_ANDOUT_EN_get( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR2_INPUT_ANDOUT_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR2_INPUT_ANDOUT_EN_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR2_INPUT_ANDOUT_EN_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000001b4 + (N) * 512) bits 15:0) field ROUTING_OR2_INPUT_ANDOUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_2_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_2_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_2_REG2_BIT_ROUTING_OR2_INPUT_ANDOUT_EN_MSK)
                  >> ECLASS120_REG_ROUTING_OR_FILTER_2_REG2_BIT_ROUTING_OR2_INPUT_ANDOUT_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_OR_FILTER_2_REG2_BIT_ROUTING_OR2_INPUT_ANDOUT_EN_MSK, ECLASS120_REG_ROUTING_OR_FILTER_2_REG2_BIT_ROUTING_OR2_INPUT_ANDOUT_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR2_INPUT_ANDOUT_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR3_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR3_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR3_INPUT_VLANMPLS_EN_set", N, 11);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR3_INPUT_VLANMPLS_EN_set", value, 63);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR3_INPUT_VLANMPLS_EN_set", N, value );

    /* ((0x000001b8 + (N) * 512) bits 31:26) field ROUTING_OR3_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_3_REG1 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_3_REG1_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_3_REG1_BIT_ROUTING_OR3_INPUT_VLANMPLS_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_3_REG1_BIT_ROUTING_OR3_INPUT_VLANMPLS_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR3_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR3_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR3_INPUT_VLANMPLS_EN_get", N, 11);
    /* ((0x000001b8 + (N) * 512) bits 31:26) field ROUTING_OR3_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_3_REG1 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_3_REG1_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_3_REG1_BIT_ROUTING_OR3_INPUT_VLANMPLS_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_3_REG1_BIT_ROUTING_OR3_INPUT_VLANMPLS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR3_INPUT_VLANMPLS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_OR3_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_OR3_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR3_INPUT_VLANMPLS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR3_INPUT_VLANMPLS_EN_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR3_INPUT_VLANMPLS_EN_set", stop_bit, 5 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR3_INPUT_VLANMPLS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000001b8 + (N) * 512) bits 31:26) field ROUTING_OR3_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_3_REG1 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000001b8 + (N) * 512) bits 31:26) field ROUTING_OR3_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_3_REG1 index N=0..11 */
        eclass_reg_ROUTING_OR_FILTER_3_REG1_array_field_set( b_ptr,
                                                             h_ptr,
                                                             N,
                                                             subfield_mask << (ECLASS120_REG_ROUTING_OR_FILTER_3_REG1_BIT_ROUTING_OR3_INPUT_VLANMPLS_EN_OFF + subfield_offset),
                                                             ECLASS120_REG_ROUTING_OR_FILTER_3_REG1_BIT_ROUTING_OR3_INPUT_VLANMPLS_EN_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_OR3_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_OR3_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR3_INPUT_VLANMPLS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR3_INPUT_VLANMPLS_EN_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR3_INPUT_VLANMPLS_EN_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000001b8 + (N) * 512) bits 31:26) field ROUTING_OR3_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_3_REG1 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_3_REG1_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_3_REG1_BIT_ROUTING_OR3_INPUT_VLANMPLS_EN_MSK)
                  >> ECLASS120_REG_ROUTING_OR_FILTER_3_REG1_BIT_ROUTING_OR3_INPUT_VLANMPLS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_OR_FILTER_3_REG1_BIT_ROUTING_OR3_INPUT_VLANMPLS_EN_MSK, ECLASS120_REG_ROUTING_OR_FILTER_3_REG1_BIT_ROUTING_OR3_INPUT_VLANMPLS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR3_INPUT_VLANMPLS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR3_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR3_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR3_INPUT_GEN_EN_set", N, 11);
    if (value > 67108863)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR3_INPUT_GEN_EN_set", value, 67108863);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR3_INPUT_GEN_EN_set", N, value );

    /* ((0x000001b8 + (N) * 512) bits 25:0) field ROUTING_OR3_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_3_REG1 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_3_REG1_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_3_REG1_BIT_ROUTING_OR3_INPUT_GEN_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_3_REG1_BIT_ROUTING_OR3_INPUT_GEN_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR3_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR3_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR3_INPUT_GEN_EN_get", N, 11);
    /* ((0x000001b8 + (N) * 512) bits 25:0) field ROUTING_OR3_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_3_REG1 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_3_REG1_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_3_REG1_BIT_ROUTING_OR3_INPUT_GEN_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_3_REG1_BIT_ROUTING_OR3_INPUT_GEN_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR3_INPUT_GEN_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_OR3_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_OR3_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR3_INPUT_GEN_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR3_INPUT_GEN_EN_set", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR3_INPUT_GEN_EN_set", stop_bit, 25 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR3_INPUT_GEN_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000001b8 + (N) * 512) bits 25:0) field ROUTING_OR3_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_3_REG1 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 25) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 25;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000001b8 + (N) * 512) bits 25:0) field ROUTING_OR3_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_3_REG1 index N=0..11 */
        eclass_reg_ROUTING_OR_FILTER_3_REG1_array_field_set( b_ptr,
                                                             h_ptr,
                                                             N,
                                                             subfield_mask << (ECLASS120_REG_ROUTING_OR_FILTER_3_REG1_BIT_ROUTING_OR3_INPUT_GEN_EN_OFF + subfield_offset),
                                                             ECLASS120_REG_ROUTING_OR_FILTER_3_REG1_BIT_ROUTING_OR3_INPUT_GEN_EN_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_OR3_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_OR3_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR3_INPUT_GEN_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR3_INPUT_GEN_EN_get", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR3_INPUT_GEN_EN_get", stop_bit, 25 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 25) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 25;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000001b8 + (N) * 512) bits 25:0) field ROUTING_OR3_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_3_REG1 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_3_REG1_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_3_REG1_BIT_ROUTING_OR3_INPUT_GEN_EN_MSK)
                  >> ECLASS120_REG_ROUTING_OR_FILTER_3_REG1_BIT_ROUTING_OR3_INPUT_GEN_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_OR_FILTER_3_REG1_BIT_ROUTING_OR3_INPUT_GEN_EN_MSK, ECLASS120_REG_ROUTING_OR_FILTER_3_REG1_BIT_ROUTING_OR3_INPUT_GEN_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR3_INPUT_GEN_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR3_OUTPUT_EN_set( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR3_OUTPUT_EN_set( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR3_OUTPUT_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR3_OUTPUT_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR3_OUTPUT_EN_set", N, value );

    /* ((0x000001bc + (N) * 512) bits 31) field ROUTING_OR3_OUTPUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_3_REG2 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_3_REG2_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_3_REG2_BIT_ROUTING_OR3_OUTPUT_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_3_REG2_BIT_ROUTING_OR3_OUTPUT_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR3_OUTPUT_EN_get( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR3_OUTPUT_EN_get( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR3_OUTPUT_EN_get", N, 11);
    /* ((0x000001bc + (N) * 512) bits 31) field ROUTING_OR3_OUTPUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_3_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_3_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_3_REG2_BIT_ROUTING_OR3_OUTPUT_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_3_REG2_BIT_ROUTING_OR3_OUTPUT_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR3_OUTPUT_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR3_OUTPUT_INV_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR3_OUTPUT_INV_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR3_OUTPUT_INV_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR3_OUTPUT_INV_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR3_OUTPUT_INV_set", N, value );

    /* ((0x000001bc + (N) * 512) bits 28) field ROUTING_OR3_OUTPUT_INV of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_3_REG2 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_3_REG2_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_3_REG2_BIT_ROUTING_OR3_OUTPUT_INV_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_3_REG2_BIT_ROUTING_OR3_OUTPUT_INV_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR3_OUTPUT_INV_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR3_OUTPUT_INV_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR3_OUTPUT_INV_get", N, 11);
    /* ((0x000001bc + (N) * 512) bits 28) field ROUTING_OR3_OUTPUT_INV of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_3_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_3_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_3_REG2_BIT_ROUTING_OR3_OUTPUT_INV_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_3_REG2_BIT_ROUTING_OR3_OUTPUT_INV_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR3_OUTPUT_INV_get", N, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR3_INPUT_MPLS_OVERFLOW_EN_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR3_INPUT_MPLS_OVERFLOW_EN_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR3_INPUT_MPLS_OVERFLOW_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR3_INPUT_MPLS_OVERFLOW_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR3_INPUT_MPLS_OVERFLOW_EN_set", N, value );

    /* ((0x000001bc + (N) * 512) bits 20) field ROUTING_OR3_INPUT_MPLS_OVERFLOW_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_3_REG2 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_3_REG2_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_3_REG2_BIT_ROUTING_OR3_INPUT_MPLS_OVERFLOW_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_3_REG2_BIT_ROUTING_OR3_INPUT_MPLS_OVERFLOW_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR3_INPUT_MPLS_OVERFLOW_EN_get( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR3_INPUT_MPLS_OVERFLOW_EN_get( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR3_INPUT_MPLS_OVERFLOW_EN_get", N, 11);
    /* ((0x000001bc + (N) * 512) bits 20) field ROUTING_OR3_INPUT_MPLS_OVERFLOW_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_3_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_3_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_3_REG2_BIT_ROUTING_OR3_INPUT_MPLS_OVERFLOW_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_3_REG2_BIT_ROUTING_OR3_INPUT_MPLS_OVERFLOW_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR3_INPUT_MPLS_OVERFLOW_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR3_INPUT_NO_MATCH_ALL_EN_set( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR3_INPUT_NO_MATCH_ALL_EN_set( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR3_INPUT_NO_MATCH_ALL_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR3_INPUT_NO_MATCH_ALL_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR3_INPUT_NO_MATCH_ALL_EN_set", N, value );

    /* ((0x000001bc + (N) * 512) bits 16) field ROUTING_OR3_INPUT_NO_MATCH_ALL_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_3_REG2 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_3_REG2_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_3_REG2_BIT_ROUTING_OR3_INPUT_NO_MATCH_ALL_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_3_REG2_BIT_ROUTING_OR3_INPUT_NO_MATCH_ALL_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR3_INPUT_NO_MATCH_ALL_EN_get( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR3_INPUT_NO_MATCH_ALL_EN_get( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR3_INPUT_NO_MATCH_ALL_EN_get", N, 11);
    /* ((0x000001bc + (N) * 512) bits 16) field ROUTING_OR3_INPUT_NO_MATCH_ALL_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_3_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_3_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_3_REG2_BIT_ROUTING_OR3_INPUT_NO_MATCH_ALL_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_3_REG2_BIT_ROUTING_OR3_INPUT_NO_MATCH_ALL_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR3_INPUT_NO_MATCH_ALL_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR3_INPUT_ANDOUT_EN_set( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR3_INPUT_ANDOUT_EN_set( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR3_INPUT_ANDOUT_EN_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR3_INPUT_ANDOUT_EN_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR3_INPUT_ANDOUT_EN_set", N, value );

    /* ((0x000001bc + (N) * 512) bits 15:0) field ROUTING_OR3_INPUT_ANDOUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_3_REG2 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_3_REG2_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_3_REG2_BIT_ROUTING_OR3_INPUT_ANDOUT_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_3_REG2_BIT_ROUTING_OR3_INPUT_ANDOUT_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR3_INPUT_ANDOUT_EN_get( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR3_INPUT_ANDOUT_EN_get( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR3_INPUT_ANDOUT_EN_get", N, 11);
    /* ((0x000001bc + (N) * 512) bits 15:0) field ROUTING_OR3_INPUT_ANDOUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_3_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_3_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_3_REG2_BIT_ROUTING_OR3_INPUT_ANDOUT_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_3_REG2_BIT_ROUTING_OR3_INPUT_ANDOUT_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR3_INPUT_ANDOUT_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_OR3_INPUT_ANDOUT_EN_set( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_OR3_INPUT_ANDOUT_EN_set( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR3_INPUT_ANDOUT_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR3_INPUT_ANDOUT_EN_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR3_INPUT_ANDOUT_EN_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR3_INPUT_ANDOUT_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000001bc + (N) * 512) bits 15:0) field ROUTING_OR3_INPUT_ANDOUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_3_REG2 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000001bc + (N) * 512) bits 15:0) field ROUTING_OR3_INPUT_ANDOUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_3_REG2 index N=0..11 */
        eclass_reg_ROUTING_OR_FILTER_3_REG2_array_field_set( b_ptr,
                                                             h_ptr,
                                                             N,
                                                             subfield_mask << (ECLASS120_REG_ROUTING_OR_FILTER_3_REG2_BIT_ROUTING_OR3_INPUT_ANDOUT_EN_OFF + subfield_offset),
                                                             ECLASS120_REG_ROUTING_OR_FILTER_3_REG2_BIT_ROUTING_OR3_INPUT_ANDOUT_EN_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_OR3_INPUT_ANDOUT_EN_get( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_OR3_INPUT_ANDOUT_EN_get( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR3_INPUT_ANDOUT_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR3_INPUT_ANDOUT_EN_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR3_INPUT_ANDOUT_EN_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000001bc + (N) * 512) bits 15:0) field ROUTING_OR3_INPUT_ANDOUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_3_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_3_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_3_REG2_BIT_ROUTING_OR3_INPUT_ANDOUT_EN_MSK)
                  >> ECLASS120_REG_ROUTING_OR_FILTER_3_REG2_BIT_ROUTING_OR3_INPUT_ANDOUT_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_OR_FILTER_3_REG2_BIT_ROUTING_OR3_INPUT_ANDOUT_EN_MSK, ECLASS120_REG_ROUTING_OR_FILTER_3_REG2_BIT_ROUTING_OR3_INPUT_ANDOUT_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR3_INPUT_ANDOUT_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR4_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR4_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR4_INPUT_VLANMPLS_EN_set", N, 11);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR4_INPUT_VLANMPLS_EN_set", value, 63);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR4_INPUT_VLANMPLS_EN_set", N, value );

    /* ((0x000001c0 + (N) * 512) bits 31:26) field ROUTING_OR4_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_4_REG1 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_4_REG1_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_4_REG1_BIT_ROUTING_OR4_INPUT_VLANMPLS_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_4_REG1_BIT_ROUTING_OR4_INPUT_VLANMPLS_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR4_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR4_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR4_INPUT_VLANMPLS_EN_get", N, 11);
    /* ((0x000001c0 + (N) * 512) bits 31:26) field ROUTING_OR4_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_4_REG1 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_4_REG1_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_4_REG1_BIT_ROUTING_OR4_INPUT_VLANMPLS_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_4_REG1_BIT_ROUTING_OR4_INPUT_VLANMPLS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR4_INPUT_VLANMPLS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_OR4_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_OR4_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR4_INPUT_VLANMPLS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR4_INPUT_VLANMPLS_EN_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR4_INPUT_VLANMPLS_EN_set", stop_bit, 5 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR4_INPUT_VLANMPLS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000001c0 + (N) * 512) bits 31:26) field ROUTING_OR4_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_4_REG1 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000001c0 + (N) * 512) bits 31:26) field ROUTING_OR4_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_4_REG1 index N=0..11 */
        eclass_reg_ROUTING_OR_FILTER_4_REG1_array_field_set( b_ptr,
                                                             h_ptr,
                                                             N,
                                                             subfield_mask << (ECLASS120_REG_ROUTING_OR_FILTER_4_REG1_BIT_ROUTING_OR4_INPUT_VLANMPLS_EN_OFF + subfield_offset),
                                                             ECLASS120_REG_ROUTING_OR_FILTER_4_REG1_BIT_ROUTING_OR4_INPUT_VLANMPLS_EN_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_OR4_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_OR4_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR4_INPUT_VLANMPLS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR4_INPUT_VLANMPLS_EN_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR4_INPUT_VLANMPLS_EN_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000001c0 + (N) * 512) bits 31:26) field ROUTING_OR4_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_4_REG1 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_4_REG1_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_4_REG1_BIT_ROUTING_OR4_INPUT_VLANMPLS_EN_MSK)
                  >> ECLASS120_REG_ROUTING_OR_FILTER_4_REG1_BIT_ROUTING_OR4_INPUT_VLANMPLS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_OR_FILTER_4_REG1_BIT_ROUTING_OR4_INPUT_VLANMPLS_EN_MSK, ECLASS120_REG_ROUTING_OR_FILTER_4_REG1_BIT_ROUTING_OR4_INPUT_VLANMPLS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR4_INPUT_VLANMPLS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR4_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR4_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR4_INPUT_GEN_EN_set", N, 11);
    if (value > 67108863)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR4_INPUT_GEN_EN_set", value, 67108863);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR4_INPUT_GEN_EN_set", N, value );

    /* ((0x000001c0 + (N) * 512) bits 25:0) field ROUTING_OR4_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_4_REG1 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_4_REG1_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_4_REG1_BIT_ROUTING_OR4_INPUT_GEN_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_4_REG1_BIT_ROUTING_OR4_INPUT_GEN_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR4_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR4_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR4_INPUT_GEN_EN_get", N, 11);
    /* ((0x000001c0 + (N) * 512) bits 25:0) field ROUTING_OR4_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_4_REG1 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_4_REG1_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_4_REG1_BIT_ROUTING_OR4_INPUT_GEN_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_4_REG1_BIT_ROUTING_OR4_INPUT_GEN_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR4_INPUT_GEN_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_OR4_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_OR4_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR4_INPUT_GEN_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR4_INPUT_GEN_EN_set", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR4_INPUT_GEN_EN_set", stop_bit, 25 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR4_INPUT_GEN_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000001c0 + (N) * 512) bits 25:0) field ROUTING_OR4_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_4_REG1 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 25) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 25;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000001c0 + (N) * 512) bits 25:0) field ROUTING_OR4_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_4_REG1 index N=0..11 */
        eclass_reg_ROUTING_OR_FILTER_4_REG1_array_field_set( b_ptr,
                                                             h_ptr,
                                                             N,
                                                             subfield_mask << (ECLASS120_REG_ROUTING_OR_FILTER_4_REG1_BIT_ROUTING_OR4_INPUT_GEN_EN_OFF + subfield_offset),
                                                             ECLASS120_REG_ROUTING_OR_FILTER_4_REG1_BIT_ROUTING_OR4_INPUT_GEN_EN_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_OR4_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_OR4_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR4_INPUT_GEN_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR4_INPUT_GEN_EN_get", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR4_INPUT_GEN_EN_get", stop_bit, 25 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 25) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 25;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000001c0 + (N) * 512) bits 25:0) field ROUTING_OR4_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_4_REG1 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_4_REG1_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_4_REG1_BIT_ROUTING_OR4_INPUT_GEN_EN_MSK)
                  >> ECLASS120_REG_ROUTING_OR_FILTER_4_REG1_BIT_ROUTING_OR4_INPUT_GEN_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_OR_FILTER_4_REG1_BIT_ROUTING_OR4_INPUT_GEN_EN_MSK, ECLASS120_REG_ROUTING_OR_FILTER_4_REG1_BIT_ROUTING_OR4_INPUT_GEN_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR4_INPUT_GEN_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR4_OUTPUT_EN_set( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR4_OUTPUT_EN_set( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR4_OUTPUT_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR4_OUTPUT_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR4_OUTPUT_EN_set", N, value );

    /* ((0x000001c4 + (N) * 512) bits 31) field ROUTING_OR4_OUTPUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_4_REG2 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_4_REG2_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_4_REG2_BIT_ROUTING_OR4_OUTPUT_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_4_REG2_BIT_ROUTING_OR4_OUTPUT_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR4_OUTPUT_EN_get( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR4_OUTPUT_EN_get( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR4_OUTPUT_EN_get", N, 11);
    /* ((0x000001c4 + (N) * 512) bits 31) field ROUTING_OR4_OUTPUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_4_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_4_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_4_REG2_BIT_ROUTING_OR4_OUTPUT_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_4_REG2_BIT_ROUTING_OR4_OUTPUT_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR4_OUTPUT_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR4_OUTPUT_INV_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR4_OUTPUT_INV_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR4_OUTPUT_INV_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR4_OUTPUT_INV_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR4_OUTPUT_INV_set", N, value );

    /* ((0x000001c4 + (N) * 512) bits 28) field ROUTING_OR4_OUTPUT_INV of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_4_REG2 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_4_REG2_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_4_REG2_BIT_ROUTING_OR4_OUTPUT_INV_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_4_REG2_BIT_ROUTING_OR4_OUTPUT_INV_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR4_OUTPUT_INV_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR4_OUTPUT_INV_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR4_OUTPUT_INV_get", N, 11);
    /* ((0x000001c4 + (N) * 512) bits 28) field ROUTING_OR4_OUTPUT_INV of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_4_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_4_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_4_REG2_BIT_ROUTING_OR4_OUTPUT_INV_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_4_REG2_BIT_ROUTING_OR4_OUTPUT_INV_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR4_OUTPUT_INV_get", N, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR4_INPUT_MPLS_OVERFLOW_EN_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR4_INPUT_MPLS_OVERFLOW_EN_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR4_INPUT_MPLS_OVERFLOW_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR4_INPUT_MPLS_OVERFLOW_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR4_INPUT_MPLS_OVERFLOW_EN_set", N, value );

    /* ((0x000001c4 + (N) * 512) bits 20) field ROUTING_OR4_INPUT_MPLS_OVERFLOW_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_4_REG2 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_4_REG2_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_4_REG2_BIT_ROUTING_OR4_INPUT_MPLS_OVERFLOW_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_4_REG2_BIT_ROUTING_OR4_INPUT_MPLS_OVERFLOW_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR4_INPUT_MPLS_OVERFLOW_EN_get( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR4_INPUT_MPLS_OVERFLOW_EN_get( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR4_INPUT_MPLS_OVERFLOW_EN_get", N, 11);
    /* ((0x000001c4 + (N) * 512) bits 20) field ROUTING_OR4_INPUT_MPLS_OVERFLOW_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_4_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_4_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_4_REG2_BIT_ROUTING_OR4_INPUT_MPLS_OVERFLOW_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_4_REG2_BIT_ROUTING_OR4_INPUT_MPLS_OVERFLOW_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR4_INPUT_MPLS_OVERFLOW_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR4_INPUT_NO_MATCH_ALL_EN_set( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR4_INPUT_NO_MATCH_ALL_EN_set( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR4_INPUT_NO_MATCH_ALL_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR4_INPUT_NO_MATCH_ALL_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR4_INPUT_NO_MATCH_ALL_EN_set", N, value );

    /* ((0x000001c4 + (N) * 512) bits 16) field ROUTING_OR4_INPUT_NO_MATCH_ALL_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_4_REG2 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_4_REG2_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_4_REG2_BIT_ROUTING_OR4_INPUT_NO_MATCH_ALL_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_4_REG2_BIT_ROUTING_OR4_INPUT_NO_MATCH_ALL_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR4_INPUT_NO_MATCH_ALL_EN_get( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR4_INPUT_NO_MATCH_ALL_EN_get( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR4_INPUT_NO_MATCH_ALL_EN_get", N, 11);
    /* ((0x000001c4 + (N) * 512) bits 16) field ROUTING_OR4_INPUT_NO_MATCH_ALL_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_4_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_4_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_4_REG2_BIT_ROUTING_OR4_INPUT_NO_MATCH_ALL_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_4_REG2_BIT_ROUTING_OR4_INPUT_NO_MATCH_ALL_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR4_INPUT_NO_MATCH_ALL_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR4_INPUT_ANDOUT_EN_set( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR4_INPUT_ANDOUT_EN_set( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR4_INPUT_ANDOUT_EN_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR4_INPUT_ANDOUT_EN_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR4_INPUT_ANDOUT_EN_set", N, value );

    /* ((0x000001c4 + (N) * 512) bits 15:0) field ROUTING_OR4_INPUT_ANDOUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_4_REG2 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_4_REG2_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_4_REG2_BIT_ROUTING_OR4_INPUT_ANDOUT_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_4_REG2_BIT_ROUTING_OR4_INPUT_ANDOUT_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR4_INPUT_ANDOUT_EN_get( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR4_INPUT_ANDOUT_EN_get( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR4_INPUT_ANDOUT_EN_get", N, 11);
    /* ((0x000001c4 + (N) * 512) bits 15:0) field ROUTING_OR4_INPUT_ANDOUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_4_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_4_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_4_REG2_BIT_ROUTING_OR4_INPUT_ANDOUT_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_4_REG2_BIT_ROUTING_OR4_INPUT_ANDOUT_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR4_INPUT_ANDOUT_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_OR4_INPUT_ANDOUT_EN_set( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_OR4_INPUT_ANDOUT_EN_set( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR4_INPUT_ANDOUT_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR4_INPUT_ANDOUT_EN_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR4_INPUT_ANDOUT_EN_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR4_INPUT_ANDOUT_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000001c4 + (N) * 512) bits 15:0) field ROUTING_OR4_INPUT_ANDOUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_4_REG2 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000001c4 + (N) * 512) bits 15:0) field ROUTING_OR4_INPUT_ANDOUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_4_REG2 index N=0..11 */
        eclass_reg_ROUTING_OR_FILTER_4_REG2_array_field_set( b_ptr,
                                                             h_ptr,
                                                             N,
                                                             subfield_mask << (ECLASS120_REG_ROUTING_OR_FILTER_4_REG2_BIT_ROUTING_OR4_INPUT_ANDOUT_EN_OFF + subfield_offset),
                                                             ECLASS120_REG_ROUTING_OR_FILTER_4_REG2_BIT_ROUTING_OR4_INPUT_ANDOUT_EN_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_OR4_INPUT_ANDOUT_EN_get( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_OR4_INPUT_ANDOUT_EN_get( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR4_INPUT_ANDOUT_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR4_INPUT_ANDOUT_EN_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR4_INPUT_ANDOUT_EN_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000001c4 + (N) * 512) bits 15:0) field ROUTING_OR4_INPUT_ANDOUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_4_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_4_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_4_REG2_BIT_ROUTING_OR4_INPUT_ANDOUT_EN_MSK)
                  >> ECLASS120_REG_ROUTING_OR_FILTER_4_REG2_BIT_ROUTING_OR4_INPUT_ANDOUT_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_OR_FILTER_4_REG2_BIT_ROUTING_OR4_INPUT_ANDOUT_EN_MSK, ECLASS120_REG_ROUTING_OR_FILTER_4_REG2_BIT_ROUTING_OR4_INPUT_ANDOUT_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR4_INPUT_ANDOUT_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR5_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR5_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N,
                                                                   UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR5_INPUT_VLANMPLS_EN_set", N, 11);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR5_INPUT_VLANMPLS_EN_set", value, 63);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR5_INPUT_VLANMPLS_EN_set", N, value );

    /* ((0x000001c8 + (N) * 512) bits 31:26) field ROUTING_OR5_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_5_REG1 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_5_REG1_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_5_REG1_BIT_ROUTING_OR5_INPUT_VLANMPLS_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_5_REG1_BIT_ROUTING_OR5_INPUT_VLANMPLS_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR5_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR5_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                     eclass_handle_t *h_ptr,
                                                                     UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR5_INPUT_VLANMPLS_EN_get", N, 11);
    /* ((0x000001c8 + (N) * 512) bits 31:26) field ROUTING_OR5_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_5_REG1 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_5_REG1_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_5_REG1_BIT_ROUTING_OR5_INPUT_VLANMPLS_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_5_REG1_BIT_ROUTING_OR5_INPUT_VLANMPLS_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR5_INPUT_VLANMPLS_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_OR5_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_OR5_INPUT_VLANMPLS_EN_set( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR5_INPUT_VLANMPLS_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR5_INPUT_VLANMPLS_EN_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR5_INPUT_VLANMPLS_EN_set", stop_bit, 5 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR5_INPUT_VLANMPLS_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000001c8 + (N) * 512) bits 31:26) field ROUTING_OR5_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_5_REG1 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000001c8 + (N) * 512) bits 31:26) field ROUTING_OR5_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_5_REG1 index N=0..11 */
        eclass_reg_ROUTING_OR_FILTER_5_REG1_array_field_set( b_ptr,
                                                             h_ptr,
                                                             N,
                                                             subfield_mask << (ECLASS120_REG_ROUTING_OR_FILTER_5_REG1_BIT_ROUTING_OR5_INPUT_VLANMPLS_EN_OFF + subfield_offset),
                                                             ECLASS120_REG_ROUTING_OR_FILTER_5_REG1_BIT_ROUTING_OR5_INPUT_VLANMPLS_EN_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_OR5_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_OR5_INPUT_VLANMPLS_EN_get( eclass_buffer_t *b_ptr,
                                                                           eclass_handle_t *h_ptr,
                                                                           UINT32  N,
                                                                           UINT32 start_bit,
                                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR5_INPUT_VLANMPLS_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR5_INPUT_VLANMPLS_EN_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR5_INPUT_VLANMPLS_EN_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000001c8 + (N) * 512) bits 31:26) field ROUTING_OR5_INPUT_VLANMPLS_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_5_REG1 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_5_REG1_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_5_REG1_BIT_ROUTING_OR5_INPUT_VLANMPLS_EN_MSK)
                  >> ECLASS120_REG_ROUTING_OR_FILTER_5_REG1_BIT_ROUTING_OR5_INPUT_VLANMPLS_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_OR_FILTER_5_REG1_BIT_ROUTING_OR5_INPUT_VLANMPLS_EN_MSK, ECLASS120_REG_ROUTING_OR_FILTER_5_REG1_BIT_ROUTING_OR5_INPUT_VLANMPLS_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR5_INPUT_VLANMPLS_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR5_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR5_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N,
                                                              UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR5_INPUT_GEN_EN_set", N, 11);
    if (value > 67108863)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR5_INPUT_GEN_EN_set", value, 67108863);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR5_INPUT_GEN_EN_set", N, value );

    /* ((0x000001c8 + (N) * 512) bits 25:0) field ROUTING_OR5_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_5_REG1 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_5_REG1_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_5_REG1_BIT_ROUTING_OR5_INPUT_GEN_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_5_REG1_BIT_ROUTING_OR5_INPUT_GEN_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR5_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR5_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                eclass_handle_t *h_ptr,
                                                                UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR5_INPUT_GEN_EN_get", N, 11);
    /* ((0x000001c8 + (N) * 512) bits 25:0) field ROUTING_OR5_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_5_REG1 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_5_REG1_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_5_REG1_BIT_ROUTING_OR5_INPUT_GEN_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_5_REG1_BIT_ROUTING_OR5_INPUT_GEN_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR5_INPUT_GEN_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_OR5_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_OR5_INPUT_GEN_EN_set( eclass_buffer_t *b_ptr,
                                                                    eclass_handle_t *h_ptr,
                                                                    UINT32  N,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit,
                                                                    UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR5_INPUT_GEN_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR5_INPUT_GEN_EN_set", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR5_INPUT_GEN_EN_set", stop_bit, 25 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR5_INPUT_GEN_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000001c8 + (N) * 512) bits 25:0) field ROUTING_OR5_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_5_REG1 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 25) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 25;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000001c8 + (N) * 512) bits 25:0) field ROUTING_OR5_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_5_REG1 index N=0..11 */
        eclass_reg_ROUTING_OR_FILTER_5_REG1_array_field_set( b_ptr,
                                                             h_ptr,
                                                             N,
                                                             subfield_mask << (ECLASS120_REG_ROUTING_OR_FILTER_5_REG1_BIT_ROUTING_OR5_INPUT_GEN_EN_OFF + subfield_offset),
                                                             ECLASS120_REG_ROUTING_OR_FILTER_5_REG1_BIT_ROUTING_OR5_INPUT_GEN_EN_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_OR5_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_OR5_INPUT_GEN_EN_get( eclass_buffer_t *b_ptr,
                                                                      eclass_handle_t *h_ptr,
                                                                      UINT32  N,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR5_INPUT_GEN_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR5_INPUT_GEN_EN_get", stop_bit, start_bit );
    if (stop_bit > 25) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR5_INPUT_GEN_EN_get", stop_bit, 25 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 25) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 25;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000001c8 + (N) * 512) bits 25:0) field ROUTING_OR5_INPUT_GEN_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_5_REG1 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_5_REG1_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_5_REG1_BIT_ROUTING_OR5_INPUT_GEN_EN_MSK)
                  >> ECLASS120_REG_ROUTING_OR_FILTER_5_REG1_BIT_ROUTING_OR5_INPUT_GEN_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_OR_FILTER_5_REG1_BIT_ROUTING_OR5_INPUT_GEN_EN_MSK, ECLASS120_REG_ROUTING_OR_FILTER_5_REG1_BIT_ROUTING_OR5_INPUT_GEN_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR5_INPUT_GEN_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR5_OUTPUT_EN_set( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR5_OUTPUT_EN_set( eclass_buffer_t *b_ptr,
                                                           eclass_handle_t *h_ptr,
                                                           UINT32  N,
                                                           UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR5_OUTPUT_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR5_OUTPUT_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR5_OUTPUT_EN_set", N, value );

    /* ((0x000001cc + (N) * 512) bits 31) field ROUTING_OR5_OUTPUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_5_REG2 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_5_REG2_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_5_REG2_BIT_ROUTING_OR5_OUTPUT_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_5_REG2_BIT_ROUTING_OR5_OUTPUT_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR5_OUTPUT_EN_get( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR5_OUTPUT_EN_get( eclass_buffer_t *b_ptr,
                                                             eclass_handle_t *h_ptr,
                                                             UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR5_OUTPUT_EN_get", N, 11);
    /* ((0x000001cc + (N) * 512) bits 31) field ROUTING_OR5_OUTPUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_5_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_5_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_5_REG2_BIT_ROUTING_OR5_OUTPUT_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_5_REG2_BIT_ROUTING_OR5_OUTPUT_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR5_OUTPUT_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR5_OUTPUT_INV_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR5_OUTPUT_INV_set( eclass_buffer_t *b_ptr,
                                                            eclass_handle_t *h_ptr,
                                                            UINT32  N,
                                                            UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR5_OUTPUT_INV_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR5_OUTPUT_INV_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR5_OUTPUT_INV_set", N, value );

    /* ((0x000001cc + (N) * 512) bits 28) field ROUTING_OR5_OUTPUT_INV of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_5_REG2 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_5_REG2_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_5_REG2_BIT_ROUTING_OR5_OUTPUT_INV_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_5_REG2_BIT_ROUTING_OR5_OUTPUT_INV_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR5_OUTPUT_INV_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR5_OUTPUT_INV_get( eclass_buffer_t *b_ptr,
                                                              eclass_handle_t *h_ptr,
                                                              UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR5_OUTPUT_INV_get", N, 11);
    /* ((0x000001cc + (N) * 512) bits 28) field ROUTING_OR5_OUTPUT_INV of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_5_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_5_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_5_REG2_BIT_ROUTING_OR5_OUTPUT_INV_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_5_REG2_BIT_ROUTING_OR5_OUTPUT_INV_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR5_OUTPUT_INV_get", N, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR5_INPUT_MPLS_OVERFLOW_EN_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR5_INPUT_MPLS_OVERFLOW_EN_set( eclass_buffer_t *b_ptr,
                                                                        eclass_handle_t *h_ptr,
                                                                        UINT32  N,
                                                                        UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR5_INPUT_MPLS_OVERFLOW_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR5_INPUT_MPLS_OVERFLOW_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR5_INPUT_MPLS_OVERFLOW_EN_set", N, value );

    /* ((0x000001cc + (N) * 512) bits 20) field ROUTING_OR5_INPUT_MPLS_OVERFLOW_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_5_REG2 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_5_REG2_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_5_REG2_BIT_ROUTING_OR5_INPUT_MPLS_OVERFLOW_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_5_REG2_BIT_ROUTING_OR5_INPUT_MPLS_OVERFLOW_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR5_INPUT_MPLS_OVERFLOW_EN_get( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR5_INPUT_MPLS_OVERFLOW_EN_get( eclass_buffer_t *b_ptr,
                                                                          eclass_handle_t *h_ptr,
                                                                          UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR5_INPUT_MPLS_OVERFLOW_EN_get", N, 11);
    /* ((0x000001cc + (N) * 512) bits 20) field ROUTING_OR5_INPUT_MPLS_OVERFLOW_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_5_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_5_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_5_REG2_BIT_ROUTING_OR5_INPUT_MPLS_OVERFLOW_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_5_REG2_BIT_ROUTING_OR5_INPUT_MPLS_OVERFLOW_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR5_INPUT_MPLS_OVERFLOW_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR5_INPUT_NO_MATCH_ALL_EN_set( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR5_INPUT_NO_MATCH_ALL_EN_set( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR5_INPUT_NO_MATCH_ALL_EN_set", N, 11);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR5_INPUT_NO_MATCH_ALL_EN_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR5_INPUT_NO_MATCH_ALL_EN_set", N, value );

    /* ((0x000001cc + (N) * 512) bits 16) field ROUTING_OR5_INPUT_NO_MATCH_ALL_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_5_REG2 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_5_REG2_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_5_REG2_BIT_ROUTING_OR5_INPUT_NO_MATCH_ALL_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_5_REG2_BIT_ROUTING_OR5_INPUT_NO_MATCH_ALL_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR5_INPUT_NO_MATCH_ALL_EN_get( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR5_INPUT_NO_MATCH_ALL_EN_get( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR5_INPUT_NO_MATCH_ALL_EN_get", N, 11);
    /* ((0x000001cc + (N) * 512) bits 16) field ROUTING_OR5_INPUT_NO_MATCH_ALL_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_5_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_5_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_5_REG2_BIT_ROUTING_OR5_INPUT_NO_MATCH_ALL_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_5_REG2_BIT_ROUTING_OR5_INPUT_NO_MATCH_ALL_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR5_INPUT_NO_MATCH_ALL_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_ROUTING_OR5_INPUT_ANDOUT_EN_set( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_ROUTING_OR5_INPUT_ANDOUT_EN_set( eclass_buffer_t *b_ptr,
                                                                 eclass_handle_t *h_ptr,
                                                                 UINT32  N,
                                                                 UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR5_INPUT_ANDOUT_EN_set", N, 11);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_ROUTING_OR5_INPUT_ANDOUT_EN_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_ROUTING_OR5_INPUT_ANDOUT_EN_set", N, value );

    /* ((0x000001cc + (N) * 512) bits 15:0) field ROUTING_OR5_INPUT_ANDOUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_5_REG2 index N=0..11 */
    eclass_reg_ROUTING_OR_FILTER_5_REG2_array_field_set( b_ptr,
                                                         h_ptr,
                                                         N,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_5_REG2_BIT_ROUTING_OR5_INPUT_ANDOUT_EN_MSK,
                                                         ECLASS120_REG_ROUTING_OR_FILTER_5_REG2_BIT_ROUTING_OR5_INPUT_ANDOUT_EN_OFF,
                                                         value);
}

static INLINE UINT32 eclass_field_ROUTING_OR5_INPUT_ANDOUT_EN_get( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_ROUTING_OR5_INPUT_ANDOUT_EN_get( eclass_buffer_t *b_ptr,
                                                                   eclass_handle_t *h_ptr,
                                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_ROUTING_OR5_INPUT_ANDOUT_EN_get", N, 11);
    /* ((0x000001cc + (N) * 512) bits 15:0) field ROUTING_OR5_INPUT_ANDOUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_5_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_5_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_5_REG2_BIT_ROUTING_OR5_INPUT_ANDOUT_EN_MSK) >> ECLASS120_REG_ROUTING_OR_FILTER_5_REG2_BIT_ROUTING_OR5_INPUT_ANDOUT_EN_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_ROUTING_OR5_INPUT_ANDOUT_EN_get", N, value );

    return value;
}
static INLINE void eclass_field_range_ROUTING_OR5_INPUT_ANDOUT_EN_set( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_ROUTING_OR5_INPUT_ANDOUT_EN_set( eclass_buffer_t *b_ptr,
                                                                       eclass_handle_t *h_ptr,
                                                                       UINT32  N,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR5_INPUT_ANDOUT_EN_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR5_INPUT_ANDOUT_EN_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR5_INPUT_ANDOUT_EN_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR5_INPUT_ANDOUT_EN_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000001cc + (N) * 512) bits 15:0) field ROUTING_OR5_INPUT_ANDOUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_5_REG2 index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000001cc + (N) * 512) bits 15:0) field ROUTING_OR5_INPUT_ANDOUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_5_REG2 index N=0..11 */
        eclass_reg_ROUTING_OR_FILTER_5_REG2_array_field_set( b_ptr,
                                                             h_ptr,
                                                             N,
                                                             subfield_mask << (ECLASS120_REG_ROUTING_OR_FILTER_5_REG2_BIT_ROUTING_OR5_INPUT_ANDOUT_EN_OFF + subfield_offset),
                                                             ECLASS120_REG_ROUTING_OR_FILTER_5_REG2_BIT_ROUTING_OR5_INPUT_ANDOUT_EN_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_ROUTING_OR5_INPUT_ANDOUT_EN_get( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_ROUTING_OR5_INPUT_ANDOUT_EN_get( eclass_buffer_t *b_ptr,
                                                                         eclass_handle_t *h_ptr,
                                                                         UINT32  N,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_ROUTING_OR5_INPUT_ANDOUT_EN_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_ROUTING_OR5_INPUT_ANDOUT_EN_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_ROUTING_OR5_INPUT_ANDOUT_EN_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000001cc + (N) * 512) bits 15:0) field ROUTING_OR5_INPUT_ANDOUT_EN of register PMC_ECLASS120_REG_ROUTING_OR_FILTER_5_REG2 index N=0..11 */
    reg_value = eclass_reg_ROUTING_OR_FILTER_5_REG2_array_read( b_ptr,
                                                                h_ptr,
                                                                N);
    field_value = (reg_value & ECLASS120_REG_ROUTING_OR_FILTER_5_REG2_BIT_ROUTING_OR5_INPUT_ANDOUT_EN_MSK)
                  >> ECLASS120_REG_ROUTING_OR_FILTER_5_REG2_BIT_ROUTING_OR5_INPUT_ANDOUT_EN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_ROUTING_OR_FILTER_5_REG2_BIT_ROUTING_OR5_INPUT_ANDOUT_EN_MSK, ECLASS120_REG_ROUTING_OR_FILTER_5_REG2_BIT_ROUTING_OR5_INPUT_ANDOUT_EN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_ROUTING_OR5_INPUT_ANDOUT_EN_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_LINK_ECO_set( eclass_buffer_t *b_ptr,
                                              eclass_handle_t *h_ptr,
                                              UINT32  N,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_LINK_ECO_set( eclass_buffer_t *b_ptr,
                                              eclass_handle_t *h_ptr,
                                              UINT32  N,
                                              UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_LINK_ECO_set", N, 11);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_LINK_ECO_set", N, value );

    /* ((0x000001f0 + (N) * 512) bits 31:0) field LINK_ECO of register PMC_ECLASS120_REG_LINK_ECO index N=0..11 */
    eclass_reg_LINK_ECO_array_field_set( b_ptr,
                                         h_ptr,
                                         N,
                                         ECLASS120_REG_LINK_ECO_BIT_LINK_ECO_MSK,
                                         ECLASS120_REG_LINK_ECO_BIT_LINK_ECO_OFF,
                                         value);
}

static INLINE UINT32 eclass_field_LINK_ECO_get( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_LINK_ECO_get( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_LINK_ECO_get", N, 11);
    /* ((0x000001f0 + (N) * 512) bits 31:0) field LINK_ECO of register PMC_ECLASS120_REG_LINK_ECO index N=0..11 */
    reg_value = eclass_reg_LINK_ECO_array_read(  b_ptr, h_ptr, N);
    value = (reg_value & ECLASS120_REG_LINK_ECO_BIT_LINK_ECO_MSK) >> ECLASS120_REG_LINK_ECO_BIT_LINK_ECO_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_LINK_ECO_get", N, value );

    return value;
}
static INLINE void eclass_field_range_LINK_ECO_set( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_LINK_ECO_set( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit,
                                                    UINT32 value )
{
    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_LINK_ECO_set", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_LINK_ECO_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_LINK_ECO_set", stop_bit, 31 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_LINK_ECO_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x000001f0 + (N) * 512) bits 31:0) field LINK_ECO of register PMC_ECLASS120_REG_LINK_ECO index N=0..11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x000001f0 + (N) * 512) bits 31:0) field LINK_ECO of register PMC_ECLASS120_REG_LINK_ECO index N=0..11 */
        eclass_reg_LINK_ECO_array_field_set( b_ptr,
                                             h_ptr,
                                             N,
                                             subfield_mask << (ECLASS120_REG_LINK_ECO_BIT_LINK_ECO_OFF + subfield_offset),
                                             ECLASS120_REG_LINK_ECO_BIT_LINK_ECO_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_LINK_ECO_get( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_LINK_ECO_get( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 11)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_LINK_ECO_get", N, 11);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_LINK_ECO_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_LINK_ECO_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x000001f0 + (N) * 512) bits 31:0) field LINK_ECO of register PMC_ECLASS120_REG_LINK_ECO index N=0..11 */
    reg_value = eclass_reg_LINK_ECO_array_read(  b_ptr, h_ptr, N);
    field_value = (reg_value & ECLASS120_REG_LINK_ECO_BIT_LINK_ECO_MSK)
                  >> ECLASS120_REG_LINK_ECO_BIT_LINK_ECO_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_LINK_ECO_BIT_LINK_ECO_MSK, ECLASS120_REG_LINK_ECO_BIT_LINK_ECO_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_LINK_ECO_get", N, start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset ram_N_size24
 * ==================================================================================
 */
static INLINE void eclass_field_F16_0_MASK_set( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_0_MASK_set( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_0_MASK_set", N, 23);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_0_MASK_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_0_MASK_set", N, value );

    /* ((0x00002000 + (N) * 128) bits 31:16) field F16_0_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_1 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_0_REG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_1_BIT_F16_0_MASK_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_1_BIT_F16_0_MASK_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_0_MASK_get( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_0_MASK_get( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_0_MASK_get", N, 23);
    /* ((0x00002000 + (N) * 128) bits 31:16) field F16_0_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_1 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_0_REG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_1_BIT_F16_0_MASK_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_1_BIT_F16_0_MASK_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_0_MASK_get", N, value );

    return value;
}
static INLINE void eclass_field_range_F16_0_MASK_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_F16_0_MASK_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_0_MASK_set", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_0_MASK_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_0_MASK_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_0_MASK_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002000 + (N) * 128) bits 31:16) field F16_0_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_1 index N=0..23 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002000 + (N) * 128) bits 31:16) field F16_0_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_1 index N=0..23 */
        eclass_reg_GEN_FILTER_CFG_FILTER16_0_REG_1_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_1_BIT_F16_0_MASK_OFF + subfield_offset),
                                                                    ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_1_BIT_F16_0_MASK_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_F16_0_MASK_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_F16_0_MASK_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_0_MASK_get", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_0_MASK_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_0_MASK_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002000 + (N) * 128) bits 31:16) field F16_0_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_1 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_0_REG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_1_BIT_F16_0_MASK_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_1_BIT_F16_0_MASK_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_1_BIT_F16_0_MASK_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_1_BIT_F16_0_MASK_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_0_MASK_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_F16_0_VALUE_set( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_0_VALUE_set( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_0_VALUE_set", N, 23);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_0_VALUE_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_0_VALUE_set", N, value );

    /* ((0x00002000 + (N) * 128) bits 15:0) field F16_0_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_1 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_0_REG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_1_BIT_F16_0_VALUE_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_1_BIT_F16_0_VALUE_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_0_VALUE_get( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_0_VALUE_get( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_0_VALUE_get", N, 23);
    /* ((0x00002000 + (N) * 128) bits 15:0) field F16_0_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_1 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_0_REG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_1_BIT_F16_0_VALUE_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_1_BIT_F16_0_VALUE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_0_VALUE_get", N, value );

    return value;
}
static INLINE void eclass_field_range_F16_0_VALUE_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_F16_0_VALUE_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_0_VALUE_set", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_0_VALUE_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_0_VALUE_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_0_VALUE_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002000 + (N) * 128) bits 15:0) field F16_0_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_1 index N=0..23 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002000 + (N) * 128) bits 15:0) field F16_0_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_1 index N=0..23 */
        eclass_reg_GEN_FILTER_CFG_FILTER16_0_REG_1_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_1_BIT_F16_0_VALUE_OFF + subfield_offset),
                                                                    ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_1_BIT_F16_0_VALUE_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_F16_0_VALUE_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_F16_0_VALUE_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_0_VALUE_get", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_0_VALUE_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_0_VALUE_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002000 + (N) * 128) bits 15:0) field F16_0_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_1 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_0_REG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_1_BIT_F16_0_VALUE_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_1_BIT_F16_0_VALUE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_1_BIT_F16_0_VALUE_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_1_BIT_F16_0_VALUE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_0_VALUE_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_F16_0_INV_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_0_INV_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_0_INV_set", N, 23);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_0_INV_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_0_INV_set", N, value );

    /* ((0x00002004 + (N) * 128) bits 12) field F16_0_INV of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_2 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_0_REG_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_2_BIT_F16_0_INV_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_2_BIT_F16_0_INV_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_0_INV_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_0_INV_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_0_INV_get", N, 23);
    /* ((0x00002004 + (N) * 128) bits 12) field F16_0_INV of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_2 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_0_REG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_2_BIT_F16_0_INV_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_2_BIT_F16_0_INV_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_0_INV_get", N, value );

    return value;
}
static INLINE void eclass_field_F16_0_ENABLE_set( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_0_ENABLE_set( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_0_ENABLE_set", N, 23);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_0_ENABLE_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_0_ENABLE_set", N, value );

    /* ((0x00002004 + (N) * 128) bits 8) field F16_0_ENABLE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_2 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_0_REG_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_2_BIT_F16_0_ENABLE_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_2_BIT_F16_0_ENABLE_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_0_ENABLE_get( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_0_ENABLE_get( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_0_ENABLE_get", N, 23);
    /* ((0x00002004 + (N) * 128) bits 8) field F16_0_ENABLE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_2 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_0_REG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_2_BIT_F16_0_ENABLE_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_2_BIT_F16_0_ENABLE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_0_ENABLE_get", N, value );

    return value;
}
static INLINE void eclass_field_F16_0_ADDR_set( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_0_ADDR_set( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_0_ADDR_set", N, 23);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_0_ADDR_set", value, 31);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_0_ADDR_set", N, value );

    /* ((0x00002004 + (N) * 128) bits 4:0) field F16_0_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_2 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_0_REG_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_2_BIT_F16_0_ADDR_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_2_BIT_F16_0_ADDR_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_0_ADDR_get( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_0_ADDR_get( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_0_ADDR_get", N, 23);
    /* ((0x00002004 + (N) * 128) bits 4:0) field F16_0_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_2 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_0_REG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_2_BIT_F16_0_ADDR_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_2_BIT_F16_0_ADDR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_0_ADDR_get", N, value );

    return value;
}
static INLINE void eclass_field_range_F16_0_ADDR_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_F16_0_ADDR_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_0_ADDR_set", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_0_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_0_ADDR_set", stop_bit, 4 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_0_ADDR_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002004 + (N) * 128) bits 4:0) field F16_0_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_2 index N=0..23 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002004 + (N) * 128) bits 4:0) field F16_0_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_2 index N=0..23 */
        eclass_reg_GEN_FILTER_CFG_FILTER16_0_REG_2_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_2_BIT_F16_0_ADDR_OFF + subfield_offset),
                                                                    ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_2_BIT_F16_0_ADDR_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_F16_0_ADDR_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_F16_0_ADDR_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_0_ADDR_get", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_0_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_0_ADDR_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002004 + (N) * 128) bits 4:0) field F16_0_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_2 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_0_REG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_2_BIT_F16_0_ADDR_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_2_BIT_F16_0_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_2_BIT_F16_0_ADDR_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_0_REG_2_BIT_F16_0_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_0_ADDR_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_F16_1_MASK_set( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_1_MASK_set( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_1_MASK_set", N, 23);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_1_MASK_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_1_MASK_set", N, value );

    /* ((0x00002008 + (N) * 128) bits 31:16) field F16_1_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_1 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_1_REG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_1_BIT_F16_1_MASK_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_1_BIT_F16_1_MASK_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_1_MASK_get( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_1_MASK_get( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_1_MASK_get", N, 23);
    /* ((0x00002008 + (N) * 128) bits 31:16) field F16_1_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_1 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_1_REG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_1_BIT_F16_1_MASK_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_1_BIT_F16_1_MASK_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_1_MASK_get", N, value );

    return value;
}
static INLINE void eclass_field_range_F16_1_MASK_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_F16_1_MASK_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_1_MASK_set", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_1_MASK_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_1_MASK_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_1_MASK_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002008 + (N) * 128) bits 31:16) field F16_1_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_1 index N=0..23 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002008 + (N) * 128) bits 31:16) field F16_1_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_1 index N=0..23 */
        eclass_reg_GEN_FILTER_CFG_FILTER16_1_REG_1_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_1_BIT_F16_1_MASK_OFF + subfield_offset),
                                                                    ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_1_BIT_F16_1_MASK_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_F16_1_MASK_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_F16_1_MASK_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_1_MASK_get", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_1_MASK_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_1_MASK_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002008 + (N) * 128) bits 31:16) field F16_1_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_1 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_1_REG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_1_BIT_F16_1_MASK_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_1_BIT_F16_1_MASK_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_1_BIT_F16_1_MASK_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_1_BIT_F16_1_MASK_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_1_MASK_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_F16_1_VALUE_set( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_1_VALUE_set( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_1_VALUE_set", N, 23);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_1_VALUE_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_1_VALUE_set", N, value );

    /* ((0x00002008 + (N) * 128) bits 15:0) field F16_1_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_1 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_1_REG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_1_BIT_F16_1_VALUE_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_1_BIT_F16_1_VALUE_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_1_VALUE_get( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_1_VALUE_get( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_1_VALUE_get", N, 23);
    /* ((0x00002008 + (N) * 128) bits 15:0) field F16_1_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_1 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_1_REG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_1_BIT_F16_1_VALUE_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_1_BIT_F16_1_VALUE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_1_VALUE_get", N, value );

    return value;
}
static INLINE void eclass_field_range_F16_1_VALUE_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_F16_1_VALUE_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_1_VALUE_set", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_1_VALUE_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_1_VALUE_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_1_VALUE_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002008 + (N) * 128) bits 15:0) field F16_1_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_1 index N=0..23 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002008 + (N) * 128) bits 15:0) field F16_1_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_1 index N=0..23 */
        eclass_reg_GEN_FILTER_CFG_FILTER16_1_REG_1_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_1_BIT_F16_1_VALUE_OFF + subfield_offset),
                                                                    ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_1_BIT_F16_1_VALUE_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_F16_1_VALUE_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_F16_1_VALUE_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_1_VALUE_get", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_1_VALUE_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_1_VALUE_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002008 + (N) * 128) bits 15:0) field F16_1_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_1 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_1_REG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_1_BIT_F16_1_VALUE_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_1_BIT_F16_1_VALUE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_1_BIT_F16_1_VALUE_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_1_BIT_F16_1_VALUE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_1_VALUE_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_F16_1_INV_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_1_INV_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_1_INV_set", N, 23);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_1_INV_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_1_INV_set", N, value );

    /* ((0x0000200c + (N) * 128) bits 12) field F16_1_INV of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_2 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_1_REG_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_2_BIT_F16_1_INV_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_2_BIT_F16_1_INV_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_1_INV_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_1_INV_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_1_INV_get", N, 23);
    /* ((0x0000200c + (N) * 128) bits 12) field F16_1_INV of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_2 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_1_REG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_2_BIT_F16_1_INV_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_2_BIT_F16_1_INV_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_1_INV_get", N, value );

    return value;
}
static INLINE void eclass_field_F16_1_ENABLE_set( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_1_ENABLE_set( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_1_ENABLE_set", N, 23);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_1_ENABLE_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_1_ENABLE_set", N, value );

    /* ((0x0000200c + (N) * 128) bits 8) field F16_1_ENABLE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_2 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_1_REG_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_2_BIT_F16_1_ENABLE_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_2_BIT_F16_1_ENABLE_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_1_ENABLE_get( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_1_ENABLE_get( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_1_ENABLE_get", N, 23);
    /* ((0x0000200c + (N) * 128) bits 8) field F16_1_ENABLE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_2 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_1_REG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_2_BIT_F16_1_ENABLE_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_2_BIT_F16_1_ENABLE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_1_ENABLE_get", N, value );

    return value;
}
static INLINE void eclass_field_F16_1_ADDR_set( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_1_ADDR_set( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_1_ADDR_set", N, 23);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_1_ADDR_set", value, 31);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_1_ADDR_set", N, value );

    /* ((0x0000200c + (N) * 128) bits 4:0) field F16_1_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_2 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_1_REG_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_2_BIT_F16_1_ADDR_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_2_BIT_F16_1_ADDR_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_1_ADDR_get( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_1_ADDR_get( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_1_ADDR_get", N, 23);
    /* ((0x0000200c + (N) * 128) bits 4:0) field F16_1_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_2 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_1_REG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_2_BIT_F16_1_ADDR_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_2_BIT_F16_1_ADDR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_1_ADDR_get", N, value );

    return value;
}
static INLINE void eclass_field_range_F16_1_ADDR_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_F16_1_ADDR_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_1_ADDR_set", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_1_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_1_ADDR_set", stop_bit, 4 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_1_ADDR_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000200c + (N) * 128) bits 4:0) field F16_1_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_2 index N=0..23 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000200c + (N) * 128) bits 4:0) field F16_1_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_2 index N=0..23 */
        eclass_reg_GEN_FILTER_CFG_FILTER16_1_REG_2_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_2_BIT_F16_1_ADDR_OFF + subfield_offset),
                                                                    ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_2_BIT_F16_1_ADDR_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_F16_1_ADDR_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_F16_1_ADDR_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_1_ADDR_get", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_1_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_1_ADDR_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000200c + (N) * 128) bits 4:0) field F16_1_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_2 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_1_REG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_2_BIT_F16_1_ADDR_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_2_BIT_F16_1_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_2_BIT_F16_1_ADDR_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_1_REG_2_BIT_F16_1_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_1_ADDR_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_F16_2_MASK_set( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_2_MASK_set( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_2_MASK_set", N, 23);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_2_MASK_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_2_MASK_set", N, value );

    /* ((0x00002010 + (N) * 128) bits 31:16) field F16_2_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_1 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_2_REG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_1_BIT_F16_2_MASK_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_1_BIT_F16_2_MASK_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_2_MASK_get( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_2_MASK_get( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_2_MASK_get", N, 23);
    /* ((0x00002010 + (N) * 128) bits 31:16) field F16_2_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_1 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_2_REG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_1_BIT_F16_2_MASK_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_1_BIT_F16_2_MASK_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_2_MASK_get", N, value );

    return value;
}
static INLINE void eclass_field_range_F16_2_MASK_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_F16_2_MASK_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_2_MASK_set", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_2_MASK_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_2_MASK_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_2_MASK_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002010 + (N) * 128) bits 31:16) field F16_2_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_1 index N=0..23 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002010 + (N) * 128) bits 31:16) field F16_2_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_1 index N=0..23 */
        eclass_reg_GEN_FILTER_CFG_FILTER16_2_REG_1_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_1_BIT_F16_2_MASK_OFF + subfield_offset),
                                                                    ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_1_BIT_F16_2_MASK_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_F16_2_MASK_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_F16_2_MASK_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_2_MASK_get", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_2_MASK_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_2_MASK_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002010 + (N) * 128) bits 31:16) field F16_2_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_1 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_2_REG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_1_BIT_F16_2_MASK_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_1_BIT_F16_2_MASK_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_1_BIT_F16_2_MASK_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_1_BIT_F16_2_MASK_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_2_MASK_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_F16_2_VALUE_set( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_2_VALUE_set( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_2_VALUE_set", N, 23);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_2_VALUE_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_2_VALUE_set", N, value );

    /* ((0x00002010 + (N) * 128) bits 15:0) field F16_2_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_1 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_2_REG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_1_BIT_F16_2_VALUE_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_1_BIT_F16_2_VALUE_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_2_VALUE_get( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_2_VALUE_get( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_2_VALUE_get", N, 23);
    /* ((0x00002010 + (N) * 128) bits 15:0) field F16_2_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_1 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_2_REG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_1_BIT_F16_2_VALUE_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_1_BIT_F16_2_VALUE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_2_VALUE_get", N, value );

    return value;
}
static INLINE void eclass_field_range_F16_2_VALUE_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_F16_2_VALUE_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_2_VALUE_set", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_2_VALUE_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_2_VALUE_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_2_VALUE_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002010 + (N) * 128) bits 15:0) field F16_2_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_1 index N=0..23 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002010 + (N) * 128) bits 15:0) field F16_2_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_1 index N=0..23 */
        eclass_reg_GEN_FILTER_CFG_FILTER16_2_REG_1_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_1_BIT_F16_2_VALUE_OFF + subfield_offset),
                                                                    ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_1_BIT_F16_2_VALUE_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_F16_2_VALUE_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_F16_2_VALUE_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_2_VALUE_get", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_2_VALUE_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_2_VALUE_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002010 + (N) * 128) bits 15:0) field F16_2_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_1 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_2_REG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_1_BIT_F16_2_VALUE_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_1_BIT_F16_2_VALUE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_1_BIT_F16_2_VALUE_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_1_BIT_F16_2_VALUE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_2_VALUE_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_F16_2_INV_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_2_INV_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_2_INV_set", N, 23);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_2_INV_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_2_INV_set", N, value );

    /* ((0x00002014 + (N) * 128) bits 12) field F16_2_INV of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_2 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_2_REG_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_2_BIT_F16_2_INV_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_2_BIT_F16_2_INV_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_2_INV_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_2_INV_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_2_INV_get", N, 23);
    /* ((0x00002014 + (N) * 128) bits 12) field F16_2_INV of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_2 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_2_REG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_2_BIT_F16_2_INV_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_2_BIT_F16_2_INV_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_2_INV_get", N, value );

    return value;
}
static INLINE void eclass_field_F16_2_ENABLE_set( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_2_ENABLE_set( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_2_ENABLE_set", N, 23);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_2_ENABLE_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_2_ENABLE_set", N, value );

    /* ((0x00002014 + (N) * 128) bits 8) field F16_2_ENABLE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_2 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_2_REG_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_2_BIT_F16_2_ENABLE_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_2_BIT_F16_2_ENABLE_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_2_ENABLE_get( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_2_ENABLE_get( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_2_ENABLE_get", N, 23);
    /* ((0x00002014 + (N) * 128) bits 8) field F16_2_ENABLE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_2 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_2_REG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_2_BIT_F16_2_ENABLE_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_2_BIT_F16_2_ENABLE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_2_ENABLE_get", N, value );

    return value;
}
static INLINE void eclass_field_F16_2_ADDR_set( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_2_ADDR_set( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_2_ADDR_set", N, 23);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_2_ADDR_set", value, 31);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_2_ADDR_set", N, value );

    /* ((0x00002014 + (N) * 128) bits 4:0) field F16_2_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_2 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_2_REG_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_2_BIT_F16_2_ADDR_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_2_BIT_F16_2_ADDR_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_2_ADDR_get( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_2_ADDR_get( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_2_ADDR_get", N, 23);
    /* ((0x00002014 + (N) * 128) bits 4:0) field F16_2_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_2 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_2_REG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_2_BIT_F16_2_ADDR_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_2_BIT_F16_2_ADDR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_2_ADDR_get", N, value );

    return value;
}
static INLINE void eclass_field_range_F16_2_ADDR_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_F16_2_ADDR_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_2_ADDR_set", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_2_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_2_ADDR_set", stop_bit, 4 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_2_ADDR_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002014 + (N) * 128) bits 4:0) field F16_2_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_2 index N=0..23 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002014 + (N) * 128) bits 4:0) field F16_2_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_2 index N=0..23 */
        eclass_reg_GEN_FILTER_CFG_FILTER16_2_REG_2_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_2_BIT_F16_2_ADDR_OFF + subfield_offset),
                                                                    ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_2_BIT_F16_2_ADDR_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_F16_2_ADDR_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_F16_2_ADDR_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_2_ADDR_get", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_2_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_2_ADDR_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002014 + (N) * 128) bits 4:0) field F16_2_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_2 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_2_REG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_2_BIT_F16_2_ADDR_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_2_BIT_F16_2_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_2_BIT_F16_2_ADDR_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_2_REG_2_BIT_F16_2_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_2_ADDR_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_F16_3_MASK_set( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_3_MASK_set( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_3_MASK_set", N, 23);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_3_MASK_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_3_MASK_set", N, value );

    /* ((0x00002018 + (N) * 128) bits 31:16) field F16_3_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_1 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_3_REG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_1_BIT_F16_3_MASK_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_1_BIT_F16_3_MASK_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_3_MASK_get( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_3_MASK_get( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_3_MASK_get", N, 23);
    /* ((0x00002018 + (N) * 128) bits 31:16) field F16_3_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_1 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_3_REG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_1_BIT_F16_3_MASK_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_1_BIT_F16_3_MASK_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_3_MASK_get", N, value );

    return value;
}
static INLINE void eclass_field_range_F16_3_MASK_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_F16_3_MASK_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_3_MASK_set", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_3_MASK_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_3_MASK_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_3_MASK_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002018 + (N) * 128) bits 31:16) field F16_3_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_1 index N=0..23 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002018 + (N) * 128) bits 31:16) field F16_3_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_1 index N=0..23 */
        eclass_reg_GEN_FILTER_CFG_FILTER16_3_REG_1_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_1_BIT_F16_3_MASK_OFF + subfield_offset),
                                                                    ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_1_BIT_F16_3_MASK_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_F16_3_MASK_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_F16_3_MASK_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_3_MASK_get", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_3_MASK_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_3_MASK_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002018 + (N) * 128) bits 31:16) field F16_3_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_1 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_3_REG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_1_BIT_F16_3_MASK_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_1_BIT_F16_3_MASK_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_1_BIT_F16_3_MASK_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_1_BIT_F16_3_MASK_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_3_MASK_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_F16_3_VALUE_set( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_3_VALUE_set( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_3_VALUE_set", N, 23);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_3_VALUE_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_3_VALUE_set", N, value );

    /* ((0x00002018 + (N) * 128) bits 15:0) field F16_3_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_1 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_3_REG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_1_BIT_F16_3_VALUE_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_1_BIT_F16_3_VALUE_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_3_VALUE_get( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_3_VALUE_get( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_3_VALUE_get", N, 23);
    /* ((0x00002018 + (N) * 128) bits 15:0) field F16_3_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_1 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_3_REG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_1_BIT_F16_3_VALUE_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_1_BIT_F16_3_VALUE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_3_VALUE_get", N, value );

    return value;
}
static INLINE void eclass_field_range_F16_3_VALUE_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_F16_3_VALUE_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_3_VALUE_set", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_3_VALUE_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_3_VALUE_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_3_VALUE_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002018 + (N) * 128) bits 15:0) field F16_3_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_1 index N=0..23 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002018 + (N) * 128) bits 15:0) field F16_3_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_1 index N=0..23 */
        eclass_reg_GEN_FILTER_CFG_FILTER16_3_REG_1_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_1_BIT_F16_3_VALUE_OFF + subfield_offset),
                                                                    ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_1_BIT_F16_3_VALUE_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_F16_3_VALUE_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_F16_3_VALUE_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_3_VALUE_get", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_3_VALUE_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_3_VALUE_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002018 + (N) * 128) bits 15:0) field F16_3_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_1 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_3_REG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_1_BIT_F16_3_VALUE_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_1_BIT_F16_3_VALUE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_1_BIT_F16_3_VALUE_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_1_BIT_F16_3_VALUE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_3_VALUE_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_F16_3_INV_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_3_INV_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_3_INV_set", N, 23);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_3_INV_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_3_INV_set", N, value );

    /* ((0x0000201c + (N) * 128) bits 12) field F16_3_INV of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_2 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_3_REG_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_2_BIT_F16_3_INV_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_2_BIT_F16_3_INV_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_3_INV_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_3_INV_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_3_INV_get", N, 23);
    /* ((0x0000201c + (N) * 128) bits 12) field F16_3_INV of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_2 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_3_REG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_2_BIT_F16_3_INV_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_2_BIT_F16_3_INV_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_3_INV_get", N, value );

    return value;
}
static INLINE void eclass_field_F16_3_ENABLE_set( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_3_ENABLE_set( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_3_ENABLE_set", N, 23);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_3_ENABLE_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_3_ENABLE_set", N, value );

    /* ((0x0000201c + (N) * 128) bits 8) field F16_3_ENABLE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_2 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_3_REG_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_2_BIT_F16_3_ENABLE_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_2_BIT_F16_3_ENABLE_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_3_ENABLE_get( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_3_ENABLE_get( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_3_ENABLE_get", N, 23);
    /* ((0x0000201c + (N) * 128) bits 8) field F16_3_ENABLE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_2 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_3_REG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_2_BIT_F16_3_ENABLE_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_2_BIT_F16_3_ENABLE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_3_ENABLE_get", N, value );

    return value;
}
static INLINE void eclass_field_F16_3_ADDR_set( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_3_ADDR_set( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_3_ADDR_set", N, 23);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_3_ADDR_set", value, 31);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_3_ADDR_set", N, value );

    /* ((0x0000201c + (N) * 128) bits 4:0) field F16_3_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_2 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_3_REG_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_2_BIT_F16_3_ADDR_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_2_BIT_F16_3_ADDR_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_3_ADDR_get( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_3_ADDR_get( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_3_ADDR_get", N, 23);
    /* ((0x0000201c + (N) * 128) bits 4:0) field F16_3_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_2 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_3_REG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_2_BIT_F16_3_ADDR_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_2_BIT_F16_3_ADDR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_3_ADDR_get", N, value );

    return value;
}
static INLINE void eclass_field_range_F16_3_ADDR_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_F16_3_ADDR_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_3_ADDR_set", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_3_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_3_ADDR_set", stop_bit, 4 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_3_ADDR_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000201c + (N) * 128) bits 4:0) field F16_3_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_2 index N=0..23 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000201c + (N) * 128) bits 4:0) field F16_3_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_2 index N=0..23 */
        eclass_reg_GEN_FILTER_CFG_FILTER16_3_REG_2_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_2_BIT_F16_3_ADDR_OFF + subfield_offset),
                                                                    ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_2_BIT_F16_3_ADDR_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_F16_3_ADDR_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_F16_3_ADDR_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_3_ADDR_get", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_3_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_3_ADDR_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000201c + (N) * 128) bits 4:0) field F16_3_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_2 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_3_REG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_2_BIT_F16_3_ADDR_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_2_BIT_F16_3_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_2_BIT_F16_3_ADDR_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_3_REG_2_BIT_F16_3_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_3_ADDR_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_F16_4_MASK_set( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_4_MASK_set( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_4_MASK_set", N, 23);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_4_MASK_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_4_MASK_set", N, value );

    /* ((0x00002020 + (N) * 128) bits 31:16) field F16_4_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_1 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_4_REG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_1_BIT_F16_4_MASK_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_1_BIT_F16_4_MASK_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_4_MASK_get( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_4_MASK_get( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_4_MASK_get", N, 23);
    /* ((0x00002020 + (N) * 128) bits 31:16) field F16_4_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_1 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_4_REG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_1_BIT_F16_4_MASK_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_1_BIT_F16_4_MASK_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_4_MASK_get", N, value );

    return value;
}
static INLINE void eclass_field_range_F16_4_MASK_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_F16_4_MASK_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_4_MASK_set", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_4_MASK_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_4_MASK_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_4_MASK_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002020 + (N) * 128) bits 31:16) field F16_4_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_1 index N=0..23 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002020 + (N) * 128) bits 31:16) field F16_4_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_1 index N=0..23 */
        eclass_reg_GEN_FILTER_CFG_FILTER16_4_REG_1_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_1_BIT_F16_4_MASK_OFF + subfield_offset),
                                                                    ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_1_BIT_F16_4_MASK_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_F16_4_MASK_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_F16_4_MASK_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_4_MASK_get", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_4_MASK_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_4_MASK_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002020 + (N) * 128) bits 31:16) field F16_4_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_1 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_4_REG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_1_BIT_F16_4_MASK_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_1_BIT_F16_4_MASK_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_1_BIT_F16_4_MASK_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_1_BIT_F16_4_MASK_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_4_MASK_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_F16_4_VALUE_set( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_4_VALUE_set( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_4_VALUE_set", N, 23);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_4_VALUE_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_4_VALUE_set", N, value );

    /* ((0x00002020 + (N) * 128) bits 15:0) field F16_4_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_1 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_4_REG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_1_BIT_F16_4_VALUE_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_1_BIT_F16_4_VALUE_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_4_VALUE_get( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_4_VALUE_get( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_4_VALUE_get", N, 23);
    /* ((0x00002020 + (N) * 128) bits 15:0) field F16_4_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_1 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_4_REG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_1_BIT_F16_4_VALUE_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_1_BIT_F16_4_VALUE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_4_VALUE_get", N, value );

    return value;
}
static INLINE void eclass_field_range_F16_4_VALUE_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_F16_4_VALUE_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_4_VALUE_set", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_4_VALUE_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_4_VALUE_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_4_VALUE_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002020 + (N) * 128) bits 15:0) field F16_4_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_1 index N=0..23 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002020 + (N) * 128) bits 15:0) field F16_4_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_1 index N=0..23 */
        eclass_reg_GEN_FILTER_CFG_FILTER16_4_REG_1_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_1_BIT_F16_4_VALUE_OFF + subfield_offset),
                                                                    ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_1_BIT_F16_4_VALUE_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_F16_4_VALUE_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_F16_4_VALUE_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_4_VALUE_get", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_4_VALUE_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_4_VALUE_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002020 + (N) * 128) bits 15:0) field F16_4_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_1 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_4_REG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_1_BIT_F16_4_VALUE_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_1_BIT_F16_4_VALUE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_1_BIT_F16_4_VALUE_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_1_BIT_F16_4_VALUE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_4_VALUE_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_F16_4_INV_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_4_INV_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_4_INV_set", N, 23);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_4_INV_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_4_INV_set", N, value );

    /* ((0x00002024 + (N) * 128) bits 12) field F16_4_INV of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_2 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_4_REG_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_2_BIT_F16_4_INV_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_2_BIT_F16_4_INV_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_4_INV_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_4_INV_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_4_INV_get", N, 23);
    /* ((0x00002024 + (N) * 128) bits 12) field F16_4_INV of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_2 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_4_REG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_2_BIT_F16_4_INV_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_2_BIT_F16_4_INV_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_4_INV_get", N, value );

    return value;
}
static INLINE void eclass_field_F16_4_ENABLE_set( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_4_ENABLE_set( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_4_ENABLE_set", N, 23);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_4_ENABLE_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_4_ENABLE_set", N, value );

    /* ((0x00002024 + (N) * 128) bits 8) field F16_4_ENABLE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_2 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_4_REG_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_2_BIT_F16_4_ENABLE_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_2_BIT_F16_4_ENABLE_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_4_ENABLE_get( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_4_ENABLE_get( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_4_ENABLE_get", N, 23);
    /* ((0x00002024 + (N) * 128) bits 8) field F16_4_ENABLE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_2 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_4_REG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_2_BIT_F16_4_ENABLE_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_2_BIT_F16_4_ENABLE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_4_ENABLE_get", N, value );

    return value;
}
static INLINE void eclass_field_F16_4_ADDR_set( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_4_ADDR_set( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_4_ADDR_set", N, 23);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_4_ADDR_set", value, 31);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_4_ADDR_set", N, value );

    /* ((0x00002024 + (N) * 128) bits 4:0) field F16_4_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_2 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_4_REG_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_2_BIT_F16_4_ADDR_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_2_BIT_F16_4_ADDR_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_4_ADDR_get( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_4_ADDR_get( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_4_ADDR_get", N, 23);
    /* ((0x00002024 + (N) * 128) bits 4:0) field F16_4_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_2 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_4_REG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_2_BIT_F16_4_ADDR_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_2_BIT_F16_4_ADDR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_4_ADDR_get", N, value );

    return value;
}
static INLINE void eclass_field_range_F16_4_ADDR_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_F16_4_ADDR_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_4_ADDR_set", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_4_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_4_ADDR_set", stop_bit, 4 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_4_ADDR_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002024 + (N) * 128) bits 4:0) field F16_4_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_2 index N=0..23 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002024 + (N) * 128) bits 4:0) field F16_4_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_2 index N=0..23 */
        eclass_reg_GEN_FILTER_CFG_FILTER16_4_REG_2_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_2_BIT_F16_4_ADDR_OFF + subfield_offset),
                                                                    ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_2_BIT_F16_4_ADDR_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_F16_4_ADDR_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_F16_4_ADDR_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_4_ADDR_get", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_4_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_4_ADDR_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002024 + (N) * 128) bits 4:0) field F16_4_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_2 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_4_REG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_2_BIT_F16_4_ADDR_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_2_BIT_F16_4_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_2_BIT_F16_4_ADDR_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_4_REG_2_BIT_F16_4_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_4_ADDR_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_F16_5_MASK_set( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_5_MASK_set( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_5_MASK_set", N, 23);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_5_MASK_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_5_MASK_set", N, value );

    /* ((0x00002028 + (N) * 128) bits 31:16) field F16_5_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_1 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_5_REG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_1_BIT_F16_5_MASK_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_1_BIT_F16_5_MASK_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_5_MASK_get( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_5_MASK_get( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_5_MASK_get", N, 23);
    /* ((0x00002028 + (N) * 128) bits 31:16) field F16_5_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_1 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_5_REG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_1_BIT_F16_5_MASK_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_1_BIT_F16_5_MASK_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_5_MASK_get", N, value );

    return value;
}
static INLINE void eclass_field_range_F16_5_MASK_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_F16_5_MASK_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_5_MASK_set", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_5_MASK_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_5_MASK_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_5_MASK_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002028 + (N) * 128) bits 31:16) field F16_5_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_1 index N=0..23 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002028 + (N) * 128) bits 31:16) field F16_5_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_1 index N=0..23 */
        eclass_reg_GEN_FILTER_CFG_FILTER16_5_REG_1_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_1_BIT_F16_5_MASK_OFF + subfield_offset),
                                                                    ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_1_BIT_F16_5_MASK_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_F16_5_MASK_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_F16_5_MASK_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_5_MASK_get", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_5_MASK_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_5_MASK_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002028 + (N) * 128) bits 31:16) field F16_5_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_1 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_5_REG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_1_BIT_F16_5_MASK_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_1_BIT_F16_5_MASK_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_1_BIT_F16_5_MASK_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_1_BIT_F16_5_MASK_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_5_MASK_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_F16_5_VALUE_set( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_5_VALUE_set( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_5_VALUE_set", N, 23);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_5_VALUE_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_5_VALUE_set", N, value );

    /* ((0x00002028 + (N) * 128) bits 15:0) field F16_5_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_1 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_5_REG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_1_BIT_F16_5_VALUE_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_1_BIT_F16_5_VALUE_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_5_VALUE_get( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_5_VALUE_get( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_5_VALUE_get", N, 23);
    /* ((0x00002028 + (N) * 128) bits 15:0) field F16_5_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_1 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_5_REG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_1_BIT_F16_5_VALUE_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_1_BIT_F16_5_VALUE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_5_VALUE_get", N, value );

    return value;
}
static INLINE void eclass_field_range_F16_5_VALUE_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_F16_5_VALUE_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_5_VALUE_set", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_5_VALUE_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_5_VALUE_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_5_VALUE_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002028 + (N) * 128) bits 15:0) field F16_5_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_1 index N=0..23 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002028 + (N) * 128) bits 15:0) field F16_5_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_1 index N=0..23 */
        eclass_reg_GEN_FILTER_CFG_FILTER16_5_REG_1_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_1_BIT_F16_5_VALUE_OFF + subfield_offset),
                                                                    ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_1_BIT_F16_5_VALUE_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_F16_5_VALUE_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_F16_5_VALUE_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_5_VALUE_get", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_5_VALUE_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_5_VALUE_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002028 + (N) * 128) bits 15:0) field F16_5_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_1 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_5_REG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_1_BIT_F16_5_VALUE_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_1_BIT_F16_5_VALUE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_1_BIT_F16_5_VALUE_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_1_BIT_F16_5_VALUE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_5_VALUE_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_F16_5_INV_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_5_INV_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_5_INV_set", N, 23);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_5_INV_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_5_INV_set", N, value );

    /* ((0x0000202c + (N) * 128) bits 12) field F16_5_INV of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_2 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_5_REG_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_2_BIT_F16_5_INV_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_2_BIT_F16_5_INV_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_5_INV_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_5_INV_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_5_INV_get", N, 23);
    /* ((0x0000202c + (N) * 128) bits 12) field F16_5_INV of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_2 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_5_REG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_2_BIT_F16_5_INV_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_2_BIT_F16_5_INV_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_5_INV_get", N, value );

    return value;
}
static INLINE void eclass_field_F16_5_ENABLE_set( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_5_ENABLE_set( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_5_ENABLE_set", N, 23);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_5_ENABLE_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_5_ENABLE_set", N, value );

    /* ((0x0000202c + (N) * 128) bits 8) field F16_5_ENABLE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_2 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_5_REG_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_2_BIT_F16_5_ENABLE_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_2_BIT_F16_5_ENABLE_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_5_ENABLE_get( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_5_ENABLE_get( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_5_ENABLE_get", N, 23);
    /* ((0x0000202c + (N) * 128) bits 8) field F16_5_ENABLE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_2 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_5_REG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_2_BIT_F16_5_ENABLE_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_2_BIT_F16_5_ENABLE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_5_ENABLE_get", N, value );

    return value;
}
static INLINE void eclass_field_F16_5_ADDR_set( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_5_ADDR_set( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_5_ADDR_set", N, 23);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_5_ADDR_set", value, 31);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_5_ADDR_set", N, value );

    /* ((0x0000202c + (N) * 128) bits 4:0) field F16_5_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_2 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_5_REG_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_2_BIT_F16_5_ADDR_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_2_BIT_F16_5_ADDR_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_5_ADDR_get( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_5_ADDR_get( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_5_ADDR_get", N, 23);
    /* ((0x0000202c + (N) * 128) bits 4:0) field F16_5_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_2 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_5_REG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_2_BIT_F16_5_ADDR_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_2_BIT_F16_5_ADDR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_5_ADDR_get", N, value );

    return value;
}
static INLINE void eclass_field_range_F16_5_ADDR_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_F16_5_ADDR_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_5_ADDR_set", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_5_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_5_ADDR_set", stop_bit, 4 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_5_ADDR_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000202c + (N) * 128) bits 4:0) field F16_5_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_2 index N=0..23 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000202c + (N) * 128) bits 4:0) field F16_5_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_2 index N=0..23 */
        eclass_reg_GEN_FILTER_CFG_FILTER16_5_REG_2_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_2_BIT_F16_5_ADDR_OFF + subfield_offset),
                                                                    ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_2_BIT_F16_5_ADDR_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_F16_5_ADDR_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_F16_5_ADDR_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_5_ADDR_get", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_5_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_5_ADDR_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000202c + (N) * 128) bits 4:0) field F16_5_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_2 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_5_REG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_2_BIT_F16_5_ADDR_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_2_BIT_F16_5_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_2_BIT_F16_5_ADDR_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_5_REG_2_BIT_F16_5_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_5_ADDR_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_F16_6_MASK_set( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_6_MASK_set( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_6_MASK_set", N, 23);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_6_MASK_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_6_MASK_set", N, value );

    /* ((0x00002030 + (N) * 128) bits 31:16) field F16_6_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_1 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_6_REG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_1_BIT_F16_6_MASK_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_1_BIT_F16_6_MASK_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_6_MASK_get( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_6_MASK_get( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_6_MASK_get", N, 23);
    /* ((0x00002030 + (N) * 128) bits 31:16) field F16_6_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_1 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_6_REG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_1_BIT_F16_6_MASK_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_1_BIT_F16_6_MASK_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_6_MASK_get", N, value );

    return value;
}
static INLINE void eclass_field_range_F16_6_MASK_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_F16_6_MASK_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_6_MASK_set", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_6_MASK_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_6_MASK_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_6_MASK_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002030 + (N) * 128) bits 31:16) field F16_6_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_1 index N=0..23 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002030 + (N) * 128) bits 31:16) field F16_6_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_1 index N=0..23 */
        eclass_reg_GEN_FILTER_CFG_FILTER16_6_REG_1_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_1_BIT_F16_6_MASK_OFF + subfield_offset),
                                                                    ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_1_BIT_F16_6_MASK_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_F16_6_MASK_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_F16_6_MASK_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_6_MASK_get", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_6_MASK_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_6_MASK_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002030 + (N) * 128) bits 31:16) field F16_6_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_1 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_6_REG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_1_BIT_F16_6_MASK_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_1_BIT_F16_6_MASK_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_1_BIT_F16_6_MASK_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_1_BIT_F16_6_MASK_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_6_MASK_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_F16_6_VALUE_set( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_6_VALUE_set( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_6_VALUE_set", N, 23);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_6_VALUE_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_6_VALUE_set", N, value );

    /* ((0x00002030 + (N) * 128) bits 15:0) field F16_6_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_1 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_6_REG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_1_BIT_F16_6_VALUE_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_1_BIT_F16_6_VALUE_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_6_VALUE_get( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_6_VALUE_get( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_6_VALUE_get", N, 23);
    /* ((0x00002030 + (N) * 128) bits 15:0) field F16_6_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_1 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_6_REG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_1_BIT_F16_6_VALUE_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_1_BIT_F16_6_VALUE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_6_VALUE_get", N, value );

    return value;
}
static INLINE void eclass_field_range_F16_6_VALUE_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_F16_6_VALUE_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_6_VALUE_set", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_6_VALUE_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_6_VALUE_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_6_VALUE_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002030 + (N) * 128) bits 15:0) field F16_6_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_1 index N=0..23 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002030 + (N) * 128) bits 15:0) field F16_6_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_1 index N=0..23 */
        eclass_reg_GEN_FILTER_CFG_FILTER16_6_REG_1_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_1_BIT_F16_6_VALUE_OFF + subfield_offset),
                                                                    ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_1_BIT_F16_6_VALUE_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_F16_6_VALUE_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_F16_6_VALUE_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_6_VALUE_get", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_6_VALUE_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_6_VALUE_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002030 + (N) * 128) bits 15:0) field F16_6_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_1 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_6_REG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_1_BIT_F16_6_VALUE_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_1_BIT_F16_6_VALUE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_1_BIT_F16_6_VALUE_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_1_BIT_F16_6_VALUE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_6_VALUE_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_F16_6_INV_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_6_INV_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_6_INV_set", N, 23);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_6_INV_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_6_INV_set", N, value );

    /* ((0x00002034 + (N) * 128) bits 12) field F16_6_INV of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_2 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_6_REG_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_2_BIT_F16_6_INV_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_2_BIT_F16_6_INV_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_6_INV_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_6_INV_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_6_INV_get", N, 23);
    /* ((0x00002034 + (N) * 128) bits 12) field F16_6_INV of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_2 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_6_REG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_2_BIT_F16_6_INV_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_2_BIT_F16_6_INV_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_6_INV_get", N, value );

    return value;
}
static INLINE void eclass_field_F16_6_ENABLE_set( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_6_ENABLE_set( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_6_ENABLE_set", N, 23);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_6_ENABLE_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_6_ENABLE_set", N, value );

    /* ((0x00002034 + (N) * 128) bits 8) field F16_6_ENABLE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_2 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_6_REG_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_2_BIT_F16_6_ENABLE_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_2_BIT_F16_6_ENABLE_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_6_ENABLE_get( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_6_ENABLE_get( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_6_ENABLE_get", N, 23);
    /* ((0x00002034 + (N) * 128) bits 8) field F16_6_ENABLE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_2 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_6_REG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_2_BIT_F16_6_ENABLE_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_2_BIT_F16_6_ENABLE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_6_ENABLE_get", N, value );

    return value;
}
static INLINE void eclass_field_F16_6_ADDR_set( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_6_ADDR_set( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_6_ADDR_set", N, 23);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_6_ADDR_set", value, 31);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_6_ADDR_set", N, value );

    /* ((0x00002034 + (N) * 128) bits 4:0) field F16_6_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_2 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_6_REG_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_2_BIT_F16_6_ADDR_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_2_BIT_F16_6_ADDR_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_6_ADDR_get( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_6_ADDR_get( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_6_ADDR_get", N, 23);
    /* ((0x00002034 + (N) * 128) bits 4:0) field F16_6_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_2 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_6_REG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_2_BIT_F16_6_ADDR_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_2_BIT_F16_6_ADDR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_6_ADDR_get", N, value );

    return value;
}
static INLINE void eclass_field_range_F16_6_ADDR_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_F16_6_ADDR_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_6_ADDR_set", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_6_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_6_ADDR_set", stop_bit, 4 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_6_ADDR_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002034 + (N) * 128) bits 4:0) field F16_6_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_2 index N=0..23 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002034 + (N) * 128) bits 4:0) field F16_6_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_2 index N=0..23 */
        eclass_reg_GEN_FILTER_CFG_FILTER16_6_REG_2_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_2_BIT_F16_6_ADDR_OFF + subfield_offset),
                                                                    ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_2_BIT_F16_6_ADDR_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_F16_6_ADDR_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_F16_6_ADDR_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_6_ADDR_get", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_6_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_6_ADDR_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002034 + (N) * 128) bits 4:0) field F16_6_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_2 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_6_REG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_2_BIT_F16_6_ADDR_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_2_BIT_F16_6_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_2_BIT_F16_6_ADDR_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_6_REG_2_BIT_F16_6_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_6_ADDR_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_F16_7_MASK_set( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_7_MASK_set( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_7_MASK_set", N, 23);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_7_MASK_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_7_MASK_set", N, value );

    /* ((0x00002038 + (N) * 128) bits 31:16) field F16_7_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_1 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_7_REG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_1_BIT_F16_7_MASK_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_1_BIT_F16_7_MASK_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_7_MASK_get( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_7_MASK_get( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_7_MASK_get", N, 23);
    /* ((0x00002038 + (N) * 128) bits 31:16) field F16_7_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_1 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_7_REG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_1_BIT_F16_7_MASK_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_1_BIT_F16_7_MASK_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_7_MASK_get", N, value );

    return value;
}
static INLINE void eclass_field_range_F16_7_MASK_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_F16_7_MASK_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_7_MASK_set", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_7_MASK_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_7_MASK_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_7_MASK_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002038 + (N) * 128) bits 31:16) field F16_7_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_1 index N=0..23 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002038 + (N) * 128) bits 31:16) field F16_7_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_1 index N=0..23 */
        eclass_reg_GEN_FILTER_CFG_FILTER16_7_REG_1_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_1_BIT_F16_7_MASK_OFF + subfield_offset),
                                                                    ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_1_BIT_F16_7_MASK_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_F16_7_MASK_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_F16_7_MASK_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_7_MASK_get", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_7_MASK_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_7_MASK_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002038 + (N) * 128) bits 31:16) field F16_7_MASK of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_1 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_7_REG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_1_BIT_F16_7_MASK_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_1_BIT_F16_7_MASK_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_1_BIT_F16_7_MASK_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_1_BIT_F16_7_MASK_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_7_MASK_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_F16_7_VALUE_set( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_7_VALUE_set( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N,
                                                 UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_7_VALUE_set", N, 23);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_7_VALUE_set", value, 65535);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_7_VALUE_set", N, value );

    /* ((0x00002038 + (N) * 128) bits 15:0) field F16_7_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_1 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_7_REG_1_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_1_BIT_F16_7_VALUE_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_1_BIT_F16_7_VALUE_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_7_VALUE_get( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_7_VALUE_get( eclass_buffer_t *b_ptr,
                                                   eclass_handle_t *h_ptr,
                                                   UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_7_VALUE_get", N, 23);
    /* ((0x00002038 + (N) * 128) bits 15:0) field F16_7_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_1 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_7_REG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_1_BIT_F16_7_VALUE_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_1_BIT_F16_7_VALUE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_7_VALUE_get", N, value );

    return value;
}
static INLINE void eclass_field_range_F16_7_VALUE_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_F16_7_VALUE_set( eclass_buffer_t *b_ptr,
                                                       eclass_handle_t *h_ptr,
                                                       UINT32  N,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_7_VALUE_set", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_7_VALUE_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_7_VALUE_set", stop_bit, 15 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_7_VALUE_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x00002038 + (N) * 128) bits 15:0) field F16_7_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_1 index N=0..23 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x00002038 + (N) * 128) bits 15:0) field F16_7_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_1 index N=0..23 */
        eclass_reg_GEN_FILTER_CFG_FILTER16_7_REG_1_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_1_BIT_F16_7_VALUE_OFF + subfield_offset),
                                                                    ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_1_BIT_F16_7_VALUE_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_F16_7_VALUE_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_F16_7_VALUE_get( eclass_buffer_t *b_ptr,
                                                         eclass_handle_t *h_ptr,
                                                         UINT32  N,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_7_VALUE_get", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_7_VALUE_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_7_VALUE_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x00002038 + (N) * 128) bits 15:0) field F16_7_VALUE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_1 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_7_REG_1_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_1_BIT_F16_7_VALUE_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_1_BIT_F16_7_VALUE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_1_BIT_F16_7_VALUE_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_1_BIT_F16_7_VALUE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_7_VALUE_get", N, start_bit, stop_bit, value );

    return value;
}
static INLINE void eclass_field_F16_7_INV_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_7_INV_set( eclass_buffer_t *b_ptr,
                                               eclass_handle_t *h_ptr,
                                               UINT32  N,
                                               UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_7_INV_set", N, 23);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_7_INV_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_7_INV_set", N, value );

    /* ((0x0000203c + (N) * 128) bits 12) field F16_7_INV of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_2 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_7_REG_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_2_BIT_F16_7_INV_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_2_BIT_F16_7_INV_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_7_INV_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_7_INV_get( eclass_buffer_t *b_ptr,
                                                 eclass_handle_t *h_ptr,
                                                 UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_7_INV_get", N, 23);
    /* ((0x0000203c + (N) * 128) bits 12) field F16_7_INV of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_2 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_7_REG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_2_BIT_F16_7_INV_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_2_BIT_F16_7_INV_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_7_INV_get", N, value );

    return value;
}
static INLINE void eclass_field_F16_7_ENABLE_set( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_7_ENABLE_set( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N,
                                                  UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_7_ENABLE_set", N, 23);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_7_ENABLE_set", value, 1);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_7_ENABLE_set", N, value );

    /* ((0x0000203c + (N) * 128) bits 8) field F16_7_ENABLE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_2 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_7_REG_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_2_BIT_F16_7_ENABLE_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_2_BIT_F16_7_ENABLE_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_7_ENABLE_get( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_7_ENABLE_get( eclass_buffer_t *b_ptr,
                                                    eclass_handle_t *h_ptr,
                                                    UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_7_ENABLE_get", N, 23);
    /* ((0x0000203c + (N) * 128) bits 8) field F16_7_ENABLE of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_2 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_7_REG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_2_BIT_F16_7_ENABLE_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_2_BIT_F16_7_ENABLE_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_7_ENABLE_get", N, value );

    return value;
}
static INLINE void eclass_field_F16_7_ADDR_set( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_F16_7_ADDR_set( eclass_buffer_t *b_ptr,
                                                eclass_handle_t *h_ptr,
                                                UINT32  N,
                                                UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_7_ADDR_set", N, 23);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "eclass_field_F16_7_ADDR_set", value, 31);
    IOLOG( "%s <= N=%d 0x%08x", "eclass_field_F16_7_ADDR_set", N, value );

    /* ((0x0000203c + (N) * 128) bits 4:0) field F16_7_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_2 index N=0..23 */
    eclass_reg_GEN_FILTER_CFG_FILTER16_7_REG_2_array_field_set( b_ptr,
                                                                h_ptr,
                                                                N,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_2_BIT_F16_7_ADDR_MSK,
                                                                ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_2_BIT_F16_7_ADDR_OFF,
                                                                value);
}

static INLINE UINT32 eclass_field_F16_7_ADDR_get( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_F16_7_ADDR_get( eclass_buffer_t *b_ptr,
                                                  eclass_handle_t *h_ptr,
                                                  UINT32  N )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_F16_7_ADDR_get", N, 23);
    /* ((0x0000203c + (N) * 128) bits 4:0) field F16_7_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_2 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_7_REG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_2_BIT_F16_7_ADDR_MSK) >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_2_BIT_F16_7_ADDR_OFF;
    IOLOG( "%s -> N=%d 0x%08x", "eclass_field_F16_7_ADDR_get", N, value );

    return value;
}
static INLINE void eclass_field_range_F16_7_ADDR_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void eclass_field_range_F16_7_ADDR_set( eclass_buffer_t *b_ptr,
                                                      eclass_handle_t *h_ptr,
                                                      UINT32  N,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_7_ADDR_set", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_7_ADDR_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_7_ADDR_set", stop_bit, 4 );
    IOLOG( "%s <= N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_7_ADDR_set", N, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* ((0x0000203c + (N) * 128) bits 4:0) field F16_7_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_2 index N=0..23 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* ((0x0000203c + (N) * 128) bits 4:0) field F16_7_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_2 index N=0..23 */
        eclass_reg_GEN_FILTER_CFG_FILTER16_7_REG_2_array_field_set( b_ptr,
                                                                    h_ptr,
                                                                    N,
                                                                    subfield_mask << (ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_2_BIT_F16_7_ADDR_OFF + subfield_offset),
                                                                    ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_2_BIT_F16_7_ADDR_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}

static INLINE UINT32 eclass_field_range_F16_7_ADDR_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 eclass_field_range_F16_7_ADDR_get( eclass_buffer_t *b_ptr,
                                                        eclass_handle_t *h_ptr,
                                                        UINT32  N,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (N > 23)
        IO_RANGE_CHECK("%s N is %d but max is %d", "eclass_field_range_F16_7_ADDR_get", N, 23);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "eclass_field_range_F16_7_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "eclass_field_range_F16_7_ADDR_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* ((0x0000203c + (N) * 128) bits 4:0) field F16_7_ADDR of register PMC_ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_2 index N=0..23 */
    reg_value = eclass_reg_GEN_FILTER_CFG_FILTER16_7_REG_2_array_read( b_ptr,
                                                                       h_ptr,
                                                                       N);
    field_value = (reg_value & ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_2_BIT_F16_7_ADDR_MSK)
                  >> ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_2_BIT_F16_7_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_2_BIT_F16_7_ADDR_MSK, ECLASS120_REG_GEN_FILTER_CFG_FILTER16_7_REG_2_BIT_F16_7_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> N=%d start_bit=%d stop_bit=%d 0x%08x", "eclass_field_range_F16_7_ADDR_get", N, start_bit, stop_bit, value );

    return value;
}

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* _ECLASS_IO_INLINE_H */
