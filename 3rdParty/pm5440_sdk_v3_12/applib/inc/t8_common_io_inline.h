/******************************************************************************
 *   COPYRIGHT (C) 2013 PMC-SIERRA, INC. ALL RIGHTS RESERVED.
 * --------------------------------------------------------------------------
 *  This software embodies materials and concepts which are proprietary and
 *  confidential to PMC-Sierra, Inc.
 *  PMC-Sierra distributes this software to its customers pursuant to the
 *  terms and conditions of the Software License Agreement
 *  contained in the text file software.lic that is distributed along with
 *  the software. This software can only be utilized if all
 *  terms and conditions of the Software License Agreement are
 *  accepted. If there are any questions, concerns, or if the
 *  Software License Agreement text file, software.lic, is missing please
 *  contact PMC-Sierra for assistance.
 * -------------------------------------------------------------------------
 *   DESCRIPTION:
 *     contains the inline implementation of all the field accessor functions
 *     and register accessor functions for the t8_common block
 *****************************************************************************/
#ifndef _T8_COMMON_IO_INLINE_H
#define _T8_COMMON_IO_INLINE_H

#include "t8.h"
#include "t8_common_regs.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define T8_COMMON_IO_VERSION 2

/*
 * ==================================================================================
 *  tsb level structure and access functions for t8_common
 * ==================================================================================
 */
/* if logging is disabled then so is IO_LOGGING */
#ifndef NO_IO_LOGGING
# ifdef LOGGING_DISABLED
#  define NO_IO_LOGGING
# endif
#endif

/* log messages in the generated files log the caller's file/line/function instead of itself.*/
#ifndef IOLOG
# ifdef NO_IO_LOGGING
#  define IOLOG(...)
# else
#  define IOLOG(...) LOG( __VA_ARGS__)
# endif
#endif
#ifndef IO_RANGE_CHECK
# ifdef NO_IO_LOGGING
#  define IO_RANGE_CHECK(...)
# else
#  define IO_RANGE_CHECK(...) LOG( "** range check ** " __VA_ARGS__)
# endif
#endif
#ifndef IOLOG_DATA
# ifdef NO_IO_LOGGING
#  define IOLOG_DATA(...)
# else
#  define IOLOG_DATA(...) LOG_DATA( __VA_ARGS__)
# endif
#endif
typedef struct {
    coalesce_buffer_t coalesce_handle[1]; /* only used if register coalescing is enabled */
    t8_handle_t * h_ptr;
    pmc_sys_handle_t * sys_handle;
    PMC_VAR_CONST UINT32 base_address;
    /* maybe eventually need to add some fields here per io handle */
} t8_common_buffer_t;
static INLINE void t8_common_buffer_init( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ALWAYS_INLINE;
static INLINE void t8_common_buffer_init( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    b_ptr->h_ptr                    = h_ptr;
    b_ptr->sys_handle               = ((pmc_handle_t *)h_ptr)->sys_handle;
    *(UINT32 *)&b_ptr->base_address = ((pmc_handle_t *)h_ptr)->base_address;
    /* currently this just checks that the previous function remembered to flush. */
    l1sys_init( b_ptr->coalesce_handle, b_ptr->sys_handle );
    IOLOG( "%s", "t8_common_buffer_init");
    
}

/* flush any changed fields to the register file and invalidate the read cache. */
static INLINE void t8_common_buffer_flush( t8_common_buffer_t *b_ptr ) ALWAYS_INLINE;
static INLINE void t8_common_buffer_flush( t8_common_buffer_t *b_ptr )
{
    IOLOG( "t8_common_buffer_flush" );
    l1sys_flush( b_ptr->coalesce_handle );
}
static INLINE UINT32 t8_common_reg_read( t8_common_buffer_t *b_ptr,
                                         t8_handle_t *h_ptr,
                                         UINT32 mem_type,
                                         UINT32 reg ) ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_read( t8_common_buffer_t *b_ptr,
                                         t8_handle_t *h_ptr,
                                         UINT32 mem_type,
                                         UINT32 reg )
{
    UINT32 value;
    if (b_ptr != NULL)
        value = l1sys_reg_read( b_ptr->coalesce_handle,
                                mem_type,
                                b_ptr->base_address,
                                reg);
    else
        value = l2sys_reg_read( ((pmc_handle_t *)h_ptr)->sys_handle,
                                mem_type,
                                ((pmc_handle_t *)h_ptr)->base_address + reg);
    return value;
}
static INLINE void t8_common_reg_write( t8_common_buffer_t *b_ptr,
                                        t8_handle_t *h_ptr,
                                        UINT32 mem_type,
                                        UINT32 reg,
                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_write( t8_common_buffer_t *b_ptr,
                                        t8_handle_t *h_ptr,
                                        UINT32 mem_type,
                                        UINT32 reg,
                                        UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_reg_write( b_ptr->coalesce_handle,
                         mem_type,
                         b_ptr->base_address,
                         reg,
                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                         mem_type,
                         ((pmc_handle_t *)h_ptr)->base_address + reg,
                         value);
}

static INLINE void t8_common_field_set( t8_common_buffer_t *b_ptr,
                                        t8_handle_t *h_ptr,
                                        UINT32 mem_type,
                                        UINT32 reg,
                                        UINT32 mask,
                                        UINT32 unused_mask,
                                        UINT32 ofs,
                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_set( t8_common_buffer_t *b_ptr,
                                        t8_handle_t *h_ptr,
                                        UINT32 mem_type,
                                        UINT32 reg,
                                        UINT32 mask,
                                        UINT32 unused_mask,
                                        UINT32 ofs,
                                        UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_field_set2( b_ptr->coalesce_handle,
                          mem_type,
                          b_ptr->base_address,
                          reg,
                          mask,
                          unused_mask,
                          ofs,
                          value);
    else
    {
        if ((mask | unused_mask) == 0xffffffff)
        {
            l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                             mem_type,
                             ((pmc_handle_t *)h_ptr)->base_address + reg,
                             value<<ofs);
        }
        else
        {
            l2sys_reg_read_modify_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                                         mem_type,
                                         ((pmc_handle_t *)h_ptr)->base_address + reg,
                                         mask,
                                         value<<ofs);
        }
    }
}

static INLINE void t8_common_action_on_write_field_set( t8_common_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 mem_type,
                                                        UINT32 reg,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_action_on_write_field_set( t8_common_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 mem_type,
                                                        UINT32 reg,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_action_on_write_field_set( b_ptr->coalesce_handle,
                                         mem_type,
                                         b_ptr->base_address,
                                         reg,
                                         mask,
                                         ofs,
                                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                         mem_type,
                         ((pmc_handle_t *)h_ptr)->base_address + reg,
                         value<<ofs);
}

static INLINE void t8_common_burst_read( t8_common_buffer_t *b_ptr,
                                         t8_handle_t *h_ptr,
                                         UINT32 mem_type,
                                         UINT32 reg,
                                         UINT32 len,
                                         UINT32 *value ) ALWAYS_INLINE;
static INLINE void t8_common_burst_read( t8_common_buffer_t *b_ptr,
                                         t8_handle_t *h_ptr,
                                         UINT32 mem_type,
                                         UINT32 reg,
                                         UINT32 len,
                                         UINT32 *value )
{
    if (b_ptr != NULL)
        l1sys_burst_read( b_ptr->coalesce_handle,
                          mem_type,
                          b_ptr->base_address,
                          reg,
                          len,
                          value);
    else
        l2sys_burst_read( ((pmc_handle_t *)h_ptr)->sys_handle,
                          mem_type,
                          ((pmc_handle_t *)h_ptr)->base_address + reg,
                          len,
                          value);
}

static INLINE void t8_common_burst_write( t8_common_buffer_t *b_ptr,
                                          t8_handle_t *h_ptr,
                                          UINT32 mem_type,
                                          UINT32 reg,
                                          UINT32 len,
                                          UINT32 *value ) ALWAYS_INLINE;
static INLINE void t8_common_burst_write( t8_common_buffer_t *b_ptr,
                                          t8_handle_t *h_ptr,
                                          UINT32 mem_type,
                                          UINT32 reg,
                                          UINT32 len,
                                          UINT32 *value )
{
    if (b_ptr != NULL)
        l1sys_burst_write( b_ptr->coalesce_handle,
                           mem_type,
                           b_ptr->base_address,
                           reg,
                           len,
                           value);
    else
        l2sys_burst_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                           mem_type,
                           ((pmc_handle_t *)h_ptr)->base_address + reg,
                           len,
                           value);
}

static INLINE PMC_POLL_RETURN_TYPE t8_common_poll( t8_common_buffer_t *b_ptr,
                                                   t8_handle_t *h_ptr,
                                                   UINT32 mem_type,
                                                   UINT32 reg,
                                                   UINT32 mask,
                                                   UINT32 value,
                                                   PMC_POLL_COMPARISON_TYPE cmp,
                                                   UINT32 max_count,
                                                   UINT32 *num_failed_polls,
                                                   UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE t8_common_poll( t8_common_buffer_t *b_ptr,
                                                   t8_handle_t *h_ptr,
                                                   UINT32 mem_type,
                                                   UINT32 reg,
                                                   UINT32 mask,
                                                   UINT32 value,
                                                   PMC_POLL_COMPARISON_TYPE cmp,
                                                   UINT32 max_count,
                                                   UINT32 *num_failed_polls,
                                                   UINT32 delay_between_polls_in_microseconds )
{
    if (b_ptr != NULL)
        return l1sys_poll( b_ptr->coalesce_handle,
                           mem_type,
                           b_ptr->base_address,
                           reg,
                           mask,
                           value,
                           cmp,
                           max_count,
                           num_failed_polls,
                           delay_between_polls_in_microseconds);
    else
        return l2sys_poll( ((pmc_handle_t *)h_ptr)->sys_handle,
                           mem_type,
                           ((pmc_handle_t *)h_ptr)->base_address + reg,
                           mask,
                           value,
                           cmp,
                           max_count,
                           num_failed_polls,
                           delay_between_polls_in_microseconds);
}

/*
 * ==================================================================================
 *  register access functions for t8_common
 * ==================================================================================
 */

static INLINE void t8_common_reg_RAM_CAPT_CONFIG_REG_write( t8_common_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_RAM_CAPT_CONFIG_REG_write( t8_common_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_RAM_CAPT_CONFIG_REG_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG,
                         value);
}

static INLINE void t8_common_reg_RAM_CAPT_CONFIG_REG_field_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_RAM_CAPT_CONFIG_REG_field_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_RAM_CAPT_CONFIG_REG_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_RAM_CAPT_CONFIG_REG_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_RAM_CAPT_CONFIG_REG_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_RAM_CAPT_CONFIG_REG_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_RST_REG_write( t8_common_buffer_t *b_ptr,
                                                t8_handle_t *h_ptr,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_RST_REG_write( t8_common_buffer_t *b_ptr,
                                                t8_handle_t *h_ptr,
                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_RST_REG_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_RST_REG,
                         value);
}

static INLINE void t8_common_reg_RST_REG_field_set( t8_common_buffer_t *b_ptr,
                                                    t8_handle_t *h_ptr,
                                                    UINT32 mask,
                                                    UINT32 ofs,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_RST_REG_field_set( t8_common_buffer_t *b_ptr,
                                                    t8_handle_t *h_ptr,
                                                    UINT32 mask,
                                                    UINT32 ofs,
                                                    UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_RST_REG_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_RST_REG,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_RST_REG_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_RST_REG_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_RST_REG_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_RST_REG);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_RST_REG_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_PCIE3_CFG_write( t8_common_buffer_t *b_ptr,
                                                  t8_handle_t *h_ptr,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_PCIE3_CFG_write( t8_common_buffer_t *b_ptr,
                                                  t8_handle_t *h_ptr,
                                                  UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_PCIE3_CFG_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_PCIE3_CFG,
                         value);
}

static INLINE void t8_common_reg_PCIE3_CFG_field_set( t8_common_buffer_t *b_ptr,
                                                      t8_handle_t *h_ptr,
                                                      UINT32 mask,
                                                      UINT32 ofs,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_PCIE3_CFG_field_set( t8_common_buffer_t *b_ptr,
                                                      t8_handle_t *h_ptr,
                                                      UINT32 mask,
                                                      UINT32 ofs,
                                                      UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_PCIE3_CFG_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_PCIE3_CFG,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_PCIE3_CFG_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_PCIE3_CFG_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_PCIE3_CFG_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_PCIE3_CFG);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_PCIE3_CFG_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_MABC_CONFIG_REG_1_write( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_MABC_CONFIG_REG_1_write( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_MABC_CONFIG_REG_1_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_1,
                         value);
}

static INLINE void t8_common_reg_MABC_CONFIG_REG_1_field_set( t8_common_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_MABC_CONFIG_REG_1_field_set( t8_common_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_MABC_CONFIG_REG_1_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_1,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_1_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_MABC_CONFIG_REG_1_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_MABC_CONFIG_REG_1_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_1);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_MABC_CONFIG_REG_1_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_MABC_CONFIG_REG_2_write( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_MABC_CONFIG_REG_2_write( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_MABC_CONFIG_REG_2_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_2,
                         value);
}

static INLINE void t8_common_reg_MABC_CONFIG_REG_2_field_set( t8_common_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_MABC_CONFIG_REG_2_field_set( t8_common_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_MABC_CONFIG_REG_2_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_2,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_2_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_MABC_CONFIG_REG_2_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_MABC_CONFIG_REG_2_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_2);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_MABC_CONFIG_REG_2_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_MABC_CONFIG_REG_3_write( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_MABC_CONFIG_REG_3_write( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_MABC_CONFIG_REG_3_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_3,
                         value);
}

static INLINE void t8_common_reg_MABC_CONFIG_REG_3_field_set( t8_common_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_MABC_CONFIG_REG_3_field_set( t8_common_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_MABC_CONFIG_REG_3_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_3,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_3_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_MABC_CONFIG_REG_3_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_MABC_CONFIG_REG_3_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_3);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_MABC_CONFIG_REG_3_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_MABC_CONFIG_REG_4_write( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_MABC_CONFIG_REG_4_write( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_MABC_CONFIG_REG_4_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_4,
                         value);
}

static INLINE void t8_common_reg_MABC_CONFIG_REG_4_field_set( t8_common_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_MABC_CONFIG_REG_4_field_set( t8_common_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_MABC_CONFIG_REG_4_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_4,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_4_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_MABC_CONFIG_REG_4_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_MABC_CONFIG_REG_4_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_4);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_MABC_CONFIG_REG_4_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_MTSB_CTRLR_CONFIG_REG_4_write( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_MTSB_CTRLR_CONFIG_REG_4_write( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_MTSB_CTRLR_CONFIG_REG_4_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4,
                         value);
}

static INLINE void t8_common_reg_MTSB_CTRLR_CONFIG_REG_4_field_set( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_MTSB_CTRLR_CONFIG_REG_4_field_set( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_MTSB_CTRLR_CONFIG_REG_4_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_MTSB_CTRLR_CONFIG_REG_4_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_MTSB_CTRLR_CONFIG_REG_4_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_MTSB_CTRLR_CONFIG_REG_4_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_1_write( t8_common_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_1_write( t8_common_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_1_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1,
                         value);
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_1_field_set( t8_common_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32 mask,
                                                                       UINT32 ofs,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_1_field_set( t8_common_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32 mask,
                                                                       UINT32 ofs,
                                                                       UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_1_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_1_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_1_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_1_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_2_write( t8_common_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_2_write( t8_common_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_2_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2,
                         value);
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_2_field_set( t8_common_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32 mask,
                                                                       UINT32 ofs,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_2_field_set( t8_common_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32 mask,
                                                                       UINT32 ofs,
                                                                       UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_2_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_2_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_2_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_2_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_3_write( t8_common_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_3_write( t8_common_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_3_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3,
                         value);
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_3_field_set( t8_common_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32 mask,
                                                                       UINT32 ofs,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_3_field_set( t8_common_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32 mask,
                                                                       UINT32 ofs,
                                                                       UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_3_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_3_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_3_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_3_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_4_write( t8_common_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_4_write( t8_common_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_4_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4,
                         value);
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_4_field_set( t8_common_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32 mask,
                                                                       UINT32 ofs,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_4_field_set( t8_common_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32 mask,
                                                                       UINT32 ofs,
                                                                       UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_4_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_4_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_4_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_4_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_5_write( t8_common_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_5_write( t8_common_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_5_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5,
                         value);
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_5_field_set( t8_common_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32 mask,
                                                                       UINT32 ofs,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_5_field_set( t8_common_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32 mask,
                                                                       UINT32 ofs,
                                                                       UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_5_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_5_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_5_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_5_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_6_write( t8_common_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_6_write( t8_common_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_6_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6,
                         value);
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_6_field_set( t8_common_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32 mask,
                                                                       UINT32 ofs,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_6_field_set( t8_common_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32 mask,
                                                                       UINT32 ofs,
                                                                       UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_6_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_6_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_6_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_6_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_7_write( t8_common_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_7_write( t8_common_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_7_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7,
                         value);
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_7_field_set( t8_common_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32 mask,
                                                                       UINT32 ofs,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_7_field_set( t8_common_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32 mask,
                                                                       UINT32 ofs,
                                                                       UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_7_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_7_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_7_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_7_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_8_write( t8_common_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_8_write( t8_common_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_8_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8,
                         value);
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_8_field_set( t8_common_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32 mask,
                                                                       UINT32 ofs,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_8_field_set( t8_common_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32 mask,
                                                                       UINT32 ofs,
                                                                       UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_8_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_8_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_8_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_8_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_9_write( t8_common_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_9_write( t8_common_buffer_t *b_ptr,
                                                                   t8_handle_t *h_ptr,
                                                                   UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_9_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9,
                         value);
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_9_field_set( t8_common_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32 mask,
                                                                       UINT32 ofs,
                                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_9_field_set( t8_common_buffer_t *b_ptr,
                                                                       t8_handle_t *h_ptr,
                                                                       UINT32 mask,
                                                                       UINT32 ofs,
                                                                       UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_9_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_9_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_9_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_9_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_10_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_10_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_10_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10,
                         value);
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_10_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_10_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_10_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_10_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_10_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_10_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_11_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_11_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_11_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11,
                         value);
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_11_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_11_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_11_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_11_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_11_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_11_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_12_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_12_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_12_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12,
                         value);
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_12_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_12_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_12_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_12_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_12_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_12_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_13_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_13_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_13_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13,
                         value);
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_13_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_13_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_13_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_13_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_13_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_13_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_14_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_14_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_14_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14,
                         value);
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_14_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_14_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_14_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_14_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_14_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_14_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_15_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_15_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_15_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15,
                         value);
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_15_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_15_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_15_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_15_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_15_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_15_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_16_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_16_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_16_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16,
                         value);
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_16_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_16_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_16_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_16_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_16_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_16_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_17_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_17_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_17_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17,
                         value);
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_17_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_17_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_17_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_17_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_17_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_17_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_18_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_18_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_18_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18,
                         value);
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_18_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_18_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_18_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_18_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_18_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_18_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_19_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_19_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_19_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19,
                         value);
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_19_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_19_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_19_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_19_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_19_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_19_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_20_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_20_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_20_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20,
                         value);
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_20_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_20_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_20_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_20_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_20_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_20_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_21_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_21_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_21_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21,
                         value);
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_21_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_21_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_21_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_21_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_21_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_21_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_22_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_22_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_22_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22,
                         value);
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_22_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_22_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_22_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_22_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_22_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_22_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_23_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_23_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_23_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23,
                         value);
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_23_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_23_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_23_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_23_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_23_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_23_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_24_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_24_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_24_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24,
                         value);
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_24_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_24_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_24_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_24_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_24_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_24_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_25_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_25_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_25_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25,
                         value);
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_25_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_25_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_25_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_25_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_25_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_25_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_26_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_26_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_26_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26,
                         value);
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_26_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_26_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_26_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_26_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_26_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_26_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_27_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_27_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_27_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27,
                         value);
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_27_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_27_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_27_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_27_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_27_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_27_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_28_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_28_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_28_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28,
                         value);
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_28_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_28_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_28_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_28_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_28_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_28_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_29_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_29_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_29_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29,
                         value);
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_29_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_29_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_29_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_29_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_29_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_29_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_30_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_30_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_30_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30,
                         value);
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_30_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_30_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_30_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_30_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_30_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_30_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_31_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_31_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_31_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31,
                         value);
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_31_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_31_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_31_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_31_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_31_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_31_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_32_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_32_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_32_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32,
                         value);
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_32_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_32_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_32_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_32_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_32_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_32_read", reg_value);
    return reg_value;
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_33_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_33_write( t8_common_buffer_t *b_ptr,
                                                                    t8_handle_t *h_ptr,
                                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_33_write", value );
    t8_common_reg_write( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33,
                         value);
}

static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_33_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_reg_AMP_THR_TABLE_CONFIG_REG_33_field_set( t8_common_buffer_t *b_ptr,
                                                                        t8_handle_t *h_ptr,
                                                                        UINT32 mask,
                                                                        UINT32 ofs,
                                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_33_field_set", mask, ofs, value );
    t8_common_field_set( b_ptr,
                         h_ptr,
                         MEM_TYPE_CONFIG,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33,
                         mask,
                         PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_UNUSED_MASK,
                         ofs,
                         value);

}

static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_33_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_AMP_THR_TABLE_CONFIG_REG_33_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_CONFIG,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_AMP_THR_TABLE_CONFIG_REG_33_read", reg_value);
    return reg_value;
}

static INLINE UINT32 t8_common_reg_RAM_CAP_STATUS_REG_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_RAM_CAP_STATUS_REG_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_STATUS,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_RAM_CAP_STATUS_REG);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_RAM_CAP_STATUS_REG_read", reg_value);
    return reg_value;
}

static INLINE UINT32 t8_common_reg_MTSB_CTRLR_STATUS_REG1_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_reg_MTSB_CTRLR_STATUS_REG1_read( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 reg_value;

    reg_value = t8_common_reg_read( b_ptr,
                                    h_ptr,
                                    MEM_TYPE_STATUS,
                                    PMC_PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_STATUS_REG1);

    IOLOG( "%s -> 0x%08x;", "t8_common_reg_MTSB_CTRLR_STATUS_REG1_read", reg_value);
    return reg_value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config
 * ==================================================================================
 */
static INLINE void t8_common_field_RAMCAPT_STOP_EVENT_set( t8_common_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_RAMCAPT_STOP_EVENT_set( t8_common_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_RAMCAPT_STOP_EVENT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_common_field_RAMCAPT_STOP_EVENT_set", value );

    /* (0x0000060c bits 9) field RAMCAPT_STOP_EVENT of register PMC_PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG */
    t8_common_reg_RAM_CAPT_CONFIG_REG_field_set( b_ptr,
                                                 h_ptr,
                                                 PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG_BIT_RAMCAPT_STOP_EVENT_MSK,
                                                 PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG_BIT_RAMCAPT_STOP_EVENT_OFF,
                                                 value);
}

static INLINE UINT32 t8_common_field_RAMCAPT_STOP_EVENT_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_RAMCAPT_STOP_EVENT_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000060c bits 9) field RAMCAPT_STOP_EVENT of register PMC_PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG */
    reg_value = t8_common_reg_RAM_CAPT_CONFIG_REG_read( b_ptr,
                                                        h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG_BIT_RAMCAPT_STOP_EVENT_MSK) >> PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG_BIT_RAMCAPT_STOP_EVENT_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_RAMCAPT_STOP_EVENT_get", value );

    return value;
}
static INLINE void t8_common_field_LS_RAMCAPT_set( t8_common_buffer_t *b_ptr,
                                                   t8_handle_t *h_ptr,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_LS_RAMCAPT_set( t8_common_buffer_t *b_ptr,
                                                   t8_handle_t *h_ptr,
                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_LS_RAMCAPT_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_common_field_LS_RAMCAPT_set", value );

    /* (0x0000060c bits 4) field LS_RAMCAPT of register PMC_PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG */
    t8_common_reg_RAM_CAPT_CONFIG_REG_field_set( b_ptr,
                                                 h_ptr,
                                                 PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG_BIT_LS_RAMCAPT_MSK,
                                                 PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG_BIT_LS_RAMCAPT_OFF,
                                                 value);
}

static INLINE UINT32 t8_common_field_LS_RAMCAPT_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_LS_RAMCAPT_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000060c bits 4) field LS_RAMCAPT of register PMC_PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG */
    reg_value = t8_common_reg_RAM_CAPT_CONFIG_REG_read( b_ptr,
                                                        h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG_BIT_LS_RAMCAPT_MSK) >> PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG_BIT_LS_RAMCAPT_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_LS_RAMCAPT_get", value );

    return value;
}
static INLINE void t8_common_field_RAMCAPT_RST_RD_ADDR_set( t8_common_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_RAMCAPT_RST_RD_ADDR_set( t8_common_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_RAMCAPT_RST_RD_ADDR_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_common_field_RAMCAPT_RST_RD_ADDR_set", value );

    /* (0x0000060c bits 3) field RAMCAPT_RST_RD_ADDR of register PMC_PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG */
    t8_common_reg_RAM_CAPT_CONFIG_REG_field_set( b_ptr,
                                                 h_ptr,
                                                 PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG_BIT_RAMCAPT_RST_RD_ADDR_MSK,
                                                 PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG_BIT_RAMCAPT_RST_RD_ADDR_OFF,
                                                 value);
}

static INLINE UINT32 t8_common_field_RAMCAPT_RST_RD_ADDR_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_RAMCAPT_RST_RD_ADDR_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000060c bits 3) field RAMCAPT_RST_RD_ADDR of register PMC_PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG */
    reg_value = t8_common_reg_RAM_CAPT_CONFIG_REG_read( b_ptr,
                                                        h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG_BIT_RAMCAPT_RST_RD_ADDR_MSK) >> PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG_BIT_RAMCAPT_RST_RD_ADDR_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_RAMCAPT_RST_RD_ADDR_get", value );

    return value;
}
static INLINE void t8_common_field_RAMCAPT_CAPT_MODE_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_RAMCAPT_CAPT_MODE_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_RAMCAPT_CAPT_MODE_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_common_field_RAMCAPT_CAPT_MODE_set", value );

    /* (0x0000060c bits 2) field RAMCAPT_CAPT_MODE of register PMC_PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG */
    t8_common_reg_RAM_CAPT_CONFIG_REG_field_set( b_ptr,
                                                 h_ptr,
                                                 PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG_BIT_RAMCAPT_CAPT_MODE_MSK,
                                                 PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG_BIT_RAMCAPT_CAPT_MODE_OFF,
                                                 value);
}

static INLINE UINT32 t8_common_field_RAMCAPT_CAPT_MODE_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_RAMCAPT_CAPT_MODE_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000060c bits 2) field RAMCAPT_CAPT_MODE of register PMC_PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG */
    reg_value = t8_common_reg_RAM_CAPT_CONFIG_REG_read( b_ptr,
                                                        h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG_BIT_RAMCAPT_CAPT_MODE_MSK) >> PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG_BIT_RAMCAPT_CAPT_MODE_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_RAMCAPT_CAPT_MODE_get", value );

    return value;
}
static INLINE void t8_common_field_RAMCAPT_CAPT_START_set( t8_common_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_RAMCAPT_CAPT_START_set( t8_common_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_RAMCAPT_CAPT_START_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_common_field_RAMCAPT_CAPT_START_set", value );

    /* (0x0000060c bits 1) field RAMCAPT_CAPT_START of register PMC_PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG */
    t8_common_reg_RAM_CAPT_CONFIG_REG_field_set( b_ptr,
                                                 h_ptr,
                                                 PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG_BIT_RAMCAPT_CAPT_START_MSK,
                                                 PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG_BIT_RAMCAPT_CAPT_START_OFF,
                                                 value);
}

static INLINE UINT32 t8_common_field_RAMCAPT_CAPT_START_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_RAMCAPT_CAPT_START_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000060c bits 1) field RAMCAPT_CAPT_START of register PMC_PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG */
    reg_value = t8_common_reg_RAM_CAPT_CONFIG_REG_read( b_ptr,
                                                        h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG_BIT_RAMCAPT_CAPT_START_MSK) >> PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG_BIT_RAMCAPT_CAPT_START_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_RAMCAPT_CAPT_START_get", value );

    return value;
}
static INLINE void t8_common_field_RAMCAPT_ENB_set( t8_common_buffer_t *b_ptr,
                                                    t8_handle_t *h_ptr,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_RAMCAPT_ENB_set( t8_common_buffer_t *b_ptr,
                                                    t8_handle_t *h_ptr,
                                                    UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_RAMCAPT_ENB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_common_field_RAMCAPT_ENB_set", value );

    /* (0x0000060c bits 0) field RAMCAPT_ENB of register PMC_PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG */
    t8_common_reg_RAM_CAPT_CONFIG_REG_field_set( b_ptr,
                                                 h_ptr,
                                                 PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG_BIT_RAMCAPT_ENB_MSK,
                                                 PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG_BIT_RAMCAPT_ENB_OFF,
                                                 value);
}

static INLINE UINT32 t8_common_field_RAMCAPT_ENB_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_RAMCAPT_ENB_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000060c bits 0) field RAMCAPT_ENB of register PMC_PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG */
    reg_value = t8_common_reg_RAM_CAPT_CONFIG_REG_read( b_ptr,
                                                        h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG_BIT_RAMCAPT_ENB_MSK) >> PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG_BIT_RAMCAPT_ENB_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_RAMCAPT_ENB_get", value );

    return value;
}
static INLINE void t8_common_field_PCBI_RXCPGEN_ARSTB_set( t8_common_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_PCBI_RXCPGEN_ARSTB_set( t8_common_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_PCBI_RXCPGEN_ARSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_common_field_PCBI_RXCPGEN_ARSTB_set", value );

    /* (0x00000614 bits 13) field PCBI_RXCPGEN_ARSTB of register PMC_PM20_82_24_COMMON_PCBI_REG_RST_REG */
    t8_common_reg_RST_REG_field_set( b_ptr,
                                     h_ptr,
                                     PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_PCBI_RXCPGEN_ARSTB_MSK,
                                     PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_PCBI_RXCPGEN_ARSTB_OFF,
                                     value);
}

static INLINE UINT32 t8_common_field_PCBI_RXCPGEN_ARSTB_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_PCBI_RXCPGEN_ARSTB_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000614 bits 13) field PCBI_RXCPGEN_ARSTB of register PMC_PM20_82_24_COMMON_PCBI_REG_RST_REG */
    reg_value = t8_common_reg_RST_REG_read(  b_ptr, h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_PCBI_RXCPGEN_ARSTB_MSK) >> PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_PCBI_RXCPGEN_ARSTB_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_PCBI_RXCPGEN_ARSTB_get", value );

    return value;
}
static INLINE void t8_common_field_RXCPGEN_ARSTB_OVR_EN_set( t8_common_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_RXCPGEN_ARSTB_OVR_EN_set( t8_common_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_RXCPGEN_ARSTB_OVR_EN_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_common_field_RXCPGEN_ARSTB_OVR_EN_set", value );

    /* (0x00000614 bits 12) field RXCPGEN_ARSTB_OVR_EN of register PMC_PM20_82_24_COMMON_PCBI_REG_RST_REG */
    t8_common_reg_RST_REG_field_set( b_ptr,
                                     h_ptr,
                                     PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_RXCPGEN_ARSTB_OVR_EN_MSK,
                                     PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_RXCPGEN_ARSTB_OVR_EN_OFF,
                                     value);
}

static INLINE UINT32 t8_common_field_RXCPGEN_ARSTB_OVR_EN_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_RXCPGEN_ARSTB_OVR_EN_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000614 bits 12) field RXCPGEN_ARSTB_OVR_EN of register PMC_PM20_82_24_COMMON_PCBI_REG_RST_REG */
    reg_value = t8_common_reg_RST_REG_read(  b_ptr, h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_RXCPGEN_ARSTB_OVR_EN_MSK) >> PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_RXCPGEN_ARSTB_OVR_EN_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_RXCPGEN_ARSTB_OVR_EN_get", value );

    return value;
}
static INLINE void t8_common_field_PCBI_RXCPGEN_RSTB_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_PCBI_RXCPGEN_RSTB_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_PCBI_RXCPGEN_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_common_field_PCBI_RXCPGEN_RSTB_set", value );

    /* (0x00000614 bits 10) field PCBI_RXCPGEN_RSTB of register PMC_PM20_82_24_COMMON_PCBI_REG_RST_REG */
    t8_common_reg_RST_REG_field_set( b_ptr,
                                     h_ptr,
                                     PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_PCBI_RXCPGEN_RSTB_MSK,
                                     PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_PCBI_RXCPGEN_RSTB_OFF,
                                     value);
}

static INLINE UINT32 t8_common_field_PCBI_RXCPGEN_RSTB_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_PCBI_RXCPGEN_RSTB_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000614 bits 10) field PCBI_RXCPGEN_RSTB of register PMC_PM20_82_24_COMMON_PCBI_REG_RST_REG */
    reg_value = t8_common_reg_RST_REG_read(  b_ptr, h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_PCBI_RXCPGEN_RSTB_MSK) >> PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_PCBI_RXCPGEN_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_PCBI_RXCPGEN_RSTB_get", value );

    return value;
}
static INLINE void t8_common_field_RXCPGEN_RSTB_OVR_EN_set( t8_common_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_RXCPGEN_RSTB_OVR_EN_set( t8_common_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_RXCPGEN_RSTB_OVR_EN_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_common_field_RXCPGEN_RSTB_OVR_EN_set", value );

    /* (0x00000614 bits 9) field RXCPGEN_RSTB_OVR_EN of register PMC_PM20_82_24_COMMON_PCBI_REG_RST_REG */
    t8_common_reg_RST_REG_field_set( b_ptr,
                                     h_ptr,
                                     PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_RXCPGEN_RSTB_OVR_EN_MSK,
                                     PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_RXCPGEN_RSTB_OVR_EN_OFF,
                                     value);
}

static INLINE UINT32 t8_common_field_RXCPGEN_RSTB_OVR_EN_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_RXCPGEN_RSTB_OVR_EN_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000614 bits 9) field RXCPGEN_RSTB_OVR_EN of register PMC_PM20_82_24_COMMON_PCBI_REG_RST_REG */
    reg_value = t8_common_reg_RST_REG_read(  b_ptr, h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_RXCPGEN_RSTB_OVR_EN_MSK) >> PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_RXCPGEN_RSTB_OVR_EN_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_RXCPGEN_RSTB_OVR_EN_get", value );

    return value;
}
static INLINE void t8_common_field_PCBI_PISO_RSTB_set( t8_common_buffer_t *b_ptr,
                                                       t8_handle_t *h_ptr,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_PCBI_PISO_RSTB_set( t8_common_buffer_t *b_ptr,
                                                       t8_handle_t *h_ptr,
                                                       UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_PCBI_PISO_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_common_field_PCBI_PISO_RSTB_set", value );

    /* (0x00000614 bits 8) field PCBI_PISO_RSTB of register PMC_PM20_82_24_COMMON_PCBI_REG_RST_REG */
    t8_common_reg_RST_REG_field_set( b_ptr,
                                     h_ptr,
                                     PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_PCBI_PISO_RSTB_MSK,
                                     PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_PCBI_PISO_RSTB_OFF,
                                     value);
}

static INLINE UINT32 t8_common_field_PCBI_PISO_RSTB_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_PCBI_PISO_RSTB_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000614 bits 8) field PCBI_PISO_RSTB of register PMC_PM20_82_24_COMMON_PCBI_REG_RST_REG */
    reg_value = t8_common_reg_RST_REG_read(  b_ptr, h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_PCBI_PISO_RSTB_MSK) >> PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_PCBI_PISO_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_PCBI_PISO_RSTB_get", value );

    return value;
}
static INLINE void t8_common_field_PISO_RSTB_OVR_EN_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_PISO_RSTB_OVR_EN_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_PISO_RSTB_OVR_EN_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_common_field_PISO_RSTB_OVR_EN_set", value );

    /* (0x00000614 bits 7) field PISO_RSTB_OVR_EN of register PMC_PM20_82_24_COMMON_PCBI_REG_RST_REG */
    t8_common_reg_RST_REG_field_set( b_ptr,
                                     h_ptr,
                                     PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_PISO_RSTB_OVR_EN_MSK,
                                     PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_PISO_RSTB_OVR_EN_OFF,
                                     value);
}

static INLINE UINT32 t8_common_field_PISO_RSTB_OVR_EN_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_PISO_RSTB_OVR_EN_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000614 bits 7) field PISO_RSTB_OVR_EN of register PMC_PM20_82_24_COMMON_PCBI_REG_RST_REG */
    reg_value = t8_common_reg_RST_REG_read(  b_ptr, h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_PISO_RSTB_OVR_EN_MSK) >> PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_PISO_RSTB_OVR_EN_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_PISO_RSTB_OVR_EN_get", value );

    return value;
}
static INLINE void t8_common_field_PCBI_ADC_RSTB_set( t8_common_buffer_t *b_ptr,
                                                      t8_handle_t *h_ptr,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_PCBI_ADC_RSTB_set( t8_common_buffer_t *b_ptr,
                                                      t8_handle_t *h_ptr,
                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_PCBI_ADC_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_common_field_PCBI_ADC_RSTB_set", value );

    /* (0x00000614 bits 5) field PCBI_ADC_RSTB of register PMC_PM20_82_24_COMMON_PCBI_REG_RST_REG */
    t8_common_reg_RST_REG_field_set( b_ptr,
                                     h_ptr,
                                     PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_PCBI_ADC_RSTB_MSK,
                                     PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_PCBI_ADC_RSTB_OFF,
                                     value);
}

static INLINE UINT32 t8_common_field_PCBI_ADC_RSTB_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_PCBI_ADC_RSTB_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000614 bits 5) field PCBI_ADC_RSTB of register PMC_PM20_82_24_COMMON_PCBI_REG_RST_REG */
    reg_value = t8_common_reg_RST_REG_read(  b_ptr, h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_PCBI_ADC_RSTB_MSK) >> PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_PCBI_ADC_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_PCBI_ADC_RSTB_get", value );

    return value;
}
static INLINE void t8_common_field_ADC_RSTB_OVR_EN_set( t8_common_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_ADC_RSTB_OVR_EN_set( t8_common_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_ADC_RSTB_OVR_EN_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_common_field_ADC_RSTB_OVR_EN_set", value );

    /* (0x00000614 bits 4) field ADC_RSTB_OVR_EN of register PMC_PM20_82_24_COMMON_PCBI_REG_RST_REG */
    t8_common_reg_RST_REG_field_set( b_ptr,
                                     h_ptr,
                                     PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_ADC_RSTB_OVR_EN_MSK,
                                     PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_ADC_RSTB_OVR_EN_OFF,
                                     value);
}

static INLINE UINT32 t8_common_field_ADC_RSTB_OVR_EN_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_ADC_RSTB_OVR_EN_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000614 bits 4) field ADC_RSTB_OVR_EN of register PMC_PM20_82_24_COMMON_PCBI_REG_RST_REG */
    reg_value = t8_common_reg_RST_REG_read(  b_ptr, h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_ADC_RSTB_OVR_EN_MSK) >> PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_ADC_RSTB_OVR_EN_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_ADC_RSTB_OVR_EN_get", value );

    return value;
}
static INLINE void t8_common_field_PCBI_ADC_DAC_RSTB_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_PCBI_ADC_DAC_RSTB_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_PCBI_ADC_DAC_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_common_field_PCBI_ADC_DAC_RSTB_set", value );

    /* (0x00000614 bits 3) field PCBI_ADC_DAC_RSTB of register PMC_PM20_82_24_COMMON_PCBI_REG_RST_REG */
    t8_common_reg_RST_REG_field_set( b_ptr,
                                     h_ptr,
                                     PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_PCBI_ADC_DAC_RSTB_MSK,
                                     PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_PCBI_ADC_DAC_RSTB_OFF,
                                     value);
}

static INLINE UINT32 t8_common_field_PCBI_ADC_DAC_RSTB_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_PCBI_ADC_DAC_RSTB_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000614 bits 3) field PCBI_ADC_DAC_RSTB of register PMC_PM20_82_24_COMMON_PCBI_REG_RST_REG */
    reg_value = t8_common_reg_RST_REG_read(  b_ptr, h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_PCBI_ADC_DAC_RSTB_MSK) >> PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_PCBI_ADC_DAC_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_PCBI_ADC_DAC_RSTB_get", value );

    return value;
}
static INLINE void t8_common_field_ADC_DAC_RSTB_OVR_EN_set( t8_common_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_ADC_DAC_RSTB_OVR_EN_set( t8_common_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_ADC_DAC_RSTB_OVR_EN_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_common_field_ADC_DAC_RSTB_OVR_EN_set", value );

    /* (0x00000614 bits 2) field ADC_DAC_RSTB_OVR_EN of register PMC_PM20_82_24_COMMON_PCBI_REG_RST_REG */
    t8_common_reg_RST_REG_field_set( b_ptr,
                                     h_ptr,
                                     PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_ADC_DAC_RSTB_OVR_EN_MSK,
                                     PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_ADC_DAC_RSTB_OVR_EN_OFF,
                                     value);
}

static INLINE UINT32 t8_common_field_ADC_DAC_RSTB_OVR_EN_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_ADC_DAC_RSTB_OVR_EN_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000614 bits 2) field ADC_DAC_RSTB_OVR_EN of register PMC_PM20_82_24_COMMON_PCBI_REG_RST_REG */
    reg_value = t8_common_reg_RST_REG_read(  b_ptr, h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_ADC_DAC_RSTB_OVR_EN_MSK) >> PM20_82_24_COMMON_PCBI_REG_RST_REG_BIT_ADC_DAC_RSTB_OVR_EN_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_ADC_DAC_RSTB_OVR_EN_get", value );

    return value;
}
static INLINE void t8_common_field_ATIN_set( t8_common_buffer_t *b_ptr,
                                             t8_handle_t *h_ptr,
                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_ATIN_set( t8_common_buffer_t *b_ptr,
                                             t8_handle_t *h_ptr,
                                             UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_ATIN_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_ATIN_set", value );

    /* (0x00000618 bits 21:17) bits 0:4 use field ATIN of register PMC_PM20_82_24_COMMON_PCBI_REG_PCIE3_CFG */
    t8_common_reg_PCIE3_CFG_field_set( b_ptr,
                                       h_ptr,
                                       PM20_82_24_COMMON_PCBI_REG_PCIE3_CFG_BIT_ATIN_MSK,
                                       PM20_82_24_COMMON_PCBI_REG_PCIE3_CFG_BIT_ATIN_OFF,
                                       value);
}

static INLINE UINT32 t8_common_field_ATIN_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_ATIN_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000618 bits 21:17) bits 0:4 use field ATIN of register PMC_PM20_82_24_COMMON_PCBI_REG_PCIE3_CFG */
    reg_value = t8_common_reg_PCIE3_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_PCIE3_CFG_BIT_ATIN_MSK) >> PM20_82_24_COMMON_PCBI_REG_PCIE3_CFG_BIT_ATIN_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_ATIN_get", value );

    return value;
}
static INLINE void t8_common_field_range_ATIN_set( t8_common_buffer_t *b_ptr,
                                                   t8_handle_t *h_ptr,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_ATIN_set( t8_common_buffer_t *b_ptr,
                                                   t8_handle_t *h_ptr,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit,
                                                   UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_ATIN_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_ATIN_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_ATIN_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000618 bits 21:17) bits 0:4 use field ATIN of register PMC_PM20_82_24_COMMON_PCBI_REG_PCIE3_CFG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000618 bits 21:17) bits 0:4 use field ATIN of register PMC_PM20_82_24_COMMON_PCBI_REG_PCIE3_CFG */
        t8_common_reg_PCIE3_CFG_field_set( b_ptr,
                                           h_ptr,
                                           subfield_mask << (PM20_82_24_COMMON_PCBI_REG_PCIE3_CFG_BIT_ATIN_OFF + subfield_offset),
                                           PM20_82_24_COMMON_PCBI_REG_PCIE3_CFG_BIT_ATIN_OFF + subfield_offset,
                                           value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_ATIN_get( t8_common_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_ATIN_get( t8_common_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_ATIN_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_ATIN_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000618 bits 21:17) bits 0:4 use field ATIN of register PMC_PM20_82_24_COMMON_PCBI_REG_PCIE3_CFG */
    reg_value = t8_common_reg_PCIE3_CFG_read(  b_ptr, h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_PCIE3_CFG_BIT_ATIN_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_PCIE3_CFG_BIT_ATIN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_PCIE3_CFG_BIT_ATIN_MSK, PM20_82_24_COMMON_PCBI_REG_PCIE3_CFG_BIT_ATIN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_ATIN_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_RXCPGEN_ENB_set( t8_common_buffer_t *b_ptr,
                                                    t8_handle_t *h_ptr,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_RXCPGEN_ENB_set( t8_common_buffer_t *b_ptr,
                                                    t8_handle_t *h_ptr,
                                                    UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_RXCPGEN_ENB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_common_field_RXCPGEN_ENB_set", value );

    /* (0x00000618 bits 16) field RXCPGEN_ENB of register PMC_PM20_82_24_COMMON_PCBI_REG_PCIE3_CFG */
    t8_common_reg_PCIE3_CFG_field_set( b_ptr,
                                       h_ptr,
                                       PM20_82_24_COMMON_PCBI_REG_PCIE3_CFG_BIT_RXCPGEN_ENB_MSK,
                                       PM20_82_24_COMMON_PCBI_REG_PCIE3_CFG_BIT_RXCPGEN_ENB_OFF,
                                       value);
}

static INLINE UINT32 t8_common_field_RXCPGEN_ENB_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_RXCPGEN_ENB_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000618 bits 16) field RXCPGEN_ENB of register PMC_PM20_82_24_COMMON_PCBI_REG_PCIE3_CFG */
    reg_value = t8_common_reg_PCIE3_CFG_read(  b_ptr, h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_PCIE3_CFG_BIT_RXCPGEN_ENB_MSK) >> PM20_82_24_COMMON_PCBI_REG_PCIE3_CFG_BIT_RXCPGEN_ENB_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_RXCPGEN_ENB_get", value );

    return value;
}
static INLINE void t8_common_field_CS_RXCPGEN_DLY_RSTB_set( t8_common_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_CS_RXCPGEN_DLY_RSTB_set( t8_common_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_CS_RXCPGEN_DLY_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_common_field_CS_RXCPGEN_DLY_RSTB_set", value );

    /* (0x0000061c bits 3) field CS_RXCPGEN_DLY_RSTB of register PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_1 */
    t8_common_reg_MABC_CONFIG_REG_1_field_set( b_ptr,
                                               h_ptr,
                                               PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_1_BIT_CS_RXCPGEN_DLY_RSTB_MSK,
                                               PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_1_BIT_CS_RXCPGEN_DLY_RSTB_OFF,
                                               value);
}

static INLINE UINT32 t8_common_field_CS_RXCPGEN_DLY_RSTB_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_CS_RXCPGEN_DLY_RSTB_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000061c bits 3) field CS_RXCPGEN_DLY_RSTB of register PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_1 */
    reg_value = t8_common_reg_MABC_CONFIG_REG_1_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_1_BIT_CS_RXCPGEN_DLY_RSTB_MSK) >> PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_1_BIT_CS_RXCPGEN_DLY_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_CS_RXCPGEN_DLY_RSTB_get", value );

    return value;
}
static INLINE void t8_common_field_CS_PISO_DLY_RSTB_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_CS_PISO_DLY_RSTB_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_CS_PISO_DLY_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_common_field_CS_PISO_DLY_RSTB_set", value );

    /* (0x0000061c bits 2) field CS_PISO_DLY_RSTB of register PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_1 */
    t8_common_reg_MABC_CONFIG_REG_1_field_set( b_ptr,
                                               h_ptr,
                                               PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_1_BIT_CS_PISO_DLY_RSTB_MSK,
                                               PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_1_BIT_CS_PISO_DLY_RSTB_OFF,
                                               value);
}

static INLINE UINT32 t8_common_field_CS_PISO_DLY_RSTB_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_CS_PISO_DLY_RSTB_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000061c bits 2) field CS_PISO_DLY_RSTB of register PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_1 */
    reg_value = t8_common_reg_MABC_CONFIG_REG_1_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_1_BIT_CS_PISO_DLY_RSTB_MSK) >> PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_1_BIT_CS_PISO_DLY_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_CS_PISO_DLY_RSTB_get", value );

    return value;
}
static INLINE void t8_common_field_CS_ADC_DLY_RSTB_set( t8_common_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_CS_ADC_DLY_RSTB_set( t8_common_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_CS_ADC_DLY_RSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_common_field_CS_ADC_DLY_RSTB_set", value );

    /* (0x0000061c bits 1) field CS_ADC_DLY_RSTB of register PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_1 */
    t8_common_reg_MABC_CONFIG_REG_1_field_set( b_ptr,
                                               h_ptr,
                                               PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_1_BIT_CS_ADC_DLY_RSTB_MSK,
                                               PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_1_BIT_CS_ADC_DLY_RSTB_OFF,
                                               value);
}

static INLINE UINT32 t8_common_field_CS_ADC_DLY_RSTB_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_CS_ADC_DLY_RSTB_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000061c bits 1) field CS_ADC_DLY_RSTB of register PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_1 */
    reg_value = t8_common_reg_MABC_CONFIG_REG_1_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_1_BIT_CS_ADC_DLY_RSTB_MSK) >> PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_1_BIT_CS_ADC_DLY_RSTB_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_CS_ADC_DLY_RSTB_get", value );

    return value;
}
static INLINE void t8_common_field_CS_RXCPGEN_DLY_ARSTB_set( t8_common_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_CS_RXCPGEN_DLY_ARSTB_set( t8_common_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_CS_RXCPGEN_DLY_ARSTB_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_common_field_CS_RXCPGEN_DLY_ARSTB_set", value );

    /* (0x0000061c bits 0) field CS_RXCPGEN_DLY_ARSTB of register PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_1 */
    t8_common_reg_MABC_CONFIG_REG_1_field_set( b_ptr,
                                               h_ptr,
                                               PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_1_BIT_CS_RXCPGEN_DLY_ARSTB_MSK,
                                               PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_1_BIT_CS_RXCPGEN_DLY_ARSTB_OFF,
                                               value);
}

static INLINE UINT32 t8_common_field_CS_RXCPGEN_DLY_ARSTB_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_CS_RXCPGEN_DLY_ARSTB_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000061c bits 0) field CS_RXCPGEN_DLY_ARSTB of register PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_1 */
    reg_value = t8_common_reg_MABC_CONFIG_REG_1_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_1_BIT_CS_RXCPGEN_DLY_ARSTB_MSK) >> PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_1_BIT_CS_RXCPGEN_DLY_ARSTB_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_CS_RXCPGEN_DLY_ARSTB_get", value );

    return value;
}
static INLINE void t8_common_field_MABC_RXCPGEN_CTRL_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_MABC_RXCPGEN_CTRL_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_MABC_RXCPGEN_CTRL_set", value, 65535);
    IOLOG( "%s <= 0x%08x", "t8_common_field_MABC_RXCPGEN_CTRL_set", value );

    /* (0x00000620 bits 15:0) bits 0:15 use field MABC_RXCPGEN_CTRL of register PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_2 */
    t8_common_reg_MABC_CONFIG_REG_2_field_set( b_ptr,
                                               h_ptr,
                                               PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_2_BIT_MABC_RXCPGEN_CTRL_MSK,
                                               PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_2_BIT_MABC_RXCPGEN_CTRL_OFF,
                                               value);
}

static INLINE UINT32 t8_common_field_MABC_RXCPGEN_CTRL_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_MABC_RXCPGEN_CTRL_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000620 bits 15:0) bits 0:15 use field MABC_RXCPGEN_CTRL of register PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_2 */
    reg_value = t8_common_reg_MABC_CONFIG_REG_2_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_2_BIT_MABC_RXCPGEN_CTRL_MSK) >> PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_2_BIT_MABC_RXCPGEN_CTRL_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_MABC_RXCPGEN_CTRL_get", value );

    return value;
}
static INLINE void t8_common_field_range_MABC_RXCPGEN_CTRL_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_MABC_RXCPGEN_CTRL_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_MABC_RXCPGEN_CTRL_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_MABC_RXCPGEN_CTRL_set", stop_bit, 15 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_MABC_RXCPGEN_CTRL_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000620 bits 15:0) bits 0:15 use field MABC_RXCPGEN_CTRL of register PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000620 bits 15:0) bits 0:15 use field MABC_RXCPGEN_CTRL of register PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_2 */
        t8_common_reg_MABC_CONFIG_REG_2_field_set( b_ptr,
                                                   h_ptr,
                                                   subfield_mask << (PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_2_BIT_MABC_RXCPGEN_CTRL_OFF + subfield_offset),
                                                   PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_2_BIT_MABC_RXCPGEN_CTRL_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_MABC_RXCPGEN_CTRL_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_MABC_RXCPGEN_CTRL_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_MABC_RXCPGEN_CTRL_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_MABC_RXCPGEN_CTRL_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000620 bits 15:0) bits 0:15 use field MABC_RXCPGEN_CTRL of register PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_2 */
    reg_value = t8_common_reg_MABC_CONFIG_REG_2_read( b_ptr,
                                                      h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_2_BIT_MABC_RXCPGEN_CTRL_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_2_BIT_MABC_RXCPGEN_CTRL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_2_BIT_MABC_RXCPGEN_CTRL_MSK, PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_2_BIT_MABC_RXCPGEN_CTRL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_MABC_RXCPGEN_CTRL_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_PISO_CTRL_B_set( t8_common_buffer_t *b_ptr,
                                                    t8_handle_t *h_ptr,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_PISO_CTRL_B_set( t8_common_buffer_t *b_ptr,
                                                    t8_handle_t *h_ptr,
                                                    UINT32 value )
{
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_PISO_CTRL_B_set", value, 255);
    IOLOG( "%s <= 0x%08x", "t8_common_field_PISO_CTRL_B_set", value );

    /* (0x00000624 bits 31:24) bits 0:7 use field PISO_CTRL_B of register PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_3 */
    t8_common_reg_MABC_CONFIG_REG_3_field_set( b_ptr,
                                               h_ptr,
                                               PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_3_BIT_PISO_CTRL_B_MSK,
                                               PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_3_BIT_PISO_CTRL_B_OFF,
                                               value);
}

static INLINE UINT32 t8_common_field_PISO_CTRL_B_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_PISO_CTRL_B_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000624 bits 31:24) bits 0:7 use field PISO_CTRL_B of register PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_3 */
    reg_value = t8_common_reg_MABC_CONFIG_REG_3_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_3_BIT_PISO_CTRL_B_MSK) >> PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_3_BIT_PISO_CTRL_B_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_PISO_CTRL_B_get", value );

    return value;
}
static INLINE void t8_common_field_range_PISO_CTRL_B_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_PISO_CTRL_B_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_PISO_CTRL_B_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_PISO_CTRL_B_set", stop_bit, 7 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_PISO_CTRL_B_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000624 bits 31:24) bits 0:7 use field PISO_CTRL_B of register PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_3 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000624 bits 31:24) bits 0:7 use field PISO_CTRL_B of register PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_3 */
        t8_common_reg_MABC_CONFIG_REG_3_field_set( b_ptr,
                                                   h_ptr,
                                                   subfield_mask << (PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_3_BIT_PISO_CTRL_B_OFF + subfield_offset),
                                                   PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_3_BIT_PISO_CTRL_B_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_PISO_CTRL_B_get( t8_common_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_PISO_CTRL_B_get( t8_common_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_PISO_CTRL_B_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_PISO_CTRL_B_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000624 bits 31:24) bits 0:7 use field PISO_CTRL_B of register PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_3 */
    reg_value = t8_common_reg_MABC_CONFIG_REG_3_read( b_ptr,
                                                      h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_3_BIT_PISO_CTRL_B_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_3_BIT_PISO_CTRL_B_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_3_BIT_PISO_CTRL_B_MSK, PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_3_BIT_PISO_CTRL_B_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_PISO_CTRL_B_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_PISO_CTRL_A_set( t8_common_buffer_t *b_ptr,
                                                    t8_handle_t *h_ptr,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_PISO_CTRL_A_set( t8_common_buffer_t *b_ptr,
                                                    t8_handle_t *h_ptr,
                                                    UINT32 value )
{
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_PISO_CTRL_A_set", value, 255);
    IOLOG( "%s <= 0x%08x", "t8_common_field_PISO_CTRL_A_set", value );

    /* (0x00000624 bits 7:0) bits 0:7 use field PISO_CTRL_A of register PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_3 */
    t8_common_reg_MABC_CONFIG_REG_3_field_set( b_ptr,
                                               h_ptr,
                                               PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_3_BIT_PISO_CTRL_A_MSK,
                                               PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_3_BIT_PISO_CTRL_A_OFF,
                                               value);
}

static INLINE UINT32 t8_common_field_PISO_CTRL_A_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_PISO_CTRL_A_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000624 bits 7:0) bits 0:7 use field PISO_CTRL_A of register PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_3 */
    reg_value = t8_common_reg_MABC_CONFIG_REG_3_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_3_BIT_PISO_CTRL_A_MSK) >> PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_3_BIT_PISO_CTRL_A_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_PISO_CTRL_A_get", value );

    return value;
}
static INLINE void t8_common_field_range_PISO_CTRL_A_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_PISO_CTRL_A_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit,
                                                          UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_PISO_CTRL_A_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_PISO_CTRL_A_set", stop_bit, 7 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_PISO_CTRL_A_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000624 bits 7:0) bits 0:7 use field PISO_CTRL_A of register PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_3 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000624 bits 7:0) bits 0:7 use field PISO_CTRL_A of register PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_3 */
        t8_common_reg_MABC_CONFIG_REG_3_field_set( b_ptr,
                                                   h_ptr,
                                                   subfield_mask << (PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_3_BIT_PISO_CTRL_A_OFF + subfield_offset),
                                                   PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_3_BIT_PISO_CTRL_A_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_PISO_CTRL_A_get( t8_common_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_PISO_CTRL_A_get( t8_common_buffer_t *b_ptr,
                                                            t8_handle_t *h_ptr,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_PISO_CTRL_A_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_PISO_CTRL_A_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000624 bits 7:0) bits 0:7 use field PISO_CTRL_A of register PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_3 */
    reg_value = t8_common_reg_MABC_CONFIG_REG_3_read( b_ptr,
                                                      h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_3_BIT_PISO_CTRL_A_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_3_BIT_PISO_CTRL_A_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_3_BIT_PISO_CTRL_A_MSK, PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_3_BIT_PISO_CTRL_A_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_PISO_CTRL_A_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_MABC_PISO_PBUS_WIDTH_A_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_MABC_PISO_PBUS_WIDTH_A_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_MABC_PISO_PBUS_WIDTH_A_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_common_field_MABC_PISO_PBUS_WIDTH_A_set", value );

    /* (0x00000628 bits 31) field MABC_PISO_PBUS_WIDTH_A of register PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_4 */
    t8_common_reg_MABC_CONFIG_REG_4_field_set( b_ptr,
                                               h_ptr,
                                               PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_4_BIT_MABC_PISO_PBUS_WIDTH_A_MSK,
                                               PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_4_BIT_MABC_PISO_PBUS_WIDTH_A_OFF,
                                               value);
}

static INLINE UINT32 t8_common_field_MABC_PISO_PBUS_WIDTH_A_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_MABC_PISO_PBUS_WIDTH_A_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000628 bits 31) field MABC_PISO_PBUS_WIDTH_A of register PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_4 */
    reg_value = t8_common_reg_MABC_CONFIG_REG_4_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_4_BIT_MABC_PISO_PBUS_WIDTH_A_MSK) >> PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_4_BIT_MABC_PISO_PBUS_WIDTH_A_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_MABC_PISO_PBUS_WIDTH_A_get", value );

    return value;
}
static INLINE void t8_common_field_MABC_PISO_PBUS_WIDTH_B_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_MABC_PISO_PBUS_WIDTH_B_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_MABC_PISO_PBUS_WIDTH_B_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_common_field_MABC_PISO_PBUS_WIDTH_B_set", value );

    /* (0x00000628 bits 30) field MABC_PISO_PBUS_WIDTH_B of register PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_4 */
    t8_common_reg_MABC_CONFIG_REG_4_field_set( b_ptr,
                                               h_ptr,
                                               PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_4_BIT_MABC_PISO_PBUS_WIDTH_B_MSK,
                                               PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_4_BIT_MABC_PISO_PBUS_WIDTH_B_OFF,
                                               value);
}

static INLINE UINT32 t8_common_field_MABC_PISO_PBUS_WIDTH_B_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_MABC_PISO_PBUS_WIDTH_B_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000628 bits 30) field MABC_PISO_PBUS_WIDTH_B of register PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_4 */
    reg_value = t8_common_reg_MABC_CONFIG_REG_4_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_4_BIT_MABC_PISO_PBUS_WIDTH_B_MSK) >> PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_4_BIT_MABC_PISO_PBUS_WIDTH_B_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_MABC_PISO_PBUS_WIDTH_B_get", value );

    return value;
}
static INLINE void t8_common_field_MABC_RXCPGEN_MODE_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_MABC_RXCPGEN_MODE_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1023)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_MABC_RXCPGEN_MODE_set", value, 1023);
    IOLOG( "%s <= 0x%08x", "t8_common_field_MABC_RXCPGEN_MODE_set", value );

    /* (0x00000628 bits 9:0) bits 0:9 use field MABC_RXCPGEN_MODE of register PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_4 */
    t8_common_reg_MABC_CONFIG_REG_4_field_set( b_ptr,
                                               h_ptr,
                                               PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_4_BIT_MABC_RXCPGEN_MODE_MSK,
                                               PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_4_BIT_MABC_RXCPGEN_MODE_OFF,
                                               value);
}

static INLINE UINT32 t8_common_field_MABC_RXCPGEN_MODE_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_MABC_RXCPGEN_MODE_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000628 bits 9:0) bits 0:9 use field MABC_RXCPGEN_MODE of register PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_4 */
    reg_value = t8_common_reg_MABC_CONFIG_REG_4_read( b_ptr,
                                                      h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_4_BIT_MABC_RXCPGEN_MODE_MSK) >> PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_4_BIT_MABC_RXCPGEN_MODE_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_MABC_RXCPGEN_MODE_get", value );

    return value;
}
static INLINE void t8_common_field_range_MABC_RXCPGEN_MODE_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_MABC_RXCPGEN_MODE_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_MABC_RXCPGEN_MODE_set", stop_bit, start_bit );
    if (stop_bit > 9) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_MABC_RXCPGEN_MODE_set", stop_bit, 9 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_MABC_RXCPGEN_MODE_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000628 bits 9:0) bits 0:9 use field MABC_RXCPGEN_MODE of register PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 9) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 9;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000628 bits 9:0) bits 0:9 use field MABC_RXCPGEN_MODE of register PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_4 */
        t8_common_reg_MABC_CONFIG_REG_4_field_set( b_ptr,
                                                   h_ptr,
                                                   subfield_mask << (PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_4_BIT_MABC_RXCPGEN_MODE_OFF + subfield_offset),
                                                   PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_4_BIT_MABC_RXCPGEN_MODE_OFF + subfield_offset,
                                                   value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_MABC_RXCPGEN_MODE_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_MABC_RXCPGEN_MODE_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_MABC_RXCPGEN_MODE_get", stop_bit, start_bit );
    if (stop_bit > 9) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_MABC_RXCPGEN_MODE_get", stop_bit, 9 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 9) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 9;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000628 bits 9:0) bits 0:9 use field MABC_RXCPGEN_MODE of register PMC_PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_4 */
    reg_value = t8_common_reg_MABC_CONFIG_REG_4_read( b_ptr,
                                                      h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_4_BIT_MABC_RXCPGEN_MODE_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_4_BIT_MABC_RXCPGEN_MODE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_4_BIT_MABC_RXCPGEN_MODE_MSK, PM20_82_24_COMMON_PCBI_REG_MABC_CONFIG_REG_4_BIT_MABC_RXCPGEN_MODE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_MABC_RXCPGEN_MODE_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_RX_ADAPT_START_1_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_RX_ADAPT_START_1_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_RX_ADAPT_START_1_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_common_field_RX_ADAPT_START_1_set", value );

    /* (0x00000630 bits 7) field RX_ADAPT_START_1 of register PMC_PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4 */
    t8_common_reg_MTSB_CTRLR_CONFIG_REG_4_field_set( b_ptr,
                                                     h_ptr,
                                                     PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_RX_ADAPT_START_1_MSK,
                                                     PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_RX_ADAPT_START_1_OFF,
                                                     value);
}

static INLINE UINT32 t8_common_field_RX_ADAPT_START_1_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_RX_ADAPT_START_1_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000630 bits 7) field RX_ADAPT_START_1 of register PMC_PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4 */
    reg_value = t8_common_reg_MTSB_CTRLR_CONFIG_REG_4_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_RX_ADAPT_START_1_MSK) >> PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_RX_ADAPT_START_1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_RX_ADAPT_START_1_get", value );

    return value;
}
static INLINE void t8_common_field_RX_ADAPT_START_0_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_RX_ADAPT_START_0_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_RX_ADAPT_START_0_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_common_field_RX_ADAPT_START_0_set", value );

    /* (0x00000630 bits 6) field RX_ADAPT_START_0 of register PMC_PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4 */
    t8_common_reg_MTSB_CTRLR_CONFIG_REG_4_field_set( b_ptr,
                                                     h_ptr,
                                                     PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_RX_ADAPT_START_0_MSK,
                                                     PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_RX_ADAPT_START_0_OFF,
                                                     value);
}

static INLINE UINT32 t8_common_field_RX_ADAPT_START_0_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_RX_ADAPT_START_0_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000630 bits 6) field RX_ADAPT_START_0 of register PMC_PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4 */
    reg_value = t8_common_reg_MTSB_CTRLR_CONFIG_REG_4_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_RX_ADAPT_START_0_MSK) >> PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_RX_ADAPT_START_0_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_RX_ADAPT_START_0_get", value );

    return value;
}
static INLINE void t8_common_field_ADC_CALIB_START_1_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_ADC_CALIB_START_1_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_ADC_CALIB_START_1_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_common_field_ADC_CALIB_START_1_set", value );

    /* (0x00000630 bits 5) field ADC_CALIB_START_1 of register PMC_PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4 */
    t8_common_reg_MTSB_CTRLR_CONFIG_REG_4_field_set( b_ptr,
                                                     h_ptr,
                                                     PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_ADC_CALIB_START_1_MSK,
                                                     PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_ADC_CALIB_START_1_OFF,
                                                     value);
}

static INLINE UINT32 t8_common_field_ADC_CALIB_START_1_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_ADC_CALIB_START_1_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000630 bits 5) field ADC_CALIB_START_1 of register PMC_PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4 */
    reg_value = t8_common_reg_MTSB_CTRLR_CONFIG_REG_4_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_ADC_CALIB_START_1_MSK) >> PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_ADC_CALIB_START_1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_ADC_CALIB_START_1_get", value );

    return value;
}
static INLINE void t8_common_field_ADC_CALIB_START_0_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_ADC_CALIB_START_0_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_ADC_CALIB_START_0_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_common_field_ADC_CALIB_START_0_set", value );

    /* (0x00000630 bits 4) field ADC_CALIB_START_0 of register PMC_PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4 */
    t8_common_reg_MTSB_CTRLR_CONFIG_REG_4_field_set( b_ptr,
                                                     h_ptr,
                                                     PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_ADC_CALIB_START_0_MSK,
                                                     PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_ADC_CALIB_START_0_OFF,
                                                     value);
}

static INLINE UINT32 t8_common_field_ADC_CALIB_START_0_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_ADC_CALIB_START_0_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000630 bits 4) field ADC_CALIB_START_0 of register PMC_PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4 */
    reg_value = t8_common_reg_MTSB_CTRLR_CONFIG_REG_4_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_ADC_CALIB_START_0_MSK) >> PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_ADC_CALIB_START_0_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_ADC_CALIB_START_0_get", value );

    return value;
}
static INLINE void t8_common_field_ADAPT_MODE_1_set( t8_common_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_ADAPT_MODE_1_set( t8_common_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_ADAPT_MODE_1_set", value, 3);
    IOLOG( "%s <= 0x%08x", "t8_common_field_ADAPT_MODE_1_set", value );

    /* (0x00000630 bits 3:2) bits 0:1 use field ADAPT_MODE_1 of register PMC_PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4 */
    t8_common_reg_MTSB_CTRLR_CONFIG_REG_4_field_set( b_ptr,
                                                     h_ptr,
                                                     PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_ADAPT_MODE_1_MSK,
                                                     PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_ADAPT_MODE_1_OFF,
                                                     value);
}

static INLINE UINT32 t8_common_field_ADAPT_MODE_1_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_ADAPT_MODE_1_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000630 bits 3:2) bits 0:1 use field ADAPT_MODE_1 of register PMC_PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4 */
    reg_value = t8_common_reg_MTSB_CTRLR_CONFIG_REG_4_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_ADAPT_MODE_1_MSK) >> PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_ADAPT_MODE_1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_ADAPT_MODE_1_get", value );

    return value;
}
static INLINE void t8_common_field_range_ADAPT_MODE_1_set( t8_common_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_ADAPT_MODE_1_set( t8_common_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_ADAPT_MODE_1_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_ADAPT_MODE_1_set", stop_bit, 1 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_ADAPT_MODE_1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000630 bits 3:2) bits 0:1 use field ADAPT_MODE_1 of register PMC_PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000630 bits 3:2) bits 0:1 use field ADAPT_MODE_1 of register PMC_PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4 */
        t8_common_reg_MTSB_CTRLR_CONFIG_REG_4_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_ADAPT_MODE_1_OFF + subfield_offset),
                                                         PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_ADAPT_MODE_1_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_ADAPT_MODE_1_get( t8_common_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_ADAPT_MODE_1_get( t8_common_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_ADAPT_MODE_1_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_ADAPT_MODE_1_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000630 bits 3:2) bits 0:1 use field ADAPT_MODE_1 of register PMC_PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4 */
    reg_value = t8_common_reg_MTSB_CTRLR_CONFIG_REG_4_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_ADAPT_MODE_1_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_ADAPT_MODE_1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_ADAPT_MODE_1_MSK, PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_ADAPT_MODE_1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_ADAPT_MODE_1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_ADAPT_MODE_0_set( t8_common_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_ADAPT_MODE_0_set( t8_common_buffer_t *b_ptr,
                                                     t8_handle_t *h_ptr,
                                                     UINT32 value )
{
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_ADAPT_MODE_0_set", value, 3);
    IOLOG( "%s <= 0x%08x", "t8_common_field_ADAPT_MODE_0_set", value );

    /* (0x00000630 bits 1:0) bits 0:1 use field ADAPT_MODE_0 of register PMC_PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4 */
    t8_common_reg_MTSB_CTRLR_CONFIG_REG_4_field_set( b_ptr,
                                                     h_ptr,
                                                     PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_ADAPT_MODE_0_MSK,
                                                     PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_ADAPT_MODE_0_OFF,
                                                     value);
}

static INLINE UINT32 t8_common_field_ADAPT_MODE_0_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_ADAPT_MODE_0_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000630 bits 1:0) bits 0:1 use field ADAPT_MODE_0 of register PMC_PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4 */
    reg_value = t8_common_reg_MTSB_CTRLR_CONFIG_REG_4_read( b_ptr,
                                                            h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_ADAPT_MODE_0_MSK) >> PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_ADAPT_MODE_0_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_ADAPT_MODE_0_get", value );

    return value;
}
static INLINE void t8_common_field_range_ADAPT_MODE_0_set( t8_common_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_ADAPT_MODE_0_set( t8_common_buffer_t *b_ptr,
                                                           t8_handle_t *h_ptr,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_ADAPT_MODE_0_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_ADAPT_MODE_0_set", stop_bit, 1 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_ADAPT_MODE_0_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000630 bits 1:0) bits 0:1 use field ADAPT_MODE_0 of register PMC_PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000630 bits 1:0) bits 0:1 use field ADAPT_MODE_0 of register PMC_PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4 */
        t8_common_reg_MTSB_CTRLR_CONFIG_REG_4_field_set( b_ptr,
                                                         h_ptr,
                                                         subfield_mask << (PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_ADAPT_MODE_0_OFF + subfield_offset),
                                                         PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_ADAPT_MODE_0_OFF + subfield_offset,
                                                         value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_ADAPT_MODE_0_get( t8_common_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_ADAPT_MODE_0_get( t8_common_buffer_t *b_ptr,
                                                             t8_handle_t *h_ptr,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_ADAPT_MODE_0_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_ADAPT_MODE_0_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000630 bits 1:0) bits 0:1 use field ADAPT_MODE_0 of register PMC_PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4 */
    reg_value = t8_common_reg_MTSB_CTRLR_CONFIG_REG_4_read( b_ptr,
                                                            h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_ADAPT_MODE_0_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_ADAPT_MODE_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_ADAPT_MODE_0_MSK, PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_CONFIG_REG_4_BIT_ADAPT_MODE_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_ADAPT_MODE_0_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_5_set( t8_common_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_5_set( t8_common_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_5_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_5_set", value );

    /* (0x0000064c bits 29:25) bits 0:4 use field AMP_THR_TABLE_5 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_1_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_5_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_5_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_5_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_5_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000064c bits 29:25) bits 0:4 use field AMP_THR_TABLE_5 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_1_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_5_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_5_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_5_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_5_set( t8_common_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_5_set( t8_common_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_5_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_5_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_5_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000064c bits 29:25) bits 0:4 use field AMP_THR_TABLE_5 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000064c bits 29:25) bits 0:4 use field AMP_THR_TABLE_5 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_1_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_5_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_5_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_5_get( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_5_get( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_5_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_5_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000064c bits 29:25) bits 0:4 use field AMP_THR_TABLE_5 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_1_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_5_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_5_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_5_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_5_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_5_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_4_set( t8_common_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_4_set( t8_common_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_4_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_4_set", value );

    /* (0x0000064c bits 24:20) bits 0:4 use field AMP_THR_TABLE_4 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_1_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_4_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_4_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_4_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_4_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000064c bits 24:20) bits 0:4 use field AMP_THR_TABLE_4 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_1_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_4_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_4_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_4_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_4_set( t8_common_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_4_set( t8_common_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_4_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_4_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_4_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000064c bits 24:20) bits 0:4 use field AMP_THR_TABLE_4 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000064c bits 24:20) bits 0:4 use field AMP_THR_TABLE_4 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_1_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_4_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_4_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_4_get( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_4_get( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_4_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_4_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000064c bits 24:20) bits 0:4 use field AMP_THR_TABLE_4 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_1_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_4_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_4_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_4_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_4_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_4_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_3_set( t8_common_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_3_set( t8_common_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_3_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_3_set", value );

    /* (0x0000064c bits 19:15) bits 0:4 use field AMP_THR_TABLE_3 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_1_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_3_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_3_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_3_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_3_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000064c bits 19:15) bits 0:4 use field AMP_THR_TABLE_3 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_1_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_3_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_3_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_3_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_3_set( t8_common_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_3_set( t8_common_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_3_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_3_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_3_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000064c bits 19:15) bits 0:4 use field AMP_THR_TABLE_3 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000064c bits 19:15) bits 0:4 use field AMP_THR_TABLE_3 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_1_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_3_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_3_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_3_get( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_3_get( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_3_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_3_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000064c bits 19:15) bits 0:4 use field AMP_THR_TABLE_3 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_1_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_3_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_3_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_3_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_2_set( t8_common_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_2_set( t8_common_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_2_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_2_set", value );

    /* (0x0000064c bits 14:10) bits 0:4 use field AMP_THR_TABLE_2 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_1_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_2_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_2_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_2_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_2_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000064c bits 14:10) bits 0:4 use field AMP_THR_TABLE_2 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_1_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_2_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_2_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_2_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_2_set( t8_common_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_2_set( t8_common_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_2_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_2_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_2_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000064c bits 14:10) bits 0:4 use field AMP_THR_TABLE_2 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000064c bits 14:10) bits 0:4 use field AMP_THR_TABLE_2 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_1_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_2_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_2_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_2_get( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_2_get( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_2_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_2_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000064c bits 14:10) bits 0:4 use field AMP_THR_TABLE_2 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_1_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_2_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_2_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_2_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_1_set( t8_common_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_1_set( t8_common_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_1_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_1_set", value );

    /* (0x0000064c bits 9:5) bits 0:4 use field AMP_THR_TABLE_1 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_1_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_1_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_1_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_1_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_1_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000064c bits 9:5) bits 0:4 use field AMP_THR_TABLE_1 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_1_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_1_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_1_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_1_set( t8_common_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_1_set( t8_common_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_1_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_1_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_1_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000064c bits 9:5) bits 0:4 use field AMP_THR_TABLE_1 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000064c bits 9:5) bits 0:4 use field AMP_THR_TABLE_1 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_1_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_1_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_1_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_1_get( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_1_get( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_1_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_1_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000064c bits 9:5) bits 0:4 use field AMP_THR_TABLE_1 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_1_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_1_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_1_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_1_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_0_set( t8_common_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_0_set( t8_common_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_0_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_0_set", value );

    /* (0x0000064c bits 4:0) bits 0:4 use field AMP_THR_TABLE_0 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_1_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_0_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_0_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_0_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_0_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000064c bits 4:0) bits 0:4 use field AMP_THR_TABLE_0 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_1_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_0_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_0_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_0_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_0_set( t8_common_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_0_set( t8_common_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_0_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_0_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_0_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000064c bits 4:0) bits 0:4 use field AMP_THR_TABLE_0 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000064c bits 4:0) bits 0:4 use field AMP_THR_TABLE_0 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_1_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_0_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_0_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_0_get( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_0_get( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_0_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_0_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000064c bits 4:0) bits 0:4 use field AMP_THR_TABLE_0 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_1_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_0_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_0_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_1_BIT_AMP_THR_TABLE_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_0_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_11_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_11_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_11_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_11_set", value );

    /* (0x00000650 bits 29:25) bits 0:4 use field AMP_THR_TABLE_11 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_2_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_11_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_11_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_11_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_11_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000650 bits 29:25) bits 0:4 use field AMP_THR_TABLE_11 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_2_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_11_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_11_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_11_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_11_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_11_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_11_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_11_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_11_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000650 bits 29:25) bits 0:4 use field AMP_THR_TABLE_11 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000650 bits 29:25) bits 0:4 use field AMP_THR_TABLE_11 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_2_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_11_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_11_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_11_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_11_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_11_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_11_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000650 bits 29:25) bits 0:4 use field AMP_THR_TABLE_11 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_2_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_11_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_11_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_11_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_11_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_11_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_10_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_10_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_10_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_10_set", value );

    /* (0x00000650 bits 24:20) bits 0:4 use field AMP_THR_TABLE_10 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_2_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_10_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_10_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_10_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_10_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000650 bits 24:20) bits 0:4 use field AMP_THR_TABLE_10 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_2_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_10_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_10_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_10_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_10_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_10_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_10_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_10_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_10_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000650 bits 24:20) bits 0:4 use field AMP_THR_TABLE_10 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000650 bits 24:20) bits 0:4 use field AMP_THR_TABLE_10 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_2_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_10_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_10_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_10_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_10_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_10_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_10_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000650 bits 24:20) bits 0:4 use field AMP_THR_TABLE_10 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_2_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_10_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_10_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_10_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_10_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_10_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_9_set( t8_common_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_9_set( t8_common_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_9_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_9_set", value );

    /* (0x00000650 bits 19:15) bits 0:4 use field AMP_THR_TABLE_9 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_2_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_9_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_9_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_9_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_9_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000650 bits 19:15) bits 0:4 use field AMP_THR_TABLE_9 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_2_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_9_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_9_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_9_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_9_set( t8_common_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_9_set( t8_common_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_9_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_9_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_9_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000650 bits 19:15) bits 0:4 use field AMP_THR_TABLE_9 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000650 bits 19:15) bits 0:4 use field AMP_THR_TABLE_9 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_2_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_9_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_9_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_9_get( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_9_get( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_9_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_9_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000650 bits 19:15) bits 0:4 use field AMP_THR_TABLE_9 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_2_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_9_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_9_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_9_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_9_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_9_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_8_set( t8_common_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_8_set( t8_common_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_8_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_8_set", value );

    /* (0x00000650 bits 14:10) bits 0:4 use field AMP_THR_TABLE_8 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_2_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_8_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_8_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_8_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_8_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000650 bits 14:10) bits 0:4 use field AMP_THR_TABLE_8 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_2_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_8_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_8_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_8_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_8_set( t8_common_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_8_set( t8_common_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_8_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_8_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_8_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000650 bits 14:10) bits 0:4 use field AMP_THR_TABLE_8 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000650 bits 14:10) bits 0:4 use field AMP_THR_TABLE_8 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_2_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_8_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_8_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_8_get( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_8_get( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_8_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_8_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000650 bits 14:10) bits 0:4 use field AMP_THR_TABLE_8 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_2_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_8_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_8_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_8_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_8_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_8_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_7_set( t8_common_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_7_set( t8_common_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_7_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_7_set", value );

    /* (0x00000650 bits 9:5) bits 0:4 use field AMP_THR_TABLE_7 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_2_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_7_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_7_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_7_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_7_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000650 bits 9:5) bits 0:4 use field AMP_THR_TABLE_7 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_2_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_7_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_7_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_7_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_7_set( t8_common_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_7_set( t8_common_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_7_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_7_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_7_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000650 bits 9:5) bits 0:4 use field AMP_THR_TABLE_7 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000650 bits 9:5) bits 0:4 use field AMP_THR_TABLE_7 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_2_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_7_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_7_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_7_get( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_7_get( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_7_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_7_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000650 bits 9:5) bits 0:4 use field AMP_THR_TABLE_7 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_2_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_7_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_7_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_7_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_7_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_7_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_6_set( t8_common_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_6_set( t8_common_buffer_t *b_ptr,
                                                        t8_handle_t *h_ptr,
                                                        UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_6_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_6_set", value );

    /* (0x00000650 bits 4:0) bits 0:4 use field AMP_THR_TABLE_6 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_2_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_6_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_6_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_6_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_6_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000650 bits 4:0) bits 0:4 use field AMP_THR_TABLE_6 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_2_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_6_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_6_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_6_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_6_set( t8_common_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_6_set( t8_common_buffer_t *b_ptr,
                                                              t8_handle_t *h_ptr,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit,
                                                              UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_6_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_6_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_6_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000650 bits 4:0) bits 0:4 use field AMP_THR_TABLE_6 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000650 bits 4:0) bits 0:4 use field AMP_THR_TABLE_6 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_2_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_6_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_6_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_6_get( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_6_get( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_6_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_6_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000650 bits 4:0) bits 0:4 use field AMP_THR_TABLE_6 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_2_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_6_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_6_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_6_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_2_BIT_AMP_THR_TABLE_6_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_6_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_17_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_17_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_17_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_17_set", value );

    /* (0x00000654 bits 29:25) bits 0:4 use field AMP_THR_TABLE_17 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_3_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_17_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_17_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_17_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_17_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000654 bits 29:25) bits 0:4 use field AMP_THR_TABLE_17 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_3_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_17_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_17_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_17_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_17_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_17_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_17_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_17_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_17_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000654 bits 29:25) bits 0:4 use field AMP_THR_TABLE_17 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000654 bits 29:25) bits 0:4 use field AMP_THR_TABLE_17 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_3_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_17_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_17_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_17_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_17_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_17_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_17_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000654 bits 29:25) bits 0:4 use field AMP_THR_TABLE_17 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_3_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_17_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_17_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_17_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_17_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_17_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_16_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_16_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_16_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_16_set", value );

    /* (0x00000654 bits 24:20) bits 0:4 use field AMP_THR_TABLE_16 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_3_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_16_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_16_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_16_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_16_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000654 bits 24:20) bits 0:4 use field AMP_THR_TABLE_16 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_3_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_16_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_16_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_16_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_16_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_16_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_16_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_16_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_16_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000654 bits 24:20) bits 0:4 use field AMP_THR_TABLE_16 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000654 bits 24:20) bits 0:4 use field AMP_THR_TABLE_16 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_3_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_16_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_16_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_16_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_16_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_16_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_16_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000654 bits 24:20) bits 0:4 use field AMP_THR_TABLE_16 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_3_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_16_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_16_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_16_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_16_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_16_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_15_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_15_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_15_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_15_set", value );

    /* (0x00000654 bits 19:15) bits 0:4 use field AMP_THR_TABLE_15 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_3_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_15_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_15_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_15_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_15_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000654 bits 19:15) bits 0:4 use field AMP_THR_TABLE_15 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_3_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_15_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_15_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_15_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_15_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_15_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_15_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_15_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_15_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000654 bits 19:15) bits 0:4 use field AMP_THR_TABLE_15 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000654 bits 19:15) bits 0:4 use field AMP_THR_TABLE_15 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_3_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_15_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_15_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_15_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_15_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_15_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_15_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000654 bits 19:15) bits 0:4 use field AMP_THR_TABLE_15 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_3_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_15_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_15_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_15_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_15_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_15_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_14_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_14_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_14_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_14_set", value );

    /* (0x00000654 bits 14:10) bits 0:4 use field AMP_THR_TABLE_14 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_3_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_14_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_14_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_14_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_14_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000654 bits 14:10) bits 0:4 use field AMP_THR_TABLE_14 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_3_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_14_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_14_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_14_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_14_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_14_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_14_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_14_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_14_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000654 bits 14:10) bits 0:4 use field AMP_THR_TABLE_14 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000654 bits 14:10) bits 0:4 use field AMP_THR_TABLE_14 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_3_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_14_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_14_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_14_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_14_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_14_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_14_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000654 bits 14:10) bits 0:4 use field AMP_THR_TABLE_14 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_3_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_14_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_14_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_14_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_14_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_14_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_13_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_13_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_13_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_13_set", value );

    /* (0x00000654 bits 9:5) bits 0:4 use field AMP_THR_TABLE_13 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_3_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_13_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_13_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_13_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_13_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000654 bits 9:5) bits 0:4 use field AMP_THR_TABLE_13 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_3_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_13_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_13_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_13_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_13_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_13_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_13_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_13_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_13_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000654 bits 9:5) bits 0:4 use field AMP_THR_TABLE_13 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000654 bits 9:5) bits 0:4 use field AMP_THR_TABLE_13 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_3_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_13_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_13_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_13_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_13_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_13_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_13_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000654 bits 9:5) bits 0:4 use field AMP_THR_TABLE_13 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_3_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_13_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_13_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_13_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_13_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_13_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_12_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_12_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_12_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_12_set", value );

    /* (0x00000654 bits 4:0) bits 0:4 use field AMP_THR_TABLE_12 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_3_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_12_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_12_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_12_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_12_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000654 bits 4:0) bits 0:4 use field AMP_THR_TABLE_12 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_3_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_12_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_12_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_12_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_12_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_12_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_12_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_12_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_12_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000654 bits 4:0) bits 0:4 use field AMP_THR_TABLE_12 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000654 bits 4:0) bits 0:4 use field AMP_THR_TABLE_12 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_3_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_12_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_12_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_12_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_12_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_12_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_12_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000654 bits 4:0) bits 0:4 use field AMP_THR_TABLE_12 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_3_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_12_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_12_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_12_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_3_BIT_AMP_THR_TABLE_12_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_12_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_23_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_23_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_23_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_23_set", value );

    /* (0x00000658 bits 29:25) bits 0:4 use field AMP_THR_TABLE_23 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_4_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_23_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_23_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_23_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_23_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000658 bits 29:25) bits 0:4 use field AMP_THR_TABLE_23 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_4_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_23_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_23_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_23_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_23_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_23_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_23_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_23_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_23_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000658 bits 29:25) bits 0:4 use field AMP_THR_TABLE_23 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000658 bits 29:25) bits 0:4 use field AMP_THR_TABLE_23 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_4_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_23_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_23_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_23_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_23_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_23_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_23_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000658 bits 29:25) bits 0:4 use field AMP_THR_TABLE_23 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_4_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_23_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_23_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_23_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_23_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_23_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_22_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_22_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_22_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_22_set", value );

    /* (0x00000658 bits 24:20) bits 0:4 use field AMP_THR_TABLE_22 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_4_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_22_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_22_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_22_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_22_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000658 bits 24:20) bits 0:4 use field AMP_THR_TABLE_22 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_4_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_22_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_22_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_22_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_22_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_22_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_22_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_22_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_22_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000658 bits 24:20) bits 0:4 use field AMP_THR_TABLE_22 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000658 bits 24:20) bits 0:4 use field AMP_THR_TABLE_22 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_4_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_22_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_22_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_22_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_22_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_22_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_22_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000658 bits 24:20) bits 0:4 use field AMP_THR_TABLE_22 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_4_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_22_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_22_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_22_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_22_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_22_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_21_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_21_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_21_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_21_set", value );

    /* (0x00000658 bits 19:15) bits 0:4 use field AMP_THR_TABLE_21 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_4_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_21_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_21_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_21_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_21_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000658 bits 19:15) bits 0:4 use field AMP_THR_TABLE_21 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_4_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_21_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_21_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_21_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_21_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_21_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_21_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_21_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_21_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000658 bits 19:15) bits 0:4 use field AMP_THR_TABLE_21 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000658 bits 19:15) bits 0:4 use field AMP_THR_TABLE_21 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_4_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_21_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_21_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_21_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_21_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_21_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_21_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000658 bits 19:15) bits 0:4 use field AMP_THR_TABLE_21 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_4_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_21_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_21_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_21_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_21_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_21_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_20_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_20_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_20_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_20_set", value );

    /* (0x00000658 bits 14:10) bits 0:4 use field AMP_THR_TABLE_20 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_4_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_20_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_20_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_20_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_20_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000658 bits 14:10) bits 0:4 use field AMP_THR_TABLE_20 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_4_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_20_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_20_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_20_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_20_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_20_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_20_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_20_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_20_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000658 bits 14:10) bits 0:4 use field AMP_THR_TABLE_20 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000658 bits 14:10) bits 0:4 use field AMP_THR_TABLE_20 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_4_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_20_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_20_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_20_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_20_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_20_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_20_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000658 bits 14:10) bits 0:4 use field AMP_THR_TABLE_20 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_4_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_20_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_20_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_20_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_20_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_20_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_19_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_19_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_19_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_19_set", value );

    /* (0x00000658 bits 9:5) bits 0:4 use field AMP_THR_TABLE_19 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_4_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_19_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_19_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_19_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_19_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000658 bits 9:5) bits 0:4 use field AMP_THR_TABLE_19 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_4_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_19_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_19_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_19_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_19_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_19_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_19_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_19_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_19_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000658 bits 9:5) bits 0:4 use field AMP_THR_TABLE_19 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000658 bits 9:5) bits 0:4 use field AMP_THR_TABLE_19 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_4_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_19_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_19_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_19_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_19_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_19_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_19_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000658 bits 9:5) bits 0:4 use field AMP_THR_TABLE_19 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_4_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_19_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_19_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_19_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_19_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_19_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_18_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_18_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_18_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_18_set", value );

    /* (0x00000658 bits 4:0) bits 0:4 use field AMP_THR_TABLE_18 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_4_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_18_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_18_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_18_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_18_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000658 bits 4:0) bits 0:4 use field AMP_THR_TABLE_18 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_4_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_18_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_18_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_18_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_18_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_18_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_18_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_18_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_18_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000658 bits 4:0) bits 0:4 use field AMP_THR_TABLE_18 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000658 bits 4:0) bits 0:4 use field AMP_THR_TABLE_18 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_4_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_18_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_18_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_18_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_18_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_18_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_18_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000658 bits 4:0) bits 0:4 use field AMP_THR_TABLE_18 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_4_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_18_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_18_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_18_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_4_BIT_AMP_THR_TABLE_18_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_18_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_29_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_29_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_29_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_29_set", value );

    /* (0x0000065c bits 29:25) bits 0:4 use field AMP_THR_TABLE_29 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_5_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_29_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_29_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_29_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_29_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000065c bits 29:25) bits 0:4 use field AMP_THR_TABLE_29 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_5_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_29_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_29_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_29_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_29_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_29_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_29_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_29_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_29_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000065c bits 29:25) bits 0:4 use field AMP_THR_TABLE_29 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000065c bits 29:25) bits 0:4 use field AMP_THR_TABLE_29 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_5_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_29_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_29_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_29_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_29_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_29_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_29_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000065c bits 29:25) bits 0:4 use field AMP_THR_TABLE_29 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_5_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_29_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_29_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_29_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_29_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_29_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_28_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_28_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_28_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_28_set", value );

    /* (0x0000065c bits 24:20) bits 0:4 use field AMP_THR_TABLE_28 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_5_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_28_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_28_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_28_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_28_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000065c bits 24:20) bits 0:4 use field AMP_THR_TABLE_28 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_5_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_28_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_28_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_28_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_28_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_28_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_28_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_28_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_28_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000065c bits 24:20) bits 0:4 use field AMP_THR_TABLE_28 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000065c bits 24:20) bits 0:4 use field AMP_THR_TABLE_28 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_5_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_28_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_28_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_28_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_28_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_28_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_28_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000065c bits 24:20) bits 0:4 use field AMP_THR_TABLE_28 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_5_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_28_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_28_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_28_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_28_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_28_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_27_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_27_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_27_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_27_set", value );

    /* (0x0000065c bits 19:15) bits 0:4 use field AMP_THR_TABLE_27 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_5_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_27_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_27_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_27_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_27_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000065c bits 19:15) bits 0:4 use field AMP_THR_TABLE_27 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_5_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_27_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_27_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_27_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_27_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_27_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_27_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_27_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_27_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000065c bits 19:15) bits 0:4 use field AMP_THR_TABLE_27 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000065c bits 19:15) bits 0:4 use field AMP_THR_TABLE_27 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_5_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_27_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_27_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_27_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_27_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_27_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_27_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000065c bits 19:15) bits 0:4 use field AMP_THR_TABLE_27 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_5_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_27_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_27_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_27_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_27_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_27_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_26_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_26_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_26_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_26_set", value );

    /* (0x0000065c bits 14:10) bits 0:4 use field AMP_THR_TABLE_26 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_5_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_26_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_26_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_26_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_26_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000065c bits 14:10) bits 0:4 use field AMP_THR_TABLE_26 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_5_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_26_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_26_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_26_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_26_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_26_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_26_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_26_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_26_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000065c bits 14:10) bits 0:4 use field AMP_THR_TABLE_26 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000065c bits 14:10) bits 0:4 use field AMP_THR_TABLE_26 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_5_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_26_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_26_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_26_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_26_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_26_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_26_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000065c bits 14:10) bits 0:4 use field AMP_THR_TABLE_26 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_5_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_26_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_26_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_26_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_26_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_26_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_25_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_25_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_25_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_25_set", value );

    /* (0x0000065c bits 9:5) bits 0:4 use field AMP_THR_TABLE_25 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_5_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_25_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_25_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_25_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_25_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000065c bits 9:5) bits 0:4 use field AMP_THR_TABLE_25 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_5_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_25_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_25_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_25_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_25_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_25_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_25_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_25_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_25_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000065c bits 9:5) bits 0:4 use field AMP_THR_TABLE_25 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000065c bits 9:5) bits 0:4 use field AMP_THR_TABLE_25 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_5_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_25_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_25_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_25_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_25_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_25_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_25_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000065c bits 9:5) bits 0:4 use field AMP_THR_TABLE_25 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_5_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_25_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_25_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_25_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_25_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_25_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_24_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_24_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_24_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_24_set", value );

    /* (0x0000065c bits 4:0) bits 0:4 use field AMP_THR_TABLE_24 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_5_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_24_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_24_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_24_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_24_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000065c bits 4:0) bits 0:4 use field AMP_THR_TABLE_24 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_5_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_24_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_24_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_24_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_24_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_24_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_24_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_24_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_24_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000065c bits 4:0) bits 0:4 use field AMP_THR_TABLE_24 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000065c bits 4:0) bits 0:4 use field AMP_THR_TABLE_24 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_5_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_24_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_24_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_24_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_24_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_24_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_24_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000065c bits 4:0) bits 0:4 use field AMP_THR_TABLE_24 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_5_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_24_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_24_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_24_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_5_BIT_AMP_THR_TABLE_24_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_24_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_35_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_35_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_35_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_35_set", value );

    /* (0x00000660 bits 29:25) bits 0:4 use field AMP_THR_TABLE_35 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_6_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_35_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_35_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_35_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_35_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000660 bits 29:25) bits 0:4 use field AMP_THR_TABLE_35 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_6_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_35_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_35_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_35_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_35_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_35_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_35_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_35_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_35_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000660 bits 29:25) bits 0:4 use field AMP_THR_TABLE_35 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000660 bits 29:25) bits 0:4 use field AMP_THR_TABLE_35 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_6_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_35_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_35_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_35_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_35_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_35_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_35_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000660 bits 29:25) bits 0:4 use field AMP_THR_TABLE_35 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_6_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_35_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_35_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_35_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_35_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_35_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_34_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_34_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_34_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_34_set", value );

    /* (0x00000660 bits 24:20) bits 0:4 use field AMP_THR_TABLE_34 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_6_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_34_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_34_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_34_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_34_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000660 bits 24:20) bits 0:4 use field AMP_THR_TABLE_34 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_6_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_34_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_34_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_34_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_34_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_34_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_34_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_34_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_34_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000660 bits 24:20) bits 0:4 use field AMP_THR_TABLE_34 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000660 bits 24:20) bits 0:4 use field AMP_THR_TABLE_34 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_6_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_34_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_34_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_34_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_34_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_34_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_34_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000660 bits 24:20) bits 0:4 use field AMP_THR_TABLE_34 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_6_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_34_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_34_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_34_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_34_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_34_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_33_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_33_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_33_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_33_set", value );

    /* (0x00000660 bits 19:15) bits 0:4 use field AMP_THR_TABLE_33 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_6_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_33_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_33_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_33_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_33_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000660 bits 19:15) bits 0:4 use field AMP_THR_TABLE_33 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_6_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_33_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_33_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_33_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_33_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_33_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_33_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_33_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_33_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000660 bits 19:15) bits 0:4 use field AMP_THR_TABLE_33 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000660 bits 19:15) bits 0:4 use field AMP_THR_TABLE_33 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_6_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_33_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_33_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_33_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_33_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_33_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_33_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000660 bits 19:15) bits 0:4 use field AMP_THR_TABLE_33 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_6_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_33_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_33_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_33_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_33_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_33_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_32_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_32_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_32_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_32_set", value );

    /* (0x00000660 bits 14:10) bits 0:4 use field AMP_THR_TABLE_32 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_6_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_32_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_32_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_32_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_32_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000660 bits 14:10) bits 0:4 use field AMP_THR_TABLE_32 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_6_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_32_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_32_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_32_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_32_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_32_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_32_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_32_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_32_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000660 bits 14:10) bits 0:4 use field AMP_THR_TABLE_32 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000660 bits 14:10) bits 0:4 use field AMP_THR_TABLE_32 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_6_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_32_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_32_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_32_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_32_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_32_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_32_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000660 bits 14:10) bits 0:4 use field AMP_THR_TABLE_32 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_6_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_32_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_32_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_32_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_32_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_32_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_31_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_31_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_31_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_31_set", value );

    /* (0x00000660 bits 9:5) bits 0:4 use field AMP_THR_TABLE_31 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_6_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_31_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_31_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_31_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_31_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000660 bits 9:5) bits 0:4 use field AMP_THR_TABLE_31 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_6_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_31_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_31_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_31_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_31_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_31_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_31_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_31_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_31_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000660 bits 9:5) bits 0:4 use field AMP_THR_TABLE_31 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000660 bits 9:5) bits 0:4 use field AMP_THR_TABLE_31 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_6_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_31_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_31_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_31_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_31_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_31_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_31_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000660 bits 9:5) bits 0:4 use field AMP_THR_TABLE_31 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_6_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_31_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_31_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_31_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_31_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_31_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_30_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_30_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_30_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_30_set", value );

    /* (0x00000660 bits 4:0) bits 0:4 use field AMP_THR_TABLE_30 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_6_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_30_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_30_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_30_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_30_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000660 bits 4:0) bits 0:4 use field AMP_THR_TABLE_30 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_6_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_30_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_30_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_30_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_30_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_30_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_30_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_30_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_30_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000660 bits 4:0) bits 0:4 use field AMP_THR_TABLE_30 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000660 bits 4:0) bits 0:4 use field AMP_THR_TABLE_30 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_6_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_30_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_30_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_30_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_30_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_30_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_30_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000660 bits 4:0) bits 0:4 use field AMP_THR_TABLE_30 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_6_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_30_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_30_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_30_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_6_BIT_AMP_THR_TABLE_30_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_30_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_41_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_41_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_41_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_41_set", value );

    /* (0x00000664 bits 29:25) bits 0:4 use field AMP_THR_TABLE_41 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_7_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_41_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_41_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_41_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_41_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000664 bits 29:25) bits 0:4 use field AMP_THR_TABLE_41 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_7_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_41_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_41_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_41_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_41_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_41_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_41_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_41_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_41_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000664 bits 29:25) bits 0:4 use field AMP_THR_TABLE_41 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000664 bits 29:25) bits 0:4 use field AMP_THR_TABLE_41 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_7_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_41_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_41_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_41_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_41_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_41_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_41_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000664 bits 29:25) bits 0:4 use field AMP_THR_TABLE_41 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_7_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_41_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_41_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_41_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_41_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_41_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_40_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_40_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_40_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_40_set", value );

    /* (0x00000664 bits 24:20) bits 0:4 use field AMP_THR_TABLE_40 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_7_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_40_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_40_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_40_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_40_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000664 bits 24:20) bits 0:4 use field AMP_THR_TABLE_40 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_7_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_40_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_40_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_40_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_40_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_40_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_40_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_40_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_40_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000664 bits 24:20) bits 0:4 use field AMP_THR_TABLE_40 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000664 bits 24:20) bits 0:4 use field AMP_THR_TABLE_40 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_7_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_40_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_40_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_40_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_40_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_40_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_40_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000664 bits 24:20) bits 0:4 use field AMP_THR_TABLE_40 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_7_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_40_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_40_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_40_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_40_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_40_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_39_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_39_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_39_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_39_set", value );

    /* (0x00000664 bits 19:15) bits 0:4 use field AMP_THR_TABLE_39 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_7_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_39_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_39_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_39_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_39_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000664 bits 19:15) bits 0:4 use field AMP_THR_TABLE_39 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_7_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_39_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_39_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_39_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_39_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_39_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_39_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_39_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_39_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000664 bits 19:15) bits 0:4 use field AMP_THR_TABLE_39 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000664 bits 19:15) bits 0:4 use field AMP_THR_TABLE_39 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_7_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_39_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_39_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_39_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_39_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_39_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_39_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000664 bits 19:15) bits 0:4 use field AMP_THR_TABLE_39 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_7_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_39_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_39_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_39_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_39_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_39_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_38_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_38_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_38_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_38_set", value );

    /* (0x00000664 bits 14:10) bits 0:4 use field AMP_THR_TABLE_38 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_7_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_38_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_38_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_38_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_38_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000664 bits 14:10) bits 0:4 use field AMP_THR_TABLE_38 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_7_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_38_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_38_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_38_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_38_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_38_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_38_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_38_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_38_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000664 bits 14:10) bits 0:4 use field AMP_THR_TABLE_38 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000664 bits 14:10) bits 0:4 use field AMP_THR_TABLE_38 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_7_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_38_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_38_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_38_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_38_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_38_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_38_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000664 bits 14:10) bits 0:4 use field AMP_THR_TABLE_38 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_7_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_38_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_38_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_38_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_38_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_38_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_37_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_37_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_37_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_37_set", value );

    /* (0x00000664 bits 9:5) bits 0:4 use field AMP_THR_TABLE_37 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_7_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_37_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_37_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_37_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_37_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000664 bits 9:5) bits 0:4 use field AMP_THR_TABLE_37 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_7_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_37_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_37_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_37_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_37_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_37_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_37_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_37_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_37_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000664 bits 9:5) bits 0:4 use field AMP_THR_TABLE_37 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000664 bits 9:5) bits 0:4 use field AMP_THR_TABLE_37 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_7_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_37_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_37_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_37_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_37_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_37_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_37_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000664 bits 9:5) bits 0:4 use field AMP_THR_TABLE_37 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_7_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_37_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_37_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_37_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_37_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_37_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_36_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_36_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_36_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_36_set", value );

    /* (0x00000664 bits 4:0) bits 0:4 use field AMP_THR_TABLE_36 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_7_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_36_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_36_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_36_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_36_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000664 bits 4:0) bits 0:4 use field AMP_THR_TABLE_36 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_7_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_36_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_36_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_36_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_36_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_36_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_36_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_36_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_36_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000664 bits 4:0) bits 0:4 use field AMP_THR_TABLE_36 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000664 bits 4:0) bits 0:4 use field AMP_THR_TABLE_36 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_7_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_36_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_36_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_36_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_36_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_36_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_36_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000664 bits 4:0) bits 0:4 use field AMP_THR_TABLE_36 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_7_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_36_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_36_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_36_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_7_BIT_AMP_THR_TABLE_36_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_36_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_47_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_47_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_47_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_47_set", value );

    /* (0x00000668 bits 29:25) bits 0:4 use field AMP_THR_TABLE_47 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_8_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_47_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_47_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_47_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_47_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000668 bits 29:25) bits 0:4 use field AMP_THR_TABLE_47 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_8_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_47_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_47_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_47_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_47_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_47_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_47_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_47_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_47_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000668 bits 29:25) bits 0:4 use field AMP_THR_TABLE_47 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000668 bits 29:25) bits 0:4 use field AMP_THR_TABLE_47 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_8_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_47_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_47_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_47_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_47_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_47_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_47_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000668 bits 29:25) bits 0:4 use field AMP_THR_TABLE_47 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_8_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_47_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_47_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_47_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_47_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_47_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_46_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_46_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_46_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_46_set", value );

    /* (0x00000668 bits 24:20) bits 0:4 use field AMP_THR_TABLE_46 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_8_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_46_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_46_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_46_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_46_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000668 bits 24:20) bits 0:4 use field AMP_THR_TABLE_46 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_8_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_46_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_46_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_46_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_46_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_46_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_46_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_46_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_46_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000668 bits 24:20) bits 0:4 use field AMP_THR_TABLE_46 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000668 bits 24:20) bits 0:4 use field AMP_THR_TABLE_46 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_8_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_46_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_46_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_46_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_46_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_46_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_46_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000668 bits 24:20) bits 0:4 use field AMP_THR_TABLE_46 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_8_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_46_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_46_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_46_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_46_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_46_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_45_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_45_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_45_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_45_set", value );

    /* (0x00000668 bits 19:15) bits 0:4 use field AMP_THR_TABLE_45 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_8_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_45_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_45_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_45_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_45_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000668 bits 19:15) bits 0:4 use field AMP_THR_TABLE_45 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_8_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_45_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_45_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_45_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_45_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_45_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_45_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_45_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_45_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000668 bits 19:15) bits 0:4 use field AMP_THR_TABLE_45 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000668 bits 19:15) bits 0:4 use field AMP_THR_TABLE_45 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_8_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_45_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_45_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_45_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_45_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_45_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_45_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000668 bits 19:15) bits 0:4 use field AMP_THR_TABLE_45 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_8_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_45_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_45_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_45_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_45_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_45_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_44_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_44_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_44_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_44_set", value );

    /* (0x00000668 bits 14:10) bits 0:4 use field AMP_THR_TABLE_44 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_8_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_44_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_44_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_44_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_44_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000668 bits 14:10) bits 0:4 use field AMP_THR_TABLE_44 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_8_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_44_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_44_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_44_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_44_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_44_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_44_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_44_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_44_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000668 bits 14:10) bits 0:4 use field AMP_THR_TABLE_44 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000668 bits 14:10) bits 0:4 use field AMP_THR_TABLE_44 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_8_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_44_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_44_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_44_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_44_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_44_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_44_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000668 bits 14:10) bits 0:4 use field AMP_THR_TABLE_44 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_8_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_44_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_44_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_44_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_44_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_44_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_43_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_43_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_43_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_43_set", value );

    /* (0x00000668 bits 9:5) bits 0:4 use field AMP_THR_TABLE_43 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_8_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_43_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_43_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_43_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_43_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000668 bits 9:5) bits 0:4 use field AMP_THR_TABLE_43 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_8_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_43_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_43_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_43_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_43_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_43_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_43_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_43_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_43_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000668 bits 9:5) bits 0:4 use field AMP_THR_TABLE_43 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000668 bits 9:5) bits 0:4 use field AMP_THR_TABLE_43 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_8_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_43_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_43_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_43_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_43_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_43_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_43_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000668 bits 9:5) bits 0:4 use field AMP_THR_TABLE_43 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_8_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_43_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_43_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_43_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_43_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_43_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_42_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_42_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_42_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_42_set", value );

    /* (0x00000668 bits 4:0) bits 0:4 use field AMP_THR_TABLE_42 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_8_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_42_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_42_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_42_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_42_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000668 bits 4:0) bits 0:4 use field AMP_THR_TABLE_42 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_8_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_42_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_42_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_42_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_42_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_42_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_42_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_42_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_42_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000668 bits 4:0) bits 0:4 use field AMP_THR_TABLE_42 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000668 bits 4:0) bits 0:4 use field AMP_THR_TABLE_42 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_8_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_42_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_42_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_42_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_42_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_42_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_42_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000668 bits 4:0) bits 0:4 use field AMP_THR_TABLE_42 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_8_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_42_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_42_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_42_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_8_BIT_AMP_THR_TABLE_42_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_42_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_53_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_53_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_53_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_53_set", value );

    /* (0x0000066c bits 29:25) bits 0:4 use field AMP_THR_TABLE_53 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_9_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_53_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_53_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_53_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_53_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000066c bits 29:25) bits 0:4 use field AMP_THR_TABLE_53 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_9_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_53_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_53_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_53_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_53_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_53_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_53_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_53_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_53_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000066c bits 29:25) bits 0:4 use field AMP_THR_TABLE_53 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000066c bits 29:25) bits 0:4 use field AMP_THR_TABLE_53 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_9_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_53_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_53_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_53_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_53_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_53_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_53_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000066c bits 29:25) bits 0:4 use field AMP_THR_TABLE_53 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_9_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_53_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_53_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_53_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_53_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_53_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_52_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_52_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_52_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_52_set", value );

    /* (0x0000066c bits 24:20) bits 0:4 use field AMP_THR_TABLE_52 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_9_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_52_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_52_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_52_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_52_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000066c bits 24:20) bits 0:4 use field AMP_THR_TABLE_52 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_9_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_52_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_52_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_52_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_52_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_52_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_52_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_52_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_52_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000066c bits 24:20) bits 0:4 use field AMP_THR_TABLE_52 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000066c bits 24:20) bits 0:4 use field AMP_THR_TABLE_52 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_9_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_52_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_52_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_52_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_52_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_52_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_52_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000066c bits 24:20) bits 0:4 use field AMP_THR_TABLE_52 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_9_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_52_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_52_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_52_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_52_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_52_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_51_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_51_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_51_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_51_set", value );

    /* (0x0000066c bits 19:15) bits 0:4 use field AMP_THR_TABLE_51 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_9_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_51_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_51_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_51_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_51_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000066c bits 19:15) bits 0:4 use field AMP_THR_TABLE_51 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_9_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_51_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_51_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_51_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_51_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_51_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_51_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_51_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_51_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000066c bits 19:15) bits 0:4 use field AMP_THR_TABLE_51 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000066c bits 19:15) bits 0:4 use field AMP_THR_TABLE_51 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_9_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_51_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_51_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_51_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_51_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_51_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_51_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000066c bits 19:15) bits 0:4 use field AMP_THR_TABLE_51 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_9_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_51_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_51_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_51_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_51_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_51_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_50_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_50_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_50_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_50_set", value );

    /* (0x0000066c bits 14:10) bits 0:4 use field AMP_THR_TABLE_50 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_9_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_50_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_50_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_50_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_50_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000066c bits 14:10) bits 0:4 use field AMP_THR_TABLE_50 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_9_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_50_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_50_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_50_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_50_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_50_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_50_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_50_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_50_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000066c bits 14:10) bits 0:4 use field AMP_THR_TABLE_50 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000066c bits 14:10) bits 0:4 use field AMP_THR_TABLE_50 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_9_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_50_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_50_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_50_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_50_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_50_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_50_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000066c bits 14:10) bits 0:4 use field AMP_THR_TABLE_50 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_9_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_50_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_50_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_50_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_50_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_50_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_49_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_49_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_49_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_49_set", value );

    /* (0x0000066c bits 9:5) bits 0:4 use field AMP_THR_TABLE_49 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_9_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_49_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_49_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_49_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_49_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000066c bits 9:5) bits 0:4 use field AMP_THR_TABLE_49 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_9_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_49_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_49_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_49_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_49_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_49_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_49_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_49_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_49_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000066c bits 9:5) bits 0:4 use field AMP_THR_TABLE_49 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000066c bits 9:5) bits 0:4 use field AMP_THR_TABLE_49 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_9_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_49_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_49_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_49_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_49_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_49_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_49_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000066c bits 9:5) bits 0:4 use field AMP_THR_TABLE_49 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_9_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_49_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_49_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_49_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_49_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_49_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_48_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_48_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_48_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_48_set", value );

    /* (0x0000066c bits 4:0) bits 0:4 use field AMP_THR_TABLE_48 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_9_field_set( b_ptr,
                                                        h_ptr,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_48_MSK,
                                                        PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_48_OFF,
                                                        value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_48_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_48_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000066c bits 4:0) bits 0:4 use field AMP_THR_TABLE_48 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_9_read( b_ptr,
                                                               h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_48_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_48_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_48_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_48_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_48_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_48_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_48_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_48_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000066c bits 4:0) bits 0:4 use field AMP_THR_TABLE_48 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000066c bits 4:0) bits 0:4 use field AMP_THR_TABLE_48 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_9_field_set( b_ptr,
                                                            h_ptr,
                                                            subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_48_OFF + subfield_offset),
                                                            PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_48_OFF + subfield_offset,
                                                            value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_48_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_48_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_48_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_48_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000066c bits 4:0) bits 0:4 use field AMP_THR_TABLE_48 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_9_read( b_ptr,
                                                               h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_48_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_48_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_48_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_9_BIT_AMP_THR_TABLE_48_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_48_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_59_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_59_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_59_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_59_set", value );

    /* (0x00000670 bits 29:25) bits 0:4 use field AMP_THR_TABLE_59 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_10_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_59_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_59_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_59_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_59_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000670 bits 29:25) bits 0:4 use field AMP_THR_TABLE_59 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_10_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_59_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_59_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_59_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_59_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_59_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_59_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_59_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_59_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000670 bits 29:25) bits 0:4 use field AMP_THR_TABLE_59 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000670 bits 29:25) bits 0:4 use field AMP_THR_TABLE_59 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_10_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_59_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_59_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_59_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_59_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_59_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_59_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000670 bits 29:25) bits 0:4 use field AMP_THR_TABLE_59 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_10_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_59_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_59_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_59_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_59_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_59_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_58_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_58_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_58_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_58_set", value );

    /* (0x00000670 bits 24:20) bits 0:4 use field AMP_THR_TABLE_58 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_10_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_58_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_58_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_58_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_58_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000670 bits 24:20) bits 0:4 use field AMP_THR_TABLE_58 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_10_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_58_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_58_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_58_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_58_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_58_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_58_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_58_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_58_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000670 bits 24:20) bits 0:4 use field AMP_THR_TABLE_58 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000670 bits 24:20) bits 0:4 use field AMP_THR_TABLE_58 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_10_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_58_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_58_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_58_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_58_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_58_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_58_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000670 bits 24:20) bits 0:4 use field AMP_THR_TABLE_58 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_10_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_58_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_58_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_58_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_58_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_58_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_57_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_57_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_57_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_57_set", value );

    /* (0x00000670 bits 19:15) bits 0:4 use field AMP_THR_TABLE_57 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_10_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_57_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_57_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_57_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_57_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000670 bits 19:15) bits 0:4 use field AMP_THR_TABLE_57 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_10_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_57_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_57_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_57_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_57_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_57_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_57_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_57_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_57_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000670 bits 19:15) bits 0:4 use field AMP_THR_TABLE_57 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000670 bits 19:15) bits 0:4 use field AMP_THR_TABLE_57 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_10_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_57_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_57_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_57_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_57_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_57_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_57_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000670 bits 19:15) bits 0:4 use field AMP_THR_TABLE_57 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_10_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_57_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_57_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_57_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_57_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_57_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_56_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_56_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_56_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_56_set", value );

    /* (0x00000670 bits 14:10) bits 0:4 use field AMP_THR_TABLE_56 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_10_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_56_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_56_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_56_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_56_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000670 bits 14:10) bits 0:4 use field AMP_THR_TABLE_56 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_10_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_56_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_56_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_56_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_56_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_56_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_56_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_56_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_56_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000670 bits 14:10) bits 0:4 use field AMP_THR_TABLE_56 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000670 bits 14:10) bits 0:4 use field AMP_THR_TABLE_56 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_10_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_56_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_56_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_56_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_56_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_56_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_56_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000670 bits 14:10) bits 0:4 use field AMP_THR_TABLE_56 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_10_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_56_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_56_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_56_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_56_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_56_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_55_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_55_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_55_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_55_set", value );

    /* (0x00000670 bits 9:5) bits 0:4 use field AMP_THR_TABLE_55 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_10_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_55_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_55_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_55_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_55_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000670 bits 9:5) bits 0:4 use field AMP_THR_TABLE_55 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_10_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_55_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_55_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_55_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_55_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_55_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_55_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_55_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_55_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000670 bits 9:5) bits 0:4 use field AMP_THR_TABLE_55 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000670 bits 9:5) bits 0:4 use field AMP_THR_TABLE_55 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_10_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_55_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_55_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_55_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_55_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_55_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_55_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000670 bits 9:5) bits 0:4 use field AMP_THR_TABLE_55 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_10_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_55_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_55_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_55_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_55_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_55_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_54_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_54_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_54_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_54_set", value );

    /* (0x00000670 bits 4:0) bits 0:4 use field AMP_THR_TABLE_54 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_10_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_54_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_54_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_54_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_54_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000670 bits 4:0) bits 0:4 use field AMP_THR_TABLE_54 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_10_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_54_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_54_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_54_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_54_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_54_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_54_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_54_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_54_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000670 bits 4:0) bits 0:4 use field AMP_THR_TABLE_54 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000670 bits 4:0) bits 0:4 use field AMP_THR_TABLE_54 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_10_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_54_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_54_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_54_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_54_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_54_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_54_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000670 bits 4:0) bits 0:4 use field AMP_THR_TABLE_54 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_10_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_54_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_54_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_54_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_10_BIT_AMP_THR_TABLE_54_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_54_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_65_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_65_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_65_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_65_set", value );

    /* (0x00000674 bits 29:25) bits 0:4 use field AMP_THR_TABLE_65 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_11_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_65_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_65_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_65_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_65_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000674 bits 29:25) bits 0:4 use field AMP_THR_TABLE_65 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_11_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_65_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_65_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_65_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_65_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_65_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_65_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_65_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_65_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000674 bits 29:25) bits 0:4 use field AMP_THR_TABLE_65 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000674 bits 29:25) bits 0:4 use field AMP_THR_TABLE_65 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_11_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_65_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_65_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_65_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_65_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_65_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_65_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000674 bits 29:25) bits 0:4 use field AMP_THR_TABLE_65 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_11_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_65_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_65_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_65_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_65_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_65_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_64_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_64_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_64_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_64_set", value );

    /* (0x00000674 bits 24:20) bits 0:4 use field AMP_THR_TABLE_64 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_11_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_64_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_64_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_64_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_64_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000674 bits 24:20) bits 0:4 use field AMP_THR_TABLE_64 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_11_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_64_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_64_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_64_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_64_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_64_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_64_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_64_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_64_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000674 bits 24:20) bits 0:4 use field AMP_THR_TABLE_64 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000674 bits 24:20) bits 0:4 use field AMP_THR_TABLE_64 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_11_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_64_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_64_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_64_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_64_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_64_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_64_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000674 bits 24:20) bits 0:4 use field AMP_THR_TABLE_64 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_11_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_64_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_64_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_64_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_64_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_64_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_63_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_63_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_63_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_63_set", value );

    /* (0x00000674 bits 19:15) bits 0:4 use field AMP_THR_TABLE_63 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_11_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_63_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_63_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_63_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_63_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000674 bits 19:15) bits 0:4 use field AMP_THR_TABLE_63 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_11_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_63_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_63_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_63_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_63_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_63_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_63_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_63_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_63_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000674 bits 19:15) bits 0:4 use field AMP_THR_TABLE_63 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000674 bits 19:15) bits 0:4 use field AMP_THR_TABLE_63 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_11_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_63_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_63_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_63_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_63_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_63_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_63_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000674 bits 19:15) bits 0:4 use field AMP_THR_TABLE_63 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_11_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_63_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_63_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_63_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_63_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_63_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_62_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_62_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_62_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_62_set", value );

    /* (0x00000674 bits 14:10) bits 0:4 use field AMP_THR_TABLE_62 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_11_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_62_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_62_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_62_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_62_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000674 bits 14:10) bits 0:4 use field AMP_THR_TABLE_62 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_11_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_62_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_62_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_62_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_62_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_62_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_62_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_62_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_62_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000674 bits 14:10) bits 0:4 use field AMP_THR_TABLE_62 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000674 bits 14:10) bits 0:4 use field AMP_THR_TABLE_62 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_11_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_62_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_62_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_62_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_62_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_62_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_62_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000674 bits 14:10) bits 0:4 use field AMP_THR_TABLE_62 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_11_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_62_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_62_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_62_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_62_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_62_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_61_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_61_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_61_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_61_set", value );

    /* (0x00000674 bits 9:5) bits 0:4 use field AMP_THR_TABLE_61 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_11_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_61_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_61_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_61_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_61_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000674 bits 9:5) bits 0:4 use field AMP_THR_TABLE_61 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_11_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_61_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_61_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_61_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_61_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_61_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_61_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_61_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_61_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000674 bits 9:5) bits 0:4 use field AMP_THR_TABLE_61 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000674 bits 9:5) bits 0:4 use field AMP_THR_TABLE_61 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_11_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_61_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_61_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_61_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_61_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_61_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_61_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000674 bits 9:5) bits 0:4 use field AMP_THR_TABLE_61 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_11_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_61_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_61_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_61_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_61_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_61_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_60_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_60_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_60_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_60_set", value );

    /* (0x00000674 bits 4:0) bits 0:4 use field AMP_THR_TABLE_60 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_11_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_60_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_60_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_60_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_60_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000674 bits 4:0) bits 0:4 use field AMP_THR_TABLE_60 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_11_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_60_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_60_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_60_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_60_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_60_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_60_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_60_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_60_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000674 bits 4:0) bits 0:4 use field AMP_THR_TABLE_60 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000674 bits 4:0) bits 0:4 use field AMP_THR_TABLE_60 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_11_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_60_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_60_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_60_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_60_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_60_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_60_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000674 bits 4:0) bits 0:4 use field AMP_THR_TABLE_60 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_11_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_60_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_60_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_60_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_11_BIT_AMP_THR_TABLE_60_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_60_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_71_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_71_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_71_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_71_set", value );

    /* (0x00000678 bits 29:25) bits 0:4 use field AMP_THR_TABLE_71 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_12_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_71_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_71_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_71_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_71_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000678 bits 29:25) bits 0:4 use field AMP_THR_TABLE_71 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_12_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_71_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_71_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_71_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_71_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_71_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_71_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_71_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_71_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000678 bits 29:25) bits 0:4 use field AMP_THR_TABLE_71 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000678 bits 29:25) bits 0:4 use field AMP_THR_TABLE_71 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_12_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_71_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_71_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_71_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_71_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_71_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_71_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000678 bits 29:25) bits 0:4 use field AMP_THR_TABLE_71 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_12_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_71_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_71_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_71_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_71_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_71_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_70_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_70_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_70_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_70_set", value );

    /* (0x00000678 bits 24:20) bits 0:4 use field AMP_THR_TABLE_70 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_12_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_70_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_70_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_70_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_70_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000678 bits 24:20) bits 0:4 use field AMP_THR_TABLE_70 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_12_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_70_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_70_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_70_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_70_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_70_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_70_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_70_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_70_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000678 bits 24:20) bits 0:4 use field AMP_THR_TABLE_70 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000678 bits 24:20) bits 0:4 use field AMP_THR_TABLE_70 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_12_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_70_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_70_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_70_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_70_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_70_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_70_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000678 bits 24:20) bits 0:4 use field AMP_THR_TABLE_70 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_12_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_70_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_70_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_70_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_70_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_70_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_69_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_69_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_69_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_69_set", value );

    /* (0x00000678 bits 19:15) bits 0:4 use field AMP_THR_TABLE_69 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_12_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_69_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_69_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_69_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_69_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000678 bits 19:15) bits 0:4 use field AMP_THR_TABLE_69 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_12_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_69_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_69_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_69_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_69_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_69_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_69_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_69_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_69_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000678 bits 19:15) bits 0:4 use field AMP_THR_TABLE_69 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000678 bits 19:15) bits 0:4 use field AMP_THR_TABLE_69 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_12_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_69_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_69_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_69_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_69_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_69_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_69_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000678 bits 19:15) bits 0:4 use field AMP_THR_TABLE_69 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_12_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_69_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_69_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_69_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_69_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_69_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_68_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_68_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_68_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_68_set", value );

    /* (0x00000678 bits 14:10) bits 0:4 use field AMP_THR_TABLE_68 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_12_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_68_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_68_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_68_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_68_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000678 bits 14:10) bits 0:4 use field AMP_THR_TABLE_68 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_12_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_68_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_68_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_68_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_68_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_68_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_68_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_68_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_68_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000678 bits 14:10) bits 0:4 use field AMP_THR_TABLE_68 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000678 bits 14:10) bits 0:4 use field AMP_THR_TABLE_68 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_12_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_68_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_68_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_68_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_68_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_68_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_68_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000678 bits 14:10) bits 0:4 use field AMP_THR_TABLE_68 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_12_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_68_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_68_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_68_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_68_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_68_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_67_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_67_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_67_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_67_set", value );

    /* (0x00000678 bits 9:5) bits 0:4 use field AMP_THR_TABLE_67 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_12_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_67_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_67_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_67_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_67_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000678 bits 9:5) bits 0:4 use field AMP_THR_TABLE_67 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_12_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_67_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_67_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_67_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_67_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_67_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_67_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_67_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_67_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000678 bits 9:5) bits 0:4 use field AMP_THR_TABLE_67 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000678 bits 9:5) bits 0:4 use field AMP_THR_TABLE_67 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_12_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_67_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_67_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_67_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_67_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_67_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_67_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000678 bits 9:5) bits 0:4 use field AMP_THR_TABLE_67 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_12_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_67_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_67_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_67_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_67_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_67_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_66_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_66_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_66_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_66_set", value );

    /* (0x00000678 bits 4:0) bits 0:4 use field AMP_THR_TABLE_66 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_12_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_66_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_66_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_66_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_66_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000678 bits 4:0) bits 0:4 use field AMP_THR_TABLE_66 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_12_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_66_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_66_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_66_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_66_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_66_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_66_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_66_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_66_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000678 bits 4:0) bits 0:4 use field AMP_THR_TABLE_66 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000678 bits 4:0) bits 0:4 use field AMP_THR_TABLE_66 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_12_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_66_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_66_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_66_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_66_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_66_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_66_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000678 bits 4:0) bits 0:4 use field AMP_THR_TABLE_66 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_12_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_66_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_66_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_66_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_12_BIT_AMP_THR_TABLE_66_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_66_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_77_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_77_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_77_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_77_set", value );

    /* (0x0000067c bits 29:25) bits 0:4 use field AMP_THR_TABLE_77 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_13_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_77_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_77_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_77_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_77_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000067c bits 29:25) bits 0:4 use field AMP_THR_TABLE_77 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_13_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_77_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_77_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_77_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_77_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_77_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_77_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_77_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_77_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000067c bits 29:25) bits 0:4 use field AMP_THR_TABLE_77 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000067c bits 29:25) bits 0:4 use field AMP_THR_TABLE_77 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_13_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_77_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_77_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_77_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_77_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_77_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_77_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000067c bits 29:25) bits 0:4 use field AMP_THR_TABLE_77 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_13_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_77_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_77_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_77_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_77_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_77_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_76_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_76_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_76_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_76_set", value );

    /* (0x0000067c bits 24:20) bits 0:4 use field AMP_THR_TABLE_76 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_13_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_76_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_76_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_76_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_76_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000067c bits 24:20) bits 0:4 use field AMP_THR_TABLE_76 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_13_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_76_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_76_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_76_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_76_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_76_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_76_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_76_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_76_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000067c bits 24:20) bits 0:4 use field AMP_THR_TABLE_76 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000067c bits 24:20) bits 0:4 use field AMP_THR_TABLE_76 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_13_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_76_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_76_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_76_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_76_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_76_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_76_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000067c bits 24:20) bits 0:4 use field AMP_THR_TABLE_76 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_13_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_76_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_76_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_76_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_76_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_76_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_75_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_75_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_75_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_75_set", value );

    /* (0x0000067c bits 19:15) bits 0:4 use field AMP_THR_TABLE_75 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_13_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_75_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_75_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_75_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_75_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000067c bits 19:15) bits 0:4 use field AMP_THR_TABLE_75 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_13_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_75_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_75_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_75_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_75_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_75_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_75_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_75_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_75_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000067c bits 19:15) bits 0:4 use field AMP_THR_TABLE_75 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000067c bits 19:15) bits 0:4 use field AMP_THR_TABLE_75 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_13_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_75_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_75_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_75_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_75_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_75_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_75_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000067c bits 19:15) bits 0:4 use field AMP_THR_TABLE_75 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_13_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_75_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_75_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_75_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_75_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_75_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_74_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_74_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_74_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_74_set", value );

    /* (0x0000067c bits 14:10) bits 0:4 use field AMP_THR_TABLE_74 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_13_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_74_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_74_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_74_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_74_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000067c bits 14:10) bits 0:4 use field AMP_THR_TABLE_74 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_13_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_74_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_74_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_74_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_74_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_74_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_74_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_74_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_74_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000067c bits 14:10) bits 0:4 use field AMP_THR_TABLE_74 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000067c bits 14:10) bits 0:4 use field AMP_THR_TABLE_74 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_13_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_74_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_74_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_74_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_74_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_74_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_74_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000067c bits 14:10) bits 0:4 use field AMP_THR_TABLE_74 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_13_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_74_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_74_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_74_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_74_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_74_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_73_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_73_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_73_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_73_set", value );

    /* (0x0000067c bits 9:5) bits 0:4 use field AMP_THR_TABLE_73 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_13_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_73_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_73_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_73_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_73_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000067c bits 9:5) bits 0:4 use field AMP_THR_TABLE_73 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_13_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_73_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_73_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_73_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_73_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_73_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_73_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_73_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_73_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000067c bits 9:5) bits 0:4 use field AMP_THR_TABLE_73 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000067c bits 9:5) bits 0:4 use field AMP_THR_TABLE_73 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_13_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_73_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_73_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_73_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_73_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_73_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_73_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000067c bits 9:5) bits 0:4 use field AMP_THR_TABLE_73 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_13_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_73_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_73_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_73_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_73_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_73_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_72_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_72_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_72_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_72_set", value );

    /* (0x0000067c bits 4:0) bits 0:4 use field AMP_THR_TABLE_72 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_13_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_72_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_72_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_72_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_72_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000067c bits 4:0) bits 0:4 use field AMP_THR_TABLE_72 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_13_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_72_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_72_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_72_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_72_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_72_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_72_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_72_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_72_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000067c bits 4:0) bits 0:4 use field AMP_THR_TABLE_72 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000067c bits 4:0) bits 0:4 use field AMP_THR_TABLE_72 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_13_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_72_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_72_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_72_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_72_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_72_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_72_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000067c bits 4:0) bits 0:4 use field AMP_THR_TABLE_72 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_13_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_72_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_72_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_72_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_13_BIT_AMP_THR_TABLE_72_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_72_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_83_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_83_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_83_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_83_set", value );

    /* (0x00000680 bits 29:25) bits 0:4 use field AMP_THR_TABLE_83 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_14_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_83_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_83_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_83_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_83_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000680 bits 29:25) bits 0:4 use field AMP_THR_TABLE_83 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_14_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_83_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_83_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_83_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_83_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_83_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_83_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_83_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_83_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000680 bits 29:25) bits 0:4 use field AMP_THR_TABLE_83 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000680 bits 29:25) bits 0:4 use field AMP_THR_TABLE_83 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_14_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_83_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_83_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_83_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_83_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_83_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_83_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000680 bits 29:25) bits 0:4 use field AMP_THR_TABLE_83 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_14_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_83_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_83_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_83_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_83_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_83_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_82_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_82_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_82_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_82_set", value );

    /* (0x00000680 bits 24:20) bits 0:4 use field AMP_THR_TABLE_82 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_14_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_82_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_82_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_82_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_82_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000680 bits 24:20) bits 0:4 use field AMP_THR_TABLE_82 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_14_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_82_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_82_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_82_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_82_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_82_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_82_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_82_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_82_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000680 bits 24:20) bits 0:4 use field AMP_THR_TABLE_82 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000680 bits 24:20) bits 0:4 use field AMP_THR_TABLE_82 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_14_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_82_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_82_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_82_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_82_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_82_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_82_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000680 bits 24:20) bits 0:4 use field AMP_THR_TABLE_82 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_14_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_82_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_82_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_82_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_82_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_82_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_81_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_81_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_81_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_81_set", value );

    /* (0x00000680 bits 19:15) bits 0:4 use field AMP_THR_TABLE_81 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_14_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_81_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_81_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_81_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_81_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000680 bits 19:15) bits 0:4 use field AMP_THR_TABLE_81 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_14_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_81_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_81_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_81_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_81_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_81_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_81_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_81_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_81_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000680 bits 19:15) bits 0:4 use field AMP_THR_TABLE_81 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000680 bits 19:15) bits 0:4 use field AMP_THR_TABLE_81 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_14_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_81_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_81_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_81_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_81_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_81_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_81_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000680 bits 19:15) bits 0:4 use field AMP_THR_TABLE_81 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_14_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_81_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_81_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_81_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_81_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_81_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_80_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_80_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_80_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_80_set", value );

    /* (0x00000680 bits 14:10) bits 0:4 use field AMP_THR_TABLE_80 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_14_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_80_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_80_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_80_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_80_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000680 bits 14:10) bits 0:4 use field AMP_THR_TABLE_80 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_14_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_80_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_80_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_80_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_80_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_80_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_80_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_80_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_80_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000680 bits 14:10) bits 0:4 use field AMP_THR_TABLE_80 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000680 bits 14:10) bits 0:4 use field AMP_THR_TABLE_80 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_14_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_80_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_80_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_80_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_80_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_80_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_80_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000680 bits 14:10) bits 0:4 use field AMP_THR_TABLE_80 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_14_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_80_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_80_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_80_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_80_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_80_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_79_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_79_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_79_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_79_set", value );

    /* (0x00000680 bits 9:5) bits 0:4 use field AMP_THR_TABLE_79 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_14_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_79_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_79_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_79_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_79_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000680 bits 9:5) bits 0:4 use field AMP_THR_TABLE_79 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_14_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_79_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_79_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_79_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_79_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_79_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_79_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_79_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_79_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000680 bits 9:5) bits 0:4 use field AMP_THR_TABLE_79 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000680 bits 9:5) bits 0:4 use field AMP_THR_TABLE_79 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_14_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_79_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_79_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_79_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_79_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_79_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_79_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000680 bits 9:5) bits 0:4 use field AMP_THR_TABLE_79 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_14_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_79_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_79_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_79_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_79_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_79_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_78_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_78_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_78_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_78_set", value );

    /* (0x00000680 bits 4:0) bits 0:4 use field AMP_THR_TABLE_78 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_14_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_78_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_78_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_78_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_78_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000680 bits 4:0) bits 0:4 use field AMP_THR_TABLE_78 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_14_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_78_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_78_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_78_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_78_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_78_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_78_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_78_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_78_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000680 bits 4:0) bits 0:4 use field AMP_THR_TABLE_78 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000680 bits 4:0) bits 0:4 use field AMP_THR_TABLE_78 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_14_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_78_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_78_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_78_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_78_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_78_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_78_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000680 bits 4:0) bits 0:4 use field AMP_THR_TABLE_78 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_14_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_78_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_78_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_78_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_14_BIT_AMP_THR_TABLE_78_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_78_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_89_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_89_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_89_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_89_set", value );

    /* (0x00000684 bits 29:25) bits 0:4 use field AMP_THR_TABLE_89 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_15_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_89_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_89_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_89_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_89_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000684 bits 29:25) bits 0:4 use field AMP_THR_TABLE_89 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_15_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_89_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_89_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_89_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_89_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_89_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_89_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_89_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_89_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000684 bits 29:25) bits 0:4 use field AMP_THR_TABLE_89 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000684 bits 29:25) bits 0:4 use field AMP_THR_TABLE_89 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_15_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_89_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_89_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_89_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_89_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_89_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_89_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000684 bits 29:25) bits 0:4 use field AMP_THR_TABLE_89 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_15_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_89_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_89_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_89_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_89_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_89_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_88_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_88_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_88_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_88_set", value );

    /* (0x00000684 bits 24:20) bits 0:4 use field AMP_THR_TABLE_88 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_15_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_88_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_88_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_88_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_88_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000684 bits 24:20) bits 0:4 use field AMP_THR_TABLE_88 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_15_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_88_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_88_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_88_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_88_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_88_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_88_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_88_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_88_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000684 bits 24:20) bits 0:4 use field AMP_THR_TABLE_88 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000684 bits 24:20) bits 0:4 use field AMP_THR_TABLE_88 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_15_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_88_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_88_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_88_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_88_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_88_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_88_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000684 bits 24:20) bits 0:4 use field AMP_THR_TABLE_88 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_15_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_88_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_88_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_88_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_88_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_88_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_87_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_87_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_87_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_87_set", value );

    /* (0x00000684 bits 19:15) bits 0:4 use field AMP_THR_TABLE_87 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_15_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_87_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_87_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_87_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_87_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000684 bits 19:15) bits 0:4 use field AMP_THR_TABLE_87 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_15_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_87_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_87_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_87_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_87_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_87_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_87_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_87_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_87_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000684 bits 19:15) bits 0:4 use field AMP_THR_TABLE_87 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000684 bits 19:15) bits 0:4 use field AMP_THR_TABLE_87 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_15_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_87_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_87_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_87_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_87_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_87_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_87_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000684 bits 19:15) bits 0:4 use field AMP_THR_TABLE_87 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_15_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_87_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_87_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_87_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_87_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_87_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_86_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_86_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_86_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_86_set", value );

    /* (0x00000684 bits 14:10) bits 0:4 use field AMP_THR_TABLE_86 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_15_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_86_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_86_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_86_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_86_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000684 bits 14:10) bits 0:4 use field AMP_THR_TABLE_86 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_15_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_86_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_86_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_86_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_86_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_86_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_86_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_86_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_86_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000684 bits 14:10) bits 0:4 use field AMP_THR_TABLE_86 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000684 bits 14:10) bits 0:4 use field AMP_THR_TABLE_86 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_15_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_86_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_86_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_86_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_86_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_86_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_86_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000684 bits 14:10) bits 0:4 use field AMP_THR_TABLE_86 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_15_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_86_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_86_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_86_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_86_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_86_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_85_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_85_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_85_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_85_set", value );

    /* (0x00000684 bits 9:5) bits 0:4 use field AMP_THR_TABLE_85 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_15_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_85_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_85_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_85_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_85_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000684 bits 9:5) bits 0:4 use field AMP_THR_TABLE_85 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_15_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_85_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_85_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_85_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_85_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_85_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_85_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_85_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_85_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000684 bits 9:5) bits 0:4 use field AMP_THR_TABLE_85 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000684 bits 9:5) bits 0:4 use field AMP_THR_TABLE_85 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_15_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_85_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_85_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_85_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_85_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_85_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_85_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000684 bits 9:5) bits 0:4 use field AMP_THR_TABLE_85 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_15_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_85_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_85_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_85_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_85_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_85_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_84_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_84_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_84_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_84_set", value );

    /* (0x00000684 bits 4:0) bits 0:4 use field AMP_THR_TABLE_84 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_15_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_84_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_84_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_84_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_84_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000684 bits 4:0) bits 0:4 use field AMP_THR_TABLE_84 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_15_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_84_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_84_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_84_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_84_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_84_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_84_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_84_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_84_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000684 bits 4:0) bits 0:4 use field AMP_THR_TABLE_84 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000684 bits 4:0) bits 0:4 use field AMP_THR_TABLE_84 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_15_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_84_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_84_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_84_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_84_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_84_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_84_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000684 bits 4:0) bits 0:4 use field AMP_THR_TABLE_84 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_15_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_84_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_84_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_84_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_15_BIT_AMP_THR_TABLE_84_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_84_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_95_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_95_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_95_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_95_set", value );

    /* (0x00000688 bits 29:25) bits 0:4 use field AMP_THR_TABLE_95 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_16_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_95_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_95_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_95_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_95_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000688 bits 29:25) bits 0:4 use field AMP_THR_TABLE_95 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_16_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_95_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_95_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_95_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_95_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_95_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_95_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_95_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_95_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000688 bits 29:25) bits 0:4 use field AMP_THR_TABLE_95 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000688 bits 29:25) bits 0:4 use field AMP_THR_TABLE_95 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_16_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_95_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_95_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_95_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_95_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_95_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_95_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000688 bits 29:25) bits 0:4 use field AMP_THR_TABLE_95 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_16_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_95_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_95_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_95_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_95_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_95_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_94_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_94_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_94_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_94_set", value );

    /* (0x00000688 bits 24:20) bits 0:4 use field AMP_THR_TABLE_94 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_16_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_94_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_94_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_94_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_94_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000688 bits 24:20) bits 0:4 use field AMP_THR_TABLE_94 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_16_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_94_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_94_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_94_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_94_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_94_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_94_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_94_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_94_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000688 bits 24:20) bits 0:4 use field AMP_THR_TABLE_94 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000688 bits 24:20) bits 0:4 use field AMP_THR_TABLE_94 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_16_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_94_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_94_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_94_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_94_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_94_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_94_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000688 bits 24:20) bits 0:4 use field AMP_THR_TABLE_94 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_16_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_94_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_94_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_94_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_94_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_94_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_93_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_93_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_93_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_93_set", value );

    /* (0x00000688 bits 19:15) bits 0:4 use field AMP_THR_TABLE_93 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_16_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_93_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_93_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_93_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_93_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000688 bits 19:15) bits 0:4 use field AMP_THR_TABLE_93 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_16_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_93_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_93_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_93_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_93_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_93_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_93_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_93_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_93_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000688 bits 19:15) bits 0:4 use field AMP_THR_TABLE_93 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000688 bits 19:15) bits 0:4 use field AMP_THR_TABLE_93 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_16_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_93_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_93_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_93_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_93_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_93_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_93_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000688 bits 19:15) bits 0:4 use field AMP_THR_TABLE_93 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_16_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_93_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_93_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_93_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_93_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_93_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_92_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_92_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_92_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_92_set", value );

    /* (0x00000688 bits 14:10) bits 0:4 use field AMP_THR_TABLE_92 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_16_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_92_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_92_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_92_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_92_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000688 bits 14:10) bits 0:4 use field AMP_THR_TABLE_92 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_16_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_92_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_92_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_92_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_92_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_92_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_92_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_92_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_92_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000688 bits 14:10) bits 0:4 use field AMP_THR_TABLE_92 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000688 bits 14:10) bits 0:4 use field AMP_THR_TABLE_92 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_16_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_92_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_92_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_92_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_92_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_92_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_92_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000688 bits 14:10) bits 0:4 use field AMP_THR_TABLE_92 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_16_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_92_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_92_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_92_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_92_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_92_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_91_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_91_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_91_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_91_set", value );

    /* (0x00000688 bits 9:5) bits 0:4 use field AMP_THR_TABLE_91 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_16_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_91_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_91_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_91_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_91_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000688 bits 9:5) bits 0:4 use field AMP_THR_TABLE_91 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_16_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_91_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_91_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_91_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_91_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_91_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_91_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_91_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_91_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000688 bits 9:5) bits 0:4 use field AMP_THR_TABLE_91 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000688 bits 9:5) bits 0:4 use field AMP_THR_TABLE_91 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_16_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_91_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_91_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_91_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_91_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_91_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_91_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000688 bits 9:5) bits 0:4 use field AMP_THR_TABLE_91 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_16_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_91_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_91_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_91_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_91_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_91_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_90_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_90_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_90_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_90_set", value );

    /* (0x00000688 bits 4:0) bits 0:4 use field AMP_THR_TABLE_90 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_16_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_90_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_90_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_90_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_90_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000688 bits 4:0) bits 0:4 use field AMP_THR_TABLE_90 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_16_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_90_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_90_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_90_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_90_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_90_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_90_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_90_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_90_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000688 bits 4:0) bits 0:4 use field AMP_THR_TABLE_90 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000688 bits 4:0) bits 0:4 use field AMP_THR_TABLE_90 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_16_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_90_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_90_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_90_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_90_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_90_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_90_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000688 bits 4:0) bits 0:4 use field AMP_THR_TABLE_90 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_16_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_90_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_90_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_90_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_16_BIT_AMP_THR_TABLE_90_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_90_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_101_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_101_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_101_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_101_set", value );

    /* (0x0000068c bits 29:25) bits 0:4 use field AMP_THR_TABLE_101 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_17_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_101_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_101_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_101_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_101_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000068c bits 29:25) bits 0:4 use field AMP_THR_TABLE_101 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_17_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_101_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_101_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_101_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_101_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_101_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_101_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_101_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_101_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000068c bits 29:25) bits 0:4 use field AMP_THR_TABLE_101 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000068c bits 29:25) bits 0:4 use field AMP_THR_TABLE_101 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_17_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_101_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_101_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_101_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_101_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_101_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_101_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000068c bits 29:25) bits 0:4 use field AMP_THR_TABLE_101 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_17_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_101_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_101_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_101_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_101_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_101_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_100_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_100_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_100_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_100_set", value );

    /* (0x0000068c bits 24:20) bits 0:4 use field AMP_THR_TABLE_100 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_17_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_100_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_100_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_100_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_100_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000068c bits 24:20) bits 0:4 use field AMP_THR_TABLE_100 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_17_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_100_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_100_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_100_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_100_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_100_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_100_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_100_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_100_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000068c bits 24:20) bits 0:4 use field AMP_THR_TABLE_100 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000068c bits 24:20) bits 0:4 use field AMP_THR_TABLE_100 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_17_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_100_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_100_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_100_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_100_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_100_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_100_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000068c bits 24:20) bits 0:4 use field AMP_THR_TABLE_100 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_17_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_100_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_100_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_100_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_100_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_100_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_99_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_99_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_99_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_99_set", value );

    /* (0x0000068c bits 19:15) bits 0:4 use field AMP_THR_TABLE_99 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_17_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_99_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_99_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_99_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_99_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000068c bits 19:15) bits 0:4 use field AMP_THR_TABLE_99 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_17_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_99_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_99_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_99_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_99_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_99_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_99_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_99_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_99_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000068c bits 19:15) bits 0:4 use field AMP_THR_TABLE_99 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000068c bits 19:15) bits 0:4 use field AMP_THR_TABLE_99 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_17_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_99_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_99_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_99_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_99_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_99_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_99_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000068c bits 19:15) bits 0:4 use field AMP_THR_TABLE_99 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_17_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_99_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_99_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_99_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_99_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_99_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_98_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_98_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_98_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_98_set", value );

    /* (0x0000068c bits 14:10) bits 0:4 use field AMP_THR_TABLE_98 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_17_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_98_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_98_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_98_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_98_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000068c bits 14:10) bits 0:4 use field AMP_THR_TABLE_98 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_17_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_98_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_98_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_98_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_98_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_98_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_98_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_98_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_98_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000068c bits 14:10) bits 0:4 use field AMP_THR_TABLE_98 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000068c bits 14:10) bits 0:4 use field AMP_THR_TABLE_98 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_17_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_98_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_98_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_98_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_98_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_98_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_98_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000068c bits 14:10) bits 0:4 use field AMP_THR_TABLE_98 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_17_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_98_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_98_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_98_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_98_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_98_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_97_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_97_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_97_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_97_set", value );

    /* (0x0000068c bits 9:5) bits 0:4 use field AMP_THR_TABLE_97 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_17_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_97_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_97_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_97_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_97_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000068c bits 9:5) bits 0:4 use field AMP_THR_TABLE_97 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_17_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_97_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_97_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_97_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_97_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_97_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_97_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_97_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_97_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000068c bits 9:5) bits 0:4 use field AMP_THR_TABLE_97 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000068c bits 9:5) bits 0:4 use field AMP_THR_TABLE_97 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_17_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_97_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_97_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_97_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_97_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_97_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_97_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000068c bits 9:5) bits 0:4 use field AMP_THR_TABLE_97 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_17_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_97_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_97_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_97_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_97_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_97_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_96_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_96_set( t8_common_buffer_t *b_ptr,
                                                         t8_handle_t *h_ptr,
                                                         UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_96_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_96_set", value );

    /* (0x0000068c bits 4:0) bits 0:4 use field AMP_THR_TABLE_96 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_17_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_96_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_96_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_96_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_96_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000068c bits 4:0) bits 0:4 use field AMP_THR_TABLE_96 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_17_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_96_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_96_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_96_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_96_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_96_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_96_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_96_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_96_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000068c bits 4:0) bits 0:4 use field AMP_THR_TABLE_96 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000068c bits 4:0) bits 0:4 use field AMP_THR_TABLE_96 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_17_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_96_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_96_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_96_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_96_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_96_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_96_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000068c bits 4:0) bits 0:4 use field AMP_THR_TABLE_96 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_17_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_96_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_96_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_96_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_17_BIT_AMP_THR_TABLE_96_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_96_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_107_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_107_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_107_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_107_set", value );

    /* (0x00000690 bits 29:25) bits 0:4 use field AMP_THR_TABLE_107 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_18_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_107_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_107_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_107_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_107_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000690 bits 29:25) bits 0:4 use field AMP_THR_TABLE_107 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_18_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_107_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_107_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_107_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_107_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_107_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_107_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_107_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_107_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000690 bits 29:25) bits 0:4 use field AMP_THR_TABLE_107 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000690 bits 29:25) bits 0:4 use field AMP_THR_TABLE_107 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_18_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_107_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_107_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_107_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_107_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_107_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_107_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000690 bits 29:25) bits 0:4 use field AMP_THR_TABLE_107 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_18_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_107_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_107_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_107_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_107_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_107_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_106_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_106_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_106_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_106_set", value );

    /* (0x00000690 bits 24:20) bits 0:4 use field AMP_THR_TABLE_106 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_18_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_106_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_106_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_106_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_106_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000690 bits 24:20) bits 0:4 use field AMP_THR_TABLE_106 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_18_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_106_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_106_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_106_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_106_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_106_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_106_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_106_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_106_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000690 bits 24:20) bits 0:4 use field AMP_THR_TABLE_106 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000690 bits 24:20) bits 0:4 use field AMP_THR_TABLE_106 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_18_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_106_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_106_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_106_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_106_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_106_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_106_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000690 bits 24:20) bits 0:4 use field AMP_THR_TABLE_106 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_18_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_106_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_106_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_106_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_106_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_106_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_105_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_105_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_105_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_105_set", value );

    /* (0x00000690 bits 19:15) bits 0:4 use field AMP_THR_TABLE_105 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_18_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_105_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_105_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_105_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_105_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000690 bits 19:15) bits 0:4 use field AMP_THR_TABLE_105 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_18_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_105_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_105_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_105_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_105_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_105_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_105_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_105_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_105_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000690 bits 19:15) bits 0:4 use field AMP_THR_TABLE_105 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000690 bits 19:15) bits 0:4 use field AMP_THR_TABLE_105 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_18_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_105_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_105_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_105_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_105_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_105_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_105_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000690 bits 19:15) bits 0:4 use field AMP_THR_TABLE_105 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_18_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_105_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_105_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_105_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_105_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_105_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_104_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_104_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_104_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_104_set", value );

    /* (0x00000690 bits 14:10) bits 0:4 use field AMP_THR_TABLE_104 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_18_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_104_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_104_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_104_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_104_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000690 bits 14:10) bits 0:4 use field AMP_THR_TABLE_104 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_18_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_104_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_104_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_104_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_104_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_104_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_104_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_104_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_104_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000690 bits 14:10) bits 0:4 use field AMP_THR_TABLE_104 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000690 bits 14:10) bits 0:4 use field AMP_THR_TABLE_104 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_18_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_104_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_104_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_104_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_104_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_104_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_104_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000690 bits 14:10) bits 0:4 use field AMP_THR_TABLE_104 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_18_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_104_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_104_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_104_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_104_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_104_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_103_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_103_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_103_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_103_set", value );

    /* (0x00000690 bits 9:5) bits 0:4 use field AMP_THR_TABLE_103 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_18_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_103_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_103_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_103_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_103_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000690 bits 9:5) bits 0:4 use field AMP_THR_TABLE_103 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_18_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_103_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_103_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_103_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_103_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_103_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_103_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_103_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_103_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000690 bits 9:5) bits 0:4 use field AMP_THR_TABLE_103 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000690 bits 9:5) bits 0:4 use field AMP_THR_TABLE_103 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_18_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_103_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_103_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_103_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_103_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_103_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_103_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000690 bits 9:5) bits 0:4 use field AMP_THR_TABLE_103 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_18_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_103_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_103_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_103_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_103_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_103_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_102_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_102_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_102_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_102_set", value );

    /* (0x00000690 bits 4:0) bits 0:4 use field AMP_THR_TABLE_102 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_18_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_102_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_102_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_102_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_102_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000690 bits 4:0) bits 0:4 use field AMP_THR_TABLE_102 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_18_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_102_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_102_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_102_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_102_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_102_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_102_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_102_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_102_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000690 bits 4:0) bits 0:4 use field AMP_THR_TABLE_102 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000690 bits 4:0) bits 0:4 use field AMP_THR_TABLE_102 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_18_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_102_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_102_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_102_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_102_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_102_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_102_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000690 bits 4:0) bits 0:4 use field AMP_THR_TABLE_102 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_18_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_102_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_102_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_102_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_18_BIT_AMP_THR_TABLE_102_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_102_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_113_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_113_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_113_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_113_set", value );

    /* (0x00000694 bits 29:25) bits 0:4 use field AMP_THR_TABLE_113 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_19_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_113_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_113_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_113_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_113_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000694 bits 29:25) bits 0:4 use field AMP_THR_TABLE_113 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_19_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_113_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_113_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_113_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_113_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_113_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_113_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_113_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_113_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000694 bits 29:25) bits 0:4 use field AMP_THR_TABLE_113 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000694 bits 29:25) bits 0:4 use field AMP_THR_TABLE_113 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_19_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_113_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_113_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_113_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_113_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_113_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_113_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000694 bits 29:25) bits 0:4 use field AMP_THR_TABLE_113 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_19_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_113_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_113_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_113_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_113_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_113_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_112_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_112_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_112_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_112_set", value );

    /* (0x00000694 bits 24:20) bits 0:4 use field AMP_THR_TABLE_112 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_19_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_112_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_112_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_112_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_112_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000694 bits 24:20) bits 0:4 use field AMP_THR_TABLE_112 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_19_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_112_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_112_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_112_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_112_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_112_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_112_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_112_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_112_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000694 bits 24:20) bits 0:4 use field AMP_THR_TABLE_112 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000694 bits 24:20) bits 0:4 use field AMP_THR_TABLE_112 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_19_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_112_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_112_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_112_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_112_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_112_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_112_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000694 bits 24:20) bits 0:4 use field AMP_THR_TABLE_112 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_19_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_112_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_112_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_112_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_112_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_112_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_111_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_111_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_111_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_111_set", value );

    /* (0x00000694 bits 19:15) bits 0:4 use field AMP_THR_TABLE_111 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_19_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_111_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_111_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_111_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_111_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000694 bits 19:15) bits 0:4 use field AMP_THR_TABLE_111 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_19_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_111_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_111_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_111_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_111_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_111_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_111_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_111_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_111_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000694 bits 19:15) bits 0:4 use field AMP_THR_TABLE_111 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000694 bits 19:15) bits 0:4 use field AMP_THR_TABLE_111 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_19_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_111_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_111_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_111_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_111_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_111_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_111_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000694 bits 19:15) bits 0:4 use field AMP_THR_TABLE_111 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_19_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_111_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_111_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_111_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_111_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_111_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_110_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_110_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_110_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_110_set", value );

    /* (0x00000694 bits 14:10) bits 0:4 use field AMP_THR_TABLE_110 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_19_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_110_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_110_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_110_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_110_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000694 bits 14:10) bits 0:4 use field AMP_THR_TABLE_110 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_19_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_110_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_110_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_110_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_110_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_110_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_110_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_110_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_110_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000694 bits 14:10) bits 0:4 use field AMP_THR_TABLE_110 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000694 bits 14:10) bits 0:4 use field AMP_THR_TABLE_110 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_19_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_110_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_110_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_110_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_110_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_110_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_110_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000694 bits 14:10) bits 0:4 use field AMP_THR_TABLE_110 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_19_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_110_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_110_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_110_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_110_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_110_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_109_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_109_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_109_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_109_set", value );

    /* (0x00000694 bits 9:5) bits 0:4 use field AMP_THR_TABLE_109 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_19_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_109_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_109_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_109_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_109_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000694 bits 9:5) bits 0:4 use field AMP_THR_TABLE_109 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_19_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_109_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_109_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_109_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_109_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_109_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_109_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_109_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_109_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000694 bits 9:5) bits 0:4 use field AMP_THR_TABLE_109 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000694 bits 9:5) bits 0:4 use field AMP_THR_TABLE_109 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_19_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_109_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_109_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_109_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_109_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_109_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_109_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000694 bits 9:5) bits 0:4 use field AMP_THR_TABLE_109 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_19_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_109_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_109_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_109_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_109_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_109_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_108_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_108_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_108_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_108_set", value );

    /* (0x00000694 bits 4:0) bits 0:4 use field AMP_THR_TABLE_108 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_19_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_108_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_108_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_108_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_108_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000694 bits 4:0) bits 0:4 use field AMP_THR_TABLE_108 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_19_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_108_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_108_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_108_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_108_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_108_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_108_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_108_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_108_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000694 bits 4:0) bits 0:4 use field AMP_THR_TABLE_108 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000694 bits 4:0) bits 0:4 use field AMP_THR_TABLE_108 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_19_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_108_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_108_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_108_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_108_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_108_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_108_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000694 bits 4:0) bits 0:4 use field AMP_THR_TABLE_108 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_19_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_108_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_108_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_108_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_19_BIT_AMP_THR_TABLE_108_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_108_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_119_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_119_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_119_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_119_set", value );

    /* (0x00000698 bits 29:25) bits 0:4 use field AMP_THR_TABLE_119 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_20_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_119_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_119_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_119_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_119_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000698 bits 29:25) bits 0:4 use field AMP_THR_TABLE_119 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_20_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_119_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_119_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_119_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_119_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_119_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_119_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_119_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_119_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000698 bits 29:25) bits 0:4 use field AMP_THR_TABLE_119 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000698 bits 29:25) bits 0:4 use field AMP_THR_TABLE_119 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_20_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_119_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_119_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_119_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_119_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_119_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_119_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000698 bits 29:25) bits 0:4 use field AMP_THR_TABLE_119 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_20_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_119_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_119_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_119_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_119_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_119_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_118_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_118_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_118_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_118_set", value );

    /* (0x00000698 bits 24:20) bits 0:4 use field AMP_THR_TABLE_118 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_20_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_118_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_118_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_118_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_118_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000698 bits 24:20) bits 0:4 use field AMP_THR_TABLE_118 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_20_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_118_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_118_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_118_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_118_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_118_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_118_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_118_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_118_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000698 bits 24:20) bits 0:4 use field AMP_THR_TABLE_118 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000698 bits 24:20) bits 0:4 use field AMP_THR_TABLE_118 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_20_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_118_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_118_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_118_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_118_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_118_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_118_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000698 bits 24:20) bits 0:4 use field AMP_THR_TABLE_118 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_20_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_118_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_118_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_118_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_118_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_118_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_117_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_117_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_117_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_117_set", value );

    /* (0x00000698 bits 19:15) bits 0:4 use field AMP_THR_TABLE_117 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_20_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_117_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_117_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_117_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_117_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000698 bits 19:15) bits 0:4 use field AMP_THR_TABLE_117 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_20_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_117_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_117_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_117_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_117_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_117_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_117_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_117_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_117_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000698 bits 19:15) bits 0:4 use field AMP_THR_TABLE_117 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000698 bits 19:15) bits 0:4 use field AMP_THR_TABLE_117 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_20_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_117_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_117_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_117_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_117_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_117_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_117_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000698 bits 19:15) bits 0:4 use field AMP_THR_TABLE_117 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_20_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_117_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_117_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_117_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_117_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_117_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_116_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_116_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_116_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_116_set", value );

    /* (0x00000698 bits 14:10) bits 0:4 use field AMP_THR_TABLE_116 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_20_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_116_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_116_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_116_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_116_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000698 bits 14:10) bits 0:4 use field AMP_THR_TABLE_116 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_20_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_116_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_116_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_116_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_116_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_116_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_116_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_116_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_116_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000698 bits 14:10) bits 0:4 use field AMP_THR_TABLE_116 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000698 bits 14:10) bits 0:4 use field AMP_THR_TABLE_116 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_20_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_116_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_116_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_116_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_116_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_116_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_116_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000698 bits 14:10) bits 0:4 use field AMP_THR_TABLE_116 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_20_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_116_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_116_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_116_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_116_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_116_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_115_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_115_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_115_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_115_set", value );

    /* (0x00000698 bits 9:5) bits 0:4 use field AMP_THR_TABLE_115 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_20_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_115_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_115_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_115_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_115_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000698 bits 9:5) bits 0:4 use field AMP_THR_TABLE_115 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_20_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_115_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_115_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_115_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_115_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_115_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_115_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_115_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_115_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000698 bits 9:5) bits 0:4 use field AMP_THR_TABLE_115 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000698 bits 9:5) bits 0:4 use field AMP_THR_TABLE_115 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_20_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_115_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_115_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_115_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_115_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_115_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_115_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000698 bits 9:5) bits 0:4 use field AMP_THR_TABLE_115 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_20_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_115_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_115_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_115_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_115_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_115_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_114_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_114_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_114_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_114_set", value );

    /* (0x00000698 bits 4:0) bits 0:4 use field AMP_THR_TABLE_114 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_20_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_114_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_114_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_114_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_114_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000698 bits 4:0) bits 0:4 use field AMP_THR_TABLE_114 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_20_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_114_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_114_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_114_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_114_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_114_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_114_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_114_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_114_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000698 bits 4:0) bits 0:4 use field AMP_THR_TABLE_114 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000698 bits 4:0) bits 0:4 use field AMP_THR_TABLE_114 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_20_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_114_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_114_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_114_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_114_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_114_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_114_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000698 bits 4:0) bits 0:4 use field AMP_THR_TABLE_114 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_20_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_114_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_114_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_114_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_20_BIT_AMP_THR_TABLE_114_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_114_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_125_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_125_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_125_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_125_set", value );

    /* (0x0000069c bits 29:25) bits 0:4 use field AMP_THR_TABLE_125 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_21_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_125_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_125_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_125_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_125_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000069c bits 29:25) bits 0:4 use field AMP_THR_TABLE_125 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_21_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_125_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_125_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_125_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_125_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_125_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_125_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_125_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_125_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000069c bits 29:25) bits 0:4 use field AMP_THR_TABLE_125 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000069c bits 29:25) bits 0:4 use field AMP_THR_TABLE_125 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_21_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_125_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_125_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_125_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_125_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_125_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_125_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000069c bits 29:25) bits 0:4 use field AMP_THR_TABLE_125 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_21_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_125_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_125_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_125_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_125_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_125_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_124_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_124_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_124_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_124_set", value );

    /* (0x0000069c bits 24:20) bits 0:4 use field AMP_THR_TABLE_124 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_21_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_124_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_124_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_124_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_124_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000069c bits 24:20) bits 0:4 use field AMP_THR_TABLE_124 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_21_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_124_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_124_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_124_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_124_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_124_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_124_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_124_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_124_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000069c bits 24:20) bits 0:4 use field AMP_THR_TABLE_124 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000069c bits 24:20) bits 0:4 use field AMP_THR_TABLE_124 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_21_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_124_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_124_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_124_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_124_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_124_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_124_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000069c bits 24:20) bits 0:4 use field AMP_THR_TABLE_124 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_21_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_124_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_124_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_124_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_124_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_124_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_123_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_123_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_123_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_123_set", value );

    /* (0x0000069c bits 19:15) bits 0:4 use field AMP_THR_TABLE_123 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_21_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_123_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_123_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_123_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_123_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000069c bits 19:15) bits 0:4 use field AMP_THR_TABLE_123 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_21_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_123_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_123_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_123_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_123_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_123_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_123_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_123_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_123_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000069c bits 19:15) bits 0:4 use field AMP_THR_TABLE_123 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000069c bits 19:15) bits 0:4 use field AMP_THR_TABLE_123 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_21_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_123_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_123_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_123_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_123_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_123_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_123_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000069c bits 19:15) bits 0:4 use field AMP_THR_TABLE_123 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_21_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_123_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_123_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_123_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_123_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_123_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_122_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_122_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_122_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_122_set", value );

    /* (0x0000069c bits 14:10) bits 0:4 use field AMP_THR_TABLE_122 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_21_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_122_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_122_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_122_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_122_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000069c bits 14:10) bits 0:4 use field AMP_THR_TABLE_122 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_21_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_122_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_122_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_122_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_122_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_122_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_122_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_122_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_122_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000069c bits 14:10) bits 0:4 use field AMP_THR_TABLE_122 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000069c bits 14:10) bits 0:4 use field AMP_THR_TABLE_122 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_21_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_122_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_122_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_122_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_122_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_122_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_122_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000069c bits 14:10) bits 0:4 use field AMP_THR_TABLE_122 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_21_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_122_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_122_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_122_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_122_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_122_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_121_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_121_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_121_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_121_set", value );

    /* (0x0000069c bits 9:5) bits 0:4 use field AMP_THR_TABLE_121 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_21_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_121_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_121_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_121_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_121_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000069c bits 9:5) bits 0:4 use field AMP_THR_TABLE_121 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_21_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_121_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_121_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_121_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_121_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_121_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_121_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_121_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_121_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000069c bits 9:5) bits 0:4 use field AMP_THR_TABLE_121 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000069c bits 9:5) bits 0:4 use field AMP_THR_TABLE_121 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_21_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_121_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_121_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_121_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_121_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_121_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_121_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000069c bits 9:5) bits 0:4 use field AMP_THR_TABLE_121 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_21_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_121_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_121_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_121_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_121_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_121_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_120_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_120_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_120_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_120_set", value );

    /* (0x0000069c bits 4:0) bits 0:4 use field AMP_THR_TABLE_120 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_21_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_120_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_120_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_120_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_120_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000069c bits 4:0) bits 0:4 use field AMP_THR_TABLE_120 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_21_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_120_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_120_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_120_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_120_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_120_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_120_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_120_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_120_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000069c bits 4:0) bits 0:4 use field AMP_THR_TABLE_120 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000069c bits 4:0) bits 0:4 use field AMP_THR_TABLE_120 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_21_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_120_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_120_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_120_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_120_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_120_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_120_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000069c bits 4:0) bits 0:4 use field AMP_THR_TABLE_120 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_21_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_120_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_120_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_120_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_21_BIT_AMP_THR_TABLE_120_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_120_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_131_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_131_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_131_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_131_set", value );

    /* (0x000006a0 bits 29:25) bits 0:4 use field AMP_THR_TABLE_131 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_22_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_131_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_131_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_131_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_131_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006a0 bits 29:25) bits 0:4 use field AMP_THR_TABLE_131 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_22_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_131_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_131_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_131_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_131_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_131_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_131_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_131_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_131_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006a0 bits 29:25) bits 0:4 use field AMP_THR_TABLE_131 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006a0 bits 29:25) bits 0:4 use field AMP_THR_TABLE_131 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_22_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_131_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_131_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_131_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_131_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_131_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_131_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006a0 bits 29:25) bits 0:4 use field AMP_THR_TABLE_131 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_22_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_131_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_131_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_131_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_131_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_131_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_130_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_130_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_130_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_130_set", value );

    /* (0x000006a0 bits 24:20) bits 0:4 use field AMP_THR_TABLE_130 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_22_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_130_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_130_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_130_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_130_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006a0 bits 24:20) bits 0:4 use field AMP_THR_TABLE_130 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_22_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_130_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_130_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_130_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_130_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_130_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_130_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_130_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_130_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006a0 bits 24:20) bits 0:4 use field AMP_THR_TABLE_130 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006a0 bits 24:20) bits 0:4 use field AMP_THR_TABLE_130 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_22_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_130_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_130_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_130_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_130_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_130_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_130_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006a0 bits 24:20) bits 0:4 use field AMP_THR_TABLE_130 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_22_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_130_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_130_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_130_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_130_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_130_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_129_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_129_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_129_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_129_set", value );

    /* (0x000006a0 bits 19:15) bits 0:4 use field AMP_THR_TABLE_129 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_22_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_129_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_129_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_129_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_129_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006a0 bits 19:15) bits 0:4 use field AMP_THR_TABLE_129 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_22_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_129_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_129_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_129_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_129_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_129_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_129_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_129_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_129_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006a0 bits 19:15) bits 0:4 use field AMP_THR_TABLE_129 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006a0 bits 19:15) bits 0:4 use field AMP_THR_TABLE_129 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_22_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_129_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_129_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_129_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_129_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_129_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_129_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006a0 bits 19:15) bits 0:4 use field AMP_THR_TABLE_129 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_22_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_129_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_129_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_129_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_129_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_129_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_128_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_128_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_128_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_128_set", value );

    /* (0x000006a0 bits 14:10) bits 0:4 use field AMP_THR_TABLE_128 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_22_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_128_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_128_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_128_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_128_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006a0 bits 14:10) bits 0:4 use field AMP_THR_TABLE_128 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_22_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_128_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_128_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_128_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_128_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_128_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_128_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_128_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_128_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006a0 bits 14:10) bits 0:4 use field AMP_THR_TABLE_128 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006a0 bits 14:10) bits 0:4 use field AMP_THR_TABLE_128 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_22_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_128_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_128_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_128_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_128_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_128_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_128_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006a0 bits 14:10) bits 0:4 use field AMP_THR_TABLE_128 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_22_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_128_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_128_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_128_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_128_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_128_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_127_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_127_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_127_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_127_set", value );

    /* (0x000006a0 bits 9:5) bits 0:4 use field AMP_THR_TABLE_127 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_22_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_127_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_127_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_127_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_127_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006a0 bits 9:5) bits 0:4 use field AMP_THR_TABLE_127 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_22_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_127_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_127_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_127_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_127_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_127_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_127_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_127_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_127_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006a0 bits 9:5) bits 0:4 use field AMP_THR_TABLE_127 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006a0 bits 9:5) bits 0:4 use field AMP_THR_TABLE_127 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_22_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_127_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_127_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_127_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_127_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_127_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_127_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006a0 bits 9:5) bits 0:4 use field AMP_THR_TABLE_127 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_22_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_127_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_127_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_127_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_127_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_127_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_126_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_126_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_126_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_126_set", value );

    /* (0x000006a0 bits 4:0) bits 0:4 use field AMP_THR_TABLE_126 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_22_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_126_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_126_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_126_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_126_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006a0 bits 4:0) bits 0:4 use field AMP_THR_TABLE_126 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_22_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_126_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_126_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_126_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_126_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_126_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_126_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_126_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_126_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006a0 bits 4:0) bits 0:4 use field AMP_THR_TABLE_126 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006a0 bits 4:0) bits 0:4 use field AMP_THR_TABLE_126 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_22_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_126_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_126_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_126_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_126_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_126_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_126_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006a0 bits 4:0) bits 0:4 use field AMP_THR_TABLE_126 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_22_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_126_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_126_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_126_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_22_BIT_AMP_THR_TABLE_126_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_126_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_137_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_137_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_137_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_137_set", value );

    /* (0x000006a4 bits 29:25) bits 0:4 use field AMP_THR_TABLE_137 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_23_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_137_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_137_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_137_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_137_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006a4 bits 29:25) bits 0:4 use field AMP_THR_TABLE_137 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_23_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_137_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_137_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_137_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_137_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_137_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_137_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_137_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_137_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006a4 bits 29:25) bits 0:4 use field AMP_THR_TABLE_137 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006a4 bits 29:25) bits 0:4 use field AMP_THR_TABLE_137 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_23_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_137_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_137_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_137_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_137_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_137_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_137_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006a4 bits 29:25) bits 0:4 use field AMP_THR_TABLE_137 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_23_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_137_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_137_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_137_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_137_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_137_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_136_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_136_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_136_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_136_set", value );

    /* (0x000006a4 bits 24:20) bits 0:4 use field AMP_THR_TABLE_136 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_23_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_136_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_136_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_136_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_136_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006a4 bits 24:20) bits 0:4 use field AMP_THR_TABLE_136 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_23_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_136_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_136_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_136_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_136_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_136_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_136_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_136_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_136_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006a4 bits 24:20) bits 0:4 use field AMP_THR_TABLE_136 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006a4 bits 24:20) bits 0:4 use field AMP_THR_TABLE_136 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_23_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_136_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_136_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_136_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_136_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_136_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_136_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006a4 bits 24:20) bits 0:4 use field AMP_THR_TABLE_136 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_23_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_136_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_136_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_136_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_136_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_136_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_135_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_135_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_135_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_135_set", value );

    /* (0x000006a4 bits 19:15) bits 0:4 use field AMP_THR_TABLE_135 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_23_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_135_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_135_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_135_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_135_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006a4 bits 19:15) bits 0:4 use field AMP_THR_TABLE_135 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_23_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_135_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_135_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_135_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_135_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_135_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_135_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_135_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_135_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006a4 bits 19:15) bits 0:4 use field AMP_THR_TABLE_135 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006a4 bits 19:15) bits 0:4 use field AMP_THR_TABLE_135 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_23_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_135_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_135_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_135_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_135_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_135_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_135_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006a4 bits 19:15) bits 0:4 use field AMP_THR_TABLE_135 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_23_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_135_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_135_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_135_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_135_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_135_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_134_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_134_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_134_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_134_set", value );

    /* (0x000006a4 bits 14:10) bits 0:4 use field AMP_THR_TABLE_134 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_23_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_134_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_134_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_134_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_134_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006a4 bits 14:10) bits 0:4 use field AMP_THR_TABLE_134 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_23_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_134_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_134_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_134_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_134_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_134_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_134_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_134_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_134_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006a4 bits 14:10) bits 0:4 use field AMP_THR_TABLE_134 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006a4 bits 14:10) bits 0:4 use field AMP_THR_TABLE_134 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_23_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_134_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_134_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_134_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_134_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_134_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_134_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006a4 bits 14:10) bits 0:4 use field AMP_THR_TABLE_134 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_23_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_134_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_134_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_134_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_134_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_134_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_133_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_133_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_133_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_133_set", value );

    /* (0x000006a4 bits 9:5) bits 0:4 use field AMP_THR_TABLE_133 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_23_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_133_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_133_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_133_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_133_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006a4 bits 9:5) bits 0:4 use field AMP_THR_TABLE_133 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_23_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_133_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_133_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_133_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_133_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_133_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_133_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_133_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_133_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006a4 bits 9:5) bits 0:4 use field AMP_THR_TABLE_133 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006a4 bits 9:5) bits 0:4 use field AMP_THR_TABLE_133 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_23_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_133_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_133_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_133_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_133_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_133_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_133_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006a4 bits 9:5) bits 0:4 use field AMP_THR_TABLE_133 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_23_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_133_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_133_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_133_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_133_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_133_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_132_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_132_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_132_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_132_set", value );

    /* (0x000006a4 bits 4:0) bits 0:4 use field AMP_THR_TABLE_132 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_23_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_132_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_132_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_132_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_132_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006a4 bits 4:0) bits 0:4 use field AMP_THR_TABLE_132 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_23_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_132_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_132_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_132_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_132_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_132_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_132_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_132_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_132_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006a4 bits 4:0) bits 0:4 use field AMP_THR_TABLE_132 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006a4 bits 4:0) bits 0:4 use field AMP_THR_TABLE_132 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_23_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_132_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_132_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_132_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_132_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_132_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_132_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006a4 bits 4:0) bits 0:4 use field AMP_THR_TABLE_132 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_23_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_132_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_132_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_132_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_23_BIT_AMP_THR_TABLE_132_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_132_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_143_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_143_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_143_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_143_set", value );

    /* (0x000006a8 bits 29:25) bits 0:4 use field AMP_THR_TABLE_143 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_24_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_143_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_143_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_143_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_143_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006a8 bits 29:25) bits 0:4 use field AMP_THR_TABLE_143 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_24_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_143_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_143_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_143_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_143_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_143_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_143_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_143_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_143_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006a8 bits 29:25) bits 0:4 use field AMP_THR_TABLE_143 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006a8 bits 29:25) bits 0:4 use field AMP_THR_TABLE_143 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_24_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_143_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_143_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_143_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_143_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_143_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_143_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006a8 bits 29:25) bits 0:4 use field AMP_THR_TABLE_143 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_24_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_143_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_143_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_143_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_143_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_143_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_142_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_142_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_142_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_142_set", value );

    /* (0x000006a8 bits 24:20) bits 0:4 use field AMP_THR_TABLE_142 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_24_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_142_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_142_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_142_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_142_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006a8 bits 24:20) bits 0:4 use field AMP_THR_TABLE_142 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_24_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_142_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_142_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_142_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_142_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_142_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_142_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_142_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_142_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006a8 bits 24:20) bits 0:4 use field AMP_THR_TABLE_142 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006a8 bits 24:20) bits 0:4 use field AMP_THR_TABLE_142 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_24_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_142_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_142_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_142_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_142_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_142_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_142_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006a8 bits 24:20) bits 0:4 use field AMP_THR_TABLE_142 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_24_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_142_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_142_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_142_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_142_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_142_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_141_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_141_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_141_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_141_set", value );

    /* (0x000006a8 bits 19:15) bits 0:4 use field AMP_THR_TABLE_141 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_24_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_141_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_141_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_141_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_141_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006a8 bits 19:15) bits 0:4 use field AMP_THR_TABLE_141 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_24_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_141_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_141_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_141_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_141_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_141_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_141_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_141_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_141_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006a8 bits 19:15) bits 0:4 use field AMP_THR_TABLE_141 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006a8 bits 19:15) bits 0:4 use field AMP_THR_TABLE_141 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_24_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_141_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_141_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_141_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_141_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_141_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_141_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006a8 bits 19:15) bits 0:4 use field AMP_THR_TABLE_141 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_24_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_141_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_141_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_141_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_141_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_141_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_140_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_140_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_140_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_140_set", value );

    /* (0x000006a8 bits 14:10) bits 0:4 use field AMP_THR_TABLE_140 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_24_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_140_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_140_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_140_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_140_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006a8 bits 14:10) bits 0:4 use field AMP_THR_TABLE_140 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_24_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_140_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_140_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_140_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_140_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_140_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_140_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_140_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_140_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006a8 bits 14:10) bits 0:4 use field AMP_THR_TABLE_140 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006a8 bits 14:10) bits 0:4 use field AMP_THR_TABLE_140 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_24_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_140_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_140_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_140_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_140_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_140_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_140_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006a8 bits 14:10) bits 0:4 use field AMP_THR_TABLE_140 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_24_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_140_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_140_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_140_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_140_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_140_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_139_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_139_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_139_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_139_set", value );

    /* (0x000006a8 bits 9:5) bits 0:4 use field AMP_THR_TABLE_139 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_24_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_139_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_139_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_139_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_139_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006a8 bits 9:5) bits 0:4 use field AMP_THR_TABLE_139 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_24_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_139_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_139_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_139_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_139_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_139_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_139_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_139_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_139_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006a8 bits 9:5) bits 0:4 use field AMP_THR_TABLE_139 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006a8 bits 9:5) bits 0:4 use field AMP_THR_TABLE_139 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_24_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_139_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_139_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_139_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_139_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_139_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_139_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006a8 bits 9:5) bits 0:4 use field AMP_THR_TABLE_139 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_24_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_139_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_139_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_139_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_139_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_139_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_138_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_138_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_138_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_138_set", value );

    /* (0x000006a8 bits 4:0) bits 0:4 use field AMP_THR_TABLE_138 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_24_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_138_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_138_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_138_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_138_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006a8 bits 4:0) bits 0:4 use field AMP_THR_TABLE_138 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_24_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_138_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_138_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_138_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_138_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_138_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_138_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_138_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_138_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006a8 bits 4:0) bits 0:4 use field AMP_THR_TABLE_138 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006a8 bits 4:0) bits 0:4 use field AMP_THR_TABLE_138 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_24_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_138_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_138_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_138_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_138_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_138_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_138_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006a8 bits 4:0) bits 0:4 use field AMP_THR_TABLE_138 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_24_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_138_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_138_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_138_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_24_BIT_AMP_THR_TABLE_138_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_138_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_149_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_149_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_149_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_149_set", value );

    /* (0x000006ac bits 29:25) bits 0:4 use field AMP_THR_TABLE_149 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_25_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_149_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_149_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_149_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_149_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006ac bits 29:25) bits 0:4 use field AMP_THR_TABLE_149 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_25_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_149_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_149_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_149_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_149_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_149_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_149_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_149_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_149_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006ac bits 29:25) bits 0:4 use field AMP_THR_TABLE_149 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006ac bits 29:25) bits 0:4 use field AMP_THR_TABLE_149 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_25_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_149_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_149_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_149_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_149_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_149_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_149_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006ac bits 29:25) bits 0:4 use field AMP_THR_TABLE_149 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_25_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_149_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_149_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_149_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_149_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_149_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_148_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_148_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_148_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_148_set", value );

    /* (0x000006ac bits 24:20) bits 0:4 use field AMP_THR_TABLE_148 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_25_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_148_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_148_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_148_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_148_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006ac bits 24:20) bits 0:4 use field AMP_THR_TABLE_148 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_25_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_148_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_148_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_148_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_148_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_148_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_148_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_148_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_148_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006ac bits 24:20) bits 0:4 use field AMP_THR_TABLE_148 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006ac bits 24:20) bits 0:4 use field AMP_THR_TABLE_148 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_25_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_148_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_148_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_148_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_148_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_148_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_148_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006ac bits 24:20) bits 0:4 use field AMP_THR_TABLE_148 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_25_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_148_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_148_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_148_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_148_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_148_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_147_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_147_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_147_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_147_set", value );

    /* (0x000006ac bits 19:15) bits 0:4 use field AMP_THR_TABLE_147 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_25_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_147_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_147_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_147_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_147_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006ac bits 19:15) bits 0:4 use field AMP_THR_TABLE_147 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_25_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_147_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_147_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_147_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_147_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_147_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_147_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_147_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_147_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006ac bits 19:15) bits 0:4 use field AMP_THR_TABLE_147 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006ac bits 19:15) bits 0:4 use field AMP_THR_TABLE_147 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_25_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_147_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_147_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_147_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_147_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_147_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_147_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006ac bits 19:15) bits 0:4 use field AMP_THR_TABLE_147 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_25_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_147_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_147_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_147_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_147_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_147_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_146_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_146_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_146_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_146_set", value );

    /* (0x000006ac bits 14:10) bits 0:4 use field AMP_THR_TABLE_146 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_25_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_146_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_146_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_146_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_146_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006ac bits 14:10) bits 0:4 use field AMP_THR_TABLE_146 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_25_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_146_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_146_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_146_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_146_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_146_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_146_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_146_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_146_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006ac bits 14:10) bits 0:4 use field AMP_THR_TABLE_146 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006ac bits 14:10) bits 0:4 use field AMP_THR_TABLE_146 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_25_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_146_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_146_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_146_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_146_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_146_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_146_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006ac bits 14:10) bits 0:4 use field AMP_THR_TABLE_146 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_25_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_146_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_146_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_146_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_146_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_146_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_145_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_145_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_145_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_145_set", value );

    /* (0x000006ac bits 9:5) bits 0:4 use field AMP_THR_TABLE_145 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_25_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_145_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_145_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_145_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_145_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006ac bits 9:5) bits 0:4 use field AMP_THR_TABLE_145 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_25_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_145_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_145_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_145_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_145_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_145_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_145_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_145_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_145_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006ac bits 9:5) bits 0:4 use field AMP_THR_TABLE_145 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006ac bits 9:5) bits 0:4 use field AMP_THR_TABLE_145 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_25_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_145_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_145_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_145_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_145_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_145_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_145_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006ac bits 9:5) bits 0:4 use field AMP_THR_TABLE_145 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_25_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_145_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_145_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_145_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_145_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_145_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_144_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_144_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_144_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_144_set", value );

    /* (0x000006ac bits 4:0) bits 0:4 use field AMP_THR_TABLE_144 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_25_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_144_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_144_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_144_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_144_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006ac bits 4:0) bits 0:4 use field AMP_THR_TABLE_144 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_25_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_144_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_144_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_144_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_144_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_144_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_144_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_144_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_144_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006ac bits 4:0) bits 0:4 use field AMP_THR_TABLE_144 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006ac bits 4:0) bits 0:4 use field AMP_THR_TABLE_144 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_25_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_144_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_144_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_144_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_144_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_144_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_144_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006ac bits 4:0) bits 0:4 use field AMP_THR_TABLE_144 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_25_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_144_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_144_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_144_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_25_BIT_AMP_THR_TABLE_144_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_144_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_155_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_155_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_155_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_155_set", value );

    /* (0x000006b0 bits 29:25) bits 0:4 use field AMP_THR_TABLE_155 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_26_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_155_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_155_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_155_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_155_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006b0 bits 29:25) bits 0:4 use field AMP_THR_TABLE_155 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_26_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_155_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_155_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_155_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_155_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_155_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_155_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_155_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_155_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006b0 bits 29:25) bits 0:4 use field AMP_THR_TABLE_155 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006b0 bits 29:25) bits 0:4 use field AMP_THR_TABLE_155 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_26_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_155_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_155_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_155_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_155_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_155_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_155_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006b0 bits 29:25) bits 0:4 use field AMP_THR_TABLE_155 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_26_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_155_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_155_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_155_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_155_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_155_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_154_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_154_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_154_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_154_set", value );

    /* (0x000006b0 bits 24:20) bits 0:4 use field AMP_THR_TABLE_154 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_26_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_154_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_154_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_154_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_154_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006b0 bits 24:20) bits 0:4 use field AMP_THR_TABLE_154 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_26_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_154_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_154_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_154_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_154_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_154_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_154_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_154_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_154_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006b0 bits 24:20) bits 0:4 use field AMP_THR_TABLE_154 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006b0 bits 24:20) bits 0:4 use field AMP_THR_TABLE_154 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_26_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_154_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_154_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_154_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_154_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_154_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_154_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006b0 bits 24:20) bits 0:4 use field AMP_THR_TABLE_154 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_26_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_154_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_154_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_154_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_154_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_154_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_153_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_153_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_153_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_153_set", value );

    /* (0x000006b0 bits 19:15) bits 0:4 use field AMP_THR_TABLE_153 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_26_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_153_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_153_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_153_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_153_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006b0 bits 19:15) bits 0:4 use field AMP_THR_TABLE_153 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_26_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_153_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_153_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_153_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_153_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_153_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_153_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_153_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_153_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006b0 bits 19:15) bits 0:4 use field AMP_THR_TABLE_153 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006b0 bits 19:15) bits 0:4 use field AMP_THR_TABLE_153 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_26_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_153_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_153_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_153_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_153_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_153_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_153_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006b0 bits 19:15) bits 0:4 use field AMP_THR_TABLE_153 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_26_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_153_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_153_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_153_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_153_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_153_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_152_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_152_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_152_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_152_set", value );

    /* (0x000006b0 bits 14:10) bits 0:4 use field AMP_THR_TABLE_152 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_26_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_152_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_152_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_152_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_152_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006b0 bits 14:10) bits 0:4 use field AMP_THR_TABLE_152 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_26_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_152_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_152_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_152_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_152_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_152_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_152_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_152_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_152_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006b0 bits 14:10) bits 0:4 use field AMP_THR_TABLE_152 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006b0 bits 14:10) bits 0:4 use field AMP_THR_TABLE_152 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_26_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_152_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_152_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_152_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_152_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_152_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_152_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006b0 bits 14:10) bits 0:4 use field AMP_THR_TABLE_152 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_26_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_152_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_152_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_152_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_152_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_152_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_151_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_151_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_151_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_151_set", value );

    /* (0x000006b0 bits 9:5) bits 0:4 use field AMP_THR_TABLE_151 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_26_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_151_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_151_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_151_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_151_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006b0 bits 9:5) bits 0:4 use field AMP_THR_TABLE_151 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_26_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_151_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_151_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_151_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_151_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_151_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_151_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_151_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_151_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006b0 bits 9:5) bits 0:4 use field AMP_THR_TABLE_151 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006b0 bits 9:5) bits 0:4 use field AMP_THR_TABLE_151 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_26_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_151_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_151_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_151_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_151_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_151_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_151_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006b0 bits 9:5) bits 0:4 use field AMP_THR_TABLE_151 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_26_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_151_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_151_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_151_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_151_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_151_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_150_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_150_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_150_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_150_set", value );

    /* (0x000006b0 bits 4:0) bits 0:4 use field AMP_THR_TABLE_150 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_26_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_150_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_150_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_150_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_150_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006b0 bits 4:0) bits 0:4 use field AMP_THR_TABLE_150 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_26_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_150_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_150_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_150_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_150_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_150_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_150_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_150_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_150_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006b0 bits 4:0) bits 0:4 use field AMP_THR_TABLE_150 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006b0 bits 4:0) bits 0:4 use field AMP_THR_TABLE_150 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_26_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_150_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_150_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_150_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_150_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_150_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_150_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006b0 bits 4:0) bits 0:4 use field AMP_THR_TABLE_150 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_26_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_150_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_150_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_150_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_26_BIT_AMP_THR_TABLE_150_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_150_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_161_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_161_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_161_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_161_set", value );

    /* (0x000006b4 bits 29:25) bits 0:4 use field AMP_THR_TABLE_161 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_27_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_161_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_161_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_161_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_161_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006b4 bits 29:25) bits 0:4 use field AMP_THR_TABLE_161 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_27_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_161_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_161_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_161_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_161_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_161_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_161_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_161_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_161_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006b4 bits 29:25) bits 0:4 use field AMP_THR_TABLE_161 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006b4 bits 29:25) bits 0:4 use field AMP_THR_TABLE_161 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_27_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_161_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_161_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_161_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_161_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_161_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_161_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006b4 bits 29:25) bits 0:4 use field AMP_THR_TABLE_161 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_27_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_161_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_161_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_161_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_161_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_161_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_160_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_160_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_160_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_160_set", value );

    /* (0x000006b4 bits 24:20) bits 0:4 use field AMP_THR_TABLE_160 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_27_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_160_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_160_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_160_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_160_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006b4 bits 24:20) bits 0:4 use field AMP_THR_TABLE_160 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_27_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_160_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_160_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_160_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_160_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_160_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_160_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_160_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_160_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006b4 bits 24:20) bits 0:4 use field AMP_THR_TABLE_160 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006b4 bits 24:20) bits 0:4 use field AMP_THR_TABLE_160 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_27_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_160_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_160_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_160_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_160_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_160_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_160_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006b4 bits 24:20) bits 0:4 use field AMP_THR_TABLE_160 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_27_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_160_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_160_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_160_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_160_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_160_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_159_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_159_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_159_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_159_set", value );

    /* (0x000006b4 bits 19:15) bits 0:4 use field AMP_THR_TABLE_159 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_27_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_159_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_159_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_159_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_159_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006b4 bits 19:15) bits 0:4 use field AMP_THR_TABLE_159 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_27_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_159_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_159_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_159_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_159_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_159_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_159_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_159_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_159_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006b4 bits 19:15) bits 0:4 use field AMP_THR_TABLE_159 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006b4 bits 19:15) bits 0:4 use field AMP_THR_TABLE_159 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_27_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_159_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_159_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_159_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_159_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_159_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_159_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006b4 bits 19:15) bits 0:4 use field AMP_THR_TABLE_159 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_27_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_159_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_159_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_159_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_159_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_159_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_158_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_158_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_158_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_158_set", value );

    /* (0x000006b4 bits 14:10) bits 0:4 use field AMP_THR_TABLE_158 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_27_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_158_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_158_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_158_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_158_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006b4 bits 14:10) bits 0:4 use field AMP_THR_TABLE_158 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_27_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_158_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_158_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_158_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_158_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_158_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_158_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_158_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_158_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006b4 bits 14:10) bits 0:4 use field AMP_THR_TABLE_158 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006b4 bits 14:10) bits 0:4 use field AMP_THR_TABLE_158 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_27_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_158_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_158_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_158_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_158_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_158_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_158_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006b4 bits 14:10) bits 0:4 use field AMP_THR_TABLE_158 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_27_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_158_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_158_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_158_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_158_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_158_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_157_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_157_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_157_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_157_set", value );

    /* (0x000006b4 bits 9:5) bits 0:4 use field AMP_THR_TABLE_157 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_27_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_157_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_157_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_157_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_157_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006b4 bits 9:5) bits 0:4 use field AMP_THR_TABLE_157 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_27_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_157_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_157_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_157_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_157_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_157_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_157_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_157_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_157_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006b4 bits 9:5) bits 0:4 use field AMP_THR_TABLE_157 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006b4 bits 9:5) bits 0:4 use field AMP_THR_TABLE_157 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_27_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_157_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_157_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_157_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_157_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_157_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_157_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006b4 bits 9:5) bits 0:4 use field AMP_THR_TABLE_157 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_27_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_157_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_157_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_157_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_157_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_157_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_156_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_156_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_156_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_156_set", value );

    /* (0x000006b4 bits 4:0) bits 0:4 use field AMP_THR_TABLE_156 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_27_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_156_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_156_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_156_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_156_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006b4 bits 4:0) bits 0:4 use field AMP_THR_TABLE_156 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_27_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_156_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_156_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_156_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_156_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_156_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_156_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_156_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_156_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006b4 bits 4:0) bits 0:4 use field AMP_THR_TABLE_156 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006b4 bits 4:0) bits 0:4 use field AMP_THR_TABLE_156 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_27_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_156_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_156_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_156_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_156_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_156_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_156_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006b4 bits 4:0) bits 0:4 use field AMP_THR_TABLE_156 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_27_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_156_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_156_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_156_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_27_BIT_AMP_THR_TABLE_156_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_156_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_167_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_167_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_167_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_167_set", value );

    /* (0x000006b8 bits 29:25) bits 0:4 use field AMP_THR_TABLE_167 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_28_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_167_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_167_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_167_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_167_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006b8 bits 29:25) bits 0:4 use field AMP_THR_TABLE_167 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_28_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_167_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_167_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_167_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_167_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_167_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_167_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_167_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_167_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006b8 bits 29:25) bits 0:4 use field AMP_THR_TABLE_167 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006b8 bits 29:25) bits 0:4 use field AMP_THR_TABLE_167 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_28_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_167_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_167_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_167_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_167_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_167_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_167_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006b8 bits 29:25) bits 0:4 use field AMP_THR_TABLE_167 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_28_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_167_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_167_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_167_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_167_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_167_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_166_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_166_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_166_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_166_set", value );

    /* (0x000006b8 bits 24:20) bits 0:4 use field AMP_THR_TABLE_166 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_28_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_166_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_166_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_166_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_166_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006b8 bits 24:20) bits 0:4 use field AMP_THR_TABLE_166 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_28_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_166_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_166_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_166_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_166_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_166_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_166_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_166_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_166_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006b8 bits 24:20) bits 0:4 use field AMP_THR_TABLE_166 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006b8 bits 24:20) bits 0:4 use field AMP_THR_TABLE_166 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_28_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_166_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_166_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_166_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_166_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_166_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_166_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006b8 bits 24:20) bits 0:4 use field AMP_THR_TABLE_166 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_28_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_166_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_166_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_166_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_166_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_166_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_165_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_165_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_165_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_165_set", value );

    /* (0x000006b8 bits 19:15) bits 0:4 use field AMP_THR_TABLE_165 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_28_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_165_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_165_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_165_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_165_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006b8 bits 19:15) bits 0:4 use field AMP_THR_TABLE_165 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_28_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_165_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_165_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_165_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_165_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_165_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_165_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_165_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_165_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006b8 bits 19:15) bits 0:4 use field AMP_THR_TABLE_165 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006b8 bits 19:15) bits 0:4 use field AMP_THR_TABLE_165 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_28_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_165_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_165_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_165_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_165_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_165_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_165_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006b8 bits 19:15) bits 0:4 use field AMP_THR_TABLE_165 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_28_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_165_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_165_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_165_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_165_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_165_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_164_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_164_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_164_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_164_set", value );

    /* (0x000006b8 bits 14:10) bits 0:4 use field AMP_THR_TABLE_164 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_28_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_164_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_164_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_164_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_164_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006b8 bits 14:10) bits 0:4 use field AMP_THR_TABLE_164 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_28_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_164_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_164_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_164_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_164_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_164_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_164_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_164_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_164_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006b8 bits 14:10) bits 0:4 use field AMP_THR_TABLE_164 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006b8 bits 14:10) bits 0:4 use field AMP_THR_TABLE_164 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_28_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_164_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_164_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_164_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_164_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_164_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_164_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006b8 bits 14:10) bits 0:4 use field AMP_THR_TABLE_164 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_28_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_164_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_164_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_164_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_164_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_164_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_163_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_163_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_163_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_163_set", value );

    /* (0x000006b8 bits 9:5) bits 0:4 use field AMP_THR_TABLE_163 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_28_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_163_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_163_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_163_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_163_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006b8 bits 9:5) bits 0:4 use field AMP_THR_TABLE_163 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_28_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_163_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_163_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_163_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_163_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_163_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_163_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_163_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_163_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006b8 bits 9:5) bits 0:4 use field AMP_THR_TABLE_163 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006b8 bits 9:5) bits 0:4 use field AMP_THR_TABLE_163 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_28_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_163_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_163_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_163_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_163_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_163_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_163_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006b8 bits 9:5) bits 0:4 use field AMP_THR_TABLE_163 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_28_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_163_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_163_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_163_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_163_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_163_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_162_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_162_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_162_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_162_set", value );

    /* (0x000006b8 bits 4:0) bits 0:4 use field AMP_THR_TABLE_162 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_28_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_162_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_162_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_162_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_162_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006b8 bits 4:0) bits 0:4 use field AMP_THR_TABLE_162 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_28_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_162_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_162_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_162_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_162_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_162_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_162_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_162_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_162_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006b8 bits 4:0) bits 0:4 use field AMP_THR_TABLE_162 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006b8 bits 4:0) bits 0:4 use field AMP_THR_TABLE_162 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_28_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_162_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_162_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_162_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_162_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_162_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_162_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006b8 bits 4:0) bits 0:4 use field AMP_THR_TABLE_162 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_28_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_162_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_162_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_162_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_28_BIT_AMP_THR_TABLE_162_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_162_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_173_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_173_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_173_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_173_set", value );

    /* (0x000006bc bits 29:25) bits 0:4 use field AMP_THR_TABLE_173 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_29_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_173_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_173_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_173_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_173_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006bc bits 29:25) bits 0:4 use field AMP_THR_TABLE_173 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_29_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_173_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_173_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_173_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_173_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_173_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_173_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_173_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_173_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006bc bits 29:25) bits 0:4 use field AMP_THR_TABLE_173 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006bc bits 29:25) bits 0:4 use field AMP_THR_TABLE_173 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_29_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_173_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_173_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_173_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_173_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_173_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_173_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006bc bits 29:25) bits 0:4 use field AMP_THR_TABLE_173 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_29_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_173_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_173_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_173_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_173_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_173_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_172_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_172_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_172_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_172_set", value );

    /* (0x000006bc bits 24:20) bits 0:4 use field AMP_THR_TABLE_172 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_29_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_172_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_172_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_172_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_172_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006bc bits 24:20) bits 0:4 use field AMP_THR_TABLE_172 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_29_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_172_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_172_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_172_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_172_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_172_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_172_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_172_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_172_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006bc bits 24:20) bits 0:4 use field AMP_THR_TABLE_172 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006bc bits 24:20) bits 0:4 use field AMP_THR_TABLE_172 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_29_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_172_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_172_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_172_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_172_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_172_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_172_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006bc bits 24:20) bits 0:4 use field AMP_THR_TABLE_172 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_29_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_172_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_172_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_172_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_172_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_172_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_171_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_171_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_171_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_171_set", value );

    /* (0x000006bc bits 19:15) bits 0:4 use field AMP_THR_TABLE_171 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_29_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_171_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_171_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_171_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_171_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006bc bits 19:15) bits 0:4 use field AMP_THR_TABLE_171 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_29_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_171_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_171_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_171_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_171_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_171_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_171_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_171_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_171_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006bc bits 19:15) bits 0:4 use field AMP_THR_TABLE_171 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006bc bits 19:15) bits 0:4 use field AMP_THR_TABLE_171 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_29_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_171_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_171_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_171_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_171_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_171_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_171_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006bc bits 19:15) bits 0:4 use field AMP_THR_TABLE_171 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_29_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_171_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_171_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_171_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_171_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_171_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_170_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_170_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_170_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_170_set", value );

    /* (0x000006bc bits 14:10) bits 0:4 use field AMP_THR_TABLE_170 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_29_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_170_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_170_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_170_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_170_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006bc bits 14:10) bits 0:4 use field AMP_THR_TABLE_170 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_29_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_170_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_170_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_170_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_170_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_170_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_170_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_170_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_170_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006bc bits 14:10) bits 0:4 use field AMP_THR_TABLE_170 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006bc bits 14:10) bits 0:4 use field AMP_THR_TABLE_170 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_29_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_170_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_170_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_170_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_170_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_170_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_170_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006bc bits 14:10) bits 0:4 use field AMP_THR_TABLE_170 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_29_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_170_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_170_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_170_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_170_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_170_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_169_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_169_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_169_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_169_set", value );

    /* (0x000006bc bits 9:5) bits 0:4 use field AMP_THR_TABLE_169 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_29_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_169_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_169_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_169_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_169_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006bc bits 9:5) bits 0:4 use field AMP_THR_TABLE_169 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_29_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_169_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_169_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_169_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_169_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_169_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_169_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_169_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_169_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006bc bits 9:5) bits 0:4 use field AMP_THR_TABLE_169 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006bc bits 9:5) bits 0:4 use field AMP_THR_TABLE_169 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_29_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_169_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_169_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_169_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_169_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_169_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_169_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006bc bits 9:5) bits 0:4 use field AMP_THR_TABLE_169 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_29_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_169_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_169_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_169_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_169_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_169_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_168_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_168_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_168_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_168_set", value );

    /* (0x000006bc bits 4:0) bits 0:4 use field AMP_THR_TABLE_168 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_29_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_168_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_168_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_168_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_168_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006bc bits 4:0) bits 0:4 use field AMP_THR_TABLE_168 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_29_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_168_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_168_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_168_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_168_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_168_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_168_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_168_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_168_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006bc bits 4:0) bits 0:4 use field AMP_THR_TABLE_168 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006bc bits 4:0) bits 0:4 use field AMP_THR_TABLE_168 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_29_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_168_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_168_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_168_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_168_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_168_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_168_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006bc bits 4:0) bits 0:4 use field AMP_THR_TABLE_168 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_29_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_168_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_168_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_168_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_29_BIT_AMP_THR_TABLE_168_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_168_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_179_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_179_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_179_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_179_set", value );

    /* (0x000006c0 bits 29:25) bits 0:4 use field AMP_THR_TABLE_179 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_30_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_179_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_179_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_179_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_179_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006c0 bits 29:25) bits 0:4 use field AMP_THR_TABLE_179 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_30_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_179_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_179_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_179_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_179_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_179_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_179_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_179_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_179_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006c0 bits 29:25) bits 0:4 use field AMP_THR_TABLE_179 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006c0 bits 29:25) bits 0:4 use field AMP_THR_TABLE_179 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_30_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_179_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_179_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_179_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_179_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_179_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_179_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006c0 bits 29:25) bits 0:4 use field AMP_THR_TABLE_179 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_30_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_179_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_179_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_179_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_179_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_179_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_178_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_178_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_178_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_178_set", value );

    /* (0x000006c0 bits 24:20) bits 0:4 use field AMP_THR_TABLE_178 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_30_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_178_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_178_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_178_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_178_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006c0 bits 24:20) bits 0:4 use field AMP_THR_TABLE_178 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_30_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_178_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_178_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_178_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_178_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_178_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_178_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_178_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_178_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006c0 bits 24:20) bits 0:4 use field AMP_THR_TABLE_178 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006c0 bits 24:20) bits 0:4 use field AMP_THR_TABLE_178 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_30_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_178_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_178_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_178_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_178_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_178_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_178_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006c0 bits 24:20) bits 0:4 use field AMP_THR_TABLE_178 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_30_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_178_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_178_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_178_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_178_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_178_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_177_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_177_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_177_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_177_set", value );

    /* (0x000006c0 bits 19:15) bits 0:4 use field AMP_THR_TABLE_177 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_30_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_177_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_177_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_177_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_177_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006c0 bits 19:15) bits 0:4 use field AMP_THR_TABLE_177 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_30_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_177_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_177_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_177_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_177_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_177_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_177_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_177_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_177_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006c0 bits 19:15) bits 0:4 use field AMP_THR_TABLE_177 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006c0 bits 19:15) bits 0:4 use field AMP_THR_TABLE_177 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_30_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_177_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_177_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_177_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_177_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_177_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_177_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006c0 bits 19:15) bits 0:4 use field AMP_THR_TABLE_177 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_30_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_177_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_177_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_177_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_177_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_177_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_176_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_176_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_176_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_176_set", value );

    /* (0x000006c0 bits 14:10) bits 0:4 use field AMP_THR_TABLE_176 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_30_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_176_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_176_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_176_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_176_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006c0 bits 14:10) bits 0:4 use field AMP_THR_TABLE_176 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_30_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_176_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_176_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_176_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_176_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_176_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_176_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_176_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_176_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006c0 bits 14:10) bits 0:4 use field AMP_THR_TABLE_176 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006c0 bits 14:10) bits 0:4 use field AMP_THR_TABLE_176 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_30_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_176_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_176_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_176_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_176_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_176_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_176_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006c0 bits 14:10) bits 0:4 use field AMP_THR_TABLE_176 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_30_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_176_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_176_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_176_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_176_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_176_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_175_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_175_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_175_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_175_set", value );

    /* (0x000006c0 bits 9:5) bits 0:4 use field AMP_THR_TABLE_175 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_30_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_175_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_175_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_175_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_175_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006c0 bits 9:5) bits 0:4 use field AMP_THR_TABLE_175 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_30_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_175_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_175_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_175_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_175_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_175_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_175_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_175_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_175_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006c0 bits 9:5) bits 0:4 use field AMP_THR_TABLE_175 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006c0 bits 9:5) bits 0:4 use field AMP_THR_TABLE_175 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_30_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_175_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_175_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_175_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_175_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_175_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_175_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006c0 bits 9:5) bits 0:4 use field AMP_THR_TABLE_175 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_30_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_175_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_175_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_175_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_175_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_175_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_174_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_174_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_174_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_174_set", value );

    /* (0x000006c0 bits 4:0) bits 0:4 use field AMP_THR_TABLE_174 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_30_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_174_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_174_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_174_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_174_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006c0 bits 4:0) bits 0:4 use field AMP_THR_TABLE_174 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_30_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_174_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_174_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_174_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_174_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_174_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_174_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_174_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_174_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006c0 bits 4:0) bits 0:4 use field AMP_THR_TABLE_174 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006c0 bits 4:0) bits 0:4 use field AMP_THR_TABLE_174 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_30_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_174_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_174_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_174_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_174_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_174_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_174_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006c0 bits 4:0) bits 0:4 use field AMP_THR_TABLE_174 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_30_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_174_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_174_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_174_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_30_BIT_AMP_THR_TABLE_174_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_174_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_185_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_185_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_185_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_185_set", value );

    /* (0x000006c4 bits 29:25) bits 0:4 use field AMP_THR_TABLE_185 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_31_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_185_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_185_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_185_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_185_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006c4 bits 29:25) bits 0:4 use field AMP_THR_TABLE_185 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_31_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_185_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_185_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_185_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_185_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_185_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_185_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_185_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_185_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006c4 bits 29:25) bits 0:4 use field AMP_THR_TABLE_185 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006c4 bits 29:25) bits 0:4 use field AMP_THR_TABLE_185 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_31_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_185_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_185_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_185_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_185_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_185_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_185_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006c4 bits 29:25) bits 0:4 use field AMP_THR_TABLE_185 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_31_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_185_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_185_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_185_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_185_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_185_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_184_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_184_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_184_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_184_set", value );

    /* (0x000006c4 bits 24:20) bits 0:4 use field AMP_THR_TABLE_184 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_31_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_184_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_184_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_184_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_184_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006c4 bits 24:20) bits 0:4 use field AMP_THR_TABLE_184 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_31_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_184_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_184_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_184_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_184_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_184_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_184_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_184_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_184_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006c4 bits 24:20) bits 0:4 use field AMP_THR_TABLE_184 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006c4 bits 24:20) bits 0:4 use field AMP_THR_TABLE_184 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_31_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_184_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_184_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_184_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_184_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_184_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_184_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006c4 bits 24:20) bits 0:4 use field AMP_THR_TABLE_184 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_31_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_184_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_184_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_184_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_184_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_184_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_183_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_183_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_183_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_183_set", value );

    /* (0x000006c4 bits 19:15) bits 0:4 use field AMP_THR_TABLE_183 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_31_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_183_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_183_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_183_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_183_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006c4 bits 19:15) bits 0:4 use field AMP_THR_TABLE_183 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_31_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_183_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_183_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_183_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_183_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_183_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_183_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_183_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_183_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006c4 bits 19:15) bits 0:4 use field AMP_THR_TABLE_183 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006c4 bits 19:15) bits 0:4 use field AMP_THR_TABLE_183 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_31_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_183_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_183_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_183_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_183_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_183_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_183_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006c4 bits 19:15) bits 0:4 use field AMP_THR_TABLE_183 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_31_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_183_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_183_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_183_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_183_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_183_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_182_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_182_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_182_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_182_set", value );

    /* (0x000006c4 bits 14:10) bits 0:4 use field AMP_THR_TABLE_182 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_31_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_182_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_182_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_182_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_182_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006c4 bits 14:10) bits 0:4 use field AMP_THR_TABLE_182 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_31_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_182_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_182_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_182_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_182_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_182_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_182_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_182_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_182_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006c4 bits 14:10) bits 0:4 use field AMP_THR_TABLE_182 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006c4 bits 14:10) bits 0:4 use field AMP_THR_TABLE_182 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_31_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_182_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_182_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_182_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_182_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_182_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_182_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006c4 bits 14:10) bits 0:4 use field AMP_THR_TABLE_182 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_31_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_182_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_182_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_182_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_182_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_182_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_181_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_181_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_181_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_181_set", value );

    /* (0x000006c4 bits 9:5) bits 0:4 use field AMP_THR_TABLE_181 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_31_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_181_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_181_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_181_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_181_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006c4 bits 9:5) bits 0:4 use field AMP_THR_TABLE_181 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_31_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_181_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_181_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_181_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_181_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_181_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_181_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_181_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_181_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006c4 bits 9:5) bits 0:4 use field AMP_THR_TABLE_181 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006c4 bits 9:5) bits 0:4 use field AMP_THR_TABLE_181 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_31_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_181_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_181_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_181_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_181_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_181_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_181_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006c4 bits 9:5) bits 0:4 use field AMP_THR_TABLE_181 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_31_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_181_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_181_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_181_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_181_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_181_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_180_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_180_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_180_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_180_set", value );

    /* (0x000006c4 bits 4:0) bits 0:4 use field AMP_THR_TABLE_180 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_31_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_180_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_180_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_180_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_180_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006c4 bits 4:0) bits 0:4 use field AMP_THR_TABLE_180 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_31_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_180_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_180_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_180_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_180_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_180_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_180_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_180_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_180_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006c4 bits 4:0) bits 0:4 use field AMP_THR_TABLE_180 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006c4 bits 4:0) bits 0:4 use field AMP_THR_TABLE_180 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_31_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_180_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_180_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_180_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_180_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_180_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_180_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006c4 bits 4:0) bits 0:4 use field AMP_THR_TABLE_180 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_31_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_180_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_180_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_180_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_31_BIT_AMP_THR_TABLE_180_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_180_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_191_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_191_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_191_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_191_set", value );

    /* (0x000006c8 bits 29:25) bits 0:4 use field AMP_THR_TABLE_191 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_32_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_191_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_191_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_191_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_191_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006c8 bits 29:25) bits 0:4 use field AMP_THR_TABLE_191 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_32_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_191_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_191_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_191_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_191_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_191_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_191_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_191_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_191_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006c8 bits 29:25) bits 0:4 use field AMP_THR_TABLE_191 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006c8 bits 29:25) bits 0:4 use field AMP_THR_TABLE_191 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_32_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_191_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_191_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_191_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_191_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_191_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_191_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006c8 bits 29:25) bits 0:4 use field AMP_THR_TABLE_191 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_32_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_191_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_191_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_191_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_191_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_191_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_190_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_190_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_190_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_190_set", value );

    /* (0x000006c8 bits 24:20) bits 0:4 use field AMP_THR_TABLE_190 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_32_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_190_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_190_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_190_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_190_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006c8 bits 24:20) bits 0:4 use field AMP_THR_TABLE_190 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_32_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_190_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_190_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_190_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_190_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_190_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_190_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_190_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_190_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006c8 bits 24:20) bits 0:4 use field AMP_THR_TABLE_190 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006c8 bits 24:20) bits 0:4 use field AMP_THR_TABLE_190 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_32_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_190_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_190_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_190_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_190_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_190_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_190_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006c8 bits 24:20) bits 0:4 use field AMP_THR_TABLE_190 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_32_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_190_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_190_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_190_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_190_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_190_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_189_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_189_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_189_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_189_set", value );

    /* (0x000006c8 bits 19:15) bits 0:4 use field AMP_THR_TABLE_189 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_32_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_189_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_189_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_189_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_189_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006c8 bits 19:15) bits 0:4 use field AMP_THR_TABLE_189 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_32_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_189_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_189_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_189_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_189_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_189_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_189_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_189_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_189_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006c8 bits 19:15) bits 0:4 use field AMP_THR_TABLE_189 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006c8 bits 19:15) bits 0:4 use field AMP_THR_TABLE_189 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_32_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_189_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_189_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_189_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_189_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_189_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_189_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006c8 bits 19:15) bits 0:4 use field AMP_THR_TABLE_189 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_32_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_189_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_189_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_189_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_189_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_189_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_188_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_188_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_188_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_188_set", value );

    /* (0x000006c8 bits 14:10) bits 0:4 use field AMP_THR_TABLE_188 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_32_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_188_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_188_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_188_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_188_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006c8 bits 14:10) bits 0:4 use field AMP_THR_TABLE_188 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_32_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_188_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_188_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_188_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_188_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_188_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_188_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_188_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_188_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006c8 bits 14:10) bits 0:4 use field AMP_THR_TABLE_188 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006c8 bits 14:10) bits 0:4 use field AMP_THR_TABLE_188 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_32_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_188_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_188_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_188_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_188_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_188_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_188_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006c8 bits 14:10) bits 0:4 use field AMP_THR_TABLE_188 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_32_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_188_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_188_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_188_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_188_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_188_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_187_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_187_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_187_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_187_set", value );

    /* (0x000006c8 bits 9:5) bits 0:4 use field AMP_THR_TABLE_187 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_32_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_187_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_187_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_187_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_187_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006c8 bits 9:5) bits 0:4 use field AMP_THR_TABLE_187 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_32_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_187_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_187_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_187_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_187_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_187_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_187_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_187_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_187_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006c8 bits 9:5) bits 0:4 use field AMP_THR_TABLE_187 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006c8 bits 9:5) bits 0:4 use field AMP_THR_TABLE_187 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_32_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_187_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_187_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_187_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_187_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_187_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_187_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006c8 bits 9:5) bits 0:4 use field AMP_THR_TABLE_187 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_32_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_187_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_187_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_187_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_187_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_187_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_186_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_186_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_186_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_186_set", value );

    /* (0x000006c8 bits 4:0) bits 0:4 use field AMP_THR_TABLE_186 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_32_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_186_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_186_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_186_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_186_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006c8 bits 4:0) bits 0:4 use field AMP_THR_TABLE_186 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_32_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_186_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_186_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_186_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_186_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_186_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_186_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_186_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_186_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006c8 bits 4:0) bits 0:4 use field AMP_THR_TABLE_186 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006c8 bits 4:0) bits 0:4 use field AMP_THR_TABLE_186 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_32_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_186_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_186_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_186_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_186_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_186_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_186_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006c8 bits 4:0) bits 0:4 use field AMP_THR_TABLE_186 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_32_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_186_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_186_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_186_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_32_BIT_AMP_THR_TABLE_186_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_186_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_197_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_197_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_197_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_197_set", value );

    /* (0x000006cc bits 29:25) bits 0:4 use field AMP_THR_TABLE_197 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_33_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_197_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_197_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_197_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_197_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006cc bits 29:25) bits 0:4 use field AMP_THR_TABLE_197 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_33_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_197_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_197_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_197_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_197_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_197_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_197_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_197_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_197_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006cc bits 29:25) bits 0:4 use field AMP_THR_TABLE_197 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006cc bits 29:25) bits 0:4 use field AMP_THR_TABLE_197 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_33_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_197_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_197_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_197_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_197_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_197_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_197_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006cc bits 29:25) bits 0:4 use field AMP_THR_TABLE_197 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_33_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_197_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_197_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_197_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_197_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_197_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_196_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_196_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_196_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_196_set", value );

    /* (0x000006cc bits 24:20) bits 0:4 use field AMP_THR_TABLE_196 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_33_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_196_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_196_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_196_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_196_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006cc bits 24:20) bits 0:4 use field AMP_THR_TABLE_196 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_33_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_196_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_196_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_196_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_196_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_196_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_196_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_196_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_196_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006cc bits 24:20) bits 0:4 use field AMP_THR_TABLE_196 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006cc bits 24:20) bits 0:4 use field AMP_THR_TABLE_196 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_33_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_196_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_196_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_196_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_196_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_196_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_196_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006cc bits 24:20) bits 0:4 use field AMP_THR_TABLE_196 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_33_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_196_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_196_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_196_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_196_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_196_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_195_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_195_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_195_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_195_set", value );

    /* (0x000006cc bits 19:15) bits 0:4 use field AMP_THR_TABLE_195 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_33_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_195_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_195_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_195_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_195_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006cc bits 19:15) bits 0:4 use field AMP_THR_TABLE_195 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_33_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_195_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_195_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_195_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_195_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_195_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_195_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_195_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_195_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006cc bits 19:15) bits 0:4 use field AMP_THR_TABLE_195 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006cc bits 19:15) bits 0:4 use field AMP_THR_TABLE_195 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_33_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_195_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_195_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_195_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_195_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_195_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_195_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006cc bits 19:15) bits 0:4 use field AMP_THR_TABLE_195 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_33_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_195_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_195_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_195_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_195_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_195_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_194_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_194_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_194_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_194_set", value );

    /* (0x000006cc bits 14:10) bits 0:4 use field AMP_THR_TABLE_194 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_33_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_194_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_194_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_194_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_194_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006cc bits 14:10) bits 0:4 use field AMP_THR_TABLE_194 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_33_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_194_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_194_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_194_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_194_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_194_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_194_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_194_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_194_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006cc bits 14:10) bits 0:4 use field AMP_THR_TABLE_194 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006cc bits 14:10) bits 0:4 use field AMP_THR_TABLE_194 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_33_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_194_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_194_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_194_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_194_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_194_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_194_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006cc bits 14:10) bits 0:4 use field AMP_THR_TABLE_194 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_33_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_194_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_194_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_194_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_194_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_194_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_193_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_193_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_193_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_193_set", value );

    /* (0x000006cc bits 9:5) bits 0:4 use field AMP_THR_TABLE_193 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_33_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_193_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_193_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_193_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_193_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006cc bits 9:5) bits 0:4 use field AMP_THR_TABLE_193 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_33_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_193_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_193_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_193_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_193_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_193_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_193_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_193_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_193_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006cc bits 9:5) bits 0:4 use field AMP_THR_TABLE_193 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006cc bits 9:5) bits 0:4 use field AMP_THR_TABLE_193 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_33_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_193_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_193_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_193_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_193_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_193_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_193_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006cc bits 9:5) bits 0:4 use field AMP_THR_TABLE_193 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_33_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_193_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_193_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_193_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_193_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_193_get", start_bit, stop_bit, value );

    return value;
}
static INLINE void t8_common_field_AMP_THR_TABLE_192_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_AMP_THR_TABLE_192_set( t8_common_buffer_t *b_ptr,
                                                          t8_handle_t *h_ptr,
                                                          UINT32 value )
{
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_AMP_THR_TABLE_192_set", value, 31);
    IOLOG( "%s <= 0x%08x", "t8_common_field_AMP_THR_TABLE_192_set", value );

    /* (0x000006cc bits 4:0) bits 0:4 use field AMP_THR_TABLE_192 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33 */
    t8_common_reg_AMP_THR_TABLE_CONFIG_REG_33_field_set( b_ptr,
                                                         h_ptr,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_192_MSK,
                                                         PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_192_OFF,
                                                         value);
}

static INLINE UINT32 t8_common_field_AMP_THR_TABLE_192_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_AMP_THR_TABLE_192_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006cc bits 4:0) bits 0:4 use field AMP_THR_TABLE_192 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_33_read( b_ptr,
                                                                h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_192_MSK) >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_192_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_AMP_THR_TABLE_192_get", value );

    return value;
}
static INLINE void t8_common_field_range_AMP_THR_TABLE_192_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_range_AMP_THR_TABLE_192_set( t8_common_buffer_t *b_ptr,
                                                                t8_handle_t *h_ptr,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_192_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_192_set", stop_bit, 4 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_192_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x000006cc bits 4:0) bits 0:4 use field AMP_THR_TABLE_192 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006cc bits 4:0) bits 0:4 use field AMP_THR_TABLE_192 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33 */
        t8_common_reg_AMP_THR_TABLE_CONFIG_REG_33_field_set( b_ptr,
                                                             h_ptr,
                                                             subfield_mask << (PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_192_OFF + subfield_offset),
                                                             PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_192_OFF + subfield_offset,
                                                             value >> subfield_shift);
    }
}

static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_192_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_AMP_THR_TABLE_192_get( t8_common_buffer_t *b_ptr,
                                                                  t8_handle_t *h_ptr,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_AMP_THR_TABLE_192_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_AMP_THR_TABLE_192_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006cc bits 4:0) bits 0:4 use field AMP_THR_TABLE_192 of register PMC_PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33 */
    reg_value = t8_common_reg_AMP_THR_TABLE_CONFIG_REG_33_read( b_ptr,
                                                                h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_192_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_192_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_192_MSK, PM20_82_24_COMMON_PCBI_REG_AMP_THR_TABLE_CONFIG_REG_33_BIT_AMP_THR_TABLE_192_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_AMP_THR_TABLE_192_get", start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config_edge
 * ==================================================================================
 */
static INLINE void t8_common_field_RAMCAPT_DATA_OUT_RD_EN_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void t8_common_field_RAMCAPT_DATA_OUT_RD_EN_set( t8_common_buffer_t *b_ptr,
                                                               t8_handle_t *h_ptr,
                                                               UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "t8_common_field_RAMCAPT_DATA_OUT_RD_EN_set", value, 1);
    IOLOG( "%s <= 0x%08x", "t8_common_field_RAMCAPT_DATA_OUT_RD_EN_set", value );

    /* (0x0000060c bits 8) field RAMCAPT_DATA_OUT_RD_EN of register PMC_PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG */
    t8_common_reg_RAM_CAPT_CONFIG_REG_field_set( b_ptr,
                                                 h_ptr,
                                                 PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG_BIT_RAMCAPT_DATA_OUT_RD_EN_MSK,
                                                 PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG_BIT_RAMCAPT_DATA_OUT_RD_EN_OFF,
                                                 value);
}

static INLINE UINT32 t8_common_field_RAMCAPT_DATA_OUT_RD_EN_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_RAMCAPT_DATA_OUT_RD_EN_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000060c bits 8) field RAMCAPT_DATA_OUT_RD_EN of register PMC_PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG */
    reg_value = t8_common_reg_RAM_CAPT_CONFIG_REG_read( b_ptr,
                                                        h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG_BIT_RAMCAPT_DATA_OUT_RD_EN_MSK) >> PM20_82_24_COMMON_PCBI_REG_RAM_CAPT_CONFIG_REG_BIT_RAMCAPT_DATA_OUT_RD_EN_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_RAMCAPT_DATA_OUT_RD_EN_get", value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset status
 * ==================================================================================
 */
static INLINE UINT32 t8_common_field_RAMCAPT_DATA_OUT_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_RAMCAPT_DATA_OUT_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000610 bits 31:0) field RAMCAPT_DATA_OUT of register PMC_PM20_82_24_COMMON_PCBI_REG_RAM_CAP_STATUS_REG */
    reg_value = t8_common_reg_RAM_CAP_STATUS_REG_read( b_ptr,
                                                       h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_RAM_CAP_STATUS_REG_BIT_RAMCAPT_DATA_OUT_MSK) >> PM20_82_24_COMMON_PCBI_REG_RAM_CAP_STATUS_REG_BIT_RAMCAPT_DATA_OUT_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_RAMCAPT_DATA_OUT_get", value );

    return value;
}
static INLINE UINT32 t8_common_field_range_RAMCAPT_DATA_OUT_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_range_RAMCAPT_DATA_OUT_get( t8_common_buffer_t *b_ptr,
                                                                 t8_handle_t *h_ptr,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "t8_common_field_range_RAMCAPT_DATA_OUT_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "t8_common_field_range_RAMCAPT_DATA_OUT_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000610 bits 31:0) field RAMCAPT_DATA_OUT of register PMC_PM20_82_24_COMMON_PCBI_REG_RAM_CAP_STATUS_REG */
    reg_value = t8_common_reg_RAM_CAP_STATUS_REG_read( b_ptr,
                                                       h_ptr);
    field_value = (reg_value & PM20_82_24_COMMON_PCBI_REG_RAM_CAP_STATUS_REG_BIT_RAMCAPT_DATA_OUT_MSK)
                  >> PM20_82_24_COMMON_PCBI_REG_RAM_CAP_STATUS_REG_BIT_RAMCAPT_DATA_OUT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, PM20_82_24_COMMON_PCBI_REG_RAM_CAP_STATUS_REG_BIT_RAMCAPT_DATA_OUT_MSK, PM20_82_24_COMMON_PCBI_REG_RAM_CAP_STATUS_REG_BIT_RAMCAPT_DATA_OUT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "t8_common_field_range_RAMCAPT_DATA_OUT_get", start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 t8_common_field_ADC_CALIB_DONE_OUT_1_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_ADC_CALIB_DONE_OUT_1_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000634 bits 3) field ADC_CALIB_DONE_OUT_1 of register PMC_PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_STATUS_REG1 */
    reg_value = t8_common_reg_MTSB_CTRLR_STATUS_REG1_read( b_ptr,
                                                           h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_STATUS_REG1_BIT_ADC_CALIB_DONE_OUT_1_MSK) >> PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_STATUS_REG1_BIT_ADC_CALIB_DONE_OUT_1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_ADC_CALIB_DONE_OUT_1_get", value );

    return value;
}
static INLINE UINT32 t8_common_field_ADC_CALIB_DONE_OUT_0_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_ADC_CALIB_DONE_OUT_0_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000634 bits 2) field ADC_CALIB_DONE_OUT_0 of register PMC_PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_STATUS_REG1 */
    reg_value = t8_common_reg_MTSB_CTRLR_STATUS_REG1_read( b_ptr,
                                                           h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_STATUS_REG1_BIT_ADC_CALIB_DONE_OUT_0_MSK) >> PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_STATUS_REG1_BIT_ADC_CALIB_DONE_OUT_0_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_ADC_CALIB_DONE_OUT_0_get", value );

    return value;
}
static INLINE UINT32 t8_common_field_RX_ADAPT_DONE_1_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_RX_ADAPT_DONE_1_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000634 bits 1) field RX_ADAPT_DONE_1 of register PMC_PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_STATUS_REG1 */
    reg_value = t8_common_reg_MTSB_CTRLR_STATUS_REG1_read( b_ptr,
                                                           h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_STATUS_REG1_BIT_RX_ADAPT_DONE_1_MSK) >> PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_STATUS_REG1_BIT_RX_ADAPT_DONE_1_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_RX_ADAPT_DONE_1_get", value );

    return value;
}
static INLINE UINT32 t8_common_field_RX_ADAPT_DONE_0_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 t8_common_field_RX_ADAPT_DONE_0_get( t8_common_buffer_t *b_ptr, t8_handle_t *h_ptr )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000634 bits 0) field RX_ADAPT_DONE_0 of register PMC_PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_STATUS_REG1 */
    reg_value = t8_common_reg_MTSB_CTRLR_STATUS_REG1_read( b_ptr,
                                                           h_ptr);
    value = (reg_value & PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_STATUS_REG1_BIT_RX_ADAPT_DONE_0_MSK) >> PM20_82_24_COMMON_PCBI_REG_MTSB_CTRLR_STATUS_REG1_BIT_RX_ADAPT_DONE_0_OFF;
    IOLOG( "%s -> 0x%08x", "t8_common_field_RX_ADAPT_DONE_0_get", value );

    return value;
}

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* _T8_COMMON_IO_INLINE_H */
