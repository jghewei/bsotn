/******************************************************************************
 *   COPYRIGHT (C) 2011 PMC-SIERRA, INC. ALL RIGHTS RESERVED.
 * --------------------------------------------------------------------------
 *  This software embodies materials and concepts which are proprietary and
 *  confidential to PMC-Sierra, Inc.
 *  PMC-Sierra distributes this software to its customers pursuant to the
 *  terms and conditions of the Software License Agreement
 *  contained in the text file software.lic that is distributed along with
 *  the software. This software can only be utilized if all
 *  terms and conditions of the Software License Agreement are
 *  accepted. If there are any questions, concerns, or if the
 *  Software License Agreement text file, software.lic, is missing please
 *  contact PMC-Sierra for assistance.
 * -------------------------------------------------------------------------
 *   DESCRIPTION:
 *     contains prototypes for the field accessor functions
 *     and register accessor functions for the qs block
 * 
 *   NOTES:
 *     This file is generated by the script codegen.pm, version 1.1
 *     Do not modify this file.
 * 
 *     The input file is ../src/ioxml-filtered/pm70_82_12_dcpb_map.xml
 *     block_uri "file:../docs/rda/pm70_60_59_qs_reg.xml"
 *     block_part_number "PM70_60_59_qs"
 *     block_mnemonic "QS"
 * 
 *****************************************************************************/

/*--------------------------------------------------------------------------------.
 | The pattern for accessing qs io functions is:
 | {
 |     qs_buffer_t b_ptr[1];
 |     qs_buffer_init( b_ptr, h_ptr, A );
 |     value = qs_field_<FIELD>_get( b_ptr, h_ptr, A );
 |     qs_field_<FIELD>_set( b_ptr, h_ptr, A , value );
 | ...
 |     qs_buffer_flush( b_ptr );
 | }
 | 
 | alternatively, if register coalescing is not needed then omit the buffer like:
 | 
 | value = qs_field_<FIELD>_get( NULL, h_ptr, A );
 | qs_field_<FIELD>_set( NULL, h_ptr, A , value );
 | 
 +-------------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------.
 | 
 | +----------------------------------------------------+
 | | Register (0x000a0000 + (N) * 0x4) PUSH_PORT_P0_RST |
 | |     N[0..255]                                      |
 | +----------------------------------------------------+
 | | bit  0 R/W  WPTR_RST_PUSH_P0                       |
 | +----------------------------------------------------+
 | 
 | void   qs_field_WPTR_RST_PUSH_P0_set ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N, UINT32 value )
 | UINT32 qs_field_WPTR_RST_PUSH_P0_get ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N )
 | 
 | +--------------------------------------------------------+
 | | Register (0x000a0400 + (N) * 0x4) PUSH_PORT_P0_RST_VAL |
 | |     N[0..7]                                            |
 | +--------------------------------------------------------+
 | | bit  31:0 R  WPTR_RST_PUSH_P0_VAL                      |
 | +--------------------------------------------------------+
 | 
 | UINT32 qs_field_WPTR_RST_PUSH_P0_VAL_get       ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N )
 | UINT32 qs_field_range_WPTR_RST_PUSH_P0_VAL_get ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N, UINT32 start_bit, UINT32 stop_bit )
 | 
 | +----------------------------------------------------+
 | | Register (0x000a0800 + (N) * 0x4) PUSH_PORT_P1_RST |
 | |     N[0..255]                                      |
 | +----------------------------------------------------+
 | | bit  0 R/W  WPTR_RST_PUSH_P1                       |
 | +----------------------------------------------------+
 | 
 | void   qs_field_WPTR_RST_PUSH_P1_set ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N, UINT32 value )
 | UINT32 qs_field_WPTR_RST_PUSH_P1_get ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N )
 | 
 | +--------------------------------------------------------+
 | | Register (0x000a0c00 + (N) * 0x4) PUSH_PORT_P1_RST_VAL |
 | |     N[0..7]                                            |
 | +--------------------------------------------------------+
 | | bit  31:0 R  WPTR_RST_PUSH_P1_VAL                      |
 | +--------------------------------------------------------+
 | 
 | UINT32 qs_field_WPTR_RST_PUSH_P1_VAL_get       ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N )
 | UINT32 qs_field_range_WPTR_RST_PUSH_P1_VAL_get ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N, UINT32 start_bit, UINT32 stop_bit )
 | 
 | +----------------------------------------------------+
 | | Register (0x000a1000 + (N) * 0x4) PUSH_PORT_P2_RST |
 | |     N[0..255]                                      |
 | +----------------------------------------------------+
 | | bit  0 R/W  WPTR_RST_PUSH_P2                       |
 | +----------------------------------------------------+
 | 
 | void   qs_field_WPTR_RST_PUSH_P2_set ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N, UINT32 value )
 | UINT32 qs_field_WPTR_RST_PUSH_P2_get ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N )
 | 
 | +--------------------------------------------------------+
 | | Register (0x000a1400 + (N) * 0x4) PUSH_PORT_P2_RST_VAL |
 | |     N[0..7]                                            |
 | +--------------------------------------------------------+
 | | bit  31:0 R  WPTR_RST_PUSH_P2_VAL                      |
 | +--------------------------------------------------------+
 | 
 | UINT32 qs_field_WPTR_RST_PUSH_P2_VAL_get       ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N )
 | UINT32 qs_field_range_WPTR_RST_PUSH_P2_VAL_get ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N, UINT32 start_bit, UINT32 stop_bit )
 | 
 | +----------------------------------------------------+
 | | Register (0x000a1800 + (N) * 0x4) PUSH_PORT_P3_RST |
 | |     N[0..255]                                      |
 | +----------------------------------------------------+
 | | bit  0 R/W  WPTR_RST_PUSH_P3                       |
 | +----------------------------------------------------+
 | 
 | void   qs_field_WPTR_RST_PUSH_P3_set ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N, UINT32 value )
 | UINT32 qs_field_WPTR_RST_PUSH_P3_get ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N )
 | 
 | +--------------------------------------------------------+
 | | Register (0x000a1c00 + (N) * 0x4) PUSH_PORT_P3_RST_VAL |
 | |     N[0..7]                                            |
 | +--------------------------------------------------------+
 | | bit  31:0 R  WPTR_RST_PUSH_P3_VAL                      |
 | +--------------------------------------------------------+
 | 
 | UINT32 qs_field_WPTR_RST_PUSH_P3_VAL_get       ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N )
 | UINT32 qs_field_range_WPTR_RST_PUSH_P3_VAL_get ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N, UINT32 start_bit, UINT32 stop_bit )
 | 
 | +------------------------------------------------+
 | | Register (0x000a2000 + (N) * 0x4) POP_PORT_RST |
 | |     N[0..127]                                  |
 | +------------------------------------------------+
 | | bit  0 R/W  RPTR_RST_POP                       |
 | +------------------------------------------------+
 | 
 | void   qs_field_RPTR_RST_POP_set ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N, UINT32 value )
 | UINT32 qs_field_RPTR_RST_POP_get ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N )
 | 
 | +--------------------------------------------------------+
 | | Register (0x000a2400 + (N) * 0x4) RPTR_RST_POP_VAL_REG |
 | |     N[0..7]                                            |
 | +--------------------------------------------------------+
 | | bit  31:0 R  RPTR_RST_POP_VAL                          |
 | +--------------------------------------------------------+
 | 
 | UINT32 qs_field_RPTR_RST_POP_VAL_get       ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N )
 | UINT32 qs_field_range_RPTR_RST_POP_VAL_get ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N, UINT32 start_bit, UINT32 stop_bit )
 | 
 | +------------------------------------------------------+
 | | Register (0x000a2600 + (N) * 0x4) FIFO_PTR_EMPTY_REG |
 | |     N[0..7]                                          |
 | +------------------------------------------------------+
 | | bit  31:0 R  FIFO_PKT_EMPTY                          |
 | +------------------------------------------------------+
 | 
 | UINT32               qs_field_FIFO_PKT_EMPTY_get        ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N )
 | UINT32               qs_field_range_FIFO_PKT_EMPTY_get  ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N, UINT32 start_bit, UINT32 stop_bit )
 | PMC_POLL_RETURN_TYPE qs_field_range_FIFO_PKT_EMPTY_poll ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N, UINT32 start_bit, UINT32 stop_bit, UINT32 value, PMC_POLL_COMPARISON_TYPE cmp, UINT32 max_count, UINT32 *num_failed_polls, UINT32 delay_between_polls_in_microseconds )
 | PMC_POLL_RETURN_TYPE qs_field_FIFO_PKT_EMPTY_poll       ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N, UINT32 value, PMC_POLL_COMPARISON_TYPE cmp, UINT32 max_count, UINT32 *num_failed_polls, UINT32 delay_between_polls_in_microseconds )
 | 
 | +----------------------------------------+
 | | Register 0x000a3d00 FIFO_CFG           |
 | +----------------------------------------+
 | | bit  28   R/W  FIFO_END_ADDR_CHG_ABORT |
 | | bit  24   R/W  FIFO_END_ADDR_CHG_REQ   |
 | | bit  16:0 R/W  FIFO_END_ADDR           |
 | +----------------------------------------+
 | 
 | void                 qs_field_FIFO_END_ADDR_set            ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32 value )
 | UINT32               qs_field_FIFO_END_ADDR_get            ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A )
 | void                 qs_field_range_FIFO_END_ADDR_set      ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32               qs_field_range_FIFO_END_ADDR_get      ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32 start_bit, UINT32 stop_bit )
 | void                 qs_field_FIFO_END_ADDR_CHG_ABORT_set  ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32 value )
 | UINT32               qs_field_FIFO_END_ADDR_CHG_ABORT_get  ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A )
 | PMC_POLL_RETURN_TYPE qs_field_FIFO_END_ADDR_CHG_ABORT_poll ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32 value, PMC_POLL_COMPARISON_TYPE cmp, UINT32 max_count, UINT32 *num_failed_polls, UINT32 delay_between_polls_in_microseconds )
 | void                 qs_field_FIFO_END_ADDR_CHG_REQ_set    ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32 value )
 | UINT32               qs_field_FIFO_END_ADDR_CHG_REQ_get    ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A )
 | PMC_POLL_RETURN_TYPE qs_field_FIFO_END_ADDR_CHG_REQ_poll   ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32 value, PMC_POLL_COMPARISON_TYPE cmp, UINT32 max_count, UINT32 *num_failed_polls, UINT32 delay_between_polls_in_microseconds )
 | 
 | +-------------------------------------+
 | | Register 0x000a3d04 FIFO_CFG_RID    |
 | +-------------------------------------+
 | | bit  7:0 R/W  FIFO_END_ADDR_CHG_RID |
 | +-------------------------------------+
 | 
 | void   qs_field_FIFO_END_ADDR_CHG_RID_set       ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32 value )
 | UINT32 qs_field_FIFO_END_ADDR_CHG_RID_get       ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A )
 | void   qs_field_range_FIFO_END_ADDR_CHG_RID_set ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 qs_field_range_FIFO_END_ADDR_CHG_RID_get ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32 start_bit, UINT32 stop_bit )
 | 
 | +-------------------------------------+
 | | Register 0x000a3d08 FIFO_CFG_WID    |
 | +-------------------------------------+
 | | bit  9:0 R/W  FIFO_END_ADDR_CHG_WID |
 | +-------------------------------------+
 | 
 | void   qs_field_FIFO_END_ADDR_CHG_WID_set       ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32 value )
 | UINT32 qs_field_FIFO_END_ADDR_CHG_WID_get       ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A )
 | void   qs_field_range_FIFO_END_ADDR_CHG_WID_set ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 qs_field_range_FIFO_END_ADDR_CHG_WID_get ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32 start_bit, UINT32 stop_bit )
 | 
 | +-------------------------------------+
 | | Register 0x000a3d0c FIFO_CFG_STAT   |
 | +-------------------------------------+
 | | bit  0 R  FIFO_END_ADDR_CHG_SUCCESS |
 | +-------------------------------------+
 | 
 | UINT32               qs_field_FIFO_END_ADDR_CHG_SUCCESS_get  ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A )
 | PMC_POLL_RETURN_TYPE qs_field_FIFO_END_ADDR_CHG_SUCCESS_poll ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32 value, PMC_POLL_COMPARISON_TYPE cmp, UINT32 max_count, UINT32 *num_failed_polls, UINT32 delay_between_polls_in_microseconds )
 | 
 | +------------------------------+
 | | Register 0x000a3e00 DBG_CTRL |
 | +------------------------------+
 | | bit  10:0 R/W  DBG_RADDR     |
 | +------------------------------+
 | 
 | void   qs_field_DBG_RADDR_set       ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32 value )
 | UINT32 qs_field_DBG_RADDR_get       ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A )
 | void   qs_field_range_DBG_RADDR_set ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 qs_field_range_DBG_RADDR_get ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32 start_bit, UINT32 stop_bit )
 +------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
#ifndef _QS_IO_H
#define _QS_IO_H

#include "cpb_loc.h"
#include "pmc_sys.h"
#include "pmc_types.h"
#include "qs_regs.h"
#include "qs_io_inline.h"


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------.
 | TSB access functions
 +---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
 | These functions do not need to be accessed directly,... just included here for completeness.
 +---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
 | void                 qs_buffer_init               ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A )
 | void                 qs_buffer_flush              ( qs_buffer_t *b_ptr )
 | UINT32               qs_reg_read                  ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32 mem_type, UINT32 reg )
 | void                 qs_reg_write                 ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32 mem_type, UINT32 reg, UINT32 value )
 | void                 qs_field_set                 ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32 mem_type, UINT32 reg, UINT32 mask, UINT32 unused_mask, UINT32 ofs, UINT32 value )
 | void                 qs_action_on_write_field_set ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32 mem_type, UINT32 reg, UINT32 mask, UINT32 ofs, UINT32 value )
 | void                 qs_burst_read                ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32 mem_type, UINT32 reg, UINT32 len, UINT32 *value )
 | void                 qs_burst_write               ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32 mem_type, UINT32 reg, UINT32 len, UINT32 *value )
 | PMC_POLL_RETURN_TYPE qs_poll                      ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32 mem_type, UINT32 reg, UINT32 mask, UINT32 value, PMC_POLL_COMPARISON_TYPE cmp, UINT32 max_count, UINT32 *num_failed_polls, UINT32 delay_between_polls_in_microseconds )
 +--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------.
 | Functions to Access Registers
 +--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
 | These functions can be used if for some reason the field getters & setters are not appropriate.
 +--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
 | void                 qs_reg_FIFO_CFG_write                   ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32 value )
 | void                 qs_reg_FIFO_CFG_field_set               ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32               qs_reg_FIFO_CFG_read                    ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A )
 | PMC_POLL_RETURN_TYPE qs_reg_FIFO_CFG_poll                    ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32 mask, UINT32 value, PMC_POLL_COMPARISON_TYPE cmp, UINT32 max_count, UINT32 *num_failed_polls, UINT32 delay_between_polls_in_microseconds )
 | 
 | void                 qs_reg_FIFO_CFG_RID_write               ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32 value )
 | void                 qs_reg_FIFO_CFG_RID_field_set           ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32               qs_reg_FIFO_CFG_RID_read                ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A )
 | 
 | void                 qs_reg_FIFO_CFG_WID_write               ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32 value )
 | void                 qs_reg_FIFO_CFG_WID_field_set           ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32               qs_reg_FIFO_CFG_WID_read                ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A )
 | 
 | void                 qs_reg_DBG_CTRL_write                   ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32 value )
 | void                 qs_reg_DBG_CTRL_field_set               ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32               qs_reg_DBG_CTRL_read                    ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A )
 | 
 | void                 qs_reg_POP_PORT_RST_array_write         ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N, UINT32 value )
 | void                 qs_reg_POP_PORT_RST_array_field_set     ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32               qs_reg_POP_PORT_RST_array_read          ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N )
 | 
 | void                 qs_reg_PUSH_PORT_P0_RST_array_write     ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N, UINT32 value )
 | void                 qs_reg_PUSH_PORT_P0_RST_array_field_set ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32               qs_reg_PUSH_PORT_P0_RST_array_read      ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N )
 | 
 | void                 qs_reg_PUSH_PORT_P1_RST_array_write     ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N, UINT32 value )
 | void                 qs_reg_PUSH_PORT_P1_RST_array_field_set ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32               qs_reg_PUSH_PORT_P1_RST_array_read      ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N )
 | 
 | void                 qs_reg_PUSH_PORT_P2_RST_array_write     ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N, UINT32 value )
 | void                 qs_reg_PUSH_PORT_P2_RST_array_field_set ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32               qs_reg_PUSH_PORT_P2_RST_array_read      ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N )
 | 
 | void                 qs_reg_PUSH_PORT_P3_RST_array_write     ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N, UINT32 value )
 | void                 qs_reg_PUSH_PORT_P3_RST_array_field_set ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32               qs_reg_PUSH_PORT_P3_RST_array_read      ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N )
 | 
 | UINT32               qs_reg_FIFO_CFG_STAT_read               ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A )
 | PMC_POLL_RETURN_TYPE qs_reg_FIFO_CFG_STAT_poll               ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32 mask, UINT32 value, PMC_POLL_COMPARISON_TYPE cmp, UINT32 max_count, UINT32 *num_failed_polls, UINT32 delay_between_polls_in_microseconds )
 | 
 | UINT32               qs_reg_PUSH_PORT_P0_RST_VAL_array_read  ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N )
 | 
 | UINT32               qs_reg_PUSH_PORT_P1_RST_VAL_array_read  ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N )
 | 
 | UINT32               qs_reg_PUSH_PORT_P2_RST_VAL_array_read  ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N )
 | 
 | UINT32               qs_reg_PUSH_PORT_P3_RST_VAL_array_read  ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N )
 | 
 | UINT32               qs_reg_RPTR_RST_POP_VAL_REG_array_read  ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N )
 | 
 | UINT32               qs_reg_FIFO_PTR_EMPTY_REG_array_read    ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N )
 | PMC_POLL_RETURN_TYPE qs_reg_FIFO_PTR_EMPTY_REG_array_poll    ( qs_buffer_t *b_ptr, cpb_handle_t *h_ptr, UINT32 A, UINT32  N, UINT32 mask, UINT32 value, PMC_POLL_COMPARISON_TYPE cmp, UINT32 max_count, UINT32 *num_failed_polls, UINT32 delay_between_polls_in_microseconds )
 | 
 +-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
#endif /* _QS_IO_H */
