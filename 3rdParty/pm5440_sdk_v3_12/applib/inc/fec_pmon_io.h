/******************************************************************************
 *   COPYRIGHT (C) 2011 PMC-SIERRA, INC. ALL RIGHTS RESERVED.
 * --------------------------------------------------------------------------
 *  This software embodies materials and concepts which are proprietary and
 *  confidential to PMC-Sierra, Inc.
 *  PMC-Sierra distributes this software to its customers pursuant to the
 *  terms and conditions of the Software License Agreement
 *  contained in the text file software.lic that is distributed along with
 *  the software. This software can only be utilized if all
 *  terms and conditions of the Software License Agreement are
 *  accepted. If there are any questions, concerns, or if the
 *  Software License Agreement text file, software.lic, is missing please
 *  contact PMC-Sierra for assistance.
 * -------------------------------------------------------------------------
 *   DESCRIPTION:
 *     contains prototypes for the field accessor functions
 *     and register accessor functions for the fec_pmon block
 * 
 *   NOTES:
 *     This file is generated by the script codegen.pm, version 1.0
 *     Do not modify this file.
 * 
 *     The input file is lw55_15_04_reg.xml
 *     block_uri "TBD"
 *     block_part_number "LW55_15_04"
 *     block_mnemonic "FEC_PMON"
 * 
 *****************************************************************************/
/*-----------------------------------------------------------------------------------------------------------------------------------------------------------.
 | The pattern for accessing fec_pmon io functions is:
 | {
 |     fec_pmon_buffer_t b[1];
 |     fec_pmon_buffer_init( b, h );
 |     value = fec_pmon_field_<FIELD>_get( b, h );
 |     fec_pmon_field_<FIELD>_set( b, h , value );
 | ...
 |     fec_pmon_buffer_flush( b );
 | }
 | 
 | alternatively, if register coalescing is not needed then omit the buffer like:
 | 
 | value = fec_pmon_field_<FIELD>_get( NULL, h );
 | fec_pmon_field_<FIELD>_set( NULL, h , value );
 | 
 | The parameters defined in fec_pmon are:
 +-----------------------------------------------------------------------------------------------------------------------------------------------------------+
 | Paramset fec_pmon_config
 | 
 | void   fec_pmon_field_LPA_STATS_COUNTER_MODE_set        ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 value )
 | UINT32 fec_pmon_field_LPA_STATS_COUNTER_MODE_get        ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | void   fec_pmon_field_LPA_STATS_PRESET_VALUE_set        ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 value )
 | UINT32 fec_pmon_field_LPA_STATS_PRESET_VALUE_get        ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | void   fec_pmon_field_LLSA_STATS_COUNTER_MODE_set       ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 value )
 | UINT32 fec_pmon_field_LLSA_STATS_COUNTER_MODE_get       ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | void   fec_pmon_field_LLSA_STATS_LATCH_SOURCE_set       ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 value )
 | UINT32 fec_pmon_field_LLSA_STATS_LATCH_SOURCE_get       ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | void   fec_pmon_field_LLSA_STATS_PRESET_VALUE_set       ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 value )
 | UINT32 fec_pmon_field_LLSA_STATS_PRESET_VALUE_get       ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | void   fec_pmon_field_range_LPA_STATS_COUNTER_MODE_set  ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 fec_pmon_field_range_LPA_STATS_COUNTER_MODE_get  ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 start_bit, UINT32 stop_bit )
 | void   fec_pmon_field_range_LPA_STATS_PRESET_VALUE_set  ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 fec_pmon_field_range_LPA_STATS_PRESET_VALUE_get  ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 start_bit, UINT32 stop_bit )
 | void   fec_pmon_field_range_LLSA_STATS_COUNTER_MODE_set ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 fec_pmon_field_range_LLSA_STATS_COUNTER_MODE_get ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 start_bit, UINT32 stop_bit )
 | void   fec_pmon_field_range_LLSA_STATS_PRESET_VALUE_set ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 fec_pmon_field_range_LLSA_STATS_PRESET_VALUE_get ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 start_bit, UINT32 stop_bit )
 +-----------------------------------------------------------------------------------------------------------------------------------------------------------+
 | Paramset fec_pmon_config_edge
 | 
 | void   fec_pmon_field_LPA_STATS_FP_PRESET_set             ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 value )
 | UINT32 fec_pmon_field_LPA_STATS_FP_PRESET_get             ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | void   fec_pmon_field_LPA_STATS_UNCORR_CWDS_PRESET_set    ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 value )
 | UINT32 fec_pmon_field_LPA_STATS_UNCORR_CWDS_PRESET_get    ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | void   fec_pmon_field_LPA_STATS_CORR_1S_PRESET_set        ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 value )
 | UINT32 fec_pmon_field_LPA_STATS_CORR_1S_PRESET_get        ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | void   fec_pmon_field_LPA_STATS_CORR_0S_PRESET_set        ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 value )
 | UINT32 fec_pmon_field_LPA_STATS_CORR_0S_PRESET_get        ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | void   fec_pmon_field_LPA_STATS_FP_CLEAR_set              ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 value )
 | UINT32 fec_pmon_field_LPA_STATS_FP_CLEAR_get              ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | void   fec_pmon_field_LPA_STATS_UNCORR_CWDS_CLEAR_set     ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 value )
 | UINT32 fec_pmon_field_LPA_STATS_UNCORR_CWDS_CLEAR_get     ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | void   fec_pmon_field_LPA_STATS_CORR_1S_CLEAR_set         ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 value )
 | UINT32 fec_pmon_field_LPA_STATS_CORR_1S_CLEAR_get         ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | void   fec_pmon_field_LPA_STATS_CORR_0S_CLEAR_set         ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 value )
 | UINT32 fec_pmon_field_LPA_STATS_CORR_0S_CLEAR_get         ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | void   fec_pmon_field_LLSA_STATS_CORR_1S_PRESET_set       ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 value )
 | UINT32 fec_pmon_field_LLSA_STATS_CORR_1S_PRESET_get       ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | void   fec_pmon_field_LLSA_STATS_UNCORR_CWDS_PRESET_set   ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 value )
 | UINT32 fec_pmon_field_LLSA_STATS_UNCORR_CWDS_PRESET_get   ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | void   fec_pmon_field_LLSA_STATS_CORR_0S_PRESET_set       ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 value )
 | UINT32 fec_pmon_field_LLSA_STATS_CORR_0S_PRESET_get       ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | void   fec_pmon_field_LLSA_STATS_CORR_1S_CLEAR_set        ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 value )
 | UINT32 fec_pmon_field_LLSA_STATS_CORR_1S_CLEAR_get        ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | void   fec_pmon_field_LLSA_STATS_UNCORR_CWDS_CLEAR_set    ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 value )
 | UINT32 fec_pmon_field_LLSA_STATS_UNCORR_CWDS_CLEAR_get    ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | void   fec_pmon_field_LLSA_STATS_OTU_FAIL_CLEAR_set       ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 value )
 | UINT32 fec_pmon_field_LLSA_STATS_OTU_FAIL_CLEAR_get       ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | void   fec_pmon_field_LLSA_STATS_CORR_0S_CLEAR_set        ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 value )
 | UINT32 fec_pmon_field_LLSA_STATS_CORR_0S_CLEAR_get        ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | void   fec_pmon_field_range_LLSA_STATS_CORR_1S_PRESET_set ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 fec_pmon_field_range_LLSA_STATS_CORR_1S_PRESET_get ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 start_bit, UINT32 stop_bit )
 | void   fec_pmon_field_range_LLSA_STATS_CORR_0S_PRESET_set ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 fec_pmon_field_range_LLSA_STATS_CORR_0S_PRESET_get ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 start_bit, UINT32 stop_bit )
 | void   fec_pmon_field_range_LLSA_STATS_CORR_1S_CLEAR_set  ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 fec_pmon_field_range_LLSA_STATS_CORR_1S_CLEAR_get  ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 start_bit, UINT32 stop_bit )
 | void   fec_pmon_field_range_LLSA_STATS_CORR_0S_CLEAR_set  ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 fec_pmon_field_range_LLSA_STATS_CORR_0S_CLEAR_get  ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 start_bit, UINT32 stop_bit )
 +-----------------------------------------------------------------------------------------------------------------------------------------------------------+
 | Paramset fec_pmon_status
 | 
 | UINT32 fec_pmon_field_LPA_STATS_FP_get                 ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | UINT32 fec_pmon_field_LPA_STATS_UNCORR_CWDS_get        ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | UINT32 fec_pmon_field_LPA_STATS_CORR_1S_get            ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | UINT32 fec_pmon_field_LPA_STATS_CORR_0S_get            ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | UINT32 fec_pmon_field_LLSA_STATS_OTU_FAIL_get          ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | UINT32 fec_pmon_field_LLSA_STATS_UNCORR_CWDS_get       ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | UINT32 fec_pmon_field_range_LPA_STATS_FP_get           ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 start_bit, UINT32 stop_bit )
 | UINT32 fec_pmon_field_range_LPA_STATS_UNCORR_CWDS_get  ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 start_bit, UINT32 stop_bit )
 | UINT32 fec_pmon_field_range_LPA_STATS_CORR_1S_get      ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 start_bit, UINT32 stop_bit )
 | UINT32 fec_pmon_field_range_LPA_STATS_CORR_0S_get      ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 start_bit, UINT32 stop_bit )
 | UINT32 fec_pmon_field_range_LLSA_STATS_UNCORR_CWDS_get ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 start_bit, UINT32 stop_bit )
 +-----------------------------------------------------------------------------------------------------------------------------------------------------------+
 | Paramset fec_pmon_status_N_burstsize20
 | 
 | void   fec_pmon_lfield_LLSA_STATS_LANE_CORR_1S_get       ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 value[20] )
 | void   fec_pmon_lfield_LLSA_STATS_LANE_CORR_0S_get       ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 value[20] )
 | UINT32 fec_pmon_lfield_range_LLSA_STATS_LANE_CORR_1S_get ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 start_bit, UINT32 stop_bit )
 | UINT32 fec_pmon_lfield_range_LLSA_STATS_LANE_CORR_0S_get ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 start_bit, UINT32 stop_bit )
 +----------------------------------------------------------------------------------------------------------------------------------------------------------*/
#ifndef _FEC_PMON_IO_H
#define _FEC_PMON_IO_H

#include "fec_pmon_loc.h"
#include "pmc_sys.h"
#include "pmc_types.h"
#include "fec_pmon_regs.h"
#include "fec_pmon_io_inline.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/* doxygen gets confused if it sees a function prototype twice in two header files so just use the prototypes from _io_inline.h for doxygen */
#ifndef DOXYGEN_SHOULD_SKIP_THIS_FILE
/* typedef struct fec_pmon_buffer_t; defined in _inline.h */

#ifndef fec_pmon_buffer_init
#define fec_pmon_buffer_init( b, h ) \
       _fec_pmon_buffer_init( LOG_CALLER b, h )
#endif
static INLINE void _fec_pmon_buffer_init( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h );
static INLINE void _fec_pmon_buffer_flush( LOG_CALLER_DEFN fec_pmon_buffer_t *b );
static INLINE UINT32 fec_pmon_reg_read( fec_pmon_buffer_t *b,
                                        fec_pmon_handle_t *h,
                                        UINT32 mem_type,
                                        UINT32 reg );
static INLINE void fec_pmon_reg_write( fec_pmon_buffer_t *b,
                                       fec_pmon_handle_t *h,
                                       UINT32 mem_type,
                                       UINT32 reg,
                                       UINT32 value );
static INLINE void fec_pmon_field_set( fec_pmon_buffer_t *b,
                                       fec_pmon_handle_t *h,
                                       UINT32 mem_type,
                                       UINT32 reg,
                                       UINT32 mask,
                                       UINT32 ofs,
                                       UINT32 value );
static INLINE void fec_pmon_action_on_write_field_set( fec_pmon_buffer_t *b,
                                                       fec_pmon_handle_t *h,
                                                       UINT32 mem_type,
                                                       UINT32 reg,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value );
static INLINE void fec_pmon_burst_read( fec_pmon_buffer_t *b,
                                        fec_pmon_handle_t *h,
                                        UINT32 mem_type,
                                        UINT32 reg,
                                        UINT32 len,
                                        UINT32 *value );
static INLINE void fec_pmon_burst_write( fec_pmon_buffer_t *b,
                                         fec_pmon_handle_t *h,
                                         UINT32 mem_type,
                                         UINT32 reg,
                                         UINT32 len,
                                         UINT32 *value );
static INLINE PMC_ERROR fec_pmon_poll_bit( fec_pmon_buffer_t *b,
                                           fec_pmon_handle_t *h,
                                           UINT32 mem_type,
                                           UINT32 reg,
                                           UINT32 mask,
                                           UINT32 value,
                                           UINT32 max_count,
                                           UINT32 *num_failed_polls,
                                           UINT32 delay_between_polls_in_microseconds );

/*-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------.
 | Functions to Access Registers
 +-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
 | Hopefully these functions are not needed and we can access fields using set/get field,...
 | but in case the code generator doens't handle a particular case these functions are available.
 +-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
 | void   fec_pmon_reg_LPA_STATISTICS_MODE_CFG_write                                       ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 value )
 | void   fec_pmon_reg_LPA_STATISTICS_MODE_CFG_field_set                                   ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32 fec_pmon_reg_LPA_STATISTICS_MODE_CFG_read                                        ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | 
 | void   fec_pmon_reg_LPA_STATISTICS_PRESET_CFG_write                                     ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 value )
 | void   fec_pmon_reg_LPA_STATISTICS_PRESET_CFG_field_set                                 ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32 fec_pmon_reg_LPA_STATISTICS_PRESET_CFG_read                                      ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | 
 | void   fec_pmon_reg_LLSA_STATISTICS_MODE_CFG_write                                      ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 value )
 | void   fec_pmon_reg_LLSA_STATISTICS_MODE_CFG_field_set                                  ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32 fec_pmon_reg_LLSA_STATISTICS_MODE_CFG_read                                       ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | 
 | void   fec_pmon_reg_LLSA_STATISTICS_PRESET_CFG_write                                    ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 value )
 | void   fec_pmon_reg_LLSA_STATISTICS_PRESET_CFG_field_set                                ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32 fec_pmon_reg_LLSA_STATISTICS_PRESET_CFG_read                                     ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | 
 | void   fec_pmon_reg_LPA_STATISTICS_PRESET_CTRL_write                                    ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 value )
 | void   fec_pmon_reg_LPA_STATISTICS_PRESET_CTRL_field_set                                ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32 fec_pmon_reg_LPA_STATISTICS_PRESET_CTRL_read                                     ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | 
 | void   fec_pmon_reg_LPA_STATISTICS_CLEAR_CTRL_write                                     ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 value )
 | void   fec_pmon_reg_LPA_STATISTICS_CLEAR_CTRL_field_set                                 ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32 fec_pmon_reg_LPA_STATISTICS_CLEAR_CTRL_read                                      ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | 
 | void   fec_pmon_reg_LLSA_STATISTICS_PRESET_CTRL_1_2__write                              ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 value )
 | void   fec_pmon_reg_LLSA_STATISTICS_PRESET_CTRL_1_2__field_set                          ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32 fec_pmon_reg_LLSA_STATISTICS_PRESET_CTRL_1_2__read                               ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | 
 | void   fec_pmon_reg_LLSA_STATISTICS_PRESET_CTRL_2_2__write                              ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 value )
 | void   fec_pmon_reg_LLSA_STATISTICS_PRESET_CTRL_2_2__field_set                          ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32 fec_pmon_reg_LLSA_STATISTICS_PRESET_CTRL_2_2__read                               ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | 
 | void   fec_pmon_reg_LLSA_STATISTICS_CLEAR_CTRL_1_2__write                               ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 value )
 | void   fec_pmon_reg_LLSA_STATISTICS_CLEAR_CTRL_1_2__field_set                           ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32 fec_pmon_reg_LLSA_STATISTICS_CLEAR_CTRL_1_2__read                                ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | 
 | void   fec_pmon_reg_LLSA_STATISTICS_CLEAR_CTRL_2_2__write                               ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 value )
 | void   fec_pmon_reg_LLSA_STATISTICS_CLEAR_CTRL_2_2__field_set                           ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32 fec_pmon_reg_LLSA_STATISTICS_CLEAR_CTRL_2_2__read                                ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | 
 | UINT32 fec_pmon_reg_LPA_STATISTICS_OTU_FRAME_PULSE_CNT_read                             ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | 
 | UINT32 fec_pmon_reg_LPA_STATISTICS_UNCORRECTED_CODEWORDS_CNT_read                       ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | 
 | UINT32 fec_pmon_reg_LPA_STATISTICS_CORRECTED_1S_CNT_read                                ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | 
 | UINT32 fec_pmon_reg_LPA_STATISTICS_CORRECTED_0S_CNT_read                                ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | 
 | UINT32 fec_pmon_reg_LLSA_STATISTICS_FAILURE_STAT_read                                   ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | 
 | UINT32 fec_pmon_reg_LLSA_STATISTICS_UNCORRECTED_CODEWORDS_CNT_read                      ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h )
 | 
 | void   fec_pmon_reg_LLSA_STATISTICS_CORRECTED_1S_CNT_FOR_LANES_0_TO_19_array_burst_read ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 ofs, UINT32 len, UINT32 *value )
 | UINT32 fec_pmon_reg_LLSA_STATISTICS_CORRECTED_1S_CNT_FOR_LANES_0_TO_19_array_read       ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 N )
 | 
 | void   fec_pmon_reg_LLSA_STATISTICS_CORRECTED_0S_CNT_FOR_LANES_0_TO_19_array_burst_read ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 ofs, UINT32 len, UINT32 *value )
 | UINT32 fec_pmon_reg_LLSA_STATISTICS_CORRECTED_0S_CNT_FOR_LANES_0_TO_19_array_read       ( fec_pmon_buffer_t *b, fec_pmon_handle_t *h, UINT32 N )
 | 
 +------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

/*
 * accessor functions for register PMC_FEC_PMON_REG_LPA_STATISTICS_MODE_CFG
 *
 * Register: LPA Statistics - Mode Configuration
 * Offset: 0x00000000 LPA_STATISTICS_MODE_CFG
 *
 * bits        1:0 default 01 LPA_STATS_COUNTER_MODE
 * field_bits  1:0
 *     +-----------------------------------------------------------------------.
 *     | LPA_STATS_COUNTER_MODE Configuration                                  |
 *     +---------+-------------------------------------------------------------+
 *     |  Value  | Configuration                                               |
 *     | ([1:0]) |                                                             |
 *     +---------+-------------------------------------------------------------+
 *     |   00    | Saturation mode with exact value. Counter works in          |
 *     |         | saturation mode and saturates when the MSB of the counter   |
 *     |         | is 1.                                                       |
 *     |   01    | Saturation mode with truncated value. Counter works in      |
 *     |         | saturation mode and saturates when the counter value is all |
 *     |         | 1s.                                                         |
 *     |   1X    | Rollover mode. Counter works continuously and rolls over    |
 *     |         | losing the MSB carry.                                       |
 *     +---------+-------------------------------------------------------------+
 *     The LPA_STATS_COUNTER_MODE bit field controls LPA performance monitoring
 *         counters operation mode.
 */

#ifndef fec_pmon_reg_LPA_STATISTICS_MODE_CFG_write
#define fec_pmon_reg_LPA_STATISTICS_MODE_CFG_write( b, h, value ) \
       _fec_pmon_reg_LPA_STATISTICS_MODE_CFG_write( LOG_CALLER b, h, value )
#endif
static INLINE void _fec_pmon_reg_LPA_STATISTICS_MODE_CFG_write( LOG_CALLER_DEFN
                                                                fec_pmon_buffer_t *b,
                                                                fec_pmon_handle_t *h,
                                                                UINT32 value );

#ifndef fec_pmon_reg_LPA_STATISTICS_MODE_CFG_field_set
#define fec_pmon_reg_LPA_STATISTICS_MODE_CFG_field_set( b, h, mask, ofs, value ) \
       _fec_pmon_reg_LPA_STATISTICS_MODE_CFG_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _fec_pmon_reg_LPA_STATISTICS_MODE_CFG_field_set( LOG_CALLER_DEFN
                                                                    fec_pmon_buffer_t *b,
                                                                    fec_pmon_handle_t *h,
                                                                    UINT32 mask,
                                                                    UINT32 ofs,
                                                                    UINT32 value );

#ifndef fec_pmon_reg_LPA_STATISTICS_MODE_CFG_read
#define fec_pmon_reg_LPA_STATISTICS_MODE_CFG_read( b, h ) \
       _fec_pmon_reg_LPA_STATISTICS_MODE_CFG_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_reg_LPA_STATISTICS_MODE_CFG_read( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for register PMC_FEC_PMON_REG_LPA_STATISTICS_PRESET_CFG
 *
 * Register: LPA Statistics - Preset Configuration
 * Offset: 0x00000004 LPA_STATISTICS_PRESET_CFG
 *
 * bits        31:0 default 00000000000000000000000000000000 LPA_STATS_PRESET_VALUE
 * field_bits  31:0
 *     The LPA_STATS_PRESET_VALUE bit field controls the value loaded in the
 *         counter when LPA_STATS_X_PRESET is activated.
 */

#ifndef fec_pmon_reg_LPA_STATISTICS_PRESET_CFG_write
#define fec_pmon_reg_LPA_STATISTICS_PRESET_CFG_write( b, h, value ) \
       _fec_pmon_reg_LPA_STATISTICS_PRESET_CFG_write( LOG_CALLER b, h, value )
#endif
static INLINE void _fec_pmon_reg_LPA_STATISTICS_PRESET_CFG_write( LOG_CALLER_DEFN
                                                                  fec_pmon_buffer_t *b,
                                                                  fec_pmon_handle_t *h,
                                                                  UINT32 value );

#ifndef fec_pmon_reg_LPA_STATISTICS_PRESET_CFG_field_set
#define fec_pmon_reg_LPA_STATISTICS_PRESET_CFG_field_set( b, h, mask, ofs, value ) \
       _fec_pmon_reg_LPA_STATISTICS_PRESET_CFG_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _fec_pmon_reg_LPA_STATISTICS_PRESET_CFG_field_set( LOG_CALLER_DEFN
                                                                      fec_pmon_buffer_t *b,
                                                                      fec_pmon_handle_t *h,
                                                                      UINT32 mask,
                                                                      UINT32 ofs,
                                                                      UINT32 value );

#ifndef fec_pmon_reg_LPA_STATISTICS_PRESET_CFG_read
#define fec_pmon_reg_LPA_STATISTICS_PRESET_CFG_read( b, h ) \
       _fec_pmon_reg_LPA_STATISTICS_PRESET_CFG_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_reg_LPA_STATISTICS_PRESET_CFG_read( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for register PMC_FEC_PMON_REG_LLSA_STATISTICS_MODE_CFG
 *
 * Register: LLSA Statistics - Mode Configuration
 * Offset: 0x00000020 LLSA_STATISTICS_MODE_CFG
 *
 * bits        1:0 default 01 LLSA_STATS_COUNTER_MODE
 * field_bits  1:0
 *     +-----------------------------------------------------------------------.
 *     | LLSA_STATS_COUNTER_MODE Configuration                                 |
 *     +-------+---------------------------------------------------------------+
 *     | Value | Configuration                                                 |
 *     +-------+---------------------------------------------------------------+
 *     |  00   | Saturation mode with exact value. Counter works in saturation |
 *     |       | mode and saturates when the MSB of the counter is 1.          |
 *     |  01   | Saturation mode with truncated value. Counter works in        |
 *     |       | saturation mode and saturates when the counter value is all   |
 *     |       | 1s.                                                           |
 *     |  1X   | Rollover mode. Counter works continuously and rolls over      |
 *     |       | losing the MSB carry.                                         |
 *     +-------+---------------------------------------------------------------+
 *     The LLSA_STATS_COUNTER_MODE bit field controls LLSA performance
 *         monitoring counters operation mode.
 *
 * bits        2   default 0  LLSA_STATS_LATCH_SOURCE
 *     When set to logic:
 *     1: The LLPA performance monitoring counter latching source is controlled
 *         by the LLSA_LCLK input of the Swizzle FEC block.
 *     0: The LLPA performance monitoring counter latching source is controlled
 *         by the FEC_STATS_AIR block.
 *     Note: Independent of LLSA_STATS_LATCH_SOURCE, the LLPA performance
 *         monitoring counter latching can also be triggered via the
 *         LLSA_STATS_X_CLEAR register fields.
 */

#ifndef fec_pmon_reg_LLSA_STATISTICS_MODE_CFG_write
#define fec_pmon_reg_LLSA_STATISTICS_MODE_CFG_write( b, h, value ) \
       _fec_pmon_reg_LLSA_STATISTICS_MODE_CFG_write( LOG_CALLER b, h, value )
#endif
static INLINE void _fec_pmon_reg_LLSA_STATISTICS_MODE_CFG_write( LOG_CALLER_DEFN
                                                                 fec_pmon_buffer_t *b,
                                                                 fec_pmon_handle_t *h,
                                                                 UINT32 value );

#ifndef fec_pmon_reg_LLSA_STATISTICS_MODE_CFG_field_set
#define fec_pmon_reg_LLSA_STATISTICS_MODE_CFG_field_set( b, h, mask, ofs, value ) \
       _fec_pmon_reg_LLSA_STATISTICS_MODE_CFG_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _fec_pmon_reg_LLSA_STATISTICS_MODE_CFG_field_set( LOG_CALLER_DEFN
                                                                     fec_pmon_buffer_t *b,
                                                                     fec_pmon_handle_t *h,
                                                                     UINT32 mask,
                                                                     UINT32 ofs,
                                                                     UINT32 value );

#ifndef fec_pmon_reg_LLSA_STATISTICS_MODE_CFG_read
#define fec_pmon_reg_LLSA_STATISTICS_MODE_CFG_read( b, h ) \
       _fec_pmon_reg_LLSA_STATISTICS_MODE_CFG_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_reg_LLSA_STATISTICS_MODE_CFG_read( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for register PMC_FEC_PMON_REG_LLSA_STATISTICS_PRESET_CFG
 *
 * Register: LLSA Statistics - Preset Configuration
 * Offset: 0x00000024 LLSA_STATISTICS_PRESET_CFG
 *
 * bits        31:0 default 00000000000000000000000000000000 LLSA_STATS_PRESET_VALUE
 * field_bits  31:0
 *     The LLSA_STATS_PRESET_VALUE bit field controls the value loaded in the
 *         counter when LLSA_STATS_X_PRESET is activated.
 */

#ifndef fec_pmon_reg_LLSA_STATISTICS_PRESET_CFG_write
#define fec_pmon_reg_LLSA_STATISTICS_PRESET_CFG_write( b, h, value ) \
       _fec_pmon_reg_LLSA_STATISTICS_PRESET_CFG_write( LOG_CALLER b, h, value )
#endif
static INLINE void _fec_pmon_reg_LLSA_STATISTICS_PRESET_CFG_write( LOG_CALLER_DEFN
                                                                   fec_pmon_buffer_t *b,
                                                                   fec_pmon_handle_t *h,
                                                                   UINT32 value );

#ifndef fec_pmon_reg_LLSA_STATISTICS_PRESET_CFG_field_set
#define fec_pmon_reg_LLSA_STATISTICS_PRESET_CFG_field_set( b, h, mask, ofs, value ) \
       _fec_pmon_reg_LLSA_STATISTICS_PRESET_CFG_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _fec_pmon_reg_LLSA_STATISTICS_PRESET_CFG_field_set( LOG_CALLER_DEFN
                                                                       fec_pmon_buffer_t *b,
                                                                       fec_pmon_handle_t *h,
                                                                       UINT32 mask,
                                                                       UINT32 ofs,
                                                                       UINT32 value );

#ifndef fec_pmon_reg_LLSA_STATISTICS_PRESET_CFG_read
#define fec_pmon_reg_LLSA_STATISTICS_PRESET_CFG_read( b, h ) \
       _fec_pmon_reg_LLSA_STATISTICS_PRESET_CFG_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_reg_LLSA_STATISTICS_PRESET_CFG_read( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for register PMC_FEC_PMON_REG_LPA_STATISTICS_PRESET_CTRL
 *
 * Register: LPA Statistics - Preset Control
 * Offset: 0x00000008 LPA_STATISTICS_PRESET_CTRL
 *
 * bits 0 default 0 LPA_STATS_FP_PRESET
 *     When set to logic:
 *     0->1: The LPA_STATS_FP counter is set to the value of the
 *         LPA_STATS_PRESET_VALUE bit field.
 *     1->0: The bit self-clears by transitioning from logic 1 to 0
 *         automatically after being written to 1.
 *
 * bits 1 default 0 LPA_STATS_UNCORR_CWDS_PRESET
 *     When set to logic:
 *     0->1: The LPA_STATS_UNCORR_CWDS counter is set to the value of the
 *         LPA_STATS_PRESET_VALUE bit field.
 *     1->0: The bit self-clears by transitioning from logic 1 to 0
 *         automatically after being written to 1.
 *
 * bits 2 default 0 LPA_STATS_CORR_1S_PRESET
 *     When set to logic:
 *     0->1: The LPA_STATS_CORR_1S counter is set to the value of the
 *         LPA_STATS_PRESET_VALUE bit field.
 *     1->0: The bit self-clears by transitioning from logic 1 to 0
 *         automatically after being written to 1.
 *
 * bits 3 default 0 LPA_STATS_CORR_0S_PRESET
 *     When set to logic:
 *     0->1: The LPA_STATS_CORR_0S counter is set to the value of the
 *         LPA_STATS_PRESET_VALUE bit field.
 *     1->0: The bit self-clears by transitioning from logic 1 to 0
 *         automatically after being written to 1.
 */

#ifndef fec_pmon_reg_LPA_STATISTICS_PRESET_CTRL_write
#define fec_pmon_reg_LPA_STATISTICS_PRESET_CTRL_write( b, h, value ) \
       _fec_pmon_reg_LPA_STATISTICS_PRESET_CTRL_write( LOG_CALLER b, h, value )
#endif
static INLINE void _fec_pmon_reg_LPA_STATISTICS_PRESET_CTRL_write( LOG_CALLER_DEFN
                                                                   fec_pmon_buffer_t *b,
                                                                   fec_pmon_handle_t *h,
                                                                   UINT32 value );

#ifndef fec_pmon_reg_LPA_STATISTICS_PRESET_CTRL_field_set
#define fec_pmon_reg_LPA_STATISTICS_PRESET_CTRL_field_set( b, h, mask, ofs, value ) \
       _fec_pmon_reg_LPA_STATISTICS_PRESET_CTRL_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _fec_pmon_reg_LPA_STATISTICS_PRESET_CTRL_field_set( LOG_CALLER_DEFN
                                                                       fec_pmon_buffer_t *b,
                                                                       fec_pmon_handle_t *h,
                                                                       UINT32 mask,
                                                                       UINT32 ofs,
                                                                       UINT32 value );

#ifndef fec_pmon_reg_LPA_STATISTICS_PRESET_CTRL_read
#define fec_pmon_reg_LPA_STATISTICS_PRESET_CTRL_read( b, h ) \
       _fec_pmon_reg_LPA_STATISTICS_PRESET_CTRL_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_reg_LPA_STATISTICS_PRESET_CTRL_read( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for register PMC_FEC_PMON_REG_LPA_STATISTICS_CLEAR_CTRL
 *
 * Register: LPA Statistics - Clear Control
 * Offset: 0x0000000c LPA_STATISTICS_CLEAR_CTRL
 *
 * bits 0 default 0 LPA_STATS_FP_CLEAR
 *     When set to logic:
 *     0->1: The LPA_STATS_FP counter is cleared. The accumulated statistic
 *         count will be updated with the current statistic count value before
 *         clearing.
 *     1->0: The bit self-clears by transitioning from logic 1 to 0
 *         automatically after being written to 1.
 *
 * bits 1 default 0 LPA_STATS_UNCORR_CWDS_CLEAR
 *     When set to logic:
 *     0->1: The LPA_STATS_UNCORR_CWDS counter is cleared. The accumulated
 *         statistic count will be updated with the current statistic count
 *         value before clearing.
 *     1->0: The bit self-clears by transitioning from logic 1 to 0
 *         automatically after being written to 1.
 *
 * bits 2 default 0 LPA_STATS_CORR_1S_CLEAR
 *     When set to logic:
 *     0->1: The LPA_STATS_CORR_1S counter is cleared. The accumulated
 *         statistic count will be updated with the current statistic count
 *         value before clearing.
 *     1->0: The bit self-clears by transitioning from logic 1 to 0
 *         automatically after being written to 1.
 *
 * bits 3 default 0 LPA_STATS_CORR_0S_CLEAR
 *     When set to logic:
 *     0->1: The LPA_STATS_CORR_0S counter is cleared. The accumulated
 *         statistic count will be updated with the current statistic count
 *         value before clearing.
 *     1->0: The bit self-clears by transitioning from logic 1 to 0
 *         automatically after being written to 1.
 */

#ifndef fec_pmon_reg_LPA_STATISTICS_CLEAR_CTRL_write
#define fec_pmon_reg_LPA_STATISTICS_CLEAR_CTRL_write( b, h, value ) \
       _fec_pmon_reg_LPA_STATISTICS_CLEAR_CTRL_write( LOG_CALLER b, h, value )
#endif
static INLINE void _fec_pmon_reg_LPA_STATISTICS_CLEAR_CTRL_write( LOG_CALLER_DEFN
                                                                  fec_pmon_buffer_t *b,
                                                                  fec_pmon_handle_t *h,
                                                                  UINT32 value );

#ifndef fec_pmon_reg_LPA_STATISTICS_CLEAR_CTRL_field_set
#define fec_pmon_reg_LPA_STATISTICS_CLEAR_CTRL_field_set( b, h, mask, ofs, value ) \
       _fec_pmon_reg_LPA_STATISTICS_CLEAR_CTRL_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _fec_pmon_reg_LPA_STATISTICS_CLEAR_CTRL_field_set( LOG_CALLER_DEFN
                                                                      fec_pmon_buffer_t *b,
                                                                      fec_pmon_handle_t *h,
                                                                      UINT32 mask,
                                                                      UINT32 ofs,
                                                                      UINT32 value );

#ifndef fec_pmon_reg_LPA_STATISTICS_CLEAR_CTRL_read
#define fec_pmon_reg_LPA_STATISTICS_CLEAR_CTRL_read( b, h ) \
       _fec_pmon_reg_LPA_STATISTICS_CLEAR_CTRL_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_reg_LPA_STATISTICS_CLEAR_CTRL_read( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for register PMC_FEC_PMON_REG_LLSA_STATISTICS_PRESET_CTRL_1_2_
 *
 * Register: LLSA Statistics - Preset Control (1/2)
 * Offset: 0x00000028 LLSA_STATISTICS_PRESET_CTRL_1_2_
 *
 * bits        19:0 default 00000000000000000000 LLSA_STATS_CORR_1S_PRESET
 * field_bits  19:0
 *     When set to logic:
 *     0->1: The LLSA_STATS_CORR_1S[x] counter is set to the value of the
 *         LLSA_STATS_PRESET_VALUE bit field.
 *     1->0: The bit self-clears by transitioning from logic 1 to 0
 *         automatically after being written to 1.
 *
 * bits        20   default 0                    LLSA_STATS_UNCORR_CWDS_PRESET
 *     When set to logic:
 *     0->1: The LLSA_STATS_UNCORR_CWDS counter is set to the value of the
 *         LLSA_STATS_PRESET_VALUE bit field.
 *     1->0: The bit self-clears by transitioning from logic 1 to 0
 *         automatically after being written to 1.
 */

#ifndef fec_pmon_reg_LLSA_STATISTICS_PRESET_CTRL_1_2__write
#define fec_pmon_reg_LLSA_STATISTICS_PRESET_CTRL_1_2__write( b, h, value ) \
       _fec_pmon_reg_LLSA_STATISTICS_PRESET_CTRL_1_2__write( LOG_CALLER b, h, value )
#endif
static INLINE void _fec_pmon_reg_LLSA_STATISTICS_PRESET_CTRL_1_2__write( LOG_CALLER_DEFN
                                                                         fec_pmon_buffer_t *b,
                                                                         fec_pmon_handle_t *h,
                                                                         UINT32 value );

#ifndef fec_pmon_reg_LLSA_STATISTICS_PRESET_CTRL_1_2__field_set
#define fec_pmon_reg_LLSA_STATISTICS_PRESET_CTRL_1_2__field_set( b, h, mask, ofs, value ) \
       _fec_pmon_reg_LLSA_STATISTICS_PRESET_CTRL_1_2__field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _fec_pmon_reg_LLSA_STATISTICS_PRESET_CTRL_1_2__field_set( LOG_CALLER_DEFN
                                                                             fec_pmon_buffer_t *b,
                                                                             fec_pmon_handle_t *h,
                                                                             UINT32 mask,
                                                                             UINT32 ofs,
                                                                             UINT32 value );

#ifndef fec_pmon_reg_LLSA_STATISTICS_PRESET_CTRL_1_2__read
#define fec_pmon_reg_LLSA_STATISTICS_PRESET_CTRL_1_2__read( b, h ) \
       _fec_pmon_reg_LLSA_STATISTICS_PRESET_CTRL_1_2__read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_reg_LLSA_STATISTICS_PRESET_CTRL_1_2__read( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for register PMC_FEC_PMON_REG_LLSA_STATISTICS_PRESET_CTRL_2_2_
 *
 * Register: LLSA Statistics - Preset Control (2/2)
 * Offset: 0x0000002c LLSA_STATISTICS_PRESET_CTRL_2_2_
 *
 * bits        19:0 default 00000000000000000000 LLSA_STATS_CORR_0S_PRESET
 * field_bits  19:0
 *     When set to logic:
 *     0->1: The LLSA_STATS_CORR_0S[x] counter is set to the value of the
 *         LLSA_STATS_PRESET_VALUE bit field.
 *     1->0: The bit self-clears by transitioning from logic 1 to 0
 *         automatically after being written to 1.
 */

#ifndef fec_pmon_reg_LLSA_STATISTICS_PRESET_CTRL_2_2__write
#define fec_pmon_reg_LLSA_STATISTICS_PRESET_CTRL_2_2__write( b, h, value ) \
       _fec_pmon_reg_LLSA_STATISTICS_PRESET_CTRL_2_2__write( LOG_CALLER b, h, value )
#endif
static INLINE void _fec_pmon_reg_LLSA_STATISTICS_PRESET_CTRL_2_2__write( LOG_CALLER_DEFN
                                                                         fec_pmon_buffer_t *b,
                                                                         fec_pmon_handle_t *h,
                                                                         UINT32 value );

#ifndef fec_pmon_reg_LLSA_STATISTICS_PRESET_CTRL_2_2__field_set
#define fec_pmon_reg_LLSA_STATISTICS_PRESET_CTRL_2_2__field_set( b, h, mask, ofs, value ) \
       _fec_pmon_reg_LLSA_STATISTICS_PRESET_CTRL_2_2__field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _fec_pmon_reg_LLSA_STATISTICS_PRESET_CTRL_2_2__field_set( LOG_CALLER_DEFN
                                                                             fec_pmon_buffer_t *b,
                                                                             fec_pmon_handle_t *h,
                                                                             UINT32 mask,
                                                                             UINT32 ofs,
                                                                             UINT32 value );

#ifndef fec_pmon_reg_LLSA_STATISTICS_PRESET_CTRL_2_2__read
#define fec_pmon_reg_LLSA_STATISTICS_PRESET_CTRL_2_2__read( b, h ) \
       _fec_pmon_reg_LLSA_STATISTICS_PRESET_CTRL_2_2__read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_reg_LLSA_STATISTICS_PRESET_CTRL_2_2__read( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for register PMC_FEC_PMON_REG_LLSA_STATISTICS_CLEAR_CTRL_1_2_
 *
 * Register: LLSA Statistics - Clear Control (1/2)
 * Offset: 0x00000030 LLSA_STATISTICS_CLEAR_CTRL_1_2_
 *
 * bits        19:0 default 00000000000000000000 LLSA_STATS_CORR_1S_CLEAR
 * field_bits  19:0
 *     When set to logic:
 *     0->1: The LLSA_STATS_CORR_1S[x] counter is cleared. The accumulated
 *         statistic count will be updated with the current statistic count
 *         value before clearing.
 *     1->0: The bit self-clears by transitioning from logic 1 to 0
 *         automatically after being written to 1.
 *
 * bits        20   default 0                    LLSA_STATS_UNCORR_CWDS_CLEAR
 *     When set to logic:
 *     0->1: The LLSA_STATS_UNCORR_CWDS counter is cleared. The accumulated
 *         statistic count will be updated with the current statistic count
 *         value before clearing.
 *     1->0: The bit self-clears by transitioning from logic 1 to 0
 *         automatically after being written to 1.
 *
 * bits        21   default 0                    LLSA_STATS_OTU_FAIL_CLEAR
 *     When set to logic:
 *     0->1: The LLSA_STATS_OTU_FAIL counter is cleared. The accumulated
 *         statistic count will be updated with the current statistic count
 *         value before clearing.
 *     1->0: The bit self-clears by transitioning from logic 1 to 0
 *         automatically after being written to 1.
 */

#ifndef fec_pmon_reg_LLSA_STATISTICS_CLEAR_CTRL_1_2__write
#define fec_pmon_reg_LLSA_STATISTICS_CLEAR_CTRL_1_2__write( b, h, value ) \
       _fec_pmon_reg_LLSA_STATISTICS_CLEAR_CTRL_1_2__write( LOG_CALLER b, h, value )
#endif
static INLINE void _fec_pmon_reg_LLSA_STATISTICS_CLEAR_CTRL_1_2__write( LOG_CALLER_DEFN
                                                                        fec_pmon_buffer_t *b,
                                                                        fec_pmon_handle_t *h,
                                                                        UINT32 value );

#ifndef fec_pmon_reg_LLSA_STATISTICS_CLEAR_CTRL_1_2__field_set
#define fec_pmon_reg_LLSA_STATISTICS_CLEAR_CTRL_1_2__field_set( b, h, mask, ofs, value ) \
       _fec_pmon_reg_LLSA_STATISTICS_CLEAR_CTRL_1_2__field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _fec_pmon_reg_LLSA_STATISTICS_CLEAR_CTRL_1_2__field_set( LOG_CALLER_DEFN
                                                                            fec_pmon_buffer_t *b,
                                                                            fec_pmon_handle_t *h,
                                                                            UINT32 mask,
                                                                            UINT32 ofs,
                                                                            UINT32 value );

#ifndef fec_pmon_reg_LLSA_STATISTICS_CLEAR_CTRL_1_2__read
#define fec_pmon_reg_LLSA_STATISTICS_CLEAR_CTRL_1_2__read( b, h ) \
       _fec_pmon_reg_LLSA_STATISTICS_CLEAR_CTRL_1_2__read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_reg_LLSA_STATISTICS_CLEAR_CTRL_1_2__read( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for register PMC_FEC_PMON_REG_LLSA_STATISTICS_CLEAR_CTRL_2_2_
 *
 * Register: LLSA Statistics - Clear Control (2/2)
 * Offset: 0x00000034 LLSA_STATISTICS_CLEAR_CTRL_2_2_
 *
 * bits        19:0 default 00000000000000000000 LLSA_STATS_CORR_0S_CLEAR
 * field_bits  19:0
 *     When set to logic:
 *     0->1: The LLSA_STATS_CORR_0S[x] counter is cleared. The accumulated
 *         statistic count will be updated with the current statistic count
 *         value before clearing.
 *     1->0: The bit self-clears by transitioning from logic 1 to 0
 *         automatically after being written to 1.
 */

#ifndef fec_pmon_reg_LLSA_STATISTICS_CLEAR_CTRL_2_2__write
#define fec_pmon_reg_LLSA_STATISTICS_CLEAR_CTRL_2_2__write( b, h, value ) \
       _fec_pmon_reg_LLSA_STATISTICS_CLEAR_CTRL_2_2__write( LOG_CALLER b, h, value )
#endif
static INLINE void _fec_pmon_reg_LLSA_STATISTICS_CLEAR_CTRL_2_2__write( LOG_CALLER_DEFN
                                                                        fec_pmon_buffer_t *b,
                                                                        fec_pmon_handle_t *h,
                                                                        UINT32 value );

#ifndef fec_pmon_reg_LLSA_STATISTICS_CLEAR_CTRL_2_2__field_set
#define fec_pmon_reg_LLSA_STATISTICS_CLEAR_CTRL_2_2__field_set( b, h, mask, ofs, value ) \
       _fec_pmon_reg_LLSA_STATISTICS_CLEAR_CTRL_2_2__field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _fec_pmon_reg_LLSA_STATISTICS_CLEAR_CTRL_2_2__field_set( LOG_CALLER_DEFN
                                                                            fec_pmon_buffer_t *b,
                                                                            fec_pmon_handle_t *h,
                                                                            UINT32 mask,
                                                                            UINT32 ofs,
                                                                            UINT32 value );

#ifndef fec_pmon_reg_LLSA_STATISTICS_CLEAR_CTRL_2_2__read
#define fec_pmon_reg_LLSA_STATISTICS_CLEAR_CTRL_2_2__read( b, h ) \
       _fec_pmon_reg_LLSA_STATISTICS_CLEAR_CTRL_2_2__read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_reg_LLSA_STATISTICS_CLEAR_CTRL_2_2__read( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for register PMC_FEC_PMON_REG_LPA_STATISTICS_OTU_FRAME_PULSE_CNT
 *
 * Register: LPA Statistics - OTU Frame Pulse Count
 * Offset: 0x00000010 LPA_STATISTICS_OTU_FRAME_PULSE_CNT
 *
 * bits        31:0 default XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX LPA_STATS_FP
 * field_bits  31:0
 *     The LPA_STATS_FP bit field reflects the accumulated counter value of the
 *         performance monitor block associated with the number of OTN frame
 *         pulses. The accumulated count is updated with the current count at
 *         the beginning of every accumulation period triggered by a rising
 *         edge on LPA_LCLK and the current count is cleared.
 *     This performance statistic counter can be manually cleared or preset.
 */

#ifndef fec_pmon_reg_LPA_STATISTICS_OTU_FRAME_PULSE_CNT_read
#define fec_pmon_reg_LPA_STATISTICS_OTU_FRAME_PULSE_CNT_read( b, h ) \
       _fec_pmon_reg_LPA_STATISTICS_OTU_FRAME_PULSE_CNT_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_reg_LPA_STATISTICS_OTU_FRAME_PULSE_CNT_read( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for register PMC_FEC_PMON_REG_LPA_STATISTICS_UNCORRECTED_CODEWORDS_CNT
 *
 * Register: LPA Statistics - Uncorrected Codewords Count
 * Offset: 0x00000014 LPA_STATISTICS_UNCORRECTED_CODEWORDS_CNT
 *
 * bits        31:0 default XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX LPA_STATS_UNCORR_CWDS
 * field_bits  31:0
 *     The LPA_STATS_UNCORR_CWDS bit field reflects the accumulated counter
 *         value of the performance monitor block associated with the number
 *         uncorrected BCH codewords from the most recently commited OTU row.
 *         The accumulated count is updated with the current count at the
 *         beginning of every accumulation period triggered by a rising edge on
 *         LPA_LCLK and the current count is cleared.
 *     This performance statistic counter can be manually cleared or preset.
 */

#ifndef fec_pmon_reg_LPA_STATISTICS_UNCORRECTED_CODEWORDS_CNT_read
#define fec_pmon_reg_LPA_STATISTICS_UNCORRECTED_CODEWORDS_CNT_read( b, h ) \
       _fec_pmon_reg_LPA_STATISTICS_UNCORRECTED_CODEWORDS_CNT_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_reg_LPA_STATISTICS_UNCORRECTED_CODEWORDS_CNT_read( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for register PMC_FEC_PMON_REG_LPA_STATISTICS_CORRECTED_1S_CNT
 *
 * Register: LPA Statistics - Corrected 1s Count
 * Offset: 0x00000018 LPA_STATISTICS_CORRECTED_1S_CNT
 *
 * bits        31:0 default XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX LPA_STATS_CORR_1S
 * field_bits  31:0
 *     The LPA_STATS_CORR_1S bit field reflects the accumulated counter value
 *         of the performance monitor block associated with the number of
 *         detected bits that were "ones" on the optical line and which where
 *         corrected by the decoder. The accumulated count is updated with the
 *         current count at the beginning of every accumulation period
 *         triggered by a rising edge on LPA_LCLK and the current count is
 *         cleared.
 *     This performance statistic counter can be manually cleared or preset.
 */

#ifndef fec_pmon_reg_LPA_STATISTICS_CORRECTED_1S_CNT_read
#define fec_pmon_reg_LPA_STATISTICS_CORRECTED_1S_CNT_read( b, h ) \
       _fec_pmon_reg_LPA_STATISTICS_CORRECTED_1S_CNT_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_reg_LPA_STATISTICS_CORRECTED_1S_CNT_read( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for register PMC_FEC_PMON_REG_LPA_STATISTICS_CORRECTED_0S_CNT
 *
 * Register: LPA Statistics - Corrected 0s Count
 * Offset: 0x0000001c LPA_STATISTICS_CORRECTED_0S_CNT
 *
 * bits        31:0 default XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX LPA_STATS_CORR_0S
 * field_bits  31:0
 *     The LPA_STATS_CORR_0S bit field reflects the accumulated counter value
 *         of the performance monitor block associated with the number of
 *         detected bits that were "zero" on the optical line and which where
 *         corrected by the decoder. The accumulated count is updated with the
 *         current count at the beginning of every accumulation period
 *         triggered by a rising edge on LPA_LCLK and the current count is
 *         cleared.
 *     This performance statistic counter can be manually cleared or preset.
 */

#ifndef fec_pmon_reg_LPA_STATISTICS_CORRECTED_0S_CNT_read
#define fec_pmon_reg_LPA_STATISTICS_CORRECTED_0S_CNT_read( b, h ) \
       _fec_pmon_reg_LPA_STATISTICS_CORRECTED_0S_CNT_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_reg_LPA_STATISTICS_CORRECTED_0S_CNT_read( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for register PMC_FEC_PMON_REG_LLSA_STATISTICS_FAILURE_STAT
 *
 * Register: LLSA Statistics - Failure Status
 * Offset: 0x00000100 LLSA_STATISTICS_FAILURE_STAT
 *     This register is provided for diagnostic test only. It duplicates the
 *         PMON value reported automatically by the FEC STAT AIR block.
 *
 * bits 0 default X LLSA_STATS_OTU_FAIL
 *     The LLSA_STATS_OTU_FAIL bit field reflects the state of the OTU framer
 *         during the current LLSA accumulation period.
 *     LLSA_STATS_OTU_FAIL is cleared at the start of a new LLSA accumulation
 *         period.
 *     The source for a new LLSA accumulation period is controlled by the
 *         LLSA_STATS_LATCH_SOURCE register field.
 *     This status can be manually cleared.
 *     When read as logic:
 *     1: The Swizzle FEC decoder will not correct errors. It may be asserted
 *         during Signal Fail or Loss of Frame conditions. Assertion of the
 *         upstream OTN framer OTU_FAIL is reported by the LLSA_STATS_OTU_FAIL.
 *         Reading this bit to '1' confirms an OTU framer failure during the
 *         current LLSA accumulation period.
 *     0: No OTU framer failure occured during the current LLSA accumulation
 *         period.
 */

#ifndef fec_pmon_reg_LLSA_STATISTICS_FAILURE_STAT_read
#define fec_pmon_reg_LLSA_STATISTICS_FAILURE_STAT_read( b, h ) \
       _fec_pmon_reg_LLSA_STATISTICS_FAILURE_STAT_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_reg_LLSA_STATISTICS_FAILURE_STAT_read( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for register PMC_FEC_PMON_REG_LLSA_STATISTICS_UNCORRECTED_CODEWORDS_CNT
 *
 * Register: LLSA Statistics - Uncorrected Codewords Count
 * Offset: 0x0000011c LLSA_STATISTICS_UNCORRECTED_CODEWORDS_CNT
 *     This register is provided for diagnostic test only. It duplicates the
 *         PMON value reported automatically by the FEC STAT AIR block.
 *
 * bits        31:0 default XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX LLSA_STATS_UNCORR_CWDS
 * field_bits  31:0
 *     The LLSA_STATS_UNCORR_CWDS bit field reflects the accumulated count
 *         value of the performance monitor block associated with the number of
 *         uncorrected codewords errors on lanes 0 to 3 (40G mode) and lanes 0
 *         to 19 (100G mode). The accumulated count is updated with the current
 *         count at the beginning of every accumulation period and the current
 *         count is cleared.
 *     The source for a new LLSA accumulation period is controlled by the
 *         LLSA_STATS_LATCH_SOURCE register field.
 *     This performance statistic counter can be manually cleared or preset.
 */

#ifndef fec_pmon_reg_LLSA_STATISTICS_UNCORRECTED_CODEWORDS_CNT_read
#define fec_pmon_reg_LLSA_STATISTICS_UNCORRECTED_CODEWORDS_CNT_read( b, h ) \
       _fec_pmon_reg_LLSA_STATISTICS_UNCORRECTED_CODEWORDS_CNT_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_reg_LLSA_STATISTICS_UNCORRECTED_CODEWORDS_CNT_read( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for register PMC_FEC_PMON_REG_LLSA_STATISTICS_CORRECTED_1S_CNT_FOR_LANES_0_TO_19
 *
 * Register: LLSA Statistics - Corrected 1s Count for Lanes 0 to 19
 * Offset: 0x00000140+(N * 4) LLSA_STATISTICS_CORRECTED_1S_CNT_FOR_LANES_0_TO_19
 *     This register is provided for diagnostic test only. It duplicates the
 *         PMON value reported automatically by the FEC STAT AIR block.
 *
 * bits        31:0 default XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX LLSA_STATS_LANE_CORR_1S
 * field_bits  31:0
 *     The LLSA_STATS_LANE_CORR_1S bit field reflects the accumulated count
 *         value of the performance monitor block associated with the number of
 *         corrected 1s errors on lane N. The accumulated count is updated with
 *         the current count at the beginning of every accumulation period and
 *         the current count is cleared.
 *     Lanes 4 to 19 should be ignored in 40G mode.
 *     The source for a new LLSA accumulation period is controlled by the
 *         LLSA_STATS_LATCH_SOURCE register field.
 *     This performance statistic counter can be manually cleared or preset.
 */

#ifndef fec_pmon_reg_LLSA_STATISTICS_CORRECTED_1S_CNT_FOR_LANES_0_TO_19_array_burst_read
#define fec_pmon_reg_LLSA_STATISTICS_CORRECTED_1S_CNT_FOR_LANES_0_TO_19_array_burst_read( b, h, ofs, len, value ) \
       _fec_pmon_reg_LLSA_STATISTICS_CORRECTED_1S_CNT_FOR_LANES_0_TO_19_array_burst_read( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _fec_pmon_reg_LLSA_STATISTICS_CORRECTED_1S_CNT_FOR_LANES_0_TO_19_array_burst_read( LOG_CALLER_DEFN
                                                                                                      fec_pmon_buffer_t *b,
                                                                                                      fec_pmon_handle_t *h,
                                                                                                      UINT32 ofs,
                                                                                                      UINT32 len,
                                                                                                      UINT32 *value );

#ifndef fec_pmon_reg_LLSA_STATISTICS_CORRECTED_1S_CNT_FOR_LANES_0_TO_19_array_read
#define fec_pmon_reg_LLSA_STATISTICS_CORRECTED_1S_CNT_FOR_LANES_0_TO_19_array_read( b, h, N ) \
       _fec_pmon_reg_LLSA_STATISTICS_CORRECTED_1S_CNT_FOR_LANES_0_TO_19_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _fec_pmon_reg_LLSA_STATISTICS_CORRECTED_1S_CNT_FOR_LANES_0_TO_19_array_read( LOG_CALLER_DEFN
                                                                                                  fec_pmon_buffer_t *b,
                                                                                                  fec_pmon_handle_t *h,
                                                                                                  UINT32 N ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for register PMC_FEC_PMON_REG_LLSA_STATISTICS_CORRECTED_0S_CNT_FOR_LANES_0_TO_19
 *
 * Register: LLSA Statistics - Corrected 0s Count for Lanes 0 to 19
 * Offset: 0x00000200+(N * 4) LLSA_STATISTICS_CORRECTED_0S_CNT_FOR_LANES_0_TO_19
 *     This register is provided for diagnostic test only. It duplicates the
 *         PMON value reported automatically by the FEC STAT AIR block.
 *
 * bits        31:0 default XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX LLSA_STATS_LANE_CORR_0S
 * field_bits  31:0
 *     The LLSA_STATS_LANE_CORR_0S bit field reflects the accumulated count
 *         value of the performance monitor block associated with the number of
 *         corrected 0s errors on lane N. The accumulated count is updated with
 *         the current count at the beginning of every accumulation period and
 *         the current count is cleared.
 *     Lanes 4 to 19 should be ignored in 40G mode.
 *     The source for a new LLSA accumulation period is controlled by the
 *         LLSA_STATS_LATCH_SOURCE register field.
 *     This performance statistic counter can be manually cleared or preset.
 */

#ifndef fec_pmon_reg_LLSA_STATISTICS_CORRECTED_0S_CNT_FOR_LANES_0_TO_19_array_burst_read
#define fec_pmon_reg_LLSA_STATISTICS_CORRECTED_0S_CNT_FOR_LANES_0_TO_19_array_burst_read( b, h, ofs, len, value ) \
       _fec_pmon_reg_LLSA_STATISTICS_CORRECTED_0S_CNT_FOR_LANES_0_TO_19_array_burst_read( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _fec_pmon_reg_LLSA_STATISTICS_CORRECTED_0S_CNT_FOR_LANES_0_TO_19_array_burst_read( LOG_CALLER_DEFN
                                                                                                      fec_pmon_buffer_t *b,
                                                                                                      fec_pmon_handle_t *h,
                                                                                                      UINT32 ofs,
                                                                                                      UINT32 len,
                                                                                                      UINT32 *value );

#ifndef fec_pmon_reg_LLSA_STATISTICS_CORRECTED_0S_CNT_FOR_LANES_0_TO_19_array_read
#define fec_pmon_reg_LLSA_STATISTICS_CORRECTED_0S_CNT_FOR_LANES_0_TO_19_array_read( b, h, N ) \
       _fec_pmon_reg_LLSA_STATISTICS_CORRECTED_0S_CNT_FOR_LANES_0_TO_19_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _fec_pmon_reg_LLSA_STATISTICS_CORRECTED_0S_CNT_FOR_LANES_0_TO_19_array_read( LOG_CALLER_DEFN
                                                                                                  fec_pmon_buffer_t *b,
                                                                                                  fec_pmon_handle_t *h,
                                                                                                  UINT32 N ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * ==================================================================================
 *             Parameter Access Functions for Paramset fec_pmon_config
 * ==================================================================================
 */

/*
 * accessor functions for parameter LPA_STATS_COUNTER_MODE
 *
 *     Register: LPA Statistics - Mode Configuration
 *     Offset: 0x00000000 LPA_STATISTICS_MODE_CFG
 *
 *     bits        1:0 default 01 LPA_STATS_COUNTER_MODE
 *     field_bits  1:0
 *         +-----------------------------------------------------------------------.
 *         | LPA_STATS_COUNTER_MODE Configuration                                  |
 *         +---------+-------------------------------------------------------------+
 *         |  Value  | Configuration                                               |
 *         | ([1:0]) |                                                             |
 *         +---------+-------------------------------------------------------------+
 *         |   00    | Saturation mode with exact value. Counter works in          |
 *         |         | saturation mode and saturates when the MSB of the counter   |
 *         |         | is 1.                                                       |
 *         |   01    | Saturation mode with truncated value. Counter works in      |
 *         |         | saturation mode and saturates when the counter value is all |
 *         |         | 1s.                                                         |
 *         |   1X    | Rollover mode. Counter works continuously and rolls over    |
 *         |         | losing the MSB carry.                                       |
 *         +---------+-------------------------------------------------------------+
 *         The LPA_STATS_COUNTER_MODE bit field controls LPA performance monitoring
 *             counters operation mode.
 */


#ifndef fec_pmon_field_LPA_STATS_COUNTER_MODE_set
#define fec_pmon_field_LPA_STATS_COUNTER_MODE_set( b, h, value ) \
       _fec_pmon_field_LPA_STATS_COUNTER_MODE_set( LOG_CALLER b, h, value )
#endif
static INLINE void _fec_pmon_field_LPA_STATS_COUNTER_MODE_set( LOG_CALLER_DEFN
                                                               fec_pmon_buffer_t *b,
                                                               fec_pmon_handle_t *h,
                                                               UINT32 value );

#ifndef fec_pmon_field_LPA_STATS_COUNTER_MODE_get
#define fec_pmon_field_LPA_STATS_COUNTER_MODE_get( b, h ) \
       _fec_pmon_field_LPA_STATS_COUNTER_MODE_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_field_LPA_STATS_COUNTER_MODE_get( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for parameter LPA_STATS_PRESET_VALUE
 *
 *     Register: LPA Statistics - Preset Configuration
 *     Offset: 0x00000004 LPA_STATISTICS_PRESET_CFG
 *
 *     bits        31:0 default 00000000000000000000000000000000 LPA_STATS_PRESET_VALUE
 *     field_bits  31:0
 *         The LPA_STATS_PRESET_VALUE bit field controls the value loaded in the
 *             counter when LPA_STATS_X_PRESET is activated.
 */


#ifndef fec_pmon_field_LPA_STATS_PRESET_VALUE_set
#define fec_pmon_field_LPA_STATS_PRESET_VALUE_set( b, h, value ) \
       _fec_pmon_field_LPA_STATS_PRESET_VALUE_set( LOG_CALLER b, h, value )
#endif
static INLINE void _fec_pmon_field_LPA_STATS_PRESET_VALUE_set( LOG_CALLER_DEFN
                                                               fec_pmon_buffer_t *b,
                                                               fec_pmon_handle_t *h,
                                                               UINT32 value );

#ifndef fec_pmon_field_LPA_STATS_PRESET_VALUE_get
#define fec_pmon_field_LPA_STATS_PRESET_VALUE_get( b, h ) \
       _fec_pmon_field_LPA_STATS_PRESET_VALUE_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_field_LPA_STATS_PRESET_VALUE_get( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for parameter LLSA_STATS_COUNTER_MODE
 *
 *     Register: LLSA Statistics - Mode Configuration
 *     Offset: 0x00000020 LLSA_STATISTICS_MODE_CFG
 *
 *     bits        1:0 default 01 LLSA_STATS_COUNTER_MODE
 *     field_bits  1:0
 *         +-----------------------------------------------------------------------.
 *         | LLSA_STATS_COUNTER_MODE Configuration                                 |
 *         +-------+---------------------------------------------------------------+
 *         | Value | Configuration                                                 |
 *         +-------+---------------------------------------------------------------+
 *         |  00   | Saturation mode with exact value. Counter works in saturation |
 *         |       | mode and saturates when the MSB of the counter is 1.          |
 *         |  01   | Saturation mode with truncated value. Counter works in        |
 *         |       | saturation mode and saturates when the counter value is all   |
 *         |       | 1s.                                                           |
 *         |  1X   | Rollover mode. Counter works continuously and rolls over      |
 *         |       | losing the MSB carry.                                         |
 *         +-------+---------------------------------------------------------------+
 *         The LLSA_STATS_COUNTER_MODE bit field controls LLSA performance
 *             monitoring counters operation mode.
 */


#ifndef fec_pmon_field_LLSA_STATS_COUNTER_MODE_set
#define fec_pmon_field_LLSA_STATS_COUNTER_MODE_set( b, h, value ) \
       _fec_pmon_field_LLSA_STATS_COUNTER_MODE_set( LOG_CALLER b, h, value )
#endif
static INLINE void _fec_pmon_field_LLSA_STATS_COUNTER_MODE_set( LOG_CALLER_DEFN
                                                                fec_pmon_buffer_t *b,
                                                                fec_pmon_handle_t *h,
                                                                UINT32 value );

#ifndef fec_pmon_field_LLSA_STATS_COUNTER_MODE_get
#define fec_pmon_field_LLSA_STATS_COUNTER_MODE_get( b, h ) \
       _fec_pmon_field_LLSA_STATS_COUNTER_MODE_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_field_LLSA_STATS_COUNTER_MODE_get( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for parameter LLSA_STATS_LATCH_SOURCE
 *
 *     Register: LLSA Statistics - Mode Configuration
 *     Offset: 0x00000020 LLSA_STATISTICS_MODE_CFG
 *
 *     bits 2 default 0 LLSA_STATS_LATCH_SOURCE
 *         When set to logic:
 *         1: The LLPA performance monitoring counter latching source is controlled
 *             by the LLSA_LCLK input of the Swizzle FEC block.
 *         0: The LLPA performance monitoring counter latching source is controlled
 *             by the FEC_STATS_AIR block.
 *         Note: Independent of LLSA_STATS_LATCH_SOURCE, the LLPA performance
 *             monitoring counter latching can also be triggered via the
 *             LLSA_STATS_X_CLEAR register fields.
 */


#ifndef fec_pmon_field_LLSA_STATS_LATCH_SOURCE_set
#define fec_pmon_field_LLSA_STATS_LATCH_SOURCE_set( b, h, value ) \
       _fec_pmon_field_LLSA_STATS_LATCH_SOURCE_set( LOG_CALLER b, h, value )
#endif
static INLINE void _fec_pmon_field_LLSA_STATS_LATCH_SOURCE_set( LOG_CALLER_DEFN
                                                                fec_pmon_buffer_t *b,
                                                                fec_pmon_handle_t *h,
                                                                UINT32 value );

#ifndef fec_pmon_field_LLSA_STATS_LATCH_SOURCE_get
#define fec_pmon_field_LLSA_STATS_LATCH_SOURCE_get( b, h ) \
       _fec_pmon_field_LLSA_STATS_LATCH_SOURCE_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_field_LLSA_STATS_LATCH_SOURCE_get( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for parameter LLSA_STATS_PRESET_VALUE
 *
 *     Register: LLSA Statistics - Preset Configuration
 *     Offset: 0x00000024 LLSA_STATISTICS_PRESET_CFG
 *
 *     bits        31:0 default 00000000000000000000000000000000 LLSA_STATS_PRESET_VALUE
 *     field_bits  31:0
 *         The LLSA_STATS_PRESET_VALUE bit field controls the value loaded in the
 *             counter when LLSA_STATS_X_PRESET is activated.
 */


#ifndef fec_pmon_field_LLSA_STATS_PRESET_VALUE_set
#define fec_pmon_field_LLSA_STATS_PRESET_VALUE_set( b, h, value ) \
       _fec_pmon_field_LLSA_STATS_PRESET_VALUE_set( LOG_CALLER b, h, value )
#endif
static INLINE void _fec_pmon_field_LLSA_STATS_PRESET_VALUE_set( LOG_CALLER_DEFN
                                                                fec_pmon_buffer_t *b,
                                                                fec_pmon_handle_t *h,
                                                                UINT32 value );

#ifndef fec_pmon_field_LLSA_STATS_PRESET_VALUE_get
#define fec_pmon_field_LLSA_STATS_PRESET_VALUE_get( b, h ) \
       _fec_pmon_field_LLSA_STATS_PRESET_VALUE_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_field_LLSA_STATS_PRESET_VALUE_get( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

#ifndef fec_pmon_field_range_LPA_STATS_COUNTER_MODE_set
#define fec_pmon_field_range_LPA_STATS_COUNTER_MODE_set( b, h, start_bit, stop_bit, value ) \
       _fec_pmon_field_range_LPA_STATS_COUNTER_MODE_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _fec_pmon_field_range_LPA_STATS_COUNTER_MODE_set( LOG_CALLER_DEFN
                                                                     fec_pmon_buffer_t *b,
                                                                     fec_pmon_handle_t *h,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value );

#ifndef fec_pmon_field_range_LPA_STATS_COUNTER_MODE_get
#define fec_pmon_field_range_LPA_STATS_COUNTER_MODE_get( b, h, start_bit, stop_bit ) \
       _fec_pmon_field_range_LPA_STATS_COUNTER_MODE_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _fec_pmon_field_range_LPA_STATS_COUNTER_MODE_get( LOG_CALLER_DEFN
                                                                       fec_pmon_buffer_t *b,
                                                                       fec_pmon_handle_t *h,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT;

#ifndef fec_pmon_field_range_LPA_STATS_PRESET_VALUE_set
#define fec_pmon_field_range_LPA_STATS_PRESET_VALUE_set( b, h, start_bit, stop_bit, value ) \
       _fec_pmon_field_range_LPA_STATS_PRESET_VALUE_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _fec_pmon_field_range_LPA_STATS_PRESET_VALUE_set( LOG_CALLER_DEFN
                                                                     fec_pmon_buffer_t *b,
                                                                     fec_pmon_handle_t *h,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value );

#ifndef fec_pmon_field_range_LPA_STATS_PRESET_VALUE_get
#define fec_pmon_field_range_LPA_STATS_PRESET_VALUE_get( b, h, start_bit, stop_bit ) \
       _fec_pmon_field_range_LPA_STATS_PRESET_VALUE_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _fec_pmon_field_range_LPA_STATS_PRESET_VALUE_get( LOG_CALLER_DEFN
                                                                       fec_pmon_buffer_t *b,
                                                                       fec_pmon_handle_t *h,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT;

#ifndef fec_pmon_field_range_LLSA_STATS_COUNTER_MODE_set
#define fec_pmon_field_range_LLSA_STATS_COUNTER_MODE_set( b, h, start_bit, stop_bit, value ) \
       _fec_pmon_field_range_LLSA_STATS_COUNTER_MODE_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _fec_pmon_field_range_LLSA_STATS_COUNTER_MODE_set( LOG_CALLER_DEFN
                                                                      fec_pmon_buffer_t *b,
                                                                      fec_pmon_handle_t *h,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value );

#ifndef fec_pmon_field_range_LLSA_STATS_COUNTER_MODE_get
#define fec_pmon_field_range_LLSA_STATS_COUNTER_MODE_get( b, h, start_bit, stop_bit ) \
       _fec_pmon_field_range_LLSA_STATS_COUNTER_MODE_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _fec_pmon_field_range_LLSA_STATS_COUNTER_MODE_get( LOG_CALLER_DEFN
                                                                        fec_pmon_buffer_t *b,
                                                                        fec_pmon_handle_t *h,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT;

#ifndef fec_pmon_field_range_LLSA_STATS_PRESET_VALUE_set
#define fec_pmon_field_range_LLSA_STATS_PRESET_VALUE_set( b, h, start_bit, stop_bit, value ) \
       _fec_pmon_field_range_LLSA_STATS_PRESET_VALUE_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _fec_pmon_field_range_LLSA_STATS_PRESET_VALUE_set( LOG_CALLER_DEFN
                                                                      fec_pmon_buffer_t *b,
                                                                      fec_pmon_handle_t *h,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value );

#ifndef fec_pmon_field_range_LLSA_STATS_PRESET_VALUE_get
#define fec_pmon_field_range_LLSA_STATS_PRESET_VALUE_get( b, h, start_bit, stop_bit ) \
       _fec_pmon_field_range_LLSA_STATS_PRESET_VALUE_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _fec_pmon_field_range_LLSA_STATS_PRESET_VALUE_get( LOG_CALLER_DEFN
                                                                        fec_pmon_buffer_t *b,
                                                                        fec_pmon_handle_t *h,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * ==================================================================================
 *           Parameter Access Functions for Paramset fec_pmon_config_edge
 * ==================================================================================
 */

/*
 * accessor functions for parameter LPA_STATS_FP_PRESET
 *
 *     Register: LPA Statistics - Preset Control
 *     Offset: 0x00000008 LPA_STATISTICS_PRESET_CTRL
 *
 *     bits 0 default 0 LPA_STATS_FP_PRESET
 *         When set to logic:
 *         0->1: The LPA_STATS_FP counter is set to the value of the
 *             LPA_STATS_PRESET_VALUE bit field.
 *         1->0: The bit self-clears by transitioning from logic 1 to 0
 *             automatically after being written to 1.
 */


#ifndef fec_pmon_field_LPA_STATS_FP_PRESET_set
#define fec_pmon_field_LPA_STATS_FP_PRESET_set( b, h, value ) \
       _fec_pmon_field_LPA_STATS_FP_PRESET_set( LOG_CALLER b, h, value )
#endif
static INLINE void _fec_pmon_field_LPA_STATS_FP_PRESET_set( LOG_CALLER_DEFN
                                                            fec_pmon_buffer_t *b,
                                                            fec_pmon_handle_t *h,
                                                            UINT32 value );

#ifndef fec_pmon_field_LPA_STATS_FP_PRESET_get
#define fec_pmon_field_LPA_STATS_FP_PRESET_get( b, h ) \
       _fec_pmon_field_LPA_STATS_FP_PRESET_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_field_LPA_STATS_FP_PRESET_get( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for parameter LPA_STATS_UNCORR_CWDS_PRESET
 *
 *     Register: LPA Statistics - Preset Control
 *     Offset: 0x00000008 LPA_STATISTICS_PRESET_CTRL
 *
 *     bits 1 default 0 LPA_STATS_UNCORR_CWDS_PRESET
 *         When set to logic:
 *         0->1: The LPA_STATS_UNCORR_CWDS counter is set to the value of the
 *             LPA_STATS_PRESET_VALUE bit field.
 *         1->0: The bit self-clears by transitioning from logic 1 to 0
 *             automatically after being written to 1.
 */


#ifndef fec_pmon_field_LPA_STATS_UNCORR_CWDS_PRESET_set
#define fec_pmon_field_LPA_STATS_UNCORR_CWDS_PRESET_set( b, h, value ) \
       _fec_pmon_field_LPA_STATS_UNCORR_CWDS_PRESET_set( LOG_CALLER b, h, value )
#endif
static INLINE void _fec_pmon_field_LPA_STATS_UNCORR_CWDS_PRESET_set( LOG_CALLER_DEFN
                                                                     fec_pmon_buffer_t *b,
                                                                     fec_pmon_handle_t *h,
                                                                     UINT32 value );

#ifndef fec_pmon_field_LPA_STATS_UNCORR_CWDS_PRESET_get
#define fec_pmon_field_LPA_STATS_UNCORR_CWDS_PRESET_get( b, h ) \
       _fec_pmon_field_LPA_STATS_UNCORR_CWDS_PRESET_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_field_LPA_STATS_UNCORR_CWDS_PRESET_get( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for parameter LPA_STATS_CORR_1S_PRESET
 *
 *     Register: LPA Statistics - Preset Control
 *     Offset: 0x00000008 LPA_STATISTICS_PRESET_CTRL
 *
 *     bits 2 default 0 LPA_STATS_CORR_1S_PRESET
 *         When set to logic:
 *         0->1: The LPA_STATS_CORR_1S counter is set to the value of the
 *             LPA_STATS_PRESET_VALUE bit field.
 *         1->0: The bit self-clears by transitioning from logic 1 to 0
 *             automatically after being written to 1.
 */


#ifndef fec_pmon_field_LPA_STATS_CORR_1S_PRESET_set
#define fec_pmon_field_LPA_STATS_CORR_1S_PRESET_set( b, h, value ) \
       _fec_pmon_field_LPA_STATS_CORR_1S_PRESET_set( LOG_CALLER b, h, value )
#endif
static INLINE void _fec_pmon_field_LPA_STATS_CORR_1S_PRESET_set( LOG_CALLER_DEFN
                                                                 fec_pmon_buffer_t *b,
                                                                 fec_pmon_handle_t *h,
                                                                 UINT32 value );

#ifndef fec_pmon_field_LPA_STATS_CORR_1S_PRESET_get
#define fec_pmon_field_LPA_STATS_CORR_1S_PRESET_get( b, h ) \
       _fec_pmon_field_LPA_STATS_CORR_1S_PRESET_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_field_LPA_STATS_CORR_1S_PRESET_get( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for parameter LPA_STATS_CORR_0S_PRESET
 *
 *     Register: LPA Statistics - Preset Control
 *     Offset: 0x00000008 LPA_STATISTICS_PRESET_CTRL
 *
 *     bits 3 default 0 LPA_STATS_CORR_0S_PRESET
 *         When set to logic:
 *         0->1: The LPA_STATS_CORR_0S counter is set to the value of the
 *             LPA_STATS_PRESET_VALUE bit field.
 *         1->0: The bit self-clears by transitioning from logic 1 to 0
 *             automatically after being written to 1.
 */


#ifndef fec_pmon_field_LPA_STATS_CORR_0S_PRESET_set
#define fec_pmon_field_LPA_STATS_CORR_0S_PRESET_set( b, h, value ) \
       _fec_pmon_field_LPA_STATS_CORR_0S_PRESET_set( LOG_CALLER b, h, value )
#endif
static INLINE void _fec_pmon_field_LPA_STATS_CORR_0S_PRESET_set( LOG_CALLER_DEFN
                                                                 fec_pmon_buffer_t *b,
                                                                 fec_pmon_handle_t *h,
                                                                 UINT32 value );

#ifndef fec_pmon_field_LPA_STATS_CORR_0S_PRESET_get
#define fec_pmon_field_LPA_STATS_CORR_0S_PRESET_get( b, h ) \
       _fec_pmon_field_LPA_STATS_CORR_0S_PRESET_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_field_LPA_STATS_CORR_0S_PRESET_get( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for parameter LPA_STATS_FP_CLEAR
 *
 *     Register: LPA Statistics - Clear Control
 *     Offset: 0x0000000c LPA_STATISTICS_CLEAR_CTRL
 *
 *     bits 0 default 0 LPA_STATS_FP_CLEAR
 *         When set to logic:
 *         0->1: The LPA_STATS_FP counter is cleared. The accumulated statistic
 *             count will be updated with the current statistic count value before
 *             clearing.
 *         1->0: The bit self-clears by transitioning from logic 1 to 0
 *             automatically after being written to 1.
 */


#ifndef fec_pmon_field_LPA_STATS_FP_CLEAR_set
#define fec_pmon_field_LPA_STATS_FP_CLEAR_set( b, h, value ) \
       _fec_pmon_field_LPA_STATS_FP_CLEAR_set( LOG_CALLER b, h, value )
#endif
static INLINE void _fec_pmon_field_LPA_STATS_FP_CLEAR_set( LOG_CALLER_DEFN
                                                           fec_pmon_buffer_t *b,
                                                           fec_pmon_handle_t *h,
                                                           UINT32 value );

#ifndef fec_pmon_field_LPA_STATS_FP_CLEAR_get
#define fec_pmon_field_LPA_STATS_FP_CLEAR_get( b, h ) \
       _fec_pmon_field_LPA_STATS_FP_CLEAR_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_field_LPA_STATS_FP_CLEAR_get( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for parameter LPA_STATS_UNCORR_CWDS_CLEAR
 *
 *     Register: LPA Statistics - Clear Control
 *     Offset: 0x0000000c LPA_STATISTICS_CLEAR_CTRL
 *
 *     bits 1 default 0 LPA_STATS_UNCORR_CWDS_CLEAR
 *         When set to logic:
 *         0->1: The LPA_STATS_UNCORR_CWDS counter is cleared. The accumulated
 *             statistic count will be updated with the current statistic count
 *             value before clearing.
 *         1->0: The bit self-clears by transitioning from logic 1 to 0
 *             automatically after being written to 1.
 */


#ifndef fec_pmon_field_LPA_STATS_UNCORR_CWDS_CLEAR_set
#define fec_pmon_field_LPA_STATS_UNCORR_CWDS_CLEAR_set( b, h, value ) \
       _fec_pmon_field_LPA_STATS_UNCORR_CWDS_CLEAR_set( LOG_CALLER b, h, value )
#endif
static INLINE void _fec_pmon_field_LPA_STATS_UNCORR_CWDS_CLEAR_set( LOG_CALLER_DEFN
                                                                    fec_pmon_buffer_t *b,
                                                                    fec_pmon_handle_t *h,
                                                                    UINT32 value );

#ifndef fec_pmon_field_LPA_STATS_UNCORR_CWDS_CLEAR_get
#define fec_pmon_field_LPA_STATS_UNCORR_CWDS_CLEAR_get( b, h ) \
       _fec_pmon_field_LPA_STATS_UNCORR_CWDS_CLEAR_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_field_LPA_STATS_UNCORR_CWDS_CLEAR_get( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for parameter LPA_STATS_CORR_1S_CLEAR
 *
 *     Register: LPA Statistics - Clear Control
 *     Offset: 0x0000000c LPA_STATISTICS_CLEAR_CTRL
 *
 *     bits 2 default 0 LPA_STATS_CORR_1S_CLEAR
 *         When set to logic:
 *         0->1: The LPA_STATS_CORR_1S counter is cleared. The accumulated
 *             statistic count will be updated with the current statistic count
 *             value before clearing.
 *         1->0: The bit self-clears by transitioning from logic 1 to 0
 *             automatically after being written to 1.
 */


#ifndef fec_pmon_field_LPA_STATS_CORR_1S_CLEAR_set
#define fec_pmon_field_LPA_STATS_CORR_1S_CLEAR_set( b, h, value ) \
       _fec_pmon_field_LPA_STATS_CORR_1S_CLEAR_set( LOG_CALLER b, h, value )
#endif
static INLINE void _fec_pmon_field_LPA_STATS_CORR_1S_CLEAR_set( LOG_CALLER_DEFN
                                                                fec_pmon_buffer_t *b,
                                                                fec_pmon_handle_t *h,
                                                                UINT32 value );

#ifndef fec_pmon_field_LPA_STATS_CORR_1S_CLEAR_get
#define fec_pmon_field_LPA_STATS_CORR_1S_CLEAR_get( b, h ) \
       _fec_pmon_field_LPA_STATS_CORR_1S_CLEAR_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_field_LPA_STATS_CORR_1S_CLEAR_get( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for parameter LPA_STATS_CORR_0S_CLEAR
 *
 *     Register: LPA Statistics - Clear Control
 *     Offset: 0x0000000c LPA_STATISTICS_CLEAR_CTRL
 *
 *     bits 3 default 0 LPA_STATS_CORR_0S_CLEAR
 *         When set to logic:
 *         0->1: The LPA_STATS_CORR_0S counter is cleared. The accumulated
 *             statistic count will be updated with the current statistic count
 *             value before clearing.
 *         1->0: The bit self-clears by transitioning from logic 1 to 0
 *             automatically after being written to 1.
 */


#ifndef fec_pmon_field_LPA_STATS_CORR_0S_CLEAR_set
#define fec_pmon_field_LPA_STATS_CORR_0S_CLEAR_set( b, h, value ) \
       _fec_pmon_field_LPA_STATS_CORR_0S_CLEAR_set( LOG_CALLER b, h, value )
#endif
static INLINE void _fec_pmon_field_LPA_STATS_CORR_0S_CLEAR_set( LOG_CALLER_DEFN
                                                                fec_pmon_buffer_t *b,
                                                                fec_pmon_handle_t *h,
                                                                UINT32 value );

#ifndef fec_pmon_field_LPA_STATS_CORR_0S_CLEAR_get
#define fec_pmon_field_LPA_STATS_CORR_0S_CLEAR_get( b, h ) \
       _fec_pmon_field_LPA_STATS_CORR_0S_CLEAR_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_field_LPA_STATS_CORR_0S_CLEAR_get( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for parameter LLSA_STATS_CORR_1S_PRESET
 *
 *     Register: LLSA Statistics - Preset Control (1/2)
 *     Offset: 0x00000028 LLSA_STATISTICS_PRESET_CTRL_1_2_
 *
 *     bits        19:0 default 00000000000000000000 LLSA_STATS_CORR_1S_PRESET
 *     field_bits  19:0
 *         When set to logic:
 *         0->1: The LLSA_STATS_CORR_1S[x] counter is set to the value of the
 *             LLSA_STATS_PRESET_VALUE bit field.
 *         1->0: The bit self-clears by transitioning from logic 1 to 0
 *             automatically after being written to 1.
 */


#ifndef fec_pmon_field_LLSA_STATS_CORR_1S_PRESET_set
#define fec_pmon_field_LLSA_STATS_CORR_1S_PRESET_set( b, h, value ) \
       _fec_pmon_field_LLSA_STATS_CORR_1S_PRESET_set( LOG_CALLER b, h, value )
#endif
static INLINE void _fec_pmon_field_LLSA_STATS_CORR_1S_PRESET_set( LOG_CALLER_DEFN
                                                                  fec_pmon_buffer_t *b,
                                                                  fec_pmon_handle_t *h,
                                                                  UINT32 value );

#ifndef fec_pmon_field_LLSA_STATS_CORR_1S_PRESET_get
#define fec_pmon_field_LLSA_STATS_CORR_1S_PRESET_get( b, h ) \
       _fec_pmon_field_LLSA_STATS_CORR_1S_PRESET_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_field_LLSA_STATS_CORR_1S_PRESET_get( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for parameter LLSA_STATS_UNCORR_CWDS_PRESET
 *
 *     Register: LLSA Statistics - Preset Control (1/2)
 *     Offset: 0x00000028 LLSA_STATISTICS_PRESET_CTRL_1_2_
 *
 *     bits 20 default 0 LLSA_STATS_UNCORR_CWDS_PRESET
 *         When set to logic:
 *         0->1: The LLSA_STATS_UNCORR_CWDS counter is set to the value of the
 *             LLSA_STATS_PRESET_VALUE bit field.
 *         1->0: The bit self-clears by transitioning from logic 1 to 0
 *             automatically after being written to 1.
 */


#ifndef fec_pmon_field_LLSA_STATS_UNCORR_CWDS_PRESET_set
#define fec_pmon_field_LLSA_STATS_UNCORR_CWDS_PRESET_set( b, h, value ) \
       _fec_pmon_field_LLSA_STATS_UNCORR_CWDS_PRESET_set( LOG_CALLER b, h, value )
#endif
static INLINE void _fec_pmon_field_LLSA_STATS_UNCORR_CWDS_PRESET_set( LOG_CALLER_DEFN
                                                                      fec_pmon_buffer_t *b,
                                                                      fec_pmon_handle_t *h,
                                                                      UINT32 value );

#ifndef fec_pmon_field_LLSA_STATS_UNCORR_CWDS_PRESET_get
#define fec_pmon_field_LLSA_STATS_UNCORR_CWDS_PRESET_get( b, h ) \
       _fec_pmon_field_LLSA_STATS_UNCORR_CWDS_PRESET_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_field_LLSA_STATS_UNCORR_CWDS_PRESET_get( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for parameter LLSA_STATS_CORR_0S_PRESET
 *
 *     Register: LLSA Statistics - Preset Control (2/2)
 *     Offset: 0x0000002c LLSA_STATISTICS_PRESET_CTRL_2_2_
 *
 *     bits        19:0 default 00000000000000000000 LLSA_STATS_CORR_0S_PRESET
 *     field_bits  19:0
 *         When set to logic:
 *         0->1: The LLSA_STATS_CORR_0S[x] counter is set to the value of the
 *             LLSA_STATS_PRESET_VALUE bit field.
 *         1->0: The bit self-clears by transitioning from logic 1 to 0
 *             automatically after being written to 1.
 */


#ifndef fec_pmon_field_LLSA_STATS_CORR_0S_PRESET_set
#define fec_pmon_field_LLSA_STATS_CORR_0S_PRESET_set( b, h, value ) \
       _fec_pmon_field_LLSA_STATS_CORR_0S_PRESET_set( LOG_CALLER b, h, value )
#endif
static INLINE void _fec_pmon_field_LLSA_STATS_CORR_0S_PRESET_set( LOG_CALLER_DEFN
                                                                  fec_pmon_buffer_t *b,
                                                                  fec_pmon_handle_t *h,
                                                                  UINT32 value );

#ifndef fec_pmon_field_LLSA_STATS_CORR_0S_PRESET_get
#define fec_pmon_field_LLSA_STATS_CORR_0S_PRESET_get( b, h ) \
       _fec_pmon_field_LLSA_STATS_CORR_0S_PRESET_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_field_LLSA_STATS_CORR_0S_PRESET_get( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for parameter LLSA_STATS_CORR_1S_CLEAR
 *
 *     Register: LLSA Statistics - Clear Control (1/2)
 *     Offset: 0x00000030 LLSA_STATISTICS_CLEAR_CTRL_1_2_
 *
 *     bits        19:0 default 00000000000000000000 LLSA_STATS_CORR_1S_CLEAR
 *     field_bits  19:0
 *         When set to logic:
 *         0->1: The LLSA_STATS_CORR_1S[x] counter is cleared. The accumulated
 *             statistic count will be updated with the current statistic count
 *             value before clearing.
 *         1->0: The bit self-clears by transitioning from logic 1 to 0
 *             automatically after being written to 1.
 */


#ifndef fec_pmon_field_LLSA_STATS_CORR_1S_CLEAR_set
#define fec_pmon_field_LLSA_STATS_CORR_1S_CLEAR_set( b, h, value ) \
       _fec_pmon_field_LLSA_STATS_CORR_1S_CLEAR_set( LOG_CALLER b, h, value )
#endif
static INLINE void _fec_pmon_field_LLSA_STATS_CORR_1S_CLEAR_set( LOG_CALLER_DEFN
                                                                 fec_pmon_buffer_t *b,
                                                                 fec_pmon_handle_t *h,
                                                                 UINT32 value );

#ifndef fec_pmon_field_LLSA_STATS_CORR_1S_CLEAR_get
#define fec_pmon_field_LLSA_STATS_CORR_1S_CLEAR_get( b, h ) \
       _fec_pmon_field_LLSA_STATS_CORR_1S_CLEAR_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_field_LLSA_STATS_CORR_1S_CLEAR_get( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for parameter LLSA_STATS_UNCORR_CWDS_CLEAR
 *
 *     Register: LLSA Statistics - Clear Control (1/2)
 *     Offset: 0x00000030 LLSA_STATISTICS_CLEAR_CTRL_1_2_
 *
 *     bits 20 default 0 LLSA_STATS_UNCORR_CWDS_CLEAR
 *         When set to logic:
 *         0->1: The LLSA_STATS_UNCORR_CWDS counter is cleared. The accumulated
 *             statistic count will be updated with the current statistic count
 *             value before clearing.
 *         1->0: The bit self-clears by transitioning from logic 1 to 0
 *             automatically after being written to 1.
 */


#ifndef fec_pmon_field_LLSA_STATS_UNCORR_CWDS_CLEAR_set
#define fec_pmon_field_LLSA_STATS_UNCORR_CWDS_CLEAR_set( b, h, value ) \
       _fec_pmon_field_LLSA_STATS_UNCORR_CWDS_CLEAR_set( LOG_CALLER b, h, value )
#endif
static INLINE void _fec_pmon_field_LLSA_STATS_UNCORR_CWDS_CLEAR_set( LOG_CALLER_DEFN
                                                                     fec_pmon_buffer_t *b,
                                                                     fec_pmon_handle_t *h,
                                                                     UINT32 value );

#ifndef fec_pmon_field_LLSA_STATS_UNCORR_CWDS_CLEAR_get
#define fec_pmon_field_LLSA_STATS_UNCORR_CWDS_CLEAR_get( b, h ) \
       _fec_pmon_field_LLSA_STATS_UNCORR_CWDS_CLEAR_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_field_LLSA_STATS_UNCORR_CWDS_CLEAR_get( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for parameter LLSA_STATS_OTU_FAIL_CLEAR
 *
 *     Register: LLSA Statistics - Clear Control (1/2)
 *     Offset: 0x00000030 LLSA_STATISTICS_CLEAR_CTRL_1_2_
 *
 *     bits 21 default 0 LLSA_STATS_OTU_FAIL_CLEAR
 *         When set to logic:
 *         0->1: The LLSA_STATS_OTU_FAIL counter is cleared. The accumulated
 *             statistic count will be updated with the current statistic count
 *             value before clearing.
 *         1->0: The bit self-clears by transitioning from logic 1 to 0
 *             automatically after being written to 1.
 */


#ifndef fec_pmon_field_LLSA_STATS_OTU_FAIL_CLEAR_set
#define fec_pmon_field_LLSA_STATS_OTU_FAIL_CLEAR_set( b, h, value ) \
       _fec_pmon_field_LLSA_STATS_OTU_FAIL_CLEAR_set( LOG_CALLER b, h, value )
#endif
static INLINE void _fec_pmon_field_LLSA_STATS_OTU_FAIL_CLEAR_set( LOG_CALLER_DEFN
                                                                  fec_pmon_buffer_t *b,
                                                                  fec_pmon_handle_t *h,
                                                                  UINT32 value );

#ifndef fec_pmon_field_LLSA_STATS_OTU_FAIL_CLEAR_get
#define fec_pmon_field_LLSA_STATS_OTU_FAIL_CLEAR_get( b, h ) \
       _fec_pmon_field_LLSA_STATS_OTU_FAIL_CLEAR_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_field_LLSA_STATS_OTU_FAIL_CLEAR_get( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for parameter LLSA_STATS_CORR_0S_CLEAR
 *
 *     Register: LLSA Statistics - Clear Control (2/2)
 *     Offset: 0x00000034 LLSA_STATISTICS_CLEAR_CTRL_2_2_
 *
 *     bits        19:0 default 00000000000000000000 LLSA_STATS_CORR_0S_CLEAR
 *     field_bits  19:0
 *         When set to logic:
 *         0->1: The LLSA_STATS_CORR_0S[x] counter is cleared. The accumulated
 *             statistic count will be updated with the current statistic count
 *             value before clearing.
 *         1->0: The bit self-clears by transitioning from logic 1 to 0
 *             automatically after being written to 1.
 */


#ifndef fec_pmon_field_LLSA_STATS_CORR_0S_CLEAR_set
#define fec_pmon_field_LLSA_STATS_CORR_0S_CLEAR_set( b, h, value ) \
       _fec_pmon_field_LLSA_STATS_CORR_0S_CLEAR_set( LOG_CALLER b, h, value )
#endif
static INLINE void _fec_pmon_field_LLSA_STATS_CORR_0S_CLEAR_set( LOG_CALLER_DEFN
                                                                 fec_pmon_buffer_t *b,
                                                                 fec_pmon_handle_t *h,
                                                                 UINT32 value );

#ifndef fec_pmon_field_LLSA_STATS_CORR_0S_CLEAR_get
#define fec_pmon_field_LLSA_STATS_CORR_0S_CLEAR_get( b, h ) \
       _fec_pmon_field_LLSA_STATS_CORR_0S_CLEAR_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_field_LLSA_STATS_CORR_0S_CLEAR_get( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

#ifndef fec_pmon_field_range_LLSA_STATS_CORR_1S_PRESET_set
#define fec_pmon_field_range_LLSA_STATS_CORR_1S_PRESET_set( b, h, start_bit, stop_bit, value ) \
       _fec_pmon_field_range_LLSA_STATS_CORR_1S_PRESET_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _fec_pmon_field_range_LLSA_STATS_CORR_1S_PRESET_set( LOG_CALLER_DEFN
                                                                        fec_pmon_buffer_t *b,
                                                                        fec_pmon_handle_t *h,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit,
                                                                        UINT32 value );

#ifndef fec_pmon_field_range_LLSA_STATS_CORR_1S_PRESET_get
#define fec_pmon_field_range_LLSA_STATS_CORR_1S_PRESET_get( b, h, start_bit, stop_bit ) \
       _fec_pmon_field_range_LLSA_STATS_CORR_1S_PRESET_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _fec_pmon_field_range_LLSA_STATS_CORR_1S_PRESET_get( LOG_CALLER_DEFN
                                                                          fec_pmon_buffer_t *b,
                                                                          fec_pmon_handle_t *h,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT;

#ifndef fec_pmon_field_range_LLSA_STATS_CORR_0S_PRESET_set
#define fec_pmon_field_range_LLSA_STATS_CORR_0S_PRESET_set( b, h, start_bit, stop_bit, value ) \
       _fec_pmon_field_range_LLSA_STATS_CORR_0S_PRESET_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _fec_pmon_field_range_LLSA_STATS_CORR_0S_PRESET_set( LOG_CALLER_DEFN
                                                                        fec_pmon_buffer_t *b,
                                                                        fec_pmon_handle_t *h,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit,
                                                                        UINT32 value );

#ifndef fec_pmon_field_range_LLSA_STATS_CORR_0S_PRESET_get
#define fec_pmon_field_range_LLSA_STATS_CORR_0S_PRESET_get( b, h, start_bit, stop_bit ) \
       _fec_pmon_field_range_LLSA_STATS_CORR_0S_PRESET_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _fec_pmon_field_range_LLSA_STATS_CORR_0S_PRESET_get( LOG_CALLER_DEFN
                                                                          fec_pmon_buffer_t *b,
                                                                          fec_pmon_handle_t *h,
                                                                          UINT32 start_bit,
                                                                          UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT;

#ifndef fec_pmon_field_range_LLSA_STATS_CORR_1S_CLEAR_set
#define fec_pmon_field_range_LLSA_STATS_CORR_1S_CLEAR_set( b, h, start_bit, stop_bit, value ) \
       _fec_pmon_field_range_LLSA_STATS_CORR_1S_CLEAR_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _fec_pmon_field_range_LLSA_STATS_CORR_1S_CLEAR_set( LOG_CALLER_DEFN
                                                                       fec_pmon_buffer_t *b,
                                                                       fec_pmon_handle_t *h,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value );

#ifndef fec_pmon_field_range_LLSA_STATS_CORR_1S_CLEAR_get
#define fec_pmon_field_range_LLSA_STATS_CORR_1S_CLEAR_get( b, h, start_bit, stop_bit ) \
       _fec_pmon_field_range_LLSA_STATS_CORR_1S_CLEAR_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _fec_pmon_field_range_LLSA_STATS_CORR_1S_CLEAR_get( LOG_CALLER_DEFN
                                                                         fec_pmon_buffer_t *b,
                                                                         fec_pmon_handle_t *h,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT;

#ifndef fec_pmon_field_range_LLSA_STATS_CORR_0S_CLEAR_set
#define fec_pmon_field_range_LLSA_STATS_CORR_0S_CLEAR_set( b, h, start_bit, stop_bit, value ) \
       _fec_pmon_field_range_LLSA_STATS_CORR_0S_CLEAR_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _fec_pmon_field_range_LLSA_STATS_CORR_0S_CLEAR_set( LOG_CALLER_DEFN
                                                                       fec_pmon_buffer_t *b,
                                                                       fec_pmon_handle_t *h,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit,
                                                                       UINT32 value );

#ifndef fec_pmon_field_range_LLSA_STATS_CORR_0S_CLEAR_get
#define fec_pmon_field_range_LLSA_STATS_CORR_0S_CLEAR_get( b, h, start_bit, stop_bit ) \
       _fec_pmon_field_range_LLSA_STATS_CORR_0S_CLEAR_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _fec_pmon_field_range_LLSA_STATS_CORR_0S_CLEAR_get( LOG_CALLER_DEFN
                                                                         fec_pmon_buffer_t *b,
                                                                         fec_pmon_handle_t *h,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * ==================================================================================
 *             Parameter Access Functions for Paramset fec_pmon_status
 * ==================================================================================
 */

/*
 * accessor functions for parameter LPA_STATS_FP
 *
 *     Register: LPA Statistics - OTU Frame Pulse Count
 *     Offset: 0x00000010 LPA_STATISTICS_OTU_FRAME_PULSE_CNT
 *
 *     bits        31:0 default XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX LPA_STATS_FP
 *     field_bits  31:0
 *         The LPA_STATS_FP bit field reflects the accumulated counter value of the
 *             performance monitor block associated with the number of OTN frame
 *             pulses. The accumulated count is updated with the current count at
 *             the beginning of every accumulation period triggered by a rising
 *             edge on LPA_LCLK and the current count is cleared.
 *         This performance statistic counter can be manually cleared or preset.
 */


#ifndef fec_pmon_field_LPA_STATS_FP_get
#define fec_pmon_field_LPA_STATS_FP_get( b, h ) \
       _fec_pmon_field_LPA_STATS_FP_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_field_LPA_STATS_FP_get( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for parameter LPA_STATS_UNCORR_CWDS
 *
 *     Register: LPA Statistics - Uncorrected Codewords Count
 *     Offset: 0x00000014 LPA_STATISTICS_UNCORRECTED_CODEWORDS_CNT
 *
 *     bits        31:0 default XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX LPA_STATS_UNCORR_CWDS
 *     field_bits  31:0
 *         The LPA_STATS_UNCORR_CWDS bit field reflects the accumulated counter
 *             value of the performance monitor block associated with the number
 *             uncorrected BCH codewords from the most recently commited OTU row.
 *             The accumulated count is updated with the current count at the
 *             beginning of every accumulation period triggered by a rising edge on
 *             LPA_LCLK and the current count is cleared.
 *         This performance statistic counter can be manually cleared or preset.
 */


#ifndef fec_pmon_field_LPA_STATS_UNCORR_CWDS_get
#define fec_pmon_field_LPA_STATS_UNCORR_CWDS_get( b, h ) \
       _fec_pmon_field_LPA_STATS_UNCORR_CWDS_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_field_LPA_STATS_UNCORR_CWDS_get( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for parameter LPA_STATS_CORR_1S
 *
 *     Register: LPA Statistics - Corrected 1s Count
 *     Offset: 0x00000018 LPA_STATISTICS_CORRECTED_1S_CNT
 *
 *     bits        31:0 default XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX LPA_STATS_CORR_1S
 *     field_bits  31:0
 *         The LPA_STATS_CORR_1S bit field reflects the accumulated counter value
 *             of the performance monitor block associated with the number of
 *             detected bits that were "ones" on the optical line and which where
 *             corrected by the decoder. The accumulated count is updated with the
 *             current count at the beginning of every accumulation period
 *             triggered by a rising edge on LPA_LCLK and the current count is
 *             cleared.
 *         This performance statistic counter can be manually cleared or preset.
 */


#ifndef fec_pmon_field_LPA_STATS_CORR_1S_get
#define fec_pmon_field_LPA_STATS_CORR_1S_get( b, h ) \
       _fec_pmon_field_LPA_STATS_CORR_1S_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_field_LPA_STATS_CORR_1S_get( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for parameter LPA_STATS_CORR_0S
 *
 *     Register: LPA Statistics - Corrected 0s Count
 *     Offset: 0x0000001c LPA_STATISTICS_CORRECTED_0S_CNT
 *
 *     bits        31:0 default XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX LPA_STATS_CORR_0S
 *     field_bits  31:0
 *         The LPA_STATS_CORR_0S bit field reflects the accumulated counter value
 *             of the performance monitor block associated with the number of
 *             detected bits that were "zero" on the optical line and which where
 *             corrected by the decoder. The accumulated count is updated with the
 *             current count at the beginning of every accumulation period
 *             triggered by a rising edge on LPA_LCLK and the current count is
 *             cleared.
 *         This performance statistic counter can be manually cleared or preset.
 */


#ifndef fec_pmon_field_LPA_STATS_CORR_0S_get
#define fec_pmon_field_LPA_STATS_CORR_0S_get( b, h ) \
       _fec_pmon_field_LPA_STATS_CORR_0S_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_field_LPA_STATS_CORR_0S_get( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for parameter LLSA_STATS_OTU_FAIL
 *
 *     Register: LLSA Statistics - Failure Status
 *     Offset: 0x00000100 LLSA_STATISTICS_FAILURE_STAT
 *         This register is provided for diagnostic test only. It duplicates the
 *             PMON value reported automatically by the FEC STAT AIR block.
 *
 *     bits 0 default X LLSA_STATS_OTU_FAIL
 *         The LLSA_STATS_OTU_FAIL bit field reflects the state of the OTU framer
 *             during the current LLSA accumulation period.
 *         LLSA_STATS_OTU_FAIL is cleared at the start of a new LLSA accumulation
 *             period.
 *         The source for a new LLSA accumulation period is controlled by the
 *             LLSA_STATS_LATCH_SOURCE register field.
 *         This status can be manually cleared.
 *         When read as logic:
 *         1: The Swizzle FEC decoder will not correct errors. It may be asserted
 *             during Signal Fail or Loss of Frame conditions. Assertion of the
 *             upstream OTN framer OTU_FAIL is reported by the LLSA_STATS_OTU_FAIL.
 *             Reading this bit to '1' confirms an OTU framer failure during the
 *             current LLSA accumulation period.
 *         0: No OTU framer failure occured during the current LLSA accumulation
 *             period.
 */


#ifndef fec_pmon_field_LLSA_STATS_OTU_FAIL_get
#define fec_pmon_field_LLSA_STATS_OTU_FAIL_get( b, h ) \
       _fec_pmon_field_LLSA_STATS_OTU_FAIL_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_field_LLSA_STATS_OTU_FAIL_get( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * accessor functions for parameter LLSA_STATS_UNCORR_CWDS
 *
 *     Register: LLSA Statistics - Uncorrected Codewords Count
 *     Offset: 0x0000011c LLSA_STATISTICS_UNCORRECTED_CODEWORDS_CNT
 *         This register is provided for diagnostic test only. It duplicates the
 *             PMON value reported automatically by the FEC STAT AIR block.
 *
 *     bits        31:0 default XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX LLSA_STATS_UNCORR_CWDS
 *     field_bits  31:0
 *         The LLSA_STATS_UNCORR_CWDS bit field reflects the accumulated count
 *             value of the performance monitor block associated with the number of
 *             uncorrected codewords errors on lanes 0 to 3 (40G mode) and lanes 0
 *             to 19 (100G mode). The accumulated count is updated with the current
 *             count at the beginning of every accumulation period and the current
 *             count is cleared.
 *         The source for a new LLSA accumulation period is controlled by the
 *             LLSA_STATS_LATCH_SOURCE register field.
 *         This performance statistic counter can be manually cleared or preset.
 */


#ifndef fec_pmon_field_LLSA_STATS_UNCORR_CWDS_get
#define fec_pmon_field_LLSA_STATS_UNCORR_CWDS_get( b, h ) \
       _fec_pmon_field_LLSA_STATS_UNCORR_CWDS_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _fec_pmon_field_LLSA_STATS_UNCORR_CWDS_get( LOG_CALLER_DEFN fec_pmon_buffer_t *b, fec_pmon_handle_t *h ) ATTRIBUTE_WARN_UNUSED_RESULT;

#ifndef fec_pmon_field_range_LPA_STATS_FP_get
#define fec_pmon_field_range_LPA_STATS_FP_get( b, h, start_bit, stop_bit ) \
       _fec_pmon_field_range_LPA_STATS_FP_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _fec_pmon_field_range_LPA_STATS_FP_get( LOG_CALLER_DEFN
                                                             fec_pmon_buffer_t *b,
                                                             fec_pmon_handle_t *h,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT;

#ifndef fec_pmon_field_range_LPA_STATS_UNCORR_CWDS_get
#define fec_pmon_field_range_LPA_STATS_UNCORR_CWDS_get( b, h, start_bit, stop_bit ) \
       _fec_pmon_field_range_LPA_STATS_UNCORR_CWDS_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _fec_pmon_field_range_LPA_STATS_UNCORR_CWDS_get( LOG_CALLER_DEFN
                                                                      fec_pmon_buffer_t *b,
                                                                      fec_pmon_handle_t *h,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT;

#ifndef fec_pmon_field_range_LPA_STATS_CORR_1S_get
#define fec_pmon_field_range_LPA_STATS_CORR_1S_get( b, h, start_bit, stop_bit ) \
       _fec_pmon_field_range_LPA_STATS_CORR_1S_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _fec_pmon_field_range_LPA_STATS_CORR_1S_get( LOG_CALLER_DEFN
                                                                  fec_pmon_buffer_t *b,
                                                                  fec_pmon_handle_t *h,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT;

#ifndef fec_pmon_field_range_LPA_STATS_CORR_0S_get
#define fec_pmon_field_range_LPA_STATS_CORR_0S_get( b, h, start_bit, stop_bit ) \
       _fec_pmon_field_range_LPA_STATS_CORR_0S_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _fec_pmon_field_range_LPA_STATS_CORR_0S_get( LOG_CALLER_DEFN
                                                                  fec_pmon_buffer_t *b,
                                                                  fec_pmon_handle_t *h,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT;

#ifndef fec_pmon_field_range_LLSA_STATS_UNCORR_CWDS_get
#define fec_pmon_field_range_LLSA_STATS_UNCORR_CWDS_get( b, h, start_bit, stop_bit ) \
       _fec_pmon_field_range_LLSA_STATS_UNCORR_CWDS_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _fec_pmon_field_range_LLSA_STATS_UNCORR_CWDS_get( LOG_CALLER_DEFN
                                                                       fec_pmon_buffer_t *b,
                                                                       fec_pmon_handle_t *h,
                                                                       UINT32 start_bit,
                                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT;

/*
 * ==================================================================================
 *      Parameter Access Functions for Paramset fec_pmon_status_N_burstsize20
 * ==================================================================================
 */

/*
 * accessor functions for parameter LLSA_STATS_LANE_CORR_1S
 *     array size N = 20
 *
 *     Register: LLSA Statistics - Corrected 1s Count for Lanes 0 to 19
 *     Offset: 0x00000140+(N * 4) LLSA_STATISTICS_CORRECTED_1S_CNT_FOR_LANES_0_TO_19
 *         This register is provided for diagnostic test only. It duplicates the
 *             PMON value reported automatically by the FEC STAT AIR block.
 *
 *     bits        31:0 default XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX LLSA_STATS_LANE_CORR_1S
 *     field_bits  31:0
 *         The LLSA_STATS_LANE_CORR_1S bit field reflects the accumulated count
 *             value of the performance monitor block associated with the number of
 *             corrected 1s errors on lane N. The accumulated count is updated with
 *             the current count at the beginning of every accumulation period and
 *             the current count is cleared.
 *         Lanes 4 to 19 should be ignored in 40G mode.
 *         The source for a new LLSA accumulation period is controlled by the
 *             LLSA_STATS_LATCH_SOURCE register field.
 *         This performance statistic counter can be manually cleared or preset.
 */


#ifndef fec_pmon_lfield_LLSA_STATS_LANE_CORR_1S_get
#define fec_pmon_lfield_LLSA_STATS_LANE_CORR_1S_get( b, h, value ) \
       _fec_pmon_lfield_LLSA_STATS_LANE_CORR_1S_get( LOG_CALLER b, h, value )
#endif
static INLINE void _fec_pmon_lfield_LLSA_STATS_LANE_CORR_1S_get( LOG_CALLER_DEFN
                                                                 fec_pmon_buffer_t *b,
                                                                 fec_pmon_handle_t *h,
                                                                 UINT32 value[20] );

/*
 * accessor functions for parameter LLSA_STATS_LANE_CORR_0S
 *     array size N = 20
 *
 *     Register: LLSA Statistics - Corrected 0s Count for Lanes 0 to 19
 *     Offset: 0x00000200+(N * 4) LLSA_STATISTICS_CORRECTED_0S_CNT_FOR_LANES_0_TO_19
 *         This register is provided for diagnostic test only. It duplicates the
 *             PMON value reported automatically by the FEC STAT AIR block.
 *
 *     bits        31:0 default XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX LLSA_STATS_LANE_CORR_0S
 *     field_bits  31:0
 *         The LLSA_STATS_LANE_CORR_0S bit field reflects the accumulated count
 *             value of the performance monitor block associated with the number of
 *             corrected 0s errors on lane N. The accumulated count is updated with
 *             the current count at the beginning of every accumulation period and
 *             the current count is cleared.
 *         Lanes 4 to 19 should be ignored in 40G mode.
 *         The source for a new LLSA accumulation period is controlled by the
 *             LLSA_STATS_LATCH_SOURCE register field.
 *         This performance statistic counter can be manually cleared or preset.
 */


#ifndef fec_pmon_lfield_LLSA_STATS_LANE_CORR_0S_get
#define fec_pmon_lfield_LLSA_STATS_LANE_CORR_0S_get( b, h, value ) \
       _fec_pmon_lfield_LLSA_STATS_LANE_CORR_0S_get( LOG_CALLER b, h, value )
#endif
static INLINE void _fec_pmon_lfield_LLSA_STATS_LANE_CORR_0S_get( LOG_CALLER_DEFN
                                                                 fec_pmon_buffer_t *b,
                                                                 fec_pmon_handle_t *h,
                                                                 UINT32 value[20] );

#ifndef fec_pmon_lfield_range_LLSA_STATS_LANE_CORR_1S_get
#define fec_pmon_lfield_range_LLSA_STATS_LANE_CORR_1S_get( b, h, start_bit, stop_bit ) \
       _fec_pmon_lfield_range_LLSA_STATS_LANE_CORR_1S_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _fec_pmon_lfield_range_LLSA_STATS_LANE_CORR_1S_get( LOG_CALLER_DEFN
                                                                         fec_pmon_buffer_t *b,
                                                                         fec_pmon_handle_t *h,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit );

#ifndef fec_pmon_lfield_range_LLSA_STATS_LANE_CORR_0S_get
#define fec_pmon_lfield_range_LLSA_STATS_LANE_CORR_0S_get( b, h, start_bit, stop_bit ) \
       _fec_pmon_lfield_range_LLSA_STATS_LANE_CORR_0S_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _fec_pmon_lfield_range_LLSA_STATS_LANE_CORR_0S_get( LOG_CALLER_DEFN
                                                                         fec_pmon_buffer_t *b,
                                                                         fec_pmon_handle_t *h,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit );
#endif /* DOXYGEN_SHOULD_SKIP_THIS_FILE */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* _FEC_PMON_IO_H */
