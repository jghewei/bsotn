/*******************************************************************************
*   COPYRIGHT (C) 2011 PMC-SIERRA, INC. ALL RIGHTS RESERVED.
* --------------------------------------------------------------------------
*  This software embodies materials and concepts which are proprietary and
*  confidential to PMC-Sierra, Inc.
*  PMC-Sierra distributes this software to its customers pursuant to the
*  terms and conditions of the Software License Agreement
*  contained in the text file software.lic that is distributed along with
*  the software. This software can only be utilized if all
*  terms and conditions of the Software License Agreement are
*  accepted. If there are any questions, concerns, or if the
*  Software License Agreement text file, software.lic, is missing please
*  contact PMC-Sierra for assistance.
* --------------------------------------------------------------------------
*   DESCRIPTION :
*    Prototypes for the indirect access functions for each indirect register
*    within the MLD_PRBS.
*
*   NOTES:
*    This file is auto generated. Do not edit this file.
*
*******************************************************************************/
#ifndef _MLD_PRBS_IND_H
#define _MLD_PRBS_IND_H

#ifdef __cplusplus
extern "C" {
#endif

/*
** Include Files
*/
#include "pmc_sys.h"
#include "pmc_types.h"
#include "prgm_io.h"
#include "shpi_io.h"


/*
** Local Enumerated Types
*/

/*
** Local Constants
*/
#define PRGM_SLICE_MAX_NUM          15

/*
** Local Macro Definitions
*/
/*
** Local Structures and Unions
*/


/*******************************************************************************
* STRUCTURE: config_and_status_buffer_t
* ______________________________________________________________________________
*
* DESCRIPTION:
*   Buffer for reading/writing to config_and_status registers.
*
* ELEMENTS:
*   data - Data to read/write
*   mask - Mask of valid bits in data
*
*******************************************************************************/
typedef struct 
{
  UINT32 data[1];
  UINT32 mask[1];
} config_and_status_buffer_t;


#ifndef config_and_status_buffer_init
#define config_and_status_buffer_init( b ) \
       _config_and_status_init( LOG_CALLER b )
#endif
/*******************************************************************************
* _config_and_status_init
* ______________________________________________________________________________
*
* DESCRIPTION:
*   Initialize buffer
*
* INPUTS:
*   b   - pointer to buffer
*
* OUTPUTS:
*
* RETURNS:
*   None.
*
* NOTES:
*
*******************************************************************************/
static INLINE void _config_and_status_init(LOG_CALLER_DEFN
                                         config_and_status_buffer_t *b)
{
    PMC_ENTRY();

    b->data[0] = 0;
    b->mask[0] = 0;

    PMC_RETURN();
}

#include "config_and_status_io.h"


/*******************************************************************************
* STRUCTURE: shpi_indirect_buffer_t
* ______________________________________________________________________________
*
* DESCRIPTION:
*   Buffer for reading/writing to shpi_indirect registers.
*
* ELEMENTS:
*   data - Data to read/write
*   mask - Mask of valid bits in data
*
*******************************************************************************/
typedef struct 
{
  UINT32 data[1];
  UINT32 mask[1];
} shpi_indirect_buffer_t;


#ifndef shpi_indirect_buffer_init
#define shpi_indirect_buffer_init( b ) \
       _shpi_indirect_init( LOG_CALLER b )
#endif
/*******************************************************************************
* _shpi_indirect_init
* ______________________________________________________________________________
*
* DESCRIPTION:
*   Initialize buffer
*
* INPUTS:
*   b   - pointer to buffer
*
* OUTPUTS:
*
* RETURNS:
*   None.
*
* NOTES:
*
*******************************************************************************/
static INLINE void _shpi_indirect_init(LOG_CALLER_DEFN
                                         shpi_indirect_buffer_t *b)
{
    PMC_ENTRY();

    b->data[0] = 0;
    b->mask[0] = 0;

    PMC_RETURN();
}

#include "shpi_indirect_io.h"











PUBLIC PMC_ERROR config_and_status_MON_STS_1_PATH_CFG_buffer_apply(cbrc_handle_t * h,  
                                      UINT32 index_a,
                                                                   UINT32 path,
                                      config_and_status_MON_STS_1_PATH_CFG_buffer_t *b);

PUBLIC PMC_ERROR config_and_status_MON_STS_1_PATH_CFG_buffer_retrieve(cbrc_handle_t * h,  
                                      UINT32 index_a,
                                                                   UINT32 path,
                                      config_and_status_MON_STS_1_PATH_CFG_buffer_t *b);




PUBLIC PMC_ERROR config_and_status_MON_PRBS_22_7_ACCUMULATOR_buffer_apply(cbrc_handle_t * h,  
                                      UINT32 index_a,
                                                                   UINT32 path,
                                      config_and_status_MON_PRBS_22_7_ACCUMULATOR_buffer_t *b);

PUBLIC PMC_ERROR config_and_status_MON_PRBS_22_7_ACCUMULATOR_buffer_retrieve(cbrc_handle_t * h,  
                                      UINT32 index_a,
                                                                   UINT32 path,
                                      config_and_status_MON_PRBS_22_7_ACCUMULATOR_buffer_t *b);




PUBLIC PMC_ERROR config_and_status_MON_PRBS_6_0_ACCUMULATOR_buffer_apply(cbrc_handle_t * h,  
                                      UINT32 index_a,
                                                                   UINT32 path,
                                      config_and_status_MON_PRBS_6_0_ACCUMULATOR_buffer_t *b);

PUBLIC PMC_ERROR config_and_status_MON_PRBS_6_0_ACCUMULATOR_buffer_retrieve(cbrc_handle_t * h,  
                                      UINT32 index_a,
                                                                   UINT32 path,
                                      config_and_status_MON_PRBS_6_0_ACCUMULATOR_buffer_t *b);




PUBLIC PMC_ERROR config_and_status_MON_ERR_CNT_buffer_apply(cbrc_handle_t * h,  
                                      UINT32 index_a,
                                                                   UINT32 path,
                                      config_and_status_MON_ERR_CNT_buffer_t *b);

PUBLIC PMC_ERROR config_and_status_MON_ERR_CNT_buffer_retrieve(cbrc_handle_t * h,  
                                      UINT32 index_a,
                                                                   UINT32 path,
                                      config_and_status_MON_ERR_CNT_buffer_t *b);



PUBLIC PMC_ERROR config_and_status_GENERATOR_B1_E1_VAL_buffer_apply(cbrc_handle_t * h,  
                                                                         UINT32 index_a,
                                                                         UINT32 path,
                                                                    config_and_status_GENERATOR_B1_E1_VAL_buffer_t *b) ;


PUBLIC PMC_ERROR config_and_status_GENERATOR_STS_1_PATH_CFG_buffer_apply(cbrc_handle_t * h,  
                                      UINT32 index_a,
                                                                   UINT32 path,
                                      config_and_status_GENERATOR_STS_1_PATH_CFG_buffer_t *b);

PUBLIC PMC_ERROR config_and_status_GENERATOR_STS_1_PATH_CFG_buffer_retrieve(cbrc_handle_t * h,  
                                      UINT32 index_a,
                                                                   UINT32 path,
                                      config_and_status_GENERATOR_STS_1_PATH_CFG_buffer_t *b);




PUBLIC PMC_ERROR config_and_status_GENERATOR_PRBS_22_7_ACCUMULATOR_buffer_apply(cbrc_handle_t * h,  
                                      UINT32 index_a,
                                                                   UINT32 path,
                                      config_and_status_GENERATOR_PRBS_22_7_ACCUMULATOR_buffer_t *b);

PUBLIC PMC_ERROR config_and_status_GENERATOR_PRBS_22_7_ACCUMULATOR_buffer_retrieve(cbrc_handle_t * h,  
                                      UINT32 index_a,
                                                                   UINT32 path,
                                      config_and_status_GENERATOR_PRBS_22_7_ACCUMULATOR_buffer_t *b);




PUBLIC PMC_ERROR config_and_status_GENERATOR_PRBS_6_0_ACCUMULATOR_buffer_apply(cbrc_handle_t * h,  
                                      UINT32 index_a,
                                                                   UINT32 path,
                                      config_and_status_GENERATOR_PRBS_6_0_ACCUMULATOR_buffer_t *b);

PUBLIC PMC_ERROR config_and_status_GENERATOR_PRBS_6_0_ACCUMULATOR_buffer_retrieve(cbrc_handle_t * h,  
                                      UINT32 index_a,
                                                                   UINT32 path,
                                      config_and_status_GENERATOR_PRBS_6_0_ACCUMULATOR_buffer_t *b);




PUBLIC PMC_ERROR shpi_indirect_IND_INT_VAL_buffer_apply(cbrc_handle_t * h,  
                                      UINT32 index_a,
                                      shpi_indirect_IND_INT_VAL_buffer_t *b);

PUBLIC PMC_ERROR shpi_indirect_IND_INT_VAL_buffer_retrieve(cbrc_handle_t * h,  
                                      UINT32 index_a,
                                      shpi_indirect_IND_INT_VAL_buffer_t *b);




PUBLIC PMC_ERROR shpi_indirect_IND_INT_STAT_buffer_apply(cbrc_handle_t * h,  
                                      UINT32 index_a,
                                      shpi_indirect_IND_INT_STAT_buffer_t *b);

PUBLIC PMC_ERROR shpi_indirect_IND_INT_STAT_buffer_retrieve(cbrc_handle_t * h,  
                                      UINT32 index_a,
                                      shpi_indirect_IND_INT_STAT_buffer_t *b);




PUBLIC PMC_ERROR shpi_indirect_CFG_buffer_apply(cbrc_handle_t * h,  
                                      UINT32 index_a,
                                      shpi_indirect_CFG_buffer_t *b);

PUBLIC PMC_ERROR shpi_indirect_CFG_buffer_retrieve(cbrc_handle_t * h,  
                                      UINT32 index_a,
                                      shpi_indirect_CFG_buffer_t *b);




PUBLIC PMC_ERROR shpi_indirect_PATH_NEGATIVE_JUSTIFICATION_EVENT_CNT_buffer_apply(cbrc_handle_t * h,  
                                      UINT32 index_a,
                                      shpi_indirect_PATH_NEGATIVE_JUSTIFICATION_EVENT_CNT_buffer_t *b);

PUBLIC PMC_ERROR shpi_indirect_PATH_NEGATIVE_JUSTIFICATION_EVENT_CNT_buffer_retrieve(cbrc_handle_t * h,  
                                      UINT32 index_a,
                                      shpi_indirect_PATH_NEGATIVE_JUSTIFICATION_EVENT_CNT_buffer_t *b);




PUBLIC PMC_ERROR shpi_indirect_PATH_POSITIVE_JUSTIFICATION_EVENT_CNT_buffer_apply(cbrc_handle_t * h,  
                                      UINT32 index_a,
                                      shpi_indirect_PATH_POSITIVE_JUSTIFICATION_EVENT_CNT_buffer_t *b);

PUBLIC PMC_ERROR shpi_indirect_PATH_POSITIVE_JUSTIFICATION_EVENT_CNT_buffer_retrieve(cbrc_handle_t * h,  
                                      UINT32 index_a,
                                      shpi_indirect_PATH_POSITIVE_JUSTIFICATION_EVENT_CNT_buffer_t *b);




PUBLIC PMC_ERROR shpi_indirect_POINTER_VAL_buffer_apply(cbrc_handle_t * h,  
                                      UINT32 index_a,
                                      shpi_indirect_POINTER_VAL_buffer_t *b);

PUBLIC PMC_ERROR shpi_indirect_POINTER_VAL_buffer_retrieve(cbrc_handle_t * h,  
                                      UINT32 index_a,
                                      shpi_indirect_POINTER_VAL_buffer_t *b);






#ifdef __cplusplus
}
#endif

#endif /* _MLD_PRBS_IND_H */

