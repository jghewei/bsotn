/******************************************************************************
 *   COPYRIGHT (C) 2013 PMC-SIERRA, INC. ALL RIGHTS RESERVED.
 * --------------------------------------------------------------------------
 *  This software embodies materials and concepts which are proprietary and
 *  confidential to PMC-Sierra, Inc.
 *  PMC-Sierra distributes this software to its customers pursuant to the
 *  terms and conditions of the Software License Agreement
 *  contained in the text file software.lic that is distributed along with
 *  the software. This software can only be utilized if all
 *  terms and conditions of the Software License Agreement are
 *  accepted. If there are any questions, concerns, or if the
 *  Software License Agreement text file, software.lic, is missing please
 *  contact PMC-Sierra for assistance.
 * -------------------------------------------------------------------------
 *   DESCRIPTION:
 *     contains the inline implementation of all the field accessor functions
 *     and register accessor functions for the c8 block
 *****************************************************************************/
#ifndef _C8_IO_INLINE_H
#define _C8_IO_INLINE_H

#include "c8.h"
#include "c8_regs.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define C8_IO_VERSION 2

/*
 * ==================================================================================
 *  tsb level structure and access functions for c8
 * ==================================================================================
 */
/* if logging is disabled then so is IO_LOGGING */
#ifndef NO_IO_LOGGING
# ifdef LOGGING_DISABLED
#  define NO_IO_LOGGING
# endif
#endif

/* log messages in the generated files log the caller's file/line/function instead of itself.*/
#ifndef IOLOG
# ifdef NO_IO_LOGGING
#  define IOLOG(...)
# else
#  define IOLOG(...) LOG( __VA_ARGS__)
# endif
#endif
#ifndef IO_RANGE_CHECK
# ifdef NO_IO_LOGGING
#  define IO_RANGE_CHECK(...)
# else
#  define IO_RANGE_CHECK(...) LOG( "** range check ** " __VA_ARGS__)
# endif
#endif
#ifndef IOLOG_DATA
# ifdef NO_IO_LOGGING
#  define IOLOG_DATA(...)
# else
#  define IOLOG_DATA(...) LOG_DATA( __VA_ARGS__)
# endif
#endif
typedef struct {
    coalesce_buffer_t coalesce_handle[1]; /* only used if register coalescing is enabled */
    c8_handle_t * h_ptr;
    UINT32 A;
    pmc_sys_handle_t * sys_handle;
    PMC_VAR_CONST UINT32 base_address;
    /* maybe eventually need to add some fields here per io handle */
} c8_buffer_t;
static INLINE void c8_buffer_init( c8_buffer_t *b_ptr,
                                   c8_handle_t *h_ptr,
                                   UINT32 A ) ALWAYS_INLINE;
static INLINE void c8_buffer_init( c8_buffer_t *b_ptr,
                                   c8_handle_t *h_ptr,
                                   UINT32 A )
{
    b_ptr->h_ptr                    = h_ptr;
    b_ptr->A                        = A;
    b_ptr->sys_handle               = ((pmc_handle_t *)h_ptr)->sys_handle;
    *(UINT32 *)&b_ptr->base_address = (((pmc_handle_t *)h_ptr)->base_address + ((0)*0x01000) );
    /* currently this just checks that the previous function remembered to flush. */
    l1sys_init( b_ptr->coalesce_handle, b_ptr->sys_handle );
    IOLOG( "%s A=%d", "c8_buffer_init", A);
    
}

/* flush any changed fields to the register file and invalidate the read cache. */
static INLINE void c8_buffer_flush( c8_buffer_t *b_ptr ) ALWAYS_INLINE;
static INLINE void c8_buffer_flush( c8_buffer_t *b_ptr )
{
    IOLOG( "c8_buffer_flush" );
    l1sys_flush( b_ptr->coalesce_handle );
}
static INLINE UINT32 c8_reg_read( c8_buffer_t *b_ptr,
                                  c8_handle_t *h_ptr,
                                  UINT32 A,
                                  UINT32 mem_type,
                                  UINT32 reg ) ALWAYS_INLINE;
static INLINE UINT32 c8_reg_read( c8_buffer_t *b_ptr,
                                  c8_handle_t *h_ptr,
                                  UINT32 A,
                                  UINT32 mem_type,
                                  UINT32 reg )
{
    UINT32 value;
    if (b_ptr != NULL)
        value = l1sys_reg_read( b_ptr->coalesce_handle,
                                mem_type,
                                (b_ptr->base_address + (b_ptr->A)*0x01000),
                                reg);
    else
        value = l2sys_reg_read( ((pmc_handle_t *)h_ptr)->sys_handle,
                                mem_type,
                                (((pmc_handle_t *)h_ptr)->base_address + (A)*0x01000) + reg);
    return value;
}
static INLINE void c8_reg_write( c8_buffer_t *b_ptr,
                                 c8_handle_t *h_ptr,
                                 UINT32 A,
                                 UINT32 mem_type,
                                 UINT32 reg,
                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_write( c8_buffer_t *b_ptr,
                                 c8_handle_t *h_ptr,
                                 UINT32 A,
                                 UINT32 mem_type,
                                 UINT32 reg,
                                 UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_reg_write( b_ptr->coalesce_handle,
                         mem_type,
                         (b_ptr->base_address + (b_ptr->A)*0x01000),
                         reg,
                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                         mem_type,
                         (((pmc_handle_t *)h_ptr)->base_address + (A)*0x01000) + reg,
                         value);
}

static INLINE void c8_field_set( c8_buffer_t *b_ptr,
                                 c8_handle_t *h_ptr,
                                 UINT32 A,
                                 UINT32 mem_type,
                                 UINT32 reg,
                                 UINT32 mask,
                                 UINT32 unused_mask,
                                 UINT32 ofs,
                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_set( c8_buffer_t *b_ptr,
                                 c8_handle_t *h_ptr,
                                 UINT32 A,
                                 UINT32 mem_type,
                                 UINT32 reg,
                                 UINT32 mask,
                                 UINT32 unused_mask,
                                 UINT32 ofs,
                                 UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_field_set2( b_ptr->coalesce_handle,
                          mem_type,
                          (b_ptr->base_address + (b_ptr->A)*0x01000),
                          reg,
                          mask,
                          unused_mask,
                          ofs,
                          value);
    else
    {
        if ((mask | unused_mask) == 0xffffffff)
        {
            l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                             mem_type,
                             (((pmc_handle_t *)h_ptr)->base_address + (A)*0x01000) + reg,
                             value<<ofs);
        }
        else
        {
            l2sys_reg_read_modify_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                                         mem_type,
                                         (((pmc_handle_t *)h_ptr)->base_address + (A)*0x01000) + reg,
                                         mask,
                                         value<<ofs);
        }
    }
}

static INLINE void c8_action_on_write_field_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 mem_type,
                                                 UINT32 reg,
                                                 UINT32 mask,
                                                 UINT32 ofs,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_action_on_write_field_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 mem_type,
                                                 UINT32 reg,
                                                 UINT32 mask,
                                                 UINT32 ofs,
                                                 UINT32 value )
{
    if (b_ptr != NULL)
        l1sys_action_on_write_field_set( b_ptr->coalesce_handle,
                                         mem_type,
                                         (b_ptr->base_address + (b_ptr->A)*0x01000),
                                         reg,
                                         mask,
                                         ofs,
                                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                         mem_type,
                         (((pmc_handle_t *)h_ptr)->base_address + (A)*0x01000) + reg,
                         value<<ofs);
}

static INLINE void c8_burst_read( c8_buffer_t *b_ptr,
                                  c8_handle_t *h_ptr,
                                  UINT32 A,
                                  UINT32 mem_type,
                                  UINT32 reg,
                                  UINT32 len,
                                  UINT32 *value ) ALWAYS_INLINE;
static INLINE void c8_burst_read( c8_buffer_t *b_ptr,
                                  c8_handle_t *h_ptr,
                                  UINT32 A,
                                  UINT32 mem_type,
                                  UINT32 reg,
                                  UINT32 len,
                                  UINT32 *value )
{
    if (b_ptr != NULL)
        l1sys_burst_read( b_ptr->coalesce_handle,
                          mem_type,
                          (b_ptr->base_address + (b_ptr->A)*0x01000),
                          reg,
                          len,
                          value);
    else
        l2sys_burst_read( ((pmc_handle_t *)h_ptr)->sys_handle,
                          mem_type,
                          (((pmc_handle_t *)h_ptr)->base_address + (A)*0x01000) + reg,
                          len,
                          value);
}

static INLINE void c8_burst_write( c8_buffer_t *b_ptr,
                                   c8_handle_t *h_ptr,
                                   UINT32 A,
                                   UINT32 mem_type,
                                   UINT32 reg,
                                   UINT32 len,
                                   UINT32 *value ) ALWAYS_INLINE;
static INLINE void c8_burst_write( c8_buffer_t *b_ptr,
                                   c8_handle_t *h_ptr,
                                   UINT32 A,
                                   UINT32 mem_type,
                                   UINT32 reg,
                                   UINT32 len,
                                   UINT32 *value )
{
    if (b_ptr != NULL)
        l1sys_burst_write( b_ptr->coalesce_handle,
                           mem_type,
                           (b_ptr->base_address + (b_ptr->A)*0x01000),
                           reg,
                           len,
                           value);
    else
        l2sys_burst_write( ((pmc_handle_t *)h_ptr)->sys_handle,
                           mem_type,
                           (((pmc_handle_t *)h_ptr)->base_address + (A)*0x01000) + reg,
                           len,
                           value);
}

static INLINE PMC_POLL_RETURN_TYPE c8_poll( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32 mem_type,
                                            UINT32 reg,
                                            UINT32 mask,
                                            UINT32 value,
                                            PMC_POLL_COMPARISON_TYPE cmp,
                                            UINT32 max_count,
                                            UINT32 *num_failed_polls,
                                            UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_poll( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32 mem_type,
                                            UINT32 reg,
                                            UINT32 mask,
                                            UINT32 value,
                                            PMC_POLL_COMPARISON_TYPE cmp,
                                            UINT32 max_count,
                                            UINT32 *num_failed_polls,
                                            UINT32 delay_between_polls_in_microseconds )
{
    if (b_ptr != NULL)
        return l1sys_poll( b_ptr->coalesce_handle,
                           mem_type,
                           (b_ptr->base_address + (b_ptr->A)*0x01000),
                           reg,
                           mask,
                           value,
                           cmp,
                           max_count,
                           num_failed_polls,
                           delay_between_polls_in_microseconds);
    else
        return l2sys_poll( ((pmc_handle_t *)h_ptr)->sys_handle,
                           mem_type,
                           (((pmc_handle_t *)h_ptr)->base_address + (A)*0x01000) + reg,
                           mask,
                           value,
                           cmp,
                           max_count,
                           num_failed_polls,
                           delay_between_polls_in_microseconds);
}

/*
 * ==================================================================================
 *  register access functions for c8
 * ==================================================================================
 */

static INLINE void c8_reg_DIGITAL_RST_REG_write( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_DIGITAL_RST_REG_write( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_DIGITAL_RST_REG_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG,
                  value);
}

static INLINE void c8_reg_DIGITAL_RST_REG_field_set( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 mask,
                                                     UINT32 ofs,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_DIGITAL_RST_REG_field_set( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 mask,
                                                     UINT32 ofs,
                                                     UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_DIGITAL_RST_REG_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_DIGITAL_RST_REG_read( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_DIGITAL_RST_REG_read( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_DIGITAL_RST_REG_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_MABC_RST_CNFG_REG_write( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_MABC_RST_CNFG_REG_write( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_MABC_RST_CNFG_REG_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_MABC_RST_CNFG_REG,
                  value);
}

static INLINE void c8_reg_MABC_RST_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_MABC_RST_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_MABC_RST_CNFG_REG_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_MABC_RST_CNFG_REG,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_MABC_RST_CNFG_REG_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_MABC_RST_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_MABC_RST_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_MABC_RST_CNFG_REG);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_MABC_RST_CNFG_REG_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_CLK_DGLCH_CNFG_REG_write( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_CLK_DGLCH_CNFG_REG_write( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_CLK_DGLCH_CNFG_REG_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_CLK_DGLCH_CNFG_REG,
                  value);
}

static INLINE void c8_reg_CLK_DGLCH_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_CLK_DGLCH_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_CLK_DGLCH_CNFG_REG_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_CLK_DGLCH_CNFG_REG,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_CLK_DGLCH_CNFG_REG_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_CLK_DGLCH_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_CLK_DGLCH_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_CLK_DGLCH_CNFG_REG);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_CLK_DGLCH_CNFG_REG_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_PLL_CNFG_REG1_write( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_PLL_CNFG_REG1_write( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_PLL_CNFG_REG1_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG1,
                  value);
}

static INLINE void c8_reg_PLL_CNFG_REG1_field_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_PLL_CNFG_REG1_field_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_PLL_CNFG_REG1_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG1,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG1_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_PLL_CNFG_REG1_read( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_PLL_CNFG_REG1_read( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG1);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_PLL_CNFG_REG1_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_PLL_CNFG_REG2_write( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_PLL_CNFG_REG2_write( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_PLL_CNFG_REG2_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG2,
                  value);
}

static INLINE void c8_reg_PLL_CNFG_REG2_field_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_PLL_CNFG_REG2_field_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_PLL_CNFG_REG2_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG2,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG2_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_PLL_CNFG_REG2_read( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_PLL_CNFG_REG2_read( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG2);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_PLL_CNFG_REG2_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_PLL_CNFG_REG3_write( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_PLL_CNFG_REG3_write( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_PLL_CNFG_REG3_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG3,
                  value);
}

static INLINE void c8_reg_PLL_CNFG_REG3_field_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_PLL_CNFG_REG3_field_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_PLL_CNFG_REG3_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG3,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG3_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_PLL_CNFG_REG3_read( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_PLL_CNFG_REG3_read( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG3);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_PLL_CNFG_REG3_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_PLL_CNFG_REG4_write( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_PLL_CNFG_REG4_write( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_PLL_CNFG_REG4_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG4,
                  value);
}

static INLINE void c8_reg_PLL_CNFG_REG4_field_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_PLL_CNFG_REG4_field_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_PLL_CNFG_REG4_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG4,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG4_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_PLL_CNFG_REG4_read( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_PLL_CNFG_REG4_read( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG4);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_PLL_CNFG_REG4_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_PLL_CNFG_REG5_write( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_PLL_CNFG_REG5_write( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_PLL_CNFG_REG5_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG5,
                  value);
}

static INLINE void c8_reg_PLL_CNFG_REG5_field_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_PLL_CNFG_REG5_field_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_PLL_CNFG_REG5_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG5,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG5_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_PLL_CNFG_REG5_read( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_PLL_CNFG_REG5_read( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG5);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_PLL_CNFG_REG5_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_GCOC_CNFG_REG1_write( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_GCOC_CNFG_REG1_write( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_GCOC_CNFG_REG1_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG1,
                  value);
}

static INLINE void c8_reg_GCOC_CNFG_REG1_field_set( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 mask,
                                                    UINT32 ofs,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_GCOC_CNFG_REG1_field_set( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 mask,
                                                    UINT32 ofs,
                                                    UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_GCOC_CNFG_REG1_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG1,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG1_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_GCOC_CNFG_REG1_read( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_GCOC_CNFG_REG1_read( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG1);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_GCOC_CNFG_REG1_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_GCOC_CNFG_REG2_write( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_GCOC_CNFG_REG2_write( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_GCOC_CNFG_REG2_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG2,
                  value);
}

static INLINE void c8_reg_GCOC_CNFG_REG2_field_set( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 mask,
                                                    UINT32 ofs,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_GCOC_CNFG_REG2_field_set( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 mask,
                                                    UINT32 ofs,
                                                    UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_GCOC_CNFG_REG2_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG2,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG2_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_GCOC_CNFG_REG2_read( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_GCOC_CNFG_REG2_read( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG2);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_GCOC_CNFG_REG2_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_GCOC_CNFG_REG3_write( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_GCOC_CNFG_REG3_write( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_GCOC_CNFG_REG3_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG3,
                  value);
}

static INLINE void c8_reg_GCOC_CNFG_REG3_field_set( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 mask,
                                                    UINT32 ofs,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_GCOC_CNFG_REG3_field_set( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 mask,
                                                    UINT32 ofs,
                                                    UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_GCOC_CNFG_REG3_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG3,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG3_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_GCOC_CNFG_REG3_read( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_GCOC_CNFG_REG3_read( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG3);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_GCOC_CNFG_REG3_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_GCOC_CNFG_REG4_write( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_GCOC_CNFG_REG4_write( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_GCOC_CNFG_REG4_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG4,
                  value);
}

static INLINE void c8_reg_GCOC_CNFG_REG4_field_set( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 mask,
                                                    UINT32 ofs,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_GCOC_CNFG_REG4_field_set( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 mask,
                                                    UINT32 ofs,
                                                    UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_GCOC_CNFG_REG4_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG4,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG4_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_GCOC_CNFG_REG4_read( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_GCOC_CNFG_REG4_read( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG4);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_GCOC_CNFG_REG4_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_MDSP_CNFG_REG_write( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_MDSP_CNFG_REG_write( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_MDSP_CNFG_REG_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_MDSP_CNFG_REG,
                  value);
}

static INLINE void c8_reg_MDSP_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_MDSP_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_MDSP_CNFG_REG_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_MDSP_CNFG_REG,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_MDSP_CNFG_REG_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_MDSP_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_MDSP_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_MDSP_CNFG_REG);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_MDSP_CNFG_REG_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_CTRL_CNFG_REG_write( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_CTRL_CNFG_REG_write( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_CTRL_CNFG_REG_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_CTRL_CNFG_REG,
                  value);
}

static INLINE void c8_reg_CTRL_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_CTRL_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_CTRL_CNFG_REG_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_CTRL_CNFG_REG,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_CTRL_CNFG_REG_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_CTRL_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_CTRL_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_CTRL_CNFG_REG);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_CTRL_CNFG_REG_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_DLPBK_CNFG_REG_write( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_DLPBK_CNFG_REG_write( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_DLPBK_CNFG_REG_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_DLPBK_CNFG_REG,
                  value);
}

static INLINE void c8_reg_DLPBK_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 mask,
                                                    UINT32 ofs,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_DLPBK_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 mask,
                                                    UINT32 ofs,
                                                    UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_DLPBK_CNFG_REG_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_DLPBK_CNFG_REG,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_DLPBK_CNFG_REG_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_DLPBK_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_DLPBK_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_DLPBK_CNFG_REG);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_DLPBK_CNFG_REG_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_SIPO_CNFG_REG_write( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_SIPO_CNFG_REG_write( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_SIPO_CNFG_REG_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_SIPO_CNFG_REG,
                  value);
}

static INLINE void c8_reg_SIPO_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_SIPO_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_SIPO_CNFG_REG_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_SIPO_CNFG_REG,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_SIPO_CNFG_REG_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_SIPO_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_SIPO_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_SIPO_CNFG_REG);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_SIPO_CNFG_REG_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_PISO_CNFG_REG_write( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_PISO_CNFG_REG_write( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_PISO_CNFG_REG_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_PISO_CNFG_REG,
                  value);
}

static INLINE void c8_reg_PISO_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_PISO_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_PISO_CNFG_REG_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_PISO_CNFG_REG,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_PISO_CNFG_REG_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_PISO_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_PISO_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_PISO_CNFG_REG);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_PISO_CNFG_REG_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_EFUSE_CNFG_REG_write( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_EFUSE_CNFG_REG_write( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_EFUSE_CNFG_REG_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_EFUSE_CNFG_REG,
                  value);
}

static INLINE void c8_reg_EFUSE_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 mask,
                                                    UINT32 ofs,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_EFUSE_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 mask,
                                                    UINT32 ofs,
                                                    UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_EFUSE_CNFG_REG_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_EFUSE_CNFG_REG,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_EFUSE_CNFG_REG_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_EFUSE_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_EFUSE_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_EFUSE_CNFG_REG);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_EFUSE_CNFG_REG_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_DESKEW_FIFO_CNFG_REG_write( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_DESKEW_FIFO_CNFG_REG_write( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_DESKEW_FIFO_CNFG_REG_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_DESKEW_FIFO_CNFG_REG,
                  value);
}

static INLINE void c8_reg_DESKEW_FIFO_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_DESKEW_FIFO_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_DESKEW_FIFO_CNFG_REG_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_DESKEW_FIFO_CNFG_REG,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_DESKEW_FIFO_CNFG_REG_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_DESKEW_FIFO_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_DESKEW_FIFO_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_DESKEW_FIFO_CNFG_REG);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_DESKEW_FIFO_CNFG_REG_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_SSI_CNFG_REG1_write( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_SSI_CNFG_REG1_write( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_SSI_CNFG_REG1_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG1,
                  value);
}

static INLINE void c8_reg_SSI_CNFG_REG1_field_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_SSI_CNFG_REG1_field_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_SSI_CNFG_REG1_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG1,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG1_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_SSI_CNFG_REG1_read( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_SSI_CNFG_REG1_read( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG1);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_SSI_CNFG_REG1_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_SSI_CNFG_REG2_write( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_SSI_CNFG_REG2_write( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_SSI_CNFG_REG2_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG2,
                  value);
}

static INLINE void c8_reg_SSI_CNFG_REG2_field_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_SSI_CNFG_REG2_field_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_SSI_CNFG_REG2_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG2,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG2_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_SSI_CNFG_REG2_read( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_SSI_CNFG_REG2_read( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG2);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_SSI_CNFG_REG2_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_DLOS_CNFG_REG_write( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_DLOS_CNFG_REG_write( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_DLOS_CNFG_REG_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_DLOS_CNFG_REG,
                  value);
}

static INLINE void c8_reg_DLOS_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_DLOS_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_DLOS_CNFG_REG_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_DLOS_CNFG_REG,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_DLOS_CNFG_REG_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_DLOS_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_DLOS_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_DLOS_CNFG_REG);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_DLOS_CNFG_REG_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_MABC_ADC_CNFG_REG_write( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_MABC_ADC_CNFG_REG_write( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_MABC_ADC_CNFG_REG_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG,
                  value);
}

static INLINE void c8_reg_MABC_ADC_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_MABC_ADC_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_MABC_ADC_CNFG_REG_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_MABC_ADC_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_MABC_ADC_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_MABC_ADC_CNFG_REG_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_MABC_CNFG_REG_write( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_MABC_CNFG_REG_write( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_MABC_CNFG_REG_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_MABC_CNFG_REG,
                  value);
}

static INLINE void c8_reg_MABC_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_MABC_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_MABC_CNFG_REG_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_MABC_CNFG_REG,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_MABC_CNFG_REG_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_MABC_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_MABC_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_MABC_CNFG_REG);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_MABC_CNFG_REG_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_MABC_PISO_CNFG_REG1_write( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_MABC_PISO_CNFG_REG1_write( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_MABC_PISO_CNFG_REG1_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG1,
                  value);
}

static INLINE void c8_reg_MABC_PISO_CNFG_REG1_field_set( c8_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 mask,
                                                         UINT32 ofs,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_MABC_PISO_CNFG_REG1_field_set( c8_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 mask,
                                                         UINT32 ofs,
                                                         UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_MABC_PISO_CNFG_REG1_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG1,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG1_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_MABC_PISO_CNFG_REG1_read( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_MABC_PISO_CNFG_REG1_read( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG1);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_MABC_PISO_CNFG_REG1_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_MABC_PISO_CNFG_REG2_write( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_MABC_PISO_CNFG_REG2_write( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_MABC_PISO_CNFG_REG2_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2,
                  value);
}

static INLINE void c8_reg_MABC_PISO_CNFG_REG2_field_set( c8_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 mask,
                                                         UINT32 ofs,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_MABC_PISO_CNFG_REG2_field_set( c8_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 mask,
                                                         UINT32 ofs,
                                                         UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_MABC_PISO_CNFG_REG2_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_MABC_PISO_CNFG_REG2_read( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_MABC_PISO_CNFG_REG2_read( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_MABC_PISO_CNFG_REG2_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_MABC_RXCPGEN_CNFG_REG_write( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_MABC_RXCPGEN_CNFG_REG_write( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_MABC_RXCPGEN_CNFG_REG_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG,
                  value);
}

static INLINE void c8_reg_MABC_RXCPGEN_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 mask,
                                                           UINT32 ofs,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_MABC_RXCPGEN_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 mask,
                                                           UINT32 ofs,
                                                           UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_MABC_RXCPGEN_CNFG_REG_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_MABC_RXCPGEN_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_MABC_RXCPGEN_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_MABC_RXCPGEN_CNFG_REG_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_TXRX_CNFG_REG_write( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_TXRX_CNFG_REG_write( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_TXRX_CNFG_REG_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_TXRX_CNFG_REG,
                  value);
}

static INLINE void c8_reg_TXRX_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_TXRX_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_TXRX_CNFG_REG_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_TXRX_CNFG_REG,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_TXRX_CNFG_REG_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_TXRX_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_TXRX_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_TXRX_CNFG_REG);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_TXRX_CNFG_REG_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_MABC_TEST_CNFG_REG_write( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_MABC_TEST_CNFG_REG_write( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_MABC_TEST_CNFG_REG_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG,
                  value);
}

static INLINE void c8_reg_MABC_TEST_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_MABC_TEST_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_MABC_TEST_CNFG_REG_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_MABC_TEST_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_MABC_TEST_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_MABC_TEST_CNFG_REG_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_DIV_CNFG_REG_write( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_DIV_CNFG_REG_write( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_DIV_CNFG_REG_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_DIV_CNFG_REG,
                  value);
}

static INLINE void c8_reg_DIV_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 mask,
                                                  UINT32 ofs,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_DIV_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 mask,
                                                  UINT32 ofs,
                                                  UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_DIV_CNFG_REG_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_DIV_CNFG_REG,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_DIV_CNFG_REG_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_DIV_CNFG_REG_read( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_DIV_CNFG_REG_read( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_DIV_CNFG_REG);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_DIV_CNFG_REG_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_OFF_RAM_CNFG_REG_write( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_OFF_RAM_CNFG_REG_write( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_OFF_RAM_CNFG_REG_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG,
                  value);
}

static INLINE void c8_reg_OFF_RAM_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 mask,
                                                      UINT32 ofs,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_OFF_RAM_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 mask,
                                                      UINT32 ofs,
                                                      UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_OFF_RAM_CNFG_REG_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_OFF_RAM_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_OFF_RAM_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_OFF_RAM_CNFG_REG_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_MTSB_CTRL_CNFG_REG_write( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_MTSB_CTRL_CNFG_REG_write( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_MTSB_CTRL_CNFG_REG_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_MTSB_CTRL_CNFG_REG,
                  value);
}

static INLINE void c8_reg_MTSB_CTRL_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_MTSB_CTRL_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_MTSB_CTRL_CNFG_REG_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_MTSB_CTRL_CNFG_REG,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_MTSB_CTRL_CNFG_REG_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_MTSB_CTRL_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_MTSB_CTRL_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_MTSB_CTRL_CNFG_REG);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_MTSB_CTRL_CNFG_REG_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_DIAG_CNFG_REG1_write( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_DIAG_CNFG_REG1_write( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_DIAG_CNFG_REG1_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_DIAG_CNFG_REG1,
                  value);
}

static INLINE void c8_reg_DIAG_CNFG_REG1_field_set( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 mask,
                                                    UINT32 ofs,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_DIAG_CNFG_REG1_field_set( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 mask,
                                                    UINT32 ofs,
                                                    UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_DIAG_CNFG_REG1_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_DIAG_CNFG_REG1,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_DIAG_CNFG_REG1_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_DIAG_CNFG_REG1_read( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_DIAG_CNFG_REG1_read( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_DIAG_CNFG_REG1);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_DIAG_CNFG_REG1_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_DIAG_CNFG_REG2_write( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_DIAG_CNFG_REG2_write( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_DIAG_CNFG_REG2_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_DIAG_CNFG_REG2,
                  value);
}

static INLINE void c8_reg_DIAG_CNFG_REG2_field_set( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 mask,
                                                    UINT32 ofs,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_DIAG_CNFG_REG2_field_set( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 mask,
                                                    UINT32 ofs,
                                                    UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_DIAG_CNFG_REG2_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_DIAG_CNFG_REG2,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_DIAG_CNFG_REG2_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_DIAG_CNFG_REG2_read( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_DIAG_CNFG_REG2_read( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_DIAG_CNFG_REG2);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_DIAG_CNFG_REG2_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_SIPO_BIST_CNFG_REG_write( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_SIPO_BIST_CNFG_REG_write( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_SIPO_BIST_CNFG_REG_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_SIPO_BIST_CNFG_REG,
                  value);
}

static INLINE void c8_reg_SIPO_BIST_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_SIPO_BIST_CNFG_REG_field_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_SIPO_BIST_CNFG_REG_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_SIPO_BIST_CNFG_REG,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_SIPO_BIST_CNFG_REG_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_SIPO_BIST_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_SIPO_BIST_CNFG_REG_read( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_SIPO_BIST_CNFG_REG);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_SIPO_BIST_CNFG_REG_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_PATT_GEN_CNFG_REG1_write( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_PATT_GEN_CNFG_REG1_write( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_PATT_GEN_CNFG_REG1_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1,
                  value);
}

static INLINE void c8_reg_PATT_GEN_CNFG_REG1_field_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_PATT_GEN_CNFG_REG1_field_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_PATT_GEN_CNFG_REG1_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_PATT_GEN_CNFG_REG1_read( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_PATT_GEN_CNFG_REG1_read( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_PATT_GEN_CNFG_REG1_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_PATT_GEN_CNFG_REG2_write( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_PATT_GEN_CNFG_REG2_write( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_PATT_GEN_CNFG_REG2_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG2,
                  value);
}

static INLINE void c8_reg_PATT_GEN_CNFG_REG2_field_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_PATT_GEN_CNFG_REG2_field_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_PATT_GEN_CNFG_REG2_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG2,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG2_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_PATT_GEN_CNFG_REG2_read( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_PATT_GEN_CNFG_REG2_read( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG2);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_PATT_GEN_CNFG_REG2_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_PATT_CHK_CNFG_REG1_write( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_PATT_CHK_CNFG_REG1_write( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_PATT_CHK_CNFG_REG1_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1,
                  value);
}

static INLINE void c8_reg_PATT_CHK_CNFG_REG1_field_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_PATT_CHK_CNFG_REG1_field_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_PATT_CHK_CNFG_REG1_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_PATT_CHK_CNFG_REG1_read( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_PATT_CHK_CNFG_REG1_read( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_PATT_CHK_CNFG_REG1_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_PATT_CHK_CNFG_REG2_write( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_PATT_CHK_CNFG_REG2_write( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_PATT_CHK_CNFG_REG2_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG2,
                  value);
}

static INLINE void c8_reg_PATT_CHK_CNFG_REG2_field_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_PATT_CHK_CNFG_REG2_field_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_PATT_CHK_CNFG_REG2_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG2,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG2_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_PATT_CHK_CNFG_REG2_read( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_PATT_CHK_CNFG_REG2_read( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG2);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_PATT_CHK_CNFG_REG2_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_TX_CTRL_CNFG_REG1_write( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_TX_CTRL_CNFG_REG1_write( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_TX_CTRL_CNFG_REG1_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG1,
                  value);
}

static INLINE void c8_reg_TX_CTRL_CNFG_REG1_field_set( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_TX_CTRL_CNFG_REG1_field_set( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_TX_CTRL_CNFG_REG1_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG1,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG1_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_TX_CTRL_CNFG_REG1_read( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_TX_CTRL_CNFG_REG1_read( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG1);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_TX_CTRL_CNFG_REG1_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_TX_CTRL_CNFG_REG2_write( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_TX_CTRL_CNFG_REG2_write( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_TX_CTRL_CNFG_REG2_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG2,
                  value);
}

static INLINE void c8_reg_TX_CTRL_CNFG_REG2_field_set( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_TX_CTRL_CNFG_REG2_field_set( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_TX_CTRL_CNFG_REG2_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG2,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG2_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_TX_CTRL_CNFG_REG2_read( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_TX_CTRL_CNFG_REG2_read( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG2);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_TX_CTRL_CNFG_REG2_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_TX_CTRL_CNFG_REG3_write( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_TX_CTRL_CNFG_REG3_write( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_TX_CTRL_CNFG_REG3_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3,
                  value);
}

static INLINE void c8_reg_TX_CTRL_CNFG_REG3_field_set( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_TX_CTRL_CNFG_REG3_field_set( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_TX_CTRL_CNFG_REG3_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_TX_CTRL_CNFG_REG3_read( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_TX_CTRL_CNFG_REG3_read( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_TX_CTRL_CNFG_REG3_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_TX_CTRL_CNFG_REG4_write( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_TX_CTRL_CNFG_REG4_write( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_TX_CTRL_CNFG_REG4_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4,
                  value);
}

static INLINE void c8_reg_TX_CTRL_CNFG_REG4_field_set( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_TX_CTRL_CNFG_REG4_field_set( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_TX_CTRL_CNFG_REG4_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_TX_CTRL_CNFG_REG4_read( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_TX_CTRL_CNFG_REG4_read( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_TX_CTRL_CNFG_REG4_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_TX_CTRL_CNFG_REG5_write( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_TX_CTRL_CNFG_REG5_write( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_TX_CTRL_CNFG_REG5_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG5,
                  value);
}

static INLINE void c8_reg_TX_CTRL_CNFG_REG5_field_set( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_TX_CTRL_CNFG_REG5_field_set( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_TX_CTRL_CNFG_REG5_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG5,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG5_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_TX_CTRL_CNFG_REG5_read( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_TX_CTRL_CNFG_REG5_read( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG5);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_TX_CTRL_CNFG_REG5_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_TX_CTRL_CNFG_REG6_write( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_TX_CTRL_CNFG_REG6_write( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_TX_CTRL_CNFG_REG6_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG6,
                  value);
}

static INLINE void c8_reg_TX_CTRL_CNFG_REG6_field_set( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_TX_CTRL_CNFG_REG6_field_set( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_TX_CTRL_CNFG_REG6_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG6,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG6_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_TX_CTRL_CNFG_REG6_read( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_TX_CTRL_CNFG_REG6_read( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG6);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_TX_CTRL_CNFG_REG6_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_TX_CTRL_CNFG_REG7_write( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_TX_CTRL_CNFG_REG7_write( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_TX_CTRL_CNFG_REG7_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG7,
                  value);
}

static INLINE void c8_reg_TX_CTRL_CNFG_REG7_field_set( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_TX_CTRL_CNFG_REG7_field_set( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_TX_CTRL_CNFG_REG7_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG7,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG7_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_TX_CTRL_CNFG_REG7_read( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_TX_CTRL_CNFG_REG7_read( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG7);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_TX_CTRL_CNFG_REG7_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_PMM_WRAP_CNFG_REG1_write( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_PMM_WRAP_CNFG_REG1_write( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_PMM_WRAP_CNFG_REG1_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG1,
                  value);
}

static INLINE void c8_reg_PMM_WRAP_CNFG_REG1_field_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_PMM_WRAP_CNFG_REG1_field_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_PMM_WRAP_CNFG_REG1_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG1,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG1_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_PMM_WRAP_CNFG_REG1_read( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_PMM_WRAP_CNFG_REG1_read( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG1);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_PMM_WRAP_CNFG_REG1_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_PMM_WRAP_CNFG_REG2_write( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_PMM_WRAP_CNFG_REG2_write( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_PMM_WRAP_CNFG_REG2_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2,
                  value);
}

static INLINE void c8_reg_PMM_WRAP_CNFG_REG2_field_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_PMM_WRAP_CNFG_REG2_field_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_PMM_WRAP_CNFG_REG2_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_CONFIG,
                  PMC_CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_PMM_WRAP_CNFG_REG2_read( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_PMM_WRAP_CNFG_REG2_read( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_CONFIG,
                             PMC_CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_PMM_WRAP_CNFG_REG2_read", reg_value, A);
    return reg_value;
}

static INLINE void c8_reg_INT_REG_write( c8_buffer_t *b_ptr,
                                         c8_handle_t *h_ptr,
                                         UINT32 A,
                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_INT_REG_write( c8_buffer_t *b_ptr,
                                         c8_handle_t *h_ptr,
                                         UINT32 A,
                                         UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_INT_REG_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_STATUS,
                  PMC_CNI_UNI_TXRX_REG_INT_REG,
                  value);
}

static INLINE void c8_reg_INT_REG_action_on_write_field_set( c8_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 mask,
                                                             UINT32 ofs,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_INT_REG_action_on_write_field_set( c8_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 mask,
                                                             UINT32 ofs,
                                                             UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_INT_REG_action_on_write_field_set", A, mask, ofs, value );
    c8_action_on_write_field_set( b_ptr,
                                  h_ptr,
                                  A,
                                  MEM_TYPE_STATUS,
                                  PMC_CNI_UNI_TXRX_REG_INT_REG,
                                  mask,
                                  ofs,
                                  value);

}

static INLINE UINT32 c8_reg_INT_REG_read( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_INT_REG_read( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_STATUS,
                             PMC_CNI_UNI_TXRX_REG_INT_REG);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_INT_REG_read", reg_value, A);
    return reg_value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_reg_INT_REG_poll( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 mask,
                                                        UINT32 value,
                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                        UINT32 max_count,
                                                        UINT32 *num_failed_polls,
                                                        UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_reg_INT_REG_poll( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 mask,
                                                        UINT32 value,
                                                        PMC_POLL_COMPARISON_TYPE cmp,
                                                        UINT32 max_count,
                                                        UINT32 *num_failed_polls,
                                                        UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, cmp=%d, max_count=%d, delay_between_polls_in_microseconds=%d", "c8_reg_INT_REG_poll", mask, value, cmp, max_count, delay_between_polls_in_microseconds );
    return c8_poll( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_STATUS,
                    PMC_CNI_UNI_TXRX_REG_INT_REG,
                    mask,
                    value,
                    cmp,
                    max_count,
                    num_failed_polls,
                    delay_between_polls_in_microseconds);

}


static INLINE void c8_reg_INT_ENB_REG_write( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_INT_ENB_REG_write( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "c8_reg_INT_ENB_REG_write", value );
    c8_reg_write( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_STATUS,
                  PMC_CNI_UNI_TXRX_REG_INT_ENB_REG,
                  value);
}

static INLINE void c8_reg_INT_ENB_REG_field_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 mask,
                                                 UINT32 ofs,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_INT_ENB_REG_field_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 mask,
                                                 UINT32 ofs,
                                                 UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_INT_ENB_REG_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_STATUS,
                  PMC_CNI_UNI_TXRX_REG_INT_ENB_REG,
                  mask,
                  PMC_CNI_UNI_TXRX_REG_INT_ENB_REG_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE UINT32 c8_reg_INT_ENB_REG_read( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_INT_ENB_REG_read( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_STATUS,
                             PMC_CNI_UNI_TXRX_REG_INT_ENB_REG);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_INT_ENB_REG_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 c8_reg_INT_VAL_REG_read( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_INT_VAL_REG_read( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_STATUS,
                             PMC_CNI_UNI_TXRX_REG_INT_VAL_REG);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_INT_VAL_REG_read", reg_value, A);
    return reg_value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_reg_INT_VAL_REG_poll( c8_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 mask,
                                                            UINT32 value,
                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                            UINT32 max_count,
                                                            UINT32 *num_failed_polls,
                                                            UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_reg_INT_VAL_REG_poll( c8_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 mask,
                                                            UINT32 value,
                                                            PMC_POLL_COMPARISON_TYPE cmp,
                                                            UINT32 max_count,
                                                            UINT32 *num_failed_polls,
                                                            UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, cmp=%d, max_count=%d, delay_between_polls_in_microseconds=%d", "c8_reg_INT_VAL_REG_poll", mask, value, cmp, max_count, delay_between_polls_in_microseconds );
    return c8_poll( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_STATUS,
                    PMC_CNI_UNI_TXRX_REG_INT_VAL_REG,
                    mask,
                    value,
                    cmp,
                    max_count,
                    num_failed_polls,
                    delay_between_polls_in_microseconds);

}


static INLINE void c8_reg_GCOC_OFFSET_RAM_REG_array_burst_write( c8_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 ofs,
                                                                 UINT32 len,
                                                                 UINT32 *value ) ALWAYS_INLINE;
static INLINE void c8_reg_GCOC_OFFSET_RAM_REG_array_burst_write( c8_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 ofs,
                                                                 UINT32 len,
                                                                 UINT32 *value )
{
    if (len + ofs > 27)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "c8_reg_GCOC_OFFSET_RAM_REG_array_burst_write", ofs, len, 27 );
    IOLOG( "%s of %d words A=%d ofs=%d len=%d", "c8_reg_GCOC_OFFSET_RAM_REG_array_burst_write", 27, A, ofs, len);
    c8_burst_write( b_ptr,
                    h_ptr,
                    A,
                    MEM_TYPE_STATUS,
                    PMC_CNI_UNI_TXRX_REG_GCOC_OFFSET_RAM_REG(ofs),
                    len,
                    value);

}

static INLINE void c8_reg_GCOC_OFFSET_RAM_REG_array_field_set( c8_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 N,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_reg_GCOC_OFFSET_RAM_REG_array_field_set( c8_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 N,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "c8_reg_GCOC_OFFSET_RAM_REG_array_field_set", A, mask, ofs, value );
    c8_field_set( b_ptr,
                  h_ptr,
                  A,
                  MEM_TYPE_STATUS,
                  PMC_CNI_UNI_TXRX_REG_GCOC_OFFSET_RAM_REG(N),
                  mask,
                  PMC_CNI_UNI_TXRX_REG_GCOC_OFFSET_RAM_REG_UNUSED_MASK,
                  ofs,
                  value);

}

static INLINE void c8_reg_GCOC_OFFSET_RAM_REG_array_burst_read( c8_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 ofs,
                                                                UINT32 len,
                                                                UINT32 *value ) ALWAYS_INLINE;
static INLINE void c8_reg_GCOC_OFFSET_RAM_REG_array_burst_read( c8_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 ofs,
                                                                UINT32 len,
                                                                UINT32 *value )
{
    if (len + ofs > 27)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "c8_reg_GCOC_OFFSET_RAM_REG_array_burst_read", ofs, len, 27 );
    c8_burst_read( b_ptr,
                   h_ptr,
                   A,
                   MEM_TYPE_STATUS,
                   PMC_CNI_UNI_TXRX_REG_GCOC_OFFSET_RAM_REG(ofs),
                   len,
                   value);

    IOLOG( "%s of %d words A=%d ofs=%d len=%d", "c8_reg_GCOC_OFFSET_RAM_REG_array_burst_read", 27, A, ofs, len);
}

static INLINE UINT32 c8_reg_GCOC_OFFSET_RAM_REG_array_read( c8_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 N ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_GCOC_OFFSET_RAM_REG_array_read( c8_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 N )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_STATUS,
                             PMC_CNI_UNI_TXRX_REG_GCOC_OFFSET_RAM_REG(N));

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_GCOC_OFFSET_RAM_REG_array_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 c8_reg_PLL_STS_REG_read( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_PLL_STS_REG_read( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_STATUS,
                             PMC_CNI_UNI_TXRX_REG_PLL_STS_REG);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_PLL_STS_REG_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 c8_reg_SSI_STATUS_REG_read( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_SSI_STATUS_REG_read( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_STATUS,
                             PMC_CNI_UNI_TXRX_REG_SSI_STATUS_REG);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_SSI_STATUS_REG_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 c8_reg_MABC_ADC_STS_REG_read( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_MABC_ADC_STS_REG_read( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_STATUS,
                             PMC_CNI_UNI_TXRX_REG_MABC_ADC_STS_REG);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_MABC_ADC_STS_REG_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 c8_reg_DIAG_STATUS_REG1_read( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_DIAG_STATUS_REG1_read( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_STATUS,
                             PMC_CNI_UNI_TXRX_REG_DIAG_STATUS_REG1);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_DIAG_STATUS_REG1_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 c8_reg_DIAG_STATUS_REG2_read( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_DIAG_STATUS_REG2_read( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_STATUS,
                             PMC_CNI_UNI_TXRX_REG_DIAG_STATUS_REG2);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_DIAG_STATUS_REG2_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 c8_reg_SIPO_BIST_STATUS_REG_read( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_SIPO_BIST_STATUS_REG_read( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_STATUS,
                             PMC_CNI_UNI_TXRX_REG_SIPO_BIST_STATUS_REG);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_SIPO_BIST_STATUS_REG_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 c8_reg_PATT_CHK_STATUS_REG1_read( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_PATT_CHK_STATUS_REG1_read( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_STATUS,
                             PMC_CNI_UNI_TXRX_REG_PATT_CHK_STATUS_REG1);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_PATT_CHK_STATUS_REG1_read", reg_value, A);
    return reg_value;
}

static INLINE UINT32 c8_reg_TX_CTRL_STS_REG1_read( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_reg_TX_CTRL_STS_REG1_read( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A )
{
    UINT32 reg_value;

    reg_value = c8_reg_read( b_ptr,
                             h_ptr,
                             A,
                             MEM_TYPE_STATUS,
                             PMC_CNI_UNI_TXRX_REG_TX_CTRL_STS_REG1);

    IOLOG( "%s -> 0x%08x; A=%d", "c8_reg_TX_CTRL_STS_REG1_read", reg_value, A);
    return reg_value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config
 * ==================================================================================
 */
static INLINE void c8_field_GLBL_DRSTB_set( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_GLBL_DRSTB_set( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_GLBL_DRSTB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_GLBL_DRSTB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_GLBL_DRSTB_set", A, value );

    /* (0x00000000 bits 31) field GLBL_DRSTB of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    c8_reg_DIGITAL_RST_REG_field_set( b_ptr,
                                      h_ptr,
                                      A,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_GLBL_DRSTB_MSK,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_GLBL_DRSTB_OFF,
                                      value);
}

static INLINE UINT32 c8_field_GLBL_DRSTB_get( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_GLBL_DRSTB_get( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_GLBL_DRSTB_get", A, 7);
    /* (0x00000000 bits 31) field GLBL_DRSTB of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    reg_value = c8_reg_DIGITAL_RST_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_GLBL_DRSTB_MSK) >> CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_GLBL_DRSTB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_GLBL_DRSTB_get", A, value );

    return value;
}
static INLINE void c8_field_PMM_WRAP_RSTB_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_PMM_WRAP_RSTB_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PMM_WRAP_RSTB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_PMM_WRAP_RSTB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_PMM_WRAP_RSTB_set", A, value );

    /* (0x00000000 bits 16) field PMM_WRAP_RSTB of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    c8_reg_DIGITAL_RST_REG_field_set( b_ptr,
                                      h_ptr,
                                      A,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_PMM_WRAP_RSTB_MSK,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_PMM_WRAP_RSTB_OFF,
                                      value);
}

static INLINE UINT32 c8_field_PMM_WRAP_RSTB_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PMM_WRAP_RSTB_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PMM_WRAP_RSTB_get", A, 7);
    /* (0x00000000 bits 16) field PMM_WRAP_RSTB of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    reg_value = c8_reg_DIGITAL_RST_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_PMM_WRAP_RSTB_MSK) >> CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_PMM_WRAP_RSTB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PMM_WRAP_RSTB_get", A, value );

    return value;
}
static INLINE void c8_field_PLL_LOCK_DET_SRST_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_PLL_LOCK_DET_SRST_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PLL_LOCK_DET_SRST_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_PLL_LOCK_DET_SRST_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_PLL_LOCK_DET_SRST_set", A, value );

    /* (0x00000000 bits 15) field PLL_LOCK_DET_SRST of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    c8_reg_DIGITAL_RST_REG_field_set( b_ptr,
                                      h_ptr,
                                      A,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_PLL_LOCK_DET_SRST_MSK,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_PLL_LOCK_DET_SRST_OFF,
                                      value);
}

static INLINE UINT32 c8_field_PLL_LOCK_DET_SRST_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PLL_LOCK_DET_SRST_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PLL_LOCK_DET_SRST_get", A, 7);
    /* (0x00000000 bits 15) field PLL_LOCK_DET_SRST of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    reg_value = c8_reg_DIGITAL_RST_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_PLL_LOCK_DET_SRST_MSK) >> CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_PLL_LOCK_DET_SRST_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PLL_LOCK_DET_SRST_get", A, value );

    return value;
}
static INLINE void c8_field_PATT_MON_RSTB_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_PATT_MON_RSTB_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PATT_MON_RSTB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_PATT_MON_RSTB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_PATT_MON_RSTB_set", A, value );

    /* (0x00000000 bits 14) field PATT_MON_RSTB of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    c8_reg_DIGITAL_RST_REG_field_set( b_ptr,
                                      h_ptr,
                                      A,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_PATT_MON_RSTB_MSK,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_PATT_MON_RSTB_OFF,
                                      value);
}

static INLINE UINT32 c8_field_PATT_MON_RSTB_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PATT_MON_RSTB_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PATT_MON_RSTB_get", A, 7);
    /* (0x00000000 bits 14) field PATT_MON_RSTB of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    reg_value = c8_reg_DIGITAL_RST_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_PATT_MON_RSTB_MSK) >> CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_PATT_MON_RSTB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PATT_MON_RSTB_get", A, value );

    return value;
}
static INLINE void c8_field_PATT_GEN_RSTB_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_PATT_GEN_RSTB_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PATT_GEN_RSTB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_PATT_GEN_RSTB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_PATT_GEN_RSTB_set", A, value );

    /* (0x00000000 bits 13) field PATT_GEN_RSTB of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    c8_reg_DIGITAL_RST_REG_field_set( b_ptr,
                                      h_ptr,
                                      A,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_PATT_GEN_RSTB_MSK,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_PATT_GEN_RSTB_OFF,
                                      value);
}

static INLINE UINT32 c8_field_PATT_GEN_RSTB_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PATT_GEN_RSTB_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PATT_GEN_RSTB_get", A, 7);
    /* (0x00000000 bits 13) field PATT_GEN_RSTB of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    reg_value = c8_reg_DIGITAL_RST_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_PATT_GEN_RSTB_MSK) >> CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_PATT_GEN_RSTB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PATT_GEN_RSTB_get", A, value );

    return value;
}
static INLINE void c8_field_SIPO_BIST_RSTB_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_SIPO_BIST_RSTB_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SIPO_BIST_RSTB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_SIPO_BIST_RSTB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_SIPO_BIST_RSTB_set", A, value );

    /* (0x00000000 bits 12) field SIPO_BIST_RSTB of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    c8_reg_DIGITAL_RST_REG_field_set( b_ptr,
                                      h_ptr,
                                      A,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_SIPO_BIST_RSTB_MSK,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_SIPO_BIST_RSTB_OFF,
                                      value);
}

static INLINE UINT32 c8_field_SIPO_BIST_RSTB_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_SIPO_BIST_RSTB_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SIPO_BIST_RSTB_get", A, 7);
    /* (0x00000000 bits 12) field SIPO_BIST_RSTB of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    reg_value = c8_reg_DIGITAL_RST_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_SIPO_BIST_RSTB_MSK) >> CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_SIPO_BIST_RSTB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_SIPO_BIST_RSTB_get", A, value );

    return value;
}
static INLINE void c8_field_FIFO_HW_RESET_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_FIFO_HW_RESET_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_FIFO_HW_RESET_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_FIFO_HW_RESET_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_FIFO_HW_RESET_set", A, value );

    /* (0x00000000 bits 11) field FIFO_HW_RESET of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    c8_reg_DIGITAL_RST_REG_field_set( b_ptr,
                                      h_ptr,
                                      A,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_FIFO_HW_RESET_MSK,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_FIFO_HW_RESET_OFF,
                                      value);
}

static INLINE UINT32 c8_field_FIFO_HW_RESET_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_FIFO_HW_RESET_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_FIFO_HW_RESET_get", A, 7);
    /* (0x00000000 bits 11) field FIFO_HW_RESET of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    reg_value = c8_reg_DIGITAL_RST_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_FIFO_HW_RESET_MSK) >> CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_FIFO_HW_RESET_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_FIFO_HW_RESET_get", A, value );

    return value;
}
static INLINE void c8_field_DSKW_FIFO_RSTB_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_DSKW_FIFO_RSTB_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DSKW_FIFO_RSTB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_DSKW_FIFO_RSTB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_DSKW_FIFO_RSTB_set", A, value );

    /* (0x00000000 bits 10) field DSKW_FIFO_RSTB of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    c8_reg_DIGITAL_RST_REG_field_set( b_ptr,
                                      h_ptr,
                                      A,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_DSKW_FIFO_RSTB_MSK,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_DSKW_FIFO_RSTB_OFF,
                                      value);
}

static INLINE UINT32 c8_field_DSKW_FIFO_RSTB_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_DSKW_FIFO_RSTB_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DSKW_FIFO_RSTB_get", A, 7);
    /* (0x00000000 bits 10) field DSKW_FIFO_RSTB of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    reg_value = c8_reg_DIGITAL_RST_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_DSKW_FIFO_RSTB_MSK) >> CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_DSKW_FIFO_RSTB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_DSKW_FIFO_RSTB_get", A, value );

    return value;
}
static INLINE void c8_field_DSIPO_RSTB_set( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_DSIPO_RSTB_set( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DSIPO_RSTB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_DSIPO_RSTB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_DSIPO_RSTB_set", A, value );

    /* (0x00000000 bits 9) field DSIPO_RSTB of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    c8_reg_DIGITAL_RST_REG_field_set( b_ptr,
                                      h_ptr,
                                      A,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_DSIPO_RSTB_MSK,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_DSIPO_RSTB_OFF,
                                      value);
}

static INLINE UINT32 c8_field_DSIPO_RSTB_get( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_DSIPO_RSTB_get( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DSIPO_RSTB_get", A, 7);
    /* (0x00000000 bits 9) field DSIPO_RSTB of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    reg_value = c8_reg_DIGITAL_RST_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_DSIPO_RSTB_MSK) >> CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_DSIPO_RSTB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_DSIPO_RSTB_get", A, value );

    return value;
}
static INLINE void c8_field_DPISO_RSTB_set( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_DPISO_RSTB_set( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DPISO_RSTB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_DPISO_RSTB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_DPISO_RSTB_set", A, value );

    /* (0x00000000 bits 8) field DPISO_RSTB of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    c8_reg_DIGITAL_RST_REG_field_set( b_ptr,
                                      h_ptr,
                                      A,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_DPISO_RSTB_MSK,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_DPISO_RSTB_OFF,
                                      value);
}

static INLINE UINT32 c8_field_DPISO_RSTB_get( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_DPISO_RSTB_get( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DPISO_RSTB_get", A, 7);
    /* (0x00000000 bits 8) field DPISO_RSTB of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    reg_value = c8_reg_DIGITAL_RST_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_DPISO_RSTB_MSK) >> CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_DPISO_RSTB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_DPISO_RSTB_get", A, value );

    return value;
}
static INLINE void c8_field_CTRL_RSTB_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_CTRL_RSTB_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_CTRL_RSTB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_CTRL_RSTB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_CTRL_RSTB_set", A, value );

    /* (0x00000000 bits 7) field CTRL_RSTB of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    c8_reg_DIGITAL_RST_REG_field_set( b_ptr,
                                      h_ptr,
                                      A,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_CTRL_RSTB_MSK,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_CTRL_RSTB_OFF,
                                      value);
}

static INLINE UINT32 c8_field_CTRL_RSTB_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_CTRL_RSTB_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_CTRL_RSTB_get", A, 7);
    /* (0x00000000 bits 7) field CTRL_RSTB of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    reg_value = c8_reg_DIGITAL_RST_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_CTRL_RSTB_MSK) >> CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_CTRL_RSTB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_CTRL_RSTB_get", A, value );

    return value;
}
static INLINE void c8_field_MDSP_RSTB_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_MDSP_RSTB_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_MDSP_RSTB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_MDSP_RSTB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_MDSP_RSTB_set", A, value );

    /* (0x00000000 bits 6) field MDSP_RSTB of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    c8_reg_DIGITAL_RST_REG_field_set( b_ptr,
                                      h_ptr,
                                      A,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_MDSP_RSTB_MSK,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_MDSP_RSTB_OFF,
                                      value);
}

static INLINE UINT32 c8_field_MDSP_RSTB_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_MDSP_RSTB_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_MDSP_RSTB_get", A, 7);
    /* (0x00000000 bits 6) field MDSP_RSTB of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    reg_value = c8_reg_DIGITAL_RST_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_MDSP_RSTB_MSK) >> CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_MDSP_RSTB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_MDSP_RSTB_get", A, value );

    return value;
}
static INLINE void c8_field_ADPT_RSTB_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_ADPT_RSTB_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ADPT_RSTB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_ADPT_RSTB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_ADPT_RSTB_set", A, value );

    /* (0x00000000 bits 5) field ADPT_RSTB of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    c8_reg_DIGITAL_RST_REG_field_set( b_ptr,
                                      h_ptr,
                                      A,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_ADPT_RSTB_MSK,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_ADPT_RSTB_OFF,
                                      value);
}

static INLINE UINT32 c8_field_ADPT_RSTB_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ADPT_RSTB_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ADPT_RSTB_get", A, 7);
    /* (0x00000000 bits 5) field ADPT_RSTB of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    reg_value = c8_reg_DIGITAL_RST_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_ADPT_RSTB_MSK) >> CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_ADPT_RSTB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ADPT_RSTB_get", A, value );

    return value;
}
static INLINE void c8_field_DLOS_RSTB_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_DLOS_RSTB_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DLOS_RSTB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_DLOS_RSTB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_DLOS_RSTB_set", A, value );

    /* (0x00000000 bits 4) field DLOS_RSTB of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    c8_reg_DIGITAL_RST_REG_field_set( b_ptr,
                                      h_ptr,
                                      A,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_DLOS_RSTB_MSK,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_DLOS_RSTB_OFF,
                                      value);
}

static INLINE UINT32 c8_field_DLOS_RSTB_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_DLOS_RSTB_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DLOS_RSTB_get", A, 7);
    /* (0x00000000 bits 4) field DLOS_RSTB of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    reg_value = c8_reg_DIGITAL_RST_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_DLOS_RSTB_MSK) >> CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_DLOS_RSTB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_DLOS_RSTB_get", A, value );

    return value;
}
static INLINE void c8_field_DIAG_RSTB_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_DIAG_RSTB_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DIAG_RSTB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_DIAG_RSTB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_DIAG_RSTB_set", A, value );

    /* (0x00000000 bits 3) field DIAG_RSTB of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    c8_reg_DIGITAL_RST_REG_field_set( b_ptr,
                                      h_ptr,
                                      A,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_DIAG_RSTB_MSK,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_DIAG_RSTB_OFF,
                                      value);
}

static INLINE UINT32 c8_field_DIAG_RSTB_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_DIAG_RSTB_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DIAG_RSTB_get", A, 7);
    /* (0x00000000 bits 3) field DIAG_RSTB of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    reg_value = c8_reg_DIGITAL_RST_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_DIAG_RSTB_MSK) >> CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_DIAG_RSTB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_DIAG_RSTB_get", A, value );

    return value;
}
static INLINE void c8_field_SSI_RSTB_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_SSI_RSTB_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SSI_RSTB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_SSI_RSTB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_SSI_RSTB_set", A, value );

    /* (0x00000000 bits 2) field SSI_RSTB of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    c8_reg_DIGITAL_RST_REG_field_set( b_ptr,
                                      h_ptr,
                                      A,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_SSI_RSTB_MSK,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_SSI_RSTB_OFF,
                                      value);
}

static INLINE UINT32 c8_field_SSI_RSTB_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_SSI_RSTB_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SSI_RSTB_get", A, 7);
    /* (0x00000000 bits 2) field SSI_RSTB of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    reg_value = c8_reg_DIGITAL_RST_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_SSI_RSTB_MSK) >> CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_SSI_RSTB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_SSI_RSTB_get", A, value );

    return value;
}
static INLINE void c8_field_GCOC_RSTB_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_GCOC_RSTB_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_GCOC_RSTB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_GCOC_RSTB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_GCOC_RSTB_set", A, value );

    /* (0x00000000 bits 1) field GCOC_RSTB of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    c8_reg_DIGITAL_RST_REG_field_set( b_ptr,
                                      h_ptr,
                                      A,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_GCOC_RSTB_MSK,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_GCOC_RSTB_OFF,
                                      value);
}

static INLINE UINT32 c8_field_GCOC_RSTB_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_GCOC_RSTB_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_GCOC_RSTB_get", A, 7);
    /* (0x00000000 bits 1) field GCOC_RSTB of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    reg_value = c8_reg_DIGITAL_RST_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_GCOC_RSTB_MSK) >> CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_GCOC_RSTB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_GCOC_RSTB_get", A, value );

    return value;
}
static INLINE void c8_field_LOCK_DET_RSTB_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_LOCK_DET_RSTB_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_LOCK_DET_RSTB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_LOCK_DET_RSTB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_LOCK_DET_RSTB_set", A, value );

    /* (0x00000000 bits 0) field LOCK_DET_RSTB of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    c8_reg_DIGITAL_RST_REG_field_set( b_ptr,
                                      h_ptr,
                                      A,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_LOCK_DET_RSTB_MSK,
                                      CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_LOCK_DET_RSTB_OFF,
                                      value);
}

static INLINE UINT32 c8_field_LOCK_DET_RSTB_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_LOCK_DET_RSTB_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_LOCK_DET_RSTB_get", A, 7);
    /* (0x00000000 bits 0) field LOCK_DET_RSTB of register PMC_CNI_UNI_TXRX_REG_DIGITAL_RST_REG */
    reg_value = c8_reg_DIGITAL_RST_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_LOCK_DET_RSTB_MSK) >> CNI_UNI_TXRX_REG_DIGITAL_RST_REG_BIT_LOCK_DET_RSTB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_LOCK_DET_RSTB_get", A, value );

    return value;
}
static INLINE void c8_field_RXCPGEN_ARSTB_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RXCPGEN_ARSTB_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_ARSTB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RXCPGEN_ARSTB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RXCPGEN_ARSTB_set", A, value );

    /* (0x00000004 bits 4) field RXCPGEN_ARSTB of register PMC_CNI_UNI_TXRX_REG_MABC_RST_CNFG_REG */
    c8_reg_MABC_RST_CNFG_REG_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_MABC_RST_CNFG_REG_BIT_RXCPGEN_ARSTB_MSK,
                                        CNI_UNI_TXRX_REG_MABC_RST_CNFG_REG_BIT_RXCPGEN_ARSTB_OFF,
                                        value);
}

static INLINE UINT32 c8_field_RXCPGEN_ARSTB_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RXCPGEN_ARSTB_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_ARSTB_get", A, 7);
    /* (0x00000004 bits 4) field RXCPGEN_ARSTB of register PMC_CNI_UNI_TXRX_REG_MABC_RST_CNFG_REG */
    reg_value = c8_reg_MABC_RST_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_RST_CNFG_REG_BIT_RXCPGEN_ARSTB_MSK) >> CNI_UNI_TXRX_REG_MABC_RST_CNFG_REG_BIT_RXCPGEN_ARSTB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RXCPGEN_ARSTB_get", A, value );

    return value;
}
static INLINE void c8_field_RXCPGEN_RSTB_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RXCPGEN_RSTB_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_RSTB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RXCPGEN_RSTB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RXCPGEN_RSTB_set", A, value );

    /* (0x00000004 bits 3) field RXCPGEN_RSTB of register PMC_CNI_UNI_TXRX_REG_MABC_RST_CNFG_REG */
    c8_reg_MABC_RST_CNFG_REG_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_MABC_RST_CNFG_REG_BIT_RXCPGEN_RSTB_MSK,
                                        CNI_UNI_TXRX_REG_MABC_RST_CNFG_REG_BIT_RXCPGEN_RSTB_OFF,
                                        value);
}

static INLINE UINT32 c8_field_RXCPGEN_RSTB_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RXCPGEN_RSTB_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_RSTB_get", A, 7);
    /* (0x00000004 bits 3) field RXCPGEN_RSTB of register PMC_CNI_UNI_TXRX_REG_MABC_RST_CNFG_REG */
    reg_value = c8_reg_MABC_RST_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_RST_CNFG_REG_BIT_RXCPGEN_RSTB_MSK) >> CNI_UNI_TXRX_REG_MABC_RST_CNFG_REG_BIT_RXCPGEN_RSTB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RXCPGEN_RSTB_get", A, value );

    return value;
}
static INLINE void c8_field_PISO_RSTB_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_PISO_RSTB_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PISO_RSTB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_PISO_RSTB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_PISO_RSTB_set", A, value );

    /* (0x00000004 bits 2) field PISO_RSTB of register PMC_CNI_UNI_TXRX_REG_MABC_RST_CNFG_REG */
    c8_reg_MABC_RST_CNFG_REG_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_MABC_RST_CNFG_REG_BIT_PISO_RSTB_MSK,
                                        CNI_UNI_TXRX_REG_MABC_RST_CNFG_REG_BIT_PISO_RSTB_OFF,
                                        value);
}

static INLINE UINT32 c8_field_PISO_RSTB_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PISO_RSTB_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PISO_RSTB_get", A, 7);
    /* (0x00000004 bits 2) field PISO_RSTB of register PMC_CNI_UNI_TXRX_REG_MABC_RST_CNFG_REG */
    reg_value = c8_reg_MABC_RST_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_RST_CNFG_REG_BIT_PISO_RSTB_MSK) >> CNI_UNI_TXRX_REG_MABC_RST_CNFG_REG_BIT_PISO_RSTB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PISO_RSTB_get", A, value );

    return value;
}
static INLINE void c8_field_ADC_RSTB_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_ADC_RSTB_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ADC_RSTB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_ADC_RSTB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_ADC_RSTB_set", A, value );

    /* (0x00000004 bits 1) field ADC_RSTB of register PMC_CNI_UNI_TXRX_REG_MABC_RST_CNFG_REG */
    c8_reg_MABC_RST_CNFG_REG_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_MABC_RST_CNFG_REG_BIT_ADC_RSTB_MSK,
                                        CNI_UNI_TXRX_REG_MABC_RST_CNFG_REG_BIT_ADC_RSTB_OFF,
                                        value);
}

static INLINE UINT32 c8_field_ADC_RSTB_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ADC_RSTB_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ADC_RSTB_get", A, 7);
    /* (0x00000004 bits 1) field ADC_RSTB of register PMC_CNI_UNI_TXRX_REG_MABC_RST_CNFG_REG */
    reg_value = c8_reg_MABC_RST_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_RST_CNFG_REG_BIT_ADC_RSTB_MSK) >> CNI_UNI_TXRX_REG_MABC_RST_CNFG_REG_BIT_ADC_RSTB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ADC_RSTB_get", A, value );

    return value;
}
static INLINE void c8_field_ADC_DAC_RSTB_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_ADC_DAC_RSTB_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ADC_DAC_RSTB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_ADC_DAC_RSTB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_ADC_DAC_RSTB_set", A, value );

    /* (0x00000004 bits 0) field ADC_DAC_RSTB of register PMC_CNI_UNI_TXRX_REG_MABC_RST_CNFG_REG */
    c8_reg_MABC_RST_CNFG_REG_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_MABC_RST_CNFG_REG_BIT_ADC_DAC_RSTB_MSK,
                                        CNI_UNI_TXRX_REG_MABC_RST_CNFG_REG_BIT_ADC_DAC_RSTB_OFF,
                                        value);
}

static INLINE UINT32 c8_field_ADC_DAC_RSTB_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ADC_DAC_RSTB_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ADC_DAC_RSTB_get", A, 7);
    /* (0x00000004 bits 0) field ADC_DAC_RSTB of register PMC_CNI_UNI_TXRX_REG_MABC_RST_CNFG_REG */
    reg_value = c8_reg_MABC_RST_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_RST_CNFG_REG_BIT_ADC_DAC_RSTB_MSK) >> CNI_UNI_TXRX_REG_MABC_RST_CNFG_REG_BIT_ADC_DAC_RSTB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ADC_DAC_RSTB_get", A, value );

    return value;
}
static INLINE void c8_field_DGLT_PCLK_EN_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_DGLT_PCLK_EN_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DGLT_PCLK_EN_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_DGLT_PCLK_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_DGLT_PCLK_EN_set", A, value );

    /* (0x00000008 bits 3) field DGLT_PCLK_EN of register PMC_CNI_UNI_TXRX_REG_CLK_DGLCH_CNFG_REG */
    c8_reg_CLK_DGLCH_CNFG_REG_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_CLK_DGLCH_CNFG_REG_BIT_DGLT_PCLK_EN_MSK,
                                         CNI_UNI_TXRX_REG_CLK_DGLCH_CNFG_REG_BIT_DGLT_PCLK_EN_OFF,
                                         value);
}

static INLINE UINT32 c8_field_DGLT_PCLK_EN_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_DGLT_PCLK_EN_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DGLT_PCLK_EN_get", A, 7);
    /* (0x00000008 bits 3) field DGLT_PCLK_EN of register PMC_CNI_UNI_TXRX_REG_CLK_DGLCH_CNFG_REG */
    reg_value = c8_reg_CLK_DGLCH_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_CLK_DGLCH_CNFG_REG_BIT_DGLT_PCLK_EN_MSK) >> CNI_UNI_TXRX_REG_CLK_DGLCH_CNFG_REG_BIT_DGLT_PCLK_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_DGLT_PCLK_EN_get", A, value );

    return value;
}
static INLINE void c8_field_DGLT_TPCOUT_EN_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_DGLT_TPCOUT_EN_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DGLT_TPCOUT_EN_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_DGLT_TPCOUT_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_DGLT_TPCOUT_EN_set", A, value );

    /* (0x00000008 bits 2) field DGLT_TPCOUT_EN of register PMC_CNI_UNI_TXRX_REG_CLK_DGLCH_CNFG_REG */
    c8_reg_CLK_DGLCH_CNFG_REG_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_CLK_DGLCH_CNFG_REG_BIT_DGLT_TPCOUT_EN_MSK,
                                         CNI_UNI_TXRX_REG_CLK_DGLCH_CNFG_REG_BIT_DGLT_TPCOUT_EN_OFF,
                                         value);
}

static INLINE UINT32 c8_field_DGLT_TPCOUT_EN_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_DGLT_TPCOUT_EN_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DGLT_TPCOUT_EN_get", A, 7);
    /* (0x00000008 bits 2) field DGLT_TPCOUT_EN of register PMC_CNI_UNI_TXRX_REG_CLK_DGLCH_CNFG_REG */
    reg_value = c8_reg_CLK_DGLCH_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_CLK_DGLCH_CNFG_REG_BIT_DGLT_TPCOUT_EN_MSK) >> CNI_UNI_TXRX_REG_CLK_DGLCH_CNFG_REG_BIT_DGLT_TPCOUT_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_DGLT_TPCOUT_EN_get", A, value );

    return value;
}
static INLINE void c8_field_DGLT_BADJ_EN_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_DGLT_BADJ_EN_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DGLT_BADJ_EN_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_DGLT_BADJ_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_DGLT_BADJ_EN_set", A, value );

    /* (0x00000008 bits 1) field DGLT_BADJ_EN of register PMC_CNI_UNI_TXRX_REG_CLK_DGLCH_CNFG_REG */
    c8_reg_CLK_DGLCH_CNFG_REG_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_CLK_DGLCH_CNFG_REG_BIT_DGLT_BADJ_EN_MSK,
                                         CNI_UNI_TXRX_REG_CLK_DGLCH_CNFG_REG_BIT_DGLT_BADJ_EN_OFF,
                                         value);
}

static INLINE UINT32 c8_field_DGLT_BADJ_EN_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_DGLT_BADJ_EN_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DGLT_BADJ_EN_get", A, 7);
    /* (0x00000008 bits 1) field DGLT_BADJ_EN of register PMC_CNI_UNI_TXRX_REG_CLK_DGLCH_CNFG_REG */
    reg_value = c8_reg_CLK_DGLCH_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_CLK_DGLCH_CNFG_REG_BIT_DGLT_BADJ_EN_MSK) >> CNI_UNI_TXRX_REG_CLK_DGLCH_CNFG_REG_BIT_DGLT_BADJ_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_DGLT_BADJ_EN_get", A, value );

    return value;
}
static INLINE void c8_field_DGLCH_ADC_CLK_EN_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_DGLCH_ADC_CLK_EN_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DGLCH_ADC_CLK_EN_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_DGLCH_ADC_CLK_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_DGLCH_ADC_CLK_EN_set", A, value );

    /* (0x00000008 bits 0) field DGLCH_ADC_CLK_EN of register PMC_CNI_UNI_TXRX_REG_CLK_DGLCH_CNFG_REG */
    c8_reg_CLK_DGLCH_CNFG_REG_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_CLK_DGLCH_CNFG_REG_BIT_DGLCH_ADC_CLK_EN_MSK,
                                         CNI_UNI_TXRX_REG_CLK_DGLCH_CNFG_REG_BIT_DGLCH_ADC_CLK_EN_OFF,
                                         value);
}

static INLINE UINT32 c8_field_DGLCH_ADC_CLK_EN_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_DGLCH_ADC_CLK_EN_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DGLCH_ADC_CLK_EN_get", A, 7);
    /* (0x00000008 bits 0) field DGLCH_ADC_CLK_EN of register PMC_CNI_UNI_TXRX_REG_CLK_DGLCH_CNFG_REG */
    reg_value = c8_reg_CLK_DGLCH_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_CLK_DGLCH_CNFG_REG_BIT_DGLCH_ADC_CLK_EN_MSK) >> CNI_UNI_TXRX_REG_CLK_DGLCH_CNFG_REG_BIT_DGLCH_ADC_CLK_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_DGLCH_ADC_CLK_EN_get", A, value );

    return value;
}
static INLINE void c8_field_LOAD_CLK_CNTRS_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_LOAD_CLK_CNTRS_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_LOAD_CLK_CNTRS_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_LOAD_CLK_CNTRS_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_LOAD_CLK_CNTRS_set", A, value );

    /* (0x00000010 bits 8) field LOAD_CLK_CNTRS of register PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG1 */
    c8_reg_PLL_CNFG_REG1_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_PLL_CNFG_REG1_BIT_LOAD_CLK_CNTRS_MSK,
                                    CNI_UNI_TXRX_REG_PLL_CNFG_REG1_BIT_LOAD_CLK_CNTRS_OFF,
                                    value);
}

static INLINE UINT32 c8_field_LOAD_CLK_CNTRS_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_LOAD_CLK_CNTRS_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_LOAD_CLK_CNTRS_get", A, 7);
    /* (0x00000010 bits 8) field LOAD_CLK_CNTRS of register PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG1 */
    reg_value = c8_reg_PLL_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_PLL_CNFG_REG1_BIT_LOAD_CLK_CNTRS_MSK) >> CNI_UNI_TXRX_REG_PLL_CNFG_REG1_BIT_LOAD_CLK_CNTRS_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_LOAD_CLK_CNTRS_get", A, value );

    return value;
}
static INLINE void c8_field_RESET_HISTORY_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RESET_HISTORY_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RESET_HISTORY_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RESET_HISTORY_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RESET_HISTORY_set", A, value );

    /* (0x00000010 bits 4) field RESET_HISTORY of register PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG1 */
    c8_reg_PLL_CNFG_REG1_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_PLL_CNFG_REG1_BIT_RESET_HISTORY_MSK,
                                    CNI_UNI_TXRX_REG_PLL_CNFG_REG1_BIT_RESET_HISTORY_OFF,
                                    value);
}

static INLINE UINT32 c8_field_RESET_HISTORY_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RESET_HISTORY_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RESET_HISTORY_get", A, 7);
    /* (0x00000010 bits 4) field RESET_HISTORY of register PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG1 */
    reg_value = c8_reg_PLL_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_PLL_CNFG_REG1_BIT_RESET_HISTORY_MSK) >> CNI_UNI_TXRX_REG_PLL_CNFG_REG1_BIT_RESET_HISTORY_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RESET_HISTORY_get", A, value );

    return value;
}
static INLINE void c8_field_LOCK_PRECISION_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_LOCK_PRECISION_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_LOCK_PRECISION_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_LOCK_PRECISION_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_LOCK_PRECISION_set", A, value );

    /* (0x00000014 bits 3:0) field LOCK_PRECISION of register PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG2 */
    c8_reg_PLL_CNFG_REG2_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_PLL_CNFG_REG2_BIT_LOCK_PRECISION_MSK,
                                    CNI_UNI_TXRX_REG_PLL_CNFG_REG2_BIT_LOCK_PRECISION_OFF,
                                    value);
}

static INLINE UINT32 c8_field_LOCK_PRECISION_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_LOCK_PRECISION_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_LOCK_PRECISION_get", A, 7);
    /* (0x00000014 bits 3:0) field LOCK_PRECISION of register PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG2 */
    reg_value = c8_reg_PLL_CNFG_REG2_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_PLL_CNFG_REG2_BIT_LOCK_PRECISION_MSK) >> CNI_UNI_TXRX_REG_PLL_CNFG_REG2_BIT_LOCK_PRECISION_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_LOCK_PRECISION_get", A, value );

    return value;
}
static INLINE void c8_field_range_LOCK_PRECISION_set( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_LOCK_PRECISION_set( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_LOCK_PRECISION_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_LOCK_PRECISION_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_LOCK_PRECISION_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_LOCK_PRECISION_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000014 bits 3:0) field LOCK_PRECISION of register PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000014 bits 3:0) field LOCK_PRECISION of register PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG2 */
        c8_reg_PLL_CNFG_REG2_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        subfield_mask << (CNI_UNI_TXRX_REG_PLL_CNFG_REG2_BIT_LOCK_PRECISION_OFF + subfield_offset),
                                        CNI_UNI_TXRX_REG_PLL_CNFG_REG2_BIT_LOCK_PRECISION_OFF + subfield_offset,
                                        value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_LOCK_PRECISION_get( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_LOCK_PRECISION_get( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_LOCK_PRECISION_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_LOCK_PRECISION_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_LOCK_PRECISION_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000014 bits 3:0) field LOCK_PRECISION of register PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG2 */
    reg_value = c8_reg_PLL_CNFG_REG2_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_PLL_CNFG_REG2_BIT_LOCK_PRECISION_MSK)
                  >> CNI_UNI_TXRX_REG_PLL_CNFG_REG2_BIT_LOCK_PRECISION_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_PLL_CNFG_REG2_BIT_LOCK_PRECISION_MSK, CNI_UNI_TXRX_REG_PLL_CNFG_REG2_BIT_LOCK_PRECISION_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_LOCK_PRECISION_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_CLK_CNT_MAX_set( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_CLK_CNT_MAX_set( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_CLK_CNT_MAX_set", A, 7);
    if (value > 1048575)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_CLK_CNT_MAX_set", value, 1048575);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_CLK_CNT_MAX_set", A, value );

    /* (0x00000018 bits 19:0) field CLK_CNT_MAX of register PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG3 */
    c8_reg_PLL_CNFG_REG3_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_PLL_CNFG_REG3_BIT_CLK_CNT_MAX_MSK,
                                    CNI_UNI_TXRX_REG_PLL_CNFG_REG3_BIT_CLK_CNT_MAX_OFF,
                                    value);
}

static INLINE UINT32 c8_field_CLK_CNT_MAX_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_CLK_CNT_MAX_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_CLK_CNT_MAX_get", A, 7);
    /* (0x00000018 bits 19:0) field CLK_CNT_MAX of register PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG3 */
    reg_value = c8_reg_PLL_CNFG_REG3_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_PLL_CNFG_REG3_BIT_CLK_CNT_MAX_MSK) >> CNI_UNI_TXRX_REG_PLL_CNFG_REG3_BIT_CLK_CNT_MAX_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_CLK_CNT_MAX_get", A, value );

    return value;
}
static INLINE void c8_field_range_CLK_CNT_MAX_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_CLK_CNT_MAX_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit,
                                                   UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_CLK_CNT_MAX_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_CLK_CNT_MAX_set", stop_bit, start_bit );
    if (stop_bit > 19) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_CLK_CNT_MAX_set", stop_bit, 19 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_CLK_CNT_MAX_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000018 bits 19:0) field CLK_CNT_MAX of register PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG3 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 19) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 19;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000018 bits 19:0) field CLK_CNT_MAX of register PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG3 */
        c8_reg_PLL_CNFG_REG3_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        subfield_mask << (CNI_UNI_TXRX_REG_PLL_CNFG_REG3_BIT_CLK_CNT_MAX_OFF + subfield_offset),
                                        CNI_UNI_TXRX_REG_PLL_CNFG_REG3_BIT_CLK_CNT_MAX_OFF + subfield_offset,
                                        value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_CLK_CNT_MAX_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_CLK_CNT_MAX_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_CLK_CNT_MAX_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_CLK_CNT_MAX_get", stop_bit, start_bit );
    if (stop_bit > 19) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_CLK_CNT_MAX_get", stop_bit, 19 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 19) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 19;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000018 bits 19:0) field CLK_CNT_MAX of register PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG3 */
    reg_value = c8_reg_PLL_CNFG_REG3_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_PLL_CNFG_REG3_BIT_CLK_CNT_MAX_MSK)
                  >> CNI_UNI_TXRX_REG_PLL_CNFG_REG3_BIT_CLK_CNT_MAX_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_PLL_CNFG_REG3_BIT_CLK_CNT_MAX_MSK, CNI_UNI_TXRX_REG_PLL_CNFG_REG3_BIT_CLK_CNT_MAX_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_CLK_CNT_MAX_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_FAIL_CNT_MAX_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_FAIL_CNT_MAX_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_FAIL_CNT_MAX_set", A, 7);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_FAIL_CNT_MAX_set", value, 65535);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_FAIL_CNT_MAX_set", A, value );

    /* (0x0000001c bits 31:16) field FAIL_CNT_MAX of register PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG4 */
    c8_reg_PLL_CNFG_REG4_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_PLL_CNFG_REG4_BIT_FAIL_CNT_MAX_MSK,
                                    CNI_UNI_TXRX_REG_PLL_CNFG_REG4_BIT_FAIL_CNT_MAX_OFF,
                                    value);
}

static INLINE UINT32 c8_field_FAIL_CNT_MAX_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_FAIL_CNT_MAX_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_FAIL_CNT_MAX_get", A, 7);
    /* (0x0000001c bits 31:16) field FAIL_CNT_MAX of register PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG4 */
    reg_value = c8_reg_PLL_CNFG_REG4_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_PLL_CNFG_REG4_BIT_FAIL_CNT_MAX_MSK) >> CNI_UNI_TXRX_REG_PLL_CNFG_REG4_BIT_FAIL_CNT_MAX_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_FAIL_CNT_MAX_get", A, value );

    return value;
}
static INLINE void c8_field_range_FAIL_CNT_MAX_set( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_FAIL_CNT_MAX_set( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit,
                                                    UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_FAIL_CNT_MAX_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_FAIL_CNT_MAX_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_FAIL_CNT_MAX_set", stop_bit, 15 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_FAIL_CNT_MAX_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000001c bits 31:16) field FAIL_CNT_MAX of register PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000001c bits 31:16) field FAIL_CNT_MAX of register PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG4 */
        c8_reg_PLL_CNFG_REG4_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        subfield_mask << (CNI_UNI_TXRX_REG_PLL_CNFG_REG4_BIT_FAIL_CNT_MAX_OFF + subfield_offset),
                                        CNI_UNI_TXRX_REG_PLL_CNFG_REG4_BIT_FAIL_CNT_MAX_OFF + subfield_offset,
                                        value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_FAIL_CNT_MAX_get( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_FAIL_CNT_MAX_get( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_FAIL_CNT_MAX_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_FAIL_CNT_MAX_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_FAIL_CNT_MAX_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000001c bits 31:16) field FAIL_CNT_MAX of register PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG4 */
    reg_value = c8_reg_PLL_CNFG_REG4_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_PLL_CNFG_REG4_BIT_FAIL_CNT_MAX_MSK)
                  >> CNI_UNI_TXRX_REG_PLL_CNFG_REG4_BIT_FAIL_CNT_MAX_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_PLL_CNFG_REG4_BIT_FAIL_CNT_MAX_MSK, CNI_UNI_TXRX_REG_PLL_CNFG_REG4_BIT_FAIL_CNT_MAX_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_FAIL_CNT_MAX_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_PASS_CNT_MAX_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_PASS_CNT_MAX_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PASS_CNT_MAX_set", A, 7);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_PASS_CNT_MAX_set", value, 65535);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_PASS_CNT_MAX_set", A, value );

    /* (0x0000001c bits 15:0) field PASS_CNT_MAX of register PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG4 */
    c8_reg_PLL_CNFG_REG4_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_PLL_CNFG_REG4_BIT_PASS_CNT_MAX_MSK,
                                    CNI_UNI_TXRX_REG_PLL_CNFG_REG4_BIT_PASS_CNT_MAX_OFF,
                                    value);
}

static INLINE UINT32 c8_field_PASS_CNT_MAX_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PASS_CNT_MAX_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PASS_CNT_MAX_get", A, 7);
    /* (0x0000001c bits 15:0) field PASS_CNT_MAX of register PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG4 */
    reg_value = c8_reg_PLL_CNFG_REG4_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_PLL_CNFG_REG4_BIT_PASS_CNT_MAX_MSK) >> CNI_UNI_TXRX_REG_PLL_CNFG_REG4_BIT_PASS_CNT_MAX_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PASS_CNT_MAX_get", A, value );

    return value;
}
static INLINE void c8_field_range_PASS_CNT_MAX_set( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_PASS_CNT_MAX_set( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit,
                                                    UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_PASS_CNT_MAX_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_PASS_CNT_MAX_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_PASS_CNT_MAX_set", stop_bit, 15 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_PASS_CNT_MAX_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000001c bits 15:0) field PASS_CNT_MAX of register PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000001c bits 15:0) field PASS_CNT_MAX of register PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG4 */
        c8_reg_PLL_CNFG_REG4_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        subfield_mask << (CNI_UNI_TXRX_REG_PLL_CNFG_REG4_BIT_PASS_CNT_MAX_OFF + subfield_offset),
                                        CNI_UNI_TXRX_REG_PLL_CNFG_REG4_BIT_PASS_CNT_MAX_OFF + subfield_offset,
                                        value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_PASS_CNT_MAX_get( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_PASS_CNT_MAX_get( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_PASS_CNT_MAX_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_PASS_CNT_MAX_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_PASS_CNT_MAX_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000001c bits 15:0) field PASS_CNT_MAX of register PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG4 */
    reg_value = c8_reg_PLL_CNFG_REG4_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_PLL_CNFG_REG4_BIT_PASS_CNT_MAX_MSK)
                  >> CNI_UNI_TXRX_REG_PLL_CNFG_REG4_BIT_PASS_CNT_MAX_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_PLL_CNFG_REG4_BIT_PASS_CNT_MAX_MSK, CNI_UNI_TXRX_REG_PLL_CNFG_REG4_BIT_PASS_CNT_MAX_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_PASS_CNT_MAX_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_LOCK_CNT_MAX_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_LOCK_CNT_MAX_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_LOCK_CNT_MAX_set", A, 7);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_LOCK_CNT_MAX_set", value, 255);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_LOCK_CNT_MAX_set", A, value );

    /* (0x00000020 bits 23:16) field LOCK_CNT_MAX of register PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG5 */
    c8_reg_PLL_CNFG_REG5_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_PLL_CNFG_REG5_BIT_LOCK_CNT_MAX_MSK,
                                    CNI_UNI_TXRX_REG_PLL_CNFG_REG5_BIT_LOCK_CNT_MAX_OFF,
                                    value);
}

static INLINE UINT32 c8_field_LOCK_CNT_MAX_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_LOCK_CNT_MAX_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_LOCK_CNT_MAX_get", A, 7);
    /* (0x00000020 bits 23:16) field LOCK_CNT_MAX of register PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG5 */
    reg_value = c8_reg_PLL_CNFG_REG5_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_PLL_CNFG_REG5_BIT_LOCK_CNT_MAX_MSK) >> CNI_UNI_TXRX_REG_PLL_CNFG_REG5_BIT_LOCK_CNT_MAX_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_LOCK_CNT_MAX_get", A, value );

    return value;
}
static INLINE void c8_field_range_LOCK_CNT_MAX_set( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_LOCK_CNT_MAX_set( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit,
                                                    UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_LOCK_CNT_MAX_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_LOCK_CNT_MAX_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_LOCK_CNT_MAX_set", stop_bit, 7 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_LOCK_CNT_MAX_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000020 bits 23:16) field LOCK_CNT_MAX of register PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG5 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000020 bits 23:16) field LOCK_CNT_MAX of register PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG5 */
        c8_reg_PLL_CNFG_REG5_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        subfield_mask << (CNI_UNI_TXRX_REG_PLL_CNFG_REG5_BIT_LOCK_CNT_MAX_OFF + subfield_offset),
                                        CNI_UNI_TXRX_REG_PLL_CNFG_REG5_BIT_LOCK_CNT_MAX_OFF + subfield_offset,
                                        value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_LOCK_CNT_MAX_get( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_LOCK_CNT_MAX_get( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_LOCK_CNT_MAX_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_LOCK_CNT_MAX_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_LOCK_CNT_MAX_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000020 bits 23:16) field LOCK_CNT_MAX of register PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG5 */
    reg_value = c8_reg_PLL_CNFG_REG5_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_PLL_CNFG_REG5_BIT_LOCK_CNT_MAX_MSK)
                  >> CNI_UNI_TXRX_REG_PLL_CNFG_REG5_BIT_LOCK_CNT_MAX_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_PLL_CNFG_REG5_BIT_LOCK_CNT_MAX_MSK, CNI_UNI_TXRX_REG_PLL_CNFG_REG5_BIT_LOCK_CNT_MAX_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_LOCK_CNT_MAX_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_MABC_INT_OVR_EN_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_MABC_INT_OVR_EN_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_MABC_INT_OVR_EN_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_MABC_INT_OVR_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_MABC_INT_OVR_EN_set", A, value );

    /* (0x0000002c bits 4) field MABC_INT_OVR_EN of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG1 */
    c8_reg_GCOC_CNFG_REG1_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     CNI_UNI_TXRX_REG_GCOC_CNFG_REG1_BIT_MABC_INT_OVR_EN_MSK,
                                     CNI_UNI_TXRX_REG_GCOC_CNFG_REG1_BIT_MABC_INT_OVR_EN_OFF,
                                     value);
}

static INLINE UINT32 c8_field_MABC_INT_OVR_EN_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_MABC_INT_OVR_EN_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_MABC_INT_OVR_EN_get", A, 7);
    /* (0x0000002c bits 4) field MABC_INT_OVR_EN of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG1 */
    reg_value = c8_reg_GCOC_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_GCOC_CNFG_REG1_BIT_MABC_INT_OVR_EN_MSK) >> CNI_UNI_TXRX_REG_GCOC_CNFG_REG1_BIT_MABC_INT_OVR_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_MABC_INT_OVR_EN_get", A, value );

    return value;
}
static INLINE void c8_field_OFFSET_EN_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_OFFSET_EN_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_OFFSET_EN_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_OFFSET_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_OFFSET_EN_set", A, value );

    /* (0x0000002c bits 3) field OFFSET_EN of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG1 */
    c8_reg_GCOC_CNFG_REG1_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     CNI_UNI_TXRX_REG_GCOC_CNFG_REG1_BIT_OFFSET_EN_MSK,
                                     CNI_UNI_TXRX_REG_GCOC_CNFG_REG1_BIT_OFFSET_EN_OFF,
                                     value);
}

static INLINE UINT32 c8_field_OFFSET_EN_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_OFFSET_EN_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_OFFSET_EN_get", A, 7);
    /* (0x0000002c bits 3) field OFFSET_EN of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG1 */
    reg_value = c8_reg_GCOC_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_GCOC_CNFG_REG1_BIT_OFFSET_EN_MSK) >> CNI_UNI_TXRX_REG_GCOC_CNFG_REG1_BIT_OFFSET_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_OFFSET_EN_get", A, value );

    return value;
}
static INLINE void c8_field_CALIB_PROG_EN_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_CALIB_PROG_EN_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_CALIB_PROG_EN_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_CALIB_PROG_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_CALIB_PROG_EN_set", A, value );

    /* (0x0000002c bits 2) field CALIB_PROG_EN of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG1 */
    c8_reg_GCOC_CNFG_REG1_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     CNI_UNI_TXRX_REG_GCOC_CNFG_REG1_BIT_CALIB_PROG_EN_MSK,
                                     CNI_UNI_TXRX_REG_GCOC_CNFG_REG1_BIT_CALIB_PROG_EN_OFF,
                                     value);
}

static INLINE UINT32 c8_field_CALIB_PROG_EN_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_CALIB_PROG_EN_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_CALIB_PROG_EN_get", A, 7);
    /* (0x0000002c bits 2) field CALIB_PROG_EN of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG1 */
    reg_value = c8_reg_GCOC_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_GCOC_CNFG_REG1_BIT_CALIB_PROG_EN_MSK) >> CNI_UNI_TXRX_REG_GCOC_CNFG_REG1_BIT_CALIB_PROG_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_CALIB_PROG_EN_get", A, value );

    return value;
}
static INLINE void c8_field_ADC_WR_OVR_set( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_ADC_WR_OVR_set( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ADC_WR_OVR_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_ADC_WR_OVR_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_ADC_WR_OVR_set", A, value );

    /* (0x0000002c bits 1) field ADC_WR_OVR of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG1 */
    c8_reg_GCOC_CNFG_REG1_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     CNI_UNI_TXRX_REG_GCOC_CNFG_REG1_BIT_ADC_WR_OVR_MSK,
                                     CNI_UNI_TXRX_REG_GCOC_CNFG_REG1_BIT_ADC_WR_OVR_OFF,
                                     value);
}

static INLINE UINT32 c8_field_ADC_WR_OVR_get( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ADC_WR_OVR_get( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ADC_WR_OVR_get", A, 7);
    /* (0x0000002c bits 1) field ADC_WR_OVR of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG1 */
    reg_value = c8_reg_GCOC_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_GCOC_CNFG_REG1_BIT_ADC_WR_OVR_MSK) >> CNI_UNI_TXRX_REG_GCOC_CNFG_REG1_BIT_ADC_WR_OVR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ADC_WR_OVR_get", A, value );

    return value;
}
static INLINE void c8_field_CALIB_set( c8_buffer_t *b_ptr,
                                       c8_handle_t *h_ptr,
                                       UINT32 A,
                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_CALIB_set( c8_buffer_t *b_ptr,
                                       c8_handle_t *h_ptr,
                                       UINT32 A,
                                       UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_CALIB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_CALIB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_CALIB_set", A, value );

    /* (0x0000002c bits 0) field CALIB of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG1 */
    c8_reg_GCOC_CNFG_REG1_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     CNI_UNI_TXRX_REG_GCOC_CNFG_REG1_BIT_CALIB_MSK,
                                     CNI_UNI_TXRX_REG_GCOC_CNFG_REG1_BIT_CALIB_OFF,
                                     value);
}

static INLINE UINT32 c8_field_CALIB_get( c8_buffer_t *b_ptr,
                                         c8_handle_t *h_ptr,
                                         UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_CALIB_get( c8_buffer_t *b_ptr,
                                         c8_handle_t *h_ptr,
                                         UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_CALIB_get", A, 7);
    /* (0x0000002c bits 0) field CALIB of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG1 */
    reg_value = c8_reg_GCOC_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_GCOC_CNFG_REG1_BIT_CALIB_MSK) >> CNI_UNI_TXRX_REG_GCOC_CNFG_REG1_BIT_CALIB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_CALIB_get", A, value );

    return value;
}
static INLINE void c8_field_ACC_DELAY_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_ACC_DELAY_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ACC_DELAY_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_ACC_DELAY_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_ACC_DELAY_set", A, value );

    /* (0x00000030 bits 13:10) field ACC_DELAY of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG2 */
    c8_reg_GCOC_CNFG_REG2_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     CNI_UNI_TXRX_REG_GCOC_CNFG_REG2_BIT_ACC_DELAY_MSK,
                                     CNI_UNI_TXRX_REG_GCOC_CNFG_REG2_BIT_ACC_DELAY_OFF,
                                     value);
}

static INLINE UINT32 c8_field_ACC_DELAY_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ACC_DELAY_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ACC_DELAY_get", A, 7);
    /* (0x00000030 bits 13:10) field ACC_DELAY of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG2 */
    reg_value = c8_reg_GCOC_CNFG_REG2_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_GCOC_CNFG_REG2_BIT_ACC_DELAY_MSK) >> CNI_UNI_TXRX_REG_GCOC_CNFG_REG2_BIT_ACC_DELAY_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ACC_DELAY_get", A, value );

    return value;
}
static INLINE void c8_field_range_ACC_DELAY_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_ACC_DELAY_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit,
                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_ACC_DELAY_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_ACC_DELAY_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_ACC_DELAY_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_ACC_DELAY_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000030 bits 13:10) field ACC_DELAY of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000030 bits 13:10) field ACC_DELAY of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG2 */
        c8_reg_GCOC_CNFG_REG2_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         subfield_mask << (CNI_UNI_TXRX_REG_GCOC_CNFG_REG2_BIT_ACC_DELAY_OFF + subfield_offset),
                                         CNI_UNI_TXRX_REG_GCOC_CNFG_REG2_BIT_ACC_DELAY_OFF + subfield_offset,
                                         value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_ACC_DELAY_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_ACC_DELAY_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_ACC_DELAY_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_ACC_DELAY_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_ACC_DELAY_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000030 bits 13:10) field ACC_DELAY of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG2 */
    reg_value = c8_reg_GCOC_CNFG_REG2_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_GCOC_CNFG_REG2_BIT_ACC_DELAY_MSK)
                  >> CNI_UNI_TXRX_REG_GCOC_CNFG_REG2_BIT_ACC_DELAY_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_GCOC_CNFG_REG2_BIT_ACC_DELAY_MSK, CNI_UNI_TXRX_REG_GCOC_CNFG_REG2_BIT_ACC_DELAY_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_ACC_DELAY_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_DAC_DELAY_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_DAC_DELAY_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DAC_DELAY_set", A, 7);
    if (value > 1023)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_DAC_DELAY_set", value, 1023);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_DAC_DELAY_set", A, value );

    /* (0x00000030 bits 9:0) field DAC_DELAY of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG2 */
    c8_reg_GCOC_CNFG_REG2_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     CNI_UNI_TXRX_REG_GCOC_CNFG_REG2_BIT_DAC_DELAY_MSK,
                                     CNI_UNI_TXRX_REG_GCOC_CNFG_REG2_BIT_DAC_DELAY_OFF,
                                     value);
}

static INLINE UINT32 c8_field_DAC_DELAY_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_DAC_DELAY_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DAC_DELAY_get", A, 7);
    /* (0x00000030 bits 9:0) field DAC_DELAY of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG2 */
    reg_value = c8_reg_GCOC_CNFG_REG2_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_GCOC_CNFG_REG2_BIT_DAC_DELAY_MSK) >> CNI_UNI_TXRX_REG_GCOC_CNFG_REG2_BIT_DAC_DELAY_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_DAC_DELAY_get", A, value );

    return value;
}
static INLINE void c8_field_range_DAC_DELAY_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_DAC_DELAY_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit,
                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_DAC_DELAY_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_DAC_DELAY_set", stop_bit, start_bit );
    if (stop_bit > 9) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_DAC_DELAY_set", stop_bit, 9 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_DAC_DELAY_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000030 bits 9:0) field DAC_DELAY of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 9) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 9;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000030 bits 9:0) field DAC_DELAY of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG2 */
        c8_reg_GCOC_CNFG_REG2_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         subfield_mask << (CNI_UNI_TXRX_REG_GCOC_CNFG_REG2_BIT_DAC_DELAY_OFF + subfield_offset),
                                         CNI_UNI_TXRX_REG_GCOC_CNFG_REG2_BIT_DAC_DELAY_OFF + subfield_offset,
                                         value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_DAC_DELAY_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_DAC_DELAY_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_DAC_DELAY_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_DAC_DELAY_get", stop_bit, start_bit );
    if (stop_bit > 9) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_DAC_DELAY_get", stop_bit, 9 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 9) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 9;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000030 bits 9:0) field DAC_DELAY of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG2 */
    reg_value = c8_reg_GCOC_CNFG_REG2_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_GCOC_CNFG_REG2_BIT_DAC_DELAY_MSK)
                  >> CNI_UNI_TXRX_REG_GCOC_CNFG_REG2_BIT_DAC_DELAY_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_GCOC_CNFG_REG2_BIT_DAC_DELAY_MSK, CNI_UNI_TXRX_REG_GCOC_CNFG_REG2_BIT_DAC_DELAY_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_DAC_DELAY_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_THR_MAP_set( c8_buffer_t *b_ptr,
                                         c8_handle_t *h_ptr,
                                         UINT32 A,
                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_THR_MAP_set( c8_buffer_t *b_ptr,
                                         c8_handle_t *h_ptr,
                                         UINT32 A,
                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_THR_MAP_set", A, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_THR_MAP_set", A, value );

    /* (0x00000034 bits 31:0) field THR_MAP of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG3 */
    c8_reg_GCOC_CNFG_REG3_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     CNI_UNI_TXRX_REG_GCOC_CNFG_REG3_BIT_THR_MAP_MSK,
                                     CNI_UNI_TXRX_REG_GCOC_CNFG_REG3_BIT_THR_MAP_OFF,
                                     value);
}

static INLINE UINT32 c8_field_THR_MAP_get( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_THR_MAP_get( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_THR_MAP_get", A, 7);
    /* (0x00000034 bits 31:0) field THR_MAP of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG3 */
    reg_value = c8_reg_GCOC_CNFG_REG3_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_GCOC_CNFG_REG3_BIT_THR_MAP_MSK) >> CNI_UNI_TXRX_REG_GCOC_CNFG_REG3_BIT_THR_MAP_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_THR_MAP_get", A, value );

    return value;
}
static INLINE void c8_field_range_THR_MAP_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 start_bit,
                                               UINT32 stop_bit,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_THR_MAP_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 start_bit,
                                               UINT32 stop_bit,
                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_THR_MAP_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_THR_MAP_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_THR_MAP_set", stop_bit, 31 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_THR_MAP_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000034 bits 31:0) field THR_MAP of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG3 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000034 bits 31:0) field THR_MAP of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG3 */
        c8_reg_GCOC_CNFG_REG3_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         subfield_mask << (CNI_UNI_TXRX_REG_GCOC_CNFG_REG3_BIT_THR_MAP_OFF + subfield_offset),
                                         CNI_UNI_TXRX_REG_GCOC_CNFG_REG3_BIT_THR_MAP_OFF + subfield_offset,
                                         value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_THR_MAP_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_THR_MAP_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_THR_MAP_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_THR_MAP_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_THR_MAP_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000034 bits 31:0) field THR_MAP of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG3 */
    reg_value = c8_reg_GCOC_CNFG_REG3_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_GCOC_CNFG_REG3_BIT_THR_MAP_MSK)
                  >> CNI_UNI_TXRX_REG_GCOC_CNFG_REG3_BIT_THR_MAP_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_GCOC_CNFG_REG3_BIT_THR_MAP_MSK, CNI_UNI_TXRX_REG_GCOC_CNFG_REG3_BIT_THR_MAP_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_THR_MAP_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_ADC_A_OVR_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_ADC_A_OVR_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ADC_A_OVR_set", A, 7);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_ADC_A_OVR_set", value, 255);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_ADC_A_OVR_set", A, value );

    /* (0x00000038 bits 31:24) field ADC_A_OVR of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG4 */
    c8_reg_GCOC_CNFG_REG4_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     CNI_UNI_TXRX_REG_GCOC_CNFG_REG4_BIT_ADC_A_OVR_MSK,
                                     CNI_UNI_TXRX_REG_GCOC_CNFG_REG4_BIT_ADC_A_OVR_OFF,
                                     value);
}

static INLINE UINT32 c8_field_ADC_A_OVR_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ADC_A_OVR_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ADC_A_OVR_get", A, 7);
    /* (0x00000038 bits 31:24) field ADC_A_OVR of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG4 */
    reg_value = c8_reg_GCOC_CNFG_REG4_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_GCOC_CNFG_REG4_BIT_ADC_A_OVR_MSK) >> CNI_UNI_TXRX_REG_GCOC_CNFG_REG4_BIT_ADC_A_OVR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ADC_A_OVR_get", A, value );

    return value;
}
static INLINE void c8_field_range_ADC_A_OVR_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_ADC_A_OVR_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit,
                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_ADC_A_OVR_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_ADC_A_OVR_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_ADC_A_OVR_set", stop_bit, 7 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_ADC_A_OVR_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000038 bits 31:24) field ADC_A_OVR of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000038 bits 31:24) field ADC_A_OVR of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG4 */
        c8_reg_GCOC_CNFG_REG4_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         subfield_mask << (CNI_UNI_TXRX_REG_GCOC_CNFG_REG4_BIT_ADC_A_OVR_OFF + subfield_offset),
                                         CNI_UNI_TXRX_REG_GCOC_CNFG_REG4_BIT_ADC_A_OVR_OFF + subfield_offset,
                                         value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_ADC_A_OVR_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_ADC_A_OVR_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_ADC_A_OVR_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_ADC_A_OVR_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_ADC_A_OVR_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000038 bits 31:24) field ADC_A_OVR of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG4 */
    reg_value = c8_reg_GCOC_CNFG_REG4_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_GCOC_CNFG_REG4_BIT_ADC_A_OVR_MSK)
                  >> CNI_UNI_TXRX_REG_GCOC_CNFG_REG4_BIT_ADC_A_OVR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_GCOC_CNFG_REG4_BIT_ADC_A_OVR_MSK, CNI_UNI_TXRX_REG_GCOC_CNFG_REG4_BIT_ADC_A_OVR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_ADC_A_OVR_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_ADC_D_OVR_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_ADC_D_OVR_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ADC_D_OVR_set", A, 7);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_ADC_D_OVR_set", value, 255);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_ADC_D_OVR_set", A, value );

    /* (0x00000038 bits 23:16) field ADC_D_OVR of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG4 */
    c8_reg_GCOC_CNFG_REG4_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     CNI_UNI_TXRX_REG_GCOC_CNFG_REG4_BIT_ADC_D_OVR_MSK,
                                     CNI_UNI_TXRX_REG_GCOC_CNFG_REG4_BIT_ADC_D_OVR_OFF,
                                     value);
}

static INLINE UINT32 c8_field_ADC_D_OVR_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ADC_D_OVR_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ADC_D_OVR_get", A, 7);
    /* (0x00000038 bits 23:16) field ADC_D_OVR of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG4 */
    reg_value = c8_reg_GCOC_CNFG_REG4_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_GCOC_CNFG_REG4_BIT_ADC_D_OVR_MSK) >> CNI_UNI_TXRX_REG_GCOC_CNFG_REG4_BIT_ADC_D_OVR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ADC_D_OVR_get", A, value );

    return value;
}
static INLINE void c8_field_range_ADC_D_OVR_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_ADC_D_OVR_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit,
                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_ADC_D_OVR_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_ADC_D_OVR_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_ADC_D_OVR_set", stop_bit, 7 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_ADC_D_OVR_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000038 bits 23:16) field ADC_D_OVR of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000038 bits 23:16) field ADC_D_OVR of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG4 */
        c8_reg_GCOC_CNFG_REG4_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         subfield_mask << (CNI_UNI_TXRX_REG_GCOC_CNFG_REG4_BIT_ADC_D_OVR_OFF + subfield_offset),
                                         CNI_UNI_TXRX_REG_GCOC_CNFG_REG4_BIT_ADC_D_OVR_OFF + subfield_offset,
                                         value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_ADC_D_OVR_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_ADC_D_OVR_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_ADC_D_OVR_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_ADC_D_OVR_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_ADC_D_OVR_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000038 bits 23:16) field ADC_D_OVR of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG4 */
    reg_value = c8_reg_GCOC_CNFG_REG4_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_GCOC_CNFG_REG4_BIT_ADC_D_OVR_MSK)
                  >> CNI_UNI_TXRX_REG_GCOC_CNFG_REG4_BIT_ADC_D_OVR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_GCOC_CNFG_REG4_BIT_ADC_D_OVR_MSK, CNI_UNI_TXRX_REG_GCOC_CNFG_REG4_BIT_ADC_D_OVR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_ADC_D_OVR_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_N_ACCUM_CYCLES_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_N_ACCUM_CYCLES_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_N_ACCUM_CYCLES_set", A, 7);
    if (value > 16383)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_N_ACCUM_CYCLES_set", value, 16383);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_N_ACCUM_CYCLES_set", A, value );

    /* (0x00000038 bits 13:0) field N_ACCUM_CYCLES of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG4 */
    c8_reg_GCOC_CNFG_REG4_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     CNI_UNI_TXRX_REG_GCOC_CNFG_REG4_BIT_N_ACCUM_CYCLES_MSK,
                                     CNI_UNI_TXRX_REG_GCOC_CNFG_REG4_BIT_N_ACCUM_CYCLES_OFF,
                                     value);
}

static INLINE UINT32 c8_field_N_ACCUM_CYCLES_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_N_ACCUM_CYCLES_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_N_ACCUM_CYCLES_get", A, 7);
    /* (0x00000038 bits 13:0) field N_ACCUM_CYCLES of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG4 */
    reg_value = c8_reg_GCOC_CNFG_REG4_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_GCOC_CNFG_REG4_BIT_N_ACCUM_CYCLES_MSK) >> CNI_UNI_TXRX_REG_GCOC_CNFG_REG4_BIT_N_ACCUM_CYCLES_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_N_ACCUM_CYCLES_get", A, value );

    return value;
}
static INLINE void c8_field_range_N_ACCUM_CYCLES_set( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_N_ACCUM_CYCLES_set( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_N_ACCUM_CYCLES_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_N_ACCUM_CYCLES_set", stop_bit, start_bit );
    if (stop_bit > 13) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_N_ACCUM_CYCLES_set", stop_bit, 13 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_N_ACCUM_CYCLES_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000038 bits 13:0) field N_ACCUM_CYCLES of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 13) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 13;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000038 bits 13:0) field N_ACCUM_CYCLES of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG4 */
        c8_reg_GCOC_CNFG_REG4_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         subfield_mask << (CNI_UNI_TXRX_REG_GCOC_CNFG_REG4_BIT_N_ACCUM_CYCLES_OFF + subfield_offset),
                                         CNI_UNI_TXRX_REG_GCOC_CNFG_REG4_BIT_N_ACCUM_CYCLES_OFF + subfield_offset,
                                         value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_N_ACCUM_CYCLES_get( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_N_ACCUM_CYCLES_get( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_N_ACCUM_CYCLES_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_N_ACCUM_CYCLES_get", stop_bit, start_bit );
    if (stop_bit > 13) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_N_ACCUM_CYCLES_get", stop_bit, 13 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 13) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 13;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000038 bits 13:0) field N_ACCUM_CYCLES of register PMC_CNI_UNI_TXRX_REG_GCOC_CNFG_REG4 */
    reg_value = c8_reg_GCOC_CNFG_REG4_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_GCOC_CNFG_REG4_BIT_N_ACCUM_CYCLES_MSK)
                  >> CNI_UNI_TXRX_REG_GCOC_CNFG_REG4_BIT_N_ACCUM_CYCLES_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_GCOC_CNFG_REG4_BIT_N_ACCUM_CYCLES_MSK, CNI_UNI_TXRX_REG_GCOC_CNFG_REG4_BIT_N_ACCUM_CYCLES_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_N_ACCUM_CYCLES_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_DECIM_FACT_set( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_DECIM_FACT_set( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DECIM_FACT_set", A, 7);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_DECIM_FACT_set", value, 3);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_DECIM_FACT_set", A, value );

    /* (0x00000040 bits 1:0) field DECIM_FACT of register PMC_CNI_UNI_TXRX_REG_MDSP_CNFG_REG */
    c8_reg_MDSP_CNFG_REG_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_MDSP_CNFG_REG_BIT_DECIM_FACT_MSK,
                                    CNI_UNI_TXRX_REG_MDSP_CNFG_REG_BIT_DECIM_FACT_OFF,
                                    value);
}

static INLINE UINT32 c8_field_DECIM_FACT_get( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_DECIM_FACT_get( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DECIM_FACT_get", A, 7);
    /* (0x00000040 bits 1:0) field DECIM_FACT of register PMC_CNI_UNI_TXRX_REG_MDSP_CNFG_REG */
    reg_value = c8_reg_MDSP_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_MDSP_CNFG_REG_BIT_DECIM_FACT_MSK) >> CNI_UNI_TXRX_REG_MDSP_CNFG_REG_BIT_DECIM_FACT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_DECIM_FACT_get", A, value );

    return value;
}
static INLINE void c8_field_range_DECIM_FACT_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_DECIM_FACT_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit,
                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_DECIM_FACT_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_DECIM_FACT_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_DECIM_FACT_set", stop_bit, 1 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_DECIM_FACT_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000040 bits 1:0) field DECIM_FACT of register PMC_CNI_UNI_TXRX_REG_MDSP_CNFG_REG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000040 bits 1:0) field DECIM_FACT of register PMC_CNI_UNI_TXRX_REG_MDSP_CNFG_REG */
        c8_reg_MDSP_CNFG_REG_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        subfield_mask << (CNI_UNI_TXRX_REG_MDSP_CNFG_REG_BIT_DECIM_FACT_OFF + subfield_offset),
                                        CNI_UNI_TXRX_REG_MDSP_CNFG_REG_BIT_DECIM_FACT_OFF + subfield_offset,
                                        value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_DECIM_FACT_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_DECIM_FACT_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_DECIM_FACT_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_DECIM_FACT_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_DECIM_FACT_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000040 bits 1:0) field DECIM_FACT of register PMC_CNI_UNI_TXRX_REG_MDSP_CNFG_REG */
    reg_value = c8_reg_MDSP_CNFG_REG_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_MDSP_CNFG_REG_BIT_DECIM_FACT_MSK)
                  >> CNI_UNI_TXRX_REG_MDSP_CNFG_REG_BIT_DECIM_FACT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_MDSP_CNFG_REG_BIT_DECIM_FACT_MSK, CNI_UNI_TXRX_REG_MDSP_CNFG_REG_BIT_DECIM_FACT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_DECIM_FACT_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_RX_ADAPT_START_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RX_ADAPT_START_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RX_ADAPT_START_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RX_ADAPT_START_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RX_ADAPT_START_set", A, value );

    /* (0x00000044 bits 0) field RX_ADAPT_START of register PMC_CNI_UNI_TXRX_REG_CTRL_CNFG_REG */
    c8_reg_CTRL_CNFG_REG_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_CTRL_CNFG_REG_BIT_RX_ADAPT_START_MSK,
                                    CNI_UNI_TXRX_REG_CTRL_CNFG_REG_BIT_RX_ADAPT_START_OFF,
                                    value);
}

static INLINE UINT32 c8_field_RX_ADAPT_START_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RX_ADAPT_START_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RX_ADAPT_START_get", A, 7);
    /* (0x00000044 bits 0) field RX_ADAPT_START of register PMC_CNI_UNI_TXRX_REG_CTRL_CNFG_REG */
    reg_value = c8_reg_CTRL_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_CTRL_CNFG_REG_BIT_RX_ADAPT_START_MSK) >> CNI_UNI_TXRX_REG_CTRL_CNFG_REG_BIT_RX_ADAPT_START_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RX_ADAPT_START_get", A, value );

    return value;
}
static INLINE void c8_field_DLPBK_EN_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_DLPBK_EN_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DLPBK_EN_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_DLPBK_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_DLPBK_EN_set", A, value );

    /* (0x00000048 bits 0) field DLPBK_EN of register PMC_CNI_UNI_TXRX_REG_DLPBK_CNFG_REG */
    c8_reg_DLPBK_CNFG_REG_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     CNI_UNI_TXRX_REG_DLPBK_CNFG_REG_BIT_DLPBK_EN_MSK,
                                     CNI_UNI_TXRX_REG_DLPBK_CNFG_REG_BIT_DLPBK_EN_OFF,
                                     value);
}

static INLINE UINT32 c8_field_DLPBK_EN_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_DLPBK_EN_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DLPBK_EN_get", A, 7);
    /* (0x00000048 bits 0) field DLPBK_EN of register PMC_CNI_UNI_TXRX_REG_DLPBK_CNFG_REG */
    reg_value = c8_reg_DLPBK_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DLPBK_CNFG_REG_BIT_DLPBK_EN_MSK) >> CNI_UNI_TXRX_REG_DLPBK_CNFG_REG_BIT_DLPBK_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_DLPBK_EN_get", A, value );

    return value;
}
static INLINE void c8_field_SIPO_DIV_RATIO_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_SIPO_DIV_RATIO_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SIPO_DIV_RATIO_set", A, 7);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_SIPO_DIV_RATIO_set", value, 3);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_SIPO_DIV_RATIO_set", A, value );

    /* (0x00000050 bits 2:1) field SIPO_DIV_RATIO of register PMC_CNI_UNI_TXRX_REG_SIPO_CNFG_REG */
    c8_reg_SIPO_CNFG_REG_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_SIPO_CNFG_REG_BIT_SIPO_DIV_RATIO_MSK,
                                    CNI_UNI_TXRX_REG_SIPO_CNFG_REG_BIT_SIPO_DIV_RATIO_OFF,
                                    value);
}

static INLINE UINT32 c8_field_SIPO_DIV_RATIO_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_SIPO_DIV_RATIO_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SIPO_DIV_RATIO_get", A, 7);
    /* (0x00000050 bits 2:1) field SIPO_DIV_RATIO of register PMC_CNI_UNI_TXRX_REG_SIPO_CNFG_REG */
    reg_value = c8_reg_SIPO_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_SIPO_CNFG_REG_BIT_SIPO_DIV_RATIO_MSK) >> CNI_UNI_TXRX_REG_SIPO_CNFG_REG_BIT_SIPO_DIV_RATIO_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_SIPO_DIV_RATIO_get", A, value );

    return value;
}
static INLINE void c8_field_range_SIPO_DIV_RATIO_set( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_SIPO_DIV_RATIO_set( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_SIPO_DIV_RATIO_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_SIPO_DIV_RATIO_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_SIPO_DIV_RATIO_set", stop_bit, 1 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_SIPO_DIV_RATIO_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000050 bits 2:1) field SIPO_DIV_RATIO of register PMC_CNI_UNI_TXRX_REG_SIPO_CNFG_REG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000050 bits 2:1) field SIPO_DIV_RATIO of register PMC_CNI_UNI_TXRX_REG_SIPO_CNFG_REG */
        c8_reg_SIPO_CNFG_REG_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        subfield_mask << (CNI_UNI_TXRX_REG_SIPO_CNFG_REG_BIT_SIPO_DIV_RATIO_OFF + subfield_offset),
                                        CNI_UNI_TXRX_REG_SIPO_CNFG_REG_BIT_SIPO_DIV_RATIO_OFF + subfield_offset,
                                        value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_SIPO_DIV_RATIO_get( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_SIPO_DIV_RATIO_get( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_SIPO_DIV_RATIO_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_SIPO_DIV_RATIO_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_SIPO_DIV_RATIO_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000050 bits 2:1) field SIPO_DIV_RATIO of register PMC_CNI_UNI_TXRX_REG_SIPO_CNFG_REG */
    reg_value = c8_reg_SIPO_CNFG_REG_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_SIPO_CNFG_REG_BIT_SIPO_DIV_RATIO_MSK)
                  >> CNI_UNI_TXRX_REG_SIPO_CNFG_REG_BIT_SIPO_DIV_RATIO_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_SIPO_CNFG_REG_BIT_SIPO_DIV_RATIO_MSK, CNI_UNI_TXRX_REG_SIPO_CNFG_REG_BIT_SIPO_DIV_RATIO_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_SIPO_DIV_RATIO_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_SIPO_BUS_WIDTH_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_SIPO_BUS_WIDTH_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SIPO_BUS_WIDTH_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_SIPO_BUS_WIDTH_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_SIPO_BUS_WIDTH_set", A, value );

    /* (0x00000050 bits 0) field SIPO_BUS_WIDTH of register PMC_CNI_UNI_TXRX_REG_SIPO_CNFG_REG */
    c8_reg_SIPO_CNFG_REG_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_SIPO_CNFG_REG_BIT_SIPO_BUS_WIDTH_MSK,
                                    CNI_UNI_TXRX_REG_SIPO_CNFG_REG_BIT_SIPO_BUS_WIDTH_OFF,
                                    value);
}

static INLINE UINT32 c8_field_SIPO_BUS_WIDTH_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_SIPO_BUS_WIDTH_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SIPO_BUS_WIDTH_get", A, 7);
    /* (0x00000050 bits 0) field SIPO_BUS_WIDTH of register PMC_CNI_UNI_TXRX_REG_SIPO_CNFG_REG */
    reg_value = c8_reg_SIPO_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_SIPO_CNFG_REG_BIT_SIPO_BUS_WIDTH_MSK) >> CNI_UNI_TXRX_REG_SIPO_CNFG_REG_BIT_SIPO_BUS_WIDTH_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_SIPO_BUS_WIDTH_get", A, value );

    return value;
}
static INLINE void c8_field_PISO_DIV_RATIO_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_PISO_DIV_RATIO_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PISO_DIV_RATIO_set", A, 7);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_PISO_DIV_RATIO_set", value, 3);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_PISO_DIV_RATIO_set", A, value );

    /* (0x00000058 bits 2:1) field PISO_DIV_RATIO of register PMC_CNI_UNI_TXRX_REG_PISO_CNFG_REG */
    c8_reg_PISO_CNFG_REG_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_PISO_CNFG_REG_BIT_PISO_DIV_RATIO_MSK,
                                    CNI_UNI_TXRX_REG_PISO_CNFG_REG_BIT_PISO_DIV_RATIO_OFF,
                                    value);
}

static INLINE UINT32 c8_field_PISO_DIV_RATIO_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PISO_DIV_RATIO_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PISO_DIV_RATIO_get", A, 7);
    /* (0x00000058 bits 2:1) field PISO_DIV_RATIO of register PMC_CNI_UNI_TXRX_REG_PISO_CNFG_REG */
    reg_value = c8_reg_PISO_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_PISO_CNFG_REG_BIT_PISO_DIV_RATIO_MSK) >> CNI_UNI_TXRX_REG_PISO_CNFG_REG_BIT_PISO_DIV_RATIO_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PISO_DIV_RATIO_get", A, value );

    return value;
}
static INLINE void c8_field_range_PISO_DIV_RATIO_set( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_PISO_DIV_RATIO_set( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_PISO_DIV_RATIO_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_PISO_DIV_RATIO_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_PISO_DIV_RATIO_set", stop_bit, 1 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_PISO_DIV_RATIO_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000058 bits 2:1) field PISO_DIV_RATIO of register PMC_CNI_UNI_TXRX_REG_PISO_CNFG_REG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000058 bits 2:1) field PISO_DIV_RATIO of register PMC_CNI_UNI_TXRX_REG_PISO_CNFG_REG */
        c8_reg_PISO_CNFG_REG_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        subfield_mask << (CNI_UNI_TXRX_REG_PISO_CNFG_REG_BIT_PISO_DIV_RATIO_OFF + subfield_offset),
                                        CNI_UNI_TXRX_REG_PISO_CNFG_REG_BIT_PISO_DIV_RATIO_OFF + subfield_offset,
                                        value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_PISO_DIV_RATIO_get( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_PISO_DIV_RATIO_get( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_PISO_DIV_RATIO_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_PISO_DIV_RATIO_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_PISO_DIV_RATIO_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000058 bits 2:1) field PISO_DIV_RATIO of register PMC_CNI_UNI_TXRX_REG_PISO_CNFG_REG */
    reg_value = c8_reg_PISO_CNFG_REG_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_PISO_CNFG_REG_BIT_PISO_DIV_RATIO_MSK)
                  >> CNI_UNI_TXRX_REG_PISO_CNFG_REG_BIT_PISO_DIV_RATIO_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_PISO_CNFG_REG_BIT_PISO_DIV_RATIO_MSK, CNI_UNI_TXRX_REG_PISO_CNFG_REG_BIT_PISO_DIV_RATIO_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_PISO_DIV_RATIO_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_PISO_BUS_WIDTH_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_PISO_BUS_WIDTH_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PISO_BUS_WIDTH_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_PISO_BUS_WIDTH_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_PISO_BUS_WIDTH_set", A, value );

    /* (0x00000058 bits 0) field PISO_BUS_WIDTH of register PMC_CNI_UNI_TXRX_REG_PISO_CNFG_REG */
    c8_reg_PISO_CNFG_REG_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_PISO_CNFG_REG_BIT_PISO_BUS_WIDTH_MSK,
                                    CNI_UNI_TXRX_REG_PISO_CNFG_REG_BIT_PISO_BUS_WIDTH_OFF,
                                    value);
}

static INLINE UINT32 c8_field_PISO_BUS_WIDTH_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PISO_BUS_WIDTH_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PISO_BUS_WIDTH_get", A, 7);
    /* (0x00000058 bits 0) field PISO_BUS_WIDTH of register PMC_CNI_UNI_TXRX_REG_PISO_CNFG_REG */
    reg_value = c8_reg_PISO_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_PISO_CNFG_REG_BIT_PISO_BUS_WIDTH_MSK) >> CNI_UNI_TXRX_REG_PISO_CNFG_REG_BIT_PISO_BUS_WIDTH_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PISO_BUS_WIDTH_get", A, value );

    return value;
}
static INLINE void c8_field_RAM_EXT_INT_SEL_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RAM_EXT_INT_SEL_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RAM_EXT_INT_SEL_set", A, 7);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RAM_EXT_INT_SEL_set", value, 3);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RAM_EXT_INT_SEL_set", A, value );

    /* (0x00000060 bits 1:0) field RAM_EXT_INT_SEL of register PMC_CNI_UNI_TXRX_REG_EFUSE_CNFG_REG */
    c8_reg_EFUSE_CNFG_REG_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     CNI_UNI_TXRX_REG_EFUSE_CNFG_REG_BIT_RAM_EXT_INT_SEL_MSK,
                                     CNI_UNI_TXRX_REG_EFUSE_CNFG_REG_BIT_RAM_EXT_INT_SEL_OFF,
                                     value);
}

static INLINE UINT32 c8_field_RAM_EXT_INT_SEL_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RAM_EXT_INT_SEL_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RAM_EXT_INT_SEL_get", A, 7);
    /* (0x00000060 bits 1:0) field RAM_EXT_INT_SEL of register PMC_CNI_UNI_TXRX_REG_EFUSE_CNFG_REG */
    reg_value = c8_reg_EFUSE_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_EFUSE_CNFG_REG_BIT_RAM_EXT_INT_SEL_MSK) >> CNI_UNI_TXRX_REG_EFUSE_CNFG_REG_BIT_RAM_EXT_INT_SEL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RAM_EXT_INT_SEL_get", A, value );

    return value;
}
static INLINE void c8_field_range_RAM_EXT_INT_SEL_set( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_RAM_EXT_INT_SEL_set( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_RAM_EXT_INT_SEL_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_RAM_EXT_INT_SEL_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_RAM_EXT_INT_SEL_set", stop_bit, 1 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_RAM_EXT_INT_SEL_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000060 bits 1:0) field RAM_EXT_INT_SEL of register PMC_CNI_UNI_TXRX_REG_EFUSE_CNFG_REG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000060 bits 1:0) field RAM_EXT_INT_SEL of register PMC_CNI_UNI_TXRX_REG_EFUSE_CNFG_REG */
        c8_reg_EFUSE_CNFG_REG_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         subfield_mask << (CNI_UNI_TXRX_REG_EFUSE_CNFG_REG_BIT_RAM_EXT_INT_SEL_OFF + subfield_offset),
                                         CNI_UNI_TXRX_REG_EFUSE_CNFG_REG_BIT_RAM_EXT_INT_SEL_OFF + subfield_offset,
                                         value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_RAM_EXT_INT_SEL_get( c8_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_RAM_EXT_INT_SEL_get( c8_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_RAM_EXT_INT_SEL_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_RAM_EXT_INT_SEL_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_RAM_EXT_INT_SEL_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000060 bits 1:0) field RAM_EXT_INT_SEL of register PMC_CNI_UNI_TXRX_REG_EFUSE_CNFG_REG */
    reg_value = c8_reg_EFUSE_CNFG_REG_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_EFUSE_CNFG_REG_BIT_RAM_EXT_INT_SEL_MSK)
                  >> CNI_UNI_TXRX_REG_EFUSE_CNFG_REG_BIT_RAM_EXT_INT_SEL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_EFUSE_CNFG_REG_BIT_RAM_EXT_INT_SEL_MSK, CNI_UNI_TXRX_REG_EFUSE_CNFG_REG_BIT_RAM_EXT_INT_SEL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_RAM_EXT_INT_SEL_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_RD_PTR_SYNC_VAL_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RD_PTR_SYNC_VAL_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RD_PTR_SYNC_VAL_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RD_PTR_SYNC_VAL_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RD_PTR_SYNC_VAL_set", A, value );

    /* (0x0000006c bits 3:1) field RD_PTR_SYNC_VAL of register PMC_CNI_UNI_TXRX_REG_DESKEW_FIFO_CNFG_REG */
    c8_reg_DESKEW_FIFO_CNFG_REG_field_set( b_ptr,
                                           h_ptr,
                                           A,
                                           CNI_UNI_TXRX_REG_DESKEW_FIFO_CNFG_REG_BIT_RD_PTR_SYNC_VAL_MSK,
                                           CNI_UNI_TXRX_REG_DESKEW_FIFO_CNFG_REG_BIT_RD_PTR_SYNC_VAL_OFF,
                                           value);
}

static INLINE UINT32 c8_field_RD_PTR_SYNC_VAL_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RD_PTR_SYNC_VAL_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RD_PTR_SYNC_VAL_get", A, 7);
    /* (0x0000006c bits 3:1) field RD_PTR_SYNC_VAL of register PMC_CNI_UNI_TXRX_REG_DESKEW_FIFO_CNFG_REG */
    reg_value = c8_reg_DESKEW_FIFO_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DESKEW_FIFO_CNFG_REG_BIT_RD_PTR_SYNC_VAL_MSK) >> CNI_UNI_TXRX_REG_DESKEW_FIFO_CNFG_REG_BIT_RD_PTR_SYNC_VAL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RD_PTR_SYNC_VAL_get", A, value );

    return value;
}
static INLINE void c8_field_range_RD_PTR_SYNC_VAL_set( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_RD_PTR_SYNC_VAL_set( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_RD_PTR_SYNC_VAL_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_RD_PTR_SYNC_VAL_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_RD_PTR_SYNC_VAL_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_RD_PTR_SYNC_VAL_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000006c bits 3:1) field RD_PTR_SYNC_VAL of register PMC_CNI_UNI_TXRX_REG_DESKEW_FIFO_CNFG_REG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000006c bits 3:1) field RD_PTR_SYNC_VAL of register PMC_CNI_UNI_TXRX_REG_DESKEW_FIFO_CNFG_REG */
        c8_reg_DESKEW_FIFO_CNFG_REG_field_set( b_ptr,
                                               h_ptr,
                                               A,
                                               subfield_mask << (CNI_UNI_TXRX_REG_DESKEW_FIFO_CNFG_REG_BIT_RD_PTR_SYNC_VAL_OFF + subfield_offset),
                                               CNI_UNI_TXRX_REG_DESKEW_FIFO_CNFG_REG_BIT_RD_PTR_SYNC_VAL_OFF + subfield_offset,
                                               value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_RD_PTR_SYNC_VAL_get( c8_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_RD_PTR_SYNC_VAL_get( c8_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_RD_PTR_SYNC_VAL_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_RD_PTR_SYNC_VAL_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_RD_PTR_SYNC_VAL_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000006c bits 3:1) field RD_PTR_SYNC_VAL of register PMC_CNI_UNI_TXRX_REG_DESKEW_FIFO_CNFG_REG */
    reg_value = c8_reg_DESKEW_FIFO_CNFG_REG_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_DESKEW_FIFO_CNFG_REG_BIT_RD_PTR_SYNC_VAL_MSK)
                  >> CNI_UNI_TXRX_REG_DESKEW_FIFO_CNFG_REG_BIT_RD_PTR_SYNC_VAL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_DESKEW_FIFO_CNFG_REG_BIT_RD_PTR_SYNC_VAL_MSK, CNI_UNI_TXRX_REG_DESKEW_FIFO_CNFG_REG_BIT_RD_PTR_SYNC_VAL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_RD_PTR_SYNC_VAL_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_SYNC_set( c8_buffer_t *b_ptr,
                                      c8_handle_t *h_ptr,
                                      UINT32 A,
                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_SYNC_set( c8_buffer_t *b_ptr,
                                      c8_handle_t *h_ptr,
                                      UINT32 A,
                                      UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SYNC_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_SYNC_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_SYNC_set", A, value );

    /* (0x0000006c bits 0) field SYNC of register PMC_CNI_UNI_TXRX_REG_DESKEW_FIFO_CNFG_REG */
    c8_reg_DESKEW_FIFO_CNFG_REG_field_set( b_ptr,
                                           h_ptr,
                                           A,
                                           CNI_UNI_TXRX_REG_DESKEW_FIFO_CNFG_REG_BIT_SYNC_MSK,
                                           CNI_UNI_TXRX_REG_DESKEW_FIFO_CNFG_REG_BIT_SYNC_OFF,
                                           value);
}

static INLINE UINT32 c8_field_SYNC_get( c8_buffer_t *b_ptr,
                                        c8_handle_t *h_ptr,
                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_SYNC_get( c8_buffer_t *b_ptr,
                                        c8_handle_t *h_ptr,
                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SYNC_get", A, 7);
    /* (0x0000006c bits 0) field SYNC of register PMC_CNI_UNI_TXRX_REG_DESKEW_FIFO_CNFG_REG */
    reg_value = c8_reg_DESKEW_FIFO_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DESKEW_FIFO_CNFG_REG_BIT_SYNC_MSK) >> CNI_UNI_TXRX_REG_DESKEW_FIFO_CNFG_REG_BIT_SYNC_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_SYNC_get", A, value );

    return value;
}
static INLINE void c8_field_REL_AMP_set( c8_buffer_t *b_ptr,
                                         c8_handle_t *h_ptr,
                                         UINT32 A,
                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_REL_AMP_set( c8_buffer_t *b_ptr,
                                         c8_handle_t *h_ptr,
                                         UINT32 A,
                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_REL_AMP_set", A, 7);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_REL_AMP_set", value, 3);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_REL_AMP_set", A, value );

    /* (0x00000074 bits 31:30) field REL_AMP of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG1 */
    c8_reg_SSI_CNFG_REG1_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_REL_AMP_MSK,
                                    CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_REL_AMP_OFF,
                                    value);
}

static INLINE UINT32 c8_field_REL_AMP_get( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_REL_AMP_get( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_REL_AMP_get", A, 7);
    /* (0x00000074 bits 31:30) field REL_AMP of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG1 */
    reg_value = c8_reg_SSI_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_REL_AMP_MSK) >> CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_REL_AMP_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_REL_AMP_get", A, value );

    return value;
}
static INLINE void c8_field_range_REL_AMP_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 start_bit,
                                               UINT32 stop_bit,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_REL_AMP_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 start_bit,
                                               UINT32 stop_bit,
                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_REL_AMP_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_REL_AMP_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_REL_AMP_set", stop_bit, 1 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_REL_AMP_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000074 bits 31:30) field REL_AMP of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000074 bits 31:30) field REL_AMP of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG1 */
        c8_reg_SSI_CNFG_REG1_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        subfield_mask << (CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_REL_AMP_OFF + subfield_offset),
                                        CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_REL_AMP_OFF + subfield_offset,
                                        value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_REL_AMP_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_REL_AMP_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_REL_AMP_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_REL_AMP_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_REL_AMP_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000074 bits 31:30) field REL_AMP of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG1 */
    reg_value = c8_reg_SSI_CNFG_REG1_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_REL_AMP_MSK)
                  >> CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_REL_AMP_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_REL_AMP_MSK, CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_REL_AMP_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_REL_AMP_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_SSI_ACC_CNT_set( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_SSI_ACC_CNT_set( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SSI_ACC_CNT_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_SSI_ACC_CNT_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_SSI_ACC_CNT_set", A, value );

    /* (0x00000074 bits 27:24) field SSI_ACC_CNT of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG1 */
    c8_reg_SSI_CNFG_REG1_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_SSI_ACC_CNT_MSK,
                                    CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_SSI_ACC_CNT_OFF,
                                    value);
}

static INLINE UINT32 c8_field_SSI_ACC_CNT_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_SSI_ACC_CNT_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SSI_ACC_CNT_get", A, 7);
    /* (0x00000074 bits 27:24) field SSI_ACC_CNT of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG1 */
    reg_value = c8_reg_SSI_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_SSI_ACC_CNT_MSK) >> CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_SSI_ACC_CNT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_SSI_ACC_CNT_get", A, value );

    return value;
}
static INLINE void c8_field_range_SSI_ACC_CNT_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_SSI_ACC_CNT_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit,
                                                   UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_SSI_ACC_CNT_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_SSI_ACC_CNT_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_SSI_ACC_CNT_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_SSI_ACC_CNT_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000074 bits 27:24) field SSI_ACC_CNT of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000074 bits 27:24) field SSI_ACC_CNT of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG1 */
        c8_reg_SSI_CNFG_REG1_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        subfield_mask << (CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_SSI_ACC_CNT_OFF + subfield_offset),
                                        CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_SSI_ACC_CNT_OFF + subfield_offset,
                                        value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_SSI_ACC_CNT_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_SSI_ACC_CNT_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_SSI_ACC_CNT_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_SSI_ACC_CNT_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_SSI_ACC_CNT_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000074 bits 27:24) field SSI_ACC_CNT of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG1 */
    reg_value = c8_reg_SSI_CNFG_REG1_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_SSI_ACC_CNT_MSK)
                  >> CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_SSI_ACC_CNT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_SSI_ACC_CNT_MSK, CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_SSI_ACC_CNT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_SSI_ACC_CNT_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_SSI_LIMIT_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_SSI_LIMIT_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SSI_LIMIT_set", A, 7);
    if (value > 16383)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_SSI_LIMIT_set", value, 16383);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_SSI_LIMIT_set", A, value );

    /* (0x00000074 bits 23:10) field SSI_LIMIT of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG1 */
    c8_reg_SSI_CNFG_REG1_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_SSI_LIMIT_MSK,
                                    CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_SSI_LIMIT_OFF,
                                    value);
}

static INLINE UINT32 c8_field_SSI_LIMIT_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_SSI_LIMIT_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SSI_LIMIT_get", A, 7);
    /* (0x00000074 bits 23:10) field SSI_LIMIT of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG1 */
    reg_value = c8_reg_SSI_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_SSI_LIMIT_MSK) >> CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_SSI_LIMIT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_SSI_LIMIT_get", A, value );

    return value;
}
static INLINE void c8_field_range_SSI_LIMIT_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_SSI_LIMIT_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit,
                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_SSI_LIMIT_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_SSI_LIMIT_set", stop_bit, start_bit );
    if (stop_bit > 13) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_SSI_LIMIT_set", stop_bit, 13 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_SSI_LIMIT_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000074 bits 23:10) field SSI_LIMIT of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 13) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 13;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000074 bits 23:10) field SSI_LIMIT of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG1 */
        c8_reg_SSI_CNFG_REG1_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        subfield_mask << (CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_SSI_LIMIT_OFF + subfield_offset),
                                        CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_SSI_LIMIT_OFF + subfield_offset,
                                        value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_SSI_LIMIT_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_SSI_LIMIT_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_SSI_LIMIT_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_SSI_LIMIT_get", stop_bit, start_bit );
    if (stop_bit > 13) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_SSI_LIMIT_get", stop_bit, 13 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 13) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 13;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000074 bits 23:10) field SSI_LIMIT of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG1 */
    reg_value = c8_reg_SSI_CNFG_REG1_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_SSI_LIMIT_MSK)
                  >> CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_SSI_LIMIT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_SSI_LIMIT_MSK, CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_SSI_LIMIT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_SSI_LIMIT_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_SSI_OVR_EN_set( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_SSI_OVR_EN_set( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SSI_OVR_EN_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_SSI_OVR_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_SSI_OVR_EN_set", A, value );

    /* (0x00000074 bits 9) field SSI_OVR_EN of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG1 */
    c8_reg_SSI_CNFG_REG1_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_SSI_OVR_EN_MSK,
                                    CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_SSI_OVR_EN_OFF,
                                    value);
}

static INLINE UINT32 c8_field_SSI_OVR_EN_get( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_SSI_OVR_EN_get( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SSI_OVR_EN_get", A, 7);
    /* (0x00000074 bits 9) field SSI_OVR_EN of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG1 */
    reg_value = c8_reg_SSI_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_SSI_OVR_EN_MSK) >> CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_SSI_OVR_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_SSI_OVR_EN_get", A, value );

    return value;
}
static INLINE void c8_field_SSI_OVR_set( c8_buffer_t *b_ptr,
                                         c8_handle_t *h_ptr,
                                         UINT32 A,
                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_SSI_OVR_set( c8_buffer_t *b_ptr,
                                         c8_handle_t *h_ptr,
                                         UINT32 A,
                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SSI_OVR_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_SSI_OVR_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_SSI_OVR_set", A, value );

    /* (0x00000074 bits 8) field SSI_OVR of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG1 */
    c8_reg_SSI_CNFG_REG1_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_SSI_OVR_MSK,
                                    CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_SSI_OVR_OFF,
                                    value);
}

static INLINE UINT32 c8_field_SSI_OVR_get( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_SSI_OVR_get( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SSI_OVR_get", A, 7);
    /* (0x00000074 bits 8) field SSI_OVR of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG1 */
    reg_value = c8_reg_SSI_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_SSI_OVR_MSK) >> CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_SSI_OVR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_SSI_OVR_get", A, value );

    return value;
}
static INLINE void c8_field_THRESHOLD_OVR_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_THRESHOLD_OVR_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_THRESHOLD_OVR_set", A, 7);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_THRESHOLD_OVR_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_THRESHOLD_OVR_set", A, value );

    /* (0x00000074 bits 7:3) field THRESHOLD_OVR of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG1 */
    c8_reg_SSI_CNFG_REG1_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_THRESHOLD_OVR_MSK,
                                    CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_THRESHOLD_OVR_OFF,
                                    value);
}

static INLINE UINT32 c8_field_THRESHOLD_OVR_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_THRESHOLD_OVR_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_THRESHOLD_OVR_get", A, 7);
    /* (0x00000074 bits 7:3) field THRESHOLD_OVR of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG1 */
    reg_value = c8_reg_SSI_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_THRESHOLD_OVR_MSK) >> CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_THRESHOLD_OVR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_THRESHOLD_OVR_get", A, value );

    return value;
}
static INLINE void c8_field_range_THRESHOLD_OVR_set( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_THRESHOLD_OVR_set( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_THRESHOLD_OVR_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_THRESHOLD_OVR_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_THRESHOLD_OVR_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_THRESHOLD_OVR_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000074 bits 7:3) field THRESHOLD_OVR of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000074 bits 7:3) field THRESHOLD_OVR of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG1 */
        c8_reg_SSI_CNFG_REG1_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        subfield_mask << (CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_THRESHOLD_OVR_OFF + subfield_offset),
                                        CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_THRESHOLD_OVR_OFF + subfield_offset,
                                        value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_THRESHOLD_OVR_get( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_THRESHOLD_OVR_get( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_THRESHOLD_OVR_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_THRESHOLD_OVR_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_THRESHOLD_OVR_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000074 bits 7:3) field THRESHOLD_OVR of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG1 */
    reg_value = c8_reg_SSI_CNFG_REG1_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_THRESHOLD_OVR_MSK)
                  >> CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_THRESHOLD_OVR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_THRESHOLD_OVR_MSK, CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_THRESHOLD_OVR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_THRESHOLD_OVR_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_THRESHOLD_OVR_EN_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_THRESHOLD_OVR_EN_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_THRESHOLD_OVR_EN_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_THRESHOLD_OVR_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_THRESHOLD_OVR_EN_set", A, value );

    /* (0x00000074 bits 2) field THRESHOLD_OVR_EN of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG1 */
    c8_reg_SSI_CNFG_REG1_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_THRESHOLD_OVR_EN_MSK,
                                    CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_THRESHOLD_OVR_EN_OFF,
                                    value);
}

static INLINE UINT32 c8_field_THRESHOLD_OVR_EN_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_THRESHOLD_OVR_EN_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_THRESHOLD_OVR_EN_get", A, 7);
    /* (0x00000074 bits 2) field THRESHOLD_OVR_EN of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG1 */
    reg_value = c8_reg_SSI_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_THRESHOLD_OVR_EN_MSK) >> CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_THRESHOLD_OVR_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_THRESHOLD_OVR_EN_get", A, value );

    return value;
}
static INLINE void c8_field_ADJ_THR_RELEASES_SSI_set( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_ADJ_THR_RELEASES_SSI_set( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ADJ_THR_RELEASES_SSI_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_ADJ_THR_RELEASES_SSI_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_ADJ_THR_RELEASES_SSI_set", A, value );

    /* (0x00000074 bits 1) field ADJ_THR_RELEASES_SSI of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG1 */
    c8_reg_SSI_CNFG_REG1_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_ADJ_THR_RELEASES_SSI_MSK,
                                    CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_ADJ_THR_RELEASES_SSI_OFF,
                                    value);
}

static INLINE UINT32 c8_field_ADJ_THR_RELEASES_SSI_get( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ADJ_THR_RELEASES_SSI_get( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ADJ_THR_RELEASES_SSI_get", A, 7);
    /* (0x00000074 bits 1) field ADJ_THR_RELEASES_SSI of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG1 */
    reg_value = c8_reg_SSI_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_ADJ_THR_RELEASES_SSI_MSK) >> CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_ADJ_THR_RELEASES_SSI_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ADJ_THR_RELEASES_SSI_get", A, value );

    return value;
}
static INLINE void c8_field_ADJUST_THRESHOLD_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_ADJUST_THRESHOLD_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ADJUST_THRESHOLD_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_ADJUST_THRESHOLD_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_ADJUST_THRESHOLD_set", A, value );

    /* (0x00000074 bits 0) field ADJUST_THRESHOLD of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG1 */
    c8_reg_SSI_CNFG_REG1_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_ADJUST_THRESHOLD_MSK,
                                    CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_ADJUST_THRESHOLD_OFF,
                                    value);
}

static INLINE UINT32 c8_field_ADJUST_THRESHOLD_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ADJUST_THRESHOLD_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ADJUST_THRESHOLD_get", A, 7);
    /* (0x00000074 bits 0) field ADJUST_THRESHOLD of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG1 */
    reg_value = c8_reg_SSI_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_ADJUST_THRESHOLD_MSK) >> CNI_UNI_TXRX_REG_SSI_CNFG_REG1_BIT_ADJUST_THRESHOLD_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ADJUST_THRESHOLD_get", A, value );

    return value;
}
static INLINE void c8_field_MIN_THRESHOLD_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_MIN_THRESHOLD_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_MIN_THRESHOLD_set", A, 7);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_MIN_THRESHOLD_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_MIN_THRESHOLD_set", A, value );

    /* (0x00000078 bits 4:0) field MIN_THRESHOLD of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG2 */
    c8_reg_SSI_CNFG_REG2_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_SSI_CNFG_REG2_BIT_MIN_THRESHOLD_MSK,
                                    CNI_UNI_TXRX_REG_SSI_CNFG_REG2_BIT_MIN_THRESHOLD_OFF,
                                    value);
}

static INLINE UINT32 c8_field_MIN_THRESHOLD_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_MIN_THRESHOLD_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_MIN_THRESHOLD_get", A, 7);
    /* (0x00000078 bits 4:0) field MIN_THRESHOLD of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG2 */
    reg_value = c8_reg_SSI_CNFG_REG2_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_SSI_CNFG_REG2_BIT_MIN_THRESHOLD_MSK) >> CNI_UNI_TXRX_REG_SSI_CNFG_REG2_BIT_MIN_THRESHOLD_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_MIN_THRESHOLD_get", A, value );

    return value;
}
static INLINE void c8_field_range_MIN_THRESHOLD_set( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_MIN_THRESHOLD_set( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_MIN_THRESHOLD_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_MIN_THRESHOLD_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_MIN_THRESHOLD_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_MIN_THRESHOLD_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000078 bits 4:0) field MIN_THRESHOLD of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000078 bits 4:0) field MIN_THRESHOLD of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG2 */
        c8_reg_SSI_CNFG_REG2_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        subfield_mask << (CNI_UNI_TXRX_REG_SSI_CNFG_REG2_BIT_MIN_THRESHOLD_OFF + subfield_offset),
                                        CNI_UNI_TXRX_REG_SSI_CNFG_REG2_BIT_MIN_THRESHOLD_OFF + subfield_offset,
                                        value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_MIN_THRESHOLD_get( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_MIN_THRESHOLD_get( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_MIN_THRESHOLD_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_MIN_THRESHOLD_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_MIN_THRESHOLD_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000078 bits 4:0) field MIN_THRESHOLD of register PMC_CNI_UNI_TXRX_REG_SSI_CNFG_REG2 */
    reg_value = c8_reg_SSI_CNFG_REG2_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_SSI_CNFG_REG2_BIT_MIN_THRESHOLD_MSK)
                  >> CNI_UNI_TXRX_REG_SSI_CNFG_REG2_BIT_MIN_THRESHOLD_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_SSI_CNFG_REG2_BIT_MIN_THRESHOLD_MSK, CNI_UNI_TXRX_REG_SSI_CNFG_REG2_BIT_MIN_THRESHOLD_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_MIN_THRESHOLD_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_LOS_LIMIT_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_LOS_LIMIT_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_LOS_LIMIT_set", A, 7);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_LOS_LIMIT_set", value, 255);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_LOS_LIMIT_set", A, value );

    /* (0x00000080 bits 18:11) field LOS_LIMIT of register PMC_CNI_UNI_TXRX_REG_DLOS_CNFG_REG */
    c8_reg_DLOS_CNFG_REG_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_LOS_LIMIT_MSK,
                                    CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_LOS_LIMIT_OFF,
                                    value);
}

static INLINE UINT32 c8_field_LOS_LIMIT_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_LOS_LIMIT_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_LOS_LIMIT_get", A, 7);
    /* (0x00000080 bits 18:11) field LOS_LIMIT of register PMC_CNI_UNI_TXRX_REG_DLOS_CNFG_REG */
    reg_value = c8_reg_DLOS_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_LOS_LIMIT_MSK) >> CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_LOS_LIMIT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_LOS_LIMIT_get", A, value );

    return value;
}
static INLINE void c8_field_range_LOS_LIMIT_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_LOS_LIMIT_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit,
                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_LOS_LIMIT_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_LOS_LIMIT_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_LOS_LIMIT_set", stop_bit, 7 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_LOS_LIMIT_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000080 bits 18:11) field LOS_LIMIT of register PMC_CNI_UNI_TXRX_REG_DLOS_CNFG_REG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000080 bits 18:11) field LOS_LIMIT of register PMC_CNI_UNI_TXRX_REG_DLOS_CNFG_REG */
        c8_reg_DLOS_CNFG_REG_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        subfield_mask << (CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_LOS_LIMIT_OFF + subfield_offset),
                                        CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_LOS_LIMIT_OFF + subfield_offset,
                                        value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_LOS_LIMIT_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_LOS_LIMIT_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_LOS_LIMIT_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_LOS_LIMIT_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_LOS_LIMIT_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000080 bits 18:11) field LOS_LIMIT of register PMC_CNI_UNI_TXRX_REG_DLOS_CNFG_REG */
    reg_value = c8_reg_DLOS_CNFG_REG_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_LOS_LIMIT_MSK)
                  >> CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_LOS_LIMIT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_LOS_LIMIT_MSK, CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_LOS_LIMIT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_LOS_LIMIT_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_LOS_ACC_CNT_set( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_LOS_ACC_CNT_set( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_LOS_ACC_CNT_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_LOS_ACC_CNT_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_LOS_ACC_CNT_set", A, value );

    /* (0x00000080 bits 10:7) field LOS_ACC_CNT of register PMC_CNI_UNI_TXRX_REG_DLOS_CNFG_REG */
    c8_reg_DLOS_CNFG_REG_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_LOS_ACC_CNT_MSK,
                                    CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_LOS_ACC_CNT_OFF,
                                    value);
}

static INLINE UINT32 c8_field_LOS_ACC_CNT_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_LOS_ACC_CNT_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_LOS_ACC_CNT_get", A, 7);
    /* (0x00000080 bits 10:7) field LOS_ACC_CNT of register PMC_CNI_UNI_TXRX_REG_DLOS_CNFG_REG */
    reg_value = c8_reg_DLOS_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_LOS_ACC_CNT_MSK) >> CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_LOS_ACC_CNT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_LOS_ACC_CNT_get", A, value );

    return value;
}
static INLINE void c8_field_range_LOS_ACC_CNT_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_LOS_ACC_CNT_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit,
                                                   UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_LOS_ACC_CNT_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_LOS_ACC_CNT_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_LOS_ACC_CNT_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_LOS_ACC_CNT_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000080 bits 10:7) field LOS_ACC_CNT of register PMC_CNI_UNI_TXRX_REG_DLOS_CNFG_REG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000080 bits 10:7) field LOS_ACC_CNT of register PMC_CNI_UNI_TXRX_REG_DLOS_CNFG_REG */
        c8_reg_DLOS_CNFG_REG_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        subfield_mask << (CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_LOS_ACC_CNT_OFF + subfield_offset),
                                        CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_LOS_ACC_CNT_OFF + subfield_offset,
                                        value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_LOS_ACC_CNT_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_LOS_ACC_CNT_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_LOS_ACC_CNT_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_LOS_ACC_CNT_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_LOS_ACC_CNT_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000080 bits 10:7) field LOS_ACC_CNT of register PMC_CNI_UNI_TXRX_REG_DLOS_CNFG_REG */
    reg_value = c8_reg_DLOS_CNFG_REG_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_LOS_ACC_CNT_MSK)
                  >> CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_LOS_ACC_CNT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_LOS_ACC_CNT_MSK, CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_LOS_ACC_CNT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_LOS_ACC_CNT_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_AMP_THR_set( c8_buffer_t *b_ptr,
                                         c8_handle_t *h_ptr,
                                         UINT32 A,
                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_AMP_THR_set( c8_buffer_t *b_ptr,
                                         c8_handle_t *h_ptr,
                                         UINT32 A,
                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_AMP_THR_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_AMP_THR_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_AMP_THR_set", A, value );

    /* (0x00000080 bits 5:3) field AMP_THR of register PMC_CNI_UNI_TXRX_REG_DLOS_CNFG_REG */
    c8_reg_DLOS_CNFG_REG_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_AMP_THR_MSK,
                                    CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_AMP_THR_OFF,
                                    value);
}

static INLINE UINT32 c8_field_AMP_THR_get( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_AMP_THR_get( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_AMP_THR_get", A, 7);
    /* (0x00000080 bits 5:3) field AMP_THR of register PMC_CNI_UNI_TXRX_REG_DLOS_CNFG_REG */
    reg_value = c8_reg_DLOS_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_AMP_THR_MSK) >> CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_AMP_THR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_AMP_THR_get", A, value );

    return value;
}
static INLINE void c8_field_range_AMP_THR_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 start_bit,
                                               UINT32 stop_bit,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_AMP_THR_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 start_bit,
                                               UINT32 stop_bit,
                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_AMP_THR_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_AMP_THR_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_AMP_THR_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_AMP_THR_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000080 bits 5:3) field AMP_THR of register PMC_CNI_UNI_TXRX_REG_DLOS_CNFG_REG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000080 bits 5:3) field AMP_THR of register PMC_CNI_UNI_TXRX_REG_DLOS_CNFG_REG */
        c8_reg_DLOS_CNFG_REG_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        subfield_mask << (CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_AMP_THR_OFF + subfield_offset),
                                        CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_AMP_THR_OFF + subfield_offset,
                                        value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_AMP_THR_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_AMP_THR_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_AMP_THR_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_AMP_THR_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_AMP_THR_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000080 bits 5:3) field AMP_THR of register PMC_CNI_UNI_TXRX_REG_DLOS_CNFG_REG */
    reg_value = c8_reg_DLOS_CNFG_REG_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_AMP_THR_MSK)
                  >> CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_AMP_THR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_AMP_THR_MSK, CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_AMP_THR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_AMP_THR_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_DLOS_OVR_EN_set( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_DLOS_OVR_EN_set( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DLOS_OVR_EN_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_DLOS_OVR_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_DLOS_OVR_EN_set", A, value );

    /* (0x00000080 bits 2) field DLOS_OVR_EN of register PMC_CNI_UNI_TXRX_REG_DLOS_CNFG_REG */
    c8_reg_DLOS_CNFG_REG_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_DLOS_OVR_EN_MSK,
                                    CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_DLOS_OVR_EN_OFF,
                                    value);
}

static INLINE UINT32 c8_field_DLOS_OVR_EN_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_DLOS_OVR_EN_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DLOS_OVR_EN_get", A, 7);
    /* (0x00000080 bits 2) field DLOS_OVR_EN of register PMC_CNI_UNI_TXRX_REG_DLOS_CNFG_REG */
    reg_value = c8_reg_DLOS_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_DLOS_OVR_EN_MSK) >> CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_DLOS_OVR_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_DLOS_OVR_EN_get", A, value );

    return value;
}
static INLINE void c8_field_DLOS_OVR_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_DLOS_OVR_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DLOS_OVR_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_DLOS_OVR_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_DLOS_OVR_set", A, value );

    /* (0x00000080 bits 1) field DLOS_OVR of register PMC_CNI_UNI_TXRX_REG_DLOS_CNFG_REG */
    c8_reg_DLOS_CNFG_REG_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_DLOS_OVR_MSK,
                                    CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_DLOS_OVR_OFF,
                                    value);
}

static INLINE UINT32 c8_field_DLOS_OVR_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_DLOS_OVR_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DLOS_OVR_get", A, 7);
    /* (0x00000080 bits 1) field DLOS_OVR of register PMC_CNI_UNI_TXRX_REG_DLOS_CNFG_REG */
    reg_value = c8_reg_DLOS_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_DLOS_OVR_MSK) >> CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_DLOS_OVR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_DLOS_OVR_get", A, value );

    return value;
}
static INLINE void c8_field_ONE_COMP_EN_set( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_ONE_COMP_EN_set( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ONE_COMP_EN_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_ONE_COMP_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_ONE_COMP_EN_set", A, value );

    /* (0x00000080 bits 0) field ONE_COMP_EN of register PMC_CNI_UNI_TXRX_REG_DLOS_CNFG_REG */
    c8_reg_DLOS_CNFG_REG_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_ONE_COMP_EN_MSK,
                                    CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_ONE_COMP_EN_OFF,
                                    value);
}

static INLINE UINT32 c8_field_ONE_COMP_EN_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ONE_COMP_EN_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ONE_COMP_EN_get", A, 7);
    /* (0x00000080 bits 0) field ONE_COMP_EN of register PMC_CNI_UNI_TXRX_REG_DLOS_CNFG_REG */
    reg_value = c8_reg_DLOS_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_ONE_COMP_EN_MSK) >> CNI_UNI_TXRX_REG_DLOS_CNFG_REG_BIT_ONE_COMP_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ONE_COMP_EN_get", A, value );

    return value;
}
static INLINE void c8_field_ADC_MODE_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_ADC_MODE_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ADC_MODE_set", A, 7);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_ADC_MODE_set", value, 255);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_ADC_MODE_set", A, value );

    /* (0x00000090 bits 27:20) field ADC_MODE of register PMC_CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG */
    c8_reg_MABC_ADC_CNFG_REG_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_MODE_MSK,
                                        CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_MODE_OFF,
                                        value);
}

static INLINE UINT32 c8_field_ADC_MODE_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ADC_MODE_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ADC_MODE_get", A, 7);
    /* (0x00000090 bits 27:20) field ADC_MODE of register PMC_CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG */
    reg_value = c8_reg_MABC_ADC_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_MODE_MSK) >> CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_MODE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ADC_MODE_get", A, value );

    return value;
}
static INLINE void c8_field_range_ADC_MODE_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 start_bit,
                                                UINT32 stop_bit,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_ADC_MODE_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 start_bit,
                                                UINT32 stop_bit,
                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_ADC_MODE_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_ADC_MODE_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_ADC_MODE_set", stop_bit, 7 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_ADC_MODE_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000090 bits 27:20) field ADC_MODE of register PMC_CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000090 bits 27:20) field ADC_MODE of register PMC_CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG */
        c8_reg_MABC_ADC_CNFG_REG_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            subfield_mask << (CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_MODE_OFF + subfield_offset),
                                            CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_MODE_OFF + subfield_offset,
                                            value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_ADC_MODE_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_ADC_MODE_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_ADC_MODE_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_ADC_MODE_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_ADC_MODE_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000090 bits 27:20) field ADC_MODE of register PMC_CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG */
    reg_value = c8_reg_MABC_ADC_CNFG_REG_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_MODE_MSK)
                  >> CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_MODE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_MODE_MSK, CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_MODE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_ADC_MODE_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_ADC_ENB_set( c8_buffer_t *b_ptr,
                                         c8_handle_t *h_ptr,
                                         UINT32 A,
                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_ADC_ENB_set( c8_buffer_t *b_ptr,
                                         c8_handle_t *h_ptr,
                                         UINT32 A,
                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ADC_ENB_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_ADC_ENB_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_ADC_ENB_set", A, value );

    /* (0x00000090 bits 12:10) field ADC_ENB of register PMC_CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG */
    c8_reg_MABC_ADC_CNFG_REG_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_ENB_MSK,
                                        CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_ENB_OFF,
                                        value);
}

static INLINE UINT32 c8_field_ADC_ENB_get( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ADC_ENB_get( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ADC_ENB_get", A, 7);
    /* (0x00000090 bits 12:10) field ADC_ENB of register PMC_CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG */
    reg_value = c8_reg_MABC_ADC_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_ENB_MSK) >> CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_ENB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ADC_ENB_get", A, value );

    return value;
}
static INLINE void c8_field_range_ADC_ENB_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 start_bit,
                                               UINT32 stop_bit,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_ADC_ENB_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 start_bit,
                                               UINT32 stop_bit,
                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_ADC_ENB_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_ADC_ENB_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_ADC_ENB_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_ADC_ENB_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000090 bits 12:10) field ADC_ENB of register PMC_CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000090 bits 12:10) field ADC_ENB of register PMC_CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG */
        c8_reg_MABC_ADC_CNFG_REG_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            subfield_mask << (CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_ENB_OFF + subfield_offset),
                                            CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_ENB_OFF + subfield_offset,
                                            value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_ADC_ENB_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_ADC_ENB_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_ADC_ENB_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_ADC_ENB_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_ADC_ENB_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000090 bits 12:10) field ADC_ENB of register PMC_CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG */
    reg_value = c8_reg_MABC_ADC_CNFG_REG_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_ENB_MSK)
                  >> CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_ENB_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_ENB_MSK, CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_ENB_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_ADC_ENB_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_ADC_RD_set( c8_buffer_t *b_ptr,
                                        c8_handle_t *h_ptr,
                                        UINT32 A,
                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_ADC_RD_set( c8_buffer_t *b_ptr,
                                        c8_handle_t *h_ptr,
                                        UINT32 A,
                                        UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ADC_RD_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_ADC_RD_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_ADC_RD_set", A, value );

    /* (0x00000090 bits 4) field ADC_RD of register PMC_CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG */
    c8_reg_MABC_ADC_CNFG_REG_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_RD_MSK,
                                        CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_RD_OFF,
                                        value);
}

static INLINE UINT32 c8_field_ADC_RD_get( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ADC_RD_get( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ADC_RD_get", A, 7);
    /* (0x00000090 bits 4) field ADC_RD of register PMC_CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG */
    reg_value = c8_reg_MABC_ADC_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_RD_MSK) >> CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_RD_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ADC_RD_get", A, value );

    return value;
}
static INLINE void c8_field_ADC_DLB_EN_set( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_ADC_DLB_EN_set( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ADC_DLB_EN_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_ADC_DLB_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_ADC_DLB_EN_set", A, value );

    /* (0x00000090 bits 3) field ADC_DLB_EN of register PMC_CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG */
    c8_reg_MABC_ADC_CNFG_REG_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_DLB_EN_MSK,
                                        CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_DLB_EN_OFF,
                                        value);
}

static INLINE UINT32 c8_field_ADC_DLB_EN_get( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ADC_DLB_EN_get( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ADC_DLB_EN_get", A, 7);
    /* (0x00000090 bits 3) field ADC_DLB_EN of register PMC_CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG */
    reg_value = c8_reg_MABC_ADC_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_DLB_EN_MSK) >> CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_DLB_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ADC_DLB_EN_get", A, value );

    return value;
}
static INLINE void c8_field_ADC_DAC_ENB_set( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_ADC_DAC_ENB_set( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ADC_DAC_ENB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_ADC_DAC_ENB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_ADC_DAC_ENB_set", A, value );

    /* (0x00000090 bits 2) field ADC_DAC_ENB of register PMC_CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG */
    c8_reg_MABC_ADC_CNFG_REG_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_DAC_ENB_MSK,
                                        CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_DAC_ENB_OFF,
                                        value);
}

static INLINE UINT32 c8_field_ADC_DAC_ENB_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ADC_DAC_ENB_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ADC_DAC_ENB_get", A, 7);
    /* (0x00000090 bits 2) field ADC_DAC_ENB of register PMC_CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG */
    reg_value = c8_reg_MABC_ADC_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_DAC_ENB_MSK) >> CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_DAC_ENB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ADC_DAC_ENB_get", A, value );

    return value;
}
static INLINE void c8_field_ADC_BIST_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_ADC_BIST_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ADC_BIST_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_ADC_BIST_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_ADC_BIST_set", A, value );

    /* (0x00000090 bits 1) field ADC_BIST of register PMC_CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG */
    c8_reg_MABC_ADC_CNFG_REG_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_BIST_MSK,
                                        CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_BIST_OFF,
                                        value);
}

static INLINE UINT32 c8_field_ADC_BIST_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ADC_BIST_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ADC_BIST_get", A, 7);
    /* (0x00000090 bits 1) field ADC_BIST of register PMC_CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG */
    reg_value = c8_reg_MABC_ADC_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_BIST_MSK) >> CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_BIST_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ADC_BIST_get", A, value );

    return value;
}
static INLINE void c8_field_ADC_ATMSB_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_ADC_ATMSB_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ADC_ATMSB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_ADC_ATMSB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_ADC_ATMSB_set", A, value );

    /* (0x00000090 bits 0) field ADC_ATMSB of register PMC_CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG */
    c8_reg_MABC_ADC_CNFG_REG_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_ATMSB_MSK,
                                        CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_ATMSB_OFF,
                                        value);
}

static INLINE UINT32 c8_field_ADC_ATMSB_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ADC_ATMSB_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ADC_ATMSB_get", A, 7);
    /* (0x00000090 bits 0) field ADC_ATMSB of register PMC_CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG */
    reg_value = c8_reg_MABC_ADC_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_ATMSB_MSK) >> CNI_UNI_TXRX_REG_MABC_ADC_CNFG_REG_BIT_ADC_ATMSB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ADC_ATMSB_get", A, value );

    return value;
}
static INLINE void c8_field_BADJ_ENB_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_BADJ_ENB_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_BADJ_ENB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_BADJ_ENB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_BADJ_ENB_set", A, value );

    /* (0x00000094 bits 0) field BADJ_ENB of register PMC_CNI_UNI_TXRX_REG_MABC_CNFG_REG */
    c8_reg_MABC_CNFG_REG_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_MABC_CNFG_REG_BIT_BADJ_ENB_MSK,
                                    CNI_UNI_TXRX_REG_MABC_CNFG_REG_BIT_BADJ_ENB_OFF,
                                    value);
}

static INLINE UINT32 c8_field_BADJ_ENB_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_BADJ_ENB_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_BADJ_ENB_get", A, 7);
    /* (0x00000094 bits 0) field BADJ_ENB of register PMC_CNI_UNI_TXRX_REG_MABC_CNFG_REG */
    reg_value = c8_reg_MABC_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_CNFG_REG_BIT_BADJ_ENB_MSK) >> CNI_UNI_TXRX_REG_MABC_CNFG_REG_BIT_BADJ_ENB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_BADJ_ENB_get", A, value );

    return value;
}
static INLINE void c8_field_PISO_PBUS_WIDTH_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_PISO_PBUS_WIDTH_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PISO_PBUS_WIDTH_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_PISO_PBUS_WIDTH_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_PISO_PBUS_WIDTH_set", A, value );

    /* (0x00000098 bits 4) field PISO_PBUS_WIDTH of register PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG1 */
    c8_reg_MABC_PISO_CNFG_REG1_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG1_BIT_PISO_PBUS_WIDTH_MSK,
                                          CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG1_BIT_PISO_PBUS_WIDTH_OFF,
                                          value);
}

static INLINE UINT32 c8_field_PISO_PBUS_WIDTH_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PISO_PBUS_WIDTH_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PISO_PBUS_WIDTH_get", A, 7);
    /* (0x00000098 bits 4) field PISO_PBUS_WIDTH of register PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG1 */
    reg_value = c8_reg_MABC_PISO_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG1_BIT_PISO_PBUS_WIDTH_MSK) >> CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG1_BIT_PISO_PBUS_WIDTH_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PISO_PBUS_WIDTH_get", A, value );

    return value;
}
static INLINE void c8_field_PISO_ENB_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_PISO_ENB_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PISO_ENB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_PISO_ENB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_PISO_ENB_set", A, value );

    /* (0x00000098 bits 3) field PISO_ENB of register PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG1 */
    c8_reg_MABC_PISO_CNFG_REG1_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG1_BIT_PISO_ENB_MSK,
                                          CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG1_BIT_PISO_ENB_OFF,
                                          value);
}

static INLINE UINT32 c8_field_PISO_ENB_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PISO_ENB_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PISO_ENB_get", A, 7);
    /* (0x00000098 bits 3) field PISO_ENB of register PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG1 */
    reg_value = c8_reg_MABC_PISO_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG1_BIT_PISO_ENB_MSK) >> CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG1_BIT_PISO_ENB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PISO_ENB_get", A, value );

    return value;
}
static INLINE void c8_field_PISO_DLB_EN_set( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_PISO_DLB_EN_set( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PISO_DLB_EN_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_PISO_DLB_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_PISO_DLB_EN_set", A, value );

    /* (0x00000098 bits 2) field PISO_DLB_EN of register PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG1 */
    c8_reg_MABC_PISO_CNFG_REG1_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG1_BIT_PISO_DLB_EN_MSK,
                                          CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG1_BIT_PISO_DLB_EN_OFF,
                                          value);
}

static INLINE UINT32 c8_field_PISO_DLB_EN_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PISO_DLB_EN_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PISO_DLB_EN_get", A, 7);
    /* (0x00000098 bits 2) field PISO_DLB_EN of register PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG1 */
    reg_value = c8_reg_MABC_PISO_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG1_BIT_PISO_DLB_EN_MSK) >> CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG1_BIT_PISO_DLB_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PISO_DLB_EN_get", A, value );

    return value;
}
static INLINE void c8_field_PISO_DIV_ENABLE_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_PISO_DIV_ENABLE_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PISO_DIV_ENABLE_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_PISO_DIV_ENABLE_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_PISO_DIV_ENABLE_set", A, value );

    /* (0x00000098 bits 1) field PISO_DIV_ENABLE of register PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG1 */
    c8_reg_MABC_PISO_CNFG_REG1_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG1_BIT_PISO_DIV_ENABLE_MSK,
                                          CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG1_BIT_PISO_DIV_ENABLE_OFF,
                                          value);
}

static INLINE UINT32 c8_field_PISO_DIV_ENABLE_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PISO_DIV_ENABLE_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PISO_DIV_ENABLE_get", A, 7);
    /* (0x00000098 bits 1) field PISO_DIV_ENABLE of register PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG1 */
    reg_value = c8_reg_MABC_PISO_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG1_BIT_PISO_DIV_ENABLE_MSK) >> CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG1_BIT_PISO_DIV_ENABLE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PISO_DIV_ENABLE_get", A, value );

    return value;
}
static INLINE void c8_field_PISO_ALTPAT_EN_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_PISO_ALTPAT_EN_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PISO_ALTPAT_EN_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_PISO_ALTPAT_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_PISO_ALTPAT_EN_set", A, value );

    /* (0x00000098 bits 0) field PISO_ALTPAT_EN of register PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG1 */
    c8_reg_MABC_PISO_CNFG_REG1_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG1_BIT_PISO_ALTPAT_EN_MSK,
                                          CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG1_BIT_PISO_ALTPAT_EN_OFF,
                                          value);
}

static INLINE UINT32 c8_field_PISO_ALTPAT_EN_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PISO_ALTPAT_EN_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PISO_ALTPAT_EN_get", A, 7);
    /* (0x00000098 bits 0) field PISO_ALTPAT_EN of register PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG1 */
    reg_value = c8_reg_MABC_PISO_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG1_BIT_PISO_ALTPAT_EN_MSK) >> CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG1_BIT_PISO_ALTPAT_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PISO_ALTPAT_EN_get", A, value );

    return value;
}
static INLINE void c8_field_PISO_CTRL_7_5_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_PISO_CTRL_7_5_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PISO_CTRL_7_5_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_PISO_CTRL_7_5_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_PISO_CTRL_7_5_set", A, value );

    /* (0x0000009c bits 7:5) field PISO_CTRL_7_5 of register PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2 */
    c8_reg_MABC_PISO_CNFG_REG2_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_BIT_PISO_CTRL_7_5_MSK,
                                          CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_BIT_PISO_CTRL_7_5_OFF,
                                          value);
}

static INLINE UINT32 c8_field_PISO_CTRL_7_5_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PISO_CTRL_7_5_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PISO_CTRL_7_5_get", A, 7);
    /* (0x0000009c bits 7:5) field PISO_CTRL_7_5 of register PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2 */
    reg_value = c8_reg_MABC_PISO_CNFG_REG2_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_BIT_PISO_CTRL_7_5_MSK) >> CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_BIT_PISO_CTRL_7_5_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PISO_CTRL_7_5_get", A, value );

    return value;
}
static INLINE void c8_field_range_PISO_CTRL_7_5_set( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_PISO_CTRL_7_5_set( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_PISO_CTRL_7_5_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_PISO_CTRL_7_5_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_PISO_CTRL_7_5_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_PISO_CTRL_7_5_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000009c bits 7:5) field PISO_CTRL_7_5 of register PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000009c bits 7:5) field PISO_CTRL_7_5 of register PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2 */
        c8_reg_MABC_PISO_CNFG_REG2_field_set( b_ptr,
                                              h_ptr,
                                              A,
                                              subfield_mask << (CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_BIT_PISO_CTRL_7_5_OFF + subfield_offset),
                                              CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_BIT_PISO_CTRL_7_5_OFF + subfield_offset,
                                              value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_PISO_CTRL_7_5_get( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_PISO_CTRL_7_5_get( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_PISO_CTRL_7_5_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_PISO_CTRL_7_5_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_PISO_CTRL_7_5_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000009c bits 7:5) field PISO_CTRL_7_5 of register PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2 */
    reg_value = c8_reg_MABC_PISO_CNFG_REG2_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_BIT_PISO_CTRL_7_5_MSK)
                  >> CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_BIT_PISO_CTRL_7_5_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_BIT_PISO_CTRL_7_5_MSK, CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_BIT_PISO_CTRL_7_5_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_PISO_CTRL_7_5_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_PISO_CTRL_4_3_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_PISO_CTRL_4_3_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PISO_CTRL_4_3_set", A, 7);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_PISO_CTRL_4_3_set", value, 3);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_PISO_CTRL_4_3_set", A, value );

    /* (0x0000009c bits 4:3) field PISO_CTRL_4_3 of register PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2 */
    c8_reg_MABC_PISO_CNFG_REG2_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_BIT_PISO_CTRL_4_3_MSK,
                                          CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_BIT_PISO_CTRL_4_3_OFF,
                                          value);
}

static INLINE UINT32 c8_field_PISO_CTRL_4_3_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PISO_CTRL_4_3_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PISO_CTRL_4_3_get", A, 7);
    /* (0x0000009c bits 4:3) field PISO_CTRL_4_3 of register PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2 */
    reg_value = c8_reg_MABC_PISO_CNFG_REG2_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_BIT_PISO_CTRL_4_3_MSK) >> CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_BIT_PISO_CTRL_4_3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PISO_CTRL_4_3_get", A, value );

    return value;
}
static INLINE void c8_field_range_PISO_CTRL_4_3_set( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_PISO_CTRL_4_3_set( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_PISO_CTRL_4_3_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_PISO_CTRL_4_3_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_PISO_CTRL_4_3_set", stop_bit, 1 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_PISO_CTRL_4_3_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000009c bits 4:3) field PISO_CTRL_4_3 of register PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000009c bits 4:3) field PISO_CTRL_4_3 of register PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2 */
        c8_reg_MABC_PISO_CNFG_REG2_field_set( b_ptr,
                                              h_ptr,
                                              A,
                                              subfield_mask << (CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_BIT_PISO_CTRL_4_3_OFF + subfield_offset),
                                              CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_BIT_PISO_CTRL_4_3_OFF + subfield_offset,
                                              value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_PISO_CTRL_4_3_get( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_PISO_CTRL_4_3_get( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_PISO_CTRL_4_3_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_PISO_CTRL_4_3_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_PISO_CTRL_4_3_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000009c bits 4:3) field PISO_CTRL_4_3 of register PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2 */
    reg_value = c8_reg_MABC_PISO_CNFG_REG2_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_BIT_PISO_CTRL_4_3_MSK)
                  >> CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_BIT_PISO_CTRL_4_3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_BIT_PISO_CTRL_4_3_MSK, CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_BIT_PISO_CTRL_4_3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_PISO_CTRL_4_3_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_PISO_CTRL_2_set( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_PISO_CTRL_2_set( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PISO_CTRL_2_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_PISO_CTRL_2_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_PISO_CTRL_2_set", A, value );

    /* (0x0000009c bits 2) field PISO_CTRL_2 of register PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2 */
    c8_reg_MABC_PISO_CNFG_REG2_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_BIT_PISO_CTRL_2_MSK,
                                          CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_BIT_PISO_CTRL_2_OFF,
                                          value);
}

static INLINE UINT32 c8_field_PISO_CTRL_2_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PISO_CTRL_2_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PISO_CTRL_2_get", A, 7);
    /* (0x0000009c bits 2) field PISO_CTRL_2 of register PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2 */
    reg_value = c8_reg_MABC_PISO_CNFG_REG2_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_BIT_PISO_CTRL_2_MSK) >> CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_BIT_PISO_CTRL_2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PISO_CTRL_2_get", A, value );

    return value;
}
static INLINE void c8_field_PISO_CTRL_1_0_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_PISO_CTRL_1_0_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PISO_CTRL_1_0_set", A, 7);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_PISO_CTRL_1_0_set", value, 3);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_PISO_CTRL_1_0_set", A, value );

    /* (0x0000009c bits 1:0) field PISO_CTRL_1_0 of register PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2 */
    c8_reg_MABC_PISO_CNFG_REG2_field_set( b_ptr,
                                          h_ptr,
                                          A,
                                          CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_BIT_PISO_CTRL_1_0_MSK,
                                          CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_BIT_PISO_CTRL_1_0_OFF,
                                          value);
}

static INLINE UINT32 c8_field_PISO_CTRL_1_0_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PISO_CTRL_1_0_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PISO_CTRL_1_0_get", A, 7);
    /* (0x0000009c bits 1:0) field PISO_CTRL_1_0 of register PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2 */
    reg_value = c8_reg_MABC_PISO_CNFG_REG2_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_BIT_PISO_CTRL_1_0_MSK) >> CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_BIT_PISO_CTRL_1_0_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PISO_CTRL_1_0_get", A, value );

    return value;
}
static INLINE void c8_field_range_PISO_CTRL_1_0_set( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_PISO_CTRL_1_0_set( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_PISO_CTRL_1_0_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_PISO_CTRL_1_0_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_PISO_CTRL_1_0_set", stop_bit, 1 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_PISO_CTRL_1_0_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000009c bits 1:0) field PISO_CTRL_1_0 of register PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000009c bits 1:0) field PISO_CTRL_1_0 of register PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2 */
        c8_reg_MABC_PISO_CNFG_REG2_field_set( b_ptr,
                                              h_ptr,
                                              A,
                                              subfield_mask << (CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_BIT_PISO_CTRL_1_0_OFF + subfield_offset),
                                              CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_BIT_PISO_CTRL_1_0_OFF + subfield_offset,
                                              value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_PISO_CTRL_1_0_get( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_PISO_CTRL_1_0_get( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_PISO_CTRL_1_0_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_PISO_CTRL_1_0_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_PISO_CTRL_1_0_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000009c bits 1:0) field PISO_CTRL_1_0 of register PMC_CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2 */
    reg_value = c8_reg_MABC_PISO_CNFG_REG2_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_BIT_PISO_CTRL_1_0_MSK)
                  >> CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_BIT_PISO_CTRL_1_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_BIT_PISO_CTRL_1_0_MSK, CNI_UNI_TXRX_REG_MABC_PISO_CNFG_REG2_BIT_PISO_CTRL_1_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_PISO_CTRL_1_0_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_RXCM_ENB_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RXCM_ENB_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCM_ENB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RXCM_ENB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RXCM_ENB_set", A, value );

    /* (0x00000100 bits 31) field RXCM_ENB of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    c8_reg_MABC_RXCPGEN_CNFG_REG_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCM_ENB_MSK,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCM_ENB_OFF,
                                            value);
}

static INLINE UINT32 c8_field_RXCM_ENB_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RXCM_ENB_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCM_ENB_get", A, 7);
    /* (0x00000100 bits 31) field RXCM_ENB of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    reg_value = c8_reg_MABC_RXCPGEN_CNFG_REG_read( b_ptr,
                                                   h_ptr,
                                                   A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCM_ENB_MSK) >> CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCM_ENB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RXCM_ENB_get", A, value );

    return value;
}
static INLINE void c8_field_RXCPGEN_ENB_set( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RXCPGEN_ENB_set( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_ENB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RXCPGEN_ENB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RXCPGEN_ENB_set", A, value );

    /* (0x00000100 bits 30) field RXCPGEN_ENB of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    c8_reg_MABC_RXCPGEN_CNFG_REG_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_ENB_MSK,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_ENB_OFF,
                                            value);
}

static INLINE UINT32 c8_field_RXCPGEN_ENB_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RXCPGEN_ENB_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_ENB_get", A, 7);
    /* (0x00000100 bits 30) field RXCPGEN_ENB of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    reg_value = c8_reg_MABC_RXCPGEN_CNFG_REG_read( b_ptr,
                                                   h_ptr,
                                                   A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_ENB_MSK) >> CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_ENB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RXCPGEN_ENB_get", A, value );

    return value;
}
static INLINE void c8_field_RXCPGEN_MODE_9_8_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RXCPGEN_MODE_9_8_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_MODE_9_8_set", A, 7);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RXCPGEN_MODE_9_8_set", value, 3);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RXCPGEN_MODE_9_8_set", A, value );

    /* (0x00000100 bits 29:28) field RXCPGEN_MODE_9_8 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    c8_reg_MABC_RXCPGEN_CNFG_REG_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_9_8_MSK,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_9_8_OFF,
                                            value);
}

static INLINE UINT32 c8_field_RXCPGEN_MODE_9_8_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RXCPGEN_MODE_9_8_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_MODE_9_8_get", A, 7);
    /* (0x00000100 bits 29:28) field RXCPGEN_MODE_9_8 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    reg_value = c8_reg_MABC_RXCPGEN_CNFG_REG_read( b_ptr,
                                                   h_ptr,
                                                   A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_9_8_MSK) >> CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_9_8_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RXCPGEN_MODE_9_8_get", A, value );

    return value;
}
static INLINE void c8_field_range_RXCPGEN_MODE_9_8_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_RXCPGEN_MODE_9_8_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_RXCPGEN_MODE_9_8_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_RXCPGEN_MODE_9_8_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_RXCPGEN_MODE_9_8_set", stop_bit, 1 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_RXCPGEN_MODE_9_8_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000100 bits 29:28) field RXCPGEN_MODE_9_8 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000100 bits 29:28) field RXCPGEN_MODE_9_8 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
        c8_reg_MABC_RXCPGEN_CNFG_REG_field_set( b_ptr,
                                                h_ptr,
                                                A,
                                                subfield_mask << (CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_9_8_OFF + subfield_offset),
                                                CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_9_8_OFF + subfield_offset,
                                                value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_RXCPGEN_MODE_9_8_get( c8_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_RXCPGEN_MODE_9_8_get( c8_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_RXCPGEN_MODE_9_8_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_RXCPGEN_MODE_9_8_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_RXCPGEN_MODE_9_8_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000100 bits 29:28) field RXCPGEN_MODE_9_8 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    reg_value = c8_reg_MABC_RXCPGEN_CNFG_REG_read( b_ptr,
                                                   h_ptr,
                                                   A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_9_8_MSK)
                  >> CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_9_8_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_9_8_MSK, CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_9_8_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_RXCPGEN_MODE_9_8_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_RXCPGEN_MODE_7_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RXCPGEN_MODE_7_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_MODE_7_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RXCPGEN_MODE_7_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RXCPGEN_MODE_7_set", A, value );

    /* (0x00000100 bits 27) field RXCPGEN_MODE_7 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    c8_reg_MABC_RXCPGEN_CNFG_REG_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_7_MSK,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_7_OFF,
                                            value);
}

static INLINE UINT32 c8_field_RXCPGEN_MODE_7_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RXCPGEN_MODE_7_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_MODE_7_get", A, 7);
    /* (0x00000100 bits 27) field RXCPGEN_MODE_7 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    reg_value = c8_reg_MABC_RXCPGEN_CNFG_REG_read( b_ptr,
                                                   h_ptr,
                                                   A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_7_MSK) >> CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_7_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RXCPGEN_MODE_7_get", A, value );

    return value;
}
static INLINE void c8_field_RXCPGEN_MODE_6_5_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RXCPGEN_MODE_6_5_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_MODE_6_5_set", A, 7);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RXCPGEN_MODE_6_5_set", value, 3);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RXCPGEN_MODE_6_5_set", A, value );

    /* (0x00000100 bits 26:25) field RXCPGEN_MODE_6_5 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    c8_reg_MABC_RXCPGEN_CNFG_REG_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_6_5_MSK,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_6_5_OFF,
                                            value);
}

static INLINE UINT32 c8_field_RXCPGEN_MODE_6_5_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RXCPGEN_MODE_6_5_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_MODE_6_5_get", A, 7);
    /* (0x00000100 bits 26:25) field RXCPGEN_MODE_6_5 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    reg_value = c8_reg_MABC_RXCPGEN_CNFG_REG_read( b_ptr,
                                                   h_ptr,
                                                   A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_6_5_MSK) >> CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_6_5_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RXCPGEN_MODE_6_5_get", A, value );

    return value;
}
static INLINE void c8_field_range_RXCPGEN_MODE_6_5_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_RXCPGEN_MODE_6_5_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_RXCPGEN_MODE_6_5_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_RXCPGEN_MODE_6_5_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_RXCPGEN_MODE_6_5_set", stop_bit, 1 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_RXCPGEN_MODE_6_5_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000100 bits 26:25) field RXCPGEN_MODE_6_5 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000100 bits 26:25) field RXCPGEN_MODE_6_5 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
        c8_reg_MABC_RXCPGEN_CNFG_REG_field_set( b_ptr,
                                                h_ptr,
                                                A,
                                                subfield_mask << (CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_6_5_OFF + subfield_offset),
                                                CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_6_5_OFF + subfield_offset,
                                                value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_RXCPGEN_MODE_6_5_get( c8_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_RXCPGEN_MODE_6_5_get( c8_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_RXCPGEN_MODE_6_5_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_RXCPGEN_MODE_6_5_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_RXCPGEN_MODE_6_5_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000100 bits 26:25) field RXCPGEN_MODE_6_5 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    reg_value = c8_reg_MABC_RXCPGEN_CNFG_REG_read( b_ptr,
                                                   h_ptr,
                                                   A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_6_5_MSK)
                  >> CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_6_5_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_6_5_MSK, CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_6_5_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_RXCPGEN_MODE_6_5_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_RXCPGEN_MODE_4_3_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RXCPGEN_MODE_4_3_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_MODE_4_3_set", A, 7);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RXCPGEN_MODE_4_3_set", value, 3);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RXCPGEN_MODE_4_3_set", A, value );

    /* (0x00000100 bits 24:23) field RXCPGEN_MODE_4_3 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    c8_reg_MABC_RXCPGEN_CNFG_REG_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_4_3_MSK,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_4_3_OFF,
                                            value);
}

static INLINE UINT32 c8_field_RXCPGEN_MODE_4_3_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RXCPGEN_MODE_4_3_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_MODE_4_3_get", A, 7);
    /* (0x00000100 bits 24:23) field RXCPGEN_MODE_4_3 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    reg_value = c8_reg_MABC_RXCPGEN_CNFG_REG_read( b_ptr,
                                                   h_ptr,
                                                   A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_4_3_MSK) >> CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_4_3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RXCPGEN_MODE_4_3_get", A, value );

    return value;
}
static INLINE void c8_field_range_RXCPGEN_MODE_4_3_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_RXCPGEN_MODE_4_3_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_RXCPGEN_MODE_4_3_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_RXCPGEN_MODE_4_3_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_RXCPGEN_MODE_4_3_set", stop_bit, 1 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_RXCPGEN_MODE_4_3_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000100 bits 24:23) field RXCPGEN_MODE_4_3 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000100 bits 24:23) field RXCPGEN_MODE_4_3 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
        c8_reg_MABC_RXCPGEN_CNFG_REG_field_set( b_ptr,
                                                h_ptr,
                                                A,
                                                subfield_mask << (CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_4_3_OFF + subfield_offset),
                                                CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_4_3_OFF + subfield_offset,
                                                value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_RXCPGEN_MODE_4_3_get( c8_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_RXCPGEN_MODE_4_3_get( c8_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_RXCPGEN_MODE_4_3_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_RXCPGEN_MODE_4_3_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_RXCPGEN_MODE_4_3_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000100 bits 24:23) field RXCPGEN_MODE_4_3 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    reg_value = c8_reg_MABC_RXCPGEN_CNFG_REG_read( b_ptr,
                                                   h_ptr,
                                                   A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_4_3_MSK)
                  >> CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_4_3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_4_3_MSK, CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_4_3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_RXCPGEN_MODE_4_3_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_RXCPGEN_MODE_2_0_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RXCPGEN_MODE_2_0_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_MODE_2_0_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RXCPGEN_MODE_2_0_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RXCPGEN_MODE_2_0_set", A, value );

    /* (0x00000100 bits 22:20) field RXCPGEN_MODE_2_0 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    c8_reg_MABC_RXCPGEN_CNFG_REG_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_2_0_MSK,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_2_0_OFF,
                                            value);
}

static INLINE UINT32 c8_field_RXCPGEN_MODE_2_0_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RXCPGEN_MODE_2_0_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_MODE_2_0_get", A, 7);
    /* (0x00000100 bits 22:20) field RXCPGEN_MODE_2_0 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    reg_value = c8_reg_MABC_RXCPGEN_CNFG_REG_read( b_ptr,
                                                   h_ptr,
                                                   A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_2_0_MSK) >> CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_2_0_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RXCPGEN_MODE_2_0_get", A, value );

    return value;
}
static INLINE void c8_field_range_RXCPGEN_MODE_2_0_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_RXCPGEN_MODE_2_0_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_RXCPGEN_MODE_2_0_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_RXCPGEN_MODE_2_0_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_RXCPGEN_MODE_2_0_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_RXCPGEN_MODE_2_0_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000100 bits 22:20) field RXCPGEN_MODE_2_0 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000100 bits 22:20) field RXCPGEN_MODE_2_0 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
        c8_reg_MABC_RXCPGEN_CNFG_REG_field_set( b_ptr,
                                                h_ptr,
                                                A,
                                                subfield_mask << (CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_2_0_OFF + subfield_offset),
                                                CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_2_0_OFF + subfield_offset,
                                                value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_RXCPGEN_MODE_2_0_get( c8_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_RXCPGEN_MODE_2_0_get( c8_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_RXCPGEN_MODE_2_0_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_RXCPGEN_MODE_2_0_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_RXCPGEN_MODE_2_0_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000100 bits 22:20) field RXCPGEN_MODE_2_0 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    reg_value = c8_reg_MABC_RXCPGEN_CNFG_REG_read( b_ptr,
                                                   h_ptr,
                                                   A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_2_0_MSK)
                  >> CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_2_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_2_0_MSK, CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_MODE_2_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_RXCPGEN_MODE_2_0_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_RXCPGEN_CTRL_15_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RXCPGEN_CTRL_15_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_CTRL_15_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RXCPGEN_CTRL_15_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RXCPGEN_CTRL_15_set", A, value );

    /* (0x00000100 bits 15) field RXCPGEN_CTRL_15 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    c8_reg_MABC_RXCPGEN_CNFG_REG_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_15_MSK,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_15_OFF,
                                            value);
}

static INLINE UINT32 c8_field_RXCPGEN_CTRL_15_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RXCPGEN_CTRL_15_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_CTRL_15_get", A, 7);
    /* (0x00000100 bits 15) field RXCPGEN_CTRL_15 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    reg_value = c8_reg_MABC_RXCPGEN_CNFG_REG_read( b_ptr,
                                                   h_ptr,
                                                   A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_15_MSK) >> CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_15_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RXCPGEN_CTRL_15_get", A, value );

    return value;
}
static INLINE void c8_field_RXCPGEN_CTRL_14_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RXCPGEN_CTRL_14_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_CTRL_14_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RXCPGEN_CTRL_14_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RXCPGEN_CTRL_14_set", A, value );

    /* (0x00000100 bits 14) field RXCPGEN_CTRL_14 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    c8_reg_MABC_RXCPGEN_CNFG_REG_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_14_MSK,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_14_OFF,
                                            value);
}

static INLINE UINT32 c8_field_RXCPGEN_CTRL_14_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RXCPGEN_CTRL_14_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_CTRL_14_get", A, 7);
    /* (0x00000100 bits 14) field RXCPGEN_CTRL_14 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    reg_value = c8_reg_MABC_RXCPGEN_CNFG_REG_read( b_ptr,
                                                   h_ptr,
                                                   A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_14_MSK) >> CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_14_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RXCPGEN_CTRL_14_get", A, value );

    return value;
}
static INLINE void c8_field_RXCPGEN_CTRL_13_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RXCPGEN_CTRL_13_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_CTRL_13_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RXCPGEN_CTRL_13_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RXCPGEN_CTRL_13_set", A, value );

    /* (0x00000100 bits 13) field RXCPGEN_CTRL_13 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    c8_reg_MABC_RXCPGEN_CNFG_REG_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_13_MSK,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_13_OFF,
                                            value);
}

static INLINE UINT32 c8_field_RXCPGEN_CTRL_13_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RXCPGEN_CTRL_13_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_CTRL_13_get", A, 7);
    /* (0x00000100 bits 13) field RXCPGEN_CTRL_13 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    reg_value = c8_reg_MABC_RXCPGEN_CNFG_REG_read( b_ptr,
                                                   h_ptr,
                                                   A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_13_MSK) >> CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_13_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RXCPGEN_CTRL_13_get", A, value );

    return value;
}
static INLINE void c8_field_RXCPGEN_CTRL_12_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RXCPGEN_CTRL_12_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_CTRL_12_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RXCPGEN_CTRL_12_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RXCPGEN_CTRL_12_set", A, value );

    /* (0x00000100 bits 12) field RXCPGEN_CTRL_12 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    c8_reg_MABC_RXCPGEN_CNFG_REG_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_12_MSK,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_12_OFF,
                                            value);
}

static INLINE UINT32 c8_field_RXCPGEN_CTRL_12_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RXCPGEN_CTRL_12_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_CTRL_12_get", A, 7);
    /* (0x00000100 bits 12) field RXCPGEN_CTRL_12 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    reg_value = c8_reg_MABC_RXCPGEN_CNFG_REG_read( b_ptr,
                                                   h_ptr,
                                                   A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_12_MSK) >> CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_12_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RXCPGEN_CTRL_12_get", A, value );

    return value;
}
static INLINE void c8_field_RXCPGEN_CTRL_11_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RXCPGEN_CTRL_11_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_CTRL_11_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RXCPGEN_CTRL_11_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RXCPGEN_CTRL_11_set", A, value );

    /* (0x00000100 bits 11) field RXCPGEN_CTRL_11 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    c8_reg_MABC_RXCPGEN_CNFG_REG_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_11_MSK,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_11_OFF,
                                            value);
}

static INLINE UINT32 c8_field_RXCPGEN_CTRL_11_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RXCPGEN_CTRL_11_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_CTRL_11_get", A, 7);
    /* (0x00000100 bits 11) field RXCPGEN_CTRL_11 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    reg_value = c8_reg_MABC_RXCPGEN_CNFG_REG_read( b_ptr,
                                                   h_ptr,
                                                   A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_11_MSK) >> CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_11_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RXCPGEN_CTRL_11_get", A, value );

    return value;
}
static INLINE void c8_field_RXCPGEN_CTRL_10_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RXCPGEN_CTRL_10_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_CTRL_10_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RXCPGEN_CTRL_10_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RXCPGEN_CTRL_10_set", A, value );

    /* (0x00000100 bits 10) field RXCPGEN_CTRL_10 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    c8_reg_MABC_RXCPGEN_CNFG_REG_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_10_MSK,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_10_OFF,
                                            value);
}

static INLINE UINT32 c8_field_RXCPGEN_CTRL_10_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RXCPGEN_CTRL_10_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_CTRL_10_get", A, 7);
    /* (0x00000100 bits 10) field RXCPGEN_CTRL_10 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    reg_value = c8_reg_MABC_RXCPGEN_CNFG_REG_read( b_ptr,
                                                   h_ptr,
                                                   A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_10_MSK) >> CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_10_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RXCPGEN_CTRL_10_get", A, value );

    return value;
}
static INLINE void c8_field_RXCPGEN_CTRL_9_8_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RXCPGEN_CTRL_9_8_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_CTRL_9_8_set", A, 7);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RXCPGEN_CTRL_9_8_set", value, 3);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RXCPGEN_CTRL_9_8_set", A, value );

    /* (0x00000100 bits 9:8) field RXCPGEN_CTRL_9_8 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    c8_reg_MABC_RXCPGEN_CNFG_REG_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_9_8_MSK,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_9_8_OFF,
                                            value);
}

static INLINE UINT32 c8_field_RXCPGEN_CTRL_9_8_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RXCPGEN_CTRL_9_8_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_CTRL_9_8_get", A, 7);
    /* (0x00000100 bits 9:8) field RXCPGEN_CTRL_9_8 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    reg_value = c8_reg_MABC_RXCPGEN_CNFG_REG_read( b_ptr,
                                                   h_ptr,
                                                   A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_9_8_MSK) >> CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_9_8_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RXCPGEN_CTRL_9_8_get", A, value );

    return value;
}
static INLINE void c8_field_range_RXCPGEN_CTRL_9_8_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_RXCPGEN_CTRL_9_8_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_RXCPGEN_CTRL_9_8_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_RXCPGEN_CTRL_9_8_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_RXCPGEN_CTRL_9_8_set", stop_bit, 1 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_RXCPGEN_CTRL_9_8_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000100 bits 9:8) field RXCPGEN_CTRL_9_8 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000100 bits 9:8) field RXCPGEN_CTRL_9_8 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
        c8_reg_MABC_RXCPGEN_CNFG_REG_field_set( b_ptr,
                                                h_ptr,
                                                A,
                                                subfield_mask << (CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_9_8_OFF + subfield_offset),
                                                CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_9_8_OFF + subfield_offset,
                                                value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_RXCPGEN_CTRL_9_8_get( c8_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_RXCPGEN_CTRL_9_8_get( c8_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_RXCPGEN_CTRL_9_8_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_RXCPGEN_CTRL_9_8_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_RXCPGEN_CTRL_9_8_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000100 bits 9:8) field RXCPGEN_CTRL_9_8 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    reg_value = c8_reg_MABC_RXCPGEN_CNFG_REG_read( b_ptr,
                                                   h_ptr,
                                                   A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_9_8_MSK)
                  >> CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_9_8_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_9_8_MSK, CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_9_8_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_RXCPGEN_CTRL_9_8_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_RXCPGEN_CTRL_7_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RXCPGEN_CTRL_7_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_CTRL_7_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RXCPGEN_CTRL_7_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RXCPGEN_CTRL_7_set", A, value );

    /* (0x00000100 bits 7) field RXCPGEN_CTRL_7 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    c8_reg_MABC_RXCPGEN_CNFG_REG_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_7_MSK,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_7_OFF,
                                            value);
}

static INLINE UINT32 c8_field_RXCPGEN_CTRL_7_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RXCPGEN_CTRL_7_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_CTRL_7_get", A, 7);
    /* (0x00000100 bits 7) field RXCPGEN_CTRL_7 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    reg_value = c8_reg_MABC_RXCPGEN_CNFG_REG_read( b_ptr,
                                                   h_ptr,
                                                   A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_7_MSK) >> CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_7_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RXCPGEN_CTRL_7_get", A, value );

    return value;
}
static INLINE void c8_field_RXCPGEN_CTRL_6_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RXCPGEN_CTRL_6_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_CTRL_6_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RXCPGEN_CTRL_6_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RXCPGEN_CTRL_6_set", A, value );

    /* (0x00000100 bits 6) field RXCPGEN_CTRL_6 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    c8_reg_MABC_RXCPGEN_CNFG_REG_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_6_MSK,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_6_OFF,
                                            value);
}

static INLINE UINT32 c8_field_RXCPGEN_CTRL_6_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RXCPGEN_CTRL_6_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_CTRL_6_get", A, 7);
    /* (0x00000100 bits 6) field RXCPGEN_CTRL_6 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    reg_value = c8_reg_MABC_RXCPGEN_CNFG_REG_read( b_ptr,
                                                   h_ptr,
                                                   A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_6_MSK) >> CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_6_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RXCPGEN_CTRL_6_get", A, value );

    return value;
}
static INLINE void c8_field_RXCPGEN_CTRL_5_4_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RXCPGEN_CTRL_5_4_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_CTRL_5_4_set", A, 7);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RXCPGEN_CTRL_5_4_set", value, 3);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RXCPGEN_CTRL_5_4_set", A, value );

    /* (0x00000100 bits 5:4) field RXCPGEN_CTRL_5_4 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    c8_reg_MABC_RXCPGEN_CNFG_REG_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_5_4_MSK,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_5_4_OFF,
                                            value);
}

static INLINE UINT32 c8_field_RXCPGEN_CTRL_5_4_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RXCPGEN_CTRL_5_4_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_CTRL_5_4_get", A, 7);
    /* (0x00000100 bits 5:4) field RXCPGEN_CTRL_5_4 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    reg_value = c8_reg_MABC_RXCPGEN_CNFG_REG_read( b_ptr,
                                                   h_ptr,
                                                   A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_5_4_MSK) >> CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_5_4_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RXCPGEN_CTRL_5_4_get", A, value );

    return value;
}
static INLINE void c8_field_range_RXCPGEN_CTRL_5_4_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_RXCPGEN_CTRL_5_4_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_RXCPGEN_CTRL_5_4_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_RXCPGEN_CTRL_5_4_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_RXCPGEN_CTRL_5_4_set", stop_bit, 1 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_RXCPGEN_CTRL_5_4_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000100 bits 5:4) field RXCPGEN_CTRL_5_4 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000100 bits 5:4) field RXCPGEN_CTRL_5_4 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
        c8_reg_MABC_RXCPGEN_CNFG_REG_field_set( b_ptr,
                                                h_ptr,
                                                A,
                                                subfield_mask << (CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_5_4_OFF + subfield_offset),
                                                CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_5_4_OFF + subfield_offset,
                                                value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_RXCPGEN_CTRL_5_4_get( c8_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_RXCPGEN_CTRL_5_4_get( c8_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_RXCPGEN_CTRL_5_4_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_RXCPGEN_CTRL_5_4_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_RXCPGEN_CTRL_5_4_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000100 bits 5:4) field RXCPGEN_CTRL_5_4 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    reg_value = c8_reg_MABC_RXCPGEN_CNFG_REG_read( b_ptr,
                                                   h_ptr,
                                                   A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_5_4_MSK)
                  >> CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_5_4_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_5_4_MSK, CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_5_4_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_RXCPGEN_CTRL_5_4_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_RXCPGEN_CTRL_3_1_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RXCPGEN_CTRL_3_1_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_CTRL_3_1_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RXCPGEN_CTRL_3_1_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RXCPGEN_CTRL_3_1_set", A, value );

    /* (0x00000100 bits 3:1) field RXCPGEN_CTRL_3_1 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    c8_reg_MABC_RXCPGEN_CNFG_REG_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_3_1_MSK,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_3_1_OFF,
                                            value);
}

static INLINE UINT32 c8_field_RXCPGEN_CTRL_3_1_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RXCPGEN_CTRL_3_1_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_CTRL_3_1_get", A, 7);
    /* (0x00000100 bits 3:1) field RXCPGEN_CTRL_3_1 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    reg_value = c8_reg_MABC_RXCPGEN_CNFG_REG_read( b_ptr,
                                                   h_ptr,
                                                   A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_3_1_MSK) >> CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_3_1_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RXCPGEN_CTRL_3_1_get", A, value );

    return value;
}
static INLINE void c8_field_range_RXCPGEN_CTRL_3_1_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_RXCPGEN_CTRL_3_1_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_RXCPGEN_CTRL_3_1_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_RXCPGEN_CTRL_3_1_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_RXCPGEN_CTRL_3_1_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_RXCPGEN_CTRL_3_1_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000100 bits 3:1) field RXCPGEN_CTRL_3_1 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000100 bits 3:1) field RXCPGEN_CTRL_3_1 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
        c8_reg_MABC_RXCPGEN_CNFG_REG_field_set( b_ptr,
                                                h_ptr,
                                                A,
                                                subfield_mask << (CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_3_1_OFF + subfield_offset),
                                                CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_3_1_OFF + subfield_offset,
                                                value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_RXCPGEN_CTRL_3_1_get( c8_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_RXCPGEN_CTRL_3_1_get( c8_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_RXCPGEN_CTRL_3_1_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_RXCPGEN_CTRL_3_1_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_RXCPGEN_CTRL_3_1_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000100 bits 3:1) field RXCPGEN_CTRL_3_1 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    reg_value = c8_reg_MABC_RXCPGEN_CNFG_REG_read( b_ptr,
                                                   h_ptr,
                                                   A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_3_1_MSK)
                  >> CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_3_1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_3_1_MSK, CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_3_1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_RXCPGEN_CTRL_3_1_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_RXCPGEN_CTRL_0_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RXCPGEN_CTRL_0_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_CTRL_0_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RXCPGEN_CTRL_0_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RXCPGEN_CTRL_0_set", A, value );

    /* (0x00000100 bits 0) field RXCPGEN_CTRL_0 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    c8_reg_MABC_RXCPGEN_CNFG_REG_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_0_MSK,
                                            CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_0_OFF,
                                            value);
}

static INLINE UINT32 c8_field_RXCPGEN_CTRL_0_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RXCPGEN_CTRL_0_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_CTRL_0_get", A, 7);
    /* (0x00000100 bits 0) field RXCPGEN_CTRL_0 of register PMC_CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG */
    reg_value = c8_reg_MABC_RXCPGEN_CNFG_REG_read( b_ptr,
                                                   h_ptr,
                                                   A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_0_MSK) >> CNI_UNI_TXRX_REG_MABC_RXCPGEN_CNFG_REG_BIT_RXCPGEN_CTRL_0_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RXCPGEN_CTRL_0_get", A, value );

    return value;
}
static INLINE void c8_field_TX_TEST_SEL_set( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_TX_TEST_SEL_set( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_TEST_SEL_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_TX_TEST_SEL_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_TX_TEST_SEL_set", A, value );

    /* (0x00000104 bits 31) field TX_TEST_SEL of register PMC_CNI_UNI_TXRX_REG_TXRX_CNFG_REG */
    c8_reg_TXRX_CNFG_REG_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TX_TEST_SEL_MSK,
                                    CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TX_TEST_SEL_OFF,
                                    value);
}

static INLINE UINT32 c8_field_TX_TEST_SEL_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_TX_TEST_SEL_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_TEST_SEL_get", A, 7);
    /* (0x00000104 bits 31) field TX_TEST_SEL of register PMC_CNI_UNI_TXRX_REG_TXRX_CNFG_REG */
    reg_value = c8_reg_TXRX_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TX_TEST_SEL_MSK) >> CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TX_TEST_SEL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_TX_TEST_SEL_get", A, value );

    return value;
}
static INLINE void c8_field_TX_SDATA_EN_set( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_TX_SDATA_EN_set( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_SDATA_EN_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_TX_SDATA_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_TX_SDATA_EN_set", A, value );

    /* (0x00000104 bits 30) field TX_SDATA_EN of register PMC_CNI_UNI_TXRX_REG_TXRX_CNFG_REG */
    c8_reg_TXRX_CNFG_REG_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TX_SDATA_EN_MSK,
                                    CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TX_SDATA_EN_OFF,
                                    value);
}

static INLINE UINT32 c8_field_TX_SDATA_EN_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_TX_SDATA_EN_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_SDATA_EN_get", A, 7);
    /* (0x00000104 bits 30) field TX_SDATA_EN of register PMC_CNI_UNI_TXRX_REG_TXRX_CNFG_REG */
    reg_value = c8_reg_TXRX_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TX_SDATA_EN_MSK) >> CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TX_SDATA_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_TX_SDATA_EN_get", A, value );

    return value;
}
static INLINE void c8_field_TXRXCS_CLKSEL_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_TXRXCS_CLKSEL_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TXRXCS_CLKSEL_set", A, 7);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_TXRXCS_CLKSEL_set", value, 3);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_TXRXCS_CLKSEL_set", A, value );

    /* (0x00000104 bits 21:20) field TXRXCS_CLKSEL of register PMC_CNI_UNI_TXRX_REG_TXRX_CNFG_REG */
    c8_reg_TXRX_CNFG_REG_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_CLKSEL_MSK,
                                    CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_CLKSEL_OFF,
                                    value);
}

static INLINE UINT32 c8_field_TXRXCS_CLKSEL_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_TXRXCS_CLKSEL_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TXRXCS_CLKSEL_get", A, 7);
    /* (0x00000104 bits 21:20) field TXRXCS_CLKSEL of register PMC_CNI_UNI_TXRX_REG_TXRX_CNFG_REG */
    reg_value = c8_reg_TXRX_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_CLKSEL_MSK) >> CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_CLKSEL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_TXRXCS_CLKSEL_get", A, value );

    return value;
}
static INLINE void c8_field_range_TXRXCS_CLKSEL_set( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_TXRXCS_CLKSEL_set( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_TXRXCS_CLKSEL_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_TXRXCS_CLKSEL_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_TXRXCS_CLKSEL_set", stop_bit, 1 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_TXRXCS_CLKSEL_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000104 bits 21:20) field TXRXCS_CLKSEL of register PMC_CNI_UNI_TXRX_REG_TXRX_CNFG_REG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000104 bits 21:20) field TXRXCS_CLKSEL of register PMC_CNI_UNI_TXRX_REG_TXRX_CNFG_REG */
        c8_reg_TXRX_CNFG_REG_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        subfield_mask << (CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_CLKSEL_OFF + subfield_offset),
                                        CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_CLKSEL_OFF + subfield_offset,
                                        value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_TXRXCS_CLKSEL_get( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_TXRXCS_CLKSEL_get( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_TXRXCS_CLKSEL_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_TXRXCS_CLKSEL_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_TXRXCS_CLKSEL_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000104 bits 21:20) field TXRXCS_CLKSEL of register PMC_CNI_UNI_TXRX_REG_TXRX_CNFG_REG */
    reg_value = c8_reg_TXRX_CNFG_REG_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_CLKSEL_MSK)
                  >> CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_CLKSEL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_CLKSEL_MSK, CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_CLKSEL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_TXRXCS_CLKSEL_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_TXRXCS_CTRL_3_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_TXRXCS_CTRL_3_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TXRXCS_CTRL_3_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_TXRXCS_CTRL_3_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_TXRXCS_CTRL_3_set", A, value );

    /* (0x00000104 bits 13) field TXRXCS_CTRL_3 of register PMC_CNI_UNI_TXRX_REG_TXRX_CNFG_REG */
    c8_reg_TXRX_CNFG_REG_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_CTRL_3_MSK,
                                    CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_CTRL_3_OFF,
                                    value);
}

static INLINE UINT32 c8_field_TXRXCS_CTRL_3_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_TXRXCS_CTRL_3_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TXRXCS_CTRL_3_get", A, 7);
    /* (0x00000104 bits 13) field TXRXCS_CTRL_3 of register PMC_CNI_UNI_TXRX_REG_TXRX_CNFG_REG */
    reg_value = c8_reg_TXRX_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_CTRL_3_MSK) >> CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_CTRL_3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_TXRXCS_CTRL_3_get", A, value );

    return value;
}
static INLINE void c8_field_TXRXCS_CTRL_2_0_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_TXRXCS_CTRL_2_0_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TXRXCS_CTRL_2_0_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_TXRXCS_CTRL_2_0_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_TXRXCS_CTRL_2_0_set", A, value );

    /* (0x00000104 bits 12:10) field TXRXCS_CTRL_2_0 of register PMC_CNI_UNI_TXRX_REG_TXRX_CNFG_REG */
    c8_reg_TXRX_CNFG_REG_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_CTRL_2_0_MSK,
                                    CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_CTRL_2_0_OFF,
                                    value);
}

static INLINE UINT32 c8_field_TXRXCS_CTRL_2_0_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_TXRXCS_CTRL_2_0_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TXRXCS_CTRL_2_0_get", A, 7);
    /* (0x00000104 bits 12:10) field TXRXCS_CTRL_2_0 of register PMC_CNI_UNI_TXRX_REG_TXRX_CNFG_REG */
    reg_value = c8_reg_TXRX_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_CTRL_2_0_MSK) >> CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_CTRL_2_0_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_TXRXCS_CTRL_2_0_get", A, value );

    return value;
}
static INLINE void c8_field_range_TXRXCS_CTRL_2_0_set( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_TXRXCS_CTRL_2_0_set( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_TXRXCS_CTRL_2_0_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_TXRXCS_CTRL_2_0_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_TXRXCS_CTRL_2_0_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_TXRXCS_CTRL_2_0_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000104 bits 12:10) field TXRXCS_CTRL_2_0 of register PMC_CNI_UNI_TXRX_REG_TXRX_CNFG_REG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000104 bits 12:10) field TXRXCS_CTRL_2_0 of register PMC_CNI_UNI_TXRX_REG_TXRX_CNFG_REG */
        c8_reg_TXRX_CNFG_REG_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        subfield_mask << (CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_CTRL_2_0_OFF + subfield_offset),
                                        CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_CTRL_2_0_OFF + subfield_offset,
                                        value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_TXRXCS_CTRL_2_0_get( c8_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_TXRXCS_CTRL_2_0_get( c8_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_TXRXCS_CTRL_2_0_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_TXRXCS_CTRL_2_0_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_TXRXCS_CTRL_2_0_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000104 bits 12:10) field TXRXCS_CTRL_2_0 of register PMC_CNI_UNI_TXRX_REG_TXRX_CNFG_REG */
    reg_value = c8_reg_TXRX_CNFG_REG_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_CTRL_2_0_MSK)
                  >> CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_CTRL_2_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_CTRL_2_0_MSK, CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_CTRL_2_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_TXRXCS_CTRL_2_0_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_TXRXCS_MODE_3_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_TXRXCS_MODE_3_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TXRXCS_MODE_3_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_TXRXCS_MODE_3_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_TXRXCS_MODE_3_set", A, value );

    /* (0x00000104 bits 3) field TXRXCS_MODE_3 of register PMC_CNI_UNI_TXRX_REG_TXRX_CNFG_REG */
    c8_reg_TXRX_CNFG_REG_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_MODE_3_MSK,
                                    CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_MODE_3_OFF,
                                    value);
}

static INLINE UINT32 c8_field_TXRXCS_MODE_3_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_TXRXCS_MODE_3_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TXRXCS_MODE_3_get", A, 7);
    /* (0x00000104 bits 3) field TXRXCS_MODE_3 of register PMC_CNI_UNI_TXRX_REG_TXRX_CNFG_REG */
    reg_value = c8_reg_TXRX_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_MODE_3_MSK) >> CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_MODE_3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_TXRXCS_MODE_3_get", A, value );

    return value;
}
static INLINE void c8_field_TXRXCS_MODE_2_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_TXRXCS_MODE_2_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TXRXCS_MODE_2_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_TXRXCS_MODE_2_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_TXRXCS_MODE_2_set", A, value );

    /* (0x00000104 bits 2) field TXRXCS_MODE_2 of register PMC_CNI_UNI_TXRX_REG_TXRX_CNFG_REG */
    c8_reg_TXRX_CNFG_REG_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_MODE_2_MSK,
                                    CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_MODE_2_OFF,
                                    value);
}

static INLINE UINT32 c8_field_TXRXCS_MODE_2_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_TXRXCS_MODE_2_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TXRXCS_MODE_2_get", A, 7);
    /* (0x00000104 bits 2) field TXRXCS_MODE_2 of register PMC_CNI_UNI_TXRX_REG_TXRX_CNFG_REG */
    reg_value = c8_reg_TXRX_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_MODE_2_MSK) >> CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_MODE_2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_TXRXCS_MODE_2_get", A, value );

    return value;
}
static INLINE void c8_field_TXRXCS_MODE_1_0_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_TXRXCS_MODE_1_0_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TXRXCS_MODE_1_0_set", A, 7);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_TXRXCS_MODE_1_0_set", value, 3);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_TXRXCS_MODE_1_0_set", A, value );

    /* (0x00000104 bits 1:0) field TXRXCS_MODE_1_0 of register PMC_CNI_UNI_TXRX_REG_TXRX_CNFG_REG */
    c8_reg_TXRX_CNFG_REG_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_MODE_1_0_MSK,
                                    CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_MODE_1_0_OFF,
                                    value);
}

static INLINE UINT32 c8_field_TXRXCS_MODE_1_0_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_TXRXCS_MODE_1_0_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TXRXCS_MODE_1_0_get", A, 7);
    /* (0x00000104 bits 1:0) field TXRXCS_MODE_1_0 of register PMC_CNI_UNI_TXRX_REG_TXRX_CNFG_REG */
    reg_value = c8_reg_TXRX_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_MODE_1_0_MSK) >> CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_MODE_1_0_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_TXRXCS_MODE_1_0_get", A, value );

    return value;
}
static INLINE void c8_field_range_TXRXCS_MODE_1_0_set( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_TXRXCS_MODE_1_0_set( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_TXRXCS_MODE_1_0_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_TXRXCS_MODE_1_0_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_TXRXCS_MODE_1_0_set", stop_bit, 1 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_TXRXCS_MODE_1_0_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000104 bits 1:0) field TXRXCS_MODE_1_0 of register PMC_CNI_UNI_TXRX_REG_TXRX_CNFG_REG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000104 bits 1:0) field TXRXCS_MODE_1_0 of register PMC_CNI_UNI_TXRX_REG_TXRX_CNFG_REG */
        c8_reg_TXRX_CNFG_REG_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        subfield_mask << (CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_MODE_1_0_OFF + subfield_offset),
                                        CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_MODE_1_0_OFF + subfield_offset,
                                        value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_TXRXCS_MODE_1_0_get( c8_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_TXRXCS_MODE_1_0_get( c8_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_TXRXCS_MODE_1_0_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_TXRXCS_MODE_1_0_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_TXRXCS_MODE_1_0_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000104 bits 1:0) field TXRXCS_MODE_1_0 of register PMC_CNI_UNI_TXRX_REG_TXRX_CNFG_REG */
    reg_value = c8_reg_TXRX_CNFG_REG_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_MODE_1_0_MSK)
                  >> CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_MODE_1_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_MODE_1_0_MSK, CNI_UNI_TXRX_REG_TXRX_CNFG_REG_BIT_TXRXCS_MODE_1_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_TXRXCS_MODE_1_0_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_VDDBIAS_ATMSB_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_VDDBIAS_ATMSB_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_VDDBIAS_ATMSB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_VDDBIAS_ATMSB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_VDDBIAS_ATMSB_set", A, value );

    /* (0x00000108 bits 11) field VDDBIAS_ATMSB of register PMC_CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG */
    c8_reg_MABC_TEST_CNFG_REG_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_VDDBIAS_ATMSB_MSK,
                                         CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_VDDBIAS_ATMSB_OFF,
                                         value);
}

static INLINE UINT32 c8_field_VDDBIAS_ATMSB_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_VDDBIAS_ATMSB_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_VDDBIAS_ATMSB_get", A, 7);
    /* (0x00000108 bits 11) field VDDBIAS_ATMSB of register PMC_CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG */
    reg_value = c8_reg_MABC_TEST_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_VDDBIAS_ATMSB_MSK) >> CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_VDDBIAS_ATMSB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_VDDBIAS_ATMSB_get", A, value );

    return value;
}
static INLINE void c8_field_TX_ATMSB_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_TX_ATMSB_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_ATMSB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_TX_ATMSB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_TX_ATMSB_set", A, value );

    /* (0x00000108 bits 10) field TX_ATMSB of register PMC_CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG */
    c8_reg_MABC_TEST_CNFG_REG_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_TX_ATMSB_MSK,
                                         CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_TX_ATMSB_OFF,
                                         value);
}

static INLINE UINT32 c8_field_TX_ATMSB_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_TX_ATMSB_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_ATMSB_get", A, 7);
    /* (0x00000108 bits 10) field TX_ATMSB of register PMC_CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG */
    reg_value = c8_reg_MABC_TEST_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_TX_ATMSB_MSK) >> CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_TX_ATMSB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_TX_ATMSB_get", A, value );

    return value;
}
static INLINE void c8_field_TXRXCS_ATMSB_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_TXRXCS_ATMSB_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TXRXCS_ATMSB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_TXRXCS_ATMSB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_TXRXCS_ATMSB_set", A, value );

    /* (0x00000108 bits 9) field TXRXCS_ATMSB of register PMC_CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG */
    c8_reg_MABC_TEST_CNFG_REG_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_TXRXCS_ATMSB_MSK,
                                         CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_TXRXCS_ATMSB_OFF,
                                         value);
}

static INLINE UINT32 c8_field_TXRXCS_ATMSB_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_TXRXCS_ATMSB_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TXRXCS_ATMSB_get", A, 7);
    /* (0x00000108 bits 9) field TXRXCS_ATMSB of register PMC_CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG */
    reg_value = c8_reg_MABC_TEST_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_TXRXCS_ATMSB_MSK) >> CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_TXRXCS_ATMSB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_TXRXCS_ATMSB_get", A, value );

    return value;
}
static INLINE void c8_field_RX_ATMSB_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RX_ATMSB_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RX_ATMSB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RX_ATMSB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RX_ATMSB_set", A, value );

    /* (0x00000108 bits 8) field RX_ATMSB of register PMC_CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG */
    c8_reg_MABC_TEST_CNFG_REG_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_RX_ATMSB_MSK,
                                         CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_RX_ATMSB_OFF,
                                         value);
}

static INLINE UINT32 c8_field_RX_ATMSB_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RX_ATMSB_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RX_ATMSB_get", A, 7);
    /* (0x00000108 bits 8) field RX_ATMSB of register PMC_CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG */
    reg_value = c8_reg_MABC_TEST_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_RX_ATMSB_MSK) >> CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_RX_ATMSB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RX_ATMSB_get", A, value );

    return value;
}
static INLINE void c8_field_RXDET_ATMSB_set( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RXDET_ATMSB_set( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXDET_ATMSB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RXDET_ATMSB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RXDET_ATMSB_set", A, value );

    /* (0x00000108 bits 7) field RXDET_ATMSB of register PMC_CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG */
    c8_reg_MABC_TEST_CNFG_REG_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_RXDET_ATMSB_MSK,
                                         CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_RXDET_ATMSB_OFF,
                                         value);
}

static INLINE UINT32 c8_field_RXDET_ATMSB_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RXDET_ATMSB_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXDET_ATMSB_get", A, 7);
    /* (0x00000108 bits 7) field RXDET_ATMSB of register PMC_CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG */
    reg_value = c8_reg_MABC_TEST_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_RXDET_ATMSB_MSK) >> CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_RXDET_ATMSB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RXDET_ATMSB_get", A, value );

    return value;
}
static INLINE void c8_field_RXCPGEN_ATMSB_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RXCPGEN_ATMSB_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_ATMSB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RXCPGEN_ATMSB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RXCPGEN_ATMSB_set", A, value );

    /* (0x00000108 bits 6) field RXCPGEN_ATMSB of register PMC_CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG */
    c8_reg_MABC_TEST_CNFG_REG_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_RXCPGEN_ATMSB_MSK,
                                         CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_RXCPGEN_ATMSB_OFF,
                                         value);
}

static INLINE UINT32 c8_field_RXCPGEN_ATMSB_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RXCPGEN_ATMSB_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXCPGEN_ATMSB_get", A, 7);
    /* (0x00000108 bits 6) field RXCPGEN_ATMSB of register PMC_CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG */
    reg_value = c8_reg_MABC_TEST_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_RXCPGEN_ATMSB_MSK) >> CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_RXCPGEN_ATMSB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RXCPGEN_ATMSB_get", A, value );

    return value;
}
static INLINE void c8_field_PISO_ATMSB_set( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_PISO_ATMSB_set( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PISO_ATMSB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_PISO_ATMSB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_PISO_ATMSB_set", A, value );

    /* (0x00000108 bits 5) field PISO_ATMSB of register PMC_CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG */
    c8_reg_MABC_TEST_CNFG_REG_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_PISO_ATMSB_MSK,
                                         CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_PISO_ATMSB_OFF,
                                         value);
}

static INLINE UINT32 c8_field_PISO_ATMSB_get( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PISO_ATMSB_get( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PISO_ATMSB_get", A, 7);
    /* (0x00000108 bits 5) field PISO_ATMSB of register PMC_CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG */
    reg_value = c8_reg_MABC_TEST_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_PISO_ATMSB_MSK) >> CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_PISO_ATMSB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PISO_ATMSB_get", A, value );

    return value;
}
static INLINE void c8_field_ATIN_set( c8_buffer_t *b_ptr,
                                      c8_handle_t *h_ptr,
                                      UINT32 A,
                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_ATIN_set( c8_buffer_t *b_ptr,
                                      c8_handle_t *h_ptr,
                                      UINT32 A,
                                      UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ATIN_set", A, 7);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_ATIN_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_ATIN_set", A, value );

    /* (0x00000108 bits 4:0) field ATIN of register PMC_CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG */
    c8_reg_MABC_TEST_CNFG_REG_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_ATIN_MSK,
                                         CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_ATIN_OFF,
                                         value);
}

static INLINE UINT32 c8_field_ATIN_get( c8_buffer_t *b_ptr,
                                        c8_handle_t *h_ptr,
                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ATIN_get( c8_buffer_t *b_ptr,
                                        c8_handle_t *h_ptr,
                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ATIN_get", A, 7);
    /* (0x00000108 bits 4:0) field ATIN of register PMC_CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG */
    reg_value = c8_reg_MABC_TEST_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_ATIN_MSK) >> CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_ATIN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ATIN_get", A, value );

    return value;
}
static INLINE void c8_field_range_ATIN_set( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32 start_bit,
                                            UINT32 stop_bit,
                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_ATIN_set( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32 start_bit,
                                            UINT32 stop_bit,
                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_ATIN_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_ATIN_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_ATIN_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_ATIN_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000108 bits 4:0) field ATIN of register PMC_CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000108 bits 4:0) field ATIN of register PMC_CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG */
        c8_reg_MABC_TEST_CNFG_REG_field_set( b_ptr,
                                             h_ptr,
                                             A,
                                             subfield_mask << (CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_ATIN_OFF + subfield_offset),
                                             CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_ATIN_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_ATIN_get( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 start_bit,
                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_ATIN_get( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 start_bit,
                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_ATIN_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_ATIN_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_ATIN_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000108 bits 4:0) field ATIN of register PMC_CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG */
    reg_value = c8_reg_MABC_TEST_CNFG_REG_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_ATIN_MSK)
                  >> CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_ATIN_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_ATIN_MSK, CNI_UNI_TXRX_REG_MABC_TEST_CNFG_REG_BIT_ATIN_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_ATIN_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_CM_CLK_DIVFACT_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_CM_CLK_DIVFACT_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_CM_CLK_DIVFACT_set", A, 7);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_CM_CLK_DIVFACT_set", value, 255);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_CM_CLK_DIVFACT_set", A, value );

    /* (0x00000110 bits 15:8) field CM_CLK_DIVFACT of register PMC_CNI_UNI_TXRX_REG_DIV_CNFG_REG */
    c8_reg_DIV_CNFG_REG_field_set( b_ptr,
                                   h_ptr,
                                   A,
                                   CNI_UNI_TXRX_REG_DIV_CNFG_REG_BIT_CM_CLK_DIVFACT_MSK,
                                   CNI_UNI_TXRX_REG_DIV_CNFG_REG_BIT_CM_CLK_DIVFACT_OFF,
                                   value);
}

static INLINE UINT32 c8_field_CM_CLK_DIVFACT_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_CM_CLK_DIVFACT_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_CM_CLK_DIVFACT_get", A, 7);
    /* (0x00000110 bits 15:8) field CM_CLK_DIVFACT of register PMC_CNI_UNI_TXRX_REG_DIV_CNFG_REG */
    reg_value = c8_reg_DIV_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DIV_CNFG_REG_BIT_CM_CLK_DIVFACT_MSK) >> CNI_UNI_TXRX_REG_DIV_CNFG_REG_BIT_CM_CLK_DIVFACT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_CM_CLK_DIVFACT_get", A, value );

    return value;
}
static INLINE void c8_field_range_CM_CLK_DIVFACT_set( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_CM_CLK_DIVFACT_set( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_CM_CLK_DIVFACT_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_CM_CLK_DIVFACT_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_CM_CLK_DIVFACT_set", stop_bit, 7 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_CM_CLK_DIVFACT_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000110 bits 15:8) field CM_CLK_DIVFACT of register PMC_CNI_UNI_TXRX_REG_DIV_CNFG_REG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000110 bits 15:8) field CM_CLK_DIVFACT of register PMC_CNI_UNI_TXRX_REG_DIV_CNFG_REG */
        c8_reg_DIV_CNFG_REG_field_set( b_ptr,
                                       h_ptr,
                                       A,
                                       subfield_mask << (CNI_UNI_TXRX_REG_DIV_CNFG_REG_BIT_CM_CLK_DIVFACT_OFF + subfield_offset),
                                       CNI_UNI_TXRX_REG_DIV_CNFG_REG_BIT_CM_CLK_DIVFACT_OFF + subfield_offset,
                                       value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_CM_CLK_DIVFACT_get( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_CM_CLK_DIVFACT_get( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_CM_CLK_DIVFACT_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_CM_CLK_DIVFACT_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_CM_CLK_DIVFACT_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000110 bits 15:8) field CM_CLK_DIVFACT of register PMC_CNI_UNI_TXRX_REG_DIV_CNFG_REG */
    reg_value = c8_reg_DIV_CNFG_REG_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_DIV_CNFG_REG_BIT_CM_CLK_DIVFACT_MSK)
                  >> CNI_UNI_TXRX_REG_DIV_CNFG_REG_BIT_CM_CLK_DIVFACT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_DIV_CNFG_REG_BIT_CM_CLK_DIVFACT_MSK, CNI_UNI_TXRX_REG_DIV_CNFG_REG_BIT_CM_CLK_DIVFACT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_CM_CLK_DIVFACT_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_HRCLKDIV4_DIVFACT_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_HRCLKDIV4_DIVFACT_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_HRCLKDIV4_DIVFACT_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_HRCLKDIV4_DIVFACT_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_HRCLKDIV4_DIVFACT_set", A, value );

    /* (0x00000110 bits 7:4) field HRCLKDIV4_DIVFACT of register PMC_CNI_UNI_TXRX_REG_DIV_CNFG_REG */
    c8_reg_DIV_CNFG_REG_field_set( b_ptr,
                                   h_ptr,
                                   A,
                                   CNI_UNI_TXRX_REG_DIV_CNFG_REG_BIT_HRCLKDIV4_DIVFACT_MSK,
                                   CNI_UNI_TXRX_REG_DIV_CNFG_REG_BIT_HRCLKDIV4_DIVFACT_OFF,
                                   value);
}

static INLINE UINT32 c8_field_HRCLKDIV4_DIVFACT_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_HRCLKDIV4_DIVFACT_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_HRCLKDIV4_DIVFACT_get", A, 7);
    /* (0x00000110 bits 7:4) field HRCLKDIV4_DIVFACT of register PMC_CNI_UNI_TXRX_REG_DIV_CNFG_REG */
    reg_value = c8_reg_DIV_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DIV_CNFG_REG_BIT_HRCLKDIV4_DIVFACT_MSK) >> CNI_UNI_TXRX_REG_DIV_CNFG_REG_BIT_HRCLKDIV4_DIVFACT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_HRCLKDIV4_DIVFACT_get", A, value );

    return value;
}
static INLINE void c8_field_range_HRCLKDIV4_DIVFACT_set( c8_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_HRCLKDIV4_DIVFACT_set( c8_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_HRCLKDIV4_DIVFACT_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_HRCLKDIV4_DIVFACT_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_HRCLKDIV4_DIVFACT_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_HRCLKDIV4_DIVFACT_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000110 bits 7:4) field HRCLKDIV4_DIVFACT of register PMC_CNI_UNI_TXRX_REG_DIV_CNFG_REG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000110 bits 7:4) field HRCLKDIV4_DIVFACT of register PMC_CNI_UNI_TXRX_REG_DIV_CNFG_REG */
        c8_reg_DIV_CNFG_REG_field_set( b_ptr,
                                       h_ptr,
                                       A,
                                       subfield_mask << (CNI_UNI_TXRX_REG_DIV_CNFG_REG_BIT_HRCLKDIV4_DIVFACT_OFF + subfield_offset),
                                       CNI_UNI_TXRX_REG_DIV_CNFG_REG_BIT_HRCLKDIV4_DIVFACT_OFF + subfield_offset,
                                       value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_HRCLKDIV4_DIVFACT_get( c8_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_HRCLKDIV4_DIVFACT_get( c8_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_HRCLKDIV4_DIVFACT_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_HRCLKDIV4_DIVFACT_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_HRCLKDIV4_DIVFACT_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000110 bits 7:4) field HRCLKDIV4_DIVFACT of register PMC_CNI_UNI_TXRX_REG_DIV_CNFG_REG */
    reg_value = c8_reg_DIV_CNFG_REG_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_DIV_CNFG_REG_BIT_HRCLKDIV4_DIVFACT_MSK)
                  >> CNI_UNI_TXRX_REG_DIV_CNFG_REG_BIT_HRCLKDIV4_DIVFACT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_DIV_CNFG_REG_BIT_HRCLKDIV4_DIVFACT_MSK, CNI_UNI_TXRX_REG_DIV_CNFG_REG_BIT_HRCLKDIV4_DIVFACT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_HRCLKDIV4_DIVFACT_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_ADC_CLK_DIVFACT_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_ADC_CLK_DIVFACT_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ADC_CLK_DIVFACT_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_ADC_CLK_DIVFACT_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_ADC_CLK_DIVFACT_set", A, value );

    /* (0x00000110 bits 3:0) field ADC_CLK_DIVFACT of register PMC_CNI_UNI_TXRX_REG_DIV_CNFG_REG */
    c8_reg_DIV_CNFG_REG_field_set( b_ptr,
                                   h_ptr,
                                   A,
                                   CNI_UNI_TXRX_REG_DIV_CNFG_REG_BIT_ADC_CLK_DIVFACT_MSK,
                                   CNI_UNI_TXRX_REG_DIV_CNFG_REG_BIT_ADC_CLK_DIVFACT_OFF,
                                   value);
}

static INLINE UINT32 c8_field_ADC_CLK_DIVFACT_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ADC_CLK_DIVFACT_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ADC_CLK_DIVFACT_get", A, 7);
    /* (0x00000110 bits 3:0) field ADC_CLK_DIVFACT of register PMC_CNI_UNI_TXRX_REG_DIV_CNFG_REG */
    reg_value = c8_reg_DIV_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DIV_CNFG_REG_BIT_ADC_CLK_DIVFACT_MSK) >> CNI_UNI_TXRX_REG_DIV_CNFG_REG_BIT_ADC_CLK_DIVFACT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ADC_CLK_DIVFACT_get", A, value );

    return value;
}
static INLINE void c8_field_range_ADC_CLK_DIVFACT_set( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_ADC_CLK_DIVFACT_set( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_ADC_CLK_DIVFACT_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_ADC_CLK_DIVFACT_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_ADC_CLK_DIVFACT_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_ADC_CLK_DIVFACT_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000110 bits 3:0) field ADC_CLK_DIVFACT of register PMC_CNI_UNI_TXRX_REG_DIV_CNFG_REG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000110 bits 3:0) field ADC_CLK_DIVFACT of register PMC_CNI_UNI_TXRX_REG_DIV_CNFG_REG */
        c8_reg_DIV_CNFG_REG_field_set( b_ptr,
                                       h_ptr,
                                       A,
                                       subfield_mask << (CNI_UNI_TXRX_REG_DIV_CNFG_REG_BIT_ADC_CLK_DIVFACT_OFF + subfield_offset),
                                       CNI_UNI_TXRX_REG_DIV_CNFG_REG_BIT_ADC_CLK_DIVFACT_OFF + subfield_offset,
                                       value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_ADC_CLK_DIVFACT_get( c8_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_ADC_CLK_DIVFACT_get( c8_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_ADC_CLK_DIVFACT_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_ADC_CLK_DIVFACT_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_ADC_CLK_DIVFACT_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000110 bits 3:0) field ADC_CLK_DIVFACT of register PMC_CNI_UNI_TXRX_REG_DIV_CNFG_REG */
    reg_value = c8_reg_DIV_CNFG_REG_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_DIV_CNFG_REG_BIT_ADC_CLK_DIVFACT_MSK)
                  >> CNI_UNI_TXRX_REG_DIV_CNFG_REG_BIT_ADC_CLK_DIVFACT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_DIV_CNFG_REG_BIT_ADC_CLK_DIVFACT_MSK, CNI_UNI_TXRX_REG_DIV_CNFG_REG_BIT_ADC_CLK_DIVFACT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_ADC_CLK_DIVFACT_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_RAM_SHUT_DOWN_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RAM_SHUT_DOWN_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RAM_SHUT_DOWN_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RAM_SHUT_DOWN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RAM_SHUT_DOWN_set", A, value );

    /* (0x00000120 bits 5) field RAM_SHUT_DOWN of register PMC_CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG */
    c8_reg_OFF_RAM_CNFG_REG_field_set( b_ptr,
                                       h_ptr,
                                       A,
                                       CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG_BIT_RAM_SHUT_DOWN_MSK,
                                       CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG_BIT_RAM_SHUT_DOWN_OFF,
                                       value);
}

static INLINE UINT32 c8_field_RAM_SHUT_DOWN_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RAM_SHUT_DOWN_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RAM_SHUT_DOWN_get", A, 7);
    /* (0x00000120 bits 5) field RAM_SHUT_DOWN of register PMC_CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG */
    reg_value = c8_reg_OFF_RAM_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG_BIT_RAM_SHUT_DOWN_MSK) >> CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG_BIT_RAM_SHUT_DOWN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RAM_SHUT_DOWN_get", A, value );

    return value;
}
static INLINE void c8_field_RAM_DEEP_SLEEP_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RAM_DEEP_SLEEP_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RAM_DEEP_SLEEP_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RAM_DEEP_SLEEP_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RAM_DEEP_SLEEP_set", A, value );

    /* (0x00000120 bits 4) field RAM_DEEP_SLEEP of register PMC_CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG */
    c8_reg_OFF_RAM_CNFG_REG_field_set( b_ptr,
                                       h_ptr,
                                       A,
                                       CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG_BIT_RAM_DEEP_SLEEP_MSK,
                                       CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG_BIT_RAM_DEEP_SLEEP_OFF,
                                       value);
}

static INLINE UINT32 c8_field_RAM_DEEP_SLEEP_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RAM_DEEP_SLEEP_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RAM_DEEP_SLEEP_get", A, 7);
    /* (0x00000120 bits 4) field RAM_DEEP_SLEEP of register PMC_CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG */
    reg_value = c8_reg_OFF_RAM_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG_BIT_RAM_DEEP_SLEEP_MSK) >> CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG_BIT_RAM_DEEP_SLEEP_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RAM_DEEP_SLEEP_get", A, value );

    return value;
}
static INLINE void c8_field_RAM_LIGHT_SLEEP_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RAM_LIGHT_SLEEP_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RAM_LIGHT_SLEEP_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RAM_LIGHT_SLEEP_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RAM_LIGHT_SLEEP_set", A, value );

    /* (0x00000120 bits 3) field RAM_LIGHT_SLEEP of register PMC_CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG */
    c8_reg_OFF_RAM_CNFG_REG_field_set( b_ptr,
                                       h_ptr,
                                       A,
                                       CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG_BIT_RAM_LIGHT_SLEEP_MSK,
                                       CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG_BIT_RAM_LIGHT_SLEEP_OFF,
                                       value);
}

static INLINE UINT32 c8_field_RAM_LIGHT_SLEEP_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RAM_LIGHT_SLEEP_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RAM_LIGHT_SLEEP_get", A, 7);
    /* (0x00000120 bits 3) field RAM_LIGHT_SLEEP of register PMC_CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG */
    reg_value = c8_reg_OFF_RAM_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG_BIT_RAM_LIGHT_SLEEP_MSK) >> CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG_BIT_RAM_LIGHT_SLEEP_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RAM_LIGHT_SLEEP_get", A, value );

    return value;
}
static INLINE void c8_field_RAM_ERR_INJECT_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RAM_ERR_INJECT_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RAM_ERR_INJECT_set", A, 7);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RAM_ERR_INJECT_set", value, 3);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RAM_ERR_INJECT_set", A, value );

    /* (0x00000120 bits 2:1) field RAM_ERR_INJECT of register PMC_CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG */
    c8_reg_OFF_RAM_CNFG_REG_field_set( b_ptr,
                                       h_ptr,
                                       A,
                                       CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG_BIT_RAM_ERR_INJECT_MSK,
                                       CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG_BIT_RAM_ERR_INJECT_OFF,
                                       value);
}

static INLINE UINT32 c8_field_RAM_ERR_INJECT_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RAM_ERR_INJECT_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RAM_ERR_INJECT_get", A, 7);
    /* (0x00000120 bits 2:1) field RAM_ERR_INJECT of register PMC_CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG */
    reg_value = c8_reg_OFF_RAM_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG_BIT_RAM_ERR_INJECT_MSK) >> CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG_BIT_RAM_ERR_INJECT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RAM_ERR_INJECT_get", A, value );

    return value;
}
static INLINE void c8_field_range_RAM_ERR_INJECT_set( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_RAM_ERR_INJECT_set( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_RAM_ERR_INJECT_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_RAM_ERR_INJECT_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_RAM_ERR_INJECT_set", stop_bit, 1 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_RAM_ERR_INJECT_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000120 bits 2:1) field RAM_ERR_INJECT of register PMC_CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000120 bits 2:1) field RAM_ERR_INJECT of register PMC_CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG */
        c8_reg_OFF_RAM_CNFG_REG_field_set( b_ptr,
                                           h_ptr,
                                           A,
                                           subfield_mask << (CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG_BIT_RAM_ERR_INJECT_OFF + subfield_offset),
                                           CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG_BIT_RAM_ERR_INJECT_OFF + subfield_offset,
                                           value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_RAM_ERR_INJECT_get( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_RAM_ERR_INJECT_get( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_RAM_ERR_INJECT_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_RAM_ERR_INJECT_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_RAM_ERR_INJECT_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000120 bits 2:1) field RAM_ERR_INJECT of register PMC_CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG */
    reg_value = c8_reg_OFF_RAM_CNFG_REG_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG_BIT_RAM_ERR_INJECT_MSK)
                  >> CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG_BIT_RAM_ERR_INJECT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG_BIT_RAM_ERR_INJECT_MSK, CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG_BIT_RAM_ERR_INJECT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_RAM_ERR_INJECT_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_ECC_BYPASS_set( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_ECC_BYPASS_set( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ECC_BYPASS_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_ECC_BYPASS_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_ECC_BYPASS_set", A, value );

    /* (0x00000120 bits 0) field ECC_BYPASS of register PMC_CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG */
    c8_reg_OFF_RAM_CNFG_REG_field_set( b_ptr,
                                       h_ptr,
                                       A,
                                       CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG_BIT_ECC_BYPASS_MSK,
                                       CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG_BIT_ECC_BYPASS_OFF,
                                       value);
}

static INLINE UINT32 c8_field_ECC_BYPASS_get( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ECC_BYPASS_get( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ECC_BYPASS_get", A, 7);
    /* (0x00000120 bits 0) field ECC_BYPASS of register PMC_CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG */
    reg_value = c8_reg_OFF_RAM_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG_BIT_ECC_BYPASS_MSK) >> CNI_UNI_TXRX_REG_OFF_RAM_CNFG_REG_BIT_ECC_BYPASS_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ECC_BYPASS_get", A, value );

    return value;
}
static INLINE void c8_field_RX_RATE_set( c8_buffer_t *b_ptr,
                                         c8_handle_t *h_ptr,
                                         UINT32 A,
                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RX_RATE_set( c8_buffer_t *b_ptr,
                                         c8_handle_t *h_ptr,
                                         UINT32 A,
                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RX_RATE_set", A, 7);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RX_RATE_set", value, 3);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RX_RATE_set", A, value );

    /* (0x00000124 bits 1:0) field RX_RATE of register PMC_CNI_UNI_TXRX_REG_MTSB_CTRL_CNFG_REG */
    c8_reg_MTSB_CTRL_CNFG_REG_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_MTSB_CTRL_CNFG_REG_BIT_RX_RATE_MSK,
                                         CNI_UNI_TXRX_REG_MTSB_CTRL_CNFG_REG_BIT_RX_RATE_OFF,
                                         value);
}

static INLINE UINT32 c8_field_RX_RATE_get( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RX_RATE_get( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RX_RATE_get", A, 7);
    /* (0x00000124 bits 1:0) field RX_RATE of register PMC_CNI_UNI_TXRX_REG_MTSB_CTRL_CNFG_REG */
    reg_value = c8_reg_MTSB_CTRL_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_MTSB_CTRL_CNFG_REG_BIT_RX_RATE_MSK) >> CNI_UNI_TXRX_REG_MTSB_CTRL_CNFG_REG_BIT_RX_RATE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RX_RATE_get", A, value );

    return value;
}
static INLINE void c8_field_range_RX_RATE_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 start_bit,
                                               UINT32 stop_bit,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_RX_RATE_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 start_bit,
                                               UINT32 stop_bit,
                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_RX_RATE_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_RX_RATE_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_RX_RATE_set", stop_bit, 1 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_RX_RATE_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000124 bits 1:0) field RX_RATE of register PMC_CNI_UNI_TXRX_REG_MTSB_CTRL_CNFG_REG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000124 bits 1:0) field RX_RATE of register PMC_CNI_UNI_TXRX_REG_MTSB_CTRL_CNFG_REG */
        c8_reg_MTSB_CTRL_CNFG_REG_field_set( b_ptr,
                                             h_ptr,
                                             A,
                                             subfield_mask << (CNI_UNI_TXRX_REG_MTSB_CTRL_CNFG_REG_BIT_RX_RATE_OFF + subfield_offset),
                                             CNI_UNI_TXRX_REG_MTSB_CTRL_CNFG_REG_BIT_RX_RATE_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_RX_RATE_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_RX_RATE_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_RX_RATE_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_RX_RATE_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_RX_RATE_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000124 bits 1:0) field RX_RATE of register PMC_CNI_UNI_TXRX_REG_MTSB_CTRL_CNFG_REG */
    reg_value = c8_reg_MTSB_CTRL_CNFG_REG_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_MTSB_CTRL_CNFG_REG_BIT_RX_RATE_MSK)
                  >> CNI_UNI_TXRX_REG_MTSB_CTRL_CNFG_REG_BIT_RX_RATE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_MTSB_CTRL_CNFG_REG_BIT_RX_RATE_MSK, CNI_UNI_TXRX_REG_MTSB_CTRL_CNFG_REG_BIT_RX_RATE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_RX_RATE_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_VHIST_CNT_TIM_LIMIT_39_32_set( c8_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_VHIST_CNT_TIM_LIMIT_39_32_set( c8_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_VHIST_CNT_TIM_LIMIT_39_32_set", A, 7);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_VHIST_CNT_TIM_LIMIT_39_32_set", value, 255);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_VHIST_CNT_TIM_LIMIT_39_32_set", A, value );

    /* (0x00000128 bits 31:24) field VHIST_CNT_TIM_LIMIT_39_32 of register PMC_CNI_UNI_TXRX_REG_DIAG_CNFG_REG1 */
    c8_reg_DIAG_CNFG_REG1_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     CNI_UNI_TXRX_REG_DIAG_CNFG_REG1_BIT_VHIST_CNT_TIM_LIMIT_39_32_MSK,
                                     CNI_UNI_TXRX_REG_DIAG_CNFG_REG1_BIT_VHIST_CNT_TIM_LIMIT_39_32_OFF,
                                     value);
}

static INLINE UINT32 c8_field_VHIST_CNT_TIM_LIMIT_39_32_get( c8_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_VHIST_CNT_TIM_LIMIT_39_32_get( c8_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_VHIST_CNT_TIM_LIMIT_39_32_get", A, 7);
    /* (0x00000128 bits 31:24) field VHIST_CNT_TIM_LIMIT_39_32 of register PMC_CNI_UNI_TXRX_REG_DIAG_CNFG_REG1 */
    reg_value = c8_reg_DIAG_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DIAG_CNFG_REG1_BIT_VHIST_CNT_TIM_LIMIT_39_32_MSK) >> CNI_UNI_TXRX_REG_DIAG_CNFG_REG1_BIT_VHIST_CNT_TIM_LIMIT_39_32_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_VHIST_CNT_TIM_LIMIT_39_32_get", A, value );

    return value;
}
static INLINE void c8_field_range_VHIST_CNT_TIM_LIMIT_39_32_set( c8_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_VHIST_CNT_TIM_LIMIT_39_32_set( c8_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit,
                                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_VHIST_CNT_TIM_LIMIT_39_32_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_VHIST_CNT_TIM_LIMIT_39_32_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_VHIST_CNT_TIM_LIMIT_39_32_set", stop_bit, 7 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_VHIST_CNT_TIM_LIMIT_39_32_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000128 bits 31:24) field VHIST_CNT_TIM_LIMIT_39_32 of register PMC_CNI_UNI_TXRX_REG_DIAG_CNFG_REG1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000128 bits 31:24) field VHIST_CNT_TIM_LIMIT_39_32 of register PMC_CNI_UNI_TXRX_REG_DIAG_CNFG_REG1 */
        c8_reg_DIAG_CNFG_REG1_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         subfield_mask << (CNI_UNI_TXRX_REG_DIAG_CNFG_REG1_BIT_VHIST_CNT_TIM_LIMIT_39_32_OFF + subfield_offset),
                                         CNI_UNI_TXRX_REG_DIAG_CNFG_REG1_BIT_VHIST_CNT_TIM_LIMIT_39_32_OFF + subfield_offset,
                                         value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_VHIST_CNT_TIM_LIMIT_39_32_get( c8_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_VHIST_CNT_TIM_LIMIT_39_32_get( c8_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 start_bit,
                                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_VHIST_CNT_TIM_LIMIT_39_32_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_VHIST_CNT_TIM_LIMIT_39_32_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_VHIST_CNT_TIM_LIMIT_39_32_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000128 bits 31:24) field VHIST_CNT_TIM_LIMIT_39_32 of register PMC_CNI_UNI_TXRX_REG_DIAG_CNFG_REG1 */
    reg_value = c8_reg_DIAG_CNFG_REG1_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_DIAG_CNFG_REG1_BIT_VHIST_CNT_TIM_LIMIT_39_32_MSK)
                  >> CNI_UNI_TXRX_REG_DIAG_CNFG_REG1_BIT_VHIST_CNT_TIM_LIMIT_39_32_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_DIAG_CNFG_REG1_BIT_VHIST_CNT_TIM_LIMIT_39_32_MSK, CNI_UNI_TXRX_REG_DIAG_CNFG_REG1_BIT_VHIST_CNT_TIM_LIMIT_39_32_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_VHIST_CNT_TIM_LIMIT_39_32_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_VHIST_PERBIN_VALUE_RD_ENB_set( c8_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_VHIST_PERBIN_VALUE_RD_ENB_set( c8_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_VHIST_PERBIN_VALUE_RD_ENB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_VHIST_PERBIN_VALUE_RD_ENB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_VHIST_PERBIN_VALUE_RD_ENB_set", A, value );

    /* (0x00000128 bits 2) field VHIST_PERBIN_VALUE_RD_ENB of register PMC_CNI_UNI_TXRX_REG_DIAG_CNFG_REG1 */
    c8_reg_DIAG_CNFG_REG1_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     CNI_UNI_TXRX_REG_DIAG_CNFG_REG1_BIT_VHIST_PERBIN_VALUE_RD_ENB_MSK,
                                     CNI_UNI_TXRX_REG_DIAG_CNFG_REG1_BIT_VHIST_PERBIN_VALUE_RD_ENB_OFF,
                                     value);
}

static INLINE UINT32 c8_field_VHIST_PERBIN_VALUE_RD_ENB_get( c8_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_VHIST_PERBIN_VALUE_RD_ENB_get( c8_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_VHIST_PERBIN_VALUE_RD_ENB_get", A, 7);
    /* (0x00000128 bits 2) field VHIST_PERBIN_VALUE_RD_ENB of register PMC_CNI_UNI_TXRX_REG_DIAG_CNFG_REG1 */
    reg_value = c8_reg_DIAG_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DIAG_CNFG_REG1_BIT_VHIST_PERBIN_VALUE_RD_ENB_MSK) >> CNI_UNI_TXRX_REG_DIAG_CNFG_REG1_BIT_VHIST_PERBIN_VALUE_RD_ENB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_VHIST_PERBIN_VALUE_RD_ENB_get", A, value );

    return value;
}
static INLINE void c8_field_VHIST_CAPT_START_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_VHIST_CAPT_START_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_VHIST_CAPT_START_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_VHIST_CAPT_START_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_VHIST_CAPT_START_set", A, value );

    /* (0x00000128 bits 1) field VHIST_CAPT_START of register PMC_CNI_UNI_TXRX_REG_DIAG_CNFG_REG1 */
    c8_reg_DIAG_CNFG_REG1_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     CNI_UNI_TXRX_REG_DIAG_CNFG_REG1_BIT_VHIST_CAPT_START_MSK,
                                     CNI_UNI_TXRX_REG_DIAG_CNFG_REG1_BIT_VHIST_CAPT_START_OFF,
                                     value);
}

static INLINE UINT32 c8_field_VHIST_CAPT_START_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_VHIST_CAPT_START_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_VHIST_CAPT_START_get", A, 7);
    /* (0x00000128 bits 1) field VHIST_CAPT_START of register PMC_CNI_UNI_TXRX_REG_DIAG_CNFG_REG1 */
    reg_value = c8_reg_DIAG_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DIAG_CNFG_REG1_BIT_VHIST_CAPT_START_MSK) >> CNI_UNI_TXRX_REG_DIAG_CNFG_REG1_BIT_VHIST_CAPT_START_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_VHIST_CAPT_START_get", A, value );

    return value;
}
static INLINE void c8_field_VHIST_CAPT_ENB_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_VHIST_CAPT_ENB_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_VHIST_CAPT_ENB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_VHIST_CAPT_ENB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_VHIST_CAPT_ENB_set", A, value );

    /* (0x00000128 bits 0) field VHIST_CAPT_ENB of register PMC_CNI_UNI_TXRX_REG_DIAG_CNFG_REG1 */
    c8_reg_DIAG_CNFG_REG1_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     CNI_UNI_TXRX_REG_DIAG_CNFG_REG1_BIT_VHIST_CAPT_ENB_MSK,
                                     CNI_UNI_TXRX_REG_DIAG_CNFG_REG1_BIT_VHIST_CAPT_ENB_OFF,
                                     value);
}

static INLINE UINT32 c8_field_VHIST_CAPT_ENB_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_VHIST_CAPT_ENB_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_VHIST_CAPT_ENB_get", A, 7);
    /* (0x00000128 bits 0) field VHIST_CAPT_ENB of register PMC_CNI_UNI_TXRX_REG_DIAG_CNFG_REG1 */
    reg_value = c8_reg_DIAG_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DIAG_CNFG_REG1_BIT_VHIST_CAPT_ENB_MSK) >> CNI_UNI_TXRX_REG_DIAG_CNFG_REG1_BIT_VHIST_CAPT_ENB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_VHIST_CAPT_ENB_get", A, value );

    return value;
}
static INLINE void c8_field_VHIST_CNT_TIM_LIMIT_31_0_set( c8_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_VHIST_CNT_TIM_LIMIT_31_0_set( c8_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_VHIST_CNT_TIM_LIMIT_31_0_set", A, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_VHIST_CNT_TIM_LIMIT_31_0_set", A, value );

    /* (0x0000012c bits 31:0) field VHIST_CNT_TIM_LIMIT_31_0 of register PMC_CNI_UNI_TXRX_REG_DIAG_CNFG_REG2 */
    c8_reg_DIAG_CNFG_REG2_field_set( b_ptr,
                                     h_ptr,
                                     A,
                                     CNI_UNI_TXRX_REG_DIAG_CNFG_REG2_BIT_VHIST_CNT_TIM_LIMIT_31_0_MSK,
                                     CNI_UNI_TXRX_REG_DIAG_CNFG_REG2_BIT_VHIST_CNT_TIM_LIMIT_31_0_OFF,
                                     value);
}

static INLINE UINT32 c8_field_VHIST_CNT_TIM_LIMIT_31_0_get( c8_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_VHIST_CNT_TIM_LIMIT_31_0_get( c8_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_VHIST_CNT_TIM_LIMIT_31_0_get", A, 7);
    /* (0x0000012c bits 31:0) field VHIST_CNT_TIM_LIMIT_31_0 of register PMC_CNI_UNI_TXRX_REG_DIAG_CNFG_REG2 */
    reg_value = c8_reg_DIAG_CNFG_REG2_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DIAG_CNFG_REG2_BIT_VHIST_CNT_TIM_LIMIT_31_0_MSK) >> CNI_UNI_TXRX_REG_DIAG_CNFG_REG2_BIT_VHIST_CNT_TIM_LIMIT_31_0_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_VHIST_CNT_TIM_LIMIT_31_0_get", A, value );

    return value;
}
static INLINE void c8_field_range_VHIST_CNT_TIM_LIMIT_31_0_set( c8_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_VHIST_CNT_TIM_LIMIT_31_0_set( c8_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 start_bit,
                                                                UINT32 stop_bit,
                                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_VHIST_CNT_TIM_LIMIT_31_0_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_VHIST_CNT_TIM_LIMIT_31_0_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_VHIST_CNT_TIM_LIMIT_31_0_set", stop_bit, 31 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_VHIST_CNT_TIM_LIMIT_31_0_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000012c bits 31:0) field VHIST_CNT_TIM_LIMIT_31_0 of register PMC_CNI_UNI_TXRX_REG_DIAG_CNFG_REG2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000012c bits 31:0) field VHIST_CNT_TIM_LIMIT_31_0 of register PMC_CNI_UNI_TXRX_REG_DIAG_CNFG_REG2 */
        c8_reg_DIAG_CNFG_REG2_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         subfield_mask << (CNI_UNI_TXRX_REG_DIAG_CNFG_REG2_BIT_VHIST_CNT_TIM_LIMIT_31_0_OFF + subfield_offset),
                                         CNI_UNI_TXRX_REG_DIAG_CNFG_REG2_BIT_VHIST_CNT_TIM_LIMIT_31_0_OFF + subfield_offset,
                                         value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_VHIST_CNT_TIM_LIMIT_31_0_get( c8_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_VHIST_CNT_TIM_LIMIT_31_0_get( c8_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_VHIST_CNT_TIM_LIMIT_31_0_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_VHIST_CNT_TIM_LIMIT_31_0_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_VHIST_CNT_TIM_LIMIT_31_0_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000012c bits 31:0) field VHIST_CNT_TIM_LIMIT_31_0 of register PMC_CNI_UNI_TXRX_REG_DIAG_CNFG_REG2 */
    reg_value = c8_reg_DIAG_CNFG_REG2_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_DIAG_CNFG_REG2_BIT_VHIST_CNT_TIM_LIMIT_31_0_MSK)
                  >> CNI_UNI_TXRX_REG_DIAG_CNFG_REG2_BIT_VHIST_CNT_TIM_LIMIT_31_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_DIAG_CNFG_REG2_BIT_VHIST_CNT_TIM_LIMIT_31_0_MSK, CNI_UNI_TXRX_REG_DIAG_CNFG_REG2_BIT_VHIST_CNT_TIM_LIMIT_31_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_VHIST_CNT_TIM_LIMIT_31_0_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_TIME_REVERSE_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_TIME_REVERSE_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TIME_REVERSE_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_TIME_REVERSE_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_TIME_REVERSE_set", A, value );

    /* (0x00000140 bits 8) field TIME_REVERSE of register PMC_CNI_UNI_TXRX_REG_SIPO_BIST_CNFG_REG */
    c8_reg_SIPO_BIST_CNFG_REG_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_SIPO_BIST_CNFG_REG_BIT_TIME_REVERSE_MSK,
                                         CNI_UNI_TXRX_REG_SIPO_BIST_CNFG_REG_BIT_TIME_REVERSE_OFF,
                                         value);
}

static INLINE UINT32 c8_field_TIME_REVERSE_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_TIME_REVERSE_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TIME_REVERSE_get", A, 7);
    /* (0x00000140 bits 8) field TIME_REVERSE of register PMC_CNI_UNI_TXRX_REG_SIPO_BIST_CNFG_REG */
    reg_value = c8_reg_SIPO_BIST_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_SIPO_BIST_CNFG_REG_BIT_TIME_REVERSE_MSK) >> CNI_UNI_TXRX_REG_SIPO_BIST_CNFG_REG_BIT_TIME_REVERSE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_TIME_REVERSE_get", A, value );

    return value;
}
static INLINE void c8_field_SIPO_BIST_SEL_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_SIPO_BIST_SEL_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SIPO_BIST_SEL_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_SIPO_BIST_SEL_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_SIPO_BIST_SEL_set", A, value );

    /* (0x00000140 bits 6:4) field SIPO_BIST_SEL of register PMC_CNI_UNI_TXRX_REG_SIPO_BIST_CNFG_REG */
    c8_reg_SIPO_BIST_CNFG_REG_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_SIPO_BIST_CNFG_REG_BIT_SIPO_BIST_SEL_MSK,
                                         CNI_UNI_TXRX_REG_SIPO_BIST_CNFG_REG_BIT_SIPO_BIST_SEL_OFF,
                                         value);
}

static INLINE UINT32 c8_field_SIPO_BIST_SEL_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_SIPO_BIST_SEL_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SIPO_BIST_SEL_get", A, 7);
    /* (0x00000140 bits 6:4) field SIPO_BIST_SEL of register PMC_CNI_UNI_TXRX_REG_SIPO_BIST_CNFG_REG */
    reg_value = c8_reg_SIPO_BIST_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_SIPO_BIST_CNFG_REG_BIT_SIPO_BIST_SEL_MSK) >> CNI_UNI_TXRX_REG_SIPO_BIST_CNFG_REG_BIT_SIPO_BIST_SEL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_SIPO_BIST_SEL_get", A, value );

    return value;
}
static INLINE void c8_field_range_SIPO_BIST_SEL_set( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_SIPO_BIST_SEL_set( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_SIPO_BIST_SEL_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_SIPO_BIST_SEL_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_SIPO_BIST_SEL_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_SIPO_BIST_SEL_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000140 bits 6:4) field SIPO_BIST_SEL of register PMC_CNI_UNI_TXRX_REG_SIPO_BIST_CNFG_REG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000140 bits 6:4) field SIPO_BIST_SEL of register PMC_CNI_UNI_TXRX_REG_SIPO_BIST_CNFG_REG */
        c8_reg_SIPO_BIST_CNFG_REG_field_set( b_ptr,
                                             h_ptr,
                                             A,
                                             subfield_mask << (CNI_UNI_TXRX_REG_SIPO_BIST_CNFG_REG_BIT_SIPO_BIST_SEL_OFF + subfield_offset),
                                             CNI_UNI_TXRX_REG_SIPO_BIST_CNFG_REG_BIT_SIPO_BIST_SEL_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_SIPO_BIST_SEL_get( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_SIPO_BIST_SEL_get( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_SIPO_BIST_SEL_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_SIPO_BIST_SEL_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_SIPO_BIST_SEL_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000140 bits 6:4) field SIPO_BIST_SEL of register PMC_CNI_UNI_TXRX_REG_SIPO_BIST_CNFG_REG */
    reg_value = c8_reg_SIPO_BIST_CNFG_REG_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_SIPO_BIST_CNFG_REG_BIT_SIPO_BIST_SEL_MSK)
                  >> CNI_UNI_TXRX_REG_SIPO_BIST_CNFG_REG_BIT_SIPO_BIST_SEL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_SIPO_BIST_CNFG_REG_BIT_SIPO_BIST_SEL_MSK, CNI_UNI_TXRX_REG_SIPO_BIST_CNFG_REG_BIT_SIPO_BIST_SEL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_SIPO_BIST_SEL_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_SIPO_BIST_EN_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_SIPO_BIST_EN_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SIPO_BIST_EN_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_SIPO_BIST_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_SIPO_BIST_EN_set", A, value );

    /* (0x00000140 bits 0) field SIPO_BIST_EN of register PMC_CNI_UNI_TXRX_REG_SIPO_BIST_CNFG_REG */
    c8_reg_SIPO_BIST_CNFG_REG_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_SIPO_BIST_CNFG_REG_BIT_SIPO_BIST_EN_MSK,
                                         CNI_UNI_TXRX_REG_SIPO_BIST_CNFG_REG_BIT_SIPO_BIST_EN_OFF,
                                         value);
}

static INLINE UINT32 c8_field_SIPO_BIST_EN_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_SIPO_BIST_EN_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SIPO_BIST_EN_get", A, 7);
    /* (0x00000140 bits 0) field SIPO_BIST_EN of register PMC_CNI_UNI_TXRX_REG_SIPO_BIST_CNFG_REG */
    reg_value = c8_reg_SIPO_BIST_CNFG_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_SIPO_BIST_CNFG_REG_BIT_SIPO_BIST_EN_MSK) >> CNI_UNI_TXRX_REG_SIPO_BIST_CNFG_REG_BIT_SIPO_BIST_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_SIPO_BIST_EN_get", A, value );

    return value;
}
static INLINE void c8_field_GEN_USR_PAT_39_32_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_GEN_USR_PAT_39_32_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_GEN_USR_PAT_39_32_set", A, 7);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_GEN_USR_PAT_39_32_set", value, 255);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_GEN_USR_PAT_39_32_set", A, value );

    /* (0x00000150 bits 31:24) field GEN_USR_PAT_39_32 of register PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1 */
    c8_reg_PATT_GEN_CNFG_REG1_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_GEN_USR_PAT_39_32_MSK,
                                         CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_GEN_USR_PAT_39_32_OFF,
                                         value);
}

static INLINE UINT32 c8_field_GEN_USR_PAT_39_32_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_GEN_USR_PAT_39_32_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_GEN_USR_PAT_39_32_get", A, 7);
    /* (0x00000150 bits 31:24) field GEN_USR_PAT_39_32 of register PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1 */
    reg_value = c8_reg_PATT_GEN_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_GEN_USR_PAT_39_32_MSK) >> CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_GEN_USR_PAT_39_32_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_GEN_USR_PAT_39_32_get", A, value );

    return value;
}
static INLINE void c8_field_range_GEN_USR_PAT_39_32_set( c8_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_GEN_USR_PAT_39_32_set( c8_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_GEN_USR_PAT_39_32_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_GEN_USR_PAT_39_32_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_GEN_USR_PAT_39_32_set", stop_bit, 7 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_GEN_USR_PAT_39_32_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000150 bits 31:24) field GEN_USR_PAT_39_32 of register PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000150 bits 31:24) field GEN_USR_PAT_39_32 of register PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1 */
        c8_reg_PATT_GEN_CNFG_REG1_field_set( b_ptr,
                                             h_ptr,
                                             A,
                                             subfield_mask << (CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_GEN_USR_PAT_39_32_OFF + subfield_offset),
                                             CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_GEN_USR_PAT_39_32_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_GEN_USR_PAT_39_32_get( c8_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_GEN_USR_PAT_39_32_get( c8_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_GEN_USR_PAT_39_32_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_GEN_USR_PAT_39_32_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_GEN_USR_PAT_39_32_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000150 bits 31:24) field GEN_USR_PAT_39_32 of register PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1 */
    reg_value = c8_reg_PATT_GEN_CNFG_REG1_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_GEN_USR_PAT_39_32_MSK)
                  >> CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_GEN_USR_PAT_39_32_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_GEN_USR_PAT_39_32_MSK, CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_GEN_USR_PAT_39_32_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_GEN_USR_PAT_39_32_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_PATT_BUS_WIDTH_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_PATT_BUS_WIDTH_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PATT_BUS_WIDTH_set", A, 7);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_PATT_BUS_WIDTH_set", value, 63);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_PATT_BUS_WIDTH_set", A, value );

    /* (0x00000150 bits 14:9) field PATT_BUS_WIDTH of register PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1 */
    c8_reg_PATT_GEN_CNFG_REG1_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_PATT_BUS_WIDTH_MSK,
                                         CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_PATT_BUS_WIDTH_OFF,
                                         value);
}

static INLINE UINT32 c8_field_PATT_BUS_WIDTH_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PATT_BUS_WIDTH_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PATT_BUS_WIDTH_get", A, 7);
    /* (0x00000150 bits 14:9) field PATT_BUS_WIDTH of register PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1 */
    reg_value = c8_reg_PATT_GEN_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_PATT_BUS_WIDTH_MSK) >> CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_PATT_BUS_WIDTH_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PATT_BUS_WIDTH_get", A, value );

    return value;
}
static INLINE void c8_field_range_PATT_BUS_WIDTH_set( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_PATT_BUS_WIDTH_set( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_PATT_BUS_WIDTH_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_PATT_BUS_WIDTH_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_PATT_BUS_WIDTH_set", stop_bit, 5 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_PATT_BUS_WIDTH_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000150 bits 14:9) field PATT_BUS_WIDTH of register PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000150 bits 14:9) field PATT_BUS_WIDTH of register PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1 */
        c8_reg_PATT_GEN_CNFG_REG1_field_set( b_ptr,
                                             h_ptr,
                                             A,
                                             subfield_mask << (CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_PATT_BUS_WIDTH_OFF + subfield_offset),
                                             CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_PATT_BUS_WIDTH_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_PATT_BUS_WIDTH_get( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_PATT_BUS_WIDTH_get( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_PATT_BUS_WIDTH_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_PATT_BUS_WIDTH_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_PATT_BUS_WIDTH_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000150 bits 14:9) field PATT_BUS_WIDTH of register PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1 */
    reg_value = c8_reg_PATT_GEN_CNFG_REG1_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_PATT_BUS_WIDTH_MSK)
                  >> CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_PATT_BUS_WIDTH_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_PATT_BUS_WIDTH_MSK, CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_PATT_BUS_WIDTH_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_PATT_BUS_WIDTH_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_GEN_ERR_INJ_set( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_GEN_ERR_INJ_set( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_GEN_ERR_INJ_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_GEN_ERR_INJ_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_GEN_ERR_INJ_set", A, value );

    /* (0x00000150 bits 8) field GEN_ERR_INJ of register PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1 */
    c8_reg_PATT_GEN_CNFG_REG1_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_GEN_ERR_INJ_MSK,
                                         CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_GEN_ERR_INJ_OFF,
                                         value);
}

static INLINE UINT32 c8_field_GEN_ERR_INJ_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_GEN_ERR_INJ_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_GEN_ERR_INJ_get", A, 7);
    /* (0x00000150 bits 8) field GEN_ERR_INJ of register PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1 */
    reg_value = c8_reg_PATT_GEN_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_GEN_ERR_INJ_MSK) >> CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_GEN_ERR_INJ_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_GEN_ERR_INJ_get", A, value );

    return value;
}
static INLINE void c8_field_GEN_INV_set( c8_buffer_t *b_ptr,
                                         c8_handle_t *h_ptr,
                                         UINT32 A,
                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_GEN_INV_set( c8_buffer_t *b_ptr,
                                         c8_handle_t *h_ptr,
                                         UINT32 A,
                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_GEN_INV_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_GEN_INV_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_GEN_INV_set", A, value );

    /* (0x00000150 bits 7) field GEN_INV of register PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1 */
    c8_reg_PATT_GEN_CNFG_REG1_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_GEN_INV_MSK,
                                         CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_GEN_INV_OFF,
                                         value);
}

static INLINE UINT32 c8_field_GEN_INV_get( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_GEN_INV_get( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_GEN_INV_get", A, 7);
    /* (0x00000150 bits 7) field GEN_INV of register PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1 */
    reg_value = c8_reg_PATT_GEN_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_GEN_INV_MSK) >> CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_GEN_INV_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_GEN_INV_get", A, value );

    return value;
}
static INLINE void c8_field_GEN_MODE_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_GEN_MODE_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_GEN_MODE_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_GEN_MODE_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_GEN_MODE_set", A, value );

    /* (0x00000150 bits 6:3) field GEN_MODE of register PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1 */
    c8_reg_PATT_GEN_CNFG_REG1_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_GEN_MODE_MSK,
                                         CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_GEN_MODE_OFF,
                                         value);
}

static INLINE UINT32 c8_field_GEN_MODE_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_GEN_MODE_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_GEN_MODE_get", A, 7);
    /* (0x00000150 bits 6:3) field GEN_MODE of register PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1 */
    reg_value = c8_reg_PATT_GEN_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_GEN_MODE_MSK) >> CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_GEN_MODE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_GEN_MODE_get", A, value );

    return value;
}
static INLINE void c8_field_range_GEN_MODE_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 start_bit,
                                                UINT32 stop_bit,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_GEN_MODE_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 start_bit,
                                                UINT32 stop_bit,
                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_GEN_MODE_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_GEN_MODE_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_GEN_MODE_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_GEN_MODE_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000150 bits 6:3) field GEN_MODE of register PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000150 bits 6:3) field GEN_MODE of register PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1 */
        c8_reg_PATT_GEN_CNFG_REG1_field_set( b_ptr,
                                             h_ptr,
                                             A,
                                             subfield_mask << (CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_GEN_MODE_OFF + subfield_offset),
                                             CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_GEN_MODE_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_GEN_MODE_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_GEN_MODE_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_GEN_MODE_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_GEN_MODE_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_GEN_MODE_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000150 bits 6:3) field GEN_MODE of register PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1 */
    reg_value = c8_reg_PATT_GEN_CNFG_REG1_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_GEN_MODE_MSK)
                  >> CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_GEN_MODE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_GEN_MODE_MSK, CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_GEN_MODE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_GEN_MODE_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_INV_TX_DATA_set( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_INV_TX_DATA_set( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_INV_TX_DATA_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_INV_TX_DATA_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_INV_TX_DATA_set", A, value );

    /* (0x00000150 bits 2) field INV_TX_DATA of register PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1 */
    c8_reg_PATT_GEN_CNFG_REG1_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_INV_TX_DATA_MSK,
                                         CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_INV_TX_DATA_OFF,
                                         value);
}

static INLINE UINT32 c8_field_INV_TX_DATA_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_INV_TX_DATA_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_INV_TX_DATA_get", A, 7);
    /* (0x00000150 bits 2) field INV_TX_DATA of register PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1 */
    reg_value = c8_reg_PATT_GEN_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_INV_TX_DATA_MSK) >> CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_INV_TX_DATA_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_INV_TX_DATA_get", A, value );

    return value;
}
static INLINE void c8_field_PATT_GEN_SEL_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_PATT_GEN_SEL_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PATT_GEN_SEL_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_PATT_GEN_SEL_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_PATT_GEN_SEL_set", A, value );

    /* (0x00000150 bits 1) field PATT_GEN_SEL of register PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1 */
    c8_reg_PATT_GEN_CNFG_REG1_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_PATT_GEN_SEL_MSK,
                                         CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_PATT_GEN_SEL_OFF,
                                         value);
}

static INLINE UINT32 c8_field_PATT_GEN_SEL_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PATT_GEN_SEL_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PATT_GEN_SEL_get", A, 7);
    /* (0x00000150 bits 1) field PATT_GEN_SEL of register PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1 */
    reg_value = c8_reg_PATT_GEN_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_PATT_GEN_SEL_MSK) >> CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_PATT_GEN_SEL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PATT_GEN_SEL_get", A, value );

    return value;
}
static INLINE void c8_field_GEN_EN_set( c8_buffer_t *b_ptr,
                                        c8_handle_t *h_ptr,
                                        UINT32 A,
                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_GEN_EN_set( c8_buffer_t *b_ptr,
                                        c8_handle_t *h_ptr,
                                        UINT32 A,
                                        UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_GEN_EN_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_GEN_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_GEN_EN_set", A, value );

    /* (0x00000150 bits 0) field GEN_EN of register PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1 */
    c8_reg_PATT_GEN_CNFG_REG1_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_GEN_EN_MSK,
                                         CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_GEN_EN_OFF,
                                         value);
}

static INLINE UINT32 c8_field_GEN_EN_get( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_GEN_EN_get( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_GEN_EN_get", A, 7);
    /* (0x00000150 bits 0) field GEN_EN of register PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1 */
    reg_value = c8_reg_PATT_GEN_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_GEN_EN_MSK) >> CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG1_BIT_GEN_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_GEN_EN_get", A, value );

    return value;
}
static INLINE void c8_field_GEN_USR_PAT_31_0_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_GEN_USR_PAT_31_0_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_GEN_USR_PAT_31_0_set", A, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_GEN_USR_PAT_31_0_set", A, value );

    /* (0x00000154 bits 31:0) field GEN_USR_PAT_31_0 of register PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG2 */
    c8_reg_PATT_GEN_CNFG_REG2_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG2_BIT_GEN_USR_PAT_31_0_MSK,
                                         CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG2_BIT_GEN_USR_PAT_31_0_OFF,
                                         value);
}

static INLINE UINT32 c8_field_GEN_USR_PAT_31_0_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_GEN_USR_PAT_31_0_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_GEN_USR_PAT_31_0_get", A, 7);
    /* (0x00000154 bits 31:0) field GEN_USR_PAT_31_0 of register PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG2 */
    reg_value = c8_reg_PATT_GEN_CNFG_REG2_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG2_BIT_GEN_USR_PAT_31_0_MSK) >> CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG2_BIT_GEN_USR_PAT_31_0_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_GEN_USR_PAT_31_0_get", A, value );

    return value;
}
static INLINE void c8_field_range_GEN_USR_PAT_31_0_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_GEN_USR_PAT_31_0_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_GEN_USR_PAT_31_0_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_GEN_USR_PAT_31_0_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_GEN_USR_PAT_31_0_set", stop_bit, 31 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_GEN_USR_PAT_31_0_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000154 bits 31:0) field GEN_USR_PAT_31_0 of register PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000154 bits 31:0) field GEN_USR_PAT_31_0 of register PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG2 */
        c8_reg_PATT_GEN_CNFG_REG2_field_set( b_ptr,
                                             h_ptr,
                                             A,
                                             subfield_mask << (CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG2_BIT_GEN_USR_PAT_31_0_OFF + subfield_offset),
                                             CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG2_BIT_GEN_USR_PAT_31_0_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_GEN_USR_PAT_31_0_get( c8_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_GEN_USR_PAT_31_0_get( c8_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_GEN_USR_PAT_31_0_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_GEN_USR_PAT_31_0_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_GEN_USR_PAT_31_0_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000154 bits 31:0) field GEN_USR_PAT_31_0 of register PMC_CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG2 */
    reg_value = c8_reg_PATT_GEN_CNFG_REG2_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG2_BIT_GEN_USR_PAT_31_0_MSK)
                  >> CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG2_BIT_GEN_USR_PAT_31_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG2_BIT_GEN_USR_PAT_31_0_MSK, CNI_UNI_TXRX_REG_PATT_GEN_CNFG_REG2_BIT_GEN_USR_PAT_31_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_GEN_USR_PAT_31_0_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_CHK_USR_PAT_39_32_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_CHK_USR_PAT_39_32_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_CHK_USR_PAT_39_32_set", A, 7);
    if (value > 255)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_CHK_USR_PAT_39_32_set", value, 255);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_CHK_USR_PAT_39_32_set", A, value );

    /* (0x00000158 bits 31:24) field CHK_USR_PAT_39_32 of register PMC_CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1 */
    c8_reg_PATT_CHK_CNFG_REG1_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1_BIT_CHK_USR_PAT_39_32_MSK,
                                         CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1_BIT_CHK_USR_PAT_39_32_OFF,
                                         value);
}

static INLINE UINT32 c8_field_CHK_USR_PAT_39_32_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_CHK_USR_PAT_39_32_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_CHK_USR_PAT_39_32_get", A, 7);
    /* (0x00000158 bits 31:24) field CHK_USR_PAT_39_32 of register PMC_CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1 */
    reg_value = c8_reg_PATT_CHK_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1_BIT_CHK_USR_PAT_39_32_MSK) >> CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1_BIT_CHK_USR_PAT_39_32_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_CHK_USR_PAT_39_32_get", A, value );

    return value;
}
static INLINE void c8_field_range_CHK_USR_PAT_39_32_set( c8_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_CHK_USR_PAT_39_32_set( c8_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_CHK_USR_PAT_39_32_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_CHK_USR_PAT_39_32_set", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_CHK_USR_PAT_39_32_set", stop_bit, 7 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_CHK_USR_PAT_39_32_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000158 bits 31:24) field CHK_USR_PAT_39_32 of register PMC_CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000158 bits 31:24) field CHK_USR_PAT_39_32 of register PMC_CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1 */
        c8_reg_PATT_CHK_CNFG_REG1_field_set( b_ptr,
                                             h_ptr,
                                             A,
                                             subfield_mask << (CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1_BIT_CHK_USR_PAT_39_32_OFF + subfield_offset),
                                             CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1_BIT_CHK_USR_PAT_39_32_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_CHK_USR_PAT_39_32_get( c8_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_CHK_USR_PAT_39_32_get( c8_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_CHK_USR_PAT_39_32_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_CHK_USR_PAT_39_32_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_CHK_USR_PAT_39_32_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000158 bits 31:24) field CHK_USR_PAT_39_32 of register PMC_CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1 */
    reg_value = c8_reg_PATT_CHK_CNFG_REG1_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1_BIT_CHK_USR_PAT_39_32_MSK)
                  >> CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1_BIT_CHK_USR_PAT_39_32_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1_BIT_CHK_USR_PAT_39_32_MSK, CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1_BIT_CHK_USR_PAT_39_32_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_CHK_USR_PAT_39_32_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_CHK_READ_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_CHK_READ_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_CHK_READ_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_CHK_READ_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_CHK_READ_set", A, value );

    /* (0x00000158 bits 8) field CHK_READ of register PMC_CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1 */
    c8_reg_PATT_CHK_CNFG_REG1_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1_BIT_CHK_READ_MSK,
                                         CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1_BIT_CHK_READ_OFF,
                                         value);
}

static INLINE UINT32 c8_field_CHK_READ_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_CHK_READ_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_CHK_READ_get", A, 7);
    /* (0x00000158 bits 8) field CHK_READ of register PMC_CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1 */
    reg_value = c8_reg_PATT_CHK_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1_BIT_CHK_READ_MSK) >> CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1_BIT_CHK_READ_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_CHK_READ_get", A, value );

    return value;
}
static INLINE void c8_field_CHK_INV_set( c8_buffer_t *b_ptr,
                                         c8_handle_t *h_ptr,
                                         UINT32 A,
                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_CHK_INV_set( c8_buffer_t *b_ptr,
                                         c8_handle_t *h_ptr,
                                         UINT32 A,
                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_CHK_INV_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_CHK_INV_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_CHK_INV_set", A, value );

    /* (0x00000158 bits 7) field CHK_INV of register PMC_CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1 */
    c8_reg_PATT_CHK_CNFG_REG1_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1_BIT_CHK_INV_MSK,
                                         CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1_BIT_CHK_INV_OFF,
                                         value);
}

static INLINE UINT32 c8_field_CHK_INV_get( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_CHK_INV_get( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_CHK_INV_get", A, 7);
    /* (0x00000158 bits 7) field CHK_INV of register PMC_CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1 */
    reg_value = c8_reg_PATT_CHK_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1_BIT_CHK_INV_MSK) >> CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1_BIT_CHK_INV_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_CHK_INV_get", A, value );

    return value;
}
static INLINE void c8_field_CHK_MODE_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_CHK_MODE_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_CHK_MODE_set", A, 7);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_CHK_MODE_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_CHK_MODE_set", A, value );

    /* (0x00000158 bits 6:3) field CHK_MODE of register PMC_CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1 */
    c8_reg_PATT_CHK_CNFG_REG1_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1_BIT_CHK_MODE_MSK,
                                         CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1_BIT_CHK_MODE_OFF,
                                         value);
}

static INLINE UINT32 c8_field_CHK_MODE_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_CHK_MODE_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_CHK_MODE_get", A, 7);
    /* (0x00000158 bits 6:3) field CHK_MODE of register PMC_CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1 */
    reg_value = c8_reg_PATT_CHK_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1_BIT_CHK_MODE_MSK) >> CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1_BIT_CHK_MODE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_CHK_MODE_get", A, value );

    return value;
}
static INLINE void c8_field_range_CHK_MODE_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 start_bit,
                                                UINT32 stop_bit,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_CHK_MODE_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 start_bit,
                                                UINT32 stop_bit,
                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_CHK_MODE_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_CHK_MODE_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_CHK_MODE_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_CHK_MODE_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000158 bits 6:3) field CHK_MODE of register PMC_CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000158 bits 6:3) field CHK_MODE of register PMC_CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1 */
        c8_reg_PATT_CHK_CNFG_REG1_field_set( b_ptr,
                                             h_ptr,
                                             A,
                                             subfield_mask << (CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1_BIT_CHK_MODE_OFF + subfield_offset),
                                             CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1_BIT_CHK_MODE_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_CHK_MODE_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_CHK_MODE_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_CHK_MODE_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_CHK_MODE_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_CHK_MODE_get", stop_bit, 3 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000158 bits 6:3) field CHK_MODE of register PMC_CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1 */
    reg_value = c8_reg_PATT_CHK_CNFG_REG1_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1_BIT_CHK_MODE_MSK)
                  >> CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1_BIT_CHK_MODE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1_BIT_CHK_MODE_MSK, CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1_BIT_CHK_MODE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_CHK_MODE_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_CHK_EN_set( c8_buffer_t *b_ptr,
                                        c8_handle_t *h_ptr,
                                        UINT32 A,
                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_CHK_EN_set( c8_buffer_t *b_ptr,
                                        c8_handle_t *h_ptr,
                                        UINT32 A,
                                        UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_CHK_EN_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_CHK_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_CHK_EN_set", A, value );

    /* (0x00000158 bits 0) field CHK_EN of register PMC_CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1 */
    c8_reg_PATT_CHK_CNFG_REG1_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1_BIT_CHK_EN_MSK,
                                         CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1_BIT_CHK_EN_OFF,
                                         value);
}

static INLINE UINT32 c8_field_CHK_EN_get( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_CHK_EN_get( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_CHK_EN_get", A, 7);
    /* (0x00000158 bits 0) field CHK_EN of register PMC_CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1 */
    reg_value = c8_reg_PATT_CHK_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1_BIT_CHK_EN_MSK) >> CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG1_BIT_CHK_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_CHK_EN_get", A, value );

    return value;
}
static INLINE void c8_field_CHK_USR_PAT_31_0_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_CHK_USR_PAT_31_0_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_CHK_USR_PAT_31_0_set", A, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_CHK_USR_PAT_31_0_set", A, value );

    /* (0x0000015c bits 31:0) field CHK_USR_PAT_31_0 of register PMC_CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG2 */
    c8_reg_PATT_CHK_CNFG_REG2_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG2_BIT_CHK_USR_PAT_31_0_MSK,
                                         CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG2_BIT_CHK_USR_PAT_31_0_OFF,
                                         value);
}

static INLINE UINT32 c8_field_CHK_USR_PAT_31_0_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_CHK_USR_PAT_31_0_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_CHK_USR_PAT_31_0_get", A, 7);
    /* (0x0000015c bits 31:0) field CHK_USR_PAT_31_0 of register PMC_CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG2 */
    reg_value = c8_reg_PATT_CHK_CNFG_REG2_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG2_BIT_CHK_USR_PAT_31_0_MSK) >> CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG2_BIT_CHK_USR_PAT_31_0_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_CHK_USR_PAT_31_0_get", A, value );

    return value;
}
static INLINE void c8_field_range_CHK_USR_PAT_31_0_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_CHK_USR_PAT_31_0_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_CHK_USR_PAT_31_0_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_CHK_USR_PAT_31_0_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_CHK_USR_PAT_31_0_set", stop_bit, 31 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_CHK_USR_PAT_31_0_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000015c bits 31:0) field CHK_USR_PAT_31_0 of register PMC_CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000015c bits 31:0) field CHK_USR_PAT_31_0 of register PMC_CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG2 */
        c8_reg_PATT_CHK_CNFG_REG2_field_set( b_ptr,
                                             h_ptr,
                                             A,
                                             subfield_mask << (CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG2_BIT_CHK_USR_PAT_31_0_OFF + subfield_offset),
                                             CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG2_BIT_CHK_USR_PAT_31_0_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_CHK_USR_PAT_31_0_get( c8_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_CHK_USR_PAT_31_0_get( c8_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_CHK_USR_PAT_31_0_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_CHK_USR_PAT_31_0_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_CHK_USR_PAT_31_0_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000015c bits 31:0) field CHK_USR_PAT_31_0 of register PMC_CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG2 */
    reg_value = c8_reg_PATT_CHK_CNFG_REG2_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG2_BIT_CHK_USR_PAT_31_0_MSK)
                  >> CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG2_BIT_CHK_USR_PAT_31_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG2_BIT_CHK_USR_PAT_31_0_MSK, CNI_UNI_TXRX_REG_PATT_CHK_CNFG_REG2_BIT_CHK_USR_PAT_31_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_CHK_USR_PAT_31_0_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_TX_PSELI_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_TX_PSELI_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_PSELI_set", A, 7);
    if (value > 131071)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_TX_PSELI_set", value, 131071);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_TX_PSELI_set", A, value );

    /* (0x00000170 bits 16:0) field TX_PSELI of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG1 */
    c8_reg_TX_CTRL_CNFG_REG1_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG1_BIT_TX_PSELI_MSK,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG1_BIT_TX_PSELI_OFF,
                                        value);
}

static INLINE UINT32 c8_field_TX_PSELI_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_TX_PSELI_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_PSELI_get", A, 7);
    /* (0x00000170 bits 16:0) field TX_PSELI of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG1 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG1_BIT_TX_PSELI_MSK) >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG1_BIT_TX_PSELI_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_TX_PSELI_get", A, value );

    return value;
}
static INLINE void c8_field_range_TX_PSELI_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 start_bit,
                                                UINT32 stop_bit,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_TX_PSELI_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 start_bit,
                                                UINT32 stop_bit,
                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_TX_PSELI_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_TX_PSELI_set", stop_bit, start_bit );
    if (stop_bit > 16) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_TX_PSELI_set", stop_bit, 16 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_TX_PSELI_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000170 bits 16:0) field TX_PSELI of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 16) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 16;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000170 bits 16:0) field TX_PSELI of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG1 */
        c8_reg_TX_CTRL_CNFG_REG1_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            subfield_mask << (CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG1_BIT_TX_PSELI_OFF + subfield_offset),
                                            CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG1_BIT_TX_PSELI_OFF + subfield_offset,
                                            value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_TX_PSELI_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_TX_PSELI_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_TX_PSELI_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_TX_PSELI_get", stop_bit, start_bit );
    if (stop_bit > 16) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_TX_PSELI_get", stop_bit, 16 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 16) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 16;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000170 bits 16:0) field TX_PSELI of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG1 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG1_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG1_BIT_TX_PSELI_MSK)
                  >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG1_BIT_TX_PSELI_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG1_BIT_TX_PSELI_MSK, CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG1_BIT_TX_PSELI_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_TX_PSELI_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_TX_DENI_set( c8_buffer_t *b_ptr,
                                         c8_handle_t *h_ptr,
                                         UINT32 A,
                                         UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_TX_DENI_set( c8_buffer_t *b_ptr,
                                         c8_handle_t *h_ptr,
                                         UINT32 A,
                                         UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_DENI_set", A, 7);
    if (value > 131071)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_TX_DENI_set", value, 131071);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_TX_DENI_set", A, value );

    /* (0x00000174 bits 16:0) field TX_DENI of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG2 */
    c8_reg_TX_CTRL_CNFG_REG2_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG2_BIT_TX_DENI_MSK,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG2_BIT_TX_DENI_OFF,
                                        value);
}

static INLINE UINT32 c8_field_TX_DENI_get( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_TX_DENI_get( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_DENI_get", A, 7);
    /* (0x00000174 bits 16:0) field TX_DENI of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG2 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG2_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG2_BIT_TX_DENI_MSK) >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG2_BIT_TX_DENI_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_TX_DENI_get", A, value );

    return value;
}
static INLINE void c8_field_range_TX_DENI_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 start_bit,
                                               UINT32 stop_bit,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_TX_DENI_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 start_bit,
                                               UINT32 stop_bit,
                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_TX_DENI_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_TX_DENI_set", stop_bit, start_bit );
    if (stop_bit > 16) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_TX_DENI_set", stop_bit, 16 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_TX_DENI_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000174 bits 16:0) field TX_DENI of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 16) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 16;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000174 bits 16:0) field TX_DENI of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG2 */
        c8_reg_TX_CTRL_CNFG_REG2_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            subfield_mask << (CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG2_BIT_TX_DENI_OFF + subfield_offset),
                                            CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG2_BIT_TX_DENI_OFF + subfield_offset,
                                            value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_TX_DENI_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_TX_DENI_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_TX_DENI_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_TX_DENI_get", stop_bit, start_bit );
    if (stop_bit > 16) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_TX_DENI_get", stop_bit, 16 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 16) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 16;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000174 bits 16:0) field TX_DENI of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG2 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG2_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG2_BIT_TX_DENI_MSK)
                  >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG2_BIT_TX_DENI_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG2_BIT_TX_DENI_MSK, CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG2_BIT_TX_DENI_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_TX_DENI_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_PISO_PRE2_MODE_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_PISO_PRE2_MODE_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PISO_PRE2_MODE_set", A, 7);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_PISO_PRE2_MODE_set", value, 3);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_PISO_PRE2_MODE_set", A, value );

    /* (0x00000178 bits 31:30) field PISO_PRE2_MODE of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3 */
    c8_reg_TX_CTRL_CNFG_REG3_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_PISO_PRE2_MODE_MSK,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_PISO_PRE2_MODE_OFF,
                                        value);
}

static INLINE UINT32 c8_field_PISO_PRE2_MODE_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PISO_PRE2_MODE_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PISO_PRE2_MODE_get", A, 7);
    /* (0x00000178 bits 31:30) field PISO_PRE2_MODE of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG3_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_PISO_PRE2_MODE_MSK) >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_PISO_PRE2_MODE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PISO_PRE2_MODE_get", A, value );

    return value;
}
static INLINE void c8_field_range_PISO_PRE2_MODE_set( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_PISO_PRE2_MODE_set( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit,
                                                      UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_PISO_PRE2_MODE_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_PISO_PRE2_MODE_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_PISO_PRE2_MODE_set", stop_bit, 1 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_PISO_PRE2_MODE_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000178 bits 31:30) field PISO_PRE2_MODE of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000178 bits 31:30) field PISO_PRE2_MODE of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3 */
        c8_reg_TX_CTRL_CNFG_REG3_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            subfield_mask << (CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_PISO_PRE2_MODE_OFF + subfield_offset),
                                            CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_PISO_PRE2_MODE_OFF + subfield_offset,
                                            value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_PISO_PRE2_MODE_get( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_PISO_PRE2_MODE_get( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_PISO_PRE2_MODE_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_PISO_PRE2_MODE_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_PISO_PRE2_MODE_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000178 bits 31:30) field PISO_PRE2_MODE of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG3_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_PISO_PRE2_MODE_MSK)
                  >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_PISO_PRE2_MODE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_PISO_PRE2_MODE_MSK, CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_PISO_PRE2_MODE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_PISO_PRE2_MODE_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_PISO_PRE2_ENABLE_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_PISO_PRE2_ENABLE_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PISO_PRE2_ENABLE_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_PISO_PRE2_ENABLE_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_PISO_PRE2_ENABLE_set", A, value );

    /* (0x00000178 bits 25) field PISO_PRE2_ENABLE of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3 */
    c8_reg_TX_CTRL_CNFG_REG3_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_PISO_PRE2_ENABLE_MSK,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_PISO_PRE2_ENABLE_OFF,
                                        value);
}

static INLINE UINT32 c8_field_PISO_PRE2_ENABLE_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PISO_PRE2_ENABLE_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PISO_PRE2_ENABLE_get", A, 7);
    /* (0x00000178 bits 25) field PISO_PRE2_ENABLE of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG3_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_PISO_PRE2_ENABLE_MSK) >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_PISO_PRE2_ENABLE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PISO_PRE2_ENABLE_get", A, value );

    return value;
}
static INLINE void c8_field_PISO_PRE1_ENABLE_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_PISO_PRE1_ENABLE_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PISO_PRE1_ENABLE_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_PISO_PRE1_ENABLE_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_PISO_PRE1_ENABLE_set", A, value );

    /* (0x00000178 bits 24) field PISO_PRE1_ENABLE of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3 */
    c8_reg_TX_CTRL_CNFG_REG3_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_PISO_PRE1_ENABLE_MSK,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_PISO_PRE1_ENABLE_OFF,
                                        value);
}

static INLINE UINT32 c8_field_PISO_PRE1_ENABLE_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PISO_PRE1_ENABLE_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PISO_PRE1_ENABLE_get", A, 7);
    /* (0x00000178 bits 24) field PISO_PRE1_ENABLE of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG3_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_PISO_PRE1_ENABLE_MSK) >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_PISO_PRE1_ENABLE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PISO_PRE1_ENABLE_get", A, value );

    return value;
}
static INLINE void c8_field_TX_DPENI2_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_TX_DPENI2_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_DPENI2_set", A, 7);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_TX_DPENI2_set", value, 63);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_TX_DPENI2_set", A, value );

    /* (0x00000178 bits 21:16) field TX_DPENI2 of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3 */
    c8_reg_TX_CTRL_CNFG_REG3_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_TX_DPENI2_MSK,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_TX_DPENI2_OFF,
                                        value);
}

static INLINE UINT32 c8_field_TX_DPENI2_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_TX_DPENI2_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_DPENI2_get", A, 7);
    /* (0x00000178 bits 21:16) field TX_DPENI2 of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG3_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_TX_DPENI2_MSK) >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_TX_DPENI2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_TX_DPENI2_get", A, value );

    return value;
}
static INLINE void c8_field_range_TX_DPENI2_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_TX_DPENI2_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit,
                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_TX_DPENI2_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_TX_DPENI2_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_TX_DPENI2_set", stop_bit, 5 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_TX_DPENI2_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000178 bits 21:16) field TX_DPENI2 of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000178 bits 21:16) field TX_DPENI2 of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3 */
        c8_reg_TX_CTRL_CNFG_REG3_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            subfield_mask << (CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_TX_DPENI2_OFF + subfield_offset),
                                            CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_TX_DPENI2_OFF + subfield_offset,
                                            value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_TX_DPENI2_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_TX_DPENI2_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_TX_DPENI2_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_TX_DPENI2_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_TX_DPENI2_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000178 bits 21:16) field TX_DPENI2 of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG3_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_TX_DPENI2_MSK)
                  >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_TX_DPENI2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_TX_DPENI2_MSK, CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_TX_DPENI2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_TX_DPENI2_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_TX_DPENI1_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_TX_DPENI1_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_DPENI1_set", A, 7);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_TX_DPENI1_set", value, 63);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_TX_DPENI1_set", A, value );

    /* (0x00000178 bits 13:8) field TX_DPENI1 of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3 */
    c8_reg_TX_CTRL_CNFG_REG3_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_TX_DPENI1_MSK,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_TX_DPENI1_OFF,
                                        value);
}

static INLINE UINT32 c8_field_TX_DPENI1_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_TX_DPENI1_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_DPENI1_get", A, 7);
    /* (0x00000178 bits 13:8) field TX_DPENI1 of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG3_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_TX_DPENI1_MSK) >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_TX_DPENI1_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_TX_DPENI1_get", A, value );

    return value;
}
static INLINE void c8_field_range_TX_DPENI1_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_TX_DPENI1_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit,
                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_TX_DPENI1_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_TX_DPENI1_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_TX_DPENI1_set", stop_bit, 5 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_TX_DPENI1_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000178 bits 13:8) field TX_DPENI1 of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000178 bits 13:8) field TX_DPENI1 of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3 */
        c8_reg_TX_CTRL_CNFG_REG3_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            subfield_mask << (CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_TX_DPENI1_OFF + subfield_offset),
                                            CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_TX_DPENI1_OFF + subfield_offset,
                                            value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_TX_DPENI1_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_TX_DPENI1_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_TX_DPENI1_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_TX_DPENI1_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_TX_DPENI1_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000178 bits 13:8) field TX_DPENI1 of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG3_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_TX_DPENI1_MSK)
                  >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_TX_DPENI1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_TX_DPENI1_MSK, CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_TX_DPENI1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_TX_DPENI1_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_TX_DER_set( c8_buffer_t *b_ptr,
                                        c8_handle_t *h_ptr,
                                        UINT32 A,
                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_TX_DER_set( c8_buffer_t *b_ptr,
                                        c8_handle_t *h_ptr,
                                        UINT32 A,
                                        UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_DER_set", A, 7);
    if (value > 31)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_TX_DER_set", value, 31);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_TX_DER_set", A, value );

    /* (0x00000178 bits 4:0) field TX_DER of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3 */
    c8_reg_TX_CTRL_CNFG_REG3_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_TX_DER_MSK,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_TX_DER_OFF,
                                        value);
}

static INLINE UINT32 c8_field_TX_DER_get( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_TX_DER_get( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_DER_get", A, 7);
    /* (0x00000178 bits 4:0) field TX_DER of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG3_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_TX_DER_MSK) >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_TX_DER_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_TX_DER_get", A, value );

    return value;
}
static INLINE void c8_field_range_TX_DER_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 start_bit,
                                              UINT32 stop_bit,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_TX_DER_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 start_bit,
                                              UINT32 stop_bit,
                                              UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_TX_DER_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_TX_DER_set", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_TX_DER_set", stop_bit, 4 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_TX_DER_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000178 bits 4:0) field TX_DER of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 4) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 4;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000178 bits 4:0) field TX_DER of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3 */
        c8_reg_TX_CTRL_CNFG_REG3_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            subfield_mask << (CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_TX_DER_OFF + subfield_offset),
                                            CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_TX_DER_OFF + subfield_offset,
                                            value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_TX_DER_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 start_bit,
                                                UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_TX_DER_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 start_bit,
                                                UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_TX_DER_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_TX_DER_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_TX_DER_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000178 bits 4:0) field TX_DER of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG3_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_TX_DER_MSK)
                  >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_TX_DER_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_TX_DER_MSK, CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG3_BIT_TX_DER_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_TX_DER_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_RXDET_CANCEL_OVR_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RXDET_CANCEL_OVR_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXDET_CANCEL_OVR_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RXDET_CANCEL_OVR_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RXDET_CANCEL_OVR_set", A, value );

    /* (0x0000017c bits 31) field RXDET_CANCEL_OVR of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    c8_reg_TX_CTRL_CNFG_REG4_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_CANCEL_OVR_MSK,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_CANCEL_OVR_OFF,
                                        value);
}

static INLINE UINT32 c8_field_RXDET_CANCEL_OVR_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RXDET_CANCEL_OVR_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXDET_CANCEL_OVR_get", A, 7);
    /* (0x0000017c bits 31) field RXDET_CANCEL_OVR of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG4_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_CANCEL_OVR_MSK) >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_CANCEL_OVR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RXDET_CANCEL_OVR_get", A, value );

    return value;
}
static INLINE void c8_field_RXDET_CTRL_PCBI_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RXDET_CTRL_PCBI_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXDET_CTRL_PCBI_set", A, 7);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RXDET_CTRL_PCBI_set", value, 63);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RXDET_CTRL_PCBI_set", A, value );

    /* (0x0000017c bits 30:25) bits 0:5 use field RXDET_CTRL_PCBI of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    c8_reg_TX_CTRL_CNFG_REG4_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_CTRL_PCBI_MSK,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_CTRL_PCBI_OFF,
                                        value);
}

static INLINE UINT32 c8_field_RXDET_CTRL_PCBI_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RXDET_CTRL_PCBI_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXDET_CTRL_PCBI_get", A, 7);
    /* (0x0000017c bits 30:25) bits 0:5 use field RXDET_CTRL_PCBI of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG4_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_CTRL_PCBI_MSK) >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_CTRL_PCBI_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RXDET_CTRL_PCBI_get", A, value );

    return value;
}
static INLINE void c8_field_range_RXDET_CTRL_PCBI_set( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_RXDET_CTRL_PCBI_set( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_RXDET_CTRL_PCBI_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_RXDET_CTRL_PCBI_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_RXDET_CTRL_PCBI_set", stop_bit, 5 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_RXDET_CTRL_PCBI_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000017c bits 30:25) bits 0:5 use field RXDET_CTRL_PCBI of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000017c bits 30:25) bits 0:5 use field RXDET_CTRL_PCBI of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
        c8_reg_TX_CTRL_CNFG_REG4_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            subfield_mask << (CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_CTRL_PCBI_OFF + subfield_offset),
                                            CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_CTRL_PCBI_OFF + subfield_offset,
                                            value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_RXDET_CTRL_PCBI_get( c8_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_RXDET_CTRL_PCBI_get( c8_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_RXDET_CTRL_PCBI_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_RXDET_CTRL_PCBI_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_RXDET_CTRL_PCBI_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000017c bits 30:25) bits 0:5 use field RXDET_CTRL_PCBI of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG4_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_CTRL_PCBI_MSK)
                  >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_CTRL_PCBI_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_CTRL_PCBI_MSK, CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_CTRL_PCBI_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_RXDET_CTRL_PCBI_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_RXDET_CTRL_CORE_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RXDET_CTRL_CORE_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXDET_CTRL_CORE_set", A, 7);
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RXDET_CTRL_CORE_set", value, 63);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RXDET_CTRL_CORE_set", A, value );

    /* (0x0000017c bits 24:19) bits 0:5 use field RXDET_CTRL_CORE of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    c8_reg_TX_CTRL_CNFG_REG4_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_CTRL_CORE_MSK,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_CTRL_CORE_OFF,
                                        value);
}

static INLINE UINT32 c8_field_RXDET_CTRL_CORE_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RXDET_CTRL_CORE_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXDET_CTRL_CORE_get", A, 7);
    /* (0x0000017c bits 24:19) bits 0:5 use field RXDET_CTRL_CORE of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG4_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_CTRL_CORE_MSK) >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_CTRL_CORE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RXDET_CTRL_CORE_get", A, value );

    return value;
}
static INLINE void c8_field_range_RXDET_CTRL_CORE_set( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_RXDET_CTRL_CORE_set( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit,
                                                       UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_RXDET_CTRL_CORE_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_RXDET_CTRL_CORE_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_RXDET_CTRL_CORE_set", stop_bit, 5 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_RXDET_CTRL_CORE_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000017c bits 24:19) bits 0:5 use field RXDET_CTRL_CORE of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000017c bits 24:19) bits 0:5 use field RXDET_CTRL_CORE of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
        c8_reg_TX_CTRL_CNFG_REG4_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            subfield_mask << (CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_CTRL_CORE_OFF + subfield_offset),
                                            CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_CTRL_CORE_OFF + subfield_offset,
                                            value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_RXDET_CTRL_CORE_get( c8_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_RXDET_CTRL_CORE_get( c8_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_RXDET_CTRL_CORE_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_RXDET_CTRL_CORE_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_RXDET_CTRL_CORE_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000017c bits 24:19) bits 0:5 use field RXDET_CTRL_CORE of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG4_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_CTRL_CORE_MSK)
                  >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_CTRL_CORE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_CTRL_CORE_MSK, CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_CTRL_CORE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_RXDET_CTRL_CORE_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_TX_CAL_EN_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_TX_CAL_EN_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_CAL_EN_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_TX_CAL_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_TX_CAL_EN_set", A, value );

    /* (0x0000017c bits 18) field TX_CAL_EN of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    c8_reg_TX_CTRL_CNFG_REG4_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_CAL_EN_MSK,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_CAL_EN_OFF,
                                        value);
}

static INLINE UINT32 c8_field_TX_CAL_EN_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_TX_CAL_EN_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_CAL_EN_get", A, 7);
    /* (0x0000017c bits 18) field TX_CAL_EN of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG4_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_CAL_EN_MSK) >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_CAL_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_TX_CAL_EN_get", A, value );

    return value;
}
static INLINE void c8_field_TX_CM_ENB_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_TX_CM_ENB_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_CM_ENB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_TX_CM_ENB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_TX_CM_ENB_set", A, value );

    /* (0x0000017c bits 17) field TX_CM_ENB of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    c8_reg_TX_CTRL_CNFG_REG4_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_CM_ENB_MSK,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_CM_ENB_OFF,
                                        value);
}

static INLINE UINT32 c8_field_TX_CM_ENB_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_TX_CM_ENB_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_CM_ENB_get", A, 7);
    /* (0x0000017c bits 17) field TX_CM_ENB of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG4_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_CM_ENB_MSK) >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_CM_ENB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_TX_CM_ENB_get", A, value );

    return value;
}
static INLINE void c8_field_TX_EDGE_DELAY_SEL_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_TX_EDGE_DELAY_SEL_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_EDGE_DELAY_SEL_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_TX_EDGE_DELAY_SEL_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_TX_EDGE_DELAY_SEL_set", A, value );

    /* (0x0000017c bits 16) field TX_EDGE_DELAY_SEL of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    c8_reg_TX_CTRL_CNFG_REG4_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_EDGE_DELAY_SEL_MSK,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_EDGE_DELAY_SEL_OFF,
                                        value);
}

static INLINE UINT32 c8_field_TX_EDGE_DELAY_SEL_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_TX_EDGE_DELAY_SEL_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_EDGE_DELAY_SEL_get", A, 7);
    /* (0x0000017c bits 16) field TX_EDGE_DELAY_SEL of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG4_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_EDGE_DELAY_SEL_MSK) >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_EDGE_DELAY_SEL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_TX_EDGE_DELAY_SEL_get", A, value );

    return value;
}
static INLINE void c8_field_TX_CM_MODN_B_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_TX_CM_MODN_B_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_CM_MODN_B_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_TX_CM_MODN_B_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_TX_CM_MODN_B_set", A, value );

    /* (0x0000017c bits 15) field TX_CM_MODN_B of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    c8_reg_TX_CTRL_CNFG_REG4_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_CM_MODN_B_MSK,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_CM_MODN_B_OFF,
                                        value);
}

static INLINE UINT32 c8_field_TX_CM_MODN_B_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_TX_CM_MODN_B_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_CM_MODN_B_get", A, 7);
    /* (0x0000017c bits 15) field TX_CM_MODN_B of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG4_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_CM_MODN_B_MSK) >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_CM_MODN_B_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_TX_CM_MODN_B_get", A, value );

    return value;
}
static INLINE void c8_field_TX_CM_MODP_B_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_TX_CM_MODP_B_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_CM_MODP_B_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_TX_CM_MODP_B_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_TX_CM_MODP_B_set", A, value );

    /* (0x0000017c bits 14) field TX_CM_MODP_B of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    c8_reg_TX_CTRL_CNFG_REG4_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_CM_MODP_B_MSK,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_CM_MODP_B_OFF,
                                        value);
}

static INLINE UINT32 c8_field_TX_CM_MODP_B_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_TX_CM_MODP_B_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_CM_MODP_B_get", A, 7);
    /* (0x0000017c bits 14) field TX_CM_MODP_B of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG4_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_CM_MODP_B_MSK) >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_CM_MODP_B_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_TX_CM_MODP_B_get", A, value );

    return value;
}
static INLINE void c8_field_RXDET_ENB_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RXDET_ENB_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXDET_ENB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RXDET_ENB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RXDET_ENB_set", A, value );

    /* (0x0000017c bits 13) field RXDET_ENB of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    c8_reg_TX_CTRL_CNFG_REG4_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_ENB_MSK,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_ENB_OFF,
                                        value);
}

static INLINE UINT32 c8_field_RXDET_ENB_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RXDET_ENB_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXDET_ENB_get", A, 7);
    /* (0x0000017c bits 13) field RXDET_ENB of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG4_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_ENB_MSK) >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_ENB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RXDET_ENB_get", A, value );

    return value;
}
static INLINE void c8_field_RXDET_HI_SET_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RXDET_HI_SET_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXDET_HI_SET_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RXDET_HI_SET_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RXDET_HI_SET_set", A, value );

    /* (0x0000017c bits 12) field RXDET_HI_SET of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    c8_reg_TX_CTRL_CNFG_REG4_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_HI_SET_MSK,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_HI_SET_OFF,
                                        value);
}

static INLINE UINT32 c8_field_RXDET_HI_SET_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RXDET_HI_SET_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXDET_HI_SET_get", A, 7);
    /* (0x0000017c bits 12) field RXDET_HI_SET of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG4_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_HI_SET_MSK) >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_HI_SET_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RXDET_HI_SET_get", A, value );

    return value;
}
static INLINE void c8_field_TX_WIZARD_EN_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_TX_WIZARD_EN_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_WIZARD_EN_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_TX_WIZARD_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_TX_WIZARD_EN_set", A, value );

    /* (0x0000017c bits 11) field TX_WIZARD_EN of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    c8_reg_TX_CTRL_CNFG_REG4_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_WIZARD_EN_MSK,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_WIZARD_EN_OFF,
                                        value);
}

static INLINE UINT32 c8_field_TX_WIZARD_EN_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_TX_WIZARD_EN_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_WIZARD_EN_get", A, 7);
    /* (0x0000017c bits 11) field TX_WIZARD_EN of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG4_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_WIZARD_EN_MSK) >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_WIZARD_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_TX_WIZARD_EN_get", A, value );

    return value;
}
static INLINE void c8_field_TX_AMP_EMPH_EN_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_TX_AMP_EMPH_EN_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_AMP_EMPH_EN_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_TX_AMP_EMPH_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_TX_AMP_EMPH_EN_set", A, value );

    /* (0x0000017c bits 10) field TX_AMP_EMPH_EN of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    c8_reg_TX_CTRL_CNFG_REG4_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_AMP_EMPH_EN_MSK,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_AMP_EMPH_EN_OFF,
                                        value);
}

static INLINE UINT32 c8_field_TX_AMP_EMPH_EN_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_TX_AMP_EMPH_EN_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_AMP_EMPH_EN_get", A, 7);
    /* (0x0000017c bits 10) field TX_AMP_EMPH_EN of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG4_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_AMP_EMPH_EN_MSK) >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_AMP_EMPH_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_TX_AMP_EMPH_EN_get", A, value );

    return value;
}
static INLINE void c8_field_TX_CTRL_ENB_set( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_TX_CTRL_ENB_set( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_CTRL_ENB_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_TX_CTRL_ENB_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_TX_CTRL_ENB_set", A, value );

    /* (0x0000017c bits 9) field TX_CTRL_ENB of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    c8_reg_TX_CTRL_CNFG_REG4_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_CTRL_ENB_MSK,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_CTRL_ENB_OFF,
                                        value);
}

static INLINE UINT32 c8_field_TX_CTRL_ENB_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_TX_CTRL_ENB_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_CTRL_ENB_get", A, 7);
    /* (0x0000017c bits 9) field TX_CTRL_ENB of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG4_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_CTRL_ENB_MSK) >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_CTRL_ENB_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_TX_CTRL_ENB_get", A, value );

    return value;
}
static INLINE void c8_field_TX_CMD_EN_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_TX_CMD_EN_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_CMD_EN_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_TX_CMD_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_TX_CMD_EN_set", A, value );

    /* (0x0000017c bits 8) field TX_CMD_EN of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    c8_reg_TX_CTRL_CNFG_REG4_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_CMD_EN_MSK,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_CMD_EN_OFF,
                                        value);
}

static INLINE UINT32 c8_field_TX_CMD_EN_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_TX_CMD_EN_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_CMD_EN_get", A, 7);
    /* (0x0000017c bits 8) field TX_CMD_EN of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG4_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_CMD_EN_MSK) >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_TX_CMD_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_TX_CMD_EN_get", A, value );

    return value;
}
static INLINE void c8_field_RXDET_IDLE_DELAY_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RXDET_IDLE_DELAY_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXDET_IDLE_DELAY_set", A, 7);
    if (value > 7)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RXDET_IDLE_DELAY_set", value, 7);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RXDET_IDLE_DELAY_set", A, value );

    /* (0x0000017c bits 2:0) field RXDET_IDLE_DELAY of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    c8_reg_TX_CTRL_CNFG_REG4_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_IDLE_DELAY_MSK,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_IDLE_DELAY_OFF,
                                        value);
}

static INLINE UINT32 c8_field_RXDET_IDLE_DELAY_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RXDET_IDLE_DELAY_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RXDET_IDLE_DELAY_get", A, 7);
    /* (0x0000017c bits 2:0) field RXDET_IDLE_DELAY of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG4_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_IDLE_DELAY_MSK) >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_IDLE_DELAY_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RXDET_IDLE_DELAY_get", A, value );

    return value;
}
static INLINE void c8_field_range_RXDET_IDLE_DELAY_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_RXDET_IDLE_DELAY_set( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit,
                                                        UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_RXDET_IDLE_DELAY_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_RXDET_IDLE_DELAY_set", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_RXDET_IDLE_DELAY_set", stop_bit, 2 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_RXDET_IDLE_DELAY_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x0000017c bits 2:0) field RXDET_IDLE_DELAY of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 2) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 2;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000017c bits 2:0) field RXDET_IDLE_DELAY of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
        c8_reg_TX_CTRL_CNFG_REG4_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            subfield_mask << (CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_IDLE_DELAY_OFF + subfield_offset),
                                            CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_IDLE_DELAY_OFF + subfield_offset,
                                            value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_RXDET_IDLE_DELAY_get( c8_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_RXDET_IDLE_DELAY_get( c8_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 start_bit,
                                                          UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_RXDET_IDLE_DELAY_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_RXDET_IDLE_DELAY_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_RXDET_IDLE_DELAY_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000017c bits 2:0) field RXDET_IDLE_DELAY of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG4_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_IDLE_DELAY_MSK)
                  >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_IDLE_DELAY_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_IDLE_DELAY_MSK, CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG4_BIT_RXDET_IDLE_DELAY_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_RXDET_IDLE_DELAY_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_TX_CTRL_EDGE_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_TX_CTRL_EDGE_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_CTRL_EDGE_set", A, 7);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_TX_CTRL_EDGE_set", value, 65535);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_TX_CTRL_EDGE_set", A, value );

    /* (0x00000180 bits 31:16) field TX_CTRL_EDGE of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG5 */
    c8_reg_TX_CTRL_CNFG_REG5_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG5_BIT_TX_CTRL_EDGE_MSK,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG5_BIT_TX_CTRL_EDGE_OFF,
                                        value);
}

static INLINE UINT32 c8_field_TX_CTRL_EDGE_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_TX_CTRL_EDGE_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_CTRL_EDGE_get", A, 7);
    /* (0x00000180 bits 31:16) field TX_CTRL_EDGE of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG5 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG5_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG5_BIT_TX_CTRL_EDGE_MSK) >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG5_BIT_TX_CTRL_EDGE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_TX_CTRL_EDGE_get", A, value );

    return value;
}
static INLINE void c8_field_range_TX_CTRL_EDGE_set( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_TX_CTRL_EDGE_set( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit,
                                                    UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_TX_CTRL_EDGE_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_TX_CTRL_EDGE_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_TX_CTRL_EDGE_set", stop_bit, 15 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_TX_CTRL_EDGE_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000180 bits 31:16) field TX_CTRL_EDGE of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG5 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000180 bits 31:16) field TX_CTRL_EDGE of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG5 */
        c8_reg_TX_CTRL_CNFG_REG5_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            subfield_mask << (CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG5_BIT_TX_CTRL_EDGE_OFF + subfield_offset),
                                            CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG5_BIT_TX_CTRL_EDGE_OFF + subfield_offset,
                                            value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_TX_CTRL_EDGE_get( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_TX_CTRL_EDGE_get( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_TX_CTRL_EDGE_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_TX_CTRL_EDGE_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_TX_CTRL_EDGE_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000180 bits 31:16) field TX_CTRL_EDGE of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG5 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG5_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG5_BIT_TX_CTRL_EDGE_MSK)
                  >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG5_BIT_TX_CTRL_EDGE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG5_BIT_TX_CTRL_EDGE_MSK, CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG5_BIT_TX_CTRL_EDGE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_TX_CTRL_EDGE_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_TX_CM_COUNTER_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_TX_CM_COUNTER_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_CM_COUNTER_set", A, 7);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_TX_CM_COUNTER_set", value, 65535);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_TX_CM_COUNTER_set", A, value );

    /* (0x00000180 bits 15:0) field TX_CM_COUNTER of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG5 */
    c8_reg_TX_CTRL_CNFG_REG5_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG5_BIT_TX_CM_COUNTER_MSK,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG5_BIT_TX_CM_COUNTER_OFF,
                                        value);
}

static INLINE UINT32 c8_field_TX_CM_COUNTER_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_TX_CM_COUNTER_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_CM_COUNTER_get", A, 7);
    /* (0x00000180 bits 15:0) field TX_CM_COUNTER of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG5 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG5_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG5_BIT_TX_CM_COUNTER_MSK) >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG5_BIT_TX_CM_COUNTER_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_TX_CM_COUNTER_get", A, value );

    return value;
}
static INLINE void c8_field_range_TX_CM_COUNTER_set( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_TX_CM_COUNTER_set( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit,
                                                     UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_TX_CM_COUNTER_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_TX_CM_COUNTER_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_TX_CM_COUNTER_set", stop_bit, 15 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_TX_CM_COUNTER_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000180 bits 15:0) field TX_CM_COUNTER of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG5 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000180 bits 15:0) field TX_CM_COUNTER of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG5 */
        c8_reg_TX_CTRL_CNFG_REG5_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            subfield_mask << (CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG5_BIT_TX_CM_COUNTER_OFF + subfield_offset),
                                            CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG5_BIT_TX_CM_COUNTER_OFF + subfield_offset,
                                            value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_TX_CM_COUNTER_get( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_TX_CM_COUNTER_get( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 start_bit,
                                                       UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_TX_CM_COUNTER_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_TX_CM_COUNTER_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_TX_CM_COUNTER_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000180 bits 15:0) field TX_CM_COUNTER of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG5 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG5_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG5_BIT_TX_CM_COUNTER_MSK)
                  >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG5_BIT_TX_CM_COUNTER_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG5_BIT_TX_CM_COUNTER_MSK, CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG5_BIT_TX_CM_COUNTER_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_TX_CM_COUNTER_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_TX_CTRL_PRE1_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_TX_CTRL_PRE1_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_CTRL_PRE1_set", A, 7);
    if (value > 262143)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_TX_CTRL_PRE1_set", value, 262143);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_TX_CTRL_PRE1_set", A, value );

    /* (0x00000184 bits 17:0) field TX_CTRL_PRE1 of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG6 */
    c8_reg_TX_CTRL_CNFG_REG6_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG6_BIT_TX_CTRL_PRE1_MSK,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG6_BIT_TX_CTRL_PRE1_OFF,
                                        value);
}

static INLINE UINT32 c8_field_TX_CTRL_PRE1_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_TX_CTRL_PRE1_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_CTRL_PRE1_get", A, 7);
    /* (0x00000184 bits 17:0) field TX_CTRL_PRE1 of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG6 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG6_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG6_BIT_TX_CTRL_PRE1_MSK) >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG6_BIT_TX_CTRL_PRE1_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_TX_CTRL_PRE1_get", A, value );

    return value;
}
static INLINE void c8_field_range_TX_CTRL_PRE1_set( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_TX_CTRL_PRE1_set( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit,
                                                    UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_TX_CTRL_PRE1_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_TX_CTRL_PRE1_set", stop_bit, start_bit );
    if (stop_bit > 17) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_TX_CTRL_PRE1_set", stop_bit, 17 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_TX_CTRL_PRE1_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000184 bits 17:0) field TX_CTRL_PRE1 of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG6 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 17) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 17;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000184 bits 17:0) field TX_CTRL_PRE1 of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG6 */
        c8_reg_TX_CTRL_CNFG_REG6_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            subfield_mask << (CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG6_BIT_TX_CTRL_PRE1_OFF + subfield_offset),
                                            CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG6_BIT_TX_CTRL_PRE1_OFF + subfield_offset,
                                            value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_TX_CTRL_PRE1_get( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_TX_CTRL_PRE1_get( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_TX_CTRL_PRE1_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_TX_CTRL_PRE1_get", stop_bit, start_bit );
    if (stop_bit > 17) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_TX_CTRL_PRE1_get", stop_bit, 17 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 17) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 17;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000184 bits 17:0) field TX_CTRL_PRE1 of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG6 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG6_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG6_BIT_TX_CTRL_PRE1_MSK)
                  >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG6_BIT_TX_CTRL_PRE1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG6_BIT_TX_CTRL_PRE1_MSK, CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG6_BIT_TX_CTRL_PRE1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_TX_CTRL_PRE1_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_TX_CTRL_PRE2_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_TX_CTRL_PRE2_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_CTRL_PRE2_set", A, 7);
    if (value > 262143)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_TX_CTRL_PRE2_set", value, 262143);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_TX_CTRL_PRE2_set", A, value );

    /* (0x00000188 bits 17:0) field TX_CTRL_PRE2 of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG7 */
    c8_reg_TX_CTRL_CNFG_REG7_field_set( b_ptr,
                                        h_ptr,
                                        A,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG7_BIT_TX_CTRL_PRE2_MSK,
                                        CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG7_BIT_TX_CTRL_PRE2_OFF,
                                        value);
}

static INLINE UINT32 c8_field_TX_CTRL_PRE2_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_TX_CTRL_PRE2_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_CTRL_PRE2_get", A, 7);
    /* (0x00000188 bits 17:0) field TX_CTRL_PRE2 of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG7 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG7_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG7_BIT_TX_CTRL_PRE2_MSK) >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG7_BIT_TX_CTRL_PRE2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_TX_CTRL_PRE2_get", A, value );

    return value;
}
static INLINE void c8_field_range_TX_CTRL_PRE2_set( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_TX_CTRL_PRE2_set( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit,
                                                    UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_TX_CTRL_PRE2_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_TX_CTRL_PRE2_set", stop_bit, start_bit );
    if (stop_bit > 17) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_TX_CTRL_PRE2_set", stop_bit, 17 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_TX_CTRL_PRE2_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000188 bits 17:0) field TX_CTRL_PRE2 of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG7 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 17) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 17;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000188 bits 17:0) field TX_CTRL_PRE2 of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG7 */
        c8_reg_TX_CTRL_CNFG_REG7_field_set( b_ptr,
                                            h_ptr,
                                            A,
                                            subfield_mask << (CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG7_BIT_TX_CTRL_PRE2_OFF + subfield_offset),
                                            CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG7_BIT_TX_CTRL_PRE2_OFF + subfield_offset,
                                            value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_TX_CTRL_PRE2_get( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_TX_CTRL_PRE2_get( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 start_bit,
                                                      UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_TX_CTRL_PRE2_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_TX_CTRL_PRE2_get", stop_bit, start_bit );
    if (stop_bit > 17) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_TX_CTRL_PRE2_get", stop_bit, 17 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 17) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 17;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000188 bits 17:0) field TX_CTRL_PRE2 of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG7 */
    reg_value = c8_reg_TX_CTRL_CNFG_REG7_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG7_BIT_TX_CTRL_PRE2_MSK)
                  >> CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG7_BIT_TX_CTRL_PRE2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG7_BIT_TX_CTRL_PRE2_MSK, CNI_UNI_TXRX_REG_TX_CTRL_CNFG_REG7_BIT_TX_CTRL_PRE2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_TX_CTRL_PRE2_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_DSM_DENOM_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_DSM_DENOM_set( c8_buffer_t *b_ptr,
                                           c8_handle_t *h_ptr,
                                           UINT32 A,
                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DSM_DENOM_set", A, 7);
    if (value > 16383)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_DSM_DENOM_set", value, 16383);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_DSM_DENOM_set", A, value );

    /* (0x00000190 bits 29:16) field DSM_DENOM of register PMC_CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG1 */
    c8_reg_PMM_WRAP_CNFG_REG1_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG1_BIT_DSM_DENOM_MSK,
                                         CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG1_BIT_DSM_DENOM_OFF,
                                         value);
}

static INLINE UINT32 c8_field_DSM_DENOM_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_DSM_DENOM_get( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DSM_DENOM_get", A, 7);
    /* (0x00000190 bits 29:16) field DSM_DENOM of register PMC_CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG1 */
    reg_value = c8_reg_PMM_WRAP_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG1_BIT_DSM_DENOM_MSK) >> CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG1_BIT_DSM_DENOM_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_DSM_DENOM_get", A, value );

    return value;
}
static INLINE void c8_field_range_DSM_DENOM_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_DSM_DENOM_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit,
                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_DSM_DENOM_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_DSM_DENOM_set", stop_bit, start_bit );
    if (stop_bit > 13) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_DSM_DENOM_set", stop_bit, 13 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_DSM_DENOM_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000190 bits 29:16) field DSM_DENOM of register PMC_CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 13) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 13;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000190 bits 29:16) field DSM_DENOM of register PMC_CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG1 */
        c8_reg_PMM_WRAP_CNFG_REG1_field_set( b_ptr,
                                             h_ptr,
                                             A,
                                             subfield_mask << (CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG1_BIT_DSM_DENOM_OFF + subfield_offset),
                                             CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG1_BIT_DSM_DENOM_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_DSM_DENOM_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_DSM_DENOM_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 start_bit,
                                                   UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_DSM_DENOM_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_DSM_DENOM_get", stop_bit, start_bit );
    if (stop_bit > 13) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_DSM_DENOM_get", stop_bit, 13 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 13) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 13;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000190 bits 29:16) field DSM_DENOM of register PMC_CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG1 */
    reg_value = c8_reg_PMM_WRAP_CNFG_REG1_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG1_BIT_DSM_DENOM_MSK)
                  >> CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG1_BIT_DSM_DENOM_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG1_BIT_DSM_DENOM_MSK, CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG1_BIT_DSM_DENOM_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_DSM_DENOM_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_DSM_TYPE_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_DSM_TYPE_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DSM_TYPE_set", A, 7);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_DSM_TYPE_set", value, 3);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_DSM_TYPE_set", A, value );

    /* (0x00000190 bits 1:0) field DSM_TYPE of register PMC_CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG1 */
    c8_reg_PMM_WRAP_CNFG_REG1_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG1_BIT_DSM_TYPE_MSK,
                                         CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG1_BIT_DSM_TYPE_OFF,
                                         value);
}

static INLINE UINT32 c8_field_DSM_TYPE_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_DSM_TYPE_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DSM_TYPE_get", A, 7);
    /* (0x00000190 bits 1:0) field DSM_TYPE of register PMC_CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG1 */
    reg_value = c8_reg_PMM_WRAP_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG1_BIT_DSM_TYPE_MSK) >> CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG1_BIT_DSM_TYPE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_DSM_TYPE_get", A, value );

    return value;
}
static INLINE void c8_field_range_DSM_TYPE_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 start_bit,
                                                UINT32 stop_bit,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_DSM_TYPE_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 start_bit,
                                                UINT32 stop_bit,
                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_DSM_TYPE_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_DSM_TYPE_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_DSM_TYPE_set", stop_bit, 1 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_DSM_TYPE_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000190 bits 1:0) field DSM_TYPE of register PMC_CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000190 bits 1:0) field DSM_TYPE of register PMC_CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG1 */
        c8_reg_PMM_WRAP_CNFG_REG1_field_set( b_ptr,
                                             h_ptr,
                                             A,
                                             subfield_mask << (CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG1_BIT_DSM_TYPE_OFF + subfield_offset),
                                             CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG1_BIT_DSM_TYPE_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_DSM_TYPE_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_DSM_TYPE_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_DSM_TYPE_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_DSM_TYPE_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_DSM_TYPE_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000190 bits 1:0) field DSM_TYPE of register PMC_CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG1 */
    reg_value = c8_reg_PMM_WRAP_CNFG_REG1_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG1_BIT_DSM_TYPE_MSK)
                  >> CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG1_BIT_DSM_TYPE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG1_BIT_DSM_TYPE_MSK, CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG1_BIT_DSM_TYPE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_DSM_TYPE_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_PMM_WRAP_EN_set( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_PMM_WRAP_EN_set( c8_buffer_t *b_ptr,
                                             c8_handle_t *h_ptr,
                                             UINT32 A,
                                             UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PMM_WRAP_EN_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_PMM_WRAP_EN_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_PMM_WRAP_EN_set", A, value );

    /* (0x00000194 bits 31) field PMM_WRAP_EN of register PMC_CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2 */
    c8_reg_PMM_WRAP_CNFG_REG2_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2_BIT_PMM_WRAP_EN_MSK,
                                         CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2_BIT_PMM_WRAP_EN_OFF,
                                         value);
}

static INLINE UINT32 c8_field_PMM_WRAP_EN_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PMM_WRAP_EN_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PMM_WRAP_EN_get", A, 7);
    /* (0x00000194 bits 31) field PMM_WRAP_EN of register PMC_CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2 */
    reg_value = c8_reg_PMM_WRAP_CNFG_REG2_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2_BIT_PMM_WRAP_EN_MSK) >> CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2_BIT_PMM_WRAP_EN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PMM_WRAP_EN_get", A, value );

    return value;
}
static INLINE void c8_field_PKT_SIZE_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_PKT_SIZE_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PKT_SIZE_set", A, 7);
    if (value > 511)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_PKT_SIZE_set", value, 511);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_PKT_SIZE_set", A, value );

    /* (0x00000194 bits 24:16) field PKT_SIZE of register PMC_CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2 */
    c8_reg_PMM_WRAP_CNFG_REG2_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2_BIT_PKT_SIZE_MSK,
                                         CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2_BIT_PKT_SIZE_OFF,
                                         value);
}

static INLINE UINT32 c8_field_PKT_SIZE_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PKT_SIZE_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PKT_SIZE_get", A, 7);
    /* (0x00000194 bits 24:16) field PKT_SIZE of register PMC_CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2 */
    reg_value = c8_reg_PMM_WRAP_CNFG_REG2_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2_BIT_PKT_SIZE_MSK) >> CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2_BIT_PKT_SIZE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PKT_SIZE_get", A, value );

    return value;
}
static INLINE void c8_field_range_PKT_SIZE_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 start_bit,
                                                UINT32 stop_bit,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_PKT_SIZE_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 start_bit,
                                                UINT32 stop_bit,
                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_PKT_SIZE_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_PKT_SIZE_set", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_PKT_SIZE_set", stop_bit, 8 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_PKT_SIZE_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000194 bits 24:16) field PKT_SIZE of register PMC_CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 8) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 8;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000194 bits 24:16) field PKT_SIZE of register PMC_CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2 */
        c8_reg_PMM_WRAP_CNFG_REG2_field_set( b_ptr,
                                             h_ptr,
                                             A,
                                             subfield_mask << (CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2_BIT_PKT_SIZE_OFF + subfield_offset),
                                             CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2_BIT_PKT_SIZE_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_PKT_SIZE_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_PKT_SIZE_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_PKT_SIZE_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_PKT_SIZE_get", stop_bit, start_bit );
    if (stop_bit > 8) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_PKT_SIZE_get", stop_bit, 8 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 8) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 8;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000194 bits 24:16) field PKT_SIZE of register PMC_CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2 */
    reg_value = c8_reg_PMM_WRAP_CNFG_REG2_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2_BIT_PKT_SIZE_MSK)
                  >> CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2_BIT_PKT_SIZE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2_BIT_PKT_SIZE_MSK, CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2_BIT_PKT_SIZE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_PKT_SIZE_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE void c8_field_PKT_PERIOD_set( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_PKT_PERIOD_set( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A,
                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PKT_PERIOD_set", A, 7);
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_PKT_PERIOD_set", value, 65535);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_PKT_PERIOD_set", A, value );

    /* (0x00000194 bits 15:0) field PKT_PERIOD of register PMC_CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2 */
    c8_reg_PMM_WRAP_CNFG_REG2_field_set( b_ptr,
                                         h_ptr,
                                         A,
                                         CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2_BIT_PKT_PERIOD_MSK,
                                         CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2_BIT_PKT_PERIOD_OFF,
                                         value);
}

static INLINE UINT32 c8_field_PKT_PERIOD_get( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PKT_PERIOD_get( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PKT_PERIOD_get", A, 7);
    /* (0x00000194 bits 15:0) field PKT_PERIOD of register PMC_CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2 */
    reg_value = c8_reg_PMM_WRAP_CNFG_REG2_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2_BIT_PKT_PERIOD_MSK) >> CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2_BIT_PKT_PERIOD_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PKT_PERIOD_get", A, value );

    return value;
}
static INLINE void c8_field_range_PKT_PERIOD_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_range_PKT_PERIOD_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit,
                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_PKT_PERIOD_set", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_PKT_PERIOD_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_PKT_PERIOD_set", stop_bit, 15 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_PKT_PERIOD_set", A, start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b_ptr != NULL) {
        l1sys_force_read_modify_write( b_ptr->coalesce_handle);
    }

    /* (0x00000194 bits 15:0) field PKT_PERIOD of register PMC_CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000194 bits 15:0) field PKT_PERIOD of register PMC_CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2 */
        c8_reg_PMM_WRAP_CNFG_REG2_field_set( b_ptr,
                                             h_ptr,
                                             A,
                                             subfield_mask << (CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2_BIT_PKT_PERIOD_OFF + subfield_offset),
                                             CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2_BIT_PKT_PERIOD_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}

static INLINE UINT32 c8_field_range_PKT_PERIOD_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_PKT_PERIOD_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_PKT_PERIOD_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_PKT_PERIOD_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_PKT_PERIOD_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000194 bits 15:0) field PKT_PERIOD of register PMC_CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2 */
    reg_value = c8_reg_PMM_WRAP_CNFG_REG2_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2_BIT_PKT_PERIOD_MSK)
                  >> CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2_BIT_PKT_PERIOD_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2_BIT_PKT_PERIOD_MSK, CNI_UNI_TXRX_REG_PMM_WRAP_CNFG_REG2_BIT_PKT_PERIOD_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_PKT_PERIOD_get", A, start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset config_edge
 * ==================================================================================
 */
static INLINE void c8_field_PPM_OFF_RD_REQ_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_PPM_OFF_RD_REQ_set( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A,
                                                UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PPM_OFF_RD_REQ_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_PPM_OFF_RD_REQ_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_PPM_OFF_RD_REQ_set", A, value );

    /* (0x00000010 bits 0) field PPM_OFF_RD_REQ of register PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG1 */
    c8_reg_PLL_CNFG_REG1_field_set( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_PLL_CNFG_REG1_BIT_PPM_OFF_RD_REQ_MSK,
                                    CNI_UNI_TXRX_REG_PLL_CNFG_REG1_BIT_PPM_OFF_RD_REQ_OFF,
                                    value);
}

static INLINE UINT32 c8_field_PPM_OFF_RD_REQ_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PPM_OFF_RD_REQ_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PPM_OFF_RD_REQ_get", A, 7);
    /* (0x00000010 bits 0) field PPM_OFF_RD_REQ of register PMC_CNI_UNI_TXRX_REG_PLL_CNFG_REG1 */
    reg_value = c8_reg_PLL_CNFG_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_PLL_CNFG_REG1_BIT_PPM_OFF_RD_REQ_MSK) >> CNI_UNI_TXRX_REG_PLL_CNFG_REG1_BIT_PPM_OFF_RD_REQ_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PPM_OFF_RD_REQ_get", A, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset int_active_rising
 * ==================================================================================
 */
static INLINE void c8_field_PATT_MON_ERR_I17_set_to_clear( c8_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_PATT_MON_ERR_I17_set_to_clear( c8_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PATT_MON_ERR_I17_set_to_clear", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_PATT_MON_ERR_I17_set_to_clear", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_PATT_MON_ERR_I17_set_to_clear", A, value );

    /* (0x00000114 bits 17) field PATT_MON_ERR_I17 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    c8_reg_INT_REG_action_on_write_field_set( b_ptr,
                                              h_ptr,
                                              A,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_PATT_MON_ERR_I17_MSK,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_PATT_MON_ERR_I17_OFF,
                                              value);
}

static INLINE UINT32 c8_field_PATT_MON_ERR_I17_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PATT_MON_ERR_I17_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PATT_MON_ERR_I17_get", A, 7);
    /* (0x00000114 bits 17) field PATT_MON_ERR_I17 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    reg_value = c8_reg_INT_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_REG_BIT_PATT_MON_ERR_I17_MSK) >> CNI_UNI_TXRX_REG_INT_REG_BIT_PATT_MON_ERR_I17_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PATT_MON_ERR_I17_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_PATT_MON_ERR_I17_poll( c8_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 value,
                                                                   PMC_POLL_COMPARISON_TYPE cmp,
                                                                   UINT32 max_count,
                                                                   UINT32 *num_failed_polls,
                                                                   UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_PATT_MON_ERR_I17_poll( c8_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 value,
                                                                   PMC_POLL_COMPARISON_TYPE cmp,
                                                                   UINT32 max_count,
                                                                   UINT32 *num_failed_polls,
                                                                   UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_PATT_MON_ERR_I17_poll", A, value );

    /* (0x00000114 bits 17) field PATT_MON_ERR_I17 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    return c8_reg_INT_REG_poll( b_ptr,
                                h_ptr,
                                A,
                                CNI_UNI_TXRX_REG_INT_REG_BIT_PATT_MON_ERR_I17_MSK,
                                (value<<CNI_UNI_TXRX_REG_INT_REG_BIT_PATT_MON_ERR_I17_OFF),
                                cmp,
                                max_count,
                                num_failed_polls,
                                delay_between_polls_in_microseconds);
}

static INLINE void c8_field_DIVCLK_DEAD_I16_set_to_clear( c8_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_DIVCLK_DEAD_I16_set_to_clear( c8_buffer_t *b_ptr,
                                                          c8_handle_t *h_ptr,
                                                          UINT32 A,
                                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DIVCLK_DEAD_I16_set_to_clear", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_DIVCLK_DEAD_I16_set_to_clear", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_DIVCLK_DEAD_I16_set_to_clear", A, value );

    /* (0x00000114 bits 16) field DIVCLK_DEAD_I16 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    c8_reg_INT_REG_action_on_write_field_set( b_ptr,
                                              h_ptr,
                                              A,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_DIVCLK_DEAD_I16_MSK,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_DIVCLK_DEAD_I16_OFF,
                                              value);
}

static INLINE UINT32 c8_field_DIVCLK_DEAD_I16_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_DIVCLK_DEAD_I16_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DIVCLK_DEAD_I16_get", A, 7);
    /* (0x00000114 bits 16) field DIVCLK_DEAD_I16 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    reg_value = c8_reg_INT_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_REG_BIT_DIVCLK_DEAD_I16_MSK) >> CNI_UNI_TXRX_REG_INT_REG_BIT_DIVCLK_DEAD_I16_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_DIVCLK_DEAD_I16_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_DIVCLK_DEAD_I16_poll( c8_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 value,
                                                                  PMC_POLL_COMPARISON_TYPE cmp,
                                                                  UINT32 max_count,
                                                                  UINT32 *num_failed_polls,
                                                                  UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_DIVCLK_DEAD_I16_poll( c8_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 value,
                                                                  PMC_POLL_COMPARISON_TYPE cmp,
                                                                  UINT32 max_count,
                                                                  UINT32 *num_failed_polls,
                                                                  UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_DIVCLK_DEAD_I16_poll", A, value );

    /* (0x00000114 bits 16) field DIVCLK_DEAD_I16 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    return c8_reg_INT_REG_poll( b_ptr,
                                h_ptr,
                                A,
                                CNI_UNI_TXRX_REG_INT_REG_BIT_DIVCLK_DEAD_I16_MSK,
                                (value<<CNI_UNI_TXRX_REG_INT_REG_BIT_DIVCLK_DEAD_I16_OFF),
                                cmp,
                                max_count,
                                num_failed_polls,
                                delay_between_polls_in_microseconds);
}

static INLINE void c8_field_SIPO_BIST_ERR_I15_set_to_clear( c8_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_SIPO_BIST_ERR_I15_set_to_clear( c8_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SIPO_BIST_ERR_I15_set_to_clear", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_SIPO_BIST_ERR_I15_set_to_clear", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_SIPO_BIST_ERR_I15_set_to_clear", A, value );

    /* (0x00000114 bits 15) field SIPO_BIST_ERR_I15 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    c8_reg_INT_REG_action_on_write_field_set( b_ptr,
                                              h_ptr,
                                              A,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_SIPO_BIST_ERR_I15_MSK,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_SIPO_BIST_ERR_I15_OFF,
                                              value);
}

static INLINE UINT32 c8_field_SIPO_BIST_ERR_I15_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_SIPO_BIST_ERR_I15_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SIPO_BIST_ERR_I15_get", A, 7);
    /* (0x00000114 bits 15) field SIPO_BIST_ERR_I15 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    reg_value = c8_reg_INT_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_REG_BIT_SIPO_BIST_ERR_I15_MSK) >> CNI_UNI_TXRX_REG_INT_REG_BIT_SIPO_BIST_ERR_I15_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_SIPO_BIST_ERR_I15_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_SIPO_BIST_ERR_I15_poll( c8_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_SIPO_BIST_ERR_I15_poll( c8_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_SIPO_BIST_ERR_I15_poll", A, value );

    /* (0x00000114 bits 15) field SIPO_BIST_ERR_I15 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    return c8_reg_INT_REG_poll( b_ptr,
                                h_ptr,
                                A,
                                CNI_UNI_TXRX_REG_INT_REG_BIT_SIPO_BIST_ERR_I15_MSK,
                                (value<<CNI_UNI_TXRX_REG_INT_REG_BIT_SIPO_BIST_ERR_I15_OFF),
                                cmp,
                                max_count,
                                num_failed_polls,
                                delay_between_polls_in_microseconds);
}

static INLINE void c8_field_RX_ADAPT_DONE_I14_set_to_clear( c8_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RX_ADAPT_DONE_I14_set_to_clear( c8_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RX_ADAPT_DONE_I14_set_to_clear", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RX_ADAPT_DONE_I14_set_to_clear", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RX_ADAPT_DONE_I14_set_to_clear", A, value );

    /* (0x00000114 bits 14) field RX_ADAPT_DONE_I14 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    c8_reg_INT_REG_action_on_write_field_set( b_ptr,
                                              h_ptr,
                                              A,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_RX_ADAPT_DONE_I14_MSK,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_RX_ADAPT_DONE_I14_OFF,
                                              value);
}

static INLINE UINT32 c8_field_RX_ADAPT_DONE_I14_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RX_ADAPT_DONE_I14_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RX_ADAPT_DONE_I14_get", A, 7);
    /* (0x00000114 bits 14) field RX_ADAPT_DONE_I14 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    reg_value = c8_reg_INT_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_REG_BIT_RX_ADAPT_DONE_I14_MSK) >> CNI_UNI_TXRX_REG_INT_REG_BIT_RX_ADAPT_DONE_I14_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RX_ADAPT_DONE_I14_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_RX_ADAPT_DONE_I14_poll( c8_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_RX_ADAPT_DONE_I14_poll( c8_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_RX_ADAPT_DONE_I14_poll", A, value );

    /* (0x00000114 bits 14) field RX_ADAPT_DONE_I14 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    return c8_reg_INT_REG_poll( b_ptr,
                                h_ptr,
                                A,
                                CNI_UNI_TXRX_REG_INT_REG_BIT_RX_ADAPT_DONE_I14_MSK,
                                (value<<CNI_UNI_TXRX_REG_INT_REG_BIT_RX_ADAPT_DONE_I14_OFF),
                                cmp,
                                max_count,
                                num_failed_polls,
                                delay_between_polls_in_microseconds);
}

static INLINE void c8_field_ECC_2BIT_BERR_I13_set_to_clear( c8_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_ECC_2BIT_BERR_I13_set_to_clear( c8_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ECC_2BIT_BERR_I13_set_to_clear", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_ECC_2BIT_BERR_I13_set_to_clear", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_ECC_2BIT_BERR_I13_set_to_clear", A, value );

    /* (0x00000114 bits 13) field ECC_2BIT_BERR_I13 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    c8_reg_INT_REG_action_on_write_field_set( b_ptr,
                                              h_ptr,
                                              A,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_ECC_2BIT_BERR_I13_MSK,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_ECC_2BIT_BERR_I13_OFF,
                                              value);
}

static INLINE UINT32 c8_field_ECC_2BIT_BERR_I13_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ECC_2BIT_BERR_I13_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ECC_2BIT_BERR_I13_get", A, 7);
    /* (0x00000114 bits 13) field ECC_2BIT_BERR_I13 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    reg_value = c8_reg_INT_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_REG_BIT_ECC_2BIT_BERR_I13_MSK) >> CNI_UNI_TXRX_REG_INT_REG_BIT_ECC_2BIT_BERR_I13_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ECC_2BIT_BERR_I13_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_ECC_2BIT_BERR_I13_poll( c8_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_ECC_2BIT_BERR_I13_poll( c8_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_ECC_2BIT_BERR_I13_poll", A, value );

    /* (0x00000114 bits 13) field ECC_2BIT_BERR_I13 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    return c8_reg_INT_REG_poll( b_ptr,
                                h_ptr,
                                A,
                                CNI_UNI_TXRX_REG_INT_REG_BIT_ECC_2BIT_BERR_I13_MSK,
                                (value<<CNI_UNI_TXRX_REG_INT_REG_BIT_ECC_2BIT_BERR_I13_OFF),
                                cmp,
                                max_count,
                                num_failed_polls,
                                delay_between_polls_in_microseconds);
}

static INLINE void c8_field_ECC_1BIT_BERR_I12_set_to_clear( c8_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_ECC_1BIT_BERR_I12_set_to_clear( c8_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ECC_1BIT_BERR_I12_set_to_clear", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_ECC_1BIT_BERR_I12_set_to_clear", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_ECC_1BIT_BERR_I12_set_to_clear", A, value );

    /* (0x00000114 bits 12) field ECC_1BIT_BERR_I12 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    c8_reg_INT_REG_action_on_write_field_set( b_ptr,
                                              h_ptr,
                                              A,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_ECC_1BIT_BERR_I12_MSK,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_ECC_1BIT_BERR_I12_OFF,
                                              value);
}

static INLINE UINT32 c8_field_ECC_1BIT_BERR_I12_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ECC_1BIT_BERR_I12_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ECC_1BIT_BERR_I12_get", A, 7);
    /* (0x00000114 bits 12) field ECC_1BIT_BERR_I12 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    reg_value = c8_reg_INT_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_REG_BIT_ECC_1BIT_BERR_I12_MSK) >> CNI_UNI_TXRX_REG_INT_REG_BIT_ECC_1BIT_BERR_I12_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ECC_1BIT_BERR_I12_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_ECC_1BIT_BERR_I12_poll( c8_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_ECC_1BIT_BERR_I12_poll( c8_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_ECC_1BIT_BERR_I12_poll", A, value );

    /* (0x00000114 bits 12) field ECC_1BIT_BERR_I12 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    return c8_reg_INT_REG_poll( b_ptr,
                                h_ptr,
                                A,
                                CNI_UNI_TXRX_REG_INT_REG_BIT_ECC_1BIT_BERR_I12_MSK,
                                (value<<CNI_UNI_TXRX_REG_INT_REG_BIT_ECC_1BIT_BERR_I12_OFF),
                                cmp,
                                max_count,
                                num_failed_polls,
                                delay_between_polls_in_microseconds);
}

static INLINE void c8_field_ECC_2BIT_AERR_I11_set_to_clear( c8_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_ECC_2BIT_AERR_I11_set_to_clear( c8_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ECC_2BIT_AERR_I11_set_to_clear", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_ECC_2BIT_AERR_I11_set_to_clear", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_ECC_2BIT_AERR_I11_set_to_clear", A, value );

    /* (0x00000114 bits 11) field ECC_2BIT_AERR_I11 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    c8_reg_INT_REG_action_on_write_field_set( b_ptr,
                                              h_ptr,
                                              A,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_ECC_2BIT_AERR_I11_MSK,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_ECC_2BIT_AERR_I11_OFF,
                                              value);
}

static INLINE UINT32 c8_field_ECC_2BIT_AERR_I11_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ECC_2BIT_AERR_I11_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ECC_2BIT_AERR_I11_get", A, 7);
    /* (0x00000114 bits 11) field ECC_2BIT_AERR_I11 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    reg_value = c8_reg_INT_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_REG_BIT_ECC_2BIT_AERR_I11_MSK) >> CNI_UNI_TXRX_REG_INT_REG_BIT_ECC_2BIT_AERR_I11_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ECC_2BIT_AERR_I11_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_ECC_2BIT_AERR_I11_poll( c8_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_ECC_2BIT_AERR_I11_poll( c8_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_ECC_2BIT_AERR_I11_poll", A, value );

    /* (0x00000114 bits 11) field ECC_2BIT_AERR_I11 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    return c8_reg_INT_REG_poll( b_ptr,
                                h_ptr,
                                A,
                                CNI_UNI_TXRX_REG_INT_REG_BIT_ECC_2BIT_AERR_I11_MSK,
                                (value<<CNI_UNI_TXRX_REG_INT_REG_BIT_ECC_2BIT_AERR_I11_OFF),
                                cmp,
                                max_count,
                                num_failed_polls,
                                delay_between_polls_in_microseconds);
}

static INLINE void c8_field_ECC_1BIT_AERR_I10_set_to_clear( c8_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_ECC_1BIT_AERR_I10_set_to_clear( c8_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A,
                                                            UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ECC_1BIT_AERR_I10_set_to_clear", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_ECC_1BIT_AERR_I10_set_to_clear", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_ECC_1BIT_AERR_I10_set_to_clear", A, value );

    /* (0x00000114 bits 10) field ECC_1BIT_AERR_I10 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    c8_reg_INT_REG_action_on_write_field_set( b_ptr,
                                              h_ptr,
                                              A,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_ECC_1BIT_AERR_I10_MSK,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_ECC_1BIT_AERR_I10_OFF,
                                              value);
}

static INLINE UINT32 c8_field_ECC_1BIT_AERR_I10_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ECC_1BIT_AERR_I10_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ECC_1BIT_AERR_I10_get", A, 7);
    /* (0x00000114 bits 10) field ECC_1BIT_AERR_I10 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    reg_value = c8_reg_INT_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_REG_BIT_ECC_1BIT_AERR_I10_MSK) >> CNI_UNI_TXRX_REG_INT_REG_BIT_ECC_1BIT_AERR_I10_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ECC_1BIT_AERR_I10_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_ECC_1BIT_AERR_I10_poll( c8_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_ECC_1BIT_AERR_I10_poll( c8_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_ECC_1BIT_AERR_I10_poll", A, value );

    /* (0x00000114 bits 10) field ECC_1BIT_AERR_I10 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    return c8_reg_INT_REG_poll( b_ptr,
                                h_ptr,
                                A,
                                CNI_UNI_TXRX_REG_INT_REG_BIT_ECC_1BIT_AERR_I10_MSK,
                                (value<<CNI_UNI_TXRX_REG_INT_REG_BIT_ECC_1BIT_AERR_I10_OFF),
                                cmp,
                                max_count,
                                num_failed_polls,
                                delay_between_polls_in_microseconds);
}

static INLINE void c8_field_ERROR_BIT_I9_set_to_clear( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_ERROR_BIT_I9_set_to_clear( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ERROR_BIT_I9_set_to_clear", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_ERROR_BIT_I9_set_to_clear", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_ERROR_BIT_I9_set_to_clear", A, value );

    /* (0x00000114 bits 9) field ERROR_BIT_I9 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    c8_reg_INT_REG_action_on_write_field_set( b_ptr,
                                              h_ptr,
                                              A,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_ERROR_BIT_I9_MSK,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_ERROR_BIT_I9_OFF,
                                              value);
}

static INLINE UINT32 c8_field_ERROR_BIT_I9_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ERROR_BIT_I9_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ERROR_BIT_I9_get", A, 7);
    /* (0x00000114 bits 9) field ERROR_BIT_I9 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    reg_value = c8_reg_INT_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_REG_BIT_ERROR_BIT_I9_MSK) >> CNI_UNI_TXRX_REG_INT_REG_BIT_ERROR_BIT_I9_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ERROR_BIT_I9_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_ERROR_BIT_I9_poll( c8_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value,
                                                               PMC_POLL_COMPARISON_TYPE cmp,
                                                               UINT32 max_count,
                                                               UINT32 *num_failed_polls,
                                                               UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_ERROR_BIT_I9_poll( c8_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value,
                                                               PMC_POLL_COMPARISON_TYPE cmp,
                                                               UINT32 max_count,
                                                               UINT32 *num_failed_polls,
                                                               UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_ERROR_BIT_I9_poll", A, value );

    /* (0x00000114 bits 9) field ERROR_BIT_I9 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    return c8_reg_INT_REG_poll( b_ptr,
                                h_ptr,
                                A,
                                CNI_UNI_TXRX_REG_INT_REG_BIT_ERROR_BIT_I9_MSK,
                                (value<<CNI_UNI_TXRX_REG_INT_REG_BIT_ERROR_BIT_I9_OFF),
                                cmp,
                                max_count,
                                num_failed_polls,
                                delay_between_polls_in_microseconds);
}

static INLINE void c8_field_DLOSB_I8_set_to_clear( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_DLOSB_I8_set_to_clear( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DLOSB_I8_set_to_clear", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_DLOSB_I8_set_to_clear", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_DLOSB_I8_set_to_clear", A, value );

    /* (0x00000114 bits 8) field DLOSB_I8 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    c8_reg_INT_REG_action_on_write_field_set( b_ptr,
                                              h_ptr,
                                              A,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_DLOSB_I8_MSK,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_DLOSB_I8_OFF,
                                              value);
}

static INLINE UINT32 c8_field_DLOSB_I8_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_DLOSB_I8_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DLOSB_I8_get", A, 7);
    /* (0x00000114 bits 8) field DLOSB_I8 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    reg_value = c8_reg_INT_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_REG_BIT_DLOSB_I8_MSK) >> CNI_UNI_TXRX_REG_INT_REG_BIT_DLOSB_I8_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_DLOSB_I8_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_DLOSB_I8_poll( c8_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 value,
                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                           UINT32 max_count,
                                                           UINT32 *num_failed_polls,
                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_DLOSB_I8_poll( c8_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 value,
                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                           UINT32 max_count,
                                                           UINT32 *num_failed_polls,
                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_DLOSB_I8_poll", A, value );

    /* (0x00000114 bits 8) field DLOSB_I8 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    return c8_reg_INT_REG_poll( b_ptr,
                                h_ptr,
                                A,
                                CNI_UNI_TXRX_REG_INT_REG_BIT_DLOSB_I8_MSK,
                                (value<<CNI_UNI_TXRX_REG_INT_REG_BIT_DLOSB_I8_OFF),
                                cmp,
                                max_count,
                                num_failed_polls,
                                delay_between_polls_in_microseconds);
}

static INLINE void c8_field_PROG_REF_DONE_I7_set_to_clear( c8_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_PROG_REF_DONE_I7_set_to_clear( c8_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PROG_REF_DONE_I7_set_to_clear", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_PROG_REF_DONE_I7_set_to_clear", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_PROG_REF_DONE_I7_set_to_clear", A, value );

    /* (0x00000114 bits 7) field PROG_REF_DONE_I7 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    c8_reg_INT_REG_action_on_write_field_set( b_ptr,
                                              h_ptr,
                                              A,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_PROG_REF_DONE_I7_MSK,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_PROG_REF_DONE_I7_OFF,
                                              value);
}

static INLINE UINT32 c8_field_PROG_REF_DONE_I7_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PROG_REF_DONE_I7_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PROG_REF_DONE_I7_get", A, 7);
    /* (0x00000114 bits 7) field PROG_REF_DONE_I7 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    reg_value = c8_reg_INT_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_REG_BIT_PROG_REF_DONE_I7_MSK) >> CNI_UNI_TXRX_REG_INT_REG_BIT_PROG_REF_DONE_I7_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PROG_REF_DONE_I7_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_PROG_REF_DONE_I7_poll( c8_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 value,
                                                                   PMC_POLL_COMPARISON_TYPE cmp,
                                                                   UINT32 max_count,
                                                                   UINT32 *num_failed_polls,
                                                                   UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_PROG_REF_DONE_I7_poll( c8_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 value,
                                                                   PMC_POLL_COMPARISON_TYPE cmp,
                                                                   UINT32 max_count,
                                                                   UINT32 *num_failed_polls,
                                                                   UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_PROG_REF_DONE_I7_poll", A, value );

    /* (0x00000114 bits 7) field PROG_REF_DONE_I7 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    return c8_reg_INT_REG_poll( b_ptr,
                                h_ptr,
                                A,
                                CNI_UNI_TXRX_REG_INT_REG_BIT_PROG_REF_DONE_I7_MSK,
                                (value<<CNI_UNI_TXRX_REG_INT_REG_BIT_PROG_REF_DONE_I7_OFF),
                                cmp,
                                max_count,
                                num_failed_polls,
                                delay_between_polls_in_microseconds);
}

static INLINE void c8_field_CALIB_DONE_I6_set_to_clear( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_CALIB_DONE_I6_set_to_clear( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_CALIB_DONE_I6_set_to_clear", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_CALIB_DONE_I6_set_to_clear", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_CALIB_DONE_I6_set_to_clear", A, value );

    /* (0x00000114 bits 6) field CALIB_DONE_I6 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    c8_reg_INT_REG_action_on_write_field_set( b_ptr,
                                              h_ptr,
                                              A,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_CALIB_DONE_I6_MSK,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_CALIB_DONE_I6_OFF,
                                              value);
}

static INLINE UINT32 c8_field_CALIB_DONE_I6_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_CALIB_DONE_I6_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_CALIB_DONE_I6_get", A, 7);
    /* (0x00000114 bits 6) field CALIB_DONE_I6 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    reg_value = c8_reg_INT_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_REG_BIT_CALIB_DONE_I6_MSK) >> CNI_UNI_TXRX_REG_INT_REG_BIT_CALIB_DONE_I6_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_CALIB_DONE_I6_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_CALIB_DONE_I6_poll( c8_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value,
                                                                PMC_POLL_COMPARISON_TYPE cmp,
                                                                UINT32 max_count,
                                                                UINT32 *num_failed_polls,
                                                                UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_CALIB_DONE_I6_poll( c8_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value,
                                                                PMC_POLL_COMPARISON_TYPE cmp,
                                                                UINT32 max_count,
                                                                UINT32 *num_failed_polls,
                                                                UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_CALIB_DONE_I6_poll", A, value );

    /* (0x00000114 bits 6) field CALIB_DONE_I6 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    return c8_reg_INT_REG_poll( b_ptr,
                                h_ptr,
                                A,
                                CNI_UNI_TXRX_REG_INT_REG_BIT_CALIB_DONE_I6_MSK,
                                (value<<CNI_UNI_TXRX_REG_INT_REG_BIT_CALIB_DONE_I6_OFF),
                                cmp,
                                max_count,
                                num_failed_polls,
                                delay_between_polls_in_microseconds);
}

static INLINE void c8_field_SSI_ADJUST_DONE_I5_set_to_clear( c8_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_SSI_ADJUST_DONE_I5_set_to_clear( c8_buffer_t *b_ptr,
                                                             c8_handle_t *h_ptr,
                                                             UINT32 A,
                                                             UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SSI_ADJUST_DONE_I5_set_to_clear", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_SSI_ADJUST_DONE_I5_set_to_clear", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_SSI_ADJUST_DONE_I5_set_to_clear", A, value );

    /* (0x00000114 bits 5) field SSI_ADJUST_DONE_I5 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    c8_reg_INT_REG_action_on_write_field_set( b_ptr,
                                              h_ptr,
                                              A,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_SSI_ADJUST_DONE_I5_MSK,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_SSI_ADJUST_DONE_I5_OFF,
                                              value);
}

static INLINE UINT32 c8_field_SSI_ADJUST_DONE_I5_get( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_SSI_ADJUST_DONE_I5_get( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SSI_ADJUST_DONE_I5_get", A, 7);
    /* (0x00000114 bits 5) field SSI_ADJUST_DONE_I5 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    reg_value = c8_reg_INT_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_REG_BIT_SSI_ADJUST_DONE_I5_MSK) >> CNI_UNI_TXRX_REG_INT_REG_BIT_SSI_ADJUST_DONE_I5_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_SSI_ADJUST_DONE_I5_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_SSI_ADJUST_DONE_I5_poll( c8_buffer_t *b_ptr,
                                                                     c8_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 value,
                                                                     PMC_POLL_COMPARISON_TYPE cmp,
                                                                     UINT32 max_count,
                                                                     UINT32 *num_failed_polls,
                                                                     UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_SSI_ADJUST_DONE_I5_poll( c8_buffer_t *b_ptr,
                                                                     c8_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 value,
                                                                     PMC_POLL_COMPARISON_TYPE cmp,
                                                                     UINT32 max_count,
                                                                     UINT32 *num_failed_polls,
                                                                     UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_SSI_ADJUST_DONE_I5_poll", A, value );

    /* (0x00000114 bits 5) field SSI_ADJUST_DONE_I5 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    return c8_reg_INT_REG_poll( b_ptr,
                                h_ptr,
                                A,
                                CNI_UNI_TXRX_REG_INT_REG_BIT_SSI_ADJUST_DONE_I5_MSK,
                                (value<<CNI_UNI_TXRX_REG_INT_REG_BIT_SSI_ADJUST_DONE_I5_OFF),
                                cmp,
                                max_count,
                                num_failed_polls,
                                delay_between_polls_in_microseconds);
}

static INLINE void c8_field_SSI_I4_set_to_clear( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_SSI_I4_set_to_clear( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SSI_I4_set_to_clear", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_SSI_I4_set_to_clear", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_SSI_I4_set_to_clear", A, value );

    /* (0x00000114 bits 4) field SSI_I4 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    c8_reg_INT_REG_action_on_write_field_set( b_ptr,
                                              h_ptr,
                                              A,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_SSI_I4_MSK,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_SSI_I4_OFF,
                                              value);
}

static INLINE UINT32 c8_field_SSI_I4_get( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_SSI_I4_get( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SSI_I4_get", A, 7);
    /* (0x00000114 bits 4) field SSI_I4 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    reg_value = c8_reg_INT_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_REG_BIT_SSI_I4_MSK) >> CNI_UNI_TXRX_REG_INT_REG_BIT_SSI_I4_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_SSI_I4_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_SSI_I4_poll( c8_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value,
                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                         UINT32 max_count,
                                                         UINT32 *num_failed_polls,
                                                         UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_SSI_I4_poll( c8_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value,
                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                         UINT32 max_count,
                                                         UINT32 *num_failed_polls,
                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_SSI_I4_poll", A, value );

    /* (0x00000114 bits 4) field SSI_I4 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    return c8_reg_INT_REG_poll( b_ptr,
                                h_ptr,
                                A,
                                CNI_UNI_TXRX_REG_INT_REG_BIT_SSI_I4_MSK,
                                (value<<CNI_UNI_TXRX_REG_INT_REG_BIT_SSI_I4_OFF),
                                cmp,
                                max_count,
                                num_failed_polls,
                                delay_between_polls_in_microseconds);
}

static INLINE void c8_field_LOCK_LOSS_I3_set_to_clear( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_LOCK_LOSS_I3_set_to_clear( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_LOCK_LOSS_I3_set_to_clear", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_LOCK_LOSS_I3_set_to_clear", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_LOCK_LOSS_I3_set_to_clear", A, value );

    /* (0x00000114 bits 3) field LOCK_LOSS_I3 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    c8_reg_INT_REG_action_on_write_field_set( b_ptr,
                                              h_ptr,
                                              A,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_LOCK_LOSS_I3_MSK,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_LOCK_LOSS_I3_OFF,
                                              value);
}

static INLINE UINT32 c8_field_LOCK_LOSS_I3_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_LOCK_LOSS_I3_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_LOCK_LOSS_I3_get", A, 7);
    /* (0x00000114 bits 3) field LOCK_LOSS_I3 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    reg_value = c8_reg_INT_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_REG_BIT_LOCK_LOSS_I3_MSK) >> CNI_UNI_TXRX_REG_INT_REG_BIT_LOCK_LOSS_I3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_LOCK_LOSS_I3_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_LOCK_LOSS_I3_poll( c8_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value,
                                                               PMC_POLL_COMPARISON_TYPE cmp,
                                                               UINT32 max_count,
                                                               UINT32 *num_failed_polls,
                                                               UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_LOCK_LOSS_I3_poll( c8_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value,
                                                               PMC_POLL_COMPARISON_TYPE cmp,
                                                               UINT32 max_count,
                                                               UINT32 *num_failed_polls,
                                                               UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_LOCK_LOSS_I3_poll", A, value );

    /* (0x00000114 bits 3) field LOCK_LOSS_I3 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    return c8_reg_INT_REG_poll( b_ptr,
                                h_ptr,
                                A,
                                CNI_UNI_TXRX_REG_INT_REG_BIT_LOCK_LOSS_I3_MSK,
                                (value<<CNI_UNI_TXRX_REG_INT_REG_BIT_LOCK_LOSS_I3_OFF),
                                cmp,
                                max_count,
                                num_failed_polls,
                                delay_between_polls_in_microseconds);
}

static INLINE void c8_field_LOCK_GAIN_I2_set_to_clear( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_LOCK_GAIN_I2_set_to_clear( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A,
                                                       UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_LOCK_GAIN_I2_set_to_clear", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_LOCK_GAIN_I2_set_to_clear", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_LOCK_GAIN_I2_set_to_clear", A, value );

    /* (0x00000114 bits 2) field LOCK_GAIN_I2 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    c8_reg_INT_REG_action_on_write_field_set( b_ptr,
                                              h_ptr,
                                              A,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_LOCK_GAIN_I2_MSK,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_LOCK_GAIN_I2_OFF,
                                              value);
}

static INLINE UINT32 c8_field_LOCK_GAIN_I2_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_LOCK_GAIN_I2_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_LOCK_GAIN_I2_get", A, 7);
    /* (0x00000114 bits 2) field LOCK_GAIN_I2 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    reg_value = c8_reg_INT_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_REG_BIT_LOCK_GAIN_I2_MSK) >> CNI_UNI_TXRX_REG_INT_REG_BIT_LOCK_GAIN_I2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_LOCK_GAIN_I2_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_LOCK_GAIN_I2_poll( c8_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value,
                                                               PMC_POLL_COMPARISON_TYPE cmp,
                                                               UINT32 max_count,
                                                               UINT32 *num_failed_polls,
                                                               UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_LOCK_GAIN_I2_poll( c8_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value,
                                                               PMC_POLL_COMPARISON_TYPE cmp,
                                                               UINT32 max_count,
                                                               UINT32 *num_failed_polls,
                                                               UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_LOCK_GAIN_I2_poll", A, value );

    /* (0x00000114 bits 2) field LOCK_GAIN_I2 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    return c8_reg_INT_REG_poll( b_ptr,
                                h_ptr,
                                A,
                                CNI_UNI_TXRX_REG_INT_REG_BIT_LOCK_GAIN_I2_MSK,
                                (value<<CNI_UNI_TXRX_REG_INT_REG_BIT_LOCK_GAIN_I2_OFF),
                                cmp,
                                max_count,
                                num_failed_polls,
                                delay_between_polls_in_microseconds);
}

static INLINE void c8_field_IN_RANGE_N_FAILS_I1_set_to_clear( c8_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_IN_RANGE_N_FAILS_I1_set_to_clear( c8_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_IN_RANGE_N_FAILS_I1_set_to_clear", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_IN_RANGE_N_FAILS_I1_set_to_clear", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_IN_RANGE_N_FAILS_I1_set_to_clear", A, value );

    /* (0x00000114 bits 1) field IN_RANGE_N_FAILS_I1 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    c8_reg_INT_REG_action_on_write_field_set( b_ptr,
                                              h_ptr,
                                              A,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_IN_RANGE_N_FAILS_I1_MSK,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_IN_RANGE_N_FAILS_I1_OFF,
                                              value);
}

static INLINE UINT32 c8_field_IN_RANGE_N_FAILS_I1_get( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_IN_RANGE_N_FAILS_I1_get( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_IN_RANGE_N_FAILS_I1_get", A, 7);
    /* (0x00000114 bits 1) field IN_RANGE_N_FAILS_I1 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    reg_value = c8_reg_INT_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_REG_BIT_IN_RANGE_N_FAILS_I1_MSK) >> CNI_UNI_TXRX_REG_INT_REG_BIT_IN_RANGE_N_FAILS_I1_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_IN_RANGE_N_FAILS_I1_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_IN_RANGE_N_FAILS_I1_poll( c8_buffer_t *b_ptr,
                                                                      c8_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value,
                                                                      PMC_POLL_COMPARISON_TYPE cmp,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_IN_RANGE_N_FAILS_I1_poll( c8_buffer_t *b_ptr,
                                                                      c8_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value,
                                                                      PMC_POLL_COMPARISON_TYPE cmp,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_IN_RANGE_N_FAILS_I1_poll", A, value );

    /* (0x00000114 bits 1) field IN_RANGE_N_FAILS_I1 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    return c8_reg_INT_REG_poll( b_ptr,
                                h_ptr,
                                A,
                                CNI_UNI_TXRX_REG_INT_REG_BIT_IN_RANGE_N_FAILS_I1_MSK,
                                (value<<CNI_UNI_TXRX_REG_INT_REG_BIT_IN_RANGE_N_FAILS_I1_OFF),
                                cmp,
                                max_count,
                                num_failed_polls,
                                delay_between_polls_in_microseconds);
}

static INLINE void c8_field_IN_RANGE_N_PASSES_I0_set_to_clear( c8_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_IN_RANGE_N_PASSES_I0_set_to_clear( c8_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_IN_RANGE_N_PASSES_I0_set_to_clear", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_IN_RANGE_N_PASSES_I0_set_to_clear", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_IN_RANGE_N_PASSES_I0_set_to_clear", A, value );

    /* (0x00000114 bits 0) field IN_RANGE_N_PASSES_I0 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    c8_reg_INT_REG_action_on_write_field_set( b_ptr,
                                              h_ptr,
                                              A,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_IN_RANGE_N_PASSES_I0_MSK,
                                              CNI_UNI_TXRX_REG_INT_REG_BIT_IN_RANGE_N_PASSES_I0_OFF,
                                              value);
}

static INLINE UINT32 c8_field_IN_RANGE_N_PASSES_I0_get( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_IN_RANGE_N_PASSES_I0_get( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_IN_RANGE_N_PASSES_I0_get", A, 7);
    /* (0x00000114 bits 0) field IN_RANGE_N_PASSES_I0 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    reg_value = c8_reg_INT_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_REG_BIT_IN_RANGE_N_PASSES_I0_MSK) >> CNI_UNI_TXRX_REG_INT_REG_BIT_IN_RANGE_N_PASSES_I0_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_IN_RANGE_N_PASSES_I0_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_IN_RANGE_N_PASSES_I0_poll( c8_buffer_t *b_ptr,
                                                                       c8_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 value,
                                                                       PMC_POLL_COMPARISON_TYPE cmp,
                                                                       UINT32 max_count,
                                                                       UINT32 *num_failed_polls,
                                                                       UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_IN_RANGE_N_PASSES_I0_poll( c8_buffer_t *b_ptr,
                                                                       c8_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 value,
                                                                       PMC_POLL_COMPARISON_TYPE cmp,
                                                                       UINT32 max_count,
                                                                       UINT32 *num_failed_polls,
                                                                       UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_IN_RANGE_N_PASSES_I0_poll", A, value );

    /* (0x00000114 bits 0) field IN_RANGE_N_PASSES_I0 of register PMC_CNI_UNI_TXRX_REG_INT_REG */
    return c8_reg_INT_REG_poll( b_ptr,
                                h_ptr,
                                A,
                                CNI_UNI_TXRX_REG_INT_REG_BIT_IN_RANGE_N_PASSES_I0_MSK,
                                (value<<CNI_UNI_TXRX_REG_INT_REG_BIT_IN_RANGE_N_PASSES_I0_OFF),
                                cmp,
                                max_count,
                                num_failed_polls,
                                delay_between_polls_in_microseconds);
}


/*
 * ==================================================================================
 * Parameter Access Functions for Paramset int_enable
 * ==================================================================================
 */
static INLINE void c8_field_PATT_MON_ERR_E17_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_PATT_MON_ERR_E17_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PATT_MON_ERR_E17_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_PATT_MON_ERR_E17_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_PATT_MON_ERR_E17_set", A, value );

    /* (0x00000118 bits 17) field PATT_MON_ERR_E17 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    c8_reg_INT_ENB_REG_field_set( b_ptr,
                                  h_ptr,
                                  A,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_PATT_MON_ERR_E17_MSK,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_PATT_MON_ERR_E17_OFF,
                                  value);
}

static INLINE UINT32 c8_field_PATT_MON_ERR_E17_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PATT_MON_ERR_E17_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PATT_MON_ERR_E17_get", A, 7);
    /* (0x00000118 bits 17) field PATT_MON_ERR_E17 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    reg_value = c8_reg_INT_ENB_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_PATT_MON_ERR_E17_MSK) >> CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_PATT_MON_ERR_E17_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PATT_MON_ERR_E17_get", A, value );

    return value;
}
static INLINE void c8_field_DIVCLK_DEAD_E16_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_DIVCLK_DEAD_E16_set( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DIVCLK_DEAD_E16_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_DIVCLK_DEAD_E16_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_DIVCLK_DEAD_E16_set", A, value );

    /* (0x00000118 bits 16) field DIVCLK_DEAD_E16 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    c8_reg_INT_ENB_REG_field_set( b_ptr,
                                  h_ptr,
                                  A,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_DIVCLK_DEAD_E16_MSK,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_DIVCLK_DEAD_E16_OFF,
                                  value);
}

static INLINE UINT32 c8_field_DIVCLK_DEAD_E16_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_DIVCLK_DEAD_E16_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DIVCLK_DEAD_E16_get", A, 7);
    /* (0x00000118 bits 16) field DIVCLK_DEAD_E16 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    reg_value = c8_reg_INT_ENB_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_DIVCLK_DEAD_E16_MSK) >> CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_DIVCLK_DEAD_E16_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_DIVCLK_DEAD_E16_get", A, value );

    return value;
}
static INLINE void c8_field_SIPO_BIST_ERR_E15_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_SIPO_BIST_ERR_E15_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SIPO_BIST_ERR_E15_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_SIPO_BIST_ERR_E15_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_SIPO_BIST_ERR_E15_set", A, value );

    /* (0x00000118 bits 15) field SIPO_BIST_ERR_E15 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    c8_reg_INT_ENB_REG_field_set( b_ptr,
                                  h_ptr,
                                  A,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_SIPO_BIST_ERR_E15_MSK,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_SIPO_BIST_ERR_E15_OFF,
                                  value);
}

static INLINE UINT32 c8_field_SIPO_BIST_ERR_E15_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_SIPO_BIST_ERR_E15_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SIPO_BIST_ERR_E15_get", A, 7);
    /* (0x00000118 bits 15) field SIPO_BIST_ERR_E15 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    reg_value = c8_reg_INT_ENB_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_SIPO_BIST_ERR_E15_MSK) >> CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_SIPO_BIST_ERR_E15_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_SIPO_BIST_ERR_E15_get", A, value );

    return value;
}
static INLINE void c8_field_RX_ADAPT_DONE_E14_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_RX_ADAPT_DONE_E14_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RX_ADAPT_DONE_E14_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_RX_ADAPT_DONE_E14_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_RX_ADAPT_DONE_E14_set", A, value );

    /* (0x00000118 bits 14) field RX_ADAPT_DONE_E14 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    c8_reg_INT_ENB_REG_field_set( b_ptr,
                                  h_ptr,
                                  A,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_RX_ADAPT_DONE_E14_MSK,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_RX_ADAPT_DONE_E14_OFF,
                                  value);
}

static INLINE UINT32 c8_field_RX_ADAPT_DONE_E14_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RX_ADAPT_DONE_E14_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RX_ADAPT_DONE_E14_get", A, 7);
    /* (0x00000118 bits 14) field RX_ADAPT_DONE_E14 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    reg_value = c8_reg_INT_ENB_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_RX_ADAPT_DONE_E14_MSK) >> CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_RX_ADAPT_DONE_E14_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RX_ADAPT_DONE_E14_get", A, value );

    return value;
}
static INLINE void c8_field_ECC_2BIT_BERR_E13_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_ECC_2BIT_BERR_E13_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ECC_2BIT_BERR_E13_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_ECC_2BIT_BERR_E13_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_ECC_2BIT_BERR_E13_set", A, value );

    /* (0x00000118 bits 13) field ECC_2BIT_BERR_E13 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    c8_reg_INT_ENB_REG_field_set( b_ptr,
                                  h_ptr,
                                  A,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_ECC_2BIT_BERR_E13_MSK,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_ECC_2BIT_BERR_E13_OFF,
                                  value);
}

static INLINE UINT32 c8_field_ECC_2BIT_BERR_E13_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ECC_2BIT_BERR_E13_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ECC_2BIT_BERR_E13_get", A, 7);
    /* (0x00000118 bits 13) field ECC_2BIT_BERR_E13 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    reg_value = c8_reg_INT_ENB_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_ECC_2BIT_BERR_E13_MSK) >> CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_ECC_2BIT_BERR_E13_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ECC_2BIT_BERR_E13_get", A, value );

    return value;
}
static INLINE void c8_field_ECC_1BIT_BERR_E12_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_ECC_1BIT_BERR_E12_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ECC_1BIT_BERR_E12_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_ECC_1BIT_BERR_E12_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_ECC_1BIT_BERR_E12_set", A, value );

    /* (0x00000118 bits 12) field ECC_1BIT_BERR_E12 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    c8_reg_INT_ENB_REG_field_set( b_ptr,
                                  h_ptr,
                                  A,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_ECC_1BIT_BERR_E12_MSK,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_ECC_1BIT_BERR_E12_OFF,
                                  value);
}

static INLINE UINT32 c8_field_ECC_1BIT_BERR_E12_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ECC_1BIT_BERR_E12_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ECC_1BIT_BERR_E12_get", A, 7);
    /* (0x00000118 bits 12) field ECC_1BIT_BERR_E12 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    reg_value = c8_reg_INT_ENB_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_ECC_1BIT_BERR_E12_MSK) >> CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_ECC_1BIT_BERR_E12_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ECC_1BIT_BERR_E12_get", A, value );

    return value;
}
static INLINE void c8_field_ECC_2BIT_AERR_E11_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_ECC_2BIT_AERR_E11_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ECC_2BIT_AERR_E11_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_ECC_2BIT_AERR_E11_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_ECC_2BIT_AERR_E11_set", A, value );

    /* (0x00000118 bits 11) field ECC_2BIT_AERR_E11 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    c8_reg_INT_ENB_REG_field_set( b_ptr,
                                  h_ptr,
                                  A,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_ECC_2BIT_AERR_E11_MSK,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_ECC_2BIT_AERR_E11_OFF,
                                  value);
}

static INLINE UINT32 c8_field_ECC_2BIT_AERR_E11_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ECC_2BIT_AERR_E11_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ECC_2BIT_AERR_E11_get", A, 7);
    /* (0x00000118 bits 11) field ECC_2BIT_AERR_E11 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    reg_value = c8_reg_INT_ENB_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_ECC_2BIT_AERR_E11_MSK) >> CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_ECC_2BIT_AERR_E11_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ECC_2BIT_AERR_E11_get", A, value );

    return value;
}
static INLINE void c8_field_ECC_1BIT_AERR_E10_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_ECC_1BIT_AERR_E10_set( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A,
                                                   UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ECC_1BIT_AERR_E10_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_ECC_1BIT_AERR_E10_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_ECC_1BIT_AERR_E10_set", A, value );

    /* (0x00000118 bits 10) field ECC_1BIT_AERR_E10 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    c8_reg_INT_ENB_REG_field_set( b_ptr,
                                  h_ptr,
                                  A,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_ECC_1BIT_AERR_E10_MSK,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_ECC_1BIT_AERR_E10_OFF,
                                  value);
}

static INLINE UINT32 c8_field_ECC_1BIT_AERR_E10_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ECC_1BIT_AERR_E10_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ECC_1BIT_AERR_E10_get", A, 7);
    /* (0x00000118 bits 10) field ECC_1BIT_AERR_E10 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    reg_value = c8_reg_INT_ENB_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_ECC_1BIT_AERR_E10_MSK) >> CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_ECC_1BIT_AERR_E10_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ECC_1BIT_AERR_E10_get", A, value );

    return value;
}
static INLINE void c8_field_ERROR_BIT_E9_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_ERROR_BIT_E9_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ERROR_BIT_E9_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_ERROR_BIT_E9_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_ERROR_BIT_E9_set", A, value );

    /* (0x00000118 bits 9) field ERROR_BIT_E9 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    c8_reg_INT_ENB_REG_field_set( b_ptr,
                                  h_ptr,
                                  A,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_ERROR_BIT_E9_MSK,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_ERROR_BIT_E9_OFF,
                                  value);
}

static INLINE UINT32 c8_field_ERROR_BIT_E9_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ERROR_BIT_E9_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ERROR_BIT_E9_get", A, 7);
    /* (0x00000118 bits 9) field ERROR_BIT_E9 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    reg_value = c8_reg_INT_ENB_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_ERROR_BIT_E9_MSK) >> CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_ERROR_BIT_E9_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ERROR_BIT_E9_get", A, value );

    return value;
}
static INLINE void c8_field_DLOSB_E8_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_DLOSB_E8_set( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A,
                                          UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DLOSB_E8_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_DLOSB_E8_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_DLOSB_E8_set", A, value );

    /* (0x00000118 bits 8) field DLOSB_E8 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    c8_reg_INT_ENB_REG_field_set( b_ptr,
                                  h_ptr,
                                  A,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_DLOSB_E8_MSK,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_DLOSB_E8_OFF,
                                  value);
}

static INLINE UINT32 c8_field_DLOSB_E8_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_DLOSB_E8_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DLOSB_E8_get", A, 7);
    /* (0x00000118 bits 8) field DLOSB_E8 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    reg_value = c8_reg_INT_ENB_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_DLOSB_E8_MSK) >> CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_DLOSB_E8_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_DLOSB_E8_get", A, value );

    return value;
}
static INLINE void c8_field_PROG_REF_DONE_E7_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_PROG_REF_DONE_E7_set( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A,
                                                  UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PROG_REF_DONE_E7_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_PROG_REF_DONE_E7_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_PROG_REF_DONE_E7_set", A, value );

    /* (0x00000118 bits 7) field PROG_REF_DONE_E7 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    c8_reg_INT_ENB_REG_field_set( b_ptr,
                                  h_ptr,
                                  A,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_PROG_REF_DONE_E7_MSK,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_PROG_REF_DONE_E7_OFF,
                                  value);
}

static INLINE UINT32 c8_field_PROG_REF_DONE_E7_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PROG_REF_DONE_E7_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PROG_REF_DONE_E7_get", A, 7);
    /* (0x00000118 bits 7) field PROG_REF_DONE_E7 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    reg_value = c8_reg_INT_ENB_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_PROG_REF_DONE_E7_MSK) >> CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_PROG_REF_DONE_E7_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PROG_REF_DONE_E7_get", A, value );

    return value;
}
static INLINE void c8_field_CALIB_DONE_E6_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_CALIB_DONE_E6_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_CALIB_DONE_E6_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_CALIB_DONE_E6_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_CALIB_DONE_E6_set", A, value );

    /* (0x00000118 bits 6) field CALIB_DONE_E6 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    c8_reg_INT_ENB_REG_field_set( b_ptr,
                                  h_ptr,
                                  A,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_CALIB_DONE_E6_MSK,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_CALIB_DONE_E6_OFF,
                                  value);
}

static INLINE UINT32 c8_field_CALIB_DONE_E6_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_CALIB_DONE_E6_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_CALIB_DONE_E6_get", A, 7);
    /* (0x00000118 bits 6) field CALIB_DONE_E6 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    reg_value = c8_reg_INT_ENB_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_CALIB_DONE_E6_MSK) >> CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_CALIB_DONE_E6_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_CALIB_DONE_E6_get", A, value );

    return value;
}
static INLINE void c8_field_SSI_ADJUST_DONE_E5_set( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_SSI_ADJUST_DONE_E5_set( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SSI_ADJUST_DONE_E5_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_SSI_ADJUST_DONE_E5_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_SSI_ADJUST_DONE_E5_set", A, value );

    /* (0x00000118 bits 5) field SSI_ADJUST_DONE_E5 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    c8_reg_INT_ENB_REG_field_set( b_ptr,
                                  h_ptr,
                                  A,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_SSI_ADJUST_DONE_E5_MSK,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_SSI_ADJUST_DONE_E5_OFF,
                                  value);
}

static INLINE UINT32 c8_field_SSI_ADJUST_DONE_E5_get( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_SSI_ADJUST_DONE_E5_get( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SSI_ADJUST_DONE_E5_get", A, 7);
    /* (0x00000118 bits 5) field SSI_ADJUST_DONE_E5 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    reg_value = c8_reg_INT_ENB_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_SSI_ADJUST_DONE_E5_MSK) >> CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_SSI_ADJUST_DONE_E5_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_SSI_ADJUST_DONE_E5_get", A, value );

    return value;
}
static INLINE void c8_field_SSI_E4_set( c8_buffer_t *b_ptr,
                                        c8_handle_t *h_ptr,
                                        UINT32 A,
                                        UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_SSI_E4_set( c8_buffer_t *b_ptr,
                                        c8_handle_t *h_ptr,
                                        UINT32 A,
                                        UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SSI_E4_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_SSI_E4_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_SSI_E4_set", A, value );

    /* (0x00000118 bits 4) field SSI_E4 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    c8_reg_INT_ENB_REG_field_set( b_ptr,
                                  h_ptr,
                                  A,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_SSI_E4_MSK,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_SSI_E4_OFF,
                                  value);
}

static INLINE UINT32 c8_field_SSI_E4_get( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_SSI_E4_get( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SSI_E4_get", A, 7);
    /* (0x00000118 bits 4) field SSI_E4 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    reg_value = c8_reg_INT_ENB_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_SSI_E4_MSK) >> CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_SSI_E4_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_SSI_E4_get", A, value );

    return value;
}
static INLINE void c8_field_LOCK_LOSS_E3_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_LOCK_LOSS_E3_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_LOCK_LOSS_E3_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_LOCK_LOSS_E3_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_LOCK_LOSS_E3_set", A, value );

    /* (0x00000118 bits 3) field LOCK_LOSS_E3 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    c8_reg_INT_ENB_REG_field_set( b_ptr,
                                  h_ptr,
                                  A,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_LOCK_LOSS_E3_MSK,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_LOCK_LOSS_E3_OFF,
                                  value);
}

static INLINE UINT32 c8_field_LOCK_LOSS_E3_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_LOCK_LOSS_E3_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_LOCK_LOSS_E3_get", A, 7);
    /* (0x00000118 bits 3) field LOCK_LOSS_E3 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    reg_value = c8_reg_INT_ENB_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_LOCK_LOSS_E3_MSK) >> CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_LOCK_LOSS_E3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_LOCK_LOSS_E3_get", A, value );

    return value;
}
static INLINE void c8_field_LOCK_GAIN_E2_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_LOCK_GAIN_E2_set( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A,
                                              UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_LOCK_GAIN_E2_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_LOCK_GAIN_E2_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_LOCK_GAIN_E2_set", A, value );

    /* (0x00000118 bits 2) field LOCK_GAIN_E2 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    c8_reg_INT_ENB_REG_field_set( b_ptr,
                                  h_ptr,
                                  A,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_LOCK_GAIN_E2_MSK,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_LOCK_GAIN_E2_OFF,
                                  value);
}

static INLINE UINT32 c8_field_LOCK_GAIN_E2_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_LOCK_GAIN_E2_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_LOCK_GAIN_E2_get", A, 7);
    /* (0x00000118 bits 2) field LOCK_GAIN_E2 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    reg_value = c8_reg_INT_ENB_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_LOCK_GAIN_E2_MSK) >> CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_LOCK_GAIN_E2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_LOCK_GAIN_E2_get", A, value );

    return value;
}
static INLINE void c8_field_IN_RANGE_N_FAILS_E1_set( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_IN_RANGE_N_FAILS_E1_set( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_IN_RANGE_N_FAILS_E1_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_IN_RANGE_N_FAILS_E1_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_IN_RANGE_N_FAILS_E1_set", A, value );

    /* (0x00000118 bits 1) field IN_RANGE_N_FAILS_E1 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    c8_reg_INT_ENB_REG_field_set( b_ptr,
                                  h_ptr,
                                  A,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_IN_RANGE_N_FAILS_E1_MSK,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_IN_RANGE_N_FAILS_E1_OFF,
                                  value);
}

static INLINE UINT32 c8_field_IN_RANGE_N_FAILS_E1_get( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_IN_RANGE_N_FAILS_E1_get( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_IN_RANGE_N_FAILS_E1_get", A, 7);
    /* (0x00000118 bits 1) field IN_RANGE_N_FAILS_E1 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    reg_value = c8_reg_INT_ENB_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_IN_RANGE_N_FAILS_E1_MSK) >> CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_IN_RANGE_N_FAILS_E1_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_IN_RANGE_N_FAILS_E1_get", A, value );

    return value;
}
static INLINE void c8_field_IN_RANGE_N_PASSES_E0_set( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_field_IN_RANGE_N_PASSES_E0_set( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A,
                                                      UINT32 value )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_IN_RANGE_N_PASSES_E0_set", A, 7);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "c8_field_IN_RANGE_N_PASSES_E0_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "c8_field_IN_RANGE_N_PASSES_E0_set", A, value );

    /* (0x00000118 bits 0) field IN_RANGE_N_PASSES_E0 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    c8_reg_INT_ENB_REG_field_set( b_ptr,
                                  h_ptr,
                                  A,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_IN_RANGE_N_PASSES_E0_MSK,
                                  CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_IN_RANGE_N_PASSES_E0_OFF,
                                  value);
}

static INLINE UINT32 c8_field_IN_RANGE_N_PASSES_E0_get( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_IN_RANGE_N_PASSES_E0_get( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_IN_RANGE_N_PASSES_E0_get", A, 7);
    /* (0x00000118 bits 0) field IN_RANGE_N_PASSES_E0 of register PMC_CNI_UNI_TXRX_REG_INT_ENB_REG */
    reg_value = c8_reg_INT_ENB_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_IN_RANGE_N_PASSES_E0_MSK) >> CNI_UNI_TXRX_REG_INT_ENB_REG_BIT_IN_RANGE_N_PASSES_E0_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_IN_RANGE_N_PASSES_E0_get", A, value );

    return value;
}

/*
 * ==================================================================================
 * Parameter Access Functions for Paramset int_value
 * ==================================================================================
 */
static INLINE UINT32 c8_field_PATT_MON_ERR_V17_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PATT_MON_ERR_V17_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PATT_MON_ERR_V17_get", A, 7);
    /* (0x0000011c bits 17) field PATT_MON_ERR_V17 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    reg_value = c8_reg_INT_VAL_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_PATT_MON_ERR_V17_MSK) >> CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_PATT_MON_ERR_V17_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PATT_MON_ERR_V17_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_PATT_MON_ERR_V17_poll( c8_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 value,
                                                                   PMC_POLL_COMPARISON_TYPE cmp,
                                                                   UINT32 max_count,
                                                                   UINT32 *num_failed_polls,
                                                                   UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_PATT_MON_ERR_V17_poll( c8_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 value,
                                                                   PMC_POLL_COMPARISON_TYPE cmp,
                                                                   UINT32 max_count,
                                                                   UINT32 *num_failed_polls,
                                                                   UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_PATT_MON_ERR_V17_poll", A, value );

    /* (0x0000011c bits 17) field PATT_MON_ERR_V17 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    return c8_reg_INT_VAL_REG_poll( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_PATT_MON_ERR_V17_MSK,
                                    (value<<CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_PATT_MON_ERR_V17_OFF),
                                    cmp,
                                    max_count,
                                    num_failed_polls,
                                    delay_between_polls_in_microseconds);
}

static INLINE UINT32 c8_field_DIVCLK_DEAD_V16_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_DIVCLK_DEAD_V16_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DIVCLK_DEAD_V16_get", A, 7);
    /* (0x0000011c bits 16) field DIVCLK_DEAD_V16 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    reg_value = c8_reg_INT_VAL_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_DIVCLK_DEAD_V16_MSK) >> CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_DIVCLK_DEAD_V16_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_DIVCLK_DEAD_V16_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_DIVCLK_DEAD_V16_poll( c8_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 value,
                                                                  PMC_POLL_COMPARISON_TYPE cmp,
                                                                  UINT32 max_count,
                                                                  UINT32 *num_failed_polls,
                                                                  UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_DIVCLK_DEAD_V16_poll( c8_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 value,
                                                                  PMC_POLL_COMPARISON_TYPE cmp,
                                                                  UINT32 max_count,
                                                                  UINT32 *num_failed_polls,
                                                                  UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_DIVCLK_DEAD_V16_poll", A, value );

    /* (0x0000011c bits 16) field DIVCLK_DEAD_V16 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    return c8_reg_INT_VAL_REG_poll( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_DIVCLK_DEAD_V16_MSK,
                                    (value<<CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_DIVCLK_DEAD_V16_OFF),
                                    cmp,
                                    max_count,
                                    num_failed_polls,
                                    delay_between_polls_in_microseconds);
}

static INLINE UINT32 c8_field_SIPO_BIST_ERR_V15_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_SIPO_BIST_ERR_V15_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SIPO_BIST_ERR_V15_get", A, 7);
    /* (0x0000011c bits 15) field SIPO_BIST_ERR_V15 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    reg_value = c8_reg_INT_VAL_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_SIPO_BIST_ERR_V15_MSK) >> CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_SIPO_BIST_ERR_V15_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_SIPO_BIST_ERR_V15_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_SIPO_BIST_ERR_V15_poll( c8_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_SIPO_BIST_ERR_V15_poll( c8_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_SIPO_BIST_ERR_V15_poll", A, value );

    /* (0x0000011c bits 15) field SIPO_BIST_ERR_V15 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    return c8_reg_INT_VAL_REG_poll( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_SIPO_BIST_ERR_V15_MSK,
                                    (value<<CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_SIPO_BIST_ERR_V15_OFF),
                                    cmp,
                                    max_count,
                                    num_failed_polls,
                                    delay_between_polls_in_microseconds);
}

static INLINE UINT32 c8_field_RX_ADAPT_DONE_V14_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_RX_ADAPT_DONE_V14_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_RX_ADAPT_DONE_V14_get", A, 7);
    /* (0x0000011c bits 14) field RX_ADAPT_DONE_V14 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    reg_value = c8_reg_INT_VAL_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_RX_ADAPT_DONE_V14_MSK) >> CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_RX_ADAPT_DONE_V14_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_RX_ADAPT_DONE_V14_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_RX_ADAPT_DONE_V14_poll( c8_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_RX_ADAPT_DONE_V14_poll( c8_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_RX_ADAPT_DONE_V14_poll", A, value );

    /* (0x0000011c bits 14) field RX_ADAPT_DONE_V14 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    return c8_reg_INT_VAL_REG_poll( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_RX_ADAPT_DONE_V14_MSK,
                                    (value<<CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_RX_ADAPT_DONE_V14_OFF),
                                    cmp,
                                    max_count,
                                    num_failed_polls,
                                    delay_between_polls_in_microseconds);
}

static INLINE UINT32 c8_field_ECC_2BIT_BERR_V13_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ECC_2BIT_BERR_V13_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ECC_2BIT_BERR_V13_get", A, 7);
    /* (0x0000011c bits 13) field ECC_2BIT_BERR_V13 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    reg_value = c8_reg_INT_VAL_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_ECC_2BIT_BERR_V13_MSK) >> CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_ECC_2BIT_BERR_V13_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ECC_2BIT_BERR_V13_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_ECC_2BIT_BERR_V13_poll( c8_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_ECC_2BIT_BERR_V13_poll( c8_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_ECC_2BIT_BERR_V13_poll", A, value );

    /* (0x0000011c bits 13) field ECC_2BIT_BERR_V13 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    return c8_reg_INT_VAL_REG_poll( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_ECC_2BIT_BERR_V13_MSK,
                                    (value<<CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_ECC_2BIT_BERR_V13_OFF),
                                    cmp,
                                    max_count,
                                    num_failed_polls,
                                    delay_between_polls_in_microseconds);
}

static INLINE UINT32 c8_field_ECC_1BIT_BERR_V12_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ECC_1BIT_BERR_V12_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ECC_1BIT_BERR_V12_get", A, 7);
    /* (0x0000011c bits 12) field ECC_1BIT_BERR_V12 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    reg_value = c8_reg_INT_VAL_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_ECC_1BIT_BERR_V12_MSK) >> CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_ECC_1BIT_BERR_V12_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ECC_1BIT_BERR_V12_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_ECC_1BIT_BERR_V12_poll( c8_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_ECC_1BIT_BERR_V12_poll( c8_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_ECC_1BIT_BERR_V12_poll", A, value );

    /* (0x0000011c bits 12) field ECC_1BIT_BERR_V12 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    return c8_reg_INT_VAL_REG_poll( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_ECC_1BIT_BERR_V12_MSK,
                                    (value<<CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_ECC_1BIT_BERR_V12_OFF),
                                    cmp,
                                    max_count,
                                    num_failed_polls,
                                    delay_between_polls_in_microseconds);
}

static INLINE UINT32 c8_field_ECC_2BIT_AERR_V11_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ECC_2BIT_AERR_V11_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ECC_2BIT_AERR_V11_get", A, 7);
    /* (0x0000011c bits 11) field ECC_2BIT_AERR_V11 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    reg_value = c8_reg_INT_VAL_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_ECC_2BIT_AERR_V11_MSK) >> CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_ECC_2BIT_AERR_V11_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ECC_2BIT_AERR_V11_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_ECC_2BIT_AERR_V11_poll( c8_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_ECC_2BIT_AERR_V11_poll( c8_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_ECC_2BIT_AERR_V11_poll", A, value );

    /* (0x0000011c bits 11) field ECC_2BIT_AERR_V11 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    return c8_reg_INT_VAL_REG_poll( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_ECC_2BIT_AERR_V11_MSK,
                                    (value<<CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_ECC_2BIT_AERR_V11_OFF),
                                    cmp,
                                    max_count,
                                    num_failed_polls,
                                    delay_between_polls_in_microseconds);
}

static INLINE UINT32 c8_field_ECC_1BIT_AERR_V10_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ECC_1BIT_AERR_V10_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ECC_1BIT_AERR_V10_get", A, 7);
    /* (0x0000011c bits 10) field ECC_1BIT_AERR_V10 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    reg_value = c8_reg_INT_VAL_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_ECC_1BIT_AERR_V10_MSK) >> CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_ECC_1BIT_AERR_V10_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ECC_1BIT_AERR_V10_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_ECC_1BIT_AERR_V10_poll( c8_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_ECC_1BIT_AERR_V10_poll( c8_buffer_t *b_ptr,
                                                                    c8_handle_t *h_ptr,
                                                                    UINT32 A,
                                                                    UINT32 value,
                                                                    PMC_POLL_COMPARISON_TYPE cmp,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_ECC_1BIT_AERR_V10_poll", A, value );

    /* (0x0000011c bits 10) field ECC_1BIT_AERR_V10 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    return c8_reg_INT_VAL_REG_poll( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_ECC_1BIT_AERR_V10_MSK,
                                    (value<<CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_ECC_1BIT_AERR_V10_OFF),
                                    cmp,
                                    max_count,
                                    num_failed_polls,
                                    delay_between_polls_in_microseconds);
}

static INLINE UINT32 c8_field_ERROR_BIT_V9_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ERROR_BIT_V9_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ERROR_BIT_V9_get", A, 7);
    /* (0x0000011c bits 9) field ERROR_BIT_V9 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    reg_value = c8_reg_INT_VAL_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_ERROR_BIT_V9_MSK) >> CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_ERROR_BIT_V9_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ERROR_BIT_V9_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_ERROR_BIT_V9_poll( c8_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value,
                                                               PMC_POLL_COMPARISON_TYPE cmp,
                                                               UINT32 max_count,
                                                               UINT32 *num_failed_polls,
                                                               UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_ERROR_BIT_V9_poll( c8_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value,
                                                               PMC_POLL_COMPARISON_TYPE cmp,
                                                               UINT32 max_count,
                                                               UINT32 *num_failed_polls,
                                                               UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_ERROR_BIT_V9_poll", A, value );

    /* (0x0000011c bits 9) field ERROR_BIT_V9 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    return c8_reg_INT_VAL_REG_poll( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_ERROR_BIT_V9_MSK,
                                    (value<<CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_ERROR_BIT_V9_OFF),
                                    cmp,
                                    max_count,
                                    num_failed_polls,
                                    delay_between_polls_in_microseconds);
}

static INLINE UINT32 c8_field_DLOSB_V8_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_DLOSB_V8_get( c8_buffer_t *b_ptr,
                                            c8_handle_t *h_ptr,
                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_DLOSB_V8_get", A, 7);
    /* (0x0000011c bits 8) field DLOSB_V8 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    reg_value = c8_reg_INT_VAL_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_DLOSB_V8_MSK) >> CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_DLOSB_V8_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_DLOSB_V8_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_DLOSB_V8_poll( c8_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 value,
                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                           UINT32 max_count,
                                                           UINT32 *num_failed_polls,
                                                           UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_DLOSB_V8_poll( c8_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A,
                                                           UINT32 value,
                                                           PMC_POLL_COMPARISON_TYPE cmp,
                                                           UINT32 max_count,
                                                           UINT32 *num_failed_polls,
                                                           UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_DLOSB_V8_poll", A, value );

    /* (0x0000011c bits 8) field DLOSB_V8 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    return c8_reg_INT_VAL_REG_poll( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_DLOSB_V8_MSK,
                                    (value<<CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_DLOSB_V8_OFF),
                                    cmp,
                                    max_count,
                                    num_failed_polls,
                                    delay_between_polls_in_microseconds);
}

static INLINE UINT32 c8_field_PROG_REF_DONE_V7_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PROG_REF_DONE_V7_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PROG_REF_DONE_V7_get", A, 7);
    /* (0x0000011c bits 7) field PROG_REF_DONE_V7 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    reg_value = c8_reg_INT_VAL_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_PROG_REF_DONE_V7_MSK) >> CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_PROG_REF_DONE_V7_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PROG_REF_DONE_V7_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_PROG_REF_DONE_V7_poll( c8_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 value,
                                                                   PMC_POLL_COMPARISON_TYPE cmp,
                                                                   UINT32 max_count,
                                                                   UINT32 *num_failed_polls,
                                                                   UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_PROG_REF_DONE_V7_poll( c8_buffer_t *b_ptr,
                                                                   c8_handle_t *h_ptr,
                                                                   UINT32 A,
                                                                   UINT32 value,
                                                                   PMC_POLL_COMPARISON_TYPE cmp,
                                                                   UINT32 max_count,
                                                                   UINT32 *num_failed_polls,
                                                                   UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_PROG_REF_DONE_V7_poll", A, value );

    /* (0x0000011c bits 7) field PROG_REF_DONE_V7 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    return c8_reg_INT_VAL_REG_poll( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_PROG_REF_DONE_V7_MSK,
                                    (value<<CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_PROG_REF_DONE_V7_OFF),
                                    cmp,
                                    max_count,
                                    num_failed_polls,
                                    delay_between_polls_in_microseconds);
}

static INLINE UINT32 c8_field_CALIB_DONE_V6_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_CALIB_DONE_V6_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_CALIB_DONE_V6_get", A, 7);
    /* (0x0000011c bits 6) field CALIB_DONE_V6 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    reg_value = c8_reg_INT_VAL_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_CALIB_DONE_V6_MSK) >> CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_CALIB_DONE_V6_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_CALIB_DONE_V6_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_CALIB_DONE_V6_poll( c8_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value,
                                                                PMC_POLL_COMPARISON_TYPE cmp,
                                                                UINT32 max_count,
                                                                UINT32 *num_failed_polls,
                                                                UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_CALIB_DONE_V6_poll( c8_buffer_t *b_ptr,
                                                                c8_handle_t *h_ptr,
                                                                UINT32 A,
                                                                UINT32 value,
                                                                PMC_POLL_COMPARISON_TYPE cmp,
                                                                UINT32 max_count,
                                                                UINT32 *num_failed_polls,
                                                                UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_CALIB_DONE_V6_poll", A, value );

    /* (0x0000011c bits 6) field CALIB_DONE_V6 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    return c8_reg_INT_VAL_REG_poll( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_CALIB_DONE_V6_MSK,
                                    (value<<CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_CALIB_DONE_V6_OFF),
                                    cmp,
                                    max_count,
                                    num_failed_polls,
                                    delay_between_polls_in_microseconds);
}

static INLINE UINT32 c8_field_SSI_ADJUST_DONE_V5_get( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_SSI_ADJUST_DONE_V5_get( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SSI_ADJUST_DONE_V5_get", A, 7);
    /* (0x0000011c bits 5) field SSI_ADJUST_DONE_V5 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    reg_value = c8_reg_INT_VAL_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_SSI_ADJUST_DONE_V5_MSK) >> CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_SSI_ADJUST_DONE_V5_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_SSI_ADJUST_DONE_V5_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_SSI_ADJUST_DONE_V5_poll( c8_buffer_t *b_ptr,
                                                                     c8_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 value,
                                                                     PMC_POLL_COMPARISON_TYPE cmp,
                                                                     UINT32 max_count,
                                                                     UINT32 *num_failed_polls,
                                                                     UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_SSI_ADJUST_DONE_V5_poll( c8_buffer_t *b_ptr,
                                                                     c8_handle_t *h_ptr,
                                                                     UINT32 A,
                                                                     UINT32 value,
                                                                     PMC_POLL_COMPARISON_TYPE cmp,
                                                                     UINT32 max_count,
                                                                     UINT32 *num_failed_polls,
                                                                     UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_SSI_ADJUST_DONE_V5_poll", A, value );

    /* (0x0000011c bits 5) field SSI_ADJUST_DONE_V5 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    return c8_reg_INT_VAL_REG_poll( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_SSI_ADJUST_DONE_V5_MSK,
                                    (value<<CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_SSI_ADJUST_DONE_V5_OFF),
                                    cmp,
                                    max_count,
                                    num_failed_polls,
                                    delay_between_polls_in_microseconds);
}

static INLINE UINT32 c8_field_SSI_V4_get( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_SSI_V4_get( c8_buffer_t *b_ptr,
                                          c8_handle_t *h_ptr,
                                          UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SSI_V4_get", A, 7);
    /* (0x0000011c bits 4) field SSI_V4 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    reg_value = c8_reg_INT_VAL_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_SSI_V4_MSK) >> CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_SSI_V4_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_SSI_V4_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_SSI_V4_poll( c8_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value,
                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                         UINT32 max_count,
                                                         UINT32 *num_failed_polls,
                                                         UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_SSI_V4_poll( c8_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 value,
                                                         PMC_POLL_COMPARISON_TYPE cmp,
                                                         UINT32 max_count,
                                                         UINT32 *num_failed_polls,
                                                         UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_SSI_V4_poll", A, value );

    /* (0x0000011c bits 4) field SSI_V4 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    return c8_reg_INT_VAL_REG_poll( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_SSI_V4_MSK,
                                    (value<<CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_SSI_V4_OFF),
                                    cmp,
                                    max_count,
                                    num_failed_polls,
                                    delay_between_polls_in_microseconds);
}

static INLINE UINT32 c8_field_LOCK_LOSS_V3_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_LOCK_LOSS_V3_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_LOCK_LOSS_V3_get", A, 7);
    /* (0x0000011c bits 3) field LOCK_LOSS_V3 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    reg_value = c8_reg_INT_VAL_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_LOCK_LOSS_V3_MSK) >> CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_LOCK_LOSS_V3_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_LOCK_LOSS_V3_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_LOCK_LOSS_V3_poll( c8_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value,
                                                               PMC_POLL_COMPARISON_TYPE cmp,
                                                               UINT32 max_count,
                                                               UINT32 *num_failed_polls,
                                                               UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_LOCK_LOSS_V3_poll( c8_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value,
                                                               PMC_POLL_COMPARISON_TYPE cmp,
                                                               UINT32 max_count,
                                                               UINT32 *num_failed_polls,
                                                               UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_LOCK_LOSS_V3_poll", A, value );

    /* (0x0000011c bits 3) field LOCK_LOSS_V3 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    return c8_reg_INT_VAL_REG_poll( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_LOCK_LOSS_V3_MSK,
                                    (value<<CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_LOCK_LOSS_V3_OFF),
                                    cmp,
                                    max_count,
                                    num_failed_polls,
                                    delay_between_polls_in_microseconds);
}

static INLINE UINT32 c8_field_LOCK_GAIN_V2_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_LOCK_GAIN_V2_get( c8_buffer_t *b_ptr,
                                                c8_handle_t *h_ptr,
                                                UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_LOCK_GAIN_V2_get", A, 7);
    /* (0x0000011c bits 2) field LOCK_GAIN_V2 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    reg_value = c8_reg_INT_VAL_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_LOCK_GAIN_V2_MSK) >> CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_LOCK_GAIN_V2_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_LOCK_GAIN_V2_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_LOCK_GAIN_V2_poll( c8_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value,
                                                               PMC_POLL_COMPARISON_TYPE cmp,
                                                               UINT32 max_count,
                                                               UINT32 *num_failed_polls,
                                                               UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_LOCK_GAIN_V2_poll( c8_buffer_t *b_ptr,
                                                               c8_handle_t *h_ptr,
                                                               UINT32 A,
                                                               UINT32 value,
                                                               PMC_POLL_COMPARISON_TYPE cmp,
                                                               UINT32 max_count,
                                                               UINT32 *num_failed_polls,
                                                               UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_LOCK_GAIN_V2_poll", A, value );

    /* (0x0000011c bits 2) field LOCK_GAIN_V2 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    return c8_reg_INT_VAL_REG_poll( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_LOCK_GAIN_V2_MSK,
                                    (value<<CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_LOCK_GAIN_V2_OFF),
                                    cmp,
                                    max_count,
                                    num_failed_polls,
                                    delay_between_polls_in_microseconds);
}

static INLINE UINT32 c8_field_IN_RANGE_N_FAILS_V1_get( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_IN_RANGE_N_FAILS_V1_get( c8_buffer_t *b_ptr,
                                                       c8_handle_t *h_ptr,
                                                       UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_IN_RANGE_N_FAILS_V1_get", A, 7);
    /* (0x0000011c bits 1) field IN_RANGE_N_FAILS_V1 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    reg_value = c8_reg_INT_VAL_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_IN_RANGE_N_FAILS_V1_MSK) >> CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_IN_RANGE_N_FAILS_V1_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_IN_RANGE_N_FAILS_V1_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_IN_RANGE_N_FAILS_V1_poll( c8_buffer_t *b_ptr,
                                                                      c8_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value,
                                                                      PMC_POLL_COMPARISON_TYPE cmp,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_IN_RANGE_N_FAILS_V1_poll( c8_buffer_t *b_ptr,
                                                                      c8_handle_t *h_ptr,
                                                                      UINT32 A,
                                                                      UINT32 value,
                                                                      PMC_POLL_COMPARISON_TYPE cmp,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_IN_RANGE_N_FAILS_V1_poll", A, value );

    /* (0x0000011c bits 1) field IN_RANGE_N_FAILS_V1 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    return c8_reg_INT_VAL_REG_poll( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_IN_RANGE_N_FAILS_V1_MSK,
                                    (value<<CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_IN_RANGE_N_FAILS_V1_OFF),
                                    cmp,
                                    max_count,
                                    num_failed_polls,
                                    delay_between_polls_in_microseconds);
}

static INLINE UINT32 c8_field_IN_RANGE_N_PASSES_V0_get( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_IN_RANGE_N_PASSES_V0_get( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_IN_RANGE_N_PASSES_V0_get", A, 7);
    /* (0x0000011c bits 0) field IN_RANGE_N_PASSES_V0 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    reg_value = c8_reg_INT_VAL_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_IN_RANGE_N_PASSES_V0_MSK) >> CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_IN_RANGE_N_PASSES_V0_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_IN_RANGE_N_PASSES_V0_get", A, value );

    return value;
}
static INLINE PMC_POLL_RETURN_TYPE c8_field_IN_RANGE_N_PASSES_V0_poll( c8_buffer_t *b_ptr,
                                                                       c8_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 value,
                                                                       PMC_POLL_COMPARISON_TYPE cmp,
                                                                       UINT32 max_count,
                                                                       UINT32 *num_failed_polls,
                                                                       UINT32 delay_between_polls_in_microseconds ) ALWAYS_INLINE;
static INLINE PMC_POLL_RETURN_TYPE c8_field_IN_RANGE_N_PASSES_V0_poll( c8_buffer_t *b_ptr,
                                                                       c8_handle_t *h_ptr,
                                                                       UINT32 A,
                                                                       UINT32 value,
                                                                       PMC_POLL_COMPARISON_TYPE cmp,
                                                                       UINT32 max_count,
                                                                       UINT32 *num_failed_polls,
                                                                       UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  A=%d 0x%08x", "c8_field_IN_RANGE_N_PASSES_V0_poll", A, value );

    /* (0x0000011c bits 0) field IN_RANGE_N_PASSES_V0 of register PMC_CNI_UNI_TXRX_REG_INT_VAL_REG */
    return c8_reg_INT_VAL_REG_poll( b_ptr,
                                    h_ptr,
                                    A,
                                    CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_IN_RANGE_N_PASSES_V0_MSK,
                                    (value<<CNI_UNI_TXRX_REG_INT_VAL_REG_BIT_IN_RANGE_N_PASSES_V0_OFF),
                                    cmp,
                                    max_count,
                                    num_failed_polls,
                                    delay_between_polls_in_microseconds);
}


/*
 * ==================================================================================
 * Parameter Access Functions for Paramset ram_N_burstsize27
 * ==================================================================================
 */
static INLINE void c8_lfield_OFFSET_set( c8_buffer_t *b_ptr,
                                         c8_handle_t *h_ptr,
                                         UINT32 A,
                                         UINT32 value[27] ) ALWAYS_INLINE;
static INLINE void c8_lfield_OFFSET_set( c8_buffer_t *b_ptr,
                                         c8_handle_t *h_ptr,
                                         UINT32 A,
                                         UINT32 value[27] )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_lfield_OFFSET_set", A, 7);
    IOLOG( "%s  A=%d", "c8_lfield_OFFSET_set", A);
    c8_reg_GCOC_OFFSET_RAM_REG_array_burst_write( b_ptr,
                                                  h_ptr,
                                                  A,
                                                  0,
                                                  27,
                                                  value);
}

static INLINE void c8_lfield_OFFSET_get( c8_buffer_t *b_ptr,
                                         c8_handle_t *h_ptr,
                                         UINT32 A,
                                         UINT32 value[27] ) ALWAYS_INLINE;
static INLINE void c8_lfield_OFFSET_get( c8_buffer_t *b_ptr,
                                         c8_handle_t *h_ptr,
                                         UINT32 A,
                                         UINT32 value[27] )
{
    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_lfield_OFFSET_get", A, 7);
    IOLOG( "%s  A=%d", "c8_lfield_OFFSET_get", A);
    c8_reg_GCOC_OFFSET_RAM_REG_array_burst_read( b_ptr,
                                                 h_ptr,
                                                 A,
                                                 0,
                                                 27,
                                                 (UINT32 *)value);
}

static INLINE void c8_lfield_range_OFFSET_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 start_bit,
                                               UINT32 stop_bit,
                                               UINT32 value ) ALWAYS_INLINE;
static INLINE void c8_lfield_range_OFFSET_set( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 start_bit,
                                               UINT32 stop_bit,
                                               UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_lfield_range_OFFSET_set", A, 7);
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "c8_lfield_range_OFFSET_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d value=0x%08x", "c8_lfield_range_OFFSET_set", A, start_bit, stop_bit, value);
    c8_reg_GCOC_OFFSET_RAM_REG_array_field_set( b_ptr,
                                                h_ptr,
                                                A,
                                                word_number,
                                                mask,
                                                field_ofs,
                                                value);
}

static INLINE UINT32 c8_lfield_range_OFFSET_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit ) ALWAYS_INLINE;
static INLINE UINT32 c8_lfield_range_OFFSET_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A,
                                                 UINT32 start_bit,
                                                 UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_lfield_range_OFFSET_get", A, 7);
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits));
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "c8_lfield_range_OFFSET_get", start_bit, stop_bit );
    }
    reg_value = c8_reg_GCOC_OFFSET_RAM_REG_array_read( b_ptr,
                                                       h_ptr,
                                                       A,
                                                       word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d value=0x%08x", "c8_lfield_range_OFFSET_get", A, start_bit, stop_bit, value );
    return value;
}


/*
 * ==================================================================================
 * Parameter Access Functions for Paramset status
 * ==================================================================================
 */
static INLINE UINT32 c8_field_PPM_OFF_RD_SIGN_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PPM_OFF_RD_SIGN_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PPM_OFF_RD_SIGN_get", A, 7);
    /* (0x00000024 bits 31) field PPM_OFF_RD_SIGN of register PMC_CNI_UNI_TXRX_REG_PLL_STS_REG */
    reg_value = c8_reg_PLL_STS_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_PLL_STS_REG_BIT_PPM_OFF_RD_SIGN_MSK) >> CNI_UNI_TXRX_REG_PLL_STS_REG_BIT_PPM_OFF_RD_SIGN_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PPM_OFF_RD_SIGN_get", A, value );

    return value;
}
static INLINE UINT32 c8_field_PPM_OFF_RD_VAL_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_PPM_OFF_RD_VAL_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_PPM_OFF_RD_VAL_get", A, 7);
    /* (0x00000024 bits 20:0) field PPM_OFF_RD_VAL of register PMC_CNI_UNI_TXRX_REG_PLL_STS_REG */
    reg_value = c8_reg_PLL_STS_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_PLL_STS_REG_BIT_PPM_OFF_RD_VAL_MSK) >> CNI_UNI_TXRX_REG_PLL_STS_REG_BIT_PPM_OFF_RD_VAL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_PPM_OFF_RD_VAL_get", A, value );

    return value;
}
static INLINE UINT32 c8_field_range_PPM_OFF_RD_VAL_get( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_PPM_OFF_RD_VAL_get( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_PPM_OFF_RD_VAL_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_PPM_OFF_RD_VAL_get", stop_bit, start_bit );
    if (stop_bit > 20) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_PPM_OFF_RD_VAL_get", stop_bit, 20 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 20) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 20;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000024 bits 20:0) field PPM_OFF_RD_VAL of register PMC_CNI_UNI_TXRX_REG_PLL_STS_REG */
    reg_value = c8_reg_PLL_STS_REG_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_PLL_STS_REG_BIT_PPM_OFF_RD_VAL_MSK)
                  >> CNI_UNI_TXRX_REG_PLL_STS_REG_BIT_PPM_OFF_RD_VAL_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_PLL_STS_REG_BIT_PPM_OFF_RD_VAL_MSK, CNI_UNI_TXRX_REG_PLL_STS_REG_BIT_PPM_OFF_RD_VAL_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_PPM_OFF_RD_VAL_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 c8_field_CURR_THRESHOLD_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_CURR_THRESHOLD_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_CURR_THRESHOLD_get", A, 7);
    /* (0x0000007c bits 4:0) field CURR_THRESHOLD of register PMC_CNI_UNI_TXRX_REG_SSI_STATUS_REG */
    reg_value = c8_reg_SSI_STATUS_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_SSI_STATUS_REG_BIT_CURR_THRESHOLD_MSK) >> CNI_UNI_TXRX_REG_SSI_STATUS_REG_BIT_CURR_THRESHOLD_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_CURR_THRESHOLD_get", A, value );

    return value;
}
static INLINE UINT32 c8_field_range_CURR_THRESHOLD_get( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_CURR_THRESHOLD_get( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A,
                                                        UINT32 start_bit,
                                                        UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_CURR_THRESHOLD_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_CURR_THRESHOLD_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_CURR_THRESHOLD_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000007c bits 4:0) field CURR_THRESHOLD of register PMC_CNI_UNI_TXRX_REG_SSI_STATUS_REG */
    reg_value = c8_reg_SSI_STATUS_REG_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_SSI_STATUS_REG_BIT_CURR_THRESHOLD_MSK)
                  >> CNI_UNI_TXRX_REG_SSI_STATUS_REG_BIT_CURR_THRESHOLD_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_SSI_STATUS_REG_BIT_CURR_THRESHOLD_MSK, CNI_UNI_TXRX_REG_SSI_STATUS_REG_BIT_CURR_THRESHOLD_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_CURR_THRESHOLD_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 c8_field_ADC_Q_get( c8_buffer_t *b_ptr,
                                         c8_handle_t *h_ptr,
                                         UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_ADC_Q_get( c8_buffer_t *b_ptr,
                                         c8_handle_t *h_ptr,
                                         UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_ADC_Q_get", A, 7);
    /* (0x0000008c bits 7:0) field ADC_Q of register PMC_CNI_UNI_TXRX_REG_MABC_ADC_STS_REG */
    reg_value = c8_reg_MABC_ADC_STS_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_MABC_ADC_STS_REG_BIT_ADC_Q_MSK) >> CNI_UNI_TXRX_REG_MABC_ADC_STS_REG_BIT_ADC_Q_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_ADC_Q_get", A, value );

    return value;
}
static INLINE UINT32 c8_field_range_ADC_Q_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 start_bit,
                                               UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_ADC_Q_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A,
                                               UINT32 start_bit,
                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_ADC_Q_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_ADC_Q_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_ADC_Q_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000008c bits 7:0) field ADC_Q of register PMC_CNI_UNI_TXRX_REG_MABC_ADC_STS_REG */
    reg_value = c8_reg_MABC_ADC_STS_REG_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_MABC_ADC_STS_REG_BIT_ADC_Q_MSK)
                  >> CNI_UNI_TXRX_REG_MABC_ADC_STS_REG_BIT_ADC_Q_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_MABC_ADC_STS_REG_BIT_ADC_Q_MSK, CNI_UNI_TXRX_REG_MABC_ADC_STS_REG_BIT_ADC_Q_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_ADC_Q_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 c8_field_VHIST_PERBIN_VALUE_39_32_get( c8_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_VHIST_PERBIN_VALUE_39_32_get( c8_buffer_t *b_ptr,
                                                            c8_handle_t *h_ptr,
                                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_VHIST_PERBIN_VALUE_39_32_get", A, 7);
    /* (0x00000130 bits 31:24) field VHIST_PERBIN_VALUE_39_32 of register PMC_CNI_UNI_TXRX_REG_DIAG_STATUS_REG1 */
    reg_value = c8_reg_DIAG_STATUS_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DIAG_STATUS_REG1_BIT_VHIST_PERBIN_VALUE_39_32_MSK) >> CNI_UNI_TXRX_REG_DIAG_STATUS_REG1_BIT_VHIST_PERBIN_VALUE_39_32_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_VHIST_PERBIN_VALUE_39_32_get", A, value );

    return value;
}
static INLINE UINT32 c8_field_range_VHIST_PERBIN_VALUE_39_32_get( c8_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_VHIST_PERBIN_VALUE_39_32_get( c8_buffer_t *b_ptr,
                                                                  c8_handle_t *h_ptr,
                                                                  UINT32 A,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_VHIST_PERBIN_VALUE_39_32_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_VHIST_PERBIN_VALUE_39_32_get", stop_bit, start_bit );
    if (stop_bit > 7) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_VHIST_PERBIN_VALUE_39_32_get", stop_bit, 7 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000130 bits 31:24) field VHIST_PERBIN_VALUE_39_32 of register PMC_CNI_UNI_TXRX_REG_DIAG_STATUS_REG1 */
    reg_value = c8_reg_DIAG_STATUS_REG1_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_DIAG_STATUS_REG1_BIT_VHIST_PERBIN_VALUE_39_32_MSK)
                  >> CNI_UNI_TXRX_REG_DIAG_STATUS_REG1_BIT_VHIST_PERBIN_VALUE_39_32_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_DIAG_STATUS_REG1_BIT_VHIST_PERBIN_VALUE_39_32_MSK, CNI_UNI_TXRX_REG_DIAG_STATUS_REG1_BIT_VHIST_PERBIN_VALUE_39_32_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_VHIST_PERBIN_VALUE_39_32_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 c8_field_VHIST_READ_BACK_ADDR_get( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_VHIST_READ_BACK_ADDR_get( c8_buffer_t *b_ptr,
                                                        c8_handle_t *h_ptr,
                                                        UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_VHIST_READ_BACK_ADDR_get", A, 7);
    /* (0x00000130 bits 15:11) field VHIST_READ_BACK_ADDR of register PMC_CNI_UNI_TXRX_REG_DIAG_STATUS_REG1 */
    reg_value = c8_reg_DIAG_STATUS_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DIAG_STATUS_REG1_BIT_VHIST_READ_BACK_ADDR_MSK) >> CNI_UNI_TXRX_REG_DIAG_STATUS_REG1_BIT_VHIST_READ_BACK_ADDR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_VHIST_READ_BACK_ADDR_get", A, value );

    return value;
}
static INLINE UINT32 c8_field_range_VHIST_READ_BACK_ADDR_get( c8_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_VHIST_READ_BACK_ADDR_get( c8_buffer_t *b_ptr,
                                                              c8_handle_t *h_ptr,
                                                              UINT32 A,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_VHIST_READ_BACK_ADDR_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_VHIST_READ_BACK_ADDR_get", stop_bit, start_bit );
    if (stop_bit > 4) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_VHIST_READ_BACK_ADDR_get", stop_bit, 4 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 4) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 4;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000130 bits 15:11) field VHIST_READ_BACK_ADDR of register PMC_CNI_UNI_TXRX_REG_DIAG_STATUS_REG1 */
    reg_value = c8_reg_DIAG_STATUS_REG1_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_DIAG_STATUS_REG1_BIT_VHIST_READ_BACK_ADDR_MSK)
                  >> CNI_UNI_TXRX_REG_DIAG_STATUS_REG1_BIT_VHIST_READ_BACK_ADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_DIAG_STATUS_REG1_BIT_VHIST_READ_BACK_ADDR_MSK, CNI_UNI_TXRX_REG_DIAG_STATUS_REG1_BIT_VHIST_READ_BACK_ADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_VHIST_READ_BACK_ADDR_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 c8_field_VHIST_FSM_STATE_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_VHIST_FSM_STATE_get( c8_buffer_t *b_ptr,
                                                   c8_handle_t *h_ptr,
                                                   UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_VHIST_FSM_STATE_get", A, 7);
    /* (0x00000130 bits 7:5) field VHIST_FSM_STATE of register PMC_CNI_UNI_TXRX_REG_DIAG_STATUS_REG1 */
    reg_value = c8_reg_DIAG_STATUS_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DIAG_STATUS_REG1_BIT_VHIST_FSM_STATE_MSK) >> CNI_UNI_TXRX_REG_DIAG_STATUS_REG1_BIT_VHIST_FSM_STATE_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_VHIST_FSM_STATE_get", A, value );

    return value;
}
static INLINE UINT32 c8_field_range_VHIST_FSM_STATE_get( c8_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_VHIST_FSM_STATE_get( c8_buffer_t *b_ptr,
                                                         c8_handle_t *h_ptr,
                                                         UINT32 A,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_VHIST_FSM_STATE_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_VHIST_FSM_STATE_get", stop_bit, start_bit );
    if (stop_bit > 2) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_VHIST_FSM_STATE_get", stop_bit, 2 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 2) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 2;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000130 bits 7:5) field VHIST_FSM_STATE of register PMC_CNI_UNI_TXRX_REG_DIAG_STATUS_REG1 */
    reg_value = c8_reg_DIAG_STATUS_REG1_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_DIAG_STATUS_REG1_BIT_VHIST_FSM_STATE_MSK)
                  >> CNI_UNI_TXRX_REG_DIAG_STATUS_REG1_BIT_VHIST_FSM_STATE_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_DIAG_STATUS_REG1_BIT_VHIST_FSM_STATE_MSK, CNI_UNI_TXRX_REG_DIAG_STATUS_REG1_BIT_VHIST_FSM_STATE_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_VHIST_FSM_STATE_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 c8_field_VHIST_PERBIN_VALUE_OVFL_get( c8_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_VHIST_PERBIN_VALUE_OVFL_get( c8_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_VHIST_PERBIN_VALUE_OVFL_get", A, 7);
    /* (0x00000130 bits 1) field VHIST_PERBIN_VALUE_OVFL of register PMC_CNI_UNI_TXRX_REG_DIAG_STATUS_REG1 */
    reg_value = c8_reg_DIAG_STATUS_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DIAG_STATUS_REG1_BIT_VHIST_PERBIN_VALUE_OVFL_MSK) >> CNI_UNI_TXRX_REG_DIAG_STATUS_REG1_BIT_VHIST_PERBIN_VALUE_OVFL_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_VHIST_PERBIN_VALUE_OVFL_get", A, value );

    return value;
}
static INLINE UINT32 c8_field_VHIST_CAPT_RUNNING_get( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_VHIST_CAPT_RUNNING_get( c8_buffer_t *b_ptr,
                                                      c8_handle_t *h_ptr,
                                                      UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_VHIST_CAPT_RUNNING_get", A, 7);
    /* (0x00000130 bits 0) field VHIST_CAPT_RUNNING of register PMC_CNI_UNI_TXRX_REG_DIAG_STATUS_REG1 */
    reg_value = c8_reg_DIAG_STATUS_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DIAG_STATUS_REG1_BIT_VHIST_CAPT_RUNNING_MSK) >> CNI_UNI_TXRX_REG_DIAG_STATUS_REG1_BIT_VHIST_CAPT_RUNNING_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_VHIST_CAPT_RUNNING_get", A, value );

    return value;
}
static INLINE UINT32 c8_field_VHIST_PERBIN_VALUE_31_0_get( c8_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_VHIST_PERBIN_VALUE_31_0_get( c8_buffer_t *b_ptr,
                                                           c8_handle_t *h_ptr,
                                                           UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_VHIST_PERBIN_VALUE_31_0_get", A, 7);
    /* (0x00000134 bits 31:0) field VHIST_PERBIN_VALUE_31_0 of register PMC_CNI_UNI_TXRX_REG_DIAG_STATUS_REG2 */
    reg_value = c8_reg_DIAG_STATUS_REG2_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_DIAG_STATUS_REG2_BIT_VHIST_PERBIN_VALUE_31_0_MSK) >> CNI_UNI_TXRX_REG_DIAG_STATUS_REG2_BIT_VHIST_PERBIN_VALUE_31_0_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_VHIST_PERBIN_VALUE_31_0_get", A, value );

    return value;
}
static INLINE UINT32 c8_field_range_VHIST_PERBIN_VALUE_31_0_get( c8_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_VHIST_PERBIN_VALUE_31_0_get( c8_buffer_t *b_ptr,
                                                                 c8_handle_t *h_ptr,
                                                                 UINT32 A,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_VHIST_PERBIN_VALUE_31_0_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_VHIST_PERBIN_VALUE_31_0_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_VHIST_PERBIN_VALUE_31_0_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000134 bits 31:0) field VHIST_PERBIN_VALUE_31_0 of register PMC_CNI_UNI_TXRX_REG_DIAG_STATUS_REG2 */
    reg_value = c8_reg_DIAG_STATUS_REG2_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_DIAG_STATUS_REG2_BIT_VHIST_PERBIN_VALUE_31_0_MSK)
                  >> CNI_UNI_TXRX_REG_DIAG_STATUS_REG2_BIT_VHIST_PERBIN_VALUE_31_0_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_DIAG_STATUS_REG2_BIT_VHIST_PERBIN_VALUE_31_0_MSK, CNI_UNI_TXRX_REG_DIAG_STATUS_REG2_BIT_VHIST_PERBIN_VALUE_31_0_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_VHIST_PERBIN_VALUE_31_0_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 c8_field_SIPO_BIST_SYNC_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_SIPO_BIST_SYNC_get( c8_buffer_t *b_ptr,
                                                  c8_handle_t *h_ptr,
                                                  UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SIPO_BIST_SYNC_get", A, 7);
    /* (0x00000144 bits 1) field SIPO_BIST_SYNC of register PMC_CNI_UNI_TXRX_REG_SIPO_BIST_STATUS_REG */
    reg_value = c8_reg_SIPO_BIST_STATUS_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_SIPO_BIST_STATUS_REG_BIT_SIPO_BIST_SYNC_MSK) >> CNI_UNI_TXRX_REG_SIPO_BIST_STATUS_REG_BIT_SIPO_BIST_SYNC_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_SIPO_BIST_SYNC_get", A, value );

    return value;
}
static INLINE UINT32 c8_field_SIPO_BIST_ERR_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_SIPO_BIST_ERR_get( c8_buffer_t *b_ptr,
                                                 c8_handle_t *h_ptr,
                                                 UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_SIPO_BIST_ERR_get", A, 7);
    /* (0x00000144 bits 0) field SIPO_BIST_ERR of register PMC_CNI_UNI_TXRX_REG_SIPO_BIST_STATUS_REG */
    reg_value = c8_reg_SIPO_BIST_STATUS_REG_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_SIPO_BIST_STATUS_REG_BIT_SIPO_BIST_ERR_MSK) >> CNI_UNI_TXRX_REG_SIPO_BIST_STATUS_REG_BIT_SIPO_BIST_ERR_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_SIPO_BIST_ERR_get", A, value );

    return value;
}
static INLINE UINT32 c8_field_CHK_ERR_CNT_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_CHK_ERR_CNT_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_CHK_ERR_CNT_get", A, 7);
    /* (0x00000160 bits 31:0) field CHK_ERR_CNT of register PMC_CNI_UNI_TXRX_REG_PATT_CHK_STATUS_REG1 */
    reg_value = c8_reg_PATT_CHK_STATUS_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_PATT_CHK_STATUS_REG1_BIT_CHK_ERR_CNT_MSK) >> CNI_UNI_TXRX_REG_PATT_CHK_STATUS_REG1_BIT_CHK_ERR_CNT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_CHK_ERR_CNT_get", A, value );

    return value;
}
static INLINE UINT32 c8_field_range_CHK_ERR_CNT_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_CHK_ERR_CNT_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_CHK_ERR_CNT_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_CHK_ERR_CNT_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_CHK_ERR_CNT_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000160 bits 31:0) field CHK_ERR_CNT of register PMC_CNI_UNI_TXRX_REG_PATT_CHK_STATUS_REG1 */
    reg_value = c8_reg_PATT_CHK_STATUS_REG1_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_PATT_CHK_STATUS_REG1_BIT_CHK_ERR_CNT_MSK)
                  >> CNI_UNI_TXRX_REG_PATT_CHK_STATUS_REG1_BIT_CHK_ERR_CNT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_PATT_CHK_STATUS_REG1_BIT_CHK_ERR_CNT_MSK, CNI_UNI_TXRX_REG_PATT_CHK_STATUS_REG1_BIT_CHK_ERR_CNT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_CHK_ERR_CNT_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 c8_field_TX_CODE_OUT_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_TX_CODE_OUT_get( c8_buffer_t *b_ptr,
                                               c8_handle_t *h_ptr,
                                               UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_CODE_OUT_get", A, 7);
    /* (0x0000018c bits 31:16) field TX_CODE_OUT of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_STS_REG1 */
    reg_value = c8_reg_TX_CTRL_STS_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_STS_REG1_BIT_TX_CODE_OUT_MSK) >> CNI_UNI_TXRX_REG_TX_CTRL_STS_REG1_BIT_TX_CODE_OUT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_TX_CODE_OUT_get", A, value );

    return value;
}
static INLINE UINT32 c8_field_range_TX_CODE_OUT_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_TX_CODE_OUT_get( c8_buffer_t *b_ptr,
                                                     c8_handle_t *h_ptr,
                                                     UINT32 A,
                                                     UINT32 start_bit,
                                                     UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_TX_CODE_OUT_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_TX_CODE_OUT_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_TX_CODE_OUT_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000018c bits 31:16) field TX_CODE_OUT of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_STS_REG1 */
    reg_value = c8_reg_TX_CTRL_STS_REG1_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_STS_REG1_BIT_TX_CODE_OUT_MSK)
                  >> CNI_UNI_TXRX_REG_TX_CTRL_STS_REG1_BIT_TX_CODE_OUT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_TX_CTRL_STS_REG1_BIT_TX_CODE_OUT_MSK, CNI_UNI_TXRX_REG_TX_CTRL_STS_REG1_BIT_TX_CODE_OUT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_TX_CODE_OUT_get", A, start_bit, stop_bit, value );

    return value;
}
static INLINE UINT32 c8_field_TX_SUM_OUT_get( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_TX_SUM_OUT_get( c8_buffer_t *b_ptr,
                                              c8_handle_t *h_ptr,
                                              UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_TX_SUM_OUT_get", A, 7);
    /* (0x0000018c bits 15:0) field TX_SUM_OUT of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_STS_REG1 */
    reg_value = c8_reg_TX_CTRL_STS_REG1_read(  b_ptr, h_ptr, A);
    value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_STS_REG1_BIT_TX_SUM_OUT_MSK) >> CNI_UNI_TXRX_REG_TX_CTRL_STS_REG1_BIT_TX_SUM_OUT_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "c8_field_TX_SUM_OUT_get", A, value );

    return value;
}
static INLINE UINT32 c8_field_range_TX_SUM_OUT_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit ) ATTRIBUTE_WARN_UNUSED_RESULT ALWAYS_INLINE;
static INLINE UINT32 c8_field_range_TX_SUM_OUT_get( c8_buffer_t *b_ptr,
                                                    c8_handle_t *h_ptr,
                                                    UINT32 A,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 7)
        IO_RANGE_CHECK("%s A is %d but max is %d", "c8_field_range_TX_SUM_OUT_get", A, 7);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "c8_field_range_TX_SUM_OUT_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "c8_field_range_TX_SUM_OUT_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000018c bits 15:0) field TX_SUM_OUT of register PMC_CNI_UNI_TXRX_REG_TX_CTRL_STS_REG1 */
    reg_value = c8_reg_TX_CTRL_STS_REG1_read(  b_ptr, h_ptr, A);
    field_value = (reg_value & CNI_UNI_TXRX_REG_TX_CTRL_STS_REG1_BIT_TX_SUM_OUT_MSK)
                  >> CNI_UNI_TXRX_REG_TX_CTRL_STS_REG1_BIT_TX_SUM_OUT_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, CNI_UNI_TXRX_REG_TX_CTRL_STS_REG1_BIT_TX_SUM_OUT_MSK, CNI_UNI_TXRX_REG_TX_CTRL_STS_REG1_BIT_TX_SUM_OUT_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "c8_field_range_TX_SUM_OUT_get", A, start_bit, stop_bit, value );

    return value;
}

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* _C8_IO_INLINE_H */
