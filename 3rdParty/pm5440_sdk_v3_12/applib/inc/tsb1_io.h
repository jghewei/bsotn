/******************************************************************************
 *   COPYRIGHT (C) 2011 PMC-SIERRA, INC. ALL RIGHTS RESERVED.
 * --------------------------------------------------------------------------
 *  This software embodies materials and concepts which are proprietary and
 *  confidential to PMC-Sierra, Inc.
 *  PMC-Sierra distributes this software to its customers pursuant to the
 *  terms and conditions of the Software License Agreement
 *  contained in the text file software.lic that is distributed along with
 *  the software. This software can only be utilized if all
 *  terms and conditions of the Software License Agreement are
 *  accepted. If there are any questions, concerns, or if the
 *  Software License Agreement text file, software.lic, is missing please
 *  contact PMC-Sierra for assistance.
 * -------------------------------------------------------------------------
 *   DESCRIPTION:
 *     contains prototypes for the field accessor functions
 *     and register accessor functions for the tsb1 block
 * 
 *   NOTES:
 *     This file is generated by the script codegen.pm, version 1.1
 *     Do not modify this file.
 * 
 *     The input file is ../src/ioxml/pm1234_map.xml
 *     block_uri "file:../docs/rda/pm1001_reg.xml"
 *     block_part_number "PM1001"
 *     block_mnemonic "TSB1"
 * 
 *****************************************************************************/

/*--------------------------------------------------------------------------------.
 | The pattern for accessing tsb1 io functions is:
 | {
 |     tsb1_buffer_t b[1];
 |     tsb1_buffer_init( b, h );
 |     value = tsb1_field_<FIELD>_get( b, h );
 |     tsb1_field_<FIELD>_set( b, h , value );
 | ...
 |     tsb1_buffer_flush( b );
 | }
 | 
 | alternatively, if register coalescing is not needed then omit the buffer like:
 | 
 | value = tsb1_field_<FIELD>_get( NULL, h );
 | tsb1_field_<FIELD>_set( NULL, h , value );
 | 
 +-------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------------.
 | 
 | +-----------------------------+
 | | Register 0x00020000 CONFIG0 |
 | +-----------------------------+
 | | bit  31:0 R/W  REGFLD1      |
 | +-----------------------------+
 | 
 | void   tsb1_field_REGFLD1_set       ( tsb1_buffer_t *b, pmc_handle_t *h, UINT32 value )
 | UINT32 tsb1_field_REGFLD1_get       ( tsb1_buffer_t *b, pmc_handle_t *h )
 | void   tsb1_field_range_REGFLD1_set ( tsb1_buffer_t *b, pmc_handle_t *h, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 tsb1_field_range_REGFLD1_get ( tsb1_buffer_t *b, pmc_handle_t *h, UINT32 start_bit, UINT32 stop_bit )
 | 
 | +-----------------------------+
 | | Register 0x00020004 CONFIG1 |
 | +-----------------------------+
 | | bit  15:0  R/W  REGFLD2     |
 | | bit  31:16 R/W  REGFLD3     |
 | +-----------------------------+
 | 
 | void   tsb1_field_REGFLD2_set       ( tsb1_buffer_t *b, pmc_handle_t *h, UINT32 value )
 | UINT32 tsb1_field_REGFLD2_get       ( tsb1_buffer_t *b, pmc_handle_t *h )
 | void   tsb1_field_range_REGFLD2_set ( tsb1_buffer_t *b, pmc_handle_t *h, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 tsb1_field_range_REGFLD2_get ( tsb1_buffer_t *b, pmc_handle_t *h, UINT32 start_bit, UINT32 stop_bit )
 | void   tsb1_field_REGFLD3_set       ( tsb1_buffer_t *b, pmc_handle_t *h, UINT32 value )
 | UINT32 tsb1_field_REGFLD3_get       ( tsb1_buffer_t *b, pmc_handle_t *h )
 | void   tsb1_field_range_REGFLD3_set ( tsb1_buffer_t *b, pmc_handle_t *h, UINT32 start_bit, UINT32 stop_bit, UINT32 value )
 | UINT32 tsb1_field_range_REGFLD3_get ( tsb1_buffer_t *b, pmc_handle_t *h, UINT32 start_bit, UINT32 stop_bit )
 +---------------------------------------------------------------------------------------------------------------------------*/
#ifndef _TSB1_IO_H
#define _TSB1_IO_H

#include "pmc_sys.h"
#include "pmc_types.h"
#include "tsb1_regs.h"
#include "tsb1_io_inline.h"


/*--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------.
 | TSB access functions
 +--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
 | These functions do not need to be accessed directly,... just included here for completeness.
 +--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
 | void      tsb1_buffer_init               ( tsb1_buffer_t *b, pmc_handle_t *h )
 | void      tsb1_buffer_flush              ( tsb1_buffer_t *b )
 | UINT32    tsb1_reg_read                  ( tsb1_buffer_t *b, pmc_handle_t *h, UINT32 mem_type, UINT32 reg )
 | void      tsb1_reg_write                 ( tsb1_buffer_t *b, pmc_handle_t *h, UINT32 mem_type, UINT32 reg, UINT32 value )
 | void      tsb1_field_set                 ( tsb1_buffer_t *b, pmc_handle_t *h, UINT32 mem_type, UINT32 reg, UINT32 mask, UINT32 ofs, UINT32 value )
 | void      tsb1_action_on_write_field_set ( tsb1_buffer_t *b, pmc_handle_t *h, UINT32 mem_type, UINT32 reg, UINT32 mask, UINT32 ofs, UINT32 value )
 | void      tsb1_burst_read                ( tsb1_buffer_t *b, pmc_handle_t *h, UINT32 mem_type, UINT32 reg, UINT32 len, UINT32 *value )
 | void      tsb1_burst_write               ( tsb1_buffer_t *b, pmc_handle_t *h, UINT32 mem_type, UINT32 reg, UINT32 len, UINT32 *value )
 | PMC_ERROR tsb1_poll_bit                  ( tsb1_buffer_t *b, pmc_handle_t *h, UINT32 mem_type, UINT32 reg, UINT32 mask, UINT32 value, UINT32 max_count, UINT32 *num_failed_polls, UINT32 delay_between_polls_in_microseconds )
 +-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------.
 | Functions to Access Registers
 +----------------------------------------------------------------------------------------------------------------+
 | These functions can be used if for some reason the field getters & setters are not appropriate.
 +----------------------------------------------------------------------------------------------------------------+
 | void   tsb1_reg_CONFIG0_write     ( tsb1_buffer_t *b, pmc_handle_t *h, UINT32 value )
 | void   tsb1_reg_CONFIG0_field_set ( tsb1_buffer_t *b, pmc_handle_t *h, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32 tsb1_reg_CONFIG0_read      ( tsb1_buffer_t *b, pmc_handle_t *h )
 | 
 | void   tsb1_reg_CONFIG1_write     ( tsb1_buffer_t *b, pmc_handle_t *h, UINT32 value )
 | void   tsb1_reg_CONFIG1_field_set ( tsb1_buffer_t *b, pmc_handle_t *h, UINT32 mask, UINT32 ofs, UINT32 value )
 | UINT32 tsb1_reg_CONFIG1_read      ( tsb1_buffer_t *b, pmc_handle_t *h )
 | 
 +---------------------------------------------------------------------------------------------------------------*/
#endif /* _TSB1_IO_H */
