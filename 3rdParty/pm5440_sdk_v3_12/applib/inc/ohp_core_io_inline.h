/******************************************************************************
 *   COPYRIGHT (C) 2011 PMC-SIERRA, INC. ALL RIGHTS RESERVED.
 * --------------------------------------------------------------------------
 *  This software embodies materials and concepts which are proprietary and
 *  confidential to PMC-Sierra, Inc.
 *  PMC-Sierra distributes this software to its customers pursuant to the
 *  terms and conditions of the Software License Agreement
 *  contained in the text file software.lic that is distributed along with
 *  the software. This software can only be utilized if all
 *  terms and conditions of the Software License Agreement are
 *  accepted. If there are any questions, concerns, or if the
 *  Software License Agreement text file, software.lic, is missing please
 *  contact PMC-Sierra for assistance.
 * -------------------------------------------------------------------------
 *   DESCRIPTION:
 *     contains the inline implementation of all the field accessor functions
 *     and register accessor functions for the ohp_core block
 * 
 *   NOTES:
 *     This file is generated by the script codegen.pm, version 1.1
 *     Do not modify this file.
 * 
 *     The input file is ../src/ioxml/pm55_60_19_96ch_top_map.xml
 *     block_uri "file:../docs/rda/pm55_60_19_generic_reg.xml"
 *     block_part_number "PM55_60_19_a"
 *     block_mnemonic "OHP_CORE"
 * 
 *****************************************************************************/
#ifndef _OHP_CORE_IO_INLINE_H
#define _OHP_CORE_IO_INLINE_H

#include "odu_ohp_loc.h"
#include "ohp_core_regs.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * ==================================================================================
 *               tsb level structure and access functions for ohp_core
 * ==================================================================================
 */
/* if logging is disabled then so is IO_LOGGING */
#ifndef NO_IO_LOGGING
# ifdef LOGGING_DISABLED
#  define NO_IO_LOGGING
# endif
#endif

/* log messages in the generated files log the caller's file/line/function instead of itself.*/
#ifndef IOLOG
# ifdef NO_IO_LOGGING
#  define IOLOG(...)
# else
#  define IOLOG(...) vaLog( LOG_CALLER_ARGS __VA_ARGS__)
# endif
#endif
#ifndef IO_RANGE_CHECK
# ifdef NO_IO_LOGGING
#  define IO_RANGE_CHECK(...)
# else
#  define IO_RANGE_CHECK(...) vaLog( LOG_CALLER_ARGS "** ERROR: range check ** " __VA_ARGS__)
# endif
#endif
#ifndef IOLOG_DATA
# ifdef NO_IO_LOGGING
#  define IOLOG_DATA(...)
# else
#  define IOLOG_DATA(...) vaLogData( LOG_CALLER_ARGS __VA_ARGS__)
# endif
#endif
typedef struct {
    coalesce_buffer_t coalesce_handle[1]; /* only used if register coalescing is enabled */
    ohp_core_handle_t * h;
    pmc_sys_handle_t sys_handle;
    const UINT32 base_address;
    /* maybe eventually need to add some fields here per io handle */
} ohp_core_buffer_t;

#ifndef ohp_core_buffer_init
#define ohp_core_buffer_init( b, h ) \
       _ohp_core_buffer_init( LOG_CALLER b, h )
#endif
static INLINE void _ohp_core_buffer_init( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    b->h                        = h;
    b->sys_handle               = ((pmc_handle_t *)h)->sys_handle;
    *(UINT32 *)&b->base_address = ((pmc_handle_t *)h)->base_address;
    /* currently this just checks that the previous function remembered to flush. */
    l1sys_init( b->coalesce_handle, (void**)b->sys_handle );
    IOLOG( "%s", "ohp_core_buffer_init");
    
}

#ifndef ohp_core_buffer_flush
#define ohp_core_buffer_flush( b ) \
       _ohp_core_buffer_flush( LOG_CALLER b )
#endif

/*
* flush any changed fields to the register file and invalidate the read cache.
*/
static INLINE void _ohp_core_buffer_flush( LOG_CALLER_DEFN ohp_core_buffer_t *b )
{
    IOLOG( "ohp_core_buffer_flush" );
    l1sys_flush( b->coalesce_handle );
}
static INLINE UINT32 ohp_core_reg_read( ohp_core_buffer_t *b,
                                        ohp_core_handle_t *h,
                                        UINT32 mem_type,
                                        UINT32 reg )
{
    UINT32 value;
    if (b != NULL)
        value = l1sys_reg_read( b->coalesce_handle,
                                mem_type,
                                b->base_address,
                                reg);
    else
        value = l2sys_reg_read( ((pmc_handle_t *)h)->sys_handle,
                                mem_type,
                                ((pmc_handle_t *)h)->base_address + reg);
    return value;
}
static INLINE void ohp_core_reg_write( ohp_core_buffer_t *b,
                                       ohp_core_handle_t *h,
                                       UINT32 mem_type,
                                       UINT32 reg,
                                       UINT32 value )
{
    if (b != NULL)
        l1sys_reg_write( b->coalesce_handle,
                         mem_type,
                         b->base_address,
                         reg,
                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h)->sys_handle,
                         mem_type,
                         ((pmc_handle_t *)h)->base_address + reg,
                         value);
}

static INLINE void ohp_core_field_set( ohp_core_buffer_t *b,
                                       ohp_core_handle_t *h,
                                       UINT32 mem_type,
                                       UINT32 reg,
                                       UINT32 mask,
                                       UINT32 unused_mask,
                                       UINT32 ofs,
                                       UINT32 value )
{
    if (b != NULL)
        l1sys_field_set2( b->coalesce_handle,
                          mem_type,
                          b->base_address,
                          reg,
                          mask,
                          unused_mask,
                          ofs,
                          value);
    else
    {
        if ((mask | unused_mask) == 0xffffffff)
        {
            l2sys_reg_write( ((pmc_handle_t *)h)->sys_handle,
                             mem_type,
                             ((pmc_handle_t *)h)->base_address + reg,
                             value<<ofs);
        }
        else
        {
            l2sys_reg_read_modify_write( ((pmc_handle_t *)h)->sys_handle,
                                         mem_type,
                                         ((pmc_handle_t *)h)->base_address + reg,
                                         mask,
                                         value<<ofs);
        }
    }
}

static INLINE void ohp_core_action_on_write_field_set( ohp_core_buffer_t *b,
                                                       ohp_core_handle_t *h,
                                                       UINT32 mem_type,
                                                       UINT32 reg,
                                                       UINT32 mask,
                                                       UINT32 ofs,
                                                       UINT32 value )
{
    if (b != NULL)
        l1sys_action_on_write_field_set( b->coalesce_handle,
                                         mem_type,
                                         b->base_address,
                                         reg,
                                         mask,
                                         ofs,
                                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h)->sys_handle,
                         mem_type,
                         ((pmc_handle_t *)h)->base_address + reg,
                         value<<ofs);
}

static INLINE void ohp_core_burst_read( ohp_core_buffer_t *b,
                                        ohp_core_handle_t *h,
                                        UINT32 mem_type,
                                        UINT32 reg,
                                        UINT32 len,
                                        UINT32 *value )
{
    if (b != NULL)
        l1sys_burst_read( b->coalesce_handle,
                          mem_type,
                          b->base_address,
                          reg,
                          len,
                          value);
    else
        l2sys_burst_read( ((pmc_handle_t *)h)->sys_handle,
                          mem_type,
                          ((pmc_handle_t *)h)->base_address + reg,
                          len,
                          value);
}

static INLINE void ohp_core_burst_write( ohp_core_buffer_t *b,
                                         ohp_core_handle_t *h,
                                         UINT32 mem_type,
                                         UINT32 reg,
                                         UINT32 len,
                                         UINT32 *value )
{
    if (b != NULL)
        l1sys_burst_write( b->coalesce_handle,
                           mem_type,
                           b->base_address,
                           reg,
                           len,
                           value);
    else
        l2sys_burst_write( ((pmc_handle_t *)h)->sys_handle,
                           mem_type,
                           ((pmc_handle_t *)h)->base_address + reg,
                           len,
                           value);
}

static INLINE PMC_ERROR ohp_core_poll_bit( ohp_core_buffer_t *b,
                                           ohp_core_handle_t *h,
                                           UINT32 mem_type,
                                           UINT32 reg,
                                           UINT32 mask,
                                           UINT32 value,
                                           UINT32 max_count,
                                           UINT32 *num_failed_polls,
                                           UINT32 delay_between_polls_in_microseconds )
{
    if (b != NULL)
        return l1sys_poll_bit( b->coalesce_handle,
                               mem_type,
                               b->base_address,
                               reg,
                               mask,
                               value,
                               max_count,
                               num_failed_polls,
                               delay_between_polls_in_microseconds);
    else
        return l2sys_poll_bit( ((pmc_handle_t *)h)->sys_handle,
                               mem_type,
                               ((pmc_handle_t *)h)->base_address + reg,
                               mask,
                               value,
                               max_count,
                               num_failed_polls,
                               delay_between_polls_in_microseconds);
}

/*
 * ==================================================================================
 *                      register access functions for ohp_core
 * ==================================================================================
 */

/**
 * accessor functions for register PMC_OHP_CORE_REG_OHP_CFG_CTRL
 *
 * Register: OHP Control
 * Offset: 0x00000000 OHP_CFG_CTRL
 *
 * bits 0 default 0 OHP_EN
 *
 * bits 4 default 0 STGA_GCC_EN
 *
 * bits 8 default 0 STGB_GCC_EN
 */

#ifndef ohp_core_reg_OHP_CFG_CTRL_write
#define ohp_core_reg_OHP_CFG_CTRL_write( b, h, value ) \
       _ohp_core_reg_OHP_CFG_CTRL_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_OHP_CFG_CTRL_write( LOG_CALLER_DEFN
                                                     ohp_core_buffer_t *b,
                                                     ohp_core_handle_t *h,
                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_OHP_CFG_CTRL_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OHP_CORE_REG_OHP_CFG_CTRL,
                        value);
}


#ifndef ohp_core_reg_OHP_CFG_CTRL_field_set
#define ohp_core_reg_OHP_CFG_CTRL_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_OHP_CFG_CTRL_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_OHP_CFG_CTRL_field_set( LOG_CALLER_DEFN
                                                         ohp_core_buffer_t *b,
                                                         ohp_core_handle_t *h,
                                                         UINT32 mask,
                                                         UINT32 ofs,
                                                         UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_OHP_CFG_CTRL_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OHP_CORE_REG_OHP_CFG_CTRL,
                        mask,
                        PMC_OHP_CORE_REG_OHP_CFG_CTRL_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_OHP_CFG_CTRL_read
#define ohp_core_reg_OHP_CFG_CTRL_read( b, h ) \
       _ohp_core_reg_OHP_CFG_CTRL_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_OHP_CFG_CTRL_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_CONFIG,
                                   PMC_OHP_CORE_REG_OHP_CFG_CTRL);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_OHP_CFG_CTRL_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_STGA_SA_UID
 *
 * Register: Stage A SA User ID
 * Offset: 0x0000000c STGA_SA_UID
 *
 * bits 31:0 default 0x00000000 STGA_SADDR_UID
 */

#ifndef ohp_core_reg_STGA_SA_UID_write
#define ohp_core_reg_STGA_SA_UID_write( b, h, value ) \
       _ohp_core_reg_STGA_SA_UID_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_STGA_SA_UID_write( LOG_CALLER_DEFN
                                                    ohp_core_buffer_t *b,
                                                    ohp_core_handle_t *h,
                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_STGA_SA_UID_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OHP_CORE_REG_STGA_SA_UID,
                        value);
}


#ifndef ohp_core_reg_STGA_SA_UID_field_set
#define ohp_core_reg_STGA_SA_UID_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_STGA_SA_UID_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_STGA_SA_UID_field_set( LOG_CALLER_DEFN
                                                        ohp_core_buffer_t *b,
                                                        ohp_core_handle_t *h,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_STGA_SA_UID_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OHP_CORE_REG_STGA_SA_UID,
                        mask,
                        PMC_OHP_CORE_REG_STGA_SA_UID_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_STGA_SA_UID_read
#define ohp_core_reg_STGA_SA_UID_read( b, h ) \
       _ohp_core_reg_STGA_SA_UID_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_STGA_SA_UID_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_CONFIG,
                                   PMC_OHP_CORE_REG_STGA_SA_UID);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_STGA_SA_UID_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_STGB_SA_UID
 *
 * Register: Stage B SA User ID
 * Offset: 0x00000010 STGB_SA_UID
 *
 * bits 31:0 default 0x00000000 STGB_SADDR_UID
 */

#ifndef ohp_core_reg_STGB_SA_UID_write
#define ohp_core_reg_STGB_SA_UID_write( b, h, value ) \
       _ohp_core_reg_STGB_SA_UID_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_STGB_SA_UID_write( LOG_CALLER_DEFN
                                                    ohp_core_buffer_t *b,
                                                    ohp_core_handle_t *h,
                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_STGB_SA_UID_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OHP_CORE_REG_STGB_SA_UID,
                        value);
}


#ifndef ohp_core_reg_STGB_SA_UID_field_set
#define ohp_core_reg_STGB_SA_UID_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_STGB_SA_UID_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_STGB_SA_UID_field_set( LOG_CALLER_DEFN
                                                        ohp_core_buffer_t *b,
                                                        ohp_core_handle_t *h,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_STGB_SA_UID_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OHP_CORE_REG_STGB_SA_UID,
                        mask,
                        PMC_OHP_CORE_REG_STGB_SA_UID_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_STGB_SA_UID_read
#define ohp_core_reg_STGB_SA_UID_read( b, h ) \
       _ohp_core_reg_STGB_SA_UID_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_STGB_SA_UID_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_CONFIG,
                                   PMC_OHP_CORE_REG_STGB_SA_UID);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_STGB_SA_UID_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_STGA_DA_UID
 *
 * Register: Stage A DA User ID
 * Offset: 0x00000014 STGA_DA_UID
 *
 * bits 31:0 default 0x00000000 STGA_DADDR_UID
 */

#ifndef ohp_core_reg_STGA_DA_UID_write
#define ohp_core_reg_STGA_DA_UID_write( b, h, value ) \
       _ohp_core_reg_STGA_DA_UID_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_STGA_DA_UID_write( LOG_CALLER_DEFN
                                                    ohp_core_buffer_t *b,
                                                    ohp_core_handle_t *h,
                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_STGA_DA_UID_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OHP_CORE_REG_STGA_DA_UID,
                        value);
}


#ifndef ohp_core_reg_STGA_DA_UID_field_set
#define ohp_core_reg_STGA_DA_UID_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_STGA_DA_UID_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_STGA_DA_UID_field_set( LOG_CALLER_DEFN
                                                        ohp_core_buffer_t *b,
                                                        ohp_core_handle_t *h,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_STGA_DA_UID_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OHP_CORE_REG_STGA_DA_UID,
                        mask,
                        PMC_OHP_CORE_REG_STGA_DA_UID_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_STGA_DA_UID_read
#define ohp_core_reg_STGA_DA_UID_read( b, h ) \
       _ohp_core_reg_STGA_DA_UID_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_STGA_DA_UID_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_CONFIG,
                                   PMC_OHP_CORE_REG_STGA_DA_UID);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_STGA_DA_UID_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_STGB_DA_UID
 *
 * Register: Stage B DA User ID
 * Offset: 0x00000018 STGB_DA_UID
 *
 * bits 31:0 default 0x00000000 STGB_DADDR_UID
 */

#ifndef ohp_core_reg_STGB_DA_UID_write
#define ohp_core_reg_STGB_DA_UID_write( b, h, value ) \
       _ohp_core_reg_STGB_DA_UID_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_STGB_DA_UID_write( LOG_CALLER_DEFN
                                                    ohp_core_buffer_t *b,
                                                    ohp_core_handle_t *h,
                                                    UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_STGB_DA_UID_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OHP_CORE_REG_STGB_DA_UID,
                        value);
}


#ifndef ohp_core_reg_STGB_DA_UID_field_set
#define ohp_core_reg_STGB_DA_UID_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_STGB_DA_UID_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_STGB_DA_UID_field_set( LOG_CALLER_DEFN
                                                        ohp_core_buffer_t *b,
                                                        ohp_core_handle_t *h,
                                                        UINT32 mask,
                                                        UINT32 ofs,
                                                        UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_STGB_DA_UID_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OHP_CORE_REG_STGB_DA_UID,
                        mask,
                        PMC_OHP_CORE_REG_STGB_DA_UID_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_STGB_DA_UID_read
#define ohp_core_reg_STGB_DA_UID_read( b, h ) \
       _ohp_core_reg_STGB_DA_UID_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_STGB_DA_UID_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_CONFIG,
                                   PMC_OHP_CORE_REG_STGB_DA_UID);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_STGB_DA_UID_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_RXFA_PWR_CTRL
 *
 * Register: RXFA RAM Power Control
 * Offset: 0x0000001c RXFA_PWR_CTRL
 *
 * bits 5:0 default 000000 RXFA_SD_CONFIG
 */

#ifndef ohp_core_reg_RXFA_PWR_CTRL_write
#define ohp_core_reg_RXFA_PWR_CTRL_write( b, h, value ) \
       _ohp_core_reg_RXFA_PWR_CTRL_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXFA_PWR_CTRL_write( LOG_CALLER_DEFN
                                                      ohp_core_buffer_t *b,
                                                      ohp_core_handle_t *h,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXFA_PWR_CTRL_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OHP_CORE_REG_RXFA_PWR_CTRL,
                        value);
}


#ifndef ohp_core_reg_RXFA_PWR_CTRL_field_set
#define ohp_core_reg_RXFA_PWR_CTRL_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXFA_PWR_CTRL_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXFA_PWR_CTRL_field_set( LOG_CALLER_DEFN
                                                          ohp_core_buffer_t *b,
                                                          ohp_core_handle_t *h,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXFA_PWR_CTRL_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OHP_CORE_REG_RXFA_PWR_CTRL,
                        mask,
                        PMC_OHP_CORE_REG_RXFA_PWR_CTRL_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_RXFA_PWR_CTRL_read
#define ohp_core_reg_RXFA_PWR_CTRL_read( b, h ) \
       _ohp_core_reg_RXFA_PWR_CTRL_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXFA_PWR_CTRL_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_CONFIG,
                                   PMC_OHP_CORE_REG_RXFA_PWR_CTRL);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXFA_PWR_CTRL_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_RXFB_PWR_CTRL
 *
 * Register: RXFB RAM Power Control
 * Offset: 0x00000020 RXFB_PWR_CTRL
 *
 * bits 5:0 default 000000 RXFB_SD_CONFIG
 */

#ifndef ohp_core_reg_RXFB_PWR_CTRL_write
#define ohp_core_reg_RXFB_PWR_CTRL_write( b, h, value ) \
       _ohp_core_reg_RXFB_PWR_CTRL_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXFB_PWR_CTRL_write( LOG_CALLER_DEFN
                                                      ohp_core_buffer_t *b,
                                                      ohp_core_handle_t *h,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXFB_PWR_CTRL_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OHP_CORE_REG_RXFB_PWR_CTRL,
                        value);
}


#ifndef ohp_core_reg_RXFB_PWR_CTRL_field_set
#define ohp_core_reg_RXFB_PWR_CTRL_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXFB_PWR_CTRL_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXFB_PWR_CTRL_field_set( LOG_CALLER_DEFN
                                                          ohp_core_buffer_t *b,
                                                          ohp_core_handle_t *h,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXFB_PWR_CTRL_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OHP_CORE_REG_RXFB_PWR_CTRL,
                        mask,
                        PMC_OHP_CORE_REG_RXFB_PWR_CTRL_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_RXFB_PWR_CTRL_read
#define ohp_core_reg_RXFB_PWR_CTRL_read( b, h ) \
       _ohp_core_reg_RXFB_PWR_CTRL_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXFB_PWR_CTRL_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_CONFIG,
                                   PMC_OHP_CORE_REG_RXFB_PWR_CTRL);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXFB_PWR_CTRL_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_TXFA_PWR_CTRL
 *
 * Register: TXFA RAM Power Control
 * Offset: 0x00000024 TXFA_PWR_CTRL
 *
 * bits 5:0 default 000000 TXFA_SD_CONFIG
 */

#ifndef ohp_core_reg_TXFA_PWR_CTRL_write
#define ohp_core_reg_TXFA_PWR_CTRL_write( b, h, value ) \
       _ohp_core_reg_TXFA_PWR_CTRL_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_TXFA_PWR_CTRL_write( LOG_CALLER_DEFN
                                                      ohp_core_buffer_t *b,
                                                      ohp_core_handle_t *h,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_TXFA_PWR_CTRL_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OHP_CORE_REG_TXFA_PWR_CTRL,
                        value);
}


#ifndef ohp_core_reg_TXFA_PWR_CTRL_field_set
#define ohp_core_reg_TXFA_PWR_CTRL_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_TXFA_PWR_CTRL_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_TXFA_PWR_CTRL_field_set( LOG_CALLER_DEFN
                                                          ohp_core_buffer_t *b,
                                                          ohp_core_handle_t *h,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_TXFA_PWR_CTRL_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OHP_CORE_REG_TXFA_PWR_CTRL,
                        mask,
                        PMC_OHP_CORE_REG_TXFA_PWR_CTRL_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_TXFA_PWR_CTRL_read
#define ohp_core_reg_TXFA_PWR_CTRL_read( b, h ) \
       _ohp_core_reg_TXFA_PWR_CTRL_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_TXFA_PWR_CTRL_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_CONFIG,
                                   PMC_OHP_CORE_REG_TXFA_PWR_CTRL);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_TXFA_PWR_CTRL_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_TXFB_PWR_CTRL
 *
 * Register: TXFB RAM Power Control
 * Offset: 0x00000028 TXFB_PWR_CTRL
 *
 * bits 5:0 default 000000 TXFB_SD_CONFIG
 */

#ifndef ohp_core_reg_TXFB_PWR_CTRL_write
#define ohp_core_reg_TXFB_PWR_CTRL_write( b, h, value ) \
       _ohp_core_reg_TXFB_PWR_CTRL_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_TXFB_PWR_CTRL_write( LOG_CALLER_DEFN
                                                      ohp_core_buffer_t *b,
                                                      ohp_core_handle_t *h,
                                                      UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_TXFB_PWR_CTRL_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OHP_CORE_REG_TXFB_PWR_CTRL,
                        value);
}


#ifndef ohp_core_reg_TXFB_PWR_CTRL_field_set
#define ohp_core_reg_TXFB_PWR_CTRL_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_TXFB_PWR_CTRL_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_TXFB_PWR_CTRL_field_set( LOG_CALLER_DEFN
                                                          ohp_core_buffer_t *b,
                                                          ohp_core_handle_t *h,
                                                          UINT32 mask,
                                                          UINT32 ofs,
                                                          UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_TXFB_PWR_CTRL_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OHP_CORE_REG_TXFB_PWR_CTRL,
                        mask,
                        PMC_OHP_CORE_REG_TXFB_PWR_CTRL_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_TXFB_PWR_CTRL_read
#define ohp_core_reg_TXFB_PWR_CTRL_read( b, h ) \
       _ohp_core_reg_TXFB_PWR_CTRL_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_TXFB_PWR_CTRL_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_CONFIG,
                                   PMC_OHP_CORE_REG_TXFB_PWR_CTRL);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_TXFB_PWR_CTRL_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_CFC_DEBUG_ID
 *
 * Register: CFC Debug ID
 * Offset: 0x00001384 CFC_DEBUG_ID
 *
 * bits 1:0 default 00 CFC_DBG_ID
 */

#ifndef ohp_core_reg_CFC_DEBUG_ID_write
#define ohp_core_reg_CFC_DEBUG_ID_write( b, h, value ) \
       _ohp_core_reg_CFC_DEBUG_ID_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_CFC_DEBUG_ID_write( LOG_CALLER_DEFN
                                                     ohp_core_buffer_t *b,
                                                     ohp_core_handle_t *h,
                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_CFC_DEBUG_ID_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OHP_CORE_REG_CFC_DEBUG_ID,
                        value);
}


#ifndef ohp_core_reg_CFC_DEBUG_ID_field_set
#define ohp_core_reg_CFC_DEBUG_ID_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_CFC_DEBUG_ID_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_CFC_DEBUG_ID_field_set( LOG_CALLER_DEFN
                                                         ohp_core_buffer_t *b,
                                                         ohp_core_handle_t *h,
                                                         UINT32 mask,
                                                         UINT32 ofs,
                                                         UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_CFC_DEBUG_ID_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OHP_CORE_REG_CFC_DEBUG_ID,
                        mask,
                        PMC_OHP_CORE_REG_CFC_DEBUG_ID_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_CFC_DEBUG_ID_read
#define ohp_core_reg_CFC_DEBUG_ID_read( b, h ) \
       _ohp_core_reg_CFC_DEBUG_ID_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_CFC_DEBUG_ID_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_CONFIG,
                                   PMC_OHP_CORE_REG_CFC_DEBUG_ID);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_CFC_DEBUG_ID_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_CFC_DEBUG_CTRL
 *
 * Register: CFC Debug Interface Control
 * Offset: 0x00001388 CFC_DEBUG_CTRL
 *
 * bits 16   default 0      CFC_DBG_TRIG
 *
 * bits 10:0 default 0x0000 CFC_DBG_RADDR
 */

#ifndef ohp_core_reg_CFC_DEBUG_CTRL_write
#define ohp_core_reg_CFC_DEBUG_CTRL_write( b, h, value ) \
       _ohp_core_reg_CFC_DEBUG_CTRL_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_CFC_DEBUG_CTRL_write( LOG_CALLER_DEFN
                                                       ohp_core_buffer_t *b,
                                                       ohp_core_handle_t *h,
                                                       UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_CFC_DEBUG_CTRL_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OHP_CORE_REG_CFC_DEBUG_CTRL,
                        value);
}


#ifndef ohp_core_reg_CFC_DEBUG_CTRL_field_set
#define ohp_core_reg_CFC_DEBUG_CTRL_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_CFC_DEBUG_CTRL_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_CFC_DEBUG_CTRL_field_set( LOG_CALLER_DEFN
                                                           ohp_core_buffer_t *b,
                                                           ohp_core_handle_t *h,
                                                           UINT32 mask,
                                                           UINT32 ofs,
                                                           UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_CFC_DEBUG_CTRL_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OHP_CORE_REG_CFC_DEBUG_CTRL,
                        mask,
                        PMC_OHP_CORE_REG_CFC_DEBUG_CTRL_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_CFC_DEBUG_CTRL_read
#define ohp_core_reg_CFC_DEBUG_CTRL_read( b, h ) \
       _ohp_core_reg_CFC_DEBUG_CTRL_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_CFC_DEBUG_CTRL_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_CONFIG,
                                   PMC_OHP_CORE_REG_CFC_DEBUG_CTRL);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_CFC_DEBUG_CTRL_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_OHP_ENET_IO_CTRL
 *
 * Register: FEGE IO End Flip
 * Offset: 0x00001390 OHP_ENET_IO_CTRL
 *
 * bits 0  default 0 SGMII_TX_FLIP
 *
 * bits 8  default 0 SGMII_RX_FLIP
 *
 * bits 16 default 0 FEGE_TX_FLIP
 *
 * bits 24 default 0 FEGE_RX_FLIP
 */

#ifndef ohp_core_reg_OHP_ENET_IO_CTRL_write
#define ohp_core_reg_OHP_ENET_IO_CTRL_write( b, h, value ) \
       _ohp_core_reg_OHP_ENET_IO_CTRL_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_OHP_ENET_IO_CTRL_write( LOG_CALLER_DEFN
                                                         ohp_core_buffer_t *b,
                                                         ohp_core_handle_t *h,
                                                         UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_OHP_ENET_IO_CTRL_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OHP_CORE_REG_OHP_ENET_IO_CTRL,
                        value);
}


#ifndef ohp_core_reg_OHP_ENET_IO_CTRL_field_set
#define ohp_core_reg_OHP_ENET_IO_CTRL_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_OHP_ENET_IO_CTRL_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_OHP_ENET_IO_CTRL_field_set( LOG_CALLER_DEFN
                                                             ohp_core_buffer_t *b,
                                                             ohp_core_handle_t *h,
                                                             UINT32 mask,
                                                             UINT32 ofs,
                                                             UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_OHP_ENET_IO_CTRL_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OHP_CORE_REG_OHP_ENET_IO_CTRL,
                        mask,
                        PMC_OHP_CORE_REG_OHP_ENET_IO_CTRL_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_OHP_ENET_IO_CTRL_read
#define ohp_core_reg_OHP_ENET_IO_CTRL_read( b, h ) \
       _ohp_core_reg_OHP_ENET_IO_CTRL_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_OHP_ENET_IO_CTRL_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_CONFIG,
                                   PMC_OHP_CORE_REG_OHP_ENET_IO_CTRL);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_OHP_ENET_IO_CTRL_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_TXFA_GCC0_MASK
 *
 * Register: TXFA GCC0 Mask
 * Offset: (0x0000062c + (N) * 4) TXFA_GCC0_MASK
 *
 * bits        31:0 default 0x00000000 TXFA_GCC0_INS_MASK
 * field_bits  31:0
 */

#ifndef ohp_core_reg_TXFA_GCC0_MASK_array_burst_write
#define ohp_core_reg_TXFA_GCC0_MASK_array_burst_write( b, h, ofs, len, value ) \
       _ohp_core_reg_TXFA_GCC0_MASK_array_burst_write( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _ohp_core_reg_TXFA_GCC0_MASK_array_burst_write( LOG_CALLER_DEFN
                                                                   ohp_core_buffer_t *b,
                                                                   ohp_core_handle_t *h,
                                                                   UINT32 ofs,
                                                                   UINT32 len,
                                                                   UINT32 *value )
{
    if (len + ofs > 3)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "ohp_core_reg_TXFA_GCC0_MASK_array_burst_write", ofs, len, 3 );
    IOLOG( "%s of %d words ofs=%d len=%d", "ohp_core_reg_TXFA_GCC0_MASK_array_burst_write", 3, ofs, len);
    ohp_core_burst_write( b,
                          h,
                          MEM_TYPE_CONFIG,
                          PMC_OHP_CORE_REG_TXFA_GCC0_MASK(ofs),
                          len,
                          value);

}


#ifndef ohp_core_reg_TXFA_GCC0_MASK_array_field_set
#define ohp_core_reg_TXFA_GCC0_MASK_array_field_set( b, h, N, mask, ofs, value ) \
       _ohp_core_reg_TXFA_GCC0_MASK_array_field_set( LOG_CALLER b, h, N, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_TXFA_GCC0_MASK_array_field_set( LOG_CALLER_DEFN
                                                                 ohp_core_buffer_t *b,
                                                                 ohp_core_handle_t *h,
                                                                 UINT32 N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_TXFA_GCC0_MASK_array_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OHP_CORE_REG_TXFA_GCC0_MASK(N),
                        mask,
                        PMC_OHP_CORE_REG_TXFA_GCC0_MASK_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_TXFA_GCC0_MASK_array_burst_read
#define ohp_core_reg_TXFA_GCC0_MASK_array_burst_read( b, h, ofs, len, value ) \
       _ohp_core_reg_TXFA_GCC0_MASK_array_burst_read( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _ohp_core_reg_TXFA_GCC0_MASK_array_burst_read( LOG_CALLER_DEFN
                                                                  ohp_core_buffer_t *b,
                                                                  ohp_core_handle_t *h,
                                                                  UINT32 ofs,
                                                                  UINT32 len,
                                                                  UINT32 *value )
{
    if (len + ofs > 3)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "ohp_core_reg_TXFA_GCC0_MASK_array_burst_read", ofs, len, 3 );
    ohp_core_burst_read( b,
                         h,
                         MEM_TYPE_CONFIG,
                         PMC_OHP_CORE_REG_TXFA_GCC0_MASK(ofs),
                         len,
                         value);

    IOLOG( "%s of %d words ofs=%d len=%d", "ohp_core_reg_TXFA_GCC0_MASK_array_burst_read", 3, ofs, len);
}


#ifndef ohp_core_reg_TXFA_GCC0_MASK_array_read
#define ohp_core_reg_TXFA_GCC0_MASK_array_read( b, h, N ) \
       _ohp_core_reg_TXFA_GCC0_MASK_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _ohp_core_reg_TXFA_GCC0_MASK_array_read( LOG_CALLER_DEFN
                                                              ohp_core_buffer_t *b,
                                                              ohp_core_handle_t *h,
                                                              UINT32 N )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_CONFIG,
                                   PMC_OHP_CORE_REG_TXFA_GCC0_MASK(N));

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_TXFA_GCC0_MASK_array_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_TXFA_GCC1_MASK
 *
 * Register: TXFA GCC1 Mask
 * Offset: (0x00000638 + (N) * 4) TXFA_GCC1_MASK
 *
 * bits        31:0 default 0x00000000 TXFA_GCC1_INS_MASK
 * field_bits  31:0
 */

#ifndef ohp_core_reg_TXFA_GCC1_MASK_array_burst_write
#define ohp_core_reg_TXFA_GCC1_MASK_array_burst_write( b, h, ofs, len, value ) \
       _ohp_core_reg_TXFA_GCC1_MASK_array_burst_write( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _ohp_core_reg_TXFA_GCC1_MASK_array_burst_write( LOG_CALLER_DEFN
                                                                   ohp_core_buffer_t *b,
                                                                   ohp_core_handle_t *h,
                                                                   UINT32 ofs,
                                                                   UINT32 len,
                                                                   UINT32 *value )
{
    if (len + ofs > 3)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "ohp_core_reg_TXFA_GCC1_MASK_array_burst_write", ofs, len, 3 );
    IOLOG( "%s of %d words ofs=%d len=%d", "ohp_core_reg_TXFA_GCC1_MASK_array_burst_write", 3, ofs, len);
    ohp_core_burst_write( b,
                          h,
                          MEM_TYPE_CONFIG,
                          PMC_OHP_CORE_REG_TXFA_GCC1_MASK(ofs),
                          len,
                          value);

}


#ifndef ohp_core_reg_TXFA_GCC1_MASK_array_field_set
#define ohp_core_reg_TXFA_GCC1_MASK_array_field_set( b, h, N, mask, ofs, value ) \
       _ohp_core_reg_TXFA_GCC1_MASK_array_field_set( LOG_CALLER b, h, N, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_TXFA_GCC1_MASK_array_field_set( LOG_CALLER_DEFN
                                                                 ohp_core_buffer_t *b,
                                                                 ohp_core_handle_t *h,
                                                                 UINT32 N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_TXFA_GCC1_MASK_array_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OHP_CORE_REG_TXFA_GCC1_MASK(N),
                        mask,
                        PMC_OHP_CORE_REG_TXFA_GCC1_MASK_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_TXFA_GCC1_MASK_array_burst_read
#define ohp_core_reg_TXFA_GCC1_MASK_array_burst_read( b, h, ofs, len, value ) \
       _ohp_core_reg_TXFA_GCC1_MASK_array_burst_read( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _ohp_core_reg_TXFA_GCC1_MASK_array_burst_read( LOG_CALLER_DEFN
                                                                  ohp_core_buffer_t *b,
                                                                  ohp_core_handle_t *h,
                                                                  UINT32 ofs,
                                                                  UINT32 len,
                                                                  UINT32 *value )
{
    if (len + ofs > 3)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "ohp_core_reg_TXFA_GCC1_MASK_array_burst_read", ofs, len, 3 );
    ohp_core_burst_read( b,
                         h,
                         MEM_TYPE_CONFIG,
                         PMC_OHP_CORE_REG_TXFA_GCC1_MASK(ofs),
                         len,
                         value);

    IOLOG( "%s of %d words ofs=%d len=%d", "ohp_core_reg_TXFA_GCC1_MASK_array_burst_read", 3, ofs, len);
}


#ifndef ohp_core_reg_TXFA_GCC1_MASK_array_read
#define ohp_core_reg_TXFA_GCC1_MASK_array_read( b, h, N ) \
       _ohp_core_reg_TXFA_GCC1_MASK_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _ohp_core_reg_TXFA_GCC1_MASK_array_read( LOG_CALLER_DEFN
                                                              ohp_core_buffer_t *b,
                                                              ohp_core_handle_t *h,
                                                              UINT32 N )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_CONFIG,
                                   PMC_OHP_CORE_REG_TXFA_GCC1_MASK(N));

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_TXFA_GCC1_MASK_array_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_TXFA_GCC2_MASK
 *
 * Register: TXFA GCC2 Mask
 * Offset: (0x00000644 + (N) * 4) TXFA_GCC2_MASK
 *
 * bits        31:0 default 0x00000000 TXFA_GCC2_INS_MASK
 * field_bits  31:0
 */

#ifndef ohp_core_reg_TXFA_GCC2_MASK_array_burst_write
#define ohp_core_reg_TXFA_GCC2_MASK_array_burst_write( b, h, ofs, len, value ) \
       _ohp_core_reg_TXFA_GCC2_MASK_array_burst_write( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _ohp_core_reg_TXFA_GCC2_MASK_array_burst_write( LOG_CALLER_DEFN
                                                                   ohp_core_buffer_t *b,
                                                                   ohp_core_handle_t *h,
                                                                   UINT32 ofs,
                                                                   UINT32 len,
                                                                   UINT32 *value )
{
    if (len + ofs > 3)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "ohp_core_reg_TXFA_GCC2_MASK_array_burst_write", ofs, len, 3 );
    IOLOG( "%s of %d words ofs=%d len=%d", "ohp_core_reg_TXFA_GCC2_MASK_array_burst_write", 3, ofs, len);
    ohp_core_burst_write( b,
                          h,
                          MEM_TYPE_CONFIG,
                          PMC_OHP_CORE_REG_TXFA_GCC2_MASK(ofs),
                          len,
                          value);

}


#ifndef ohp_core_reg_TXFA_GCC2_MASK_array_field_set
#define ohp_core_reg_TXFA_GCC2_MASK_array_field_set( b, h, N, mask, ofs, value ) \
       _ohp_core_reg_TXFA_GCC2_MASK_array_field_set( LOG_CALLER b, h, N, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_TXFA_GCC2_MASK_array_field_set( LOG_CALLER_DEFN
                                                                 ohp_core_buffer_t *b,
                                                                 ohp_core_handle_t *h,
                                                                 UINT32 N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_TXFA_GCC2_MASK_array_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OHP_CORE_REG_TXFA_GCC2_MASK(N),
                        mask,
                        PMC_OHP_CORE_REG_TXFA_GCC2_MASK_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_TXFA_GCC2_MASK_array_burst_read
#define ohp_core_reg_TXFA_GCC2_MASK_array_burst_read( b, h, ofs, len, value ) \
       _ohp_core_reg_TXFA_GCC2_MASK_array_burst_read( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _ohp_core_reg_TXFA_GCC2_MASK_array_burst_read( LOG_CALLER_DEFN
                                                                  ohp_core_buffer_t *b,
                                                                  ohp_core_handle_t *h,
                                                                  UINT32 ofs,
                                                                  UINT32 len,
                                                                  UINT32 *value )
{
    if (len + ofs > 3)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "ohp_core_reg_TXFA_GCC2_MASK_array_burst_read", ofs, len, 3 );
    ohp_core_burst_read( b,
                         h,
                         MEM_TYPE_CONFIG,
                         PMC_OHP_CORE_REG_TXFA_GCC2_MASK(ofs),
                         len,
                         value);

    IOLOG( "%s of %d words ofs=%d len=%d", "ohp_core_reg_TXFA_GCC2_MASK_array_burst_read", 3, ofs, len);
}


#ifndef ohp_core_reg_TXFA_GCC2_MASK_array_read
#define ohp_core_reg_TXFA_GCC2_MASK_array_read( b, h, N ) \
       _ohp_core_reg_TXFA_GCC2_MASK_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _ohp_core_reg_TXFA_GCC2_MASK_array_read( LOG_CALLER_DEFN
                                                              ohp_core_buffer_t *b,
                                                              ohp_core_handle_t *h,
                                                              UINT32 N )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_CONFIG,
                                   PMC_OHP_CORE_REG_TXFA_GCC2_MASK(N));

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_TXFA_GCC2_MASK_array_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_TXFB_GCC0_MASK
 *
 * Register: TXFB GCC0 Mask
 * Offset: (0x00000650 + (N) * 4) TXFB_GCC0_MASK
 *
 * bits        31:0 default 0x00000000 TXFB_GCC0_INS_MASK
 * field_bits  31:0
 */

#ifndef ohp_core_reg_TXFB_GCC0_MASK_array_burst_write
#define ohp_core_reg_TXFB_GCC0_MASK_array_burst_write( b, h, ofs, len, value ) \
       _ohp_core_reg_TXFB_GCC0_MASK_array_burst_write( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _ohp_core_reg_TXFB_GCC0_MASK_array_burst_write( LOG_CALLER_DEFN
                                                                   ohp_core_buffer_t *b,
                                                                   ohp_core_handle_t *h,
                                                                   UINT32 ofs,
                                                                   UINT32 len,
                                                                   UINT32 *value )
{
    if (len + ofs > 3)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "ohp_core_reg_TXFB_GCC0_MASK_array_burst_write", ofs, len, 3 );
    IOLOG( "%s of %d words ofs=%d len=%d", "ohp_core_reg_TXFB_GCC0_MASK_array_burst_write", 3, ofs, len);
    ohp_core_burst_write( b,
                          h,
                          MEM_TYPE_CONFIG,
                          PMC_OHP_CORE_REG_TXFB_GCC0_MASK(ofs),
                          len,
                          value);

}


#ifndef ohp_core_reg_TXFB_GCC0_MASK_array_field_set
#define ohp_core_reg_TXFB_GCC0_MASK_array_field_set( b, h, N, mask, ofs, value ) \
       _ohp_core_reg_TXFB_GCC0_MASK_array_field_set( LOG_CALLER b, h, N, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_TXFB_GCC0_MASK_array_field_set( LOG_CALLER_DEFN
                                                                 ohp_core_buffer_t *b,
                                                                 ohp_core_handle_t *h,
                                                                 UINT32 N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_TXFB_GCC0_MASK_array_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OHP_CORE_REG_TXFB_GCC0_MASK(N),
                        mask,
                        PMC_OHP_CORE_REG_TXFB_GCC0_MASK_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_TXFB_GCC0_MASK_array_burst_read
#define ohp_core_reg_TXFB_GCC0_MASK_array_burst_read( b, h, ofs, len, value ) \
       _ohp_core_reg_TXFB_GCC0_MASK_array_burst_read( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _ohp_core_reg_TXFB_GCC0_MASK_array_burst_read( LOG_CALLER_DEFN
                                                                  ohp_core_buffer_t *b,
                                                                  ohp_core_handle_t *h,
                                                                  UINT32 ofs,
                                                                  UINT32 len,
                                                                  UINT32 *value )
{
    if (len + ofs > 3)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "ohp_core_reg_TXFB_GCC0_MASK_array_burst_read", ofs, len, 3 );
    ohp_core_burst_read( b,
                         h,
                         MEM_TYPE_CONFIG,
                         PMC_OHP_CORE_REG_TXFB_GCC0_MASK(ofs),
                         len,
                         value);

    IOLOG( "%s of %d words ofs=%d len=%d", "ohp_core_reg_TXFB_GCC0_MASK_array_burst_read", 3, ofs, len);
}


#ifndef ohp_core_reg_TXFB_GCC0_MASK_array_read
#define ohp_core_reg_TXFB_GCC0_MASK_array_read( b, h, N ) \
       _ohp_core_reg_TXFB_GCC0_MASK_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _ohp_core_reg_TXFB_GCC0_MASK_array_read( LOG_CALLER_DEFN
                                                              ohp_core_buffer_t *b,
                                                              ohp_core_handle_t *h,
                                                              UINT32 N )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_CONFIG,
                                   PMC_OHP_CORE_REG_TXFB_GCC0_MASK(N));

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_TXFB_GCC0_MASK_array_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_TXFB_GCC1_MASK
 *
 * Register: TXFB GCC1 Mask
 * Offset: (0x0000065c + (N) * 4) TXFB_GCC1_MASK
 *
 * bits        31:0 default 0x00000000 TXFB_GCC1_INS_MASK
 * field_bits  31:0
 */

#ifndef ohp_core_reg_TXFB_GCC1_MASK_array_burst_write
#define ohp_core_reg_TXFB_GCC1_MASK_array_burst_write( b, h, ofs, len, value ) \
       _ohp_core_reg_TXFB_GCC1_MASK_array_burst_write( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _ohp_core_reg_TXFB_GCC1_MASK_array_burst_write( LOG_CALLER_DEFN
                                                                   ohp_core_buffer_t *b,
                                                                   ohp_core_handle_t *h,
                                                                   UINT32 ofs,
                                                                   UINT32 len,
                                                                   UINT32 *value )
{
    if (len + ofs > 3)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "ohp_core_reg_TXFB_GCC1_MASK_array_burst_write", ofs, len, 3 );
    IOLOG( "%s of %d words ofs=%d len=%d", "ohp_core_reg_TXFB_GCC1_MASK_array_burst_write", 3, ofs, len);
    ohp_core_burst_write( b,
                          h,
                          MEM_TYPE_CONFIG,
                          PMC_OHP_CORE_REG_TXFB_GCC1_MASK(ofs),
                          len,
                          value);

}


#ifndef ohp_core_reg_TXFB_GCC1_MASK_array_field_set
#define ohp_core_reg_TXFB_GCC1_MASK_array_field_set( b, h, N, mask, ofs, value ) \
       _ohp_core_reg_TXFB_GCC1_MASK_array_field_set( LOG_CALLER b, h, N, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_TXFB_GCC1_MASK_array_field_set( LOG_CALLER_DEFN
                                                                 ohp_core_buffer_t *b,
                                                                 ohp_core_handle_t *h,
                                                                 UINT32 N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_TXFB_GCC1_MASK_array_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OHP_CORE_REG_TXFB_GCC1_MASK(N),
                        mask,
                        PMC_OHP_CORE_REG_TXFB_GCC1_MASK_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_TXFB_GCC1_MASK_array_burst_read
#define ohp_core_reg_TXFB_GCC1_MASK_array_burst_read( b, h, ofs, len, value ) \
       _ohp_core_reg_TXFB_GCC1_MASK_array_burst_read( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _ohp_core_reg_TXFB_GCC1_MASK_array_burst_read( LOG_CALLER_DEFN
                                                                  ohp_core_buffer_t *b,
                                                                  ohp_core_handle_t *h,
                                                                  UINT32 ofs,
                                                                  UINT32 len,
                                                                  UINT32 *value )
{
    if (len + ofs > 3)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "ohp_core_reg_TXFB_GCC1_MASK_array_burst_read", ofs, len, 3 );
    ohp_core_burst_read( b,
                         h,
                         MEM_TYPE_CONFIG,
                         PMC_OHP_CORE_REG_TXFB_GCC1_MASK(ofs),
                         len,
                         value);

    IOLOG( "%s of %d words ofs=%d len=%d", "ohp_core_reg_TXFB_GCC1_MASK_array_burst_read", 3, ofs, len);
}


#ifndef ohp_core_reg_TXFB_GCC1_MASK_array_read
#define ohp_core_reg_TXFB_GCC1_MASK_array_read( b, h, N ) \
       _ohp_core_reg_TXFB_GCC1_MASK_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _ohp_core_reg_TXFB_GCC1_MASK_array_read( LOG_CALLER_DEFN
                                                              ohp_core_buffer_t *b,
                                                              ohp_core_handle_t *h,
                                                              UINT32 N )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_CONFIG,
                                   PMC_OHP_CORE_REG_TXFB_GCC1_MASK(N));

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_TXFB_GCC1_MASK_array_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_TXFB_GCC2_MASK
 *
 * Register: TXFB GCC2 Mask
 * Offset: (0x00000668 + (N) * 4) TXFB_GCC2_MASK
 *
 * bits        31:0 default 0x00000000 TXFB_GCC2_INS_MASK
 * field_bits  31:0
 */

#ifndef ohp_core_reg_TXFB_GCC2_MASK_array_burst_write
#define ohp_core_reg_TXFB_GCC2_MASK_array_burst_write( b, h, ofs, len, value ) \
       _ohp_core_reg_TXFB_GCC2_MASK_array_burst_write( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _ohp_core_reg_TXFB_GCC2_MASK_array_burst_write( LOG_CALLER_DEFN
                                                                   ohp_core_buffer_t *b,
                                                                   ohp_core_handle_t *h,
                                                                   UINT32 ofs,
                                                                   UINT32 len,
                                                                   UINT32 *value )
{
    if (len + ofs > 3)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "ohp_core_reg_TXFB_GCC2_MASK_array_burst_write", ofs, len, 3 );
    IOLOG( "%s of %d words ofs=%d len=%d", "ohp_core_reg_TXFB_GCC2_MASK_array_burst_write", 3, ofs, len);
    ohp_core_burst_write( b,
                          h,
                          MEM_TYPE_CONFIG,
                          PMC_OHP_CORE_REG_TXFB_GCC2_MASK(ofs),
                          len,
                          value);

}


#ifndef ohp_core_reg_TXFB_GCC2_MASK_array_field_set
#define ohp_core_reg_TXFB_GCC2_MASK_array_field_set( b, h, N, mask, ofs, value ) \
       _ohp_core_reg_TXFB_GCC2_MASK_array_field_set( LOG_CALLER b, h, N, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_TXFB_GCC2_MASK_array_field_set( LOG_CALLER_DEFN
                                                                 ohp_core_buffer_t *b,
                                                                 ohp_core_handle_t *h,
                                                                 UINT32 N,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_TXFB_GCC2_MASK_array_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OHP_CORE_REG_TXFB_GCC2_MASK(N),
                        mask,
                        PMC_OHP_CORE_REG_TXFB_GCC2_MASK_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_TXFB_GCC2_MASK_array_burst_read
#define ohp_core_reg_TXFB_GCC2_MASK_array_burst_read( b, h, ofs, len, value ) \
       _ohp_core_reg_TXFB_GCC2_MASK_array_burst_read( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _ohp_core_reg_TXFB_GCC2_MASK_array_burst_read( LOG_CALLER_DEFN
                                                                  ohp_core_buffer_t *b,
                                                                  ohp_core_handle_t *h,
                                                                  UINT32 ofs,
                                                                  UINT32 len,
                                                                  UINT32 *value )
{
    if (len + ofs > 3)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "ohp_core_reg_TXFB_GCC2_MASK_array_burst_read", ofs, len, 3 );
    ohp_core_burst_read( b,
                         h,
                         MEM_TYPE_CONFIG,
                         PMC_OHP_CORE_REG_TXFB_GCC2_MASK(ofs),
                         len,
                         value);

    IOLOG( "%s of %d words ofs=%d len=%d", "ohp_core_reg_TXFB_GCC2_MASK_array_burst_read", 3, ofs, len);
}


#ifndef ohp_core_reg_TXFB_GCC2_MASK_array_read
#define ohp_core_reg_TXFB_GCC2_MASK_array_read( b, h, N ) \
       _ohp_core_reg_TXFB_GCC2_MASK_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _ohp_core_reg_TXFB_GCC2_MASK_array_read( LOG_CALLER_DEFN
                                                              ohp_core_buffer_t *b,
                                                              ohp_core_handle_t *h,
                                                              UINT32 N )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_CONFIG,
                                   PMC_OHP_CORE_REG_TXFB_GCC2_MASK(N));

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_TXFB_GCC2_MASK_array_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_STGA_CH_EN
 *
 * Register: Stage-A Channel Enable
 * Offset: (0x0000002c + (N) * 4) STGA_CH_EN
 *
 * bits 0 default 0 STGA_CH_EN_CTRL
 */

#ifndef ohp_core_reg_STGA_CH_EN_array_burst_write
#define ohp_core_reg_STGA_CH_EN_array_burst_write( b, h, ofs, len, value ) \
       _ohp_core_reg_STGA_CH_EN_array_burst_write( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _ohp_core_reg_STGA_CH_EN_array_burst_write( LOG_CALLER_DEFN
                                                               ohp_core_buffer_t *b,
                                                               ohp_core_handle_t *h,
                                                               UINT32 ofs,
                                                               UINT32 len,
                                                               UINT32 *value )
{
    if (len + ofs > 96)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "ohp_core_reg_STGA_CH_EN_array_burst_write", ofs, len, 96 );
    IOLOG( "%s of %d words ofs=%d len=%d", "ohp_core_reg_STGA_CH_EN_array_burst_write", 96, ofs, len);
    ohp_core_burst_write( b,
                          h,
                          MEM_TYPE_CONFIG,
                          PMC_OHP_CORE_REG_STGA_CH_EN(ofs),
                          len,
                          value);

}


#ifndef ohp_core_reg_STGA_CH_EN_array_field_set
#define ohp_core_reg_STGA_CH_EN_array_field_set( b, h, N, mask, ofs, value ) \
       _ohp_core_reg_STGA_CH_EN_array_field_set( LOG_CALLER b, h, N, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_STGA_CH_EN_array_field_set( LOG_CALLER_DEFN
                                                             ohp_core_buffer_t *b,
                                                             ohp_core_handle_t *h,
                                                             UINT32 N,
                                                             UINT32 mask,
                                                             UINT32 ofs,
                                                             UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_STGA_CH_EN_array_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OHP_CORE_REG_STGA_CH_EN(N),
                        mask,
                        PMC_OHP_CORE_REG_STGA_CH_EN_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_STGA_CH_EN_array_burst_read
#define ohp_core_reg_STGA_CH_EN_array_burst_read( b, h, ofs, len, value ) \
       _ohp_core_reg_STGA_CH_EN_array_burst_read( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _ohp_core_reg_STGA_CH_EN_array_burst_read( LOG_CALLER_DEFN
                                                              ohp_core_buffer_t *b,
                                                              ohp_core_handle_t *h,
                                                              UINT32 ofs,
                                                              UINT32 len,
                                                              UINT32 *value )
{
    if (len + ofs > 96)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "ohp_core_reg_STGA_CH_EN_array_burst_read", ofs, len, 96 );
    ohp_core_burst_read( b,
                         h,
                         MEM_TYPE_CONFIG,
                         PMC_OHP_CORE_REG_STGA_CH_EN(ofs),
                         len,
                         value);

    IOLOG( "%s of %d words ofs=%d len=%d", "ohp_core_reg_STGA_CH_EN_array_burst_read", 96, ofs, len);
}


#ifndef ohp_core_reg_STGA_CH_EN_array_read
#define ohp_core_reg_STGA_CH_EN_array_read( b, h, N ) \
       _ohp_core_reg_STGA_CH_EN_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _ohp_core_reg_STGA_CH_EN_array_read( LOG_CALLER_DEFN
                                                          ohp_core_buffer_t *b,
                                                          ohp_core_handle_t *h,
                                                          UINT32 N )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_CONFIG,
                                   PMC_OHP_CORE_REG_STGA_CH_EN(N));

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_STGA_CH_EN_array_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_STGB_CH_EN
 *
 * Register: Stage-B Channel Enable
 * Offset: (0x000001ac + (N) * 4) STGB_CH_EN
 *
 * bits 0 default 0 STGB_CH_EN_CTRL
 */

#ifndef ohp_core_reg_STGB_CH_EN_array_burst_write
#define ohp_core_reg_STGB_CH_EN_array_burst_write( b, h, ofs, len, value ) \
       _ohp_core_reg_STGB_CH_EN_array_burst_write( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _ohp_core_reg_STGB_CH_EN_array_burst_write( LOG_CALLER_DEFN
                                                               ohp_core_buffer_t *b,
                                                               ohp_core_handle_t *h,
                                                               UINT32 ofs,
                                                               UINT32 len,
                                                               UINT32 *value )
{
    if (len + ofs > 96)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "ohp_core_reg_STGB_CH_EN_array_burst_write", ofs, len, 96 );
    IOLOG( "%s of %d words ofs=%d len=%d", "ohp_core_reg_STGB_CH_EN_array_burst_write", 96, ofs, len);
    ohp_core_burst_write( b,
                          h,
                          MEM_TYPE_CONFIG,
                          PMC_OHP_CORE_REG_STGB_CH_EN(ofs),
                          len,
                          value);

}


#ifndef ohp_core_reg_STGB_CH_EN_array_field_set
#define ohp_core_reg_STGB_CH_EN_array_field_set( b, h, N, mask, ofs, value ) \
       _ohp_core_reg_STGB_CH_EN_array_field_set( LOG_CALLER b, h, N, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_STGB_CH_EN_array_field_set( LOG_CALLER_DEFN
                                                             ohp_core_buffer_t *b,
                                                             ohp_core_handle_t *h,
                                                             UINT32 N,
                                                             UINT32 mask,
                                                             UINT32 ofs,
                                                             UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_STGB_CH_EN_array_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OHP_CORE_REG_STGB_CH_EN(N),
                        mask,
                        PMC_OHP_CORE_REG_STGB_CH_EN_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_STGB_CH_EN_array_burst_read
#define ohp_core_reg_STGB_CH_EN_array_burst_read( b, h, ofs, len, value ) \
       _ohp_core_reg_STGB_CH_EN_array_burst_read( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _ohp_core_reg_STGB_CH_EN_array_burst_read( LOG_CALLER_DEFN
                                                              ohp_core_buffer_t *b,
                                                              ohp_core_handle_t *h,
                                                              UINT32 ofs,
                                                              UINT32 len,
                                                              UINT32 *value )
{
    if (len + ofs > 96)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "ohp_core_reg_STGB_CH_EN_array_burst_read", ofs, len, 96 );
    ohp_core_burst_read( b,
                         h,
                         MEM_TYPE_CONFIG,
                         PMC_OHP_CORE_REG_STGB_CH_EN(ofs),
                         len,
                         value);

    IOLOG( "%s of %d words ofs=%d len=%d", "ohp_core_reg_STGB_CH_EN_array_burst_read", 96, ofs, len);
}


#ifndef ohp_core_reg_STGB_CH_EN_array_read
#define ohp_core_reg_STGB_CH_EN_array_read( b, h, N ) \
       _ohp_core_reg_STGB_CH_EN_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _ohp_core_reg_STGB_CH_EN_array_read( LOG_CALLER_DEFN
                                                          ohp_core_buffer_t *b,
                                                          ohp_core_handle_t *h,
                                                          UINT32 N )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_CONFIG,
                                   PMC_OHP_CORE_REG_STGB_CH_EN(N));

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_STGB_CH_EN_array_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_TXFA_OFFSET
 *
 * Register: TXFA Channel Offset
 * Offset: (0x0000032c + (N) * 4) TXFA_OFFSET
 *
 * bits        8:0 default 000000000 TXFA_INS_OFFSET
 * field_bits  8:0
 */

#ifndef ohp_core_reg_TXFA_OFFSET_array_burst_write
#define ohp_core_reg_TXFA_OFFSET_array_burst_write( b, h, ofs, len, value ) \
       _ohp_core_reg_TXFA_OFFSET_array_burst_write( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _ohp_core_reg_TXFA_OFFSET_array_burst_write( LOG_CALLER_DEFN
                                                                ohp_core_buffer_t *b,
                                                                ohp_core_handle_t *h,
                                                                UINT32 ofs,
                                                                UINT32 len,
                                                                UINT32 *value )
{
    if (len + ofs > 96)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "ohp_core_reg_TXFA_OFFSET_array_burst_write", ofs, len, 96 );
    IOLOG( "%s of %d words ofs=%d len=%d", "ohp_core_reg_TXFA_OFFSET_array_burst_write", 96, ofs, len);
    ohp_core_burst_write( b,
                          h,
                          MEM_TYPE_CONFIG,
                          PMC_OHP_CORE_REG_TXFA_OFFSET(ofs),
                          len,
                          value);

}


#ifndef ohp_core_reg_TXFA_OFFSET_array_field_set
#define ohp_core_reg_TXFA_OFFSET_array_field_set( b, h, N, mask, ofs, value ) \
       _ohp_core_reg_TXFA_OFFSET_array_field_set( LOG_CALLER b, h, N, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_TXFA_OFFSET_array_field_set( LOG_CALLER_DEFN
                                                              ohp_core_buffer_t *b,
                                                              ohp_core_handle_t *h,
                                                              UINT32 N,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_TXFA_OFFSET_array_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OHP_CORE_REG_TXFA_OFFSET(N),
                        mask,
                        PMC_OHP_CORE_REG_TXFA_OFFSET_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_TXFA_OFFSET_array_burst_read
#define ohp_core_reg_TXFA_OFFSET_array_burst_read( b, h, ofs, len, value ) \
       _ohp_core_reg_TXFA_OFFSET_array_burst_read( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _ohp_core_reg_TXFA_OFFSET_array_burst_read( LOG_CALLER_DEFN
                                                               ohp_core_buffer_t *b,
                                                               ohp_core_handle_t *h,
                                                               UINT32 ofs,
                                                               UINT32 len,
                                                               UINT32 *value )
{
    if (len + ofs > 96)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "ohp_core_reg_TXFA_OFFSET_array_burst_read", ofs, len, 96 );
    ohp_core_burst_read( b,
                         h,
                         MEM_TYPE_CONFIG,
                         PMC_OHP_CORE_REG_TXFA_OFFSET(ofs),
                         len,
                         value);

    IOLOG( "%s of %d words ofs=%d len=%d", "ohp_core_reg_TXFA_OFFSET_array_burst_read", 96, ofs, len);
}


#ifndef ohp_core_reg_TXFA_OFFSET_array_read
#define ohp_core_reg_TXFA_OFFSET_array_read( b, h, N ) \
       _ohp_core_reg_TXFA_OFFSET_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _ohp_core_reg_TXFA_OFFSET_array_read( LOG_CALLER_DEFN
                                                           ohp_core_buffer_t *b,
                                                           ohp_core_handle_t *h,
                                                           UINT32 N )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_CONFIG,
                                   PMC_OHP_CORE_REG_TXFA_OFFSET(N));

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_TXFA_OFFSET_array_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_TXFB_OFFSET
 *
 * Register: TXFB Channel Offset
 * Offset: (0x000004ac + (N) * 4) TXFB_OFFSET
 *
 * bits        8:0 default 000000000 TXFB_INS_OFFSET
 * field_bits  8:0
 */

#ifndef ohp_core_reg_TXFB_OFFSET_array_burst_write
#define ohp_core_reg_TXFB_OFFSET_array_burst_write( b, h, ofs, len, value ) \
       _ohp_core_reg_TXFB_OFFSET_array_burst_write( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _ohp_core_reg_TXFB_OFFSET_array_burst_write( LOG_CALLER_DEFN
                                                                ohp_core_buffer_t *b,
                                                                ohp_core_handle_t *h,
                                                                UINT32 ofs,
                                                                UINT32 len,
                                                                UINT32 *value )
{
    if (len + ofs > 96)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "ohp_core_reg_TXFB_OFFSET_array_burst_write", ofs, len, 96 );
    IOLOG( "%s of %d words ofs=%d len=%d", "ohp_core_reg_TXFB_OFFSET_array_burst_write", 96, ofs, len);
    ohp_core_burst_write( b,
                          h,
                          MEM_TYPE_CONFIG,
                          PMC_OHP_CORE_REG_TXFB_OFFSET(ofs),
                          len,
                          value);

}


#ifndef ohp_core_reg_TXFB_OFFSET_array_field_set
#define ohp_core_reg_TXFB_OFFSET_array_field_set( b, h, N, mask, ofs, value ) \
       _ohp_core_reg_TXFB_OFFSET_array_field_set( LOG_CALLER b, h, N, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_TXFB_OFFSET_array_field_set( LOG_CALLER_DEFN
                                                              ohp_core_buffer_t *b,
                                                              ohp_core_handle_t *h,
                                                              UINT32 N,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_TXFB_OFFSET_array_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_CONFIG,
                        PMC_OHP_CORE_REG_TXFB_OFFSET(N),
                        mask,
                        PMC_OHP_CORE_REG_TXFB_OFFSET_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_TXFB_OFFSET_array_burst_read
#define ohp_core_reg_TXFB_OFFSET_array_burst_read( b, h, ofs, len, value ) \
       _ohp_core_reg_TXFB_OFFSET_array_burst_read( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _ohp_core_reg_TXFB_OFFSET_array_burst_read( LOG_CALLER_DEFN
                                                               ohp_core_buffer_t *b,
                                                               ohp_core_handle_t *h,
                                                               UINT32 ofs,
                                                               UINT32 len,
                                                               UINT32 *value )
{
    if (len + ofs > 96)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "ohp_core_reg_TXFB_OFFSET_array_burst_read", ofs, len, 96 );
    ohp_core_burst_read( b,
                         h,
                         MEM_TYPE_CONFIG,
                         PMC_OHP_CORE_REG_TXFB_OFFSET(ofs),
                         len,
                         value);

    IOLOG( "%s of %d words ofs=%d len=%d", "ohp_core_reg_TXFB_OFFSET_array_burst_read", 96, ofs, len);
}


#ifndef ohp_core_reg_TXFB_OFFSET_array_read
#define ohp_core_reg_TXFB_OFFSET_array_read( b, h, N ) \
       _ohp_core_reg_TXFB_OFFSET_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _ohp_core_reg_TXFB_OFFSET_array_read( LOG_CALLER_DEFN
                                                           ohp_core_buffer_t *b,
                                                           ohp_core_handle_t *h,
                                                           UINT32 N )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_CONFIG,
                                   PMC_OHP_CORE_REG_TXFB_OFFSET(N));

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_TXFB_OFFSET_array_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_SCH_RXFA_CFG
 *
 * Register: RXFA Extraction Scheduler Configuration
 * Offset: 0x00000004 SCH_RXFA_CFG
 *
 * bits 0  default 0 RXFA_SCH_EN
 *
 * bits 8  default 0 RXFA_SCH_REQ
 *
 * bits 16 default 0 RXFA_SCH_FORCE
 */

#ifndef ohp_core_reg_SCH_RXFA_CFG_write
#define ohp_core_reg_SCH_RXFA_CFG_write( b, h, value ) \
       _ohp_core_reg_SCH_RXFA_CFG_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_SCH_RXFA_CFG_write( LOG_CALLER_DEFN
                                                     ohp_core_buffer_t *b,
                                                     ohp_core_handle_t *h,
                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_SCH_RXFA_CFG_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_SCH_RXFA_CFG,
                        value);
}


#ifndef ohp_core_reg_SCH_RXFA_CFG_field_set
#define ohp_core_reg_SCH_RXFA_CFG_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_SCH_RXFA_CFG_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_SCH_RXFA_CFG_field_set( LOG_CALLER_DEFN
                                                         ohp_core_buffer_t *b,
                                                         ohp_core_handle_t *h,
                                                         UINT32 mask,
                                                         UINT32 ofs,
                                                         UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_SCH_RXFA_CFG_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_SCH_RXFA_CFG,
                        mask,
                        PMC_OHP_CORE_REG_SCH_RXFA_CFG_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_SCH_RXFA_CFG_read
#define ohp_core_reg_SCH_RXFA_CFG_read( b, h ) \
       _ohp_core_reg_SCH_RXFA_CFG_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_SCH_RXFA_CFG_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_SCH_RXFA_CFG);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_SCH_RXFA_CFG_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_SCH_RXFB_CFG
 *
 * Register: RXFB Extraction Scheduler Configuration
 * Offset: 0x00000008 SCH_RXFB_CFG
 *
 * bits 0  default 0 RXFB_SCH_EN
 *
 * bits 8  default 0 RXFB_SCH_REQ
 *
 * bits 16 default 0 RXFB_SCH_FORCE
 */

#ifndef ohp_core_reg_SCH_RXFB_CFG_write
#define ohp_core_reg_SCH_RXFB_CFG_write( b, h, value ) \
       _ohp_core_reg_SCH_RXFB_CFG_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_SCH_RXFB_CFG_write( LOG_CALLER_DEFN
                                                     ohp_core_buffer_t *b,
                                                     ohp_core_handle_t *h,
                                                     UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_SCH_RXFB_CFG_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_SCH_RXFB_CFG,
                        value);
}


#ifndef ohp_core_reg_SCH_RXFB_CFG_field_set
#define ohp_core_reg_SCH_RXFB_CFG_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_SCH_RXFB_CFG_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_SCH_RXFB_CFG_field_set( LOG_CALLER_DEFN
                                                         ohp_core_buffer_t *b,
                                                         ohp_core_handle_t *h,
                                                         UINT32 mask,
                                                         UINT32 ofs,
                                                         UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_SCH_RXFB_CFG_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_SCH_RXFB_CFG,
                        mask,
                        PMC_OHP_CORE_REG_SCH_RXFB_CFG_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_SCH_RXFB_CFG_read
#define ohp_core_reg_SCH_RXFB_CFG_read( b, h ) \
       _ohp_core_reg_SCH_RXFB_CFG_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_SCH_RXFB_CFG_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_SCH_RXFB_CFG);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_SCH_RXFB_CFG_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT_EN0
 *
 * Register: RXFA CFC Full Interrupt Enable 0
 * Offset: 0x00000674 RXFA_CFC_FULL_INT_EN0
 *
 * bits        31:0 default 0x00000000 RXFA_CFC_FULL_E
 * field_bits  31:0
 */

#ifndef ohp_core_reg_RXFA_CFC_FULL_INT_EN0_write
#define ohp_core_reg_RXFA_CFC_FULL_INT_EN0_write( b, h, value ) \
       _ohp_core_reg_RXFA_CFC_FULL_INT_EN0_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXFA_CFC_FULL_INT_EN0_write( LOG_CALLER_DEFN
                                                              ohp_core_buffer_t *b,
                                                              ohp_core_handle_t *h,
                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXFA_CFC_FULL_INT_EN0_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT_EN0,
                        value);
}


#ifndef ohp_core_reg_RXFA_CFC_FULL_INT_EN0_field_set
#define ohp_core_reg_RXFA_CFC_FULL_INT_EN0_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXFA_CFC_FULL_INT_EN0_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXFA_CFC_FULL_INT_EN0_field_set( LOG_CALLER_DEFN
                                                                  ohp_core_buffer_t *b,
                                                                  ohp_core_handle_t *h,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXFA_CFC_FULL_INT_EN0_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT_EN0,
                        mask,
                        PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT_EN0_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_RXFA_CFC_FULL_INT_EN0_read
#define ohp_core_reg_RXFA_CFC_FULL_INT_EN0_read( b, h ) \
       _ohp_core_reg_RXFA_CFC_FULL_INT_EN0_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXFA_CFC_FULL_INT_EN0_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT_EN0);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXFA_CFC_FULL_INT_EN0_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT_EN1
 *
 * Register: RXFA CFC Full Interrupt Enable 1
 * Offset: 0x00000678 RXFA_CFC_FULL_INT_EN1
 *
 * bits        31:0 default 0x00000000 RXFA_CFC_FULL_E
 * field_bits  63:32
 */

#ifndef ohp_core_reg_RXFA_CFC_FULL_INT_EN1_write
#define ohp_core_reg_RXFA_CFC_FULL_INT_EN1_write( b, h, value ) \
       _ohp_core_reg_RXFA_CFC_FULL_INT_EN1_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXFA_CFC_FULL_INT_EN1_write( LOG_CALLER_DEFN
                                                              ohp_core_buffer_t *b,
                                                              ohp_core_handle_t *h,
                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXFA_CFC_FULL_INT_EN1_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT_EN1,
                        value);
}


#ifndef ohp_core_reg_RXFA_CFC_FULL_INT_EN1_field_set
#define ohp_core_reg_RXFA_CFC_FULL_INT_EN1_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXFA_CFC_FULL_INT_EN1_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXFA_CFC_FULL_INT_EN1_field_set( LOG_CALLER_DEFN
                                                                  ohp_core_buffer_t *b,
                                                                  ohp_core_handle_t *h,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXFA_CFC_FULL_INT_EN1_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT_EN1,
                        mask,
                        PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT_EN1_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_RXFA_CFC_FULL_INT_EN1_read
#define ohp_core_reg_RXFA_CFC_FULL_INT_EN1_read( b, h ) \
       _ohp_core_reg_RXFA_CFC_FULL_INT_EN1_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXFA_CFC_FULL_INT_EN1_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT_EN1);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXFA_CFC_FULL_INT_EN1_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT_EN2
 *
 * Register: RXFA CFC Full Interrupt Enable 2
 * Offset: 0x0000067c RXFA_CFC_FULL_INT_EN2
 *
 * bits        31:0 default 0x00000000 RXFA_CFC_FULL_E
 * field_bits  95:64
 */

#ifndef ohp_core_reg_RXFA_CFC_FULL_INT_EN2_write
#define ohp_core_reg_RXFA_CFC_FULL_INT_EN2_write( b, h, value ) \
       _ohp_core_reg_RXFA_CFC_FULL_INT_EN2_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXFA_CFC_FULL_INT_EN2_write( LOG_CALLER_DEFN
                                                              ohp_core_buffer_t *b,
                                                              ohp_core_handle_t *h,
                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXFA_CFC_FULL_INT_EN2_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT_EN2,
                        value);
}


#ifndef ohp_core_reg_RXFA_CFC_FULL_INT_EN2_field_set
#define ohp_core_reg_RXFA_CFC_FULL_INT_EN2_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXFA_CFC_FULL_INT_EN2_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXFA_CFC_FULL_INT_EN2_field_set( LOG_CALLER_DEFN
                                                                  ohp_core_buffer_t *b,
                                                                  ohp_core_handle_t *h,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXFA_CFC_FULL_INT_EN2_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT_EN2,
                        mask,
                        PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT_EN2_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_RXFA_CFC_FULL_INT_EN2_read
#define ohp_core_reg_RXFA_CFC_FULL_INT_EN2_read( b, h ) \
       _ohp_core_reg_RXFA_CFC_FULL_INT_EN2_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXFA_CFC_FULL_INT_EN2_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT_EN2);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXFA_CFC_FULL_INT_EN2_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT_EN0
 *
 * Register: RXFB CFC Full Interrupt Enable 0
 * Offset: 0x0000068c RXFB_CFC_FULL_INT_EN0
 *
 * bits        31:0 default 0x00000000 RXFB_CFC_FULL_E
 * field_bits  31:0
 */

#ifndef ohp_core_reg_RXFB_CFC_FULL_INT_EN0_write
#define ohp_core_reg_RXFB_CFC_FULL_INT_EN0_write( b, h, value ) \
       _ohp_core_reg_RXFB_CFC_FULL_INT_EN0_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXFB_CFC_FULL_INT_EN0_write( LOG_CALLER_DEFN
                                                              ohp_core_buffer_t *b,
                                                              ohp_core_handle_t *h,
                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXFB_CFC_FULL_INT_EN0_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT_EN0,
                        value);
}


#ifndef ohp_core_reg_RXFB_CFC_FULL_INT_EN0_field_set
#define ohp_core_reg_RXFB_CFC_FULL_INT_EN0_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXFB_CFC_FULL_INT_EN0_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXFB_CFC_FULL_INT_EN0_field_set( LOG_CALLER_DEFN
                                                                  ohp_core_buffer_t *b,
                                                                  ohp_core_handle_t *h,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXFB_CFC_FULL_INT_EN0_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT_EN0,
                        mask,
                        PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT_EN0_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_RXFB_CFC_FULL_INT_EN0_read
#define ohp_core_reg_RXFB_CFC_FULL_INT_EN0_read( b, h ) \
       _ohp_core_reg_RXFB_CFC_FULL_INT_EN0_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXFB_CFC_FULL_INT_EN0_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT_EN0);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXFB_CFC_FULL_INT_EN0_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT_EN1
 *
 * Register: RXFB CFC Full Interrupt Enable 1
 * Offset: 0x00000690 RXFB_CFC_FULL_INT_EN1
 *
 * bits        31:0 default 0x00000000 RXFB_CFC_FULL_E
 * field_bits  63:32
 */

#ifndef ohp_core_reg_RXFB_CFC_FULL_INT_EN1_write
#define ohp_core_reg_RXFB_CFC_FULL_INT_EN1_write( b, h, value ) \
       _ohp_core_reg_RXFB_CFC_FULL_INT_EN1_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXFB_CFC_FULL_INT_EN1_write( LOG_CALLER_DEFN
                                                              ohp_core_buffer_t *b,
                                                              ohp_core_handle_t *h,
                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXFB_CFC_FULL_INT_EN1_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT_EN1,
                        value);
}


#ifndef ohp_core_reg_RXFB_CFC_FULL_INT_EN1_field_set
#define ohp_core_reg_RXFB_CFC_FULL_INT_EN1_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXFB_CFC_FULL_INT_EN1_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXFB_CFC_FULL_INT_EN1_field_set( LOG_CALLER_DEFN
                                                                  ohp_core_buffer_t *b,
                                                                  ohp_core_handle_t *h,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXFB_CFC_FULL_INT_EN1_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT_EN1,
                        mask,
                        PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT_EN1_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_RXFB_CFC_FULL_INT_EN1_read
#define ohp_core_reg_RXFB_CFC_FULL_INT_EN1_read( b, h ) \
       _ohp_core_reg_RXFB_CFC_FULL_INT_EN1_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXFB_CFC_FULL_INT_EN1_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT_EN1);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXFB_CFC_FULL_INT_EN1_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT_EN2
 *
 * Register: RXFB CFC Full Interrupt Enable 2
 * Offset: 0x00000694 RXFB_CFC_FULL_INT_EN2
 *
 * bits        31:0 default 0x00000000 RXFB_CFC_FULL_E
 * field_bits  95:64
 */

#ifndef ohp_core_reg_RXFB_CFC_FULL_INT_EN2_write
#define ohp_core_reg_RXFB_CFC_FULL_INT_EN2_write( b, h, value ) \
       _ohp_core_reg_RXFB_CFC_FULL_INT_EN2_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXFB_CFC_FULL_INT_EN2_write( LOG_CALLER_DEFN
                                                              ohp_core_buffer_t *b,
                                                              ohp_core_handle_t *h,
                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXFB_CFC_FULL_INT_EN2_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT_EN2,
                        value);
}


#ifndef ohp_core_reg_RXFB_CFC_FULL_INT_EN2_field_set
#define ohp_core_reg_RXFB_CFC_FULL_INT_EN2_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXFB_CFC_FULL_INT_EN2_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXFB_CFC_FULL_INT_EN2_field_set( LOG_CALLER_DEFN
                                                                  ohp_core_buffer_t *b,
                                                                  ohp_core_handle_t *h,
                                                                  UINT32 mask,
                                                                  UINT32 ofs,
                                                                  UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXFB_CFC_FULL_INT_EN2_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT_EN2,
                        mask,
                        PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT_EN2_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_RXFB_CFC_FULL_INT_EN2_read
#define ohp_core_reg_RXFB_CFC_FULL_INT_EN2_read( b, h ) \
       _ohp_core_reg_RXFB_CFC_FULL_INT_EN2_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXFB_CFC_FULL_INT_EN2_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT_EN2);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXFB_CFC_FULL_INT_EN2_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_RXFA_TXDLY_INT_EN0
 *
 * Register: RXFA TX Delay Error Interrupt Enable 0
 * Offset: 0x000006a4 RXFA_TXDLY_INT_EN0
 *
 * bits        31:0 default 0x00000000 RXFA_TXDLY_E
 * field_bits  31:0
 */

#ifndef ohp_core_reg_RXFA_TXDLY_INT_EN0_write
#define ohp_core_reg_RXFA_TXDLY_INT_EN0_write( b, h, value ) \
       _ohp_core_reg_RXFA_TXDLY_INT_EN0_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXFA_TXDLY_INT_EN0_write( LOG_CALLER_DEFN
                                                           ohp_core_buffer_t *b,
                                                           ohp_core_handle_t *h,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXFA_TXDLY_INT_EN0_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFA_TXDLY_INT_EN0,
                        value);
}


#ifndef ohp_core_reg_RXFA_TXDLY_INT_EN0_field_set
#define ohp_core_reg_RXFA_TXDLY_INT_EN0_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXFA_TXDLY_INT_EN0_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXFA_TXDLY_INT_EN0_field_set( LOG_CALLER_DEFN
                                                               ohp_core_buffer_t *b,
                                                               ohp_core_handle_t *h,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXFA_TXDLY_INT_EN0_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFA_TXDLY_INT_EN0,
                        mask,
                        PMC_OHP_CORE_REG_RXFA_TXDLY_INT_EN0_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_RXFA_TXDLY_INT_EN0_read
#define ohp_core_reg_RXFA_TXDLY_INT_EN0_read( b, h ) \
       _ohp_core_reg_RXFA_TXDLY_INT_EN0_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXFA_TXDLY_INT_EN0_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXFA_TXDLY_INT_EN0);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXFA_TXDLY_INT_EN0_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_RXFA_TXDLY_INT_EN1
 *
 * Register: RXFA TX Delay Error Interrupt Enable 1
 * Offset: 0x000006a8 RXFA_TXDLY_INT_EN1
 *
 * bits        31:0 default 0x00000000 RXFA_TXDLY_E
 * field_bits  63:32
 */

#ifndef ohp_core_reg_RXFA_TXDLY_INT_EN1_write
#define ohp_core_reg_RXFA_TXDLY_INT_EN1_write( b, h, value ) \
       _ohp_core_reg_RXFA_TXDLY_INT_EN1_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXFA_TXDLY_INT_EN1_write( LOG_CALLER_DEFN
                                                           ohp_core_buffer_t *b,
                                                           ohp_core_handle_t *h,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXFA_TXDLY_INT_EN1_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFA_TXDLY_INT_EN1,
                        value);
}


#ifndef ohp_core_reg_RXFA_TXDLY_INT_EN1_field_set
#define ohp_core_reg_RXFA_TXDLY_INT_EN1_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXFA_TXDLY_INT_EN1_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXFA_TXDLY_INT_EN1_field_set( LOG_CALLER_DEFN
                                                               ohp_core_buffer_t *b,
                                                               ohp_core_handle_t *h,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXFA_TXDLY_INT_EN1_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFA_TXDLY_INT_EN1,
                        mask,
                        PMC_OHP_CORE_REG_RXFA_TXDLY_INT_EN1_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_RXFA_TXDLY_INT_EN1_read
#define ohp_core_reg_RXFA_TXDLY_INT_EN1_read( b, h ) \
       _ohp_core_reg_RXFA_TXDLY_INT_EN1_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXFA_TXDLY_INT_EN1_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXFA_TXDLY_INT_EN1);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXFA_TXDLY_INT_EN1_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_RXFA_TXDLY_INT_EN2
 *
 * Register: RXFA TX Delay Error Interrupt Enable 2
 * Offset: 0x000006ac RXFA_TXDLY_INT_EN2
 *
 * bits        31:0 default 0x00000000 RXFA_TXDLY_E
 * field_bits  95:64
 */

#ifndef ohp_core_reg_RXFA_TXDLY_INT_EN2_write
#define ohp_core_reg_RXFA_TXDLY_INT_EN2_write( b, h, value ) \
       _ohp_core_reg_RXFA_TXDLY_INT_EN2_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXFA_TXDLY_INT_EN2_write( LOG_CALLER_DEFN
                                                           ohp_core_buffer_t *b,
                                                           ohp_core_handle_t *h,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXFA_TXDLY_INT_EN2_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFA_TXDLY_INT_EN2,
                        value);
}


#ifndef ohp_core_reg_RXFA_TXDLY_INT_EN2_field_set
#define ohp_core_reg_RXFA_TXDLY_INT_EN2_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXFA_TXDLY_INT_EN2_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXFA_TXDLY_INT_EN2_field_set( LOG_CALLER_DEFN
                                                               ohp_core_buffer_t *b,
                                                               ohp_core_handle_t *h,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXFA_TXDLY_INT_EN2_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFA_TXDLY_INT_EN2,
                        mask,
                        PMC_OHP_CORE_REG_RXFA_TXDLY_INT_EN2_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_RXFA_TXDLY_INT_EN2_read
#define ohp_core_reg_RXFA_TXDLY_INT_EN2_read( b, h ) \
       _ohp_core_reg_RXFA_TXDLY_INT_EN2_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXFA_TXDLY_INT_EN2_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXFA_TXDLY_INT_EN2);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXFA_TXDLY_INT_EN2_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_RXFB_TXDLY_INT_EN0
 *
 * Register: RXFB TX Delay Error Interrupt Enable 0
 * Offset: 0x000006bc RXFB_TXDLY_INT_EN0
 *
 * bits        31:0 default 0x00000000 RXFB_TXDLY_E
 * field_bits  31:0
 */

#ifndef ohp_core_reg_RXFB_TXDLY_INT_EN0_write
#define ohp_core_reg_RXFB_TXDLY_INT_EN0_write( b, h, value ) \
       _ohp_core_reg_RXFB_TXDLY_INT_EN0_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXFB_TXDLY_INT_EN0_write( LOG_CALLER_DEFN
                                                           ohp_core_buffer_t *b,
                                                           ohp_core_handle_t *h,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXFB_TXDLY_INT_EN0_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFB_TXDLY_INT_EN0,
                        value);
}


#ifndef ohp_core_reg_RXFB_TXDLY_INT_EN0_field_set
#define ohp_core_reg_RXFB_TXDLY_INT_EN0_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXFB_TXDLY_INT_EN0_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXFB_TXDLY_INT_EN0_field_set( LOG_CALLER_DEFN
                                                               ohp_core_buffer_t *b,
                                                               ohp_core_handle_t *h,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXFB_TXDLY_INT_EN0_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFB_TXDLY_INT_EN0,
                        mask,
                        PMC_OHP_CORE_REG_RXFB_TXDLY_INT_EN0_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_RXFB_TXDLY_INT_EN0_read
#define ohp_core_reg_RXFB_TXDLY_INT_EN0_read( b, h ) \
       _ohp_core_reg_RXFB_TXDLY_INT_EN0_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXFB_TXDLY_INT_EN0_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXFB_TXDLY_INT_EN0);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXFB_TXDLY_INT_EN0_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_RXFB_TXDLY_INT_EN1
 *
 * Register: RXFB TX Delay Error Interrupt Enable 1
 * Offset: 0x000006c0 RXFB_TXDLY_INT_EN1
 *
 * bits        31:0 default 0x00000000 RXFB_TXDLY_E
 * field_bits  63:32
 */

#ifndef ohp_core_reg_RXFB_TXDLY_INT_EN1_write
#define ohp_core_reg_RXFB_TXDLY_INT_EN1_write( b, h, value ) \
       _ohp_core_reg_RXFB_TXDLY_INT_EN1_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXFB_TXDLY_INT_EN1_write( LOG_CALLER_DEFN
                                                           ohp_core_buffer_t *b,
                                                           ohp_core_handle_t *h,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXFB_TXDLY_INT_EN1_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFB_TXDLY_INT_EN1,
                        value);
}


#ifndef ohp_core_reg_RXFB_TXDLY_INT_EN1_field_set
#define ohp_core_reg_RXFB_TXDLY_INT_EN1_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXFB_TXDLY_INT_EN1_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXFB_TXDLY_INT_EN1_field_set( LOG_CALLER_DEFN
                                                               ohp_core_buffer_t *b,
                                                               ohp_core_handle_t *h,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXFB_TXDLY_INT_EN1_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFB_TXDLY_INT_EN1,
                        mask,
                        PMC_OHP_CORE_REG_RXFB_TXDLY_INT_EN1_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_RXFB_TXDLY_INT_EN1_read
#define ohp_core_reg_RXFB_TXDLY_INT_EN1_read( b, h ) \
       _ohp_core_reg_RXFB_TXDLY_INT_EN1_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXFB_TXDLY_INT_EN1_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXFB_TXDLY_INT_EN1);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXFB_TXDLY_INT_EN1_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_RXFB_TXDLY_INT_EN2
 *
 * Register: RXFB TX Delay Error Interrupt Enable 2
 * Offset: 0x000006c4 RXFB_TXDLY_INT_EN2
 *
 * bits        31:0 default 0x00000000 RXFB_TXDLY_E
 * field_bits  95:64
 */

#ifndef ohp_core_reg_RXFB_TXDLY_INT_EN2_write
#define ohp_core_reg_RXFB_TXDLY_INT_EN2_write( b, h, value ) \
       _ohp_core_reg_RXFB_TXDLY_INT_EN2_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXFB_TXDLY_INT_EN2_write( LOG_CALLER_DEFN
                                                           ohp_core_buffer_t *b,
                                                           ohp_core_handle_t *h,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXFB_TXDLY_INT_EN2_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFB_TXDLY_INT_EN2,
                        value);
}


#ifndef ohp_core_reg_RXFB_TXDLY_INT_EN2_field_set
#define ohp_core_reg_RXFB_TXDLY_INT_EN2_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXFB_TXDLY_INT_EN2_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXFB_TXDLY_INT_EN2_field_set( LOG_CALLER_DEFN
                                                               ohp_core_buffer_t *b,
                                                               ohp_core_handle_t *h,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXFB_TXDLY_INT_EN2_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFB_TXDLY_INT_EN2,
                        mask,
                        PMC_OHP_CORE_REG_RXFB_TXDLY_INT_EN2_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_RXFB_TXDLY_INT_EN2_read
#define ohp_core_reg_RXFB_TXDLY_INT_EN2_read( b, h ) \
       _ohp_core_reg_RXFB_TXDLY_INT_EN2_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXFB_TXDLY_INT_EN2_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXFB_TXDLY_INT_EN2);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXFB_TXDLY_INT_EN2_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_RXMAC_UID_FAIL_EN
 *
 * Register: RXMAC UID Mismatch Interrupt Enable
 * Offset: 0x000006d4 RXMAC_UID_FAIL_EN
 *
 * bits 0 default 0 RXMAC_UID_FAIL_E
 */

#ifndef ohp_core_reg_RXMAC_UID_FAIL_EN_write
#define ohp_core_reg_RXMAC_UID_FAIL_EN_write( b, h, value ) \
       _ohp_core_reg_RXMAC_UID_FAIL_EN_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXMAC_UID_FAIL_EN_write( LOG_CALLER_DEFN
                                                          ohp_core_buffer_t *b,
                                                          ohp_core_handle_t *h,
                                                          UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXMAC_UID_FAIL_EN_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXMAC_UID_FAIL_EN,
                        value);
}


#ifndef ohp_core_reg_RXMAC_UID_FAIL_EN_field_set
#define ohp_core_reg_RXMAC_UID_FAIL_EN_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXMAC_UID_FAIL_EN_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXMAC_UID_FAIL_EN_field_set( LOG_CALLER_DEFN
                                                              ohp_core_buffer_t *b,
                                                              ohp_core_handle_t *h,
                                                              UINT32 mask,
                                                              UINT32 ofs,
                                                              UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXMAC_UID_FAIL_EN_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXMAC_UID_FAIL_EN,
                        mask,
                        PMC_OHP_CORE_REG_RXMAC_UID_FAIL_EN_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_RXMAC_UID_FAIL_EN_read
#define ohp_core_reg_RXMAC_UID_FAIL_EN_read( b, h ) \
       _ohp_core_reg_RXMAC_UID_FAIL_EN_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXMAC_UID_FAIL_EN_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXMAC_UID_FAIL_EN);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXMAC_UID_FAIL_EN_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_RXMAC_FRMRID_FAIL_EN
 *
 * Register: RXMAC FRMR ID Mismatch Interrupt Enable
 * Offset: 0x000006d8 RXMAC_FRMRID_FAIL_EN
 *
 * bits 0 default 0 RXMAC_FRMRID_FAIL_E
 */

#ifndef ohp_core_reg_RXMAC_FRMRID_FAIL_EN_write
#define ohp_core_reg_RXMAC_FRMRID_FAIL_EN_write( b, h, value ) \
       _ohp_core_reg_RXMAC_FRMRID_FAIL_EN_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXMAC_FRMRID_FAIL_EN_write( LOG_CALLER_DEFN
                                                             ohp_core_buffer_t *b,
                                                             ohp_core_handle_t *h,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXMAC_FRMRID_FAIL_EN_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXMAC_FRMRID_FAIL_EN,
                        value);
}


#ifndef ohp_core_reg_RXMAC_FRMRID_FAIL_EN_field_set
#define ohp_core_reg_RXMAC_FRMRID_FAIL_EN_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXMAC_FRMRID_FAIL_EN_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXMAC_FRMRID_FAIL_EN_field_set( LOG_CALLER_DEFN
                                                                 ohp_core_buffer_t *b,
                                                                 ohp_core_handle_t *h,
                                                                 UINT32 mask,
                                                                 UINT32 ofs,
                                                                 UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXMAC_FRMRID_FAIL_EN_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXMAC_FRMRID_FAIL_EN,
                        mask,
                        PMC_OHP_CORE_REG_RXMAC_FRMRID_FAIL_EN_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_RXMAC_FRMRID_FAIL_EN_read
#define ohp_core_reg_RXMAC_FRMRID_FAIL_EN_read( b, h ) \
       _ohp_core_reg_RXMAC_FRMRID_FAIL_EN_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXMAC_FRMRID_FAIL_EN_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXMAC_FRMRID_FAIL_EN);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXMAC_FRMRID_FAIL_EN_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_RXMAC_CHID_FAIL_EN
 *
 * Register: RXMAC CH ID Out of Range Interrupt Enable
 * Offset: 0x000006dc RXMAC_CHID_FAIL_EN
 *
 * bits 0 default 0 RXMAC_CHID_FAIL_E
 */

#ifndef ohp_core_reg_RXMAC_CHID_FAIL_EN_write
#define ohp_core_reg_RXMAC_CHID_FAIL_EN_write( b, h, value ) \
       _ohp_core_reg_RXMAC_CHID_FAIL_EN_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXMAC_CHID_FAIL_EN_write( LOG_CALLER_DEFN
                                                           ohp_core_buffer_t *b,
                                                           ohp_core_handle_t *h,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXMAC_CHID_FAIL_EN_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXMAC_CHID_FAIL_EN,
                        value);
}


#ifndef ohp_core_reg_RXMAC_CHID_FAIL_EN_field_set
#define ohp_core_reg_RXMAC_CHID_FAIL_EN_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXMAC_CHID_FAIL_EN_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXMAC_CHID_FAIL_EN_field_set( LOG_CALLER_DEFN
                                                               ohp_core_buffer_t *b,
                                                               ohp_core_handle_t *h,
                                                               UINT32 mask,
                                                               UINT32 ofs,
                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXMAC_CHID_FAIL_EN_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXMAC_CHID_FAIL_EN,
                        mask,
                        PMC_OHP_CORE_REG_RXMAC_CHID_FAIL_EN_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_RXMAC_CHID_FAIL_EN_read
#define ohp_core_reg_RXMAC_CHID_FAIL_EN_read( b, h ) \
       _ohp_core_reg_RXMAC_CHID_FAIL_EN_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXMAC_CHID_FAIL_EN_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXMAC_CHID_FAIL_EN);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXMAC_CHID_FAIL_EN_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_RXMAC_PKTERR_INT_EN
 *
 * Register: RXMAC Packet Error Interrupt Enable
 * Offset: 0x000006e0 RXMAC_PKTERR_INT_EN
 *
 * bits 0 default 0 RXMAC_PKTERR_E
 */

#ifndef ohp_core_reg_RXMAC_PKTERR_INT_EN_write
#define ohp_core_reg_RXMAC_PKTERR_INT_EN_write( b, h, value ) \
       _ohp_core_reg_RXMAC_PKTERR_INT_EN_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXMAC_PKTERR_INT_EN_write( LOG_CALLER_DEFN
                                                            ohp_core_buffer_t *b,
                                                            ohp_core_handle_t *h,
                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXMAC_PKTERR_INT_EN_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXMAC_PKTERR_INT_EN,
                        value);
}


#ifndef ohp_core_reg_RXMAC_PKTERR_INT_EN_field_set
#define ohp_core_reg_RXMAC_PKTERR_INT_EN_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXMAC_PKTERR_INT_EN_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXMAC_PKTERR_INT_EN_field_set( LOG_CALLER_DEFN
                                                                ohp_core_buffer_t *b,
                                                                ohp_core_handle_t *h,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXMAC_PKTERR_INT_EN_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXMAC_PKTERR_INT_EN,
                        mask,
                        PMC_OHP_CORE_REG_RXMAC_PKTERR_INT_EN_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_RXMAC_PKTERR_INT_EN_read
#define ohp_core_reg_RXMAC_PKTERR_INT_EN_read( b, h ) \
       _ohp_core_reg_RXMAC_PKTERR_INT_EN_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXMAC_PKTERR_INT_EN_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXMAC_PKTERR_INT_EN);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXMAC_PKTERR_INT_EN_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_RXMAC_RXFIFO_ERR_EN
 *
 * Register: RXMAC RX FIFO Error Interrupt Enable
 * Offset: 0x000006e4 RXMAC_RXFIFO_ERR_EN
 *
 * bits 0 default 0 RXMAC_FIFO_ERR_E
 */

#ifndef ohp_core_reg_RXMAC_RXFIFO_ERR_EN_write
#define ohp_core_reg_RXMAC_RXFIFO_ERR_EN_write( b, h, value ) \
       _ohp_core_reg_RXMAC_RXFIFO_ERR_EN_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXMAC_RXFIFO_ERR_EN_write( LOG_CALLER_DEFN
                                                            ohp_core_buffer_t *b,
                                                            ohp_core_handle_t *h,
                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXMAC_RXFIFO_ERR_EN_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXMAC_RXFIFO_ERR_EN,
                        value);
}


#ifndef ohp_core_reg_RXMAC_RXFIFO_ERR_EN_field_set
#define ohp_core_reg_RXMAC_RXFIFO_ERR_EN_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXMAC_RXFIFO_ERR_EN_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXMAC_RXFIFO_ERR_EN_field_set( LOG_CALLER_DEFN
                                                                ohp_core_buffer_t *b,
                                                                ohp_core_handle_t *h,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXMAC_RXFIFO_ERR_EN_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXMAC_RXFIFO_ERR_EN,
                        mask,
                        PMC_OHP_CORE_REG_RXMAC_RXFIFO_ERR_EN_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_RXMAC_RXFIFO_ERR_EN_read
#define ohp_core_reg_RXMAC_RXFIFO_ERR_EN_read( b, h ) \
       _ohp_core_reg_RXMAC_RXFIFO_ERR_EN_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXMAC_RXFIFO_ERR_EN_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXMAC_RXFIFO_ERR_EN);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXMAC_RXFIFO_ERR_EN_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT0
 *
 * Register: RXFA CFC FIFO Full Interrupt 0
 * Offset: 0x00000680 RXFA_CFC_FULL_INT0
 *
 * bits        31:0 default 0x00000000 RXFA_CFC_FULL_I
 * field_bits  31:0
 * attribute: int_edge=rising
 * attribute: clk=ohp_clk
 */

#ifndef ohp_core_reg_RXFA_CFC_FULL_INT0_write
#define ohp_core_reg_RXFA_CFC_FULL_INT0_write( b, h, value ) \
       _ohp_core_reg_RXFA_CFC_FULL_INT0_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXFA_CFC_FULL_INT0_write( LOG_CALLER_DEFN
                                                           ohp_core_buffer_t *b,
                                                           ohp_core_handle_t *h,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXFA_CFC_FULL_INT0_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT0,
                        value);
}


#ifndef ohp_core_reg_RXFA_CFC_FULL_INT0_action_on_write_field_set
#define ohp_core_reg_RXFA_CFC_FULL_INT0_action_on_write_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXFA_CFC_FULL_INT0_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXFA_CFC_FULL_INT0_action_on_write_field_set( LOG_CALLER_DEFN
                                                                               ohp_core_buffer_t *b,
                                                                               ohp_core_handle_t *h,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXFA_CFC_FULL_INT0_action_on_write_field_set", mask, ofs, value );
    ohp_core_action_on_write_field_set( b,
                                        h,
                                        MEM_TYPE_STATUS,
                                        PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT0,
                                        mask,
                                        ofs,
                                        value);

}


#ifndef ohp_core_reg_RXFA_CFC_FULL_INT0_read
#define ohp_core_reg_RXFA_CFC_FULL_INT0_read( b, h ) \
       _ohp_core_reg_RXFA_CFC_FULL_INT0_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXFA_CFC_FULL_INT0_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT0);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXFA_CFC_FULL_INT0_read", reg_value);
    return reg_value;
}

#ifndef ohp_core_reg_RXFA_CFC_FULL_INT0_poll_bit
#define ohp_core_reg_RXFA_CFC_FULL_INT0_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _ohp_core_reg_RXFA_CFC_FULL_INT0_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _ohp_core_reg_RXFA_CFC_FULL_INT0_poll_bit( LOG_CALLER_DEFN
                                                                   ohp_core_buffer_t *b,
                                                                   ohp_core_handle_t *h,
                                                                   UINT32 mask,
                                                                   UINT32 value,
                                                                   UINT32 max_count,
                                                                   UINT32 *num_failed_polls,
                                                                   UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "ohp_core_reg_RXFA_CFC_FULL_INT0_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return ohp_core_poll_bit( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT0,
                              mask,
                              value,
                              max_count,
                              num_failed_polls,
                              delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT1
 *
 * Register: RXFA CFC FIFO Full Interrupt 1
 * Offset: 0x00000684 RXFA_CFC_FULL_INT1
 *
 * bits        31:0 default 0x00000000 RXFA_CFC_FULL_I
 * field_bits  63:32
 * attribute: int_edge=rising
 * attribute: clk=ohp_clk
 */

#ifndef ohp_core_reg_RXFA_CFC_FULL_INT1_write
#define ohp_core_reg_RXFA_CFC_FULL_INT1_write( b, h, value ) \
       _ohp_core_reg_RXFA_CFC_FULL_INT1_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXFA_CFC_FULL_INT1_write( LOG_CALLER_DEFN
                                                           ohp_core_buffer_t *b,
                                                           ohp_core_handle_t *h,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXFA_CFC_FULL_INT1_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT1,
                        value);
}


#ifndef ohp_core_reg_RXFA_CFC_FULL_INT1_action_on_write_field_set
#define ohp_core_reg_RXFA_CFC_FULL_INT1_action_on_write_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXFA_CFC_FULL_INT1_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXFA_CFC_FULL_INT1_action_on_write_field_set( LOG_CALLER_DEFN
                                                                               ohp_core_buffer_t *b,
                                                                               ohp_core_handle_t *h,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXFA_CFC_FULL_INT1_action_on_write_field_set", mask, ofs, value );
    ohp_core_action_on_write_field_set( b,
                                        h,
                                        MEM_TYPE_STATUS,
                                        PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT1,
                                        mask,
                                        ofs,
                                        value);

}


#ifndef ohp_core_reg_RXFA_CFC_FULL_INT1_read
#define ohp_core_reg_RXFA_CFC_FULL_INT1_read( b, h ) \
       _ohp_core_reg_RXFA_CFC_FULL_INT1_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXFA_CFC_FULL_INT1_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT1);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXFA_CFC_FULL_INT1_read", reg_value);
    return reg_value;
}

#ifndef ohp_core_reg_RXFA_CFC_FULL_INT1_poll_bit
#define ohp_core_reg_RXFA_CFC_FULL_INT1_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _ohp_core_reg_RXFA_CFC_FULL_INT1_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _ohp_core_reg_RXFA_CFC_FULL_INT1_poll_bit( LOG_CALLER_DEFN
                                                                   ohp_core_buffer_t *b,
                                                                   ohp_core_handle_t *h,
                                                                   UINT32 mask,
                                                                   UINT32 value,
                                                                   UINT32 max_count,
                                                                   UINT32 *num_failed_polls,
                                                                   UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "ohp_core_reg_RXFA_CFC_FULL_INT1_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return ohp_core_poll_bit( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT1,
                              mask,
                              value,
                              max_count,
                              num_failed_polls,
                              delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT2
 *
 * Register: RXFA CFC FIFO Full Interrupt 2
 * Offset: 0x00000688 RXFA_CFC_FULL_INT2
 *
 * bits        31:0 default 0x00000000 RXFA_CFC_FULL_I
 * field_bits  95:64
 * attribute: int_edge=rising
 * attribute: clk=ohp_clk
 */

#ifndef ohp_core_reg_RXFA_CFC_FULL_INT2_write
#define ohp_core_reg_RXFA_CFC_FULL_INT2_write( b, h, value ) \
       _ohp_core_reg_RXFA_CFC_FULL_INT2_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXFA_CFC_FULL_INT2_write( LOG_CALLER_DEFN
                                                           ohp_core_buffer_t *b,
                                                           ohp_core_handle_t *h,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXFA_CFC_FULL_INT2_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT2,
                        value);
}


#ifndef ohp_core_reg_RXFA_CFC_FULL_INT2_action_on_write_field_set
#define ohp_core_reg_RXFA_CFC_FULL_INT2_action_on_write_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXFA_CFC_FULL_INT2_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXFA_CFC_FULL_INT2_action_on_write_field_set( LOG_CALLER_DEFN
                                                                               ohp_core_buffer_t *b,
                                                                               ohp_core_handle_t *h,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXFA_CFC_FULL_INT2_action_on_write_field_set", mask, ofs, value );
    ohp_core_action_on_write_field_set( b,
                                        h,
                                        MEM_TYPE_STATUS,
                                        PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT2,
                                        mask,
                                        ofs,
                                        value);

}


#ifndef ohp_core_reg_RXFA_CFC_FULL_INT2_read
#define ohp_core_reg_RXFA_CFC_FULL_INT2_read( b, h ) \
       _ohp_core_reg_RXFA_CFC_FULL_INT2_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXFA_CFC_FULL_INT2_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT2);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXFA_CFC_FULL_INT2_read", reg_value);
    return reg_value;
}

#ifndef ohp_core_reg_RXFA_CFC_FULL_INT2_poll_bit
#define ohp_core_reg_RXFA_CFC_FULL_INT2_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _ohp_core_reg_RXFA_CFC_FULL_INT2_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _ohp_core_reg_RXFA_CFC_FULL_INT2_poll_bit( LOG_CALLER_DEFN
                                                                   ohp_core_buffer_t *b,
                                                                   ohp_core_handle_t *h,
                                                                   UINT32 mask,
                                                                   UINT32 value,
                                                                   UINT32 max_count,
                                                                   UINT32 *num_failed_polls,
                                                                   UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "ohp_core_reg_RXFA_CFC_FULL_INT2_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return ohp_core_poll_bit( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT2,
                              mask,
                              value,
                              max_count,
                              num_failed_polls,
                              delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT0
 *
 * Register: RXFB CFC FIFO Full Interrupt 0
 * Offset: 0x00000698 RXFB_CFC_FULL_INT0
 *
 * bits        31:0 default 0x00000000 RXFB_CFC_FULL_I
 * field_bits  31:0
 * attribute: int_edge=rising
 * attribute: clk=ohp_clk
 */

#ifndef ohp_core_reg_RXFB_CFC_FULL_INT0_write
#define ohp_core_reg_RXFB_CFC_FULL_INT0_write( b, h, value ) \
       _ohp_core_reg_RXFB_CFC_FULL_INT0_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXFB_CFC_FULL_INT0_write( LOG_CALLER_DEFN
                                                           ohp_core_buffer_t *b,
                                                           ohp_core_handle_t *h,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXFB_CFC_FULL_INT0_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT0,
                        value);
}


#ifndef ohp_core_reg_RXFB_CFC_FULL_INT0_action_on_write_field_set
#define ohp_core_reg_RXFB_CFC_FULL_INT0_action_on_write_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXFB_CFC_FULL_INT0_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXFB_CFC_FULL_INT0_action_on_write_field_set( LOG_CALLER_DEFN
                                                                               ohp_core_buffer_t *b,
                                                                               ohp_core_handle_t *h,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXFB_CFC_FULL_INT0_action_on_write_field_set", mask, ofs, value );
    ohp_core_action_on_write_field_set( b,
                                        h,
                                        MEM_TYPE_STATUS,
                                        PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT0,
                                        mask,
                                        ofs,
                                        value);

}


#ifndef ohp_core_reg_RXFB_CFC_FULL_INT0_read
#define ohp_core_reg_RXFB_CFC_FULL_INT0_read( b, h ) \
       _ohp_core_reg_RXFB_CFC_FULL_INT0_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXFB_CFC_FULL_INT0_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT0);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXFB_CFC_FULL_INT0_read", reg_value);
    return reg_value;
}

#ifndef ohp_core_reg_RXFB_CFC_FULL_INT0_poll_bit
#define ohp_core_reg_RXFB_CFC_FULL_INT0_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _ohp_core_reg_RXFB_CFC_FULL_INT0_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _ohp_core_reg_RXFB_CFC_FULL_INT0_poll_bit( LOG_CALLER_DEFN
                                                                   ohp_core_buffer_t *b,
                                                                   ohp_core_handle_t *h,
                                                                   UINT32 mask,
                                                                   UINT32 value,
                                                                   UINT32 max_count,
                                                                   UINT32 *num_failed_polls,
                                                                   UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "ohp_core_reg_RXFB_CFC_FULL_INT0_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return ohp_core_poll_bit( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT0,
                              mask,
                              value,
                              max_count,
                              num_failed_polls,
                              delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT1
 *
 * Register: RXFB CFC FIFO Full Interrupt 1
 * Offset: 0x0000069c RXFB_CFC_FULL_INT1
 *
 * bits        31:0 default 0x00000000 RXFB_CFC_FULL_I
 * field_bits  63:32
 * attribute: int_edge=rising
 * attribute: clk=ohp_clk
 */

#ifndef ohp_core_reg_RXFB_CFC_FULL_INT1_write
#define ohp_core_reg_RXFB_CFC_FULL_INT1_write( b, h, value ) \
       _ohp_core_reg_RXFB_CFC_FULL_INT1_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXFB_CFC_FULL_INT1_write( LOG_CALLER_DEFN
                                                           ohp_core_buffer_t *b,
                                                           ohp_core_handle_t *h,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXFB_CFC_FULL_INT1_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT1,
                        value);
}


#ifndef ohp_core_reg_RXFB_CFC_FULL_INT1_action_on_write_field_set
#define ohp_core_reg_RXFB_CFC_FULL_INT1_action_on_write_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXFB_CFC_FULL_INT1_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXFB_CFC_FULL_INT1_action_on_write_field_set( LOG_CALLER_DEFN
                                                                               ohp_core_buffer_t *b,
                                                                               ohp_core_handle_t *h,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXFB_CFC_FULL_INT1_action_on_write_field_set", mask, ofs, value );
    ohp_core_action_on_write_field_set( b,
                                        h,
                                        MEM_TYPE_STATUS,
                                        PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT1,
                                        mask,
                                        ofs,
                                        value);

}


#ifndef ohp_core_reg_RXFB_CFC_FULL_INT1_read
#define ohp_core_reg_RXFB_CFC_FULL_INT1_read( b, h ) \
       _ohp_core_reg_RXFB_CFC_FULL_INT1_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXFB_CFC_FULL_INT1_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT1);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXFB_CFC_FULL_INT1_read", reg_value);
    return reg_value;
}

#ifndef ohp_core_reg_RXFB_CFC_FULL_INT1_poll_bit
#define ohp_core_reg_RXFB_CFC_FULL_INT1_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _ohp_core_reg_RXFB_CFC_FULL_INT1_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _ohp_core_reg_RXFB_CFC_FULL_INT1_poll_bit( LOG_CALLER_DEFN
                                                                   ohp_core_buffer_t *b,
                                                                   ohp_core_handle_t *h,
                                                                   UINT32 mask,
                                                                   UINT32 value,
                                                                   UINT32 max_count,
                                                                   UINT32 *num_failed_polls,
                                                                   UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "ohp_core_reg_RXFB_CFC_FULL_INT1_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return ohp_core_poll_bit( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT1,
                              mask,
                              value,
                              max_count,
                              num_failed_polls,
                              delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT2
 *
 * Register: RXFB CFC FIFO Full Interrupt 2
 * Offset: 0x000006a0 RXFB_CFC_FULL_INT2
 *
 * bits        31:0 default 0x00000000 RXFB_CFC_FULL_I
 * field_bits  95:64
 * attribute: int_edge=rising
 * attribute: clk=ohp_clk
 */

#ifndef ohp_core_reg_RXFB_CFC_FULL_INT2_write
#define ohp_core_reg_RXFB_CFC_FULL_INT2_write( b, h, value ) \
       _ohp_core_reg_RXFB_CFC_FULL_INT2_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXFB_CFC_FULL_INT2_write( LOG_CALLER_DEFN
                                                           ohp_core_buffer_t *b,
                                                           ohp_core_handle_t *h,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXFB_CFC_FULL_INT2_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT2,
                        value);
}


#ifndef ohp_core_reg_RXFB_CFC_FULL_INT2_action_on_write_field_set
#define ohp_core_reg_RXFB_CFC_FULL_INT2_action_on_write_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXFB_CFC_FULL_INT2_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXFB_CFC_FULL_INT2_action_on_write_field_set( LOG_CALLER_DEFN
                                                                               ohp_core_buffer_t *b,
                                                                               ohp_core_handle_t *h,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXFB_CFC_FULL_INT2_action_on_write_field_set", mask, ofs, value );
    ohp_core_action_on_write_field_set( b,
                                        h,
                                        MEM_TYPE_STATUS,
                                        PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT2,
                                        mask,
                                        ofs,
                                        value);

}


#ifndef ohp_core_reg_RXFB_CFC_FULL_INT2_read
#define ohp_core_reg_RXFB_CFC_FULL_INT2_read( b, h ) \
       _ohp_core_reg_RXFB_CFC_FULL_INT2_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXFB_CFC_FULL_INT2_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT2);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXFB_CFC_FULL_INT2_read", reg_value);
    return reg_value;
}

#ifndef ohp_core_reg_RXFB_CFC_FULL_INT2_poll_bit
#define ohp_core_reg_RXFB_CFC_FULL_INT2_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _ohp_core_reg_RXFB_CFC_FULL_INT2_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _ohp_core_reg_RXFB_CFC_FULL_INT2_poll_bit( LOG_CALLER_DEFN
                                                                   ohp_core_buffer_t *b,
                                                                   ohp_core_handle_t *h,
                                                                   UINT32 mask,
                                                                   UINT32 value,
                                                                   UINT32 max_count,
                                                                   UINT32 *num_failed_polls,
                                                                   UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "ohp_core_reg_RXFB_CFC_FULL_INT2_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return ohp_core_poll_bit( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT2,
                              mask,
                              value,
                              max_count,
                              num_failed_polls,
                              delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_OHP_CORE_REG_RXFA_TXDLY_INT0
 *
 * Register: RXFA Data TX Delay Interrupt 0
 * Offset: 0x000006b0 RXFA_TXDLY_INT0
 *
 * bits        31:0 default 0x00000000 RXFA_TXDLY_I
 * field_bits  31:0
 * attribute: int_edge=rising
 * attribute: clk=ohp_clk
 */

#ifndef ohp_core_reg_RXFA_TXDLY_INT0_write
#define ohp_core_reg_RXFA_TXDLY_INT0_write( b, h, value ) \
       _ohp_core_reg_RXFA_TXDLY_INT0_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXFA_TXDLY_INT0_write( LOG_CALLER_DEFN
                                                        ohp_core_buffer_t *b,
                                                        ohp_core_handle_t *h,
                                                        UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXFA_TXDLY_INT0_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFA_TXDLY_INT0,
                        value);
}


#ifndef ohp_core_reg_RXFA_TXDLY_INT0_action_on_write_field_set
#define ohp_core_reg_RXFA_TXDLY_INT0_action_on_write_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXFA_TXDLY_INT0_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXFA_TXDLY_INT0_action_on_write_field_set( LOG_CALLER_DEFN
                                                                            ohp_core_buffer_t *b,
                                                                            ohp_core_handle_t *h,
                                                                            UINT32 mask,
                                                                            UINT32 ofs,
                                                                            UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXFA_TXDLY_INT0_action_on_write_field_set", mask, ofs, value );
    ohp_core_action_on_write_field_set( b,
                                        h,
                                        MEM_TYPE_STATUS,
                                        PMC_OHP_CORE_REG_RXFA_TXDLY_INT0,
                                        mask,
                                        ofs,
                                        value);

}


#ifndef ohp_core_reg_RXFA_TXDLY_INT0_read
#define ohp_core_reg_RXFA_TXDLY_INT0_read( b, h ) \
       _ohp_core_reg_RXFA_TXDLY_INT0_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXFA_TXDLY_INT0_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXFA_TXDLY_INT0);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXFA_TXDLY_INT0_read", reg_value);
    return reg_value;
}

#ifndef ohp_core_reg_RXFA_TXDLY_INT0_poll_bit
#define ohp_core_reg_RXFA_TXDLY_INT0_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _ohp_core_reg_RXFA_TXDLY_INT0_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _ohp_core_reg_RXFA_TXDLY_INT0_poll_bit( LOG_CALLER_DEFN
                                                                ohp_core_buffer_t *b,
                                                                ohp_core_handle_t *h,
                                                                UINT32 mask,
                                                                UINT32 value,
                                                                UINT32 max_count,
                                                                UINT32 *num_failed_polls,
                                                                UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "ohp_core_reg_RXFA_TXDLY_INT0_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return ohp_core_poll_bit( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_OHP_CORE_REG_RXFA_TXDLY_INT0,
                              mask,
                              value,
                              max_count,
                              num_failed_polls,
                              delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_OHP_CORE_REG_RXFA_TXDLY_INT1
 *
 * Register: RXFA Data TX Delay Interrupt 1
 * Offset: 0x000006b4 RXFA_TXDLY_INT1
 *
 * bits        31:0 default 0x00000000 RXFA_TXDLY_I
 * field_bits  63:32
 * attribute: int_edge=rising
 * attribute: clk=ohp_clk
 */

#ifndef ohp_core_reg_RXFA_TXDLY_INT1_write
#define ohp_core_reg_RXFA_TXDLY_INT1_write( b, h, value ) \
       _ohp_core_reg_RXFA_TXDLY_INT1_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXFA_TXDLY_INT1_write( LOG_CALLER_DEFN
                                                        ohp_core_buffer_t *b,
                                                        ohp_core_handle_t *h,
                                                        UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXFA_TXDLY_INT1_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFA_TXDLY_INT1,
                        value);
}


#ifndef ohp_core_reg_RXFA_TXDLY_INT1_action_on_write_field_set
#define ohp_core_reg_RXFA_TXDLY_INT1_action_on_write_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXFA_TXDLY_INT1_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXFA_TXDLY_INT1_action_on_write_field_set( LOG_CALLER_DEFN
                                                                            ohp_core_buffer_t *b,
                                                                            ohp_core_handle_t *h,
                                                                            UINT32 mask,
                                                                            UINT32 ofs,
                                                                            UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXFA_TXDLY_INT1_action_on_write_field_set", mask, ofs, value );
    ohp_core_action_on_write_field_set( b,
                                        h,
                                        MEM_TYPE_STATUS,
                                        PMC_OHP_CORE_REG_RXFA_TXDLY_INT1,
                                        mask,
                                        ofs,
                                        value);

}


#ifndef ohp_core_reg_RXFA_TXDLY_INT1_read
#define ohp_core_reg_RXFA_TXDLY_INT1_read( b, h ) \
       _ohp_core_reg_RXFA_TXDLY_INT1_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXFA_TXDLY_INT1_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXFA_TXDLY_INT1);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXFA_TXDLY_INT1_read", reg_value);
    return reg_value;
}

#ifndef ohp_core_reg_RXFA_TXDLY_INT1_poll_bit
#define ohp_core_reg_RXFA_TXDLY_INT1_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _ohp_core_reg_RXFA_TXDLY_INT1_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _ohp_core_reg_RXFA_TXDLY_INT1_poll_bit( LOG_CALLER_DEFN
                                                                ohp_core_buffer_t *b,
                                                                ohp_core_handle_t *h,
                                                                UINT32 mask,
                                                                UINT32 value,
                                                                UINT32 max_count,
                                                                UINT32 *num_failed_polls,
                                                                UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "ohp_core_reg_RXFA_TXDLY_INT1_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return ohp_core_poll_bit( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_OHP_CORE_REG_RXFA_TXDLY_INT1,
                              mask,
                              value,
                              max_count,
                              num_failed_polls,
                              delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_OHP_CORE_REG_RXFA_TXDLY_INT2
 *
 * Register: RXFA Data TX Delay Interrupt 2
 * Offset: 0x000006b8 RXFA_TXDLY_INT2
 *
 * bits        31:0 default 0x00000000 RXFA_TXDLY_I
 * field_bits  95:64
 * attribute: int_edge=rising
 * attribute: clk=ohp_clk
 */

#ifndef ohp_core_reg_RXFA_TXDLY_INT2_write
#define ohp_core_reg_RXFA_TXDLY_INT2_write( b, h, value ) \
       _ohp_core_reg_RXFA_TXDLY_INT2_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXFA_TXDLY_INT2_write( LOG_CALLER_DEFN
                                                        ohp_core_buffer_t *b,
                                                        ohp_core_handle_t *h,
                                                        UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXFA_TXDLY_INT2_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFA_TXDLY_INT2,
                        value);
}


#ifndef ohp_core_reg_RXFA_TXDLY_INT2_action_on_write_field_set
#define ohp_core_reg_RXFA_TXDLY_INT2_action_on_write_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXFA_TXDLY_INT2_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXFA_TXDLY_INT2_action_on_write_field_set( LOG_CALLER_DEFN
                                                                            ohp_core_buffer_t *b,
                                                                            ohp_core_handle_t *h,
                                                                            UINT32 mask,
                                                                            UINT32 ofs,
                                                                            UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXFA_TXDLY_INT2_action_on_write_field_set", mask, ofs, value );
    ohp_core_action_on_write_field_set( b,
                                        h,
                                        MEM_TYPE_STATUS,
                                        PMC_OHP_CORE_REG_RXFA_TXDLY_INT2,
                                        mask,
                                        ofs,
                                        value);

}


#ifndef ohp_core_reg_RXFA_TXDLY_INT2_read
#define ohp_core_reg_RXFA_TXDLY_INT2_read( b, h ) \
       _ohp_core_reg_RXFA_TXDLY_INT2_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXFA_TXDLY_INT2_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXFA_TXDLY_INT2);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXFA_TXDLY_INT2_read", reg_value);
    return reg_value;
}

#ifndef ohp_core_reg_RXFA_TXDLY_INT2_poll_bit
#define ohp_core_reg_RXFA_TXDLY_INT2_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _ohp_core_reg_RXFA_TXDLY_INT2_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _ohp_core_reg_RXFA_TXDLY_INT2_poll_bit( LOG_CALLER_DEFN
                                                                ohp_core_buffer_t *b,
                                                                ohp_core_handle_t *h,
                                                                UINT32 mask,
                                                                UINT32 value,
                                                                UINT32 max_count,
                                                                UINT32 *num_failed_polls,
                                                                UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "ohp_core_reg_RXFA_TXDLY_INT2_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return ohp_core_poll_bit( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_OHP_CORE_REG_RXFA_TXDLY_INT2,
                              mask,
                              value,
                              max_count,
                              num_failed_polls,
                              delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_OHP_CORE_REG_RXFB_TXDLY_INT0
 *
 * Register: RXFB Data TX Delay Interrupt 0
 * Offset: 0x000006c8 RXFB_TXDLY_INT0
 *
 * bits        31:0 default 0x00000000 RXFB_TXDLY_I
 * field_bits  31:0
 * attribute: int_edge=rising
 * attribute: clk=ohp_clk
 */

#ifndef ohp_core_reg_RXFB_TXDLY_INT0_write
#define ohp_core_reg_RXFB_TXDLY_INT0_write( b, h, value ) \
       _ohp_core_reg_RXFB_TXDLY_INT0_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXFB_TXDLY_INT0_write( LOG_CALLER_DEFN
                                                        ohp_core_buffer_t *b,
                                                        ohp_core_handle_t *h,
                                                        UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXFB_TXDLY_INT0_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFB_TXDLY_INT0,
                        value);
}


#ifndef ohp_core_reg_RXFB_TXDLY_INT0_action_on_write_field_set
#define ohp_core_reg_RXFB_TXDLY_INT0_action_on_write_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXFB_TXDLY_INT0_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXFB_TXDLY_INT0_action_on_write_field_set( LOG_CALLER_DEFN
                                                                            ohp_core_buffer_t *b,
                                                                            ohp_core_handle_t *h,
                                                                            UINT32 mask,
                                                                            UINT32 ofs,
                                                                            UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXFB_TXDLY_INT0_action_on_write_field_set", mask, ofs, value );
    ohp_core_action_on_write_field_set( b,
                                        h,
                                        MEM_TYPE_STATUS,
                                        PMC_OHP_CORE_REG_RXFB_TXDLY_INT0,
                                        mask,
                                        ofs,
                                        value);

}


#ifndef ohp_core_reg_RXFB_TXDLY_INT0_read
#define ohp_core_reg_RXFB_TXDLY_INT0_read( b, h ) \
       _ohp_core_reg_RXFB_TXDLY_INT0_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXFB_TXDLY_INT0_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXFB_TXDLY_INT0);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXFB_TXDLY_INT0_read", reg_value);
    return reg_value;
}

#ifndef ohp_core_reg_RXFB_TXDLY_INT0_poll_bit
#define ohp_core_reg_RXFB_TXDLY_INT0_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _ohp_core_reg_RXFB_TXDLY_INT0_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _ohp_core_reg_RXFB_TXDLY_INT0_poll_bit( LOG_CALLER_DEFN
                                                                ohp_core_buffer_t *b,
                                                                ohp_core_handle_t *h,
                                                                UINT32 mask,
                                                                UINT32 value,
                                                                UINT32 max_count,
                                                                UINT32 *num_failed_polls,
                                                                UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "ohp_core_reg_RXFB_TXDLY_INT0_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return ohp_core_poll_bit( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_OHP_CORE_REG_RXFB_TXDLY_INT0,
                              mask,
                              value,
                              max_count,
                              num_failed_polls,
                              delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_OHP_CORE_REG_RXFB_TXDLY_INT1
 *
 * Register: RXFB Data TX Delay Interrupt 1
 * Offset: 0x000006cc RXFB_TXDLY_INT1
 *
 * bits        31:0 default 0x00000000 RXFB_TXDLY_I
 * field_bits  63:32
 * attribute: int_edge=rising
 * attribute: clk=ohp_clk
 */

#ifndef ohp_core_reg_RXFB_TXDLY_INT1_write
#define ohp_core_reg_RXFB_TXDLY_INT1_write( b, h, value ) \
       _ohp_core_reg_RXFB_TXDLY_INT1_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXFB_TXDLY_INT1_write( LOG_CALLER_DEFN
                                                        ohp_core_buffer_t *b,
                                                        ohp_core_handle_t *h,
                                                        UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXFB_TXDLY_INT1_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFB_TXDLY_INT1,
                        value);
}


#ifndef ohp_core_reg_RXFB_TXDLY_INT1_action_on_write_field_set
#define ohp_core_reg_RXFB_TXDLY_INT1_action_on_write_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXFB_TXDLY_INT1_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXFB_TXDLY_INT1_action_on_write_field_set( LOG_CALLER_DEFN
                                                                            ohp_core_buffer_t *b,
                                                                            ohp_core_handle_t *h,
                                                                            UINT32 mask,
                                                                            UINT32 ofs,
                                                                            UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXFB_TXDLY_INT1_action_on_write_field_set", mask, ofs, value );
    ohp_core_action_on_write_field_set( b,
                                        h,
                                        MEM_TYPE_STATUS,
                                        PMC_OHP_CORE_REG_RXFB_TXDLY_INT1,
                                        mask,
                                        ofs,
                                        value);

}


#ifndef ohp_core_reg_RXFB_TXDLY_INT1_read
#define ohp_core_reg_RXFB_TXDLY_INT1_read( b, h ) \
       _ohp_core_reg_RXFB_TXDLY_INT1_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXFB_TXDLY_INT1_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXFB_TXDLY_INT1);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXFB_TXDLY_INT1_read", reg_value);
    return reg_value;
}

#ifndef ohp_core_reg_RXFB_TXDLY_INT1_poll_bit
#define ohp_core_reg_RXFB_TXDLY_INT1_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _ohp_core_reg_RXFB_TXDLY_INT1_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _ohp_core_reg_RXFB_TXDLY_INT1_poll_bit( LOG_CALLER_DEFN
                                                                ohp_core_buffer_t *b,
                                                                ohp_core_handle_t *h,
                                                                UINT32 mask,
                                                                UINT32 value,
                                                                UINT32 max_count,
                                                                UINT32 *num_failed_polls,
                                                                UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "ohp_core_reg_RXFB_TXDLY_INT1_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return ohp_core_poll_bit( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_OHP_CORE_REG_RXFB_TXDLY_INT1,
                              mask,
                              value,
                              max_count,
                              num_failed_polls,
                              delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_OHP_CORE_REG_RXFB_TXDLY_INT2
 *
 * Register: RXFB Data TX Delay Interrupt 2
 * Offset: 0x000006d0 RXFB_TXDLY_INT2
 *
 * bits        31:0 default 0x00000000 RXFB_TXDLY_I
 * field_bits  95:64
 * attribute: int_edge=rising
 * attribute: clk=ohp_clk
 */

#ifndef ohp_core_reg_RXFB_TXDLY_INT2_write
#define ohp_core_reg_RXFB_TXDLY_INT2_write( b, h, value ) \
       _ohp_core_reg_RXFB_TXDLY_INT2_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXFB_TXDLY_INT2_write( LOG_CALLER_DEFN
                                                        ohp_core_buffer_t *b,
                                                        ohp_core_handle_t *h,
                                                        UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXFB_TXDLY_INT2_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFB_TXDLY_INT2,
                        value);
}


#ifndef ohp_core_reg_RXFB_TXDLY_INT2_action_on_write_field_set
#define ohp_core_reg_RXFB_TXDLY_INT2_action_on_write_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXFB_TXDLY_INT2_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXFB_TXDLY_INT2_action_on_write_field_set( LOG_CALLER_DEFN
                                                                            ohp_core_buffer_t *b,
                                                                            ohp_core_handle_t *h,
                                                                            UINT32 mask,
                                                                            UINT32 ofs,
                                                                            UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXFB_TXDLY_INT2_action_on_write_field_set", mask, ofs, value );
    ohp_core_action_on_write_field_set( b,
                                        h,
                                        MEM_TYPE_STATUS,
                                        PMC_OHP_CORE_REG_RXFB_TXDLY_INT2,
                                        mask,
                                        ofs,
                                        value);

}


#ifndef ohp_core_reg_RXFB_TXDLY_INT2_read
#define ohp_core_reg_RXFB_TXDLY_INT2_read( b, h ) \
       _ohp_core_reg_RXFB_TXDLY_INT2_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXFB_TXDLY_INT2_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXFB_TXDLY_INT2);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXFB_TXDLY_INT2_read", reg_value);
    return reg_value;
}

#ifndef ohp_core_reg_RXFB_TXDLY_INT2_poll_bit
#define ohp_core_reg_RXFB_TXDLY_INT2_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _ohp_core_reg_RXFB_TXDLY_INT2_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _ohp_core_reg_RXFB_TXDLY_INT2_poll_bit( LOG_CALLER_DEFN
                                                                ohp_core_buffer_t *b,
                                                                ohp_core_handle_t *h,
                                                                UINT32 mask,
                                                                UINT32 value,
                                                                UINT32 max_count,
                                                                UINT32 *num_failed_polls,
                                                                UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "ohp_core_reg_RXFB_TXDLY_INT2_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return ohp_core_poll_bit( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_OHP_CORE_REG_RXFB_TXDLY_INT2,
                              mask,
                              value,
                              max_count,
                              num_failed_polls,
                              delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_OHP_CORE_REG_RXMAC_UID_FAIL_INT
 *
 * Register: RXMAC UID Mismatch Interrupt
 * Offset: 0x000006e8 RXMAC_UID_FAIL_INT
 *
 * bits 0 default 0 RXMAC_UID_FAIL_I
 * attribute: int_edge=rising
 * attribute: clk=ohp_clk
 */

#ifndef ohp_core_reg_RXMAC_UID_FAIL_INT_write
#define ohp_core_reg_RXMAC_UID_FAIL_INT_write( b, h, value ) \
       _ohp_core_reg_RXMAC_UID_FAIL_INT_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXMAC_UID_FAIL_INT_write( LOG_CALLER_DEFN
                                                           ohp_core_buffer_t *b,
                                                           ohp_core_handle_t *h,
                                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXMAC_UID_FAIL_INT_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXMAC_UID_FAIL_INT,
                        value);
}


#ifndef ohp_core_reg_RXMAC_UID_FAIL_INT_action_on_write_field_set
#define ohp_core_reg_RXMAC_UID_FAIL_INT_action_on_write_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXMAC_UID_FAIL_INT_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXMAC_UID_FAIL_INT_action_on_write_field_set( LOG_CALLER_DEFN
                                                                               ohp_core_buffer_t *b,
                                                                               ohp_core_handle_t *h,
                                                                               UINT32 mask,
                                                                               UINT32 ofs,
                                                                               UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXMAC_UID_FAIL_INT_action_on_write_field_set", mask, ofs, value );
    ohp_core_action_on_write_field_set( b,
                                        h,
                                        MEM_TYPE_STATUS,
                                        PMC_OHP_CORE_REG_RXMAC_UID_FAIL_INT,
                                        mask,
                                        ofs,
                                        value);

}


#ifndef ohp_core_reg_RXMAC_UID_FAIL_INT_read
#define ohp_core_reg_RXMAC_UID_FAIL_INT_read( b, h ) \
       _ohp_core_reg_RXMAC_UID_FAIL_INT_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXMAC_UID_FAIL_INT_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXMAC_UID_FAIL_INT);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXMAC_UID_FAIL_INT_read", reg_value);
    return reg_value;
}

#ifndef ohp_core_reg_RXMAC_UID_FAIL_INT_poll_bit
#define ohp_core_reg_RXMAC_UID_FAIL_INT_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _ohp_core_reg_RXMAC_UID_FAIL_INT_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _ohp_core_reg_RXMAC_UID_FAIL_INT_poll_bit( LOG_CALLER_DEFN
                                                                   ohp_core_buffer_t *b,
                                                                   ohp_core_handle_t *h,
                                                                   UINT32 mask,
                                                                   UINT32 value,
                                                                   UINT32 max_count,
                                                                   UINT32 *num_failed_polls,
                                                                   UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "ohp_core_reg_RXMAC_UID_FAIL_INT_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return ohp_core_poll_bit( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_OHP_CORE_REG_RXMAC_UID_FAIL_INT,
                              mask,
                              value,
                              max_count,
                              num_failed_polls,
                              delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_OHP_CORE_REG_RXMAC_FRMRID_FAIL_INT
 *
 * Register: RXMAC Framer ID Mismatch Interrupt
 * Offset: 0x000006ec RXMAC_FRMRID_FAIL_INT
 *
 * bits 0 default 0 RXMAC_FRMRID_FAIL_I
 * attribute: int_edge=rising
 * attribute: clk=ohp_clk
 */

#ifndef ohp_core_reg_RXMAC_FRMRID_FAIL_INT_write
#define ohp_core_reg_RXMAC_FRMRID_FAIL_INT_write( b, h, value ) \
       _ohp_core_reg_RXMAC_FRMRID_FAIL_INT_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXMAC_FRMRID_FAIL_INT_write( LOG_CALLER_DEFN
                                                              ohp_core_buffer_t *b,
                                                              ohp_core_handle_t *h,
                                                              UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXMAC_FRMRID_FAIL_INT_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXMAC_FRMRID_FAIL_INT,
                        value);
}


#ifndef ohp_core_reg_RXMAC_FRMRID_FAIL_INT_action_on_write_field_set
#define ohp_core_reg_RXMAC_FRMRID_FAIL_INT_action_on_write_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXMAC_FRMRID_FAIL_INT_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXMAC_FRMRID_FAIL_INT_action_on_write_field_set( LOG_CALLER_DEFN
                                                                                  ohp_core_buffer_t *b,
                                                                                  ohp_core_handle_t *h,
                                                                                  UINT32 mask,
                                                                                  UINT32 ofs,
                                                                                  UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXMAC_FRMRID_FAIL_INT_action_on_write_field_set", mask, ofs, value );
    ohp_core_action_on_write_field_set( b,
                                        h,
                                        MEM_TYPE_STATUS,
                                        PMC_OHP_CORE_REG_RXMAC_FRMRID_FAIL_INT,
                                        mask,
                                        ofs,
                                        value);

}


#ifndef ohp_core_reg_RXMAC_FRMRID_FAIL_INT_read
#define ohp_core_reg_RXMAC_FRMRID_FAIL_INT_read( b, h ) \
       _ohp_core_reg_RXMAC_FRMRID_FAIL_INT_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXMAC_FRMRID_FAIL_INT_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXMAC_FRMRID_FAIL_INT);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXMAC_FRMRID_FAIL_INT_read", reg_value);
    return reg_value;
}

#ifndef ohp_core_reg_RXMAC_FRMRID_FAIL_INT_poll_bit
#define ohp_core_reg_RXMAC_FRMRID_FAIL_INT_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _ohp_core_reg_RXMAC_FRMRID_FAIL_INT_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _ohp_core_reg_RXMAC_FRMRID_FAIL_INT_poll_bit( LOG_CALLER_DEFN
                                                                      ohp_core_buffer_t *b,
                                                                      ohp_core_handle_t *h,
                                                                      UINT32 mask,
                                                                      UINT32 value,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "ohp_core_reg_RXMAC_FRMRID_FAIL_INT_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return ohp_core_poll_bit( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_OHP_CORE_REG_RXMAC_FRMRID_FAIL_INT,
                              mask,
                              value,
                              max_count,
                              num_failed_polls,
                              delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_OHP_CORE_REG_RXMAC_CHID_FAIL_INT
 *
 * Register: RXMAC CH ID Out of Range Interrupt
 * Offset: 0x000006f0 RXMAC_CHID_FAIL_INT
 *
 * bits 0 default 0 RXMAC_CHID_FAIL_I
 * attribute: int_edge=rising
 * attribute: clk=ohp_clk
 */

#ifndef ohp_core_reg_RXMAC_CHID_FAIL_INT_write
#define ohp_core_reg_RXMAC_CHID_FAIL_INT_write( b, h, value ) \
       _ohp_core_reg_RXMAC_CHID_FAIL_INT_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXMAC_CHID_FAIL_INT_write( LOG_CALLER_DEFN
                                                            ohp_core_buffer_t *b,
                                                            ohp_core_handle_t *h,
                                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXMAC_CHID_FAIL_INT_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXMAC_CHID_FAIL_INT,
                        value);
}


#ifndef ohp_core_reg_RXMAC_CHID_FAIL_INT_action_on_write_field_set
#define ohp_core_reg_RXMAC_CHID_FAIL_INT_action_on_write_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXMAC_CHID_FAIL_INT_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXMAC_CHID_FAIL_INT_action_on_write_field_set( LOG_CALLER_DEFN
                                                                                ohp_core_buffer_t *b,
                                                                                ohp_core_handle_t *h,
                                                                                UINT32 mask,
                                                                                UINT32 ofs,
                                                                                UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXMAC_CHID_FAIL_INT_action_on_write_field_set", mask, ofs, value );
    ohp_core_action_on_write_field_set( b,
                                        h,
                                        MEM_TYPE_STATUS,
                                        PMC_OHP_CORE_REG_RXMAC_CHID_FAIL_INT,
                                        mask,
                                        ofs,
                                        value);

}


#ifndef ohp_core_reg_RXMAC_CHID_FAIL_INT_read
#define ohp_core_reg_RXMAC_CHID_FAIL_INT_read( b, h ) \
       _ohp_core_reg_RXMAC_CHID_FAIL_INT_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXMAC_CHID_FAIL_INT_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXMAC_CHID_FAIL_INT);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXMAC_CHID_FAIL_INT_read", reg_value);
    return reg_value;
}

#ifndef ohp_core_reg_RXMAC_CHID_FAIL_INT_poll_bit
#define ohp_core_reg_RXMAC_CHID_FAIL_INT_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _ohp_core_reg_RXMAC_CHID_FAIL_INT_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _ohp_core_reg_RXMAC_CHID_FAIL_INT_poll_bit( LOG_CALLER_DEFN
                                                                    ohp_core_buffer_t *b,
                                                                    ohp_core_handle_t *h,
                                                                    UINT32 mask,
                                                                    UINT32 value,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "ohp_core_reg_RXMAC_CHID_FAIL_INT_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return ohp_core_poll_bit( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_OHP_CORE_REG_RXMAC_CHID_FAIL_INT,
                              mask,
                              value,
                              max_count,
                              num_failed_polls,
                              delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_OHP_CORE_REG_RXMAC_PKTERR_INT
 *
 * Register: RXMAC RX Packet Error Interrupt
 * Offset: 0x000006f4 RXMAC_PKTERR_INT
 *
 * bits 0 default 0 RXMAC_PKTERR_I
 * attribute: int_edge=rising
 * attribute: clk=ohp_clk
 */

#ifndef ohp_core_reg_RXMAC_PKTERR_INT_write
#define ohp_core_reg_RXMAC_PKTERR_INT_write( b, h, value ) \
       _ohp_core_reg_RXMAC_PKTERR_INT_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXMAC_PKTERR_INT_write( LOG_CALLER_DEFN
                                                         ohp_core_buffer_t *b,
                                                         ohp_core_handle_t *h,
                                                         UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXMAC_PKTERR_INT_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXMAC_PKTERR_INT,
                        value);
}


#ifndef ohp_core_reg_RXMAC_PKTERR_INT_action_on_write_field_set
#define ohp_core_reg_RXMAC_PKTERR_INT_action_on_write_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXMAC_PKTERR_INT_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXMAC_PKTERR_INT_action_on_write_field_set( LOG_CALLER_DEFN
                                                                             ohp_core_buffer_t *b,
                                                                             ohp_core_handle_t *h,
                                                                             UINT32 mask,
                                                                             UINT32 ofs,
                                                                             UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXMAC_PKTERR_INT_action_on_write_field_set", mask, ofs, value );
    ohp_core_action_on_write_field_set( b,
                                        h,
                                        MEM_TYPE_STATUS,
                                        PMC_OHP_CORE_REG_RXMAC_PKTERR_INT,
                                        mask,
                                        ofs,
                                        value);

}


#ifndef ohp_core_reg_RXMAC_PKTERR_INT_read
#define ohp_core_reg_RXMAC_PKTERR_INT_read( b, h ) \
       _ohp_core_reg_RXMAC_PKTERR_INT_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXMAC_PKTERR_INT_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXMAC_PKTERR_INT);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXMAC_PKTERR_INT_read", reg_value);
    return reg_value;
}

#ifndef ohp_core_reg_RXMAC_PKTERR_INT_poll_bit
#define ohp_core_reg_RXMAC_PKTERR_INT_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _ohp_core_reg_RXMAC_PKTERR_INT_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _ohp_core_reg_RXMAC_PKTERR_INT_poll_bit( LOG_CALLER_DEFN
                                                                 ohp_core_buffer_t *b,
                                                                 ohp_core_handle_t *h,
                                                                 UINT32 mask,
                                                                 UINT32 value,
                                                                 UINT32 max_count,
                                                                 UINT32 *num_failed_polls,
                                                                 UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "ohp_core_reg_RXMAC_PKTERR_INT_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return ohp_core_poll_bit( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_OHP_CORE_REG_RXMAC_PKTERR_INT,
                              mask,
                              value,
                              max_count,
                              num_failed_polls,
                              delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_OHP_CORE_REG_RXMAC_RXFIFO_ERR_INT
 *
 * Register: RX FIFO Write Error INT
 * Offset: 0x000006f8 RXMAC_RXFIFO_ERR_INT
 *
 * bits 0 default 0 RXMAC_FIFO_ERR_I
 * attribute: int_edge=rising
 * attribute: clk=ohp_clk
 */

#ifndef ohp_core_reg_RXMAC_RXFIFO_ERR_INT_write
#define ohp_core_reg_RXMAC_RXFIFO_ERR_INT_write( b, h, value ) \
       _ohp_core_reg_RXMAC_RXFIFO_ERR_INT_write( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_reg_RXMAC_RXFIFO_ERR_INT_write( LOG_CALLER_DEFN
                                                             ohp_core_buffer_t *b,
                                                             ohp_core_handle_t *h,
                                                             UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "ohp_core_reg_RXMAC_RXFIFO_ERR_INT_write", value );
    ohp_core_reg_write( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXMAC_RXFIFO_ERR_INT,
                        value);
}


#ifndef ohp_core_reg_RXMAC_RXFIFO_ERR_INT_action_on_write_field_set
#define ohp_core_reg_RXMAC_RXFIFO_ERR_INT_action_on_write_field_set( b, h, mask, ofs, value ) \
       _ohp_core_reg_RXMAC_RXFIFO_ERR_INT_action_on_write_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXMAC_RXFIFO_ERR_INT_action_on_write_field_set( LOG_CALLER_DEFN
                                                                                 ohp_core_buffer_t *b,
                                                                                 ohp_core_handle_t *h,
                                                                                 UINT32 mask,
                                                                                 UINT32 ofs,
                                                                                 UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXMAC_RXFIFO_ERR_INT_action_on_write_field_set", mask, ofs, value );
    ohp_core_action_on_write_field_set( b,
                                        h,
                                        MEM_TYPE_STATUS,
                                        PMC_OHP_CORE_REG_RXMAC_RXFIFO_ERR_INT,
                                        mask,
                                        ofs,
                                        value);

}


#ifndef ohp_core_reg_RXMAC_RXFIFO_ERR_INT_read
#define ohp_core_reg_RXMAC_RXFIFO_ERR_INT_read( b, h ) \
       _ohp_core_reg_RXMAC_RXFIFO_ERR_INT_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_RXMAC_RXFIFO_ERR_INT_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXMAC_RXFIFO_ERR_INT);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXMAC_RXFIFO_ERR_INT_read", reg_value);
    return reg_value;
}

#ifndef ohp_core_reg_RXMAC_RXFIFO_ERR_INT_poll_bit
#define ohp_core_reg_RXMAC_RXFIFO_ERR_INT_poll_bit( b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _ohp_core_reg_RXMAC_RXFIFO_ERR_INT_poll_bit( LOG_CALLER b, h, mask, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _ohp_core_reg_RXMAC_RXFIFO_ERR_INT_poll_bit( LOG_CALLER_DEFN
                                                                     ohp_core_buffer_t *b,
                                                                     ohp_core_handle_t *h,
                                                                     UINT32 mask,
                                                                     UINT32 value,
                                                                     UINT32 max_count,
                                                                     UINT32 *num_failed_polls,
                                                                     UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s mask=0x%08x, value=0x%08x, max_count=%d, delay_between_polls_in_microseconds=%d", "ohp_core_reg_RXMAC_RXFIFO_ERR_INT_poll_bit", mask, value, max_count, delay_between_polls_in_microseconds );
    return ohp_core_poll_bit( b,
                              h,
                              MEM_TYPE_STATUS,
                              PMC_OHP_CORE_REG_RXMAC_RXFIFO_ERR_INT,
                              mask,
                              value,
                              max_count,
                              num_failed_polls,
                              delay_between_polls_in_microseconds);

}


/**
 * accessor functions for register PMC_OHP_CORE_REG_RXFA_EXT_MASK
 *
 * Register: RXFA Extraction Mask
 * Offset: (0x00000800 + (N) * 4) RXFA_EXT_MASK
 *
 * bits 15:0 default 0000000000000000 RXFA_EXT_MASK
 */

#ifndef ohp_core_reg_RXFA_EXT_MASK_array_burst_write
#define ohp_core_reg_RXFA_EXT_MASK_array_burst_write( b, h, ofs, len, value ) \
       _ohp_core_reg_RXFA_EXT_MASK_array_burst_write( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _ohp_core_reg_RXFA_EXT_MASK_array_burst_write( LOG_CALLER_DEFN
                                                                  ohp_core_buffer_t *b,
                                                                  ohp_core_handle_t *h,
                                                                  UINT32 ofs,
                                                                  UINT32 len,
                                                                  UINT32 *value )
{
    if (len + ofs > 96)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "ohp_core_reg_RXFA_EXT_MASK_array_burst_write", ofs, len, 96 );
    IOLOG( "%s of %d words ofs=%d len=%d", "ohp_core_reg_RXFA_EXT_MASK_array_burst_write", 96, ofs, len);
    ohp_core_burst_write( b,
                          h,
                          MEM_TYPE_STATUS,
                          PMC_OHP_CORE_REG_RXFA_EXT_MASK(ofs),
                          len,
                          value);

}


#ifndef ohp_core_reg_RXFA_EXT_MASK_array_field_set
#define ohp_core_reg_RXFA_EXT_MASK_array_field_set( b, h, N, mask, ofs, value ) \
       _ohp_core_reg_RXFA_EXT_MASK_array_field_set( LOG_CALLER b, h, N, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXFA_EXT_MASK_array_field_set( LOG_CALLER_DEFN
                                                                ohp_core_buffer_t *b,
                                                                ohp_core_handle_t *h,
                                                                UINT32 N,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXFA_EXT_MASK_array_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFA_EXT_MASK(N),
                        mask,
                        PMC_OHP_CORE_REG_RXFA_EXT_MASK_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_RXFA_EXT_MASK_array_burst_read
#define ohp_core_reg_RXFA_EXT_MASK_array_burst_read( b, h, ofs, len, value ) \
       _ohp_core_reg_RXFA_EXT_MASK_array_burst_read( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _ohp_core_reg_RXFA_EXT_MASK_array_burst_read( LOG_CALLER_DEFN
                                                                 ohp_core_buffer_t *b,
                                                                 ohp_core_handle_t *h,
                                                                 UINT32 ofs,
                                                                 UINT32 len,
                                                                 UINT32 *value )
{
    if (len + ofs > 96)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "ohp_core_reg_RXFA_EXT_MASK_array_burst_read", ofs, len, 96 );
    ohp_core_burst_read( b,
                         h,
                         MEM_TYPE_STATUS,
                         PMC_OHP_CORE_REG_RXFA_EXT_MASK(ofs),
                         len,
                         value);

    IOLOG( "%s of %d words ofs=%d len=%d", "ohp_core_reg_RXFA_EXT_MASK_array_burst_read", 96, ofs, len);
}


#ifndef ohp_core_reg_RXFA_EXT_MASK_array_read
#define ohp_core_reg_RXFA_EXT_MASK_array_read( b, h, N ) \
       _ohp_core_reg_RXFA_EXT_MASK_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _ohp_core_reg_RXFA_EXT_MASK_array_read( LOG_CALLER_DEFN
                                                             ohp_core_buffer_t *b,
                                                             ohp_core_handle_t *h,
                                                             UINT32 N )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXFA_EXT_MASK(N));

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXFA_EXT_MASK_array_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_RXFB_EXT_MASK
 *
 * Register: RXFB Extraction Mask
 * Offset: (0x00000a00 + (N) * 4) RXFB_EXT_MASK
 *
 * bits 15:0 default 0000000000000000 RXFB_EXT_MASK
 */

#ifndef ohp_core_reg_RXFB_EXT_MASK_array_burst_write
#define ohp_core_reg_RXFB_EXT_MASK_array_burst_write( b, h, ofs, len, value ) \
       _ohp_core_reg_RXFB_EXT_MASK_array_burst_write( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _ohp_core_reg_RXFB_EXT_MASK_array_burst_write( LOG_CALLER_DEFN
                                                                  ohp_core_buffer_t *b,
                                                                  ohp_core_handle_t *h,
                                                                  UINT32 ofs,
                                                                  UINT32 len,
                                                                  UINT32 *value )
{
    if (len + ofs > 96)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "ohp_core_reg_RXFB_EXT_MASK_array_burst_write", ofs, len, 96 );
    IOLOG( "%s of %d words ofs=%d len=%d", "ohp_core_reg_RXFB_EXT_MASK_array_burst_write", 96, ofs, len);
    ohp_core_burst_write( b,
                          h,
                          MEM_TYPE_STATUS,
                          PMC_OHP_CORE_REG_RXFB_EXT_MASK(ofs),
                          len,
                          value);

}


#ifndef ohp_core_reg_RXFB_EXT_MASK_array_field_set
#define ohp_core_reg_RXFB_EXT_MASK_array_field_set( b, h, N, mask, ofs, value ) \
       _ohp_core_reg_RXFB_EXT_MASK_array_field_set( LOG_CALLER b, h, N, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXFB_EXT_MASK_array_field_set( LOG_CALLER_DEFN
                                                                ohp_core_buffer_t *b,
                                                                ohp_core_handle_t *h,
                                                                UINT32 N,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXFB_EXT_MASK_array_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFB_EXT_MASK(N),
                        mask,
                        PMC_OHP_CORE_REG_RXFB_EXT_MASK_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_RXFB_EXT_MASK_array_burst_read
#define ohp_core_reg_RXFB_EXT_MASK_array_burst_read( b, h, ofs, len, value ) \
       _ohp_core_reg_RXFB_EXT_MASK_array_burst_read( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _ohp_core_reg_RXFB_EXT_MASK_array_burst_read( LOG_CALLER_DEFN
                                                                 ohp_core_buffer_t *b,
                                                                 ohp_core_handle_t *h,
                                                                 UINT32 ofs,
                                                                 UINT32 len,
                                                                 UINT32 *value )
{
    if (len + ofs > 96)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "ohp_core_reg_RXFB_EXT_MASK_array_burst_read", ofs, len, 96 );
    ohp_core_burst_read( b,
                         h,
                         MEM_TYPE_STATUS,
                         PMC_OHP_CORE_REG_RXFB_EXT_MASK(ofs),
                         len,
                         value);

    IOLOG( "%s of %d words ofs=%d len=%d", "ohp_core_reg_RXFB_EXT_MASK_array_burst_read", 96, ofs, len);
}


#ifndef ohp_core_reg_RXFB_EXT_MASK_array_read
#define ohp_core_reg_RXFB_EXT_MASK_array_read( b, h, N ) \
       _ohp_core_reg_RXFB_EXT_MASK_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _ohp_core_reg_RXFB_EXT_MASK_array_read( LOG_CALLER_DEFN
                                                             ohp_core_buffer_t *b,
                                                             ohp_core_handle_t *h,
                                                             UINT32 N )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXFB_EXT_MASK(N));

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXFB_EXT_MASK_array_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_TXFA_INS_MASK
 *
 * Register: TXFA Insertion Mask
 * Offset: (0x00000c00 + (N) * 4) TXFA_INS_MASK
 *
 * bits 15:0 default 0000000000000000 TXFA_INS_MASK
 */

#ifndef ohp_core_reg_TXFA_INS_MASK_array_burst_write
#define ohp_core_reg_TXFA_INS_MASK_array_burst_write( b, h, ofs, len, value ) \
       _ohp_core_reg_TXFA_INS_MASK_array_burst_write( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _ohp_core_reg_TXFA_INS_MASK_array_burst_write( LOG_CALLER_DEFN
                                                                  ohp_core_buffer_t *b,
                                                                  ohp_core_handle_t *h,
                                                                  UINT32 ofs,
                                                                  UINT32 len,
                                                                  UINT32 *value )
{
    if (len + ofs > 96)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "ohp_core_reg_TXFA_INS_MASK_array_burst_write", ofs, len, 96 );
    IOLOG( "%s of %d words ofs=%d len=%d", "ohp_core_reg_TXFA_INS_MASK_array_burst_write", 96, ofs, len);
    ohp_core_burst_write( b,
                          h,
                          MEM_TYPE_STATUS,
                          PMC_OHP_CORE_REG_TXFA_INS_MASK(ofs),
                          len,
                          value);

}


#ifndef ohp_core_reg_TXFA_INS_MASK_array_field_set
#define ohp_core_reg_TXFA_INS_MASK_array_field_set( b, h, N, mask, ofs, value ) \
       _ohp_core_reg_TXFA_INS_MASK_array_field_set( LOG_CALLER b, h, N, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_TXFA_INS_MASK_array_field_set( LOG_CALLER_DEFN
                                                                ohp_core_buffer_t *b,
                                                                ohp_core_handle_t *h,
                                                                UINT32 N,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_TXFA_INS_MASK_array_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_TXFA_INS_MASK(N),
                        mask,
                        PMC_OHP_CORE_REG_TXFA_INS_MASK_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_TXFA_INS_MASK_array_burst_read
#define ohp_core_reg_TXFA_INS_MASK_array_burst_read( b, h, ofs, len, value ) \
       _ohp_core_reg_TXFA_INS_MASK_array_burst_read( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _ohp_core_reg_TXFA_INS_MASK_array_burst_read( LOG_CALLER_DEFN
                                                                 ohp_core_buffer_t *b,
                                                                 ohp_core_handle_t *h,
                                                                 UINT32 ofs,
                                                                 UINT32 len,
                                                                 UINT32 *value )
{
    if (len + ofs > 96)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "ohp_core_reg_TXFA_INS_MASK_array_burst_read", ofs, len, 96 );
    ohp_core_burst_read( b,
                         h,
                         MEM_TYPE_STATUS,
                         PMC_OHP_CORE_REG_TXFA_INS_MASK(ofs),
                         len,
                         value);

    IOLOG( "%s of %d words ofs=%d len=%d", "ohp_core_reg_TXFA_INS_MASK_array_burst_read", 96, ofs, len);
}


#ifndef ohp_core_reg_TXFA_INS_MASK_array_read
#define ohp_core_reg_TXFA_INS_MASK_array_read( b, h, N ) \
       _ohp_core_reg_TXFA_INS_MASK_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _ohp_core_reg_TXFA_INS_MASK_array_read( LOG_CALLER_DEFN
                                                             ohp_core_buffer_t *b,
                                                             ohp_core_handle_t *h,
                                                             UINT32 N )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_TXFA_INS_MASK(N));

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_TXFA_INS_MASK_array_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_TXFB_INS_MASK
 *
 * Register: TXFB Insertion Mask
 * Offset: (0x00000e00 + (N) * 4) TXFB_INS_MASK
 *
 * bits 15:0 default 0000000000000000 TXFB_INS_MASK
 */

#ifndef ohp_core_reg_TXFB_INS_MASK_array_burst_write
#define ohp_core_reg_TXFB_INS_MASK_array_burst_write( b, h, ofs, len, value ) \
       _ohp_core_reg_TXFB_INS_MASK_array_burst_write( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _ohp_core_reg_TXFB_INS_MASK_array_burst_write( LOG_CALLER_DEFN
                                                                  ohp_core_buffer_t *b,
                                                                  ohp_core_handle_t *h,
                                                                  UINT32 ofs,
                                                                  UINT32 len,
                                                                  UINT32 *value )
{
    if (len + ofs > 96)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "ohp_core_reg_TXFB_INS_MASK_array_burst_write", ofs, len, 96 );
    IOLOG( "%s of %d words ofs=%d len=%d", "ohp_core_reg_TXFB_INS_MASK_array_burst_write", 96, ofs, len);
    ohp_core_burst_write( b,
                          h,
                          MEM_TYPE_STATUS,
                          PMC_OHP_CORE_REG_TXFB_INS_MASK(ofs),
                          len,
                          value);

}


#ifndef ohp_core_reg_TXFB_INS_MASK_array_field_set
#define ohp_core_reg_TXFB_INS_MASK_array_field_set( b, h, N, mask, ofs, value ) \
       _ohp_core_reg_TXFB_INS_MASK_array_field_set( LOG_CALLER b, h, N, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_TXFB_INS_MASK_array_field_set( LOG_CALLER_DEFN
                                                                ohp_core_buffer_t *b,
                                                                ohp_core_handle_t *h,
                                                                UINT32 N,
                                                                UINT32 mask,
                                                                UINT32 ofs,
                                                                UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_TXFB_INS_MASK_array_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_TXFB_INS_MASK(N),
                        mask,
                        PMC_OHP_CORE_REG_TXFB_INS_MASK_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_TXFB_INS_MASK_array_burst_read
#define ohp_core_reg_TXFB_INS_MASK_array_burst_read( b, h, ofs, len, value ) \
       _ohp_core_reg_TXFB_INS_MASK_array_burst_read( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _ohp_core_reg_TXFB_INS_MASK_array_burst_read( LOG_CALLER_DEFN
                                                                 ohp_core_buffer_t *b,
                                                                 ohp_core_handle_t *h,
                                                                 UINT32 ofs,
                                                                 UINT32 len,
                                                                 UINT32 *value )
{
    if (len + ofs > 96)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "ohp_core_reg_TXFB_INS_MASK_array_burst_read", ofs, len, 96 );
    ohp_core_burst_read( b,
                         h,
                         MEM_TYPE_STATUS,
                         PMC_OHP_CORE_REG_TXFB_INS_MASK(ofs),
                         len,
                         value);

    IOLOG( "%s of %d words ofs=%d len=%d", "ohp_core_reg_TXFB_INS_MASK_array_burst_read", 96, ofs, len);
}


#ifndef ohp_core_reg_TXFB_INS_MASK_array_read
#define ohp_core_reg_TXFB_INS_MASK_array_read( b, h, N ) \
       _ohp_core_reg_TXFB_INS_MASK_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _ohp_core_reg_TXFB_INS_MASK_array_read( LOG_CALLER_DEFN
                                                             ohp_core_buffer_t *b,
                                                             ohp_core_handle_t *h,
                                                             UINT32 N )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_TXFB_INS_MASK(N));

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_TXFB_INS_MASK_array_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_RXFA_CH_SCHEDULE
 *
 * Register: RXFA Channel Schedule
 * Offset: (0x00001000 + (N) * 4) RXFA_CH_SCHEDULE
 *
 * bits 7:0 default 00000000 SRV_CH_ID_A
 */

#ifndef ohp_core_reg_RXFA_CH_SCHEDULE_array_burst_write
#define ohp_core_reg_RXFA_CH_SCHEDULE_array_burst_write( b, h, ofs, len, value ) \
       _ohp_core_reg_RXFA_CH_SCHEDULE_array_burst_write( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _ohp_core_reg_RXFA_CH_SCHEDULE_array_burst_write( LOG_CALLER_DEFN
                                                                     ohp_core_buffer_t *b,
                                                                     ohp_core_handle_t *h,
                                                                     UINT32 ofs,
                                                                     UINT32 len,
                                                                     UINT32 *value )
{
    if (len + ofs > 96)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "ohp_core_reg_RXFA_CH_SCHEDULE_array_burst_write", ofs, len, 96 );
    IOLOG( "%s of %d words ofs=%d len=%d", "ohp_core_reg_RXFA_CH_SCHEDULE_array_burst_write", 96, ofs, len);
    ohp_core_burst_write( b,
                          h,
                          MEM_TYPE_STATUS,
                          PMC_OHP_CORE_REG_RXFA_CH_SCHEDULE(ofs),
                          len,
                          value);

}


#ifndef ohp_core_reg_RXFA_CH_SCHEDULE_array_field_set
#define ohp_core_reg_RXFA_CH_SCHEDULE_array_field_set( b, h, N, mask, ofs, value ) \
       _ohp_core_reg_RXFA_CH_SCHEDULE_array_field_set( LOG_CALLER b, h, N, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXFA_CH_SCHEDULE_array_field_set( LOG_CALLER_DEFN
                                                                   ohp_core_buffer_t *b,
                                                                   ohp_core_handle_t *h,
                                                                   UINT32 N,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXFA_CH_SCHEDULE_array_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFA_CH_SCHEDULE(N),
                        mask,
                        PMC_OHP_CORE_REG_RXFA_CH_SCHEDULE_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_RXFA_CH_SCHEDULE_array_burst_read
#define ohp_core_reg_RXFA_CH_SCHEDULE_array_burst_read( b, h, ofs, len, value ) \
       _ohp_core_reg_RXFA_CH_SCHEDULE_array_burst_read( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _ohp_core_reg_RXFA_CH_SCHEDULE_array_burst_read( LOG_CALLER_DEFN
                                                                    ohp_core_buffer_t *b,
                                                                    ohp_core_handle_t *h,
                                                                    UINT32 ofs,
                                                                    UINT32 len,
                                                                    UINT32 *value )
{
    if (len + ofs > 96)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "ohp_core_reg_RXFA_CH_SCHEDULE_array_burst_read", ofs, len, 96 );
    ohp_core_burst_read( b,
                         h,
                         MEM_TYPE_STATUS,
                         PMC_OHP_CORE_REG_RXFA_CH_SCHEDULE(ofs),
                         len,
                         value);

    IOLOG( "%s of %d words ofs=%d len=%d", "ohp_core_reg_RXFA_CH_SCHEDULE_array_burst_read", 96, ofs, len);
}


#ifndef ohp_core_reg_RXFA_CH_SCHEDULE_array_read
#define ohp_core_reg_RXFA_CH_SCHEDULE_array_read( b, h, N ) \
       _ohp_core_reg_RXFA_CH_SCHEDULE_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _ohp_core_reg_RXFA_CH_SCHEDULE_array_read( LOG_CALLER_DEFN
                                                                ohp_core_buffer_t *b,
                                                                ohp_core_handle_t *h,
                                                                UINT32 N )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXFA_CH_SCHEDULE(N));

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXFA_CH_SCHEDULE_array_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_RXFB_CH_SCHEDULE
 *
 * Register: RXFB Channel Schedule
 * Offset: (0x00001200 + (N) * 4) RXFB_CH_SCHEDULE
 *
 * bits 7:0 default 00000000 SRV_CH_ID_B
 */

#ifndef ohp_core_reg_RXFB_CH_SCHEDULE_array_burst_write
#define ohp_core_reg_RXFB_CH_SCHEDULE_array_burst_write( b, h, ofs, len, value ) \
       _ohp_core_reg_RXFB_CH_SCHEDULE_array_burst_write( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _ohp_core_reg_RXFB_CH_SCHEDULE_array_burst_write( LOG_CALLER_DEFN
                                                                     ohp_core_buffer_t *b,
                                                                     ohp_core_handle_t *h,
                                                                     UINT32 ofs,
                                                                     UINT32 len,
                                                                     UINT32 *value )
{
    if (len + ofs > 96)
        IO_RANGE_CHECK("%s burst write beyond max (ofs:%d + len:%d) > %d", "ohp_core_reg_RXFB_CH_SCHEDULE_array_burst_write", ofs, len, 96 );
    IOLOG( "%s of %d words ofs=%d len=%d", "ohp_core_reg_RXFB_CH_SCHEDULE_array_burst_write", 96, ofs, len);
    ohp_core_burst_write( b,
                          h,
                          MEM_TYPE_STATUS,
                          PMC_OHP_CORE_REG_RXFB_CH_SCHEDULE(ofs),
                          len,
                          value);

}


#ifndef ohp_core_reg_RXFB_CH_SCHEDULE_array_field_set
#define ohp_core_reg_RXFB_CH_SCHEDULE_array_field_set( b, h, N, mask, ofs, value ) \
       _ohp_core_reg_RXFB_CH_SCHEDULE_array_field_set( LOG_CALLER b, h, N, mask, ofs, value )
#endif
static INLINE void _ohp_core_reg_RXFB_CH_SCHEDULE_array_field_set( LOG_CALLER_DEFN
                                                                   ohp_core_buffer_t *b,
                                                                   ohp_core_handle_t *h,
                                                                   UINT32 N,
                                                                   UINT32 mask,
                                                                   UINT32 ofs,
                                                                   UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "ohp_core_reg_RXFB_CH_SCHEDULE_array_field_set", mask, ofs, value );
    ohp_core_field_set( b,
                        h,
                        MEM_TYPE_STATUS,
                        PMC_OHP_CORE_REG_RXFB_CH_SCHEDULE(N),
                        mask,
                        PMC_OHP_CORE_REG_RXFB_CH_SCHEDULE_UNUSED_MASK,
                        ofs,
                        value);

}


#ifndef ohp_core_reg_RXFB_CH_SCHEDULE_array_burst_read
#define ohp_core_reg_RXFB_CH_SCHEDULE_array_burst_read( b, h, ofs, len, value ) \
       _ohp_core_reg_RXFB_CH_SCHEDULE_array_burst_read( LOG_CALLER b, h, ofs, len, value )
#endif
static INLINE void _ohp_core_reg_RXFB_CH_SCHEDULE_array_burst_read( LOG_CALLER_DEFN
                                                                    ohp_core_buffer_t *b,
                                                                    ohp_core_handle_t *h,
                                                                    UINT32 ofs,
                                                                    UINT32 len,
                                                                    UINT32 *value )
{
    if (len + ofs > 96)
        IO_RANGE_CHECK("%s burst read beyond max (ofs:%d + len:%d) > %d", "ohp_core_reg_RXFB_CH_SCHEDULE_array_burst_read", ofs, len, 96 );
    ohp_core_burst_read( b,
                         h,
                         MEM_TYPE_STATUS,
                         PMC_OHP_CORE_REG_RXFB_CH_SCHEDULE(ofs),
                         len,
                         value);

    IOLOG( "%s of %d words ofs=%d len=%d", "ohp_core_reg_RXFB_CH_SCHEDULE_array_burst_read", 96, ofs, len);
}


#ifndef ohp_core_reg_RXFB_CH_SCHEDULE_array_read
#define ohp_core_reg_RXFB_CH_SCHEDULE_array_read( b, h, N ) \
       _ohp_core_reg_RXFB_CH_SCHEDULE_array_read( LOG_CALLER b, h, N )
#endif
static INLINE UINT32 _ohp_core_reg_RXFB_CH_SCHEDULE_array_read( LOG_CALLER_DEFN
                                                                ohp_core_buffer_t *b,
                                                                ohp_core_handle_t *h,
                                                                UINT32 N )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_RXFB_CH_SCHEDULE(N));

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_RXFB_CH_SCHEDULE_array_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_OHP_CORE_REG_CFC_DEBUG_RDATA
 *
 * Register: CFC Debug Interface Read Data
 * Offset: 0x0000138c CFC_DEBUG_RDATA
 *
 * bits 31:0 default 0x00000000 CFC_DBG_RDATA
 */

#ifndef ohp_core_reg_CFC_DEBUG_RDATA_read
#define ohp_core_reg_CFC_DEBUG_RDATA_read( b, h ) \
       _ohp_core_reg_CFC_DEBUG_RDATA_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_reg_CFC_DEBUG_RDATA_read( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 reg_value;

    reg_value = ohp_core_reg_read( b,
                                   h,
                                   MEM_TYPE_STATUS,
                                   PMC_OHP_CORE_REG_CFC_DEBUG_RDATA);

    IOLOG( "%s -> 0x%08x;", "ohp_core_reg_CFC_DEBUG_RDATA_read", reg_value);
    return reg_value;
}

/*
 * ==================================================================================
 *                  Parameter Access Functions for Paramset config
 * ==================================================================================
 */

#ifndef ohp_core_field_OHP_EN_set
#define ohp_core_field_OHP_EN_set( b, h, value ) \
       _ohp_core_field_OHP_EN_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_field_OHP_EN_set( LOG_CALLER_DEFN
                                               ohp_core_buffer_t *b,
                                               ohp_core_handle_t *h,
                                               UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ohp_core_field_OHP_EN_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ohp_core_field_OHP_EN_set", value );

    /* (0x00000000 bits 0) field OHP_EN of register PMC_OHP_CORE_REG_OHP_CFG_CTRL */
    _ohp_core_reg_OHP_CFG_CTRL_field_set( LOG_CALLER_ARGS
                                          b,
                                          h,
                                          OHP_CORE_REG_OHP_CFG_CTRL_BIT_OHP_EN_MSK,
                                          OHP_CORE_REG_OHP_CFG_CTRL_BIT_OHP_EN_OFF,
                                          value);
}


#ifndef ohp_core_field_OHP_EN_get
#define ohp_core_field_OHP_EN_get( b, h ) \
       _ohp_core_field_OHP_EN_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_OHP_EN_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 0) field OHP_EN of register PMC_OHP_CORE_REG_OHP_CFG_CTRL */
    reg_value = _ohp_core_reg_OHP_CFG_CTRL_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_OHP_CFG_CTRL_BIT_OHP_EN_MSK) >> OHP_CORE_REG_OHP_CFG_CTRL_BIT_OHP_EN_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_OHP_EN_get", value );

    return value;
}

#ifndef ohp_core_field_STGA_GCC_EN_set
#define ohp_core_field_STGA_GCC_EN_set( b, h, value ) \
       _ohp_core_field_STGA_GCC_EN_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_field_STGA_GCC_EN_set( LOG_CALLER_DEFN
                                                    ohp_core_buffer_t *b,
                                                    ohp_core_handle_t *h,
                                                    UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ohp_core_field_STGA_GCC_EN_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ohp_core_field_STGA_GCC_EN_set", value );

    /* (0x00000000 bits 4) field STGA_GCC_EN of register PMC_OHP_CORE_REG_OHP_CFG_CTRL */
    _ohp_core_reg_OHP_CFG_CTRL_field_set( LOG_CALLER_ARGS
                                          b,
                                          h,
                                          OHP_CORE_REG_OHP_CFG_CTRL_BIT_STGA_GCC_EN_MSK,
                                          OHP_CORE_REG_OHP_CFG_CTRL_BIT_STGA_GCC_EN_OFF,
                                          value);
}


#ifndef ohp_core_field_STGA_GCC_EN_get
#define ohp_core_field_STGA_GCC_EN_get( b, h ) \
       _ohp_core_field_STGA_GCC_EN_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_STGA_GCC_EN_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 4) field STGA_GCC_EN of register PMC_OHP_CORE_REG_OHP_CFG_CTRL */
    reg_value = _ohp_core_reg_OHP_CFG_CTRL_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_OHP_CFG_CTRL_BIT_STGA_GCC_EN_MSK) >> OHP_CORE_REG_OHP_CFG_CTRL_BIT_STGA_GCC_EN_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_STGA_GCC_EN_get", value );

    return value;
}

#ifndef ohp_core_field_STGB_GCC_EN_set
#define ohp_core_field_STGB_GCC_EN_set( b, h, value ) \
       _ohp_core_field_STGB_GCC_EN_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_field_STGB_GCC_EN_set( LOG_CALLER_DEFN
                                                    ohp_core_buffer_t *b,
                                                    ohp_core_handle_t *h,
                                                    UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ohp_core_field_STGB_GCC_EN_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ohp_core_field_STGB_GCC_EN_set", value );

    /* (0x00000000 bits 8) field STGB_GCC_EN of register PMC_OHP_CORE_REG_OHP_CFG_CTRL */
    _ohp_core_reg_OHP_CFG_CTRL_field_set( LOG_CALLER_ARGS
                                          b,
                                          h,
                                          OHP_CORE_REG_OHP_CFG_CTRL_BIT_STGB_GCC_EN_MSK,
                                          OHP_CORE_REG_OHP_CFG_CTRL_BIT_STGB_GCC_EN_OFF,
                                          value);
}


#ifndef ohp_core_field_STGB_GCC_EN_get
#define ohp_core_field_STGB_GCC_EN_get( b, h ) \
       _ohp_core_field_STGB_GCC_EN_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_STGB_GCC_EN_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000000 bits 8) field STGB_GCC_EN of register PMC_OHP_CORE_REG_OHP_CFG_CTRL */
    reg_value = _ohp_core_reg_OHP_CFG_CTRL_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_OHP_CFG_CTRL_BIT_STGB_GCC_EN_MSK) >> OHP_CORE_REG_OHP_CFG_CTRL_BIT_STGB_GCC_EN_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_STGB_GCC_EN_get", value );

    return value;
}

#ifndef ohp_core_field_STGA_SADDR_UID_set
#define ohp_core_field_STGA_SADDR_UID_set( b, h, value ) \
       _ohp_core_field_STGA_SADDR_UID_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_field_STGA_SADDR_UID_set( LOG_CALLER_DEFN
                                                       ohp_core_buffer_t *b,
                                                       ohp_core_handle_t *h,
                                                       UINT32 value )
{
    IOLOG( "%s <= 0x%08x", "ohp_core_field_STGA_SADDR_UID_set", value );

    /* (0x0000000c bits 31:0) field STGA_SADDR_UID of register PMC_OHP_CORE_REG_STGA_SA_UID */
    _ohp_core_reg_STGA_SA_UID_field_set( LOG_CALLER_ARGS
                                         b,
                                         h,
                                         OHP_CORE_REG_STGA_SA_UID_BIT_STGA_SADDR_UID_MSK,
                                         OHP_CORE_REG_STGA_SA_UID_BIT_STGA_SADDR_UID_OFF,
                                         value);
}


#ifndef ohp_core_field_STGA_SADDR_UID_get
#define ohp_core_field_STGA_SADDR_UID_get( b, h ) \
       _ohp_core_field_STGA_SADDR_UID_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_STGA_SADDR_UID_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000000c bits 31:0) field STGA_SADDR_UID of register PMC_OHP_CORE_REG_STGA_SA_UID */
    reg_value = _ohp_core_reg_STGA_SA_UID_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_STGA_SA_UID_BIT_STGA_SADDR_UID_MSK) >> OHP_CORE_REG_STGA_SA_UID_BIT_STGA_SADDR_UID_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_STGA_SADDR_UID_get", value );

    return value;
}

#ifndef ohp_core_field_range_STGA_SADDR_UID_set
#define ohp_core_field_range_STGA_SADDR_UID_set( b, h, start_bit, stop_bit, value ) \
       _ohp_core_field_range_STGA_SADDR_UID_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _ohp_core_field_range_STGA_SADDR_UID_set( LOG_CALLER_DEFN
                                                             ohp_core_buffer_t *b,
                                                             ohp_core_handle_t *h,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_field_range_STGA_SADDR_UID_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_field_range_STGA_SADDR_UID_set", stop_bit, 31 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ohp_core_field_range_STGA_SADDR_UID_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x0000000c bits 31:0) field STGA_SADDR_UID of register PMC_OHP_CORE_REG_STGA_SA_UID */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000000c bits 31:0) field STGA_SADDR_UID of register PMC_OHP_CORE_REG_STGA_SA_UID */
        _ohp_core_reg_STGA_SA_UID_field_set( LOG_CALLER_ARGS
                                             b,
                                             h,
                                             subfield_mask << (OHP_CORE_REG_STGA_SA_UID_BIT_STGA_SADDR_UID_OFF + subfield_offset),
                                             OHP_CORE_REG_STGA_SA_UID_BIT_STGA_SADDR_UID_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}


#ifndef ohp_core_field_range_STGA_SADDR_UID_get
#define ohp_core_field_range_STGA_SADDR_UID_get( b, h, start_bit, stop_bit ) \
       _ohp_core_field_range_STGA_SADDR_UID_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_field_range_STGA_SADDR_UID_get( LOG_CALLER_DEFN
                                                               ohp_core_buffer_t *b,
                                                               ohp_core_handle_t *h,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_field_range_STGA_SADDR_UID_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_field_range_STGA_SADDR_UID_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000000c bits 31:0) field STGA_SADDR_UID of register PMC_OHP_CORE_REG_STGA_SA_UID */
    reg_value = _ohp_core_reg_STGA_SA_UID_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_STGA_SA_UID_BIT_STGA_SADDR_UID_MSK)
                  >> OHP_CORE_REG_STGA_SA_UID_BIT_STGA_SADDR_UID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_STGA_SA_UID_BIT_STGA_SADDR_UID_MSK, OHP_CORE_REG_STGA_SA_UID_BIT_STGA_SADDR_UID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ohp_core_field_range_STGA_SADDR_UID_get", start_bit, stop_bit, value );

    return value;
}

#ifndef ohp_core_field_STGB_SADDR_UID_set
#define ohp_core_field_STGB_SADDR_UID_set( b, h, value ) \
       _ohp_core_field_STGB_SADDR_UID_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_field_STGB_SADDR_UID_set( LOG_CALLER_DEFN
                                                       ohp_core_buffer_t *b,
                                                       ohp_core_handle_t *h,
                                                       UINT32 value )
{
    IOLOG( "%s <= 0x%08x", "ohp_core_field_STGB_SADDR_UID_set", value );

    /* (0x00000010 bits 31:0) field STGB_SADDR_UID of register PMC_OHP_CORE_REG_STGB_SA_UID */
    _ohp_core_reg_STGB_SA_UID_field_set( LOG_CALLER_ARGS
                                         b,
                                         h,
                                         OHP_CORE_REG_STGB_SA_UID_BIT_STGB_SADDR_UID_MSK,
                                         OHP_CORE_REG_STGB_SA_UID_BIT_STGB_SADDR_UID_OFF,
                                         value);
}


#ifndef ohp_core_field_STGB_SADDR_UID_get
#define ohp_core_field_STGB_SADDR_UID_get( b, h ) \
       _ohp_core_field_STGB_SADDR_UID_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_STGB_SADDR_UID_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000010 bits 31:0) field STGB_SADDR_UID of register PMC_OHP_CORE_REG_STGB_SA_UID */
    reg_value = _ohp_core_reg_STGB_SA_UID_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_STGB_SA_UID_BIT_STGB_SADDR_UID_MSK) >> OHP_CORE_REG_STGB_SA_UID_BIT_STGB_SADDR_UID_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_STGB_SADDR_UID_get", value );

    return value;
}

#ifndef ohp_core_field_range_STGB_SADDR_UID_set
#define ohp_core_field_range_STGB_SADDR_UID_set( b, h, start_bit, stop_bit, value ) \
       _ohp_core_field_range_STGB_SADDR_UID_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _ohp_core_field_range_STGB_SADDR_UID_set( LOG_CALLER_DEFN
                                                             ohp_core_buffer_t *b,
                                                             ohp_core_handle_t *h,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_field_range_STGB_SADDR_UID_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_field_range_STGB_SADDR_UID_set", stop_bit, 31 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ohp_core_field_range_STGB_SADDR_UID_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000010 bits 31:0) field STGB_SADDR_UID of register PMC_OHP_CORE_REG_STGB_SA_UID */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000010 bits 31:0) field STGB_SADDR_UID of register PMC_OHP_CORE_REG_STGB_SA_UID */
        _ohp_core_reg_STGB_SA_UID_field_set( LOG_CALLER_ARGS
                                             b,
                                             h,
                                             subfield_mask << (OHP_CORE_REG_STGB_SA_UID_BIT_STGB_SADDR_UID_OFF + subfield_offset),
                                             OHP_CORE_REG_STGB_SA_UID_BIT_STGB_SADDR_UID_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}


#ifndef ohp_core_field_range_STGB_SADDR_UID_get
#define ohp_core_field_range_STGB_SADDR_UID_get( b, h, start_bit, stop_bit ) \
       _ohp_core_field_range_STGB_SADDR_UID_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_field_range_STGB_SADDR_UID_get( LOG_CALLER_DEFN
                                                               ohp_core_buffer_t *b,
                                                               ohp_core_handle_t *h,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_field_range_STGB_SADDR_UID_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_field_range_STGB_SADDR_UID_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000010 bits 31:0) field STGB_SADDR_UID of register PMC_OHP_CORE_REG_STGB_SA_UID */
    reg_value = _ohp_core_reg_STGB_SA_UID_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_STGB_SA_UID_BIT_STGB_SADDR_UID_MSK)
                  >> OHP_CORE_REG_STGB_SA_UID_BIT_STGB_SADDR_UID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_STGB_SA_UID_BIT_STGB_SADDR_UID_MSK, OHP_CORE_REG_STGB_SA_UID_BIT_STGB_SADDR_UID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ohp_core_field_range_STGB_SADDR_UID_get", start_bit, stop_bit, value );

    return value;
}

#ifndef ohp_core_field_STGA_DADDR_UID_set
#define ohp_core_field_STGA_DADDR_UID_set( b, h, value ) \
       _ohp_core_field_STGA_DADDR_UID_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_field_STGA_DADDR_UID_set( LOG_CALLER_DEFN
                                                       ohp_core_buffer_t *b,
                                                       ohp_core_handle_t *h,
                                                       UINT32 value )
{
    IOLOG( "%s <= 0x%08x", "ohp_core_field_STGA_DADDR_UID_set", value );

    /* (0x00000014 bits 31:0) field STGA_DADDR_UID of register PMC_OHP_CORE_REG_STGA_DA_UID */
    _ohp_core_reg_STGA_DA_UID_field_set( LOG_CALLER_ARGS
                                         b,
                                         h,
                                         OHP_CORE_REG_STGA_DA_UID_BIT_STGA_DADDR_UID_MSK,
                                         OHP_CORE_REG_STGA_DA_UID_BIT_STGA_DADDR_UID_OFF,
                                         value);
}


#ifndef ohp_core_field_STGA_DADDR_UID_get
#define ohp_core_field_STGA_DADDR_UID_get( b, h ) \
       _ohp_core_field_STGA_DADDR_UID_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_STGA_DADDR_UID_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000014 bits 31:0) field STGA_DADDR_UID of register PMC_OHP_CORE_REG_STGA_DA_UID */
    reg_value = _ohp_core_reg_STGA_DA_UID_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_STGA_DA_UID_BIT_STGA_DADDR_UID_MSK) >> OHP_CORE_REG_STGA_DA_UID_BIT_STGA_DADDR_UID_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_STGA_DADDR_UID_get", value );

    return value;
}

#ifndef ohp_core_field_range_STGA_DADDR_UID_set
#define ohp_core_field_range_STGA_DADDR_UID_set( b, h, start_bit, stop_bit, value ) \
       _ohp_core_field_range_STGA_DADDR_UID_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _ohp_core_field_range_STGA_DADDR_UID_set( LOG_CALLER_DEFN
                                                             ohp_core_buffer_t *b,
                                                             ohp_core_handle_t *h,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_field_range_STGA_DADDR_UID_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_field_range_STGA_DADDR_UID_set", stop_bit, 31 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ohp_core_field_range_STGA_DADDR_UID_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000014 bits 31:0) field STGA_DADDR_UID of register PMC_OHP_CORE_REG_STGA_DA_UID */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000014 bits 31:0) field STGA_DADDR_UID of register PMC_OHP_CORE_REG_STGA_DA_UID */
        _ohp_core_reg_STGA_DA_UID_field_set( LOG_CALLER_ARGS
                                             b,
                                             h,
                                             subfield_mask << (OHP_CORE_REG_STGA_DA_UID_BIT_STGA_DADDR_UID_OFF + subfield_offset),
                                             OHP_CORE_REG_STGA_DA_UID_BIT_STGA_DADDR_UID_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}


#ifndef ohp_core_field_range_STGA_DADDR_UID_get
#define ohp_core_field_range_STGA_DADDR_UID_get( b, h, start_bit, stop_bit ) \
       _ohp_core_field_range_STGA_DADDR_UID_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_field_range_STGA_DADDR_UID_get( LOG_CALLER_DEFN
                                                               ohp_core_buffer_t *b,
                                                               ohp_core_handle_t *h,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_field_range_STGA_DADDR_UID_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_field_range_STGA_DADDR_UID_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000014 bits 31:0) field STGA_DADDR_UID of register PMC_OHP_CORE_REG_STGA_DA_UID */
    reg_value = _ohp_core_reg_STGA_DA_UID_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_STGA_DA_UID_BIT_STGA_DADDR_UID_MSK)
                  >> OHP_CORE_REG_STGA_DA_UID_BIT_STGA_DADDR_UID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_STGA_DA_UID_BIT_STGA_DADDR_UID_MSK, OHP_CORE_REG_STGA_DA_UID_BIT_STGA_DADDR_UID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ohp_core_field_range_STGA_DADDR_UID_get", start_bit, stop_bit, value );

    return value;
}

#ifndef ohp_core_field_STGB_DADDR_UID_set
#define ohp_core_field_STGB_DADDR_UID_set( b, h, value ) \
       _ohp_core_field_STGB_DADDR_UID_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_field_STGB_DADDR_UID_set( LOG_CALLER_DEFN
                                                       ohp_core_buffer_t *b,
                                                       ohp_core_handle_t *h,
                                                       UINT32 value )
{
    IOLOG( "%s <= 0x%08x", "ohp_core_field_STGB_DADDR_UID_set", value );

    /* (0x00000018 bits 31:0) field STGB_DADDR_UID of register PMC_OHP_CORE_REG_STGB_DA_UID */
    _ohp_core_reg_STGB_DA_UID_field_set( LOG_CALLER_ARGS
                                         b,
                                         h,
                                         OHP_CORE_REG_STGB_DA_UID_BIT_STGB_DADDR_UID_MSK,
                                         OHP_CORE_REG_STGB_DA_UID_BIT_STGB_DADDR_UID_OFF,
                                         value);
}


#ifndef ohp_core_field_STGB_DADDR_UID_get
#define ohp_core_field_STGB_DADDR_UID_get( b, h ) \
       _ohp_core_field_STGB_DADDR_UID_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_STGB_DADDR_UID_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000018 bits 31:0) field STGB_DADDR_UID of register PMC_OHP_CORE_REG_STGB_DA_UID */
    reg_value = _ohp_core_reg_STGB_DA_UID_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_STGB_DA_UID_BIT_STGB_DADDR_UID_MSK) >> OHP_CORE_REG_STGB_DA_UID_BIT_STGB_DADDR_UID_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_STGB_DADDR_UID_get", value );

    return value;
}

#ifndef ohp_core_field_range_STGB_DADDR_UID_set
#define ohp_core_field_range_STGB_DADDR_UID_set( b, h, start_bit, stop_bit, value ) \
       _ohp_core_field_range_STGB_DADDR_UID_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _ohp_core_field_range_STGB_DADDR_UID_set( LOG_CALLER_DEFN
                                                             ohp_core_buffer_t *b,
                                                             ohp_core_handle_t *h,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_field_range_STGB_DADDR_UID_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_field_range_STGB_DADDR_UID_set", stop_bit, 31 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ohp_core_field_range_STGB_DADDR_UID_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000018 bits 31:0) field STGB_DADDR_UID of register PMC_OHP_CORE_REG_STGB_DA_UID */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000018 bits 31:0) field STGB_DADDR_UID of register PMC_OHP_CORE_REG_STGB_DA_UID */
        _ohp_core_reg_STGB_DA_UID_field_set( LOG_CALLER_ARGS
                                             b,
                                             h,
                                             subfield_mask << (OHP_CORE_REG_STGB_DA_UID_BIT_STGB_DADDR_UID_OFF + subfield_offset),
                                             OHP_CORE_REG_STGB_DA_UID_BIT_STGB_DADDR_UID_OFF + subfield_offset,
                                             value >> subfield_shift);
    }
}


#ifndef ohp_core_field_range_STGB_DADDR_UID_get
#define ohp_core_field_range_STGB_DADDR_UID_get( b, h, start_bit, stop_bit ) \
       _ohp_core_field_range_STGB_DADDR_UID_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_field_range_STGB_DADDR_UID_get( LOG_CALLER_DEFN
                                                               ohp_core_buffer_t *b,
                                                               ohp_core_handle_t *h,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_field_range_STGB_DADDR_UID_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_field_range_STGB_DADDR_UID_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000018 bits 31:0) field STGB_DADDR_UID of register PMC_OHP_CORE_REG_STGB_DA_UID */
    reg_value = _ohp_core_reg_STGB_DA_UID_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_STGB_DA_UID_BIT_STGB_DADDR_UID_MSK)
                  >> OHP_CORE_REG_STGB_DA_UID_BIT_STGB_DADDR_UID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_STGB_DA_UID_BIT_STGB_DADDR_UID_MSK, OHP_CORE_REG_STGB_DA_UID_BIT_STGB_DADDR_UID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ohp_core_field_range_STGB_DADDR_UID_get", start_bit, stop_bit, value );

    return value;
}

#ifndef ohp_core_field_RXFA_SD_CONFIG_set
#define ohp_core_field_RXFA_SD_CONFIG_set( b, h, value ) \
       _ohp_core_field_RXFA_SD_CONFIG_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_field_RXFA_SD_CONFIG_set( LOG_CALLER_DEFN
                                                       ohp_core_buffer_t *b,
                                                       ohp_core_handle_t *h,
                                                       UINT32 value )
{
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ohp_core_field_RXFA_SD_CONFIG_set", value, 63);
    IOLOG( "%s <= 0x%08x", "ohp_core_field_RXFA_SD_CONFIG_set", value );

    /* (0x0000001c bits 5:0) field RXFA_SD_CONFIG of register PMC_OHP_CORE_REG_RXFA_PWR_CTRL */
    _ohp_core_reg_RXFA_PWR_CTRL_field_set( LOG_CALLER_ARGS
                                           b,
                                           h,
                                           OHP_CORE_REG_RXFA_PWR_CTRL_BIT_RXFA_SD_CONFIG_MSK,
                                           OHP_CORE_REG_RXFA_PWR_CTRL_BIT_RXFA_SD_CONFIG_OFF,
                                           value);
}


#ifndef ohp_core_field_RXFA_SD_CONFIG_get
#define ohp_core_field_RXFA_SD_CONFIG_get( b, h ) \
       _ohp_core_field_RXFA_SD_CONFIG_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_RXFA_SD_CONFIG_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000001c bits 5:0) field RXFA_SD_CONFIG of register PMC_OHP_CORE_REG_RXFA_PWR_CTRL */
    reg_value = _ohp_core_reg_RXFA_PWR_CTRL_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_RXFA_PWR_CTRL_BIT_RXFA_SD_CONFIG_MSK) >> OHP_CORE_REG_RXFA_PWR_CTRL_BIT_RXFA_SD_CONFIG_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_RXFA_SD_CONFIG_get", value );

    return value;
}

#ifndef ohp_core_field_range_RXFA_SD_CONFIG_set
#define ohp_core_field_range_RXFA_SD_CONFIG_set( b, h, start_bit, stop_bit, value ) \
       _ohp_core_field_range_RXFA_SD_CONFIG_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _ohp_core_field_range_RXFA_SD_CONFIG_set( LOG_CALLER_DEFN
                                                             ohp_core_buffer_t *b,
                                                             ohp_core_handle_t *h,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_field_range_RXFA_SD_CONFIG_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_field_range_RXFA_SD_CONFIG_set", stop_bit, 5 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ohp_core_field_range_RXFA_SD_CONFIG_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x0000001c bits 5:0) field RXFA_SD_CONFIG of register PMC_OHP_CORE_REG_RXFA_PWR_CTRL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000001c bits 5:0) field RXFA_SD_CONFIG of register PMC_OHP_CORE_REG_RXFA_PWR_CTRL */
        _ohp_core_reg_RXFA_PWR_CTRL_field_set( LOG_CALLER_ARGS
                                               b,
                                               h,
                                               subfield_mask << (OHP_CORE_REG_RXFA_PWR_CTRL_BIT_RXFA_SD_CONFIG_OFF + subfield_offset),
                                               OHP_CORE_REG_RXFA_PWR_CTRL_BIT_RXFA_SD_CONFIG_OFF + subfield_offset,
                                               value >> subfield_shift);
    }
}


#ifndef ohp_core_field_range_RXFA_SD_CONFIG_get
#define ohp_core_field_range_RXFA_SD_CONFIG_get( b, h, start_bit, stop_bit ) \
       _ohp_core_field_range_RXFA_SD_CONFIG_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_field_range_RXFA_SD_CONFIG_get( LOG_CALLER_DEFN
                                                               ohp_core_buffer_t *b,
                                                               ohp_core_handle_t *h,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_field_range_RXFA_SD_CONFIG_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_field_range_RXFA_SD_CONFIG_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000001c bits 5:0) field RXFA_SD_CONFIG of register PMC_OHP_CORE_REG_RXFA_PWR_CTRL */
    reg_value = _ohp_core_reg_RXFA_PWR_CTRL_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_RXFA_PWR_CTRL_BIT_RXFA_SD_CONFIG_MSK)
                  >> OHP_CORE_REG_RXFA_PWR_CTRL_BIT_RXFA_SD_CONFIG_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_RXFA_PWR_CTRL_BIT_RXFA_SD_CONFIG_MSK, OHP_CORE_REG_RXFA_PWR_CTRL_BIT_RXFA_SD_CONFIG_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ohp_core_field_range_RXFA_SD_CONFIG_get", start_bit, stop_bit, value );

    return value;
}

#ifndef ohp_core_field_RXFB_SD_CONFIG_set
#define ohp_core_field_RXFB_SD_CONFIG_set( b, h, value ) \
       _ohp_core_field_RXFB_SD_CONFIG_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_field_RXFB_SD_CONFIG_set( LOG_CALLER_DEFN
                                                       ohp_core_buffer_t *b,
                                                       ohp_core_handle_t *h,
                                                       UINT32 value )
{
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ohp_core_field_RXFB_SD_CONFIG_set", value, 63);
    IOLOG( "%s <= 0x%08x", "ohp_core_field_RXFB_SD_CONFIG_set", value );

    /* (0x00000020 bits 5:0) field RXFB_SD_CONFIG of register PMC_OHP_CORE_REG_RXFB_PWR_CTRL */
    _ohp_core_reg_RXFB_PWR_CTRL_field_set( LOG_CALLER_ARGS
                                           b,
                                           h,
                                           OHP_CORE_REG_RXFB_PWR_CTRL_BIT_RXFB_SD_CONFIG_MSK,
                                           OHP_CORE_REG_RXFB_PWR_CTRL_BIT_RXFB_SD_CONFIG_OFF,
                                           value);
}


#ifndef ohp_core_field_RXFB_SD_CONFIG_get
#define ohp_core_field_RXFB_SD_CONFIG_get( b, h ) \
       _ohp_core_field_RXFB_SD_CONFIG_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_RXFB_SD_CONFIG_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000020 bits 5:0) field RXFB_SD_CONFIG of register PMC_OHP_CORE_REG_RXFB_PWR_CTRL */
    reg_value = _ohp_core_reg_RXFB_PWR_CTRL_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_RXFB_PWR_CTRL_BIT_RXFB_SD_CONFIG_MSK) >> OHP_CORE_REG_RXFB_PWR_CTRL_BIT_RXFB_SD_CONFIG_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_RXFB_SD_CONFIG_get", value );

    return value;
}

#ifndef ohp_core_field_range_RXFB_SD_CONFIG_set
#define ohp_core_field_range_RXFB_SD_CONFIG_set( b, h, start_bit, stop_bit, value ) \
       _ohp_core_field_range_RXFB_SD_CONFIG_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _ohp_core_field_range_RXFB_SD_CONFIG_set( LOG_CALLER_DEFN
                                                             ohp_core_buffer_t *b,
                                                             ohp_core_handle_t *h,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_field_range_RXFB_SD_CONFIG_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_field_range_RXFB_SD_CONFIG_set", stop_bit, 5 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ohp_core_field_range_RXFB_SD_CONFIG_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000020 bits 5:0) field RXFB_SD_CONFIG of register PMC_OHP_CORE_REG_RXFB_PWR_CTRL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000020 bits 5:0) field RXFB_SD_CONFIG of register PMC_OHP_CORE_REG_RXFB_PWR_CTRL */
        _ohp_core_reg_RXFB_PWR_CTRL_field_set( LOG_CALLER_ARGS
                                               b,
                                               h,
                                               subfield_mask << (OHP_CORE_REG_RXFB_PWR_CTRL_BIT_RXFB_SD_CONFIG_OFF + subfield_offset),
                                               OHP_CORE_REG_RXFB_PWR_CTRL_BIT_RXFB_SD_CONFIG_OFF + subfield_offset,
                                               value >> subfield_shift);
    }
}


#ifndef ohp_core_field_range_RXFB_SD_CONFIG_get
#define ohp_core_field_range_RXFB_SD_CONFIG_get( b, h, start_bit, stop_bit ) \
       _ohp_core_field_range_RXFB_SD_CONFIG_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_field_range_RXFB_SD_CONFIG_get( LOG_CALLER_DEFN
                                                               ohp_core_buffer_t *b,
                                                               ohp_core_handle_t *h,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_field_range_RXFB_SD_CONFIG_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_field_range_RXFB_SD_CONFIG_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000020 bits 5:0) field RXFB_SD_CONFIG of register PMC_OHP_CORE_REG_RXFB_PWR_CTRL */
    reg_value = _ohp_core_reg_RXFB_PWR_CTRL_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_RXFB_PWR_CTRL_BIT_RXFB_SD_CONFIG_MSK)
                  >> OHP_CORE_REG_RXFB_PWR_CTRL_BIT_RXFB_SD_CONFIG_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_RXFB_PWR_CTRL_BIT_RXFB_SD_CONFIG_MSK, OHP_CORE_REG_RXFB_PWR_CTRL_BIT_RXFB_SD_CONFIG_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ohp_core_field_range_RXFB_SD_CONFIG_get", start_bit, stop_bit, value );

    return value;
}

#ifndef ohp_core_field_TXFA_SD_CONFIG_set
#define ohp_core_field_TXFA_SD_CONFIG_set( b, h, value ) \
       _ohp_core_field_TXFA_SD_CONFIG_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_field_TXFA_SD_CONFIG_set( LOG_CALLER_DEFN
                                                       ohp_core_buffer_t *b,
                                                       ohp_core_handle_t *h,
                                                       UINT32 value )
{
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ohp_core_field_TXFA_SD_CONFIG_set", value, 63);
    IOLOG( "%s <= 0x%08x", "ohp_core_field_TXFA_SD_CONFIG_set", value );

    /* (0x00000024 bits 5:0) field TXFA_SD_CONFIG of register PMC_OHP_CORE_REG_TXFA_PWR_CTRL */
    _ohp_core_reg_TXFA_PWR_CTRL_field_set( LOG_CALLER_ARGS
                                           b,
                                           h,
                                           OHP_CORE_REG_TXFA_PWR_CTRL_BIT_TXFA_SD_CONFIG_MSK,
                                           OHP_CORE_REG_TXFA_PWR_CTRL_BIT_TXFA_SD_CONFIG_OFF,
                                           value);
}


#ifndef ohp_core_field_TXFA_SD_CONFIG_get
#define ohp_core_field_TXFA_SD_CONFIG_get( b, h ) \
       _ohp_core_field_TXFA_SD_CONFIG_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_TXFA_SD_CONFIG_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000024 bits 5:0) field TXFA_SD_CONFIG of register PMC_OHP_CORE_REG_TXFA_PWR_CTRL */
    reg_value = _ohp_core_reg_TXFA_PWR_CTRL_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_TXFA_PWR_CTRL_BIT_TXFA_SD_CONFIG_MSK) >> OHP_CORE_REG_TXFA_PWR_CTRL_BIT_TXFA_SD_CONFIG_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_TXFA_SD_CONFIG_get", value );

    return value;
}

#ifndef ohp_core_field_range_TXFA_SD_CONFIG_set
#define ohp_core_field_range_TXFA_SD_CONFIG_set( b, h, start_bit, stop_bit, value ) \
       _ohp_core_field_range_TXFA_SD_CONFIG_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _ohp_core_field_range_TXFA_SD_CONFIG_set( LOG_CALLER_DEFN
                                                             ohp_core_buffer_t *b,
                                                             ohp_core_handle_t *h,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_field_range_TXFA_SD_CONFIG_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_field_range_TXFA_SD_CONFIG_set", stop_bit, 5 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ohp_core_field_range_TXFA_SD_CONFIG_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000024 bits 5:0) field TXFA_SD_CONFIG of register PMC_OHP_CORE_REG_TXFA_PWR_CTRL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000024 bits 5:0) field TXFA_SD_CONFIG of register PMC_OHP_CORE_REG_TXFA_PWR_CTRL */
        _ohp_core_reg_TXFA_PWR_CTRL_field_set( LOG_CALLER_ARGS
                                               b,
                                               h,
                                               subfield_mask << (OHP_CORE_REG_TXFA_PWR_CTRL_BIT_TXFA_SD_CONFIG_OFF + subfield_offset),
                                               OHP_CORE_REG_TXFA_PWR_CTRL_BIT_TXFA_SD_CONFIG_OFF + subfield_offset,
                                               value >> subfield_shift);
    }
}


#ifndef ohp_core_field_range_TXFA_SD_CONFIG_get
#define ohp_core_field_range_TXFA_SD_CONFIG_get( b, h, start_bit, stop_bit ) \
       _ohp_core_field_range_TXFA_SD_CONFIG_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_field_range_TXFA_SD_CONFIG_get( LOG_CALLER_DEFN
                                                               ohp_core_buffer_t *b,
                                                               ohp_core_handle_t *h,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_field_range_TXFA_SD_CONFIG_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_field_range_TXFA_SD_CONFIG_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000024 bits 5:0) field TXFA_SD_CONFIG of register PMC_OHP_CORE_REG_TXFA_PWR_CTRL */
    reg_value = _ohp_core_reg_TXFA_PWR_CTRL_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_TXFA_PWR_CTRL_BIT_TXFA_SD_CONFIG_MSK)
                  >> OHP_CORE_REG_TXFA_PWR_CTRL_BIT_TXFA_SD_CONFIG_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_TXFA_PWR_CTRL_BIT_TXFA_SD_CONFIG_MSK, OHP_CORE_REG_TXFA_PWR_CTRL_BIT_TXFA_SD_CONFIG_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ohp_core_field_range_TXFA_SD_CONFIG_get", start_bit, stop_bit, value );

    return value;
}

#ifndef ohp_core_field_TXFB_SD_CONFIG_set
#define ohp_core_field_TXFB_SD_CONFIG_set( b, h, value ) \
       _ohp_core_field_TXFB_SD_CONFIG_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_field_TXFB_SD_CONFIG_set( LOG_CALLER_DEFN
                                                       ohp_core_buffer_t *b,
                                                       ohp_core_handle_t *h,
                                                       UINT32 value )
{
    if (value > 63)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ohp_core_field_TXFB_SD_CONFIG_set", value, 63);
    IOLOG( "%s <= 0x%08x", "ohp_core_field_TXFB_SD_CONFIG_set", value );

    /* (0x00000028 bits 5:0) field TXFB_SD_CONFIG of register PMC_OHP_CORE_REG_TXFB_PWR_CTRL */
    _ohp_core_reg_TXFB_PWR_CTRL_field_set( LOG_CALLER_ARGS
                                           b,
                                           h,
                                           OHP_CORE_REG_TXFB_PWR_CTRL_BIT_TXFB_SD_CONFIG_MSK,
                                           OHP_CORE_REG_TXFB_PWR_CTRL_BIT_TXFB_SD_CONFIG_OFF,
                                           value);
}


#ifndef ohp_core_field_TXFB_SD_CONFIG_get
#define ohp_core_field_TXFB_SD_CONFIG_get( b, h ) \
       _ohp_core_field_TXFB_SD_CONFIG_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_TXFB_SD_CONFIG_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000028 bits 5:0) field TXFB_SD_CONFIG of register PMC_OHP_CORE_REG_TXFB_PWR_CTRL */
    reg_value = _ohp_core_reg_TXFB_PWR_CTRL_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_TXFB_PWR_CTRL_BIT_TXFB_SD_CONFIG_MSK) >> OHP_CORE_REG_TXFB_PWR_CTRL_BIT_TXFB_SD_CONFIG_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_TXFB_SD_CONFIG_get", value );

    return value;
}

#ifndef ohp_core_field_range_TXFB_SD_CONFIG_set
#define ohp_core_field_range_TXFB_SD_CONFIG_set( b, h, start_bit, stop_bit, value ) \
       _ohp_core_field_range_TXFB_SD_CONFIG_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _ohp_core_field_range_TXFB_SD_CONFIG_set( LOG_CALLER_DEFN
                                                             ohp_core_buffer_t *b,
                                                             ohp_core_handle_t *h,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_field_range_TXFB_SD_CONFIG_set", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_field_range_TXFB_SD_CONFIG_set", stop_bit, 5 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ohp_core_field_range_TXFB_SD_CONFIG_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000028 bits 5:0) field TXFB_SD_CONFIG of register PMC_OHP_CORE_REG_TXFB_PWR_CTRL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 5) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 5;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000028 bits 5:0) field TXFB_SD_CONFIG of register PMC_OHP_CORE_REG_TXFB_PWR_CTRL */
        _ohp_core_reg_TXFB_PWR_CTRL_field_set( LOG_CALLER_ARGS
                                               b,
                                               h,
                                               subfield_mask << (OHP_CORE_REG_TXFB_PWR_CTRL_BIT_TXFB_SD_CONFIG_OFF + subfield_offset),
                                               OHP_CORE_REG_TXFB_PWR_CTRL_BIT_TXFB_SD_CONFIG_OFF + subfield_offset,
                                               value >> subfield_shift);
    }
}


#ifndef ohp_core_field_range_TXFB_SD_CONFIG_get
#define ohp_core_field_range_TXFB_SD_CONFIG_get( b, h, start_bit, stop_bit ) \
       _ohp_core_field_range_TXFB_SD_CONFIG_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_field_range_TXFB_SD_CONFIG_get( LOG_CALLER_DEFN
                                                               ohp_core_buffer_t *b,
                                                               ohp_core_handle_t *h,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_field_range_TXFB_SD_CONFIG_get", stop_bit, start_bit );
    if (stop_bit > 5) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_field_range_TXFB_SD_CONFIG_get", stop_bit, 5 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 5) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 5;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000028 bits 5:0) field TXFB_SD_CONFIG of register PMC_OHP_CORE_REG_TXFB_PWR_CTRL */
    reg_value = _ohp_core_reg_TXFB_PWR_CTRL_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_TXFB_PWR_CTRL_BIT_TXFB_SD_CONFIG_MSK)
                  >> OHP_CORE_REG_TXFB_PWR_CTRL_BIT_TXFB_SD_CONFIG_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_TXFB_PWR_CTRL_BIT_TXFB_SD_CONFIG_MSK, OHP_CORE_REG_TXFB_PWR_CTRL_BIT_TXFB_SD_CONFIG_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ohp_core_field_range_TXFB_SD_CONFIG_get", start_bit, stop_bit, value );

    return value;
}

#ifndef ohp_core_field_CFC_DBG_ID_set
#define ohp_core_field_CFC_DBG_ID_set( b, h, value ) \
       _ohp_core_field_CFC_DBG_ID_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_field_CFC_DBG_ID_set( LOG_CALLER_DEFN
                                                   ohp_core_buffer_t *b,
                                                   ohp_core_handle_t *h,
                                                   UINT32 value )
{
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ohp_core_field_CFC_DBG_ID_set", value, 3);
    IOLOG( "%s <= 0x%08x", "ohp_core_field_CFC_DBG_ID_set", value );

    /* (0x00001384 bits 1:0) field CFC_DBG_ID of register PMC_OHP_CORE_REG_CFC_DEBUG_ID */
    _ohp_core_reg_CFC_DEBUG_ID_field_set( LOG_CALLER_ARGS
                                          b,
                                          h,
                                          OHP_CORE_REG_CFC_DEBUG_ID_BIT_CFC_DBG_ID_MSK,
                                          OHP_CORE_REG_CFC_DEBUG_ID_BIT_CFC_DBG_ID_OFF,
                                          value);
}


#ifndef ohp_core_field_CFC_DBG_ID_get
#define ohp_core_field_CFC_DBG_ID_get( b, h ) \
       _ohp_core_field_CFC_DBG_ID_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_CFC_DBG_ID_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001384 bits 1:0) field CFC_DBG_ID of register PMC_OHP_CORE_REG_CFC_DEBUG_ID */
    reg_value = _ohp_core_reg_CFC_DEBUG_ID_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_CFC_DEBUG_ID_BIT_CFC_DBG_ID_MSK) >> OHP_CORE_REG_CFC_DEBUG_ID_BIT_CFC_DBG_ID_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_CFC_DBG_ID_get", value );

    return value;
}

#ifndef ohp_core_field_range_CFC_DBG_ID_set
#define ohp_core_field_range_CFC_DBG_ID_set( b, h, start_bit, stop_bit, value ) \
       _ohp_core_field_range_CFC_DBG_ID_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _ohp_core_field_range_CFC_DBG_ID_set( LOG_CALLER_DEFN
                                                         ohp_core_buffer_t *b,
                                                         ohp_core_handle_t *h,
                                                         UINT32 start_bit,
                                                         UINT32 stop_bit,
                                                         UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_field_range_CFC_DBG_ID_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_field_range_CFC_DBG_ID_set", stop_bit, 1 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ohp_core_field_range_CFC_DBG_ID_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00001384 bits 1:0) field CFC_DBG_ID of register PMC_OHP_CORE_REG_CFC_DEBUG_ID */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 1) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 1;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001384 bits 1:0) field CFC_DBG_ID of register PMC_OHP_CORE_REG_CFC_DEBUG_ID */
        _ohp_core_reg_CFC_DEBUG_ID_field_set( LOG_CALLER_ARGS
                                              b,
                                              h,
                                              subfield_mask << (OHP_CORE_REG_CFC_DEBUG_ID_BIT_CFC_DBG_ID_OFF + subfield_offset),
                                              OHP_CORE_REG_CFC_DEBUG_ID_BIT_CFC_DBG_ID_OFF + subfield_offset,
                                              value >> subfield_shift);
    }
}


#ifndef ohp_core_field_range_CFC_DBG_ID_get
#define ohp_core_field_range_CFC_DBG_ID_get( b, h, start_bit, stop_bit ) \
       _ohp_core_field_range_CFC_DBG_ID_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_field_range_CFC_DBG_ID_get( LOG_CALLER_DEFN
                                                           ohp_core_buffer_t *b,
                                                           ohp_core_handle_t *h,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_field_range_CFC_DBG_ID_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_field_range_CFC_DBG_ID_get", stop_bit, 1 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 1) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 1;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001384 bits 1:0) field CFC_DBG_ID of register PMC_OHP_CORE_REG_CFC_DEBUG_ID */
    reg_value = _ohp_core_reg_CFC_DEBUG_ID_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_CFC_DEBUG_ID_BIT_CFC_DBG_ID_MSK)
                  >> OHP_CORE_REG_CFC_DEBUG_ID_BIT_CFC_DBG_ID_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_CFC_DEBUG_ID_BIT_CFC_DBG_ID_MSK, OHP_CORE_REG_CFC_DEBUG_ID_BIT_CFC_DBG_ID_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ohp_core_field_range_CFC_DBG_ID_get", start_bit, stop_bit, value );

    return value;
}

#ifndef ohp_core_field_CFC_DBG_RADDR_set
#define ohp_core_field_CFC_DBG_RADDR_set( b, h, value ) \
       _ohp_core_field_CFC_DBG_RADDR_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_field_CFC_DBG_RADDR_set( LOG_CALLER_DEFN
                                                      ohp_core_buffer_t *b,
                                                      ohp_core_handle_t *h,
                                                      UINT32 value )
{
    if (value > 2047)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ohp_core_field_CFC_DBG_RADDR_set", value, 2047);
    IOLOG( "%s <= 0x%08x", "ohp_core_field_CFC_DBG_RADDR_set", value );

    /* (0x00001388 bits 10:0) field CFC_DBG_RADDR of register PMC_OHP_CORE_REG_CFC_DEBUG_CTRL */
    _ohp_core_reg_CFC_DEBUG_CTRL_field_set( LOG_CALLER_ARGS
                                            b,
                                            h,
                                            OHP_CORE_REG_CFC_DEBUG_CTRL_BIT_CFC_DBG_RADDR_MSK,
                                            OHP_CORE_REG_CFC_DEBUG_CTRL_BIT_CFC_DBG_RADDR_OFF,
                                            value);
}


#ifndef ohp_core_field_CFC_DBG_RADDR_get
#define ohp_core_field_CFC_DBG_RADDR_get( b, h ) \
       _ohp_core_field_CFC_DBG_RADDR_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_CFC_DBG_RADDR_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001388 bits 10:0) field CFC_DBG_RADDR of register PMC_OHP_CORE_REG_CFC_DEBUG_CTRL */
    reg_value = _ohp_core_reg_CFC_DEBUG_CTRL_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_CFC_DEBUG_CTRL_BIT_CFC_DBG_RADDR_MSK) >> OHP_CORE_REG_CFC_DEBUG_CTRL_BIT_CFC_DBG_RADDR_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_CFC_DBG_RADDR_get", value );

    return value;
}

#ifndef ohp_core_field_range_CFC_DBG_RADDR_set
#define ohp_core_field_range_CFC_DBG_RADDR_set( b, h, start_bit, stop_bit, value ) \
       _ohp_core_field_range_CFC_DBG_RADDR_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _ohp_core_field_range_CFC_DBG_RADDR_set( LOG_CALLER_DEFN
                                                            ohp_core_buffer_t *b,
                                                            ohp_core_handle_t *h,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_field_range_CFC_DBG_RADDR_set", stop_bit, start_bit );
    if (stop_bit > 10) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_field_range_CFC_DBG_RADDR_set", stop_bit, 10 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ohp_core_field_range_CFC_DBG_RADDR_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00001388 bits 10:0) field CFC_DBG_RADDR of register PMC_OHP_CORE_REG_CFC_DEBUG_CTRL */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 10) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 10;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00001388 bits 10:0) field CFC_DBG_RADDR of register PMC_OHP_CORE_REG_CFC_DEBUG_CTRL */
        _ohp_core_reg_CFC_DEBUG_CTRL_field_set( LOG_CALLER_ARGS
                                                b,
                                                h,
                                                subfield_mask << (OHP_CORE_REG_CFC_DEBUG_CTRL_BIT_CFC_DBG_RADDR_OFF + subfield_offset),
                                                OHP_CORE_REG_CFC_DEBUG_CTRL_BIT_CFC_DBG_RADDR_OFF + subfield_offset,
                                                value >> subfield_shift);
    }
}


#ifndef ohp_core_field_range_CFC_DBG_RADDR_get
#define ohp_core_field_range_CFC_DBG_RADDR_get( b, h, start_bit, stop_bit ) \
       _ohp_core_field_range_CFC_DBG_RADDR_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_field_range_CFC_DBG_RADDR_get( LOG_CALLER_DEFN
                                                              ohp_core_buffer_t *b,
                                                              ohp_core_handle_t *h,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_field_range_CFC_DBG_RADDR_get", stop_bit, start_bit );
    if (stop_bit > 10) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_field_range_CFC_DBG_RADDR_get", stop_bit, 10 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 10) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 10;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00001388 bits 10:0) field CFC_DBG_RADDR of register PMC_OHP_CORE_REG_CFC_DEBUG_CTRL */
    reg_value = _ohp_core_reg_CFC_DEBUG_CTRL_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_CFC_DEBUG_CTRL_BIT_CFC_DBG_RADDR_MSK)
                  >> OHP_CORE_REG_CFC_DEBUG_CTRL_BIT_CFC_DBG_RADDR_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_CFC_DEBUG_CTRL_BIT_CFC_DBG_RADDR_MSK, OHP_CORE_REG_CFC_DEBUG_CTRL_BIT_CFC_DBG_RADDR_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ohp_core_field_range_CFC_DBG_RADDR_get", start_bit, stop_bit, value );

    return value;
}

#ifndef ohp_core_field_SGMII_TX_FLIP_set
#define ohp_core_field_SGMII_TX_FLIP_set( b, h, value ) \
       _ohp_core_field_SGMII_TX_FLIP_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_field_SGMII_TX_FLIP_set( LOG_CALLER_DEFN
                                                      ohp_core_buffer_t *b,
                                                      ohp_core_handle_t *h,
                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ohp_core_field_SGMII_TX_FLIP_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ohp_core_field_SGMII_TX_FLIP_set", value );

    /* (0x00001390 bits 0) field SGMII_TX_FLIP of register PMC_OHP_CORE_REG_OHP_ENET_IO_CTRL */
    _ohp_core_reg_OHP_ENET_IO_CTRL_field_set( LOG_CALLER_ARGS
                                              b,
                                              h,
                                              OHP_CORE_REG_OHP_ENET_IO_CTRL_BIT_SGMII_TX_FLIP_MSK,
                                              OHP_CORE_REG_OHP_ENET_IO_CTRL_BIT_SGMII_TX_FLIP_OFF,
                                              value);
}


#ifndef ohp_core_field_SGMII_TX_FLIP_get
#define ohp_core_field_SGMII_TX_FLIP_get( b, h ) \
       _ohp_core_field_SGMII_TX_FLIP_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_SGMII_TX_FLIP_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001390 bits 0) field SGMII_TX_FLIP of register PMC_OHP_CORE_REG_OHP_ENET_IO_CTRL */
    reg_value = _ohp_core_reg_OHP_ENET_IO_CTRL_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_OHP_ENET_IO_CTRL_BIT_SGMII_TX_FLIP_MSK) >> OHP_CORE_REG_OHP_ENET_IO_CTRL_BIT_SGMII_TX_FLIP_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_SGMII_TX_FLIP_get", value );

    return value;
}

#ifndef ohp_core_field_SGMII_RX_FLIP_set
#define ohp_core_field_SGMII_RX_FLIP_set( b, h, value ) \
       _ohp_core_field_SGMII_RX_FLIP_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_field_SGMII_RX_FLIP_set( LOG_CALLER_DEFN
                                                      ohp_core_buffer_t *b,
                                                      ohp_core_handle_t *h,
                                                      UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ohp_core_field_SGMII_RX_FLIP_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ohp_core_field_SGMII_RX_FLIP_set", value );

    /* (0x00001390 bits 8) field SGMII_RX_FLIP of register PMC_OHP_CORE_REG_OHP_ENET_IO_CTRL */
    _ohp_core_reg_OHP_ENET_IO_CTRL_field_set( LOG_CALLER_ARGS
                                              b,
                                              h,
                                              OHP_CORE_REG_OHP_ENET_IO_CTRL_BIT_SGMII_RX_FLIP_MSK,
                                              OHP_CORE_REG_OHP_ENET_IO_CTRL_BIT_SGMII_RX_FLIP_OFF,
                                              value);
}


#ifndef ohp_core_field_SGMII_RX_FLIP_get
#define ohp_core_field_SGMII_RX_FLIP_get( b, h ) \
       _ohp_core_field_SGMII_RX_FLIP_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_SGMII_RX_FLIP_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001390 bits 8) field SGMII_RX_FLIP of register PMC_OHP_CORE_REG_OHP_ENET_IO_CTRL */
    reg_value = _ohp_core_reg_OHP_ENET_IO_CTRL_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_OHP_ENET_IO_CTRL_BIT_SGMII_RX_FLIP_MSK) >> OHP_CORE_REG_OHP_ENET_IO_CTRL_BIT_SGMII_RX_FLIP_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_SGMII_RX_FLIP_get", value );

    return value;
}

#ifndef ohp_core_field_FEGE_TX_FLIP_set
#define ohp_core_field_FEGE_TX_FLIP_set( b, h, value ) \
       _ohp_core_field_FEGE_TX_FLIP_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_field_FEGE_TX_FLIP_set( LOG_CALLER_DEFN
                                                     ohp_core_buffer_t *b,
                                                     ohp_core_handle_t *h,
                                                     UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ohp_core_field_FEGE_TX_FLIP_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ohp_core_field_FEGE_TX_FLIP_set", value );

    /* (0x00001390 bits 16) field FEGE_TX_FLIP of register PMC_OHP_CORE_REG_OHP_ENET_IO_CTRL */
    _ohp_core_reg_OHP_ENET_IO_CTRL_field_set( LOG_CALLER_ARGS
                                              b,
                                              h,
                                              OHP_CORE_REG_OHP_ENET_IO_CTRL_BIT_FEGE_TX_FLIP_MSK,
                                              OHP_CORE_REG_OHP_ENET_IO_CTRL_BIT_FEGE_TX_FLIP_OFF,
                                              value);
}


#ifndef ohp_core_field_FEGE_TX_FLIP_get
#define ohp_core_field_FEGE_TX_FLIP_get( b, h ) \
       _ohp_core_field_FEGE_TX_FLIP_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_FEGE_TX_FLIP_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001390 bits 16) field FEGE_TX_FLIP of register PMC_OHP_CORE_REG_OHP_ENET_IO_CTRL */
    reg_value = _ohp_core_reg_OHP_ENET_IO_CTRL_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_OHP_ENET_IO_CTRL_BIT_FEGE_TX_FLIP_MSK) >> OHP_CORE_REG_OHP_ENET_IO_CTRL_BIT_FEGE_TX_FLIP_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_FEGE_TX_FLIP_get", value );

    return value;
}

#ifndef ohp_core_field_FEGE_RX_FLIP_set
#define ohp_core_field_FEGE_RX_FLIP_set( b, h, value ) \
       _ohp_core_field_FEGE_RX_FLIP_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_field_FEGE_RX_FLIP_set( LOG_CALLER_DEFN
                                                     ohp_core_buffer_t *b,
                                                     ohp_core_handle_t *h,
                                                     UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ohp_core_field_FEGE_RX_FLIP_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ohp_core_field_FEGE_RX_FLIP_set", value );

    /* (0x00001390 bits 24) field FEGE_RX_FLIP of register PMC_OHP_CORE_REG_OHP_ENET_IO_CTRL */
    _ohp_core_reg_OHP_ENET_IO_CTRL_field_set( LOG_CALLER_ARGS
                                              b,
                                              h,
                                              OHP_CORE_REG_OHP_ENET_IO_CTRL_BIT_FEGE_RX_FLIP_MSK,
                                              OHP_CORE_REG_OHP_ENET_IO_CTRL_BIT_FEGE_RX_FLIP_OFF,
                                              value);
}


#ifndef ohp_core_field_FEGE_RX_FLIP_get
#define ohp_core_field_FEGE_RX_FLIP_get( b, h ) \
       _ohp_core_field_FEGE_RX_FLIP_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_FEGE_RX_FLIP_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001390 bits 24) field FEGE_RX_FLIP of register PMC_OHP_CORE_REG_OHP_ENET_IO_CTRL */
    reg_value = _ohp_core_reg_OHP_ENET_IO_CTRL_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_OHP_ENET_IO_CTRL_BIT_FEGE_RX_FLIP_MSK) >> OHP_CORE_REG_OHP_ENET_IO_CTRL_BIT_FEGE_RX_FLIP_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_FEGE_RX_FLIP_get", value );

    return value;
}

/*
 * ==================================================================================
 *           Parameter Access Functions for Paramset config_N_burstsize3
 * ==================================================================================
 */

#ifndef ohp_core_lfield_TXFA_GCC0_INS_MASK_set
#define ohp_core_lfield_TXFA_GCC0_INS_MASK_set( b, h, value ) \
       _ohp_core_lfield_TXFA_GCC0_INS_MASK_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_TXFA_GCC0_INS_MASK_set( LOG_CALLER_DEFN
                                                            ohp_core_buffer_t *b,
                                                            ohp_core_handle_t *h,
                                                            UINT32 value[3] )
{
    IOLOG( "%s ", "ohp_core_lfield_TXFA_GCC0_INS_MASK_set");
    _ohp_core_reg_TXFA_GCC0_MASK_array_burst_write( LOG_CALLER_ARGS
                                                    b,
                                                    h,
                                                    0,
                                                    3,
                                                    value);
}


#ifndef ohp_core_lfield_TXFA_GCC0_INS_MASK_get
#define ohp_core_lfield_TXFA_GCC0_INS_MASK_get( b, h, value ) \
       _ohp_core_lfield_TXFA_GCC0_INS_MASK_get( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_TXFA_GCC0_INS_MASK_get( LOG_CALLER_DEFN
                                                            ohp_core_buffer_t *b,
                                                            ohp_core_handle_t *h,
                                                            UINT32 value[3] )
{
    IOLOG( "%s ", "ohp_core_lfield_TXFA_GCC0_INS_MASK_get");
    _ohp_core_reg_TXFA_GCC0_MASK_array_burst_read( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   0,
                                                   3,
                                                   (UINT32 *)value);
}


#ifndef ohp_core_lfield_range_TXFA_GCC0_INS_MASK_set
#define ohp_core_lfield_range_TXFA_GCC0_INS_MASK_set( b, h, start_bit, stop_bit, value ) \
       _ohp_core_lfield_range_TXFA_GCC0_INS_MASK_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _ohp_core_lfield_range_TXFA_GCC0_INS_MASK_set( LOG_CALLER_DEFN
                                                                  ohp_core_buffer_t *b,
                                                                  ohp_core_handle_t *h,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ohp_core_lfield_range_TXFA_GCC0_INS_MASK_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ohp_core_lfield_range_TXFA_GCC0_INS_MASK_set", start_bit, stop_bit, value);
    _ohp_core_reg_TXFA_GCC0_MASK_array_field_set( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  word_number,
                                                  mask,
                                                  field_ofs,
                                                  value);
}


#ifndef ohp_core_lfield_range_TXFA_GCC0_INS_MASK_get
#define ohp_core_lfield_range_TXFA_GCC0_INS_MASK_get( b, h, start_bit, stop_bit ) \
       _ohp_core_lfield_range_TXFA_GCC0_INS_MASK_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_lfield_range_TXFA_GCC0_INS_MASK_get( LOG_CALLER_DEFN
                                                                    ohp_core_buffer_t *b,
                                                                    ohp_core_handle_t *h,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = 0xffffffff >> (32-num_bits);
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ohp_core_lfield_range_TXFA_GCC0_INS_MASK_get", start_bit, stop_bit );
    }
    reg_value = _ohp_core_reg_TXFA_GCC0_MASK_array_read( LOG_CALLER_ARGS
                                                         b,
                                                         h,
                                                         word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ohp_core_lfield_range_TXFA_GCC0_INS_MASK_get", start_bit, stop_bit, value );
    return value;
}


#ifndef ohp_core_lfield_TXFA_GCC1_INS_MASK_set
#define ohp_core_lfield_TXFA_GCC1_INS_MASK_set( b, h, value ) \
       _ohp_core_lfield_TXFA_GCC1_INS_MASK_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_TXFA_GCC1_INS_MASK_set( LOG_CALLER_DEFN
                                                            ohp_core_buffer_t *b,
                                                            ohp_core_handle_t *h,
                                                            UINT32 value[3] )
{
    IOLOG( "%s ", "ohp_core_lfield_TXFA_GCC1_INS_MASK_set");
    _ohp_core_reg_TXFA_GCC1_MASK_array_burst_write( LOG_CALLER_ARGS
                                                    b,
                                                    h,
                                                    0,
                                                    3,
                                                    value);
}


#ifndef ohp_core_lfield_TXFA_GCC1_INS_MASK_get
#define ohp_core_lfield_TXFA_GCC1_INS_MASK_get( b, h, value ) \
       _ohp_core_lfield_TXFA_GCC1_INS_MASK_get( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_TXFA_GCC1_INS_MASK_get( LOG_CALLER_DEFN
                                                            ohp_core_buffer_t *b,
                                                            ohp_core_handle_t *h,
                                                            UINT32 value[3] )
{
    IOLOG( "%s ", "ohp_core_lfield_TXFA_GCC1_INS_MASK_get");
    _ohp_core_reg_TXFA_GCC1_MASK_array_burst_read( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   0,
                                                   3,
                                                   (UINT32 *)value);
}


#ifndef ohp_core_lfield_range_TXFA_GCC1_INS_MASK_set
#define ohp_core_lfield_range_TXFA_GCC1_INS_MASK_set( b, h, start_bit, stop_bit, value ) \
       _ohp_core_lfield_range_TXFA_GCC1_INS_MASK_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _ohp_core_lfield_range_TXFA_GCC1_INS_MASK_set( LOG_CALLER_DEFN
                                                                  ohp_core_buffer_t *b,
                                                                  ohp_core_handle_t *h,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ohp_core_lfield_range_TXFA_GCC1_INS_MASK_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ohp_core_lfield_range_TXFA_GCC1_INS_MASK_set", start_bit, stop_bit, value);
    _ohp_core_reg_TXFA_GCC1_MASK_array_field_set( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  word_number,
                                                  mask,
                                                  field_ofs,
                                                  value);
}


#ifndef ohp_core_lfield_range_TXFA_GCC1_INS_MASK_get
#define ohp_core_lfield_range_TXFA_GCC1_INS_MASK_get( b, h, start_bit, stop_bit ) \
       _ohp_core_lfield_range_TXFA_GCC1_INS_MASK_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_lfield_range_TXFA_GCC1_INS_MASK_get( LOG_CALLER_DEFN
                                                                    ohp_core_buffer_t *b,
                                                                    ohp_core_handle_t *h,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = 0xffffffff >> (32-num_bits);
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ohp_core_lfield_range_TXFA_GCC1_INS_MASK_get", start_bit, stop_bit );
    }
    reg_value = _ohp_core_reg_TXFA_GCC1_MASK_array_read( LOG_CALLER_ARGS
                                                         b,
                                                         h,
                                                         word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ohp_core_lfield_range_TXFA_GCC1_INS_MASK_get", start_bit, stop_bit, value );
    return value;
}


#ifndef ohp_core_lfield_TXFA_GCC2_INS_MASK_set
#define ohp_core_lfield_TXFA_GCC2_INS_MASK_set( b, h, value ) \
       _ohp_core_lfield_TXFA_GCC2_INS_MASK_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_TXFA_GCC2_INS_MASK_set( LOG_CALLER_DEFN
                                                            ohp_core_buffer_t *b,
                                                            ohp_core_handle_t *h,
                                                            UINT32 value[3] )
{
    IOLOG( "%s ", "ohp_core_lfield_TXFA_GCC2_INS_MASK_set");
    _ohp_core_reg_TXFA_GCC2_MASK_array_burst_write( LOG_CALLER_ARGS
                                                    b,
                                                    h,
                                                    0,
                                                    3,
                                                    value);
}


#ifndef ohp_core_lfield_TXFA_GCC2_INS_MASK_get
#define ohp_core_lfield_TXFA_GCC2_INS_MASK_get( b, h, value ) \
       _ohp_core_lfield_TXFA_GCC2_INS_MASK_get( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_TXFA_GCC2_INS_MASK_get( LOG_CALLER_DEFN
                                                            ohp_core_buffer_t *b,
                                                            ohp_core_handle_t *h,
                                                            UINT32 value[3] )
{
    IOLOG( "%s ", "ohp_core_lfield_TXFA_GCC2_INS_MASK_get");
    _ohp_core_reg_TXFA_GCC2_MASK_array_burst_read( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   0,
                                                   3,
                                                   (UINT32 *)value);
}


#ifndef ohp_core_lfield_range_TXFA_GCC2_INS_MASK_set
#define ohp_core_lfield_range_TXFA_GCC2_INS_MASK_set( b, h, start_bit, stop_bit, value ) \
       _ohp_core_lfield_range_TXFA_GCC2_INS_MASK_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _ohp_core_lfield_range_TXFA_GCC2_INS_MASK_set( LOG_CALLER_DEFN
                                                                  ohp_core_buffer_t *b,
                                                                  ohp_core_handle_t *h,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ohp_core_lfield_range_TXFA_GCC2_INS_MASK_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ohp_core_lfield_range_TXFA_GCC2_INS_MASK_set", start_bit, stop_bit, value);
    _ohp_core_reg_TXFA_GCC2_MASK_array_field_set( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  word_number,
                                                  mask,
                                                  field_ofs,
                                                  value);
}


#ifndef ohp_core_lfield_range_TXFA_GCC2_INS_MASK_get
#define ohp_core_lfield_range_TXFA_GCC2_INS_MASK_get( b, h, start_bit, stop_bit ) \
       _ohp_core_lfield_range_TXFA_GCC2_INS_MASK_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_lfield_range_TXFA_GCC2_INS_MASK_get( LOG_CALLER_DEFN
                                                                    ohp_core_buffer_t *b,
                                                                    ohp_core_handle_t *h,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = 0xffffffff >> (32-num_bits);
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ohp_core_lfield_range_TXFA_GCC2_INS_MASK_get", start_bit, stop_bit );
    }
    reg_value = _ohp_core_reg_TXFA_GCC2_MASK_array_read( LOG_CALLER_ARGS
                                                         b,
                                                         h,
                                                         word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ohp_core_lfield_range_TXFA_GCC2_INS_MASK_get", start_bit, stop_bit, value );
    return value;
}


#ifndef ohp_core_lfield_TXFB_GCC0_INS_MASK_set
#define ohp_core_lfield_TXFB_GCC0_INS_MASK_set( b, h, value ) \
       _ohp_core_lfield_TXFB_GCC0_INS_MASK_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_TXFB_GCC0_INS_MASK_set( LOG_CALLER_DEFN
                                                            ohp_core_buffer_t *b,
                                                            ohp_core_handle_t *h,
                                                            UINT32 value[3] )
{
    IOLOG( "%s ", "ohp_core_lfield_TXFB_GCC0_INS_MASK_set");
    _ohp_core_reg_TXFB_GCC0_MASK_array_burst_write( LOG_CALLER_ARGS
                                                    b,
                                                    h,
                                                    0,
                                                    3,
                                                    value);
}


#ifndef ohp_core_lfield_TXFB_GCC0_INS_MASK_get
#define ohp_core_lfield_TXFB_GCC0_INS_MASK_get( b, h, value ) \
       _ohp_core_lfield_TXFB_GCC0_INS_MASK_get( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_TXFB_GCC0_INS_MASK_get( LOG_CALLER_DEFN
                                                            ohp_core_buffer_t *b,
                                                            ohp_core_handle_t *h,
                                                            UINT32 value[3] )
{
    IOLOG( "%s ", "ohp_core_lfield_TXFB_GCC0_INS_MASK_get");
    _ohp_core_reg_TXFB_GCC0_MASK_array_burst_read( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   0,
                                                   3,
                                                   (UINT32 *)value);
}


#ifndef ohp_core_lfield_range_TXFB_GCC0_INS_MASK_set
#define ohp_core_lfield_range_TXFB_GCC0_INS_MASK_set( b, h, start_bit, stop_bit, value ) \
       _ohp_core_lfield_range_TXFB_GCC0_INS_MASK_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _ohp_core_lfield_range_TXFB_GCC0_INS_MASK_set( LOG_CALLER_DEFN
                                                                  ohp_core_buffer_t *b,
                                                                  ohp_core_handle_t *h,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ohp_core_lfield_range_TXFB_GCC0_INS_MASK_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ohp_core_lfield_range_TXFB_GCC0_INS_MASK_set", start_bit, stop_bit, value);
    _ohp_core_reg_TXFB_GCC0_MASK_array_field_set( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  word_number,
                                                  mask,
                                                  field_ofs,
                                                  value);
}


#ifndef ohp_core_lfield_range_TXFB_GCC0_INS_MASK_get
#define ohp_core_lfield_range_TXFB_GCC0_INS_MASK_get( b, h, start_bit, stop_bit ) \
       _ohp_core_lfield_range_TXFB_GCC0_INS_MASK_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_lfield_range_TXFB_GCC0_INS_MASK_get( LOG_CALLER_DEFN
                                                                    ohp_core_buffer_t *b,
                                                                    ohp_core_handle_t *h,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = 0xffffffff >> (32-num_bits);
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ohp_core_lfield_range_TXFB_GCC0_INS_MASK_get", start_bit, stop_bit );
    }
    reg_value = _ohp_core_reg_TXFB_GCC0_MASK_array_read( LOG_CALLER_ARGS
                                                         b,
                                                         h,
                                                         word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ohp_core_lfield_range_TXFB_GCC0_INS_MASK_get", start_bit, stop_bit, value );
    return value;
}


#ifndef ohp_core_lfield_TXFB_GCC1_INS_MASK_set
#define ohp_core_lfield_TXFB_GCC1_INS_MASK_set( b, h, value ) \
       _ohp_core_lfield_TXFB_GCC1_INS_MASK_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_TXFB_GCC1_INS_MASK_set( LOG_CALLER_DEFN
                                                            ohp_core_buffer_t *b,
                                                            ohp_core_handle_t *h,
                                                            UINT32 value[3] )
{
    IOLOG( "%s ", "ohp_core_lfield_TXFB_GCC1_INS_MASK_set");
    _ohp_core_reg_TXFB_GCC1_MASK_array_burst_write( LOG_CALLER_ARGS
                                                    b,
                                                    h,
                                                    0,
                                                    3,
                                                    value);
}


#ifndef ohp_core_lfield_TXFB_GCC1_INS_MASK_get
#define ohp_core_lfield_TXFB_GCC1_INS_MASK_get( b, h, value ) \
       _ohp_core_lfield_TXFB_GCC1_INS_MASK_get( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_TXFB_GCC1_INS_MASK_get( LOG_CALLER_DEFN
                                                            ohp_core_buffer_t *b,
                                                            ohp_core_handle_t *h,
                                                            UINT32 value[3] )
{
    IOLOG( "%s ", "ohp_core_lfield_TXFB_GCC1_INS_MASK_get");
    _ohp_core_reg_TXFB_GCC1_MASK_array_burst_read( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   0,
                                                   3,
                                                   (UINT32 *)value);
}


#ifndef ohp_core_lfield_range_TXFB_GCC1_INS_MASK_set
#define ohp_core_lfield_range_TXFB_GCC1_INS_MASK_set( b, h, start_bit, stop_bit, value ) \
       _ohp_core_lfield_range_TXFB_GCC1_INS_MASK_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _ohp_core_lfield_range_TXFB_GCC1_INS_MASK_set( LOG_CALLER_DEFN
                                                                  ohp_core_buffer_t *b,
                                                                  ohp_core_handle_t *h,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ohp_core_lfield_range_TXFB_GCC1_INS_MASK_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ohp_core_lfield_range_TXFB_GCC1_INS_MASK_set", start_bit, stop_bit, value);
    _ohp_core_reg_TXFB_GCC1_MASK_array_field_set( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  word_number,
                                                  mask,
                                                  field_ofs,
                                                  value);
}


#ifndef ohp_core_lfield_range_TXFB_GCC1_INS_MASK_get
#define ohp_core_lfield_range_TXFB_GCC1_INS_MASK_get( b, h, start_bit, stop_bit ) \
       _ohp_core_lfield_range_TXFB_GCC1_INS_MASK_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_lfield_range_TXFB_GCC1_INS_MASK_get( LOG_CALLER_DEFN
                                                                    ohp_core_buffer_t *b,
                                                                    ohp_core_handle_t *h,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = 0xffffffff >> (32-num_bits);
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ohp_core_lfield_range_TXFB_GCC1_INS_MASK_get", start_bit, stop_bit );
    }
    reg_value = _ohp_core_reg_TXFB_GCC1_MASK_array_read( LOG_CALLER_ARGS
                                                         b,
                                                         h,
                                                         word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ohp_core_lfield_range_TXFB_GCC1_INS_MASK_get", start_bit, stop_bit, value );
    return value;
}


#ifndef ohp_core_lfield_TXFB_GCC2_INS_MASK_set
#define ohp_core_lfield_TXFB_GCC2_INS_MASK_set( b, h, value ) \
       _ohp_core_lfield_TXFB_GCC2_INS_MASK_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_TXFB_GCC2_INS_MASK_set( LOG_CALLER_DEFN
                                                            ohp_core_buffer_t *b,
                                                            ohp_core_handle_t *h,
                                                            UINT32 value[3] )
{
    IOLOG( "%s ", "ohp_core_lfield_TXFB_GCC2_INS_MASK_set");
    _ohp_core_reg_TXFB_GCC2_MASK_array_burst_write( LOG_CALLER_ARGS
                                                    b,
                                                    h,
                                                    0,
                                                    3,
                                                    value);
}


#ifndef ohp_core_lfield_TXFB_GCC2_INS_MASK_get
#define ohp_core_lfield_TXFB_GCC2_INS_MASK_get( b, h, value ) \
       _ohp_core_lfield_TXFB_GCC2_INS_MASK_get( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_TXFB_GCC2_INS_MASK_get( LOG_CALLER_DEFN
                                                            ohp_core_buffer_t *b,
                                                            ohp_core_handle_t *h,
                                                            UINT32 value[3] )
{
    IOLOG( "%s ", "ohp_core_lfield_TXFB_GCC2_INS_MASK_get");
    _ohp_core_reg_TXFB_GCC2_MASK_array_burst_read( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   0,
                                                   3,
                                                   (UINT32 *)value);
}


#ifndef ohp_core_lfield_range_TXFB_GCC2_INS_MASK_set
#define ohp_core_lfield_range_TXFB_GCC2_INS_MASK_set( b, h, start_bit, stop_bit, value ) \
       _ohp_core_lfield_range_TXFB_GCC2_INS_MASK_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _ohp_core_lfield_range_TXFB_GCC2_INS_MASK_set( LOG_CALLER_DEFN
                                                                  ohp_core_buffer_t *b,
                                                                  ohp_core_handle_t *h,
                                                                  UINT32 start_bit,
                                                                  UINT32 stop_bit,
                                                                  UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ohp_core_lfield_range_TXFB_GCC2_INS_MASK_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ohp_core_lfield_range_TXFB_GCC2_INS_MASK_set", start_bit, stop_bit, value);
    _ohp_core_reg_TXFB_GCC2_MASK_array_field_set( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  word_number,
                                                  mask,
                                                  field_ofs,
                                                  value);
}


#ifndef ohp_core_lfield_range_TXFB_GCC2_INS_MASK_get
#define ohp_core_lfield_range_TXFB_GCC2_INS_MASK_get( b, h, start_bit, stop_bit ) \
       _ohp_core_lfield_range_TXFB_GCC2_INS_MASK_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_lfield_range_TXFB_GCC2_INS_MASK_get( LOG_CALLER_DEFN
                                                                    ohp_core_buffer_t *b,
                                                                    ohp_core_handle_t *h,
                                                                    UINT32 start_bit,
                                                                    UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = 0xffffffff >> (32-num_bits);
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ohp_core_lfield_range_TXFB_GCC2_INS_MASK_get", start_bit, stop_bit );
    }
    reg_value = _ohp_core_reg_TXFB_GCC2_MASK_array_read( LOG_CALLER_ARGS
                                                         b,
                                                         h,
                                                         word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ohp_core_lfield_range_TXFB_GCC2_INS_MASK_get", start_bit, stop_bit, value );
    return value;
}


/*
 * ==================================================================================
 *           Parameter Access Functions for Paramset config_N_burstsize96
 * ==================================================================================
 */

#ifndef ohp_core_lfield_STGA_CH_EN_CTRL_set
#define ohp_core_lfield_STGA_CH_EN_CTRL_set( b, h, value ) \
       _ohp_core_lfield_STGA_CH_EN_CTRL_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_STGA_CH_EN_CTRL_set( LOG_CALLER_DEFN
                                                         ohp_core_buffer_t *b,
                                                         ohp_core_handle_t *h,
                                                         UINT32 value[96] )
{
    IOLOG( "%s ", "ohp_core_lfield_STGA_CH_EN_CTRL_set");
    _ohp_core_reg_STGA_CH_EN_array_burst_write( LOG_CALLER_ARGS
                                                b,
                                                h,
                                                0,
                                                96,
                                                value);
}


#ifndef ohp_core_lfield_STGA_CH_EN_CTRL_get
#define ohp_core_lfield_STGA_CH_EN_CTRL_get( b, h, value ) \
       _ohp_core_lfield_STGA_CH_EN_CTRL_get( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_STGA_CH_EN_CTRL_get( LOG_CALLER_DEFN
                                                         ohp_core_buffer_t *b,
                                                         ohp_core_handle_t *h,
                                                         UINT32 value[96] )
{
    IOLOG( "%s ", "ohp_core_lfield_STGA_CH_EN_CTRL_get");
    _ohp_core_reg_STGA_CH_EN_array_burst_read( LOG_CALLER_ARGS
                                               b,
                                               h,
                                               0,
                                               96,
                                               (UINT32 *)value);
}


#ifndef ohp_core_lfield_range_STGA_CH_EN_CTRL_set
#define ohp_core_lfield_range_STGA_CH_EN_CTRL_set( b, h, start_bit, stop_bit, value ) \
       _ohp_core_lfield_range_STGA_CH_EN_CTRL_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _ohp_core_lfield_range_STGA_CH_EN_CTRL_set( LOG_CALLER_DEFN
                                                               ohp_core_buffer_t *b,
                                                               ohp_core_handle_t *h,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ohp_core_lfield_range_STGA_CH_EN_CTRL_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ohp_core_lfield_range_STGA_CH_EN_CTRL_set", start_bit, stop_bit, value);
    _ohp_core_reg_STGA_CH_EN_array_field_set( LOG_CALLER_ARGS
                                              b,
                                              h,
                                              word_number,
                                              mask,
                                              field_ofs,
                                              value);
}


#ifndef ohp_core_lfield_range_STGA_CH_EN_CTRL_get
#define ohp_core_lfield_range_STGA_CH_EN_CTRL_get( b, h, start_bit, stop_bit ) \
       _ohp_core_lfield_range_STGA_CH_EN_CTRL_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_lfield_range_STGA_CH_EN_CTRL_get( LOG_CALLER_DEFN
                                                                 ohp_core_buffer_t *b,
                                                                 ohp_core_handle_t *h,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = 0xffffffff >> (32-num_bits);
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ohp_core_lfield_range_STGA_CH_EN_CTRL_get", start_bit, stop_bit );
    }
    reg_value = _ohp_core_reg_STGA_CH_EN_array_read( LOG_CALLER_ARGS
                                                     b,
                                                     h,
                                                     word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ohp_core_lfield_range_STGA_CH_EN_CTRL_get", start_bit, stop_bit, value );
    return value;
}


#ifndef ohp_core_lfield_STGB_CH_EN_CTRL_set
#define ohp_core_lfield_STGB_CH_EN_CTRL_set( b, h, value ) \
       _ohp_core_lfield_STGB_CH_EN_CTRL_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_STGB_CH_EN_CTRL_set( LOG_CALLER_DEFN
                                                         ohp_core_buffer_t *b,
                                                         ohp_core_handle_t *h,
                                                         UINT32 value[96] )
{
    IOLOG( "%s ", "ohp_core_lfield_STGB_CH_EN_CTRL_set");
    _ohp_core_reg_STGB_CH_EN_array_burst_write( LOG_CALLER_ARGS
                                                b,
                                                h,
                                                0,
                                                96,
                                                value);
}


#ifndef ohp_core_lfield_STGB_CH_EN_CTRL_get
#define ohp_core_lfield_STGB_CH_EN_CTRL_get( b, h, value ) \
       _ohp_core_lfield_STGB_CH_EN_CTRL_get( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_STGB_CH_EN_CTRL_get( LOG_CALLER_DEFN
                                                         ohp_core_buffer_t *b,
                                                         ohp_core_handle_t *h,
                                                         UINT32 value[96] )
{
    IOLOG( "%s ", "ohp_core_lfield_STGB_CH_EN_CTRL_get");
    _ohp_core_reg_STGB_CH_EN_array_burst_read( LOG_CALLER_ARGS
                                               b,
                                               h,
                                               0,
                                               96,
                                               (UINT32 *)value);
}


#ifndef ohp_core_lfield_range_STGB_CH_EN_CTRL_set
#define ohp_core_lfield_range_STGB_CH_EN_CTRL_set( b, h, start_bit, stop_bit, value ) \
       _ohp_core_lfield_range_STGB_CH_EN_CTRL_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _ohp_core_lfield_range_STGB_CH_EN_CTRL_set( LOG_CALLER_DEFN
                                                               ohp_core_buffer_t *b,
                                                               ohp_core_handle_t *h,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ohp_core_lfield_range_STGB_CH_EN_CTRL_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ohp_core_lfield_range_STGB_CH_EN_CTRL_set", start_bit, stop_bit, value);
    _ohp_core_reg_STGB_CH_EN_array_field_set( LOG_CALLER_ARGS
                                              b,
                                              h,
                                              word_number,
                                              mask,
                                              field_ofs,
                                              value);
}


#ifndef ohp_core_lfield_range_STGB_CH_EN_CTRL_get
#define ohp_core_lfield_range_STGB_CH_EN_CTRL_get( b, h, start_bit, stop_bit ) \
       _ohp_core_lfield_range_STGB_CH_EN_CTRL_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_lfield_range_STGB_CH_EN_CTRL_get( LOG_CALLER_DEFN
                                                                 ohp_core_buffer_t *b,
                                                                 ohp_core_handle_t *h,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = 0xffffffff >> (32-num_bits);
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ohp_core_lfield_range_STGB_CH_EN_CTRL_get", start_bit, stop_bit );
    }
    reg_value = _ohp_core_reg_STGB_CH_EN_array_read( LOG_CALLER_ARGS
                                                     b,
                                                     h,
                                                     word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ohp_core_lfield_range_STGB_CH_EN_CTRL_get", start_bit, stop_bit, value );
    return value;
}


#ifndef ohp_core_lfield_TXFA_INS_OFFSET_set
#define ohp_core_lfield_TXFA_INS_OFFSET_set( b, h, value ) \
       _ohp_core_lfield_TXFA_INS_OFFSET_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_TXFA_INS_OFFSET_set( LOG_CALLER_DEFN
                                                         ohp_core_buffer_t *b,
                                                         ohp_core_handle_t *h,
                                                         UINT32 value[96] )
{
    IOLOG( "%s ", "ohp_core_lfield_TXFA_INS_OFFSET_set");
    _ohp_core_reg_TXFA_OFFSET_array_burst_write( LOG_CALLER_ARGS
                                                 b,
                                                 h,
                                                 0,
                                                 96,
                                                 value);
}


#ifndef ohp_core_lfield_TXFA_INS_OFFSET_get
#define ohp_core_lfield_TXFA_INS_OFFSET_get( b, h, value ) \
       _ohp_core_lfield_TXFA_INS_OFFSET_get( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_TXFA_INS_OFFSET_get( LOG_CALLER_DEFN
                                                         ohp_core_buffer_t *b,
                                                         ohp_core_handle_t *h,
                                                         UINT32 value[96] )
{
    IOLOG( "%s ", "ohp_core_lfield_TXFA_INS_OFFSET_get");
    _ohp_core_reg_TXFA_OFFSET_array_burst_read( LOG_CALLER_ARGS
                                                b,
                                                h,
                                                0,
                                                96,
                                                (UINT32 *)value);
}


#ifndef ohp_core_lfield_range_TXFA_INS_OFFSET_set
#define ohp_core_lfield_range_TXFA_INS_OFFSET_set( b, h, start_bit, stop_bit, value ) \
       _ohp_core_lfield_range_TXFA_INS_OFFSET_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _ohp_core_lfield_range_TXFA_INS_OFFSET_set( LOG_CALLER_DEFN
                                                               ohp_core_buffer_t *b,
                                                               ohp_core_handle_t *h,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ohp_core_lfield_range_TXFA_INS_OFFSET_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ohp_core_lfield_range_TXFA_INS_OFFSET_set", start_bit, stop_bit, value);
    _ohp_core_reg_TXFA_OFFSET_array_field_set( LOG_CALLER_ARGS
                                               b,
                                               h,
                                               word_number,
                                               mask,
                                               field_ofs,
                                               value);
}


#ifndef ohp_core_lfield_range_TXFA_INS_OFFSET_get
#define ohp_core_lfield_range_TXFA_INS_OFFSET_get( b, h, start_bit, stop_bit ) \
       _ohp_core_lfield_range_TXFA_INS_OFFSET_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_lfield_range_TXFA_INS_OFFSET_get( LOG_CALLER_DEFN
                                                                 ohp_core_buffer_t *b,
                                                                 ohp_core_handle_t *h,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = 0xffffffff >> (32-num_bits);
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ohp_core_lfield_range_TXFA_INS_OFFSET_get", start_bit, stop_bit );
    }
    reg_value = _ohp_core_reg_TXFA_OFFSET_array_read( LOG_CALLER_ARGS
                                                      b,
                                                      h,
                                                      word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ohp_core_lfield_range_TXFA_INS_OFFSET_get", start_bit, stop_bit, value );
    return value;
}


#ifndef ohp_core_lfield_TXFB_INS_OFFSET_set
#define ohp_core_lfield_TXFB_INS_OFFSET_set( b, h, value ) \
       _ohp_core_lfield_TXFB_INS_OFFSET_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_TXFB_INS_OFFSET_set( LOG_CALLER_DEFN
                                                         ohp_core_buffer_t *b,
                                                         ohp_core_handle_t *h,
                                                         UINT32 value[96] )
{
    IOLOG( "%s ", "ohp_core_lfield_TXFB_INS_OFFSET_set");
    _ohp_core_reg_TXFB_OFFSET_array_burst_write( LOG_CALLER_ARGS
                                                 b,
                                                 h,
                                                 0,
                                                 96,
                                                 value);
}


#ifndef ohp_core_lfield_TXFB_INS_OFFSET_get
#define ohp_core_lfield_TXFB_INS_OFFSET_get( b, h, value ) \
       _ohp_core_lfield_TXFB_INS_OFFSET_get( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_TXFB_INS_OFFSET_get( LOG_CALLER_DEFN
                                                         ohp_core_buffer_t *b,
                                                         ohp_core_handle_t *h,
                                                         UINT32 value[96] )
{
    IOLOG( "%s ", "ohp_core_lfield_TXFB_INS_OFFSET_get");
    _ohp_core_reg_TXFB_OFFSET_array_burst_read( LOG_CALLER_ARGS
                                                b,
                                                h,
                                                0,
                                                96,
                                                (UINT32 *)value);
}


#ifndef ohp_core_lfield_range_TXFB_INS_OFFSET_set
#define ohp_core_lfield_range_TXFB_INS_OFFSET_set( b, h, start_bit, stop_bit, value ) \
       _ohp_core_lfield_range_TXFB_INS_OFFSET_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _ohp_core_lfield_range_TXFB_INS_OFFSET_set( LOG_CALLER_DEFN
                                                               ohp_core_buffer_t *b,
                                                               ohp_core_handle_t *h,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ohp_core_lfield_range_TXFB_INS_OFFSET_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ohp_core_lfield_range_TXFB_INS_OFFSET_set", start_bit, stop_bit, value);
    _ohp_core_reg_TXFB_OFFSET_array_field_set( LOG_CALLER_ARGS
                                               b,
                                               h,
                                               word_number,
                                               mask,
                                               field_ofs,
                                               value);
}


#ifndef ohp_core_lfield_range_TXFB_INS_OFFSET_get
#define ohp_core_lfield_range_TXFB_INS_OFFSET_get( b, h, start_bit, stop_bit ) \
       _ohp_core_lfield_range_TXFB_INS_OFFSET_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_lfield_range_TXFB_INS_OFFSET_get( LOG_CALLER_DEFN
                                                                 ohp_core_buffer_t *b,
                                                                 ohp_core_handle_t *h,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = 0xffffffff >> (32-num_bits);
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ohp_core_lfield_range_TXFB_INS_OFFSET_get", start_bit, stop_bit );
    }
    reg_value = _ohp_core_reg_TXFB_OFFSET_array_read( LOG_CALLER_ARGS
                                                      b,
                                                      h,
                                                      word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ohp_core_lfield_range_TXFB_INS_OFFSET_get", start_bit, stop_bit, value );
    return value;
}


/*
 * ==================================================================================
 *               Parameter Access Functions for Paramset config_edge
 * ==================================================================================
 */

#ifndef ohp_core_field_RXFA_SCH_EN_set
#define ohp_core_field_RXFA_SCH_EN_set( b, h, value ) \
       _ohp_core_field_RXFA_SCH_EN_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_field_RXFA_SCH_EN_set( LOG_CALLER_DEFN
                                                    ohp_core_buffer_t *b,
                                                    ohp_core_handle_t *h,
                                                    UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ohp_core_field_RXFA_SCH_EN_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ohp_core_field_RXFA_SCH_EN_set", value );

    /* (0x00000004 bits 0) field RXFA_SCH_EN of register PMC_OHP_CORE_REG_SCH_RXFA_CFG */
    _ohp_core_reg_SCH_RXFA_CFG_field_set( LOG_CALLER_ARGS
                                          b,
                                          h,
                                          OHP_CORE_REG_SCH_RXFA_CFG_BIT_RXFA_SCH_EN_MSK,
                                          OHP_CORE_REG_SCH_RXFA_CFG_BIT_RXFA_SCH_EN_OFF,
                                          value);
}


#ifndef ohp_core_field_RXFA_SCH_EN_get
#define ohp_core_field_RXFA_SCH_EN_get( b, h ) \
       _ohp_core_field_RXFA_SCH_EN_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_RXFA_SCH_EN_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000004 bits 0) field RXFA_SCH_EN of register PMC_OHP_CORE_REG_SCH_RXFA_CFG */
    reg_value = _ohp_core_reg_SCH_RXFA_CFG_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_SCH_RXFA_CFG_BIT_RXFA_SCH_EN_MSK) >> OHP_CORE_REG_SCH_RXFA_CFG_BIT_RXFA_SCH_EN_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_RXFA_SCH_EN_get", value );

    return value;
}

#ifndef ohp_core_field_RXFA_SCH_REQ_set
#define ohp_core_field_RXFA_SCH_REQ_set( b, h, value ) \
       _ohp_core_field_RXFA_SCH_REQ_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_field_RXFA_SCH_REQ_set( LOG_CALLER_DEFN
                                                     ohp_core_buffer_t *b,
                                                     ohp_core_handle_t *h,
                                                     UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ohp_core_field_RXFA_SCH_REQ_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ohp_core_field_RXFA_SCH_REQ_set", value );

    /* (0x00000004 bits 8) field RXFA_SCH_REQ of register PMC_OHP_CORE_REG_SCH_RXFA_CFG */
    _ohp_core_reg_SCH_RXFA_CFG_field_set( LOG_CALLER_ARGS
                                          b,
                                          h,
                                          OHP_CORE_REG_SCH_RXFA_CFG_BIT_RXFA_SCH_REQ_MSK,
                                          OHP_CORE_REG_SCH_RXFA_CFG_BIT_RXFA_SCH_REQ_OFF,
                                          value);
}


#ifndef ohp_core_field_RXFA_SCH_REQ_get
#define ohp_core_field_RXFA_SCH_REQ_get( b, h ) \
       _ohp_core_field_RXFA_SCH_REQ_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_RXFA_SCH_REQ_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000004 bits 8) field RXFA_SCH_REQ of register PMC_OHP_CORE_REG_SCH_RXFA_CFG */
    reg_value = _ohp_core_reg_SCH_RXFA_CFG_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_SCH_RXFA_CFG_BIT_RXFA_SCH_REQ_MSK) >> OHP_CORE_REG_SCH_RXFA_CFG_BIT_RXFA_SCH_REQ_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_RXFA_SCH_REQ_get", value );

    return value;
}

#ifndef ohp_core_field_RXFA_SCH_FORCE_set
#define ohp_core_field_RXFA_SCH_FORCE_set( b, h, value ) \
       _ohp_core_field_RXFA_SCH_FORCE_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_field_RXFA_SCH_FORCE_set( LOG_CALLER_DEFN
                                                       ohp_core_buffer_t *b,
                                                       ohp_core_handle_t *h,
                                                       UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ohp_core_field_RXFA_SCH_FORCE_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ohp_core_field_RXFA_SCH_FORCE_set", value );

    /* (0x00000004 bits 16) field RXFA_SCH_FORCE of register PMC_OHP_CORE_REG_SCH_RXFA_CFG */
    _ohp_core_reg_SCH_RXFA_CFG_field_set( LOG_CALLER_ARGS
                                          b,
                                          h,
                                          OHP_CORE_REG_SCH_RXFA_CFG_BIT_RXFA_SCH_FORCE_MSK,
                                          OHP_CORE_REG_SCH_RXFA_CFG_BIT_RXFA_SCH_FORCE_OFF,
                                          value);
}


#ifndef ohp_core_field_RXFA_SCH_FORCE_get
#define ohp_core_field_RXFA_SCH_FORCE_get( b, h ) \
       _ohp_core_field_RXFA_SCH_FORCE_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_RXFA_SCH_FORCE_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000004 bits 16) field RXFA_SCH_FORCE of register PMC_OHP_CORE_REG_SCH_RXFA_CFG */
    reg_value = _ohp_core_reg_SCH_RXFA_CFG_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_SCH_RXFA_CFG_BIT_RXFA_SCH_FORCE_MSK) >> OHP_CORE_REG_SCH_RXFA_CFG_BIT_RXFA_SCH_FORCE_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_RXFA_SCH_FORCE_get", value );

    return value;
}

#ifndef ohp_core_field_RXFB_SCH_EN_set
#define ohp_core_field_RXFB_SCH_EN_set( b, h, value ) \
       _ohp_core_field_RXFB_SCH_EN_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_field_RXFB_SCH_EN_set( LOG_CALLER_DEFN
                                                    ohp_core_buffer_t *b,
                                                    ohp_core_handle_t *h,
                                                    UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ohp_core_field_RXFB_SCH_EN_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ohp_core_field_RXFB_SCH_EN_set", value );

    /* (0x00000008 bits 0) field RXFB_SCH_EN of register PMC_OHP_CORE_REG_SCH_RXFB_CFG */
    _ohp_core_reg_SCH_RXFB_CFG_field_set( LOG_CALLER_ARGS
                                          b,
                                          h,
                                          OHP_CORE_REG_SCH_RXFB_CFG_BIT_RXFB_SCH_EN_MSK,
                                          OHP_CORE_REG_SCH_RXFB_CFG_BIT_RXFB_SCH_EN_OFF,
                                          value);
}


#ifndef ohp_core_field_RXFB_SCH_EN_get
#define ohp_core_field_RXFB_SCH_EN_get( b, h ) \
       _ohp_core_field_RXFB_SCH_EN_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_RXFB_SCH_EN_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 0) field RXFB_SCH_EN of register PMC_OHP_CORE_REG_SCH_RXFB_CFG */
    reg_value = _ohp_core_reg_SCH_RXFB_CFG_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_SCH_RXFB_CFG_BIT_RXFB_SCH_EN_MSK) >> OHP_CORE_REG_SCH_RXFB_CFG_BIT_RXFB_SCH_EN_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_RXFB_SCH_EN_get", value );

    return value;
}

#ifndef ohp_core_field_RXFB_SCH_REQ_set
#define ohp_core_field_RXFB_SCH_REQ_set( b, h, value ) \
       _ohp_core_field_RXFB_SCH_REQ_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_field_RXFB_SCH_REQ_set( LOG_CALLER_DEFN
                                                     ohp_core_buffer_t *b,
                                                     ohp_core_handle_t *h,
                                                     UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ohp_core_field_RXFB_SCH_REQ_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ohp_core_field_RXFB_SCH_REQ_set", value );

    /* (0x00000008 bits 8) field RXFB_SCH_REQ of register PMC_OHP_CORE_REG_SCH_RXFB_CFG */
    _ohp_core_reg_SCH_RXFB_CFG_field_set( LOG_CALLER_ARGS
                                          b,
                                          h,
                                          OHP_CORE_REG_SCH_RXFB_CFG_BIT_RXFB_SCH_REQ_MSK,
                                          OHP_CORE_REG_SCH_RXFB_CFG_BIT_RXFB_SCH_REQ_OFF,
                                          value);
}


#ifndef ohp_core_field_RXFB_SCH_REQ_get
#define ohp_core_field_RXFB_SCH_REQ_get( b, h ) \
       _ohp_core_field_RXFB_SCH_REQ_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_RXFB_SCH_REQ_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 8) field RXFB_SCH_REQ of register PMC_OHP_CORE_REG_SCH_RXFB_CFG */
    reg_value = _ohp_core_reg_SCH_RXFB_CFG_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_SCH_RXFB_CFG_BIT_RXFB_SCH_REQ_MSK) >> OHP_CORE_REG_SCH_RXFB_CFG_BIT_RXFB_SCH_REQ_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_RXFB_SCH_REQ_get", value );

    return value;
}

#ifndef ohp_core_field_RXFB_SCH_FORCE_set
#define ohp_core_field_RXFB_SCH_FORCE_set( b, h, value ) \
       _ohp_core_field_RXFB_SCH_FORCE_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_field_RXFB_SCH_FORCE_set( LOG_CALLER_DEFN
                                                       ohp_core_buffer_t *b,
                                                       ohp_core_handle_t *h,
                                                       UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ohp_core_field_RXFB_SCH_FORCE_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ohp_core_field_RXFB_SCH_FORCE_set", value );

    /* (0x00000008 bits 16) field RXFB_SCH_FORCE of register PMC_OHP_CORE_REG_SCH_RXFB_CFG */
    _ohp_core_reg_SCH_RXFB_CFG_field_set( LOG_CALLER_ARGS
                                          b,
                                          h,
                                          OHP_CORE_REG_SCH_RXFB_CFG_BIT_RXFB_SCH_FORCE_MSK,
                                          OHP_CORE_REG_SCH_RXFB_CFG_BIT_RXFB_SCH_FORCE_OFF,
                                          value);
}


#ifndef ohp_core_field_RXFB_SCH_FORCE_get
#define ohp_core_field_RXFB_SCH_FORCE_get( b, h ) \
       _ohp_core_field_RXFB_SCH_FORCE_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_RXFB_SCH_FORCE_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00000008 bits 16) field RXFB_SCH_FORCE of register PMC_OHP_CORE_REG_SCH_RXFB_CFG */
    reg_value = _ohp_core_reg_SCH_RXFB_CFG_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_SCH_RXFB_CFG_BIT_RXFB_SCH_FORCE_MSK) >> OHP_CORE_REG_SCH_RXFB_CFG_BIT_RXFB_SCH_FORCE_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_RXFB_SCH_FORCE_get", value );

    return value;
}

#ifndef ohp_core_field_CFC_DBG_TRIG_set
#define ohp_core_field_CFC_DBG_TRIG_set( b, h, value ) \
       _ohp_core_field_CFC_DBG_TRIG_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_field_CFC_DBG_TRIG_set( LOG_CALLER_DEFN
                                                     ohp_core_buffer_t *b,
                                                     ohp_core_handle_t *h,
                                                     UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ohp_core_field_CFC_DBG_TRIG_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ohp_core_field_CFC_DBG_TRIG_set", value );

    /* (0x00001388 bits 16) field CFC_DBG_TRIG of register PMC_OHP_CORE_REG_CFC_DEBUG_CTRL */
    _ohp_core_reg_CFC_DEBUG_CTRL_field_set( LOG_CALLER_ARGS
                                            b,
                                            h,
                                            OHP_CORE_REG_CFC_DEBUG_CTRL_BIT_CFC_DBG_TRIG_MSK,
                                            OHP_CORE_REG_CFC_DEBUG_CTRL_BIT_CFC_DBG_TRIG_OFF,
                                            value);
}


#ifndef ohp_core_field_CFC_DBG_TRIG_get
#define ohp_core_field_CFC_DBG_TRIG_get( b, h ) \
       _ohp_core_field_CFC_DBG_TRIG_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_CFC_DBG_TRIG_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00001388 bits 16) field CFC_DBG_TRIG of register PMC_OHP_CORE_REG_CFC_DEBUG_CTRL */
    reg_value = _ohp_core_reg_CFC_DEBUG_CTRL_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_CFC_DEBUG_CTRL_BIT_CFC_DBG_TRIG_MSK) >> OHP_CORE_REG_CFC_DEBUG_CTRL_BIT_CFC_DBG_TRIG_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_CFC_DBG_TRIG_get", value );

    return value;
}

/*
 * ==================================================================================
 *                Parameter Access Functions for Paramset int_enable
 * ==================================================================================
 */

#ifndef ohp_core_lfield_RXFA_CFC_FULL_E_set
#define ohp_core_lfield_RXFA_CFC_FULL_E_set( b, h, value ) \
       _ohp_core_lfield_RXFA_CFC_FULL_E_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_RXFA_CFC_FULL_E_set( LOG_CALLER_DEFN
                                                         ohp_core_buffer_t *b,
                                                         ohp_core_handle_t *h,
                                                         UINT32 value[3] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x", "ohp_core_lfield_RXFA_CFC_FULL_E_set", value[2] , value[1] , value[0] );

    /* (0x00000674 bits 31:0) bits 0:31 use field RXFA_CFC_FULL_E of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT_EN0 */
    _ohp_core_reg_RXFA_CFC_FULL_INT_EN0_field_set( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   OHP_CORE_REG_RXFA_CFC_FULL_INT_EN0_BIT_RXFA_CFC_FULL_E_MSK,
                                                   OHP_CORE_REG_RXFA_CFC_FULL_INT_EN0_BIT_RXFA_CFC_FULL_E_OFF,
                                                   (value[0] & 0xffffffff));

    /* (0x00000678 bits 31:0) bits 32:63 use field RXFA_CFC_FULL_E of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT_EN1 */
    _ohp_core_reg_RXFA_CFC_FULL_INT_EN1_field_set( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   OHP_CORE_REG_RXFA_CFC_FULL_INT_EN1_BIT_RXFA_CFC_FULL_E_MSK,
                                                   OHP_CORE_REG_RXFA_CFC_FULL_INT_EN1_BIT_RXFA_CFC_FULL_E_OFF,
                                                   (value[1] & 0xffffffff));

    /* (0x0000067c bits 31:0) bits 64:95 use field RXFA_CFC_FULL_E of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT_EN2 */
    _ohp_core_reg_RXFA_CFC_FULL_INT_EN2_field_set( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   OHP_CORE_REG_RXFA_CFC_FULL_INT_EN2_BIT_RXFA_CFC_FULL_E_MSK,
                                                   OHP_CORE_REG_RXFA_CFC_FULL_INT_EN2_BIT_RXFA_CFC_FULL_E_OFF,
                                                   (value[2] & 0xffffffff));
}


#ifndef ohp_core_lfield_RXFA_CFC_FULL_E_get
#define ohp_core_lfield_RXFA_CFC_FULL_E_get( b, h, value ) \
       _ohp_core_lfield_RXFA_CFC_FULL_E_get( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_RXFA_CFC_FULL_E_get( LOG_CALLER_DEFN
                                                         ohp_core_buffer_t *b,
                                                         ohp_core_handle_t *h,
                                                         UINT32 value[3] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<3;i++)
        value[i] = 0;

    /* (0x00000674 bits 31:0) bits 0:31 use field RXFA_CFC_FULL_E of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT_EN0 */
    reg_value = _ohp_core_reg_RXFA_CFC_FULL_INT_EN0_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_RXFA_CFC_FULL_INT_EN0_BIT_RXFA_CFC_FULL_E_MSK) >> OHP_CORE_REG_RXFA_CFC_FULL_INT_EN0_BIT_RXFA_CFC_FULL_E_OFF;
    value[0] |= field_value;

    /* (0x00000678 bits 31:0) bits 32:63 use field RXFA_CFC_FULL_E of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT_EN1 */
    reg_value = _ohp_core_reg_RXFA_CFC_FULL_INT_EN1_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_RXFA_CFC_FULL_INT_EN1_BIT_RXFA_CFC_FULL_E_MSK) >> OHP_CORE_REG_RXFA_CFC_FULL_INT_EN1_BIT_RXFA_CFC_FULL_E_OFF;
    value[1] |= field_value;

    /* (0x0000067c bits 31:0) bits 64:95 use field RXFA_CFC_FULL_E of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT_EN2 */
    reg_value = _ohp_core_reg_RXFA_CFC_FULL_INT_EN2_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_RXFA_CFC_FULL_INT_EN2_BIT_RXFA_CFC_FULL_E_MSK) >> OHP_CORE_REG_RXFA_CFC_FULL_INT_EN2_BIT_RXFA_CFC_FULL_E_OFF;
    value[2] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x", "ohp_core_lfield_RXFA_CFC_FULL_E_get", value[2] , value[1] , value[0] );

}

#ifndef ohp_core_lfield_range_RXFA_CFC_FULL_E_set
#define ohp_core_lfield_range_RXFA_CFC_FULL_E_set( b, h, start_bit, stop_bit, value ) \
       _ohp_core_lfield_range_RXFA_CFC_FULL_E_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _ohp_core_lfield_range_RXFA_CFC_FULL_E_set( LOG_CALLER_DEFN
                                                               ohp_core_buffer_t *b,
                                                               ohp_core_handle_t *h,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_lfield_range_RXFA_CFC_FULL_E_set", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_lfield_range_RXFA_CFC_FULL_E_set", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ohp_core_lfield_range_RXFA_CFC_FULL_E_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000674 bits 31:0) bits 0:31 use field RXFA_CFC_FULL_E of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT_EN0 */
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000674 bits 31:0) bits 0:31 use field RXFA_CFC_FULL_E of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT_EN0 */
        _ohp_core_reg_RXFA_CFC_FULL_INT_EN0_field_set( LOG_CALLER_ARGS
                                                       b,
                                                       h,
                                                       subfield_mask << (OHP_CORE_REG_RXFA_CFC_FULL_INT_EN0_BIT_RXFA_CFC_FULL_E_OFF + subfield_offset),
                                                       OHP_CORE_REG_RXFA_CFC_FULL_INT_EN0_BIT_RXFA_CFC_FULL_E_OFF + subfield_offset,
                                                       value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000678 bits 31:0) bits 32:63 use field RXFA_CFC_FULL_E of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT_EN1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000678 bits 31:0) bits 32:63 use field RXFA_CFC_FULL_E of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT_EN1 */
        _ohp_core_reg_RXFA_CFC_FULL_INT_EN1_field_set( LOG_CALLER_ARGS
                                                       b,
                                                       h,
                                                       subfield_mask << (OHP_CORE_REG_RXFA_CFC_FULL_INT_EN1_BIT_RXFA_CFC_FULL_E_OFF + subfield_offset),
                                                       OHP_CORE_REG_RXFA_CFC_FULL_INT_EN1_BIT_RXFA_CFC_FULL_E_OFF + subfield_offset,
                                                       value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x0000067c bits 31:0) bits 64:95 use field RXFA_CFC_FULL_E of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT_EN2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000067c bits 31:0) bits 64:95 use field RXFA_CFC_FULL_E of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT_EN2 */
        _ohp_core_reg_RXFA_CFC_FULL_INT_EN2_field_set( LOG_CALLER_ARGS
                                                       b,
                                                       h,
                                                       subfield_mask << (OHP_CORE_REG_RXFA_CFC_FULL_INT_EN2_BIT_RXFA_CFC_FULL_E_OFF + subfield_offset),
                                                       OHP_CORE_REG_RXFA_CFC_FULL_INT_EN2_BIT_RXFA_CFC_FULL_E_OFF + subfield_offset,
                                                       value >> subfield_shift);
    }
}


#ifndef ohp_core_lfield_range_RXFA_CFC_FULL_E_get
#define ohp_core_lfield_range_RXFA_CFC_FULL_E_get( b, h, start_bit, stop_bit ) \
       _ohp_core_lfield_range_RXFA_CFC_FULL_E_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_lfield_range_RXFA_CFC_FULL_E_get( LOG_CALLER_DEFN
                                                                 ohp_core_buffer_t *b,
                                                                 ohp_core_handle_t *h,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_lfield_range_RXFA_CFC_FULL_E_get", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_lfield_range_RXFA_CFC_FULL_E_get", stop_bit, 95 );
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000674 bits 31:0) bits 0:31 use field RXFA_CFC_FULL_E of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT_EN0 */
        reg_value = _ohp_core_reg_RXFA_CFC_FULL_INT_EN0_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & OHP_CORE_REG_RXFA_CFC_FULL_INT_EN0_BIT_RXFA_CFC_FULL_E_MSK)
                      >> OHP_CORE_REG_RXFA_CFC_FULL_INT_EN0_BIT_RXFA_CFC_FULL_E_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_RXFA_CFC_FULL_INT_EN0_BIT_RXFA_CFC_FULL_E_MSK, OHP_CORE_REG_RXFA_CFC_FULL_INT_EN0_BIT_RXFA_CFC_FULL_E_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000678 bits 31:0) bits 32:63 use field RXFA_CFC_FULL_E of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT_EN1 */
        reg_value = _ohp_core_reg_RXFA_CFC_FULL_INT_EN1_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & OHP_CORE_REG_RXFA_CFC_FULL_INT_EN1_BIT_RXFA_CFC_FULL_E_MSK)
                      >> OHP_CORE_REG_RXFA_CFC_FULL_INT_EN1_BIT_RXFA_CFC_FULL_E_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_RXFA_CFC_FULL_INT_EN1_BIT_RXFA_CFC_FULL_E_MSK, OHP_CORE_REG_RXFA_CFC_FULL_INT_EN1_BIT_RXFA_CFC_FULL_E_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000067c bits 31:0) bits 64:95 use field RXFA_CFC_FULL_E of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT_EN2 */
        reg_value = _ohp_core_reg_RXFA_CFC_FULL_INT_EN2_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & OHP_CORE_REG_RXFA_CFC_FULL_INT_EN2_BIT_RXFA_CFC_FULL_E_MSK)
                      >> OHP_CORE_REG_RXFA_CFC_FULL_INT_EN2_BIT_RXFA_CFC_FULL_E_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_RXFA_CFC_FULL_INT_EN2_BIT_RXFA_CFC_FULL_E_MSK, OHP_CORE_REG_RXFA_CFC_FULL_INT_EN2_BIT_RXFA_CFC_FULL_E_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ohp_core_lfield_range_RXFA_CFC_FULL_E_get", start_bit, stop_bit, value );

    return value;
}

#ifndef ohp_core_lfield_RXFB_CFC_FULL_E_set
#define ohp_core_lfield_RXFB_CFC_FULL_E_set( b, h, value ) \
       _ohp_core_lfield_RXFB_CFC_FULL_E_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_RXFB_CFC_FULL_E_set( LOG_CALLER_DEFN
                                                         ohp_core_buffer_t *b,
                                                         ohp_core_handle_t *h,
                                                         UINT32 value[3] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x", "ohp_core_lfield_RXFB_CFC_FULL_E_set", value[2] , value[1] , value[0] );

    /* (0x0000068c bits 31:0) bits 0:31 use field RXFB_CFC_FULL_E of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT_EN0 */
    _ohp_core_reg_RXFB_CFC_FULL_INT_EN0_field_set( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   OHP_CORE_REG_RXFB_CFC_FULL_INT_EN0_BIT_RXFB_CFC_FULL_E_MSK,
                                                   OHP_CORE_REG_RXFB_CFC_FULL_INT_EN0_BIT_RXFB_CFC_FULL_E_OFF,
                                                   (value[0] & 0xffffffff));

    /* (0x00000690 bits 31:0) bits 32:63 use field RXFB_CFC_FULL_E of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT_EN1 */
    _ohp_core_reg_RXFB_CFC_FULL_INT_EN1_field_set( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   OHP_CORE_REG_RXFB_CFC_FULL_INT_EN1_BIT_RXFB_CFC_FULL_E_MSK,
                                                   OHP_CORE_REG_RXFB_CFC_FULL_INT_EN1_BIT_RXFB_CFC_FULL_E_OFF,
                                                   (value[1] & 0xffffffff));

    /* (0x00000694 bits 31:0) bits 64:95 use field RXFB_CFC_FULL_E of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT_EN2 */
    _ohp_core_reg_RXFB_CFC_FULL_INT_EN2_field_set( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   OHP_CORE_REG_RXFB_CFC_FULL_INT_EN2_BIT_RXFB_CFC_FULL_E_MSK,
                                                   OHP_CORE_REG_RXFB_CFC_FULL_INT_EN2_BIT_RXFB_CFC_FULL_E_OFF,
                                                   (value[2] & 0xffffffff));
}


#ifndef ohp_core_lfield_RXFB_CFC_FULL_E_get
#define ohp_core_lfield_RXFB_CFC_FULL_E_get( b, h, value ) \
       _ohp_core_lfield_RXFB_CFC_FULL_E_get( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_RXFB_CFC_FULL_E_get( LOG_CALLER_DEFN
                                                         ohp_core_buffer_t *b,
                                                         ohp_core_handle_t *h,
                                                         UINT32 value[3] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<3;i++)
        value[i] = 0;

    /* (0x0000068c bits 31:0) bits 0:31 use field RXFB_CFC_FULL_E of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT_EN0 */
    reg_value = _ohp_core_reg_RXFB_CFC_FULL_INT_EN0_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_RXFB_CFC_FULL_INT_EN0_BIT_RXFB_CFC_FULL_E_MSK) >> OHP_CORE_REG_RXFB_CFC_FULL_INT_EN0_BIT_RXFB_CFC_FULL_E_OFF;
    value[0] |= field_value;

    /* (0x00000690 bits 31:0) bits 32:63 use field RXFB_CFC_FULL_E of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT_EN1 */
    reg_value = _ohp_core_reg_RXFB_CFC_FULL_INT_EN1_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_RXFB_CFC_FULL_INT_EN1_BIT_RXFB_CFC_FULL_E_MSK) >> OHP_CORE_REG_RXFB_CFC_FULL_INT_EN1_BIT_RXFB_CFC_FULL_E_OFF;
    value[1] |= field_value;

    /* (0x00000694 bits 31:0) bits 64:95 use field RXFB_CFC_FULL_E of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT_EN2 */
    reg_value = _ohp_core_reg_RXFB_CFC_FULL_INT_EN2_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_RXFB_CFC_FULL_INT_EN2_BIT_RXFB_CFC_FULL_E_MSK) >> OHP_CORE_REG_RXFB_CFC_FULL_INT_EN2_BIT_RXFB_CFC_FULL_E_OFF;
    value[2] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x", "ohp_core_lfield_RXFB_CFC_FULL_E_get", value[2] , value[1] , value[0] );

}

#ifndef ohp_core_lfield_range_RXFB_CFC_FULL_E_set
#define ohp_core_lfield_range_RXFB_CFC_FULL_E_set( b, h, start_bit, stop_bit, value ) \
       _ohp_core_lfield_range_RXFB_CFC_FULL_E_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _ohp_core_lfield_range_RXFB_CFC_FULL_E_set( LOG_CALLER_DEFN
                                                               ohp_core_buffer_t *b,
                                                               ohp_core_handle_t *h,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit,
                                                               UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_lfield_range_RXFB_CFC_FULL_E_set", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_lfield_range_RXFB_CFC_FULL_E_set", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ohp_core_lfield_range_RXFB_CFC_FULL_E_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x0000068c bits 31:0) bits 0:31 use field RXFB_CFC_FULL_E of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT_EN0 */
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000068c bits 31:0) bits 0:31 use field RXFB_CFC_FULL_E of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT_EN0 */
        _ohp_core_reg_RXFB_CFC_FULL_INT_EN0_field_set( LOG_CALLER_ARGS
                                                       b,
                                                       h,
                                                       subfield_mask << (OHP_CORE_REG_RXFB_CFC_FULL_INT_EN0_BIT_RXFB_CFC_FULL_E_OFF + subfield_offset),
                                                       OHP_CORE_REG_RXFB_CFC_FULL_INT_EN0_BIT_RXFB_CFC_FULL_E_OFF + subfield_offset,
                                                       value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000690 bits 31:0) bits 32:63 use field RXFB_CFC_FULL_E of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT_EN1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000690 bits 31:0) bits 32:63 use field RXFB_CFC_FULL_E of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT_EN1 */
        _ohp_core_reg_RXFB_CFC_FULL_INT_EN1_field_set( LOG_CALLER_ARGS
                                                       b,
                                                       h,
                                                       subfield_mask << (OHP_CORE_REG_RXFB_CFC_FULL_INT_EN1_BIT_RXFB_CFC_FULL_E_OFF + subfield_offset),
                                                       OHP_CORE_REG_RXFB_CFC_FULL_INT_EN1_BIT_RXFB_CFC_FULL_E_OFF + subfield_offset,
                                                       value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000694 bits 31:0) bits 64:95 use field RXFB_CFC_FULL_E of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT_EN2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000694 bits 31:0) bits 64:95 use field RXFB_CFC_FULL_E of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT_EN2 */
        _ohp_core_reg_RXFB_CFC_FULL_INT_EN2_field_set( LOG_CALLER_ARGS
                                                       b,
                                                       h,
                                                       subfield_mask << (OHP_CORE_REG_RXFB_CFC_FULL_INT_EN2_BIT_RXFB_CFC_FULL_E_OFF + subfield_offset),
                                                       OHP_CORE_REG_RXFB_CFC_FULL_INT_EN2_BIT_RXFB_CFC_FULL_E_OFF + subfield_offset,
                                                       value >> subfield_shift);
    }
}


#ifndef ohp_core_lfield_range_RXFB_CFC_FULL_E_get
#define ohp_core_lfield_range_RXFB_CFC_FULL_E_get( b, h, start_bit, stop_bit ) \
       _ohp_core_lfield_range_RXFB_CFC_FULL_E_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_lfield_range_RXFB_CFC_FULL_E_get( LOG_CALLER_DEFN
                                                                 ohp_core_buffer_t *b,
                                                                 ohp_core_handle_t *h,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_lfield_range_RXFB_CFC_FULL_E_get", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_lfield_range_RXFB_CFC_FULL_E_get", stop_bit, 95 );
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000068c bits 31:0) bits 0:31 use field RXFB_CFC_FULL_E of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT_EN0 */
        reg_value = _ohp_core_reg_RXFB_CFC_FULL_INT_EN0_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & OHP_CORE_REG_RXFB_CFC_FULL_INT_EN0_BIT_RXFB_CFC_FULL_E_MSK)
                      >> OHP_CORE_REG_RXFB_CFC_FULL_INT_EN0_BIT_RXFB_CFC_FULL_E_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_RXFB_CFC_FULL_INT_EN0_BIT_RXFB_CFC_FULL_E_MSK, OHP_CORE_REG_RXFB_CFC_FULL_INT_EN0_BIT_RXFB_CFC_FULL_E_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000690 bits 31:0) bits 32:63 use field RXFB_CFC_FULL_E of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT_EN1 */
        reg_value = _ohp_core_reg_RXFB_CFC_FULL_INT_EN1_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & OHP_CORE_REG_RXFB_CFC_FULL_INT_EN1_BIT_RXFB_CFC_FULL_E_MSK)
                      >> OHP_CORE_REG_RXFB_CFC_FULL_INT_EN1_BIT_RXFB_CFC_FULL_E_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_RXFB_CFC_FULL_INT_EN1_BIT_RXFB_CFC_FULL_E_MSK, OHP_CORE_REG_RXFB_CFC_FULL_INT_EN1_BIT_RXFB_CFC_FULL_E_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000694 bits 31:0) bits 64:95 use field RXFB_CFC_FULL_E of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT_EN2 */
        reg_value = _ohp_core_reg_RXFB_CFC_FULL_INT_EN2_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & OHP_CORE_REG_RXFB_CFC_FULL_INT_EN2_BIT_RXFB_CFC_FULL_E_MSK)
                      >> OHP_CORE_REG_RXFB_CFC_FULL_INT_EN2_BIT_RXFB_CFC_FULL_E_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_RXFB_CFC_FULL_INT_EN2_BIT_RXFB_CFC_FULL_E_MSK, OHP_CORE_REG_RXFB_CFC_FULL_INT_EN2_BIT_RXFB_CFC_FULL_E_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ohp_core_lfield_range_RXFB_CFC_FULL_E_get", start_bit, stop_bit, value );

    return value;
}

#ifndef ohp_core_lfield_RXFA_TXDLY_E_set
#define ohp_core_lfield_RXFA_TXDLY_E_set( b, h, value ) \
       _ohp_core_lfield_RXFA_TXDLY_E_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_RXFA_TXDLY_E_set( LOG_CALLER_DEFN
                                                      ohp_core_buffer_t *b,
                                                      ohp_core_handle_t *h,
                                                      UINT32 value[3] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x", "ohp_core_lfield_RXFA_TXDLY_E_set", value[2] , value[1] , value[0] );

    /* (0x000006a4 bits 31:0) bits 0:31 use field RXFA_TXDLY_E of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT_EN0 */
    _ohp_core_reg_RXFA_TXDLY_INT_EN0_field_set( LOG_CALLER_ARGS
                                                b,
                                                h,
                                                OHP_CORE_REG_RXFA_TXDLY_INT_EN0_BIT_RXFA_TXDLY_E_MSK,
                                                OHP_CORE_REG_RXFA_TXDLY_INT_EN0_BIT_RXFA_TXDLY_E_OFF,
                                                (value[0] & 0xffffffff));

    /* (0x000006a8 bits 31:0) bits 32:63 use field RXFA_TXDLY_E of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT_EN1 */
    _ohp_core_reg_RXFA_TXDLY_INT_EN1_field_set( LOG_CALLER_ARGS
                                                b,
                                                h,
                                                OHP_CORE_REG_RXFA_TXDLY_INT_EN1_BIT_RXFA_TXDLY_E_MSK,
                                                OHP_CORE_REG_RXFA_TXDLY_INT_EN1_BIT_RXFA_TXDLY_E_OFF,
                                                (value[1] & 0xffffffff));

    /* (0x000006ac bits 31:0) bits 64:95 use field RXFA_TXDLY_E of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT_EN2 */
    _ohp_core_reg_RXFA_TXDLY_INT_EN2_field_set( LOG_CALLER_ARGS
                                                b,
                                                h,
                                                OHP_CORE_REG_RXFA_TXDLY_INT_EN2_BIT_RXFA_TXDLY_E_MSK,
                                                OHP_CORE_REG_RXFA_TXDLY_INT_EN2_BIT_RXFA_TXDLY_E_OFF,
                                                (value[2] & 0xffffffff));
}


#ifndef ohp_core_lfield_RXFA_TXDLY_E_get
#define ohp_core_lfield_RXFA_TXDLY_E_get( b, h, value ) \
       _ohp_core_lfield_RXFA_TXDLY_E_get( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_RXFA_TXDLY_E_get( LOG_CALLER_DEFN
                                                      ohp_core_buffer_t *b,
                                                      ohp_core_handle_t *h,
                                                      UINT32 value[3] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<3;i++)
        value[i] = 0;

    /* (0x000006a4 bits 31:0) bits 0:31 use field RXFA_TXDLY_E of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT_EN0 */
    reg_value = _ohp_core_reg_RXFA_TXDLY_INT_EN0_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_RXFA_TXDLY_INT_EN0_BIT_RXFA_TXDLY_E_MSK) >> OHP_CORE_REG_RXFA_TXDLY_INT_EN0_BIT_RXFA_TXDLY_E_OFF;
    value[0] |= field_value;

    /* (0x000006a8 bits 31:0) bits 32:63 use field RXFA_TXDLY_E of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT_EN1 */
    reg_value = _ohp_core_reg_RXFA_TXDLY_INT_EN1_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_RXFA_TXDLY_INT_EN1_BIT_RXFA_TXDLY_E_MSK) >> OHP_CORE_REG_RXFA_TXDLY_INT_EN1_BIT_RXFA_TXDLY_E_OFF;
    value[1] |= field_value;

    /* (0x000006ac bits 31:0) bits 64:95 use field RXFA_TXDLY_E of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT_EN2 */
    reg_value = _ohp_core_reg_RXFA_TXDLY_INT_EN2_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_RXFA_TXDLY_INT_EN2_BIT_RXFA_TXDLY_E_MSK) >> OHP_CORE_REG_RXFA_TXDLY_INT_EN2_BIT_RXFA_TXDLY_E_OFF;
    value[2] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x", "ohp_core_lfield_RXFA_TXDLY_E_get", value[2] , value[1] , value[0] );

}

#ifndef ohp_core_lfield_range_RXFA_TXDLY_E_set
#define ohp_core_lfield_range_RXFA_TXDLY_E_set( b, h, start_bit, stop_bit, value ) \
       _ohp_core_lfield_range_RXFA_TXDLY_E_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _ohp_core_lfield_range_RXFA_TXDLY_E_set( LOG_CALLER_DEFN
                                                            ohp_core_buffer_t *b,
                                                            ohp_core_handle_t *h,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_lfield_range_RXFA_TXDLY_E_set", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_lfield_range_RXFA_TXDLY_E_set", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ohp_core_lfield_range_RXFA_TXDLY_E_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000006a4 bits 31:0) bits 0:31 use field RXFA_TXDLY_E of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT_EN0 */
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006a4 bits 31:0) bits 0:31 use field RXFA_TXDLY_E of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT_EN0 */
        _ohp_core_reg_RXFA_TXDLY_INT_EN0_field_set( LOG_CALLER_ARGS
                                                    b,
                                                    h,
                                                    subfield_mask << (OHP_CORE_REG_RXFA_TXDLY_INT_EN0_BIT_RXFA_TXDLY_E_OFF + subfield_offset),
                                                    OHP_CORE_REG_RXFA_TXDLY_INT_EN0_BIT_RXFA_TXDLY_E_OFF + subfield_offset,
                                                    value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000006a8 bits 31:0) bits 32:63 use field RXFA_TXDLY_E of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT_EN1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006a8 bits 31:0) bits 32:63 use field RXFA_TXDLY_E of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT_EN1 */
        _ohp_core_reg_RXFA_TXDLY_INT_EN1_field_set( LOG_CALLER_ARGS
                                                    b,
                                                    h,
                                                    subfield_mask << (OHP_CORE_REG_RXFA_TXDLY_INT_EN1_BIT_RXFA_TXDLY_E_OFF + subfield_offset),
                                                    OHP_CORE_REG_RXFA_TXDLY_INT_EN1_BIT_RXFA_TXDLY_E_OFF + subfield_offset,
                                                    value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000006ac bits 31:0) bits 64:95 use field RXFA_TXDLY_E of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT_EN2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006ac bits 31:0) bits 64:95 use field RXFA_TXDLY_E of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT_EN2 */
        _ohp_core_reg_RXFA_TXDLY_INT_EN2_field_set( LOG_CALLER_ARGS
                                                    b,
                                                    h,
                                                    subfield_mask << (OHP_CORE_REG_RXFA_TXDLY_INT_EN2_BIT_RXFA_TXDLY_E_OFF + subfield_offset),
                                                    OHP_CORE_REG_RXFA_TXDLY_INT_EN2_BIT_RXFA_TXDLY_E_OFF + subfield_offset,
                                                    value >> subfield_shift);
    }
}


#ifndef ohp_core_lfield_range_RXFA_TXDLY_E_get
#define ohp_core_lfield_range_RXFA_TXDLY_E_get( b, h, start_bit, stop_bit ) \
       _ohp_core_lfield_range_RXFA_TXDLY_E_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_lfield_range_RXFA_TXDLY_E_get( LOG_CALLER_DEFN
                                                              ohp_core_buffer_t *b,
                                                              ohp_core_handle_t *h,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_lfield_range_RXFA_TXDLY_E_get", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_lfield_range_RXFA_TXDLY_E_get", stop_bit, 95 );
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006a4 bits 31:0) bits 0:31 use field RXFA_TXDLY_E of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT_EN0 */
        reg_value = _ohp_core_reg_RXFA_TXDLY_INT_EN0_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & OHP_CORE_REG_RXFA_TXDLY_INT_EN0_BIT_RXFA_TXDLY_E_MSK)
                      >> OHP_CORE_REG_RXFA_TXDLY_INT_EN0_BIT_RXFA_TXDLY_E_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_RXFA_TXDLY_INT_EN0_BIT_RXFA_TXDLY_E_MSK, OHP_CORE_REG_RXFA_TXDLY_INT_EN0_BIT_RXFA_TXDLY_E_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006a8 bits 31:0) bits 32:63 use field RXFA_TXDLY_E of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT_EN1 */
        reg_value = _ohp_core_reg_RXFA_TXDLY_INT_EN1_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & OHP_CORE_REG_RXFA_TXDLY_INT_EN1_BIT_RXFA_TXDLY_E_MSK)
                      >> OHP_CORE_REG_RXFA_TXDLY_INT_EN1_BIT_RXFA_TXDLY_E_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_RXFA_TXDLY_INT_EN1_BIT_RXFA_TXDLY_E_MSK, OHP_CORE_REG_RXFA_TXDLY_INT_EN1_BIT_RXFA_TXDLY_E_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006ac bits 31:0) bits 64:95 use field RXFA_TXDLY_E of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT_EN2 */
        reg_value = _ohp_core_reg_RXFA_TXDLY_INT_EN2_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & OHP_CORE_REG_RXFA_TXDLY_INT_EN2_BIT_RXFA_TXDLY_E_MSK)
                      >> OHP_CORE_REG_RXFA_TXDLY_INT_EN2_BIT_RXFA_TXDLY_E_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_RXFA_TXDLY_INT_EN2_BIT_RXFA_TXDLY_E_MSK, OHP_CORE_REG_RXFA_TXDLY_INT_EN2_BIT_RXFA_TXDLY_E_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ohp_core_lfield_range_RXFA_TXDLY_E_get", start_bit, stop_bit, value );

    return value;
}

#ifndef ohp_core_lfield_RXFB_TXDLY_E_set
#define ohp_core_lfield_RXFB_TXDLY_E_set( b, h, value ) \
       _ohp_core_lfield_RXFB_TXDLY_E_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_RXFB_TXDLY_E_set( LOG_CALLER_DEFN
                                                      ohp_core_buffer_t *b,
                                                      ohp_core_handle_t *h,
                                                      UINT32 value[3] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x", "ohp_core_lfield_RXFB_TXDLY_E_set", value[2] , value[1] , value[0] );

    /* (0x000006bc bits 31:0) bits 0:31 use field RXFB_TXDLY_E of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT_EN0 */
    _ohp_core_reg_RXFB_TXDLY_INT_EN0_field_set( LOG_CALLER_ARGS
                                                b,
                                                h,
                                                OHP_CORE_REG_RXFB_TXDLY_INT_EN0_BIT_RXFB_TXDLY_E_MSK,
                                                OHP_CORE_REG_RXFB_TXDLY_INT_EN0_BIT_RXFB_TXDLY_E_OFF,
                                                (value[0] & 0xffffffff));

    /* (0x000006c0 bits 31:0) bits 32:63 use field RXFB_TXDLY_E of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT_EN1 */
    _ohp_core_reg_RXFB_TXDLY_INT_EN1_field_set( LOG_CALLER_ARGS
                                                b,
                                                h,
                                                OHP_CORE_REG_RXFB_TXDLY_INT_EN1_BIT_RXFB_TXDLY_E_MSK,
                                                OHP_CORE_REG_RXFB_TXDLY_INT_EN1_BIT_RXFB_TXDLY_E_OFF,
                                                (value[1] & 0xffffffff));

    /* (0x000006c4 bits 31:0) bits 64:95 use field RXFB_TXDLY_E of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT_EN2 */
    _ohp_core_reg_RXFB_TXDLY_INT_EN2_field_set( LOG_CALLER_ARGS
                                                b,
                                                h,
                                                OHP_CORE_REG_RXFB_TXDLY_INT_EN2_BIT_RXFB_TXDLY_E_MSK,
                                                OHP_CORE_REG_RXFB_TXDLY_INT_EN2_BIT_RXFB_TXDLY_E_OFF,
                                                (value[2] & 0xffffffff));
}


#ifndef ohp_core_lfield_RXFB_TXDLY_E_get
#define ohp_core_lfield_RXFB_TXDLY_E_get( b, h, value ) \
       _ohp_core_lfield_RXFB_TXDLY_E_get( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_RXFB_TXDLY_E_get( LOG_CALLER_DEFN
                                                      ohp_core_buffer_t *b,
                                                      ohp_core_handle_t *h,
                                                      UINT32 value[3] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<3;i++)
        value[i] = 0;

    /* (0x000006bc bits 31:0) bits 0:31 use field RXFB_TXDLY_E of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT_EN0 */
    reg_value = _ohp_core_reg_RXFB_TXDLY_INT_EN0_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_RXFB_TXDLY_INT_EN0_BIT_RXFB_TXDLY_E_MSK) >> OHP_CORE_REG_RXFB_TXDLY_INT_EN0_BIT_RXFB_TXDLY_E_OFF;
    value[0] |= field_value;

    /* (0x000006c0 bits 31:0) bits 32:63 use field RXFB_TXDLY_E of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT_EN1 */
    reg_value = _ohp_core_reg_RXFB_TXDLY_INT_EN1_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_RXFB_TXDLY_INT_EN1_BIT_RXFB_TXDLY_E_MSK) >> OHP_CORE_REG_RXFB_TXDLY_INT_EN1_BIT_RXFB_TXDLY_E_OFF;
    value[1] |= field_value;

    /* (0x000006c4 bits 31:0) bits 64:95 use field RXFB_TXDLY_E of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT_EN2 */
    reg_value = _ohp_core_reg_RXFB_TXDLY_INT_EN2_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_RXFB_TXDLY_INT_EN2_BIT_RXFB_TXDLY_E_MSK) >> OHP_CORE_REG_RXFB_TXDLY_INT_EN2_BIT_RXFB_TXDLY_E_OFF;
    value[2] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x", "ohp_core_lfield_RXFB_TXDLY_E_get", value[2] , value[1] , value[0] );

}

#ifndef ohp_core_lfield_range_RXFB_TXDLY_E_set
#define ohp_core_lfield_range_RXFB_TXDLY_E_set( b, h, start_bit, stop_bit, value ) \
       _ohp_core_lfield_range_RXFB_TXDLY_E_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _ohp_core_lfield_range_RXFB_TXDLY_E_set( LOG_CALLER_DEFN
                                                            ohp_core_buffer_t *b,
                                                            ohp_core_handle_t *h,
                                                            UINT32 start_bit,
                                                            UINT32 stop_bit,
                                                            UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_lfield_range_RXFB_TXDLY_E_set", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_lfield_range_RXFB_TXDLY_E_set", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ohp_core_lfield_range_RXFB_TXDLY_E_set", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000006bc bits 31:0) bits 0:31 use field RXFB_TXDLY_E of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT_EN0 */
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006bc bits 31:0) bits 0:31 use field RXFB_TXDLY_E of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT_EN0 */
        _ohp_core_reg_RXFB_TXDLY_INT_EN0_field_set( LOG_CALLER_ARGS
                                                    b,
                                                    h,
                                                    subfield_mask << (OHP_CORE_REG_RXFB_TXDLY_INT_EN0_BIT_RXFB_TXDLY_E_OFF + subfield_offset),
                                                    OHP_CORE_REG_RXFB_TXDLY_INT_EN0_BIT_RXFB_TXDLY_E_OFF + subfield_offset,
                                                    value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000006c0 bits 31:0) bits 32:63 use field RXFB_TXDLY_E of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT_EN1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006c0 bits 31:0) bits 32:63 use field RXFB_TXDLY_E of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT_EN1 */
        _ohp_core_reg_RXFB_TXDLY_INT_EN1_field_set( LOG_CALLER_ARGS
                                                    b,
                                                    h,
                                                    subfield_mask << (OHP_CORE_REG_RXFB_TXDLY_INT_EN1_BIT_RXFB_TXDLY_E_OFF + subfield_offset),
                                                    OHP_CORE_REG_RXFB_TXDLY_INT_EN1_BIT_RXFB_TXDLY_E_OFF + subfield_offset,
                                                    value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000006c4 bits 31:0) bits 64:95 use field RXFB_TXDLY_E of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT_EN2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006c4 bits 31:0) bits 64:95 use field RXFB_TXDLY_E of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT_EN2 */
        _ohp_core_reg_RXFB_TXDLY_INT_EN2_field_set( LOG_CALLER_ARGS
                                                    b,
                                                    h,
                                                    subfield_mask << (OHP_CORE_REG_RXFB_TXDLY_INT_EN2_BIT_RXFB_TXDLY_E_OFF + subfield_offset),
                                                    OHP_CORE_REG_RXFB_TXDLY_INT_EN2_BIT_RXFB_TXDLY_E_OFF + subfield_offset,
                                                    value >> subfield_shift);
    }
}


#ifndef ohp_core_lfield_range_RXFB_TXDLY_E_get
#define ohp_core_lfield_range_RXFB_TXDLY_E_get( b, h, start_bit, stop_bit ) \
       _ohp_core_lfield_range_RXFB_TXDLY_E_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_lfield_range_RXFB_TXDLY_E_get( LOG_CALLER_DEFN
                                                              ohp_core_buffer_t *b,
                                                              ohp_core_handle_t *h,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_lfield_range_RXFB_TXDLY_E_get", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_lfield_range_RXFB_TXDLY_E_get", stop_bit, 95 );
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006bc bits 31:0) bits 0:31 use field RXFB_TXDLY_E of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT_EN0 */
        reg_value = _ohp_core_reg_RXFB_TXDLY_INT_EN0_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & OHP_CORE_REG_RXFB_TXDLY_INT_EN0_BIT_RXFB_TXDLY_E_MSK)
                      >> OHP_CORE_REG_RXFB_TXDLY_INT_EN0_BIT_RXFB_TXDLY_E_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_RXFB_TXDLY_INT_EN0_BIT_RXFB_TXDLY_E_MSK, OHP_CORE_REG_RXFB_TXDLY_INT_EN0_BIT_RXFB_TXDLY_E_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006c0 bits 31:0) bits 32:63 use field RXFB_TXDLY_E of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT_EN1 */
        reg_value = _ohp_core_reg_RXFB_TXDLY_INT_EN1_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & OHP_CORE_REG_RXFB_TXDLY_INT_EN1_BIT_RXFB_TXDLY_E_MSK)
                      >> OHP_CORE_REG_RXFB_TXDLY_INT_EN1_BIT_RXFB_TXDLY_E_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_RXFB_TXDLY_INT_EN1_BIT_RXFB_TXDLY_E_MSK, OHP_CORE_REG_RXFB_TXDLY_INT_EN1_BIT_RXFB_TXDLY_E_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006c4 bits 31:0) bits 64:95 use field RXFB_TXDLY_E of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT_EN2 */
        reg_value = _ohp_core_reg_RXFB_TXDLY_INT_EN2_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & OHP_CORE_REG_RXFB_TXDLY_INT_EN2_BIT_RXFB_TXDLY_E_MSK)
                      >> OHP_CORE_REG_RXFB_TXDLY_INT_EN2_BIT_RXFB_TXDLY_E_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_RXFB_TXDLY_INT_EN2_BIT_RXFB_TXDLY_E_MSK, OHP_CORE_REG_RXFB_TXDLY_INT_EN2_BIT_RXFB_TXDLY_E_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ohp_core_lfield_range_RXFB_TXDLY_E_get", start_bit, stop_bit, value );

    return value;
}

#ifndef ohp_core_field_RXMAC_UID_FAIL_E_set
#define ohp_core_field_RXMAC_UID_FAIL_E_set( b, h, value ) \
       _ohp_core_field_RXMAC_UID_FAIL_E_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_field_RXMAC_UID_FAIL_E_set( LOG_CALLER_DEFN
                                                         ohp_core_buffer_t *b,
                                                         ohp_core_handle_t *h,
                                                         UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ohp_core_field_RXMAC_UID_FAIL_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ohp_core_field_RXMAC_UID_FAIL_E_set", value );

    /* (0x000006d4 bits 0) field RXMAC_UID_FAIL_E of register PMC_OHP_CORE_REG_RXMAC_UID_FAIL_EN */
    _ohp_core_reg_RXMAC_UID_FAIL_EN_field_set( LOG_CALLER_ARGS
                                               b,
                                               h,
                                               OHP_CORE_REG_RXMAC_UID_FAIL_EN_BIT_RXMAC_UID_FAIL_E_MSK,
                                               OHP_CORE_REG_RXMAC_UID_FAIL_EN_BIT_RXMAC_UID_FAIL_E_OFF,
                                               value);
}


#ifndef ohp_core_field_RXMAC_UID_FAIL_E_get
#define ohp_core_field_RXMAC_UID_FAIL_E_get( b, h ) \
       _ohp_core_field_RXMAC_UID_FAIL_E_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_RXMAC_UID_FAIL_E_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006d4 bits 0) field RXMAC_UID_FAIL_E of register PMC_OHP_CORE_REG_RXMAC_UID_FAIL_EN */
    reg_value = _ohp_core_reg_RXMAC_UID_FAIL_EN_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_RXMAC_UID_FAIL_EN_BIT_RXMAC_UID_FAIL_E_MSK) >> OHP_CORE_REG_RXMAC_UID_FAIL_EN_BIT_RXMAC_UID_FAIL_E_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_RXMAC_UID_FAIL_E_get", value );

    return value;
}

#ifndef ohp_core_field_RXMAC_FRMRID_FAIL_E_set
#define ohp_core_field_RXMAC_FRMRID_FAIL_E_set( b, h, value ) \
       _ohp_core_field_RXMAC_FRMRID_FAIL_E_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_field_RXMAC_FRMRID_FAIL_E_set( LOG_CALLER_DEFN
                                                            ohp_core_buffer_t *b,
                                                            ohp_core_handle_t *h,
                                                            UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ohp_core_field_RXMAC_FRMRID_FAIL_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ohp_core_field_RXMAC_FRMRID_FAIL_E_set", value );

    /* (0x000006d8 bits 0) field RXMAC_FRMRID_FAIL_E of register PMC_OHP_CORE_REG_RXMAC_FRMRID_FAIL_EN */
    _ohp_core_reg_RXMAC_FRMRID_FAIL_EN_field_set( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  OHP_CORE_REG_RXMAC_FRMRID_FAIL_EN_BIT_RXMAC_FRMRID_FAIL_E_MSK,
                                                  OHP_CORE_REG_RXMAC_FRMRID_FAIL_EN_BIT_RXMAC_FRMRID_FAIL_E_OFF,
                                                  value);
}


#ifndef ohp_core_field_RXMAC_FRMRID_FAIL_E_get
#define ohp_core_field_RXMAC_FRMRID_FAIL_E_get( b, h ) \
       _ohp_core_field_RXMAC_FRMRID_FAIL_E_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_RXMAC_FRMRID_FAIL_E_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006d8 bits 0) field RXMAC_FRMRID_FAIL_E of register PMC_OHP_CORE_REG_RXMAC_FRMRID_FAIL_EN */
    reg_value = _ohp_core_reg_RXMAC_FRMRID_FAIL_EN_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_RXMAC_FRMRID_FAIL_EN_BIT_RXMAC_FRMRID_FAIL_E_MSK) >> OHP_CORE_REG_RXMAC_FRMRID_FAIL_EN_BIT_RXMAC_FRMRID_FAIL_E_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_RXMAC_FRMRID_FAIL_E_get", value );

    return value;
}

#ifndef ohp_core_field_RXMAC_CHID_FAIL_E_set
#define ohp_core_field_RXMAC_CHID_FAIL_E_set( b, h, value ) \
       _ohp_core_field_RXMAC_CHID_FAIL_E_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_field_RXMAC_CHID_FAIL_E_set( LOG_CALLER_DEFN
                                                          ohp_core_buffer_t *b,
                                                          ohp_core_handle_t *h,
                                                          UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ohp_core_field_RXMAC_CHID_FAIL_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ohp_core_field_RXMAC_CHID_FAIL_E_set", value );

    /* (0x000006dc bits 0) field RXMAC_CHID_FAIL_E of register PMC_OHP_CORE_REG_RXMAC_CHID_FAIL_EN */
    _ohp_core_reg_RXMAC_CHID_FAIL_EN_field_set( LOG_CALLER_ARGS
                                                b,
                                                h,
                                                OHP_CORE_REG_RXMAC_CHID_FAIL_EN_BIT_RXMAC_CHID_FAIL_E_MSK,
                                                OHP_CORE_REG_RXMAC_CHID_FAIL_EN_BIT_RXMAC_CHID_FAIL_E_OFF,
                                                value);
}


#ifndef ohp_core_field_RXMAC_CHID_FAIL_E_get
#define ohp_core_field_RXMAC_CHID_FAIL_E_get( b, h ) \
       _ohp_core_field_RXMAC_CHID_FAIL_E_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_RXMAC_CHID_FAIL_E_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006dc bits 0) field RXMAC_CHID_FAIL_E of register PMC_OHP_CORE_REG_RXMAC_CHID_FAIL_EN */
    reg_value = _ohp_core_reg_RXMAC_CHID_FAIL_EN_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_RXMAC_CHID_FAIL_EN_BIT_RXMAC_CHID_FAIL_E_MSK) >> OHP_CORE_REG_RXMAC_CHID_FAIL_EN_BIT_RXMAC_CHID_FAIL_E_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_RXMAC_CHID_FAIL_E_get", value );

    return value;
}

#ifndef ohp_core_field_RXMAC_PKTERR_E_set
#define ohp_core_field_RXMAC_PKTERR_E_set( b, h, value ) \
       _ohp_core_field_RXMAC_PKTERR_E_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_field_RXMAC_PKTERR_E_set( LOG_CALLER_DEFN
                                                       ohp_core_buffer_t *b,
                                                       ohp_core_handle_t *h,
                                                       UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ohp_core_field_RXMAC_PKTERR_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ohp_core_field_RXMAC_PKTERR_E_set", value );

    /* (0x000006e0 bits 0) field RXMAC_PKTERR_E of register PMC_OHP_CORE_REG_RXMAC_PKTERR_INT_EN */
    _ohp_core_reg_RXMAC_PKTERR_INT_EN_field_set( LOG_CALLER_ARGS
                                                 b,
                                                 h,
                                                 OHP_CORE_REG_RXMAC_PKTERR_INT_EN_BIT_RXMAC_PKTERR_E_MSK,
                                                 OHP_CORE_REG_RXMAC_PKTERR_INT_EN_BIT_RXMAC_PKTERR_E_OFF,
                                                 value);
}


#ifndef ohp_core_field_RXMAC_PKTERR_E_get
#define ohp_core_field_RXMAC_PKTERR_E_get( b, h ) \
       _ohp_core_field_RXMAC_PKTERR_E_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_RXMAC_PKTERR_E_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006e0 bits 0) field RXMAC_PKTERR_E of register PMC_OHP_CORE_REG_RXMAC_PKTERR_INT_EN */
    reg_value = _ohp_core_reg_RXMAC_PKTERR_INT_EN_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_RXMAC_PKTERR_INT_EN_BIT_RXMAC_PKTERR_E_MSK) >> OHP_CORE_REG_RXMAC_PKTERR_INT_EN_BIT_RXMAC_PKTERR_E_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_RXMAC_PKTERR_E_get", value );

    return value;
}

#ifndef ohp_core_field_RXMAC_FIFO_ERR_E_set
#define ohp_core_field_RXMAC_FIFO_ERR_E_set( b, h, value ) \
       _ohp_core_field_RXMAC_FIFO_ERR_E_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_field_RXMAC_FIFO_ERR_E_set( LOG_CALLER_DEFN
                                                         ohp_core_buffer_t *b,
                                                         ohp_core_handle_t *h,
                                                         UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ohp_core_field_RXMAC_FIFO_ERR_E_set", value, 1);
    IOLOG( "%s <= 0x%08x", "ohp_core_field_RXMAC_FIFO_ERR_E_set", value );

    /* (0x000006e4 bits 0) field RXMAC_FIFO_ERR_E of register PMC_OHP_CORE_REG_RXMAC_RXFIFO_ERR_EN */
    _ohp_core_reg_RXMAC_RXFIFO_ERR_EN_field_set( LOG_CALLER_ARGS
                                                 b,
                                                 h,
                                                 OHP_CORE_REG_RXMAC_RXFIFO_ERR_EN_BIT_RXMAC_FIFO_ERR_E_MSK,
                                                 OHP_CORE_REG_RXMAC_RXFIFO_ERR_EN_BIT_RXMAC_FIFO_ERR_E_OFF,
                                                 value);
}


#ifndef ohp_core_field_RXMAC_FIFO_ERR_E_get
#define ohp_core_field_RXMAC_FIFO_ERR_E_get( b, h ) \
       _ohp_core_field_RXMAC_FIFO_ERR_E_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_RXMAC_FIFO_ERR_E_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006e4 bits 0) field RXMAC_FIFO_ERR_E of register PMC_OHP_CORE_REG_RXMAC_RXFIFO_ERR_EN */
    reg_value = _ohp_core_reg_RXMAC_RXFIFO_ERR_EN_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_RXMAC_RXFIFO_ERR_EN_BIT_RXMAC_FIFO_ERR_E_MSK) >> OHP_CORE_REG_RXMAC_RXFIFO_ERR_EN_BIT_RXMAC_FIFO_ERR_E_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_RXMAC_FIFO_ERR_E_get", value );

    return value;
}

/*
 * ==================================================================================
 *                 Parameter Access Functions for Paramset int_sync
 * ==================================================================================
 */

#ifndef ohp_core_lfield_RXFA_CFC_FULL_I_set_to_clear
#define ohp_core_lfield_RXFA_CFC_FULL_I_set_to_clear( b, h, value ) \
       _ohp_core_lfield_RXFA_CFC_FULL_I_set_to_clear( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_RXFA_CFC_FULL_I_set_to_clear( LOG_CALLER_DEFN
                                                                  ohp_core_buffer_t *b,
                                                                  ohp_core_handle_t *h,
                                                                  UINT32 value[3] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x", "ohp_core_lfield_RXFA_CFC_FULL_I_set_to_clear", value[2] , value[1] , value[0] );

    /* (0x00000680 bits 31:0) bits 0:31 use field RXFA_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT0 */
    _ohp_core_reg_RXFA_CFC_FULL_INT0_action_on_write_field_set( LOG_CALLER_ARGS
                                                                b,
                                                                h,
                                                                OHP_CORE_REG_RXFA_CFC_FULL_INT0_BIT_RXFA_CFC_FULL_I_MSK,
                                                                OHP_CORE_REG_RXFA_CFC_FULL_INT0_BIT_RXFA_CFC_FULL_I_OFF,
                                                                (value[0] & 0xffffffff));

    /* (0x00000684 bits 31:0) bits 32:63 use field RXFA_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT1 */
    _ohp_core_reg_RXFA_CFC_FULL_INT1_action_on_write_field_set( LOG_CALLER_ARGS
                                                                b,
                                                                h,
                                                                OHP_CORE_REG_RXFA_CFC_FULL_INT1_BIT_RXFA_CFC_FULL_I_MSK,
                                                                OHP_CORE_REG_RXFA_CFC_FULL_INT1_BIT_RXFA_CFC_FULL_I_OFF,
                                                                (value[1] & 0xffffffff));

    /* (0x00000688 bits 31:0) bits 64:95 use field RXFA_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT2 */
    _ohp_core_reg_RXFA_CFC_FULL_INT2_action_on_write_field_set( LOG_CALLER_ARGS
                                                                b,
                                                                h,
                                                                OHP_CORE_REG_RXFA_CFC_FULL_INT2_BIT_RXFA_CFC_FULL_I_MSK,
                                                                OHP_CORE_REG_RXFA_CFC_FULL_INT2_BIT_RXFA_CFC_FULL_I_OFF,
                                                                (value[2] & 0xffffffff));
}


#ifndef ohp_core_lfield_RXFA_CFC_FULL_I_get
#define ohp_core_lfield_RXFA_CFC_FULL_I_get( b, h, value ) \
       _ohp_core_lfield_RXFA_CFC_FULL_I_get( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_RXFA_CFC_FULL_I_get( LOG_CALLER_DEFN
                                                         ohp_core_buffer_t *b,
                                                         ohp_core_handle_t *h,
                                                         UINT32 value[3] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<3;i++)
        value[i] = 0;

    /* (0x00000680 bits 31:0) bits 0:31 use field RXFA_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT0 */
    reg_value = _ohp_core_reg_RXFA_CFC_FULL_INT0_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_RXFA_CFC_FULL_INT0_BIT_RXFA_CFC_FULL_I_MSK) >> OHP_CORE_REG_RXFA_CFC_FULL_INT0_BIT_RXFA_CFC_FULL_I_OFF;
    value[0] |= field_value;

    /* (0x00000684 bits 31:0) bits 32:63 use field RXFA_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT1 */
    reg_value = _ohp_core_reg_RXFA_CFC_FULL_INT1_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_RXFA_CFC_FULL_INT1_BIT_RXFA_CFC_FULL_I_MSK) >> OHP_CORE_REG_RXFA_CFC_FULL_INT1_BIT_RXFA_CFC_FULL_I_OFF;
    value[1] |= field_value;

    /* (0x00000688 bits 31:0) bits 64:95 use field RXFA_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT2 */
    reg_value = _ohp_core_reg_RXFA_CFC_FULL_INT2_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_RXFA_CFC_FULL_INT2_BIT_RXFA_CFC_FULL_I_MSK) >> OHP_CORE_REG_RXFA_CFC_FULL_INT2_BIT_RXFA_CFC_FULL_I_OFF;
    value[2] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x", "ohp_core_lfield_RXFA_CFC_FULL_I_get", value[2] , value[1] , value[0] );

}

#ifndef ohp_core_lfield_range_RXFA_CFC_FULL_I_set_to_clear
#define ohp_core_lfield_range_RXFA_CFC_FULL_I_set_to_clear( b, h, start_bit, stop_bit, value ) \
       _ohp_core_lfield_range_RXFA_CFC_FULL_I_set_to_clear( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _ohp_core_lfield_range_RXFA_CFC_FULL_I_set_to_clear( LOG_CALLER_DEFN
                                                                        ohp_core_buffer_t *b,
                                                                        ohp_core_handle_t *h,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit,
                                                                        UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_lfield_range_RXFA_CFC_FULL_I_set_to_clear", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_lfield_range_RXFA_CFC_FULL_I_set_to_clear", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ohp_core_lfield_range_RXFA_CFC_FULL_I_set_to_clear", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000680 bits 31:0) bits 0:31 use field RXFA_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT0 */
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000680 bits 31:0) bits 0:31 use field RXFA_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT0 */
        _ohp_core_reg_RXFA_CFC_FULL_INT0_action_on_write_field_set( LOG_CALLER_ARGS
                                                                    b,
                                                                    h,
                                                                    subfield_mask << (OHP_CORE_REG_RXFA_CFC_FULL_INT0_BIT_RXFA_CFC_FULL_I_OFF + subfield_offset),
                                                                    OHP_CORE_REG_RXFA_CFC_FULL_INT0_BIT_RXFA_CFC_FULL_I_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000684 bits 31:0) bits 32:63 use field RXFA_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000684 bits 31:0) bits 32:63 use field RXFA_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT1 */
        _ohp_core_reg_RXFA_CFC_FULL_INT1_action_on_write_field_set( LOG_CALLER_ARGS
                                                                    b,
                                                                    h,
                                                                    subfield_mask << (OHP_CORE_REG_RXFA_CFC_FULL_INT1_BIT_RXFA_CFC_FULL_I_OFF + subfield_offset),
                                                                    OHP_CORE_REG_RXFA_CFC_FULL_INT1_BIT_RXFA_CFC_FULL_I_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000688 bits 31:0) bits 64:95 use field RXFA_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000688 bits 31:0) bits 64:95 use field RXFA_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT2 */
        _ohp_core_reg_RXFA_CFC_FULL_INT2_action_on_write_field_set( LOG_CALLER_ARGS
                                                                    b,
                                                                    h,
                                                                    subfield_mask << (OHP_CORE_REG_RXFA_CFC_FULL_INT2_BIT_RXFA_CFC_FULL_I_OFF + subfield_offset),
                                                                    OHP_CORE_REG_RXFA_CFC_FULL_INT2_BIT_RXFA_CFC_FULL_I_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}


#ifndef ohp_core_lfield_range_RXFA_CFC_FULL_I_get
#define ohp_core_lfield_range_RXFA_CFC_FULL_I_get( b, h, start_bit, stop_bit ) \
       _ohp_core_lfield_range_RXFA_CFC_FULL_I_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_lfield_range_RXFA_CFC_FULL_I_get( LOG_CALLER_DEFN
                                                                 ohp_core_buffer_t *b,
                                                                 ohp_core_handle_t *h,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_lfield_range_RXFA_CFC_FULL_I_get", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_lfield_range_RXFA_CFC_FULL_I_get", stop_bit, 95 );
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000680 bits 31:0) bits 0:31 use field RXFA_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT0 */
        reg_value = _ohp_core_reg_RXFA_CFC_FULL_INT0_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & OHP_CORE_REG_RXFA_CFC_FULL_INT0_BIT_RXFA_CFC_FULL_I_MSK)
                      >> OHP_CORE_REG_RXFA_CFC_FULL_INT0_BIT_RXFA_CFC_FULL_I_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_RXFA_CFC_FULL_INT0_BIT_RXFA_CFC_FULL_I_MSK, OHP_CORE_REG_RXFA_CFC_FULL_INT0_BIT_RXFA_CFC_FULL_I_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000684 bits 31:0) bits 32:63 use field RXFA_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT1 */
        reg_value = _ohp_core_reg_RXFA_CFC_FULL_INT1_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & OHP_CORE_REG_RXFA_CFC_FULL_INT1_BIT_RXFA_CFC_FULL_I_MSK)
                      >> OHP_CORE_REG_RXFA_CFC_FULL_INT1_BIT_RXFA_CFC_FULL_I_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_RXFA_CFC_FULL_INT1_BIT_RXFA_CFC_FULL_I_MSK, OHP_CORE_REG_RXFA_CFC_FULL_INT1_BIT_RXFA_CFC_FULL_I_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000688 bits 31:0) bits 64:95 use field RXFA_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT2 */
        reg_value = _ohp_core_reg_RXFA_CFC_FULL_INT2_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & OHP_CORE_REG_RXFA_CFC_FULL_INT2_BIT_RXFA_CFC_FULL_I_MSK)
                      >> OHP_CORE_REG_RXFA_CFC_FULL_INT2_BIT_RXFA_CFC_FULL_I_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_RXFA_CFC_FULL_INT2_BIT_RXFA_CFC_FULL_I_MSK, OHP_CORE_REG_RXFA_CFC_FULL_INT2_BIT_RXFA_CFC_FULL_I_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ohp_core_lfield_range_RXFA_CFC_FULL_I_get", start_bit, stop_bit, value );

    return value;
}

#ifndef ohp_core_lfield_range_RXFA_CFC_FULL_I_poll_bit
#define ohp_core_lfield_range_RXFA_CFC_FULL_I_poll_bit( b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _ohp_core_lfield_range_RXFA_CFC_FULL_I_poll_bit( LOG_CALLER b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _ohp_core_lfield_range_RXFA_CFC_FULL_I_poll_bit( LOG_CALLER_DEFN
                                                                         ohp_core_buffer_t *b,
                                                                         ohp_core_handle_t *h,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_lfield_range_RXFA_CFC_FULL_I_poll_bit", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_lfield_range_RXFA_CFC_FULL_I_poll_bit", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ohp_core_lfield_range_RXFA_CFC_FULL_I_poll_bit", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000680 bits 31:0) bits 0:31 use field RXFA_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT0 */
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000680 bits 31:0) bits 0:31 use field RXFA_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT0 */
        return _ohp_core_reg_RXFA_CFC_FULL_INT0_poll_bit( LOG_CALLER_ARGS
                                                          b,
                                                          h,
                                                          subfield_mask << (OHP_CORE_REG_RXFA_CFC_FULL_INT0_BIT_RXFA_CFC_FULL_I_OFF + subfield_offset),
                                                          value << (OHP_CORE_REG_RXFA_CFC_FULL_INT0_BIT_RXFA_CFC_FULL_I_OFF + subfield_offset),
                                                          max_count,
                                                          num_failed_polls,
                                                          delay_between_polls_in_microseconds);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000684 bits 31:0) bits 32:63 use field RXFA_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000684 bits 31:0) bits 32:63 use field RXFA_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT1 */
        return _ohp_core_reg_RXFA_CFC_FULL_INT1_poll_bit( LOG_CALLER_ARGS
                                                          b,
                                                          h,
                                                          subfield_mask << (OHP_CORE_REG_RXFA_CFC_FULL_INT1_BIT_RXFA_CFC_FULL_I_OFF + subfield_offset),
                                                          value << (OHP_CORE_REG_RXFA_CFC_FULL_INT1_BIT_RXFA_CFC_FULL_I_OFF + subfield_offset),
                                                          max_count,
                                                          num_failed_polls,
                                                          delay_between_polls_in_microseconds);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000688 bits 31:0) bits 64:95 use field RXFA_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000688 bits 31:0) bits 64:95 use field RXFA_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT2 */
        return _ohp_core_reg_RXFA_CFC_FULL_INT2_poll_bit( LOG_CALLER_ARGS
                                                          b,
                                                          h,
                                                          subfield_mask << (OHP_CORE_REG_RXFA_CFC_FULL_INT2_BIT_RXFA_CFC_FULL_I_OFF + subfield_offset),
                                                          value << (OHP_CORE_REG_RXFA_CFC_FULL_INT2_BIT_RXFA_CFC_FULL_I_OFF + subfield_offset),
                                                          max_count,
                                                          num_failed_polls,
                                                          delay_between_polls_in_microseconds);
    }
    return PMC_ERR_INVALID_PARAMETERS;
}


#ifndef ohp_core_lfield_RXFA_CFC_FULL_I_poll_bit
#define ohp_core_lfield_RXFA_CFC_FULL_I_poll_bit( b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _ohp_core_lfield_RXFA_CFC_FULL_I_poll_bit( LOG_CALLER b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _ohp_core_lfield_RXFA_CFC_FULL_I_poll_bit( LOG_CALLER_DEFN
                                                                   ohp_core_buffer_t *b,
                                                                   ohp_core_handle_t *h,
                                                                   UINT32 value[3],
                                                                   UINT32 max_count,
                                                                   UINT32 *num_failed_polls,
                                                                   UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x 0x%08x 0x%08x", "ohp_core_lfield_RXFA_CFC_FULL_I_poll_bit", value[2] , value[1] , value[0] );

    /* (0x00000680 bits 31:0) bits 0:31 use field RXFA_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT0 */
    return _ohp_core_reg_RXFA_CFC_FULL_INT0_poll_bit( LOG_CALLER_ARGS
                                                      b,
                                                      h,
                                                      OHP_CORE_REG_RXFA_CFC_FULL_INT0_BIT_RXFA_CFC_FULL_I_MSK,
                                                      ((value[0] & 0xffffffff)<<OHP_CORE_REG_RXFA_CFC_FULL_INT0_BIT_RXFA_CFC_FULL_I_OFF),
                                                      max_count,
                                                      num_failed_polls,
                                                      delay_between_polls_in_microseconds);

    /* (0x00000684 bits 31:0) bits 32:63 use field RXFA_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT1 */
    return _ohp_core_reg_RXFA_CFC_FULL_INT1_poll_bit( LOG_CALLER_ARGS
                                                      b,
                                                      h,
                                                      OHP_CORE_REG_RXFA_CFC_FULL_INT1_BIT_RXFA_CFC_FULL_I_MSK,
                                                      ((value[1] & 0xffffffff)<<OHP_CORE_REG_RXFA_CFC_FULL_INT1_BIT_RXFA_CFC_FULL_I_OFF),
                                                      max_count,
                                                      num_failed_polls,
                                                      delay_between_polls_in_microseconds);

    /* (0x00000688 bits 31:0) bits 64:95 use field RXFA_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFA_CFC_FULL_INT2 */
    return _ohp_core_reg_RXFA_CFC_FULL_INT2_poll_bit( LOG_CALLER_ARGS
                                                      b,
                                                      h,
                                                      OHP_CORE_REG_RXFA_CFC_FULL_INT2_BIT_RXFA_CFC_FULL_I_MSK,
                                                      ((value[2] & 0xffffffff)<<OHP_CORE_REG_RXFA_CFC_FULL_INT2_BIT_RXFA_CFC_FULL_I_OFF),
                                                      max_count,
                                                      num_failed_polls,
                                                      delay_between_polls_in_microseconds);
}


#ifndef ohp_core_lfield_RXFB_CFC_FULL_I_set_to_clear
#define ohp_core_lfield_RXFB_CFC_FULL_I_set_to_clear( b, h, value ) \
       _ohp_core_lfield_RXFB_CFC_FULL_I_set_to_clear( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_RXFB_CFC_FULL_I_set_to_clear( LOG_CALLER_DEFN
                                                                  ohp_core_buffer_t *b,
                                                                  ohp_core_handle_t *h,
                                                                  UINT32 value[3] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x", "ohp_core_lfield_RXFB_CFC_FULL_I_set_to_clear", value[2] , value[1] , value[0] );

    /* (0x00000698 bits 31:0) bits 0:31 use field RXFB_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT0 */
    _ohp_core_reg_RXFB_CFC_FULL_INT0_action_on_write_field_set( LOG_CALLER_ARGS
                                                                b,
                                                                h,
                                                                OHP_CORE_REG_RXFB_CFC_FULL_INT0_BIT_RXFB_CFC_FULL_I_MSK,
                                                                OHP_CORE_REG_RXFB_CFC_FULL_INT0_BIT_RXFB_CFC_FULL_I_OFF,
                                                                (value[0] & 0xffffffff));

    /* (0x0000069c bits 31:0) bits 32:63 use field RXFB_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT1 */
    _ohp_core_reg_RXFB_CFC_FULL_INT1_action_on_write_field_set( LOG_CALLER_ARGS
                                                                b,
                                                                h,
                                                                OHP_CORE_REG_RXFB_CFC_FULL_INT1_BIT_RXFB_CFC_FULL_I_MSK,
                                                                OHP_CORE_REG_RXFB_CFC_FULL_INT1_BIT_RXFB_CFC_FULL_I_OFF,
                                                                (value[1] & 0xffffffff));

    /* (0x000006a0 bits 31:0) bits 64:95 use field RXFB_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT2 */
    _ohp_core_reg_RXFB_CFC_FULL_INT2_action_on_write_field_set( LOG_CALLER_ARGS
                                                                b,
                                                                h,
                                                                OHP_CORE_REG_RXFB_CFC_FULL_INT2_BIT_RXFB_CFC_FULL_I_MSK,
                                                                OHP_CORE_REG_RXFB_CFC_FULL_INT2_BIT_RXFB_CFC_FULL_I_OFF,
                                                                (value[2] & 0xffffffff));
}


#ifndef ohp_core_lfield_RXFB_CFC_FULL_I_get
#define ohp_core_lfield_RXFB_CFC_FULL_I_get( b, h, value ) \
       _ohp_core_lfield_RXFB_CFC_FULL_I_get( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_RXFB_CFC_FULL_I_get( LOG_CALLER_DEFN
                                                         ohp_core_buffer_t *b,
                                                         ohp_core_handle_t *h,
                                                         UINT32 value[3] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<3;i++)
        value[i] = 0;

    /* (0x00000698 bits 31:0) bits 0:31 use field RXFB_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT0 */
    reg_value = _ohp_core_reg_RXFB_CFC_FULL_INT0_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_RXFB_CFC_FULL_INT0_BIT_RXFB_CFC_FULL_I_MSK) >> OHP_CORE_REG_RXFB_CFC_FULL_INT0_BIT_RXFB_CFC_FULL_I_OFF;
    value[0] |= field_value;

    /* (0x0000069c bits 31:0) bits 32:63 use field RXFB_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT1 */
    reg_value = _ohp_core_reg_RXFB_CFC_FULL_INT1_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_RXFB_CFC_FULL_INT1_BIT_RXFB_CFC_FULL_I_MSK) >> OHP_CORE_REG_RXFB_CFC_FULL_INT1_BIT_RXFB_CFC_FULL_I_OFF;
    value[1] |= field_value;

    /* (0x000006a0 bits 31:0) bits 64:95 use field RXFB_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT2 */
    reg_value = _ohp_core_reg_RXFB_CFC_FULL_INT2_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_RXFB_CFC_FULL_INT2_BIT_RXFB_CFC_FULL_I_MSK) >> OHP_CORE_REG_RXFB_CFC_FULL_INT2_BIT_RXFB_CFC_FULL_I_OFF;
    value[2] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x", "ohp_core_lfield_RXFB_CFC_FULL_I_get", value[2] , value[1] , value[0] );

}

#ifndef ohp_core_lfield_range_RXFB_CFC_FULL_I_set_to_clear
#define ohp_core_lfield_range_RXFB_CFC_FULL_I_set_to_clear( b, h, start_bit, stop_bit, value ) \
       _ohp_core_lfield_range_RXFB_CFC_FULL_I_set_to_clear( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _ohp_core_lfield_range_RXFB_CFC_FULL_I_set_to_clear( LOG_CALLER_DEFN
                                                                        ohp_core_buffer_t *b,
                                                                        ohp_core_handle_t *h,
                                                                        UINT32 start_bit,
                                                                        UINT32 stop_bit,
                                                                        UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_lfield_range_RXFB_CFC_FULL_I_set_to_clear", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_lfield_range_RXFB_CFC_FULL_I_set_to_clear", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ohp_core_lfield_range_RXFB_CFC_FULL_I_set_to_clear", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000698 bits 31:0) bits 0:31 use field RXFB_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT0 */
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000698 bits 31:0) bits 0:31 use field RXFB_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT0 */
        _ohp_core_reg_RXFB_CFC_FULL_INT0_action_on_write_field_set( LOG_CALLER_ARGS
                                                                    b,
                                                                    h,
                                                                    subfield_mask << (OHP_CORE_REG_RXFB_CFC_FULL_INT0_BIT_RXFB_CFC_FULL_I_OFF + subfield_offset),
                                                                    OHP_CORE_REG_RXFB_CFC_FULL_INT0_BIT_RXFB_CFC_FULL_I_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x0000069c bits 31:0) bits 32:63 use field RXFB_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000069c bits 31:0) bits 32:63 use field RXFB_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT1 */
        _ohp_core_reg_RXFB_CFC_FULL_INT1_action_on_write_field_set( LOG_CALLER_ARGS
                                                                    b,
                                                                    h,
                                                                    subfield_mask << (OHP_CORE_REG_RXFB_CFC_FULL_INT1_BIT_RXFB_CFC_FULL_I_OFF + subfield_offset),
                                                                    OHP_CORE_REG_RXFB_CFC_FULL_INT1_BIT_RXFB_CFC_FULL_I_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000006a0 bits 31:0) bits 64:95 use field RXFB_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006a0 bits 31:0) bits 64:95 use field RXFB_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT2 */
        _ohp_core_reg_RXFB_CFC_FULL_INT2_action_on_write_field_set( LOG_CALLER_ARGS
                                                                    b,
                                                                    h,
                                                                    subfield_mask << (OHP_CORE_REG_RXFB_CFC_FULL_INT2_BIT_RXFB_CFC_FULL_I_OFF + subfield_offset),
                                                                    OHP_CORE_REG_RXFB_CFC_FULL_INT2_BIT_RXFB_CFC_FULL_I_OFF + subfield_offset,
                                                                    value >> subfield_shift);
    }
}


#ifndef ohp_core_lfield_range_RXFB_CFC_FULL_I_get
#define ohp_core_lfield_range_RXFB_CFC_FULL_I_get( b, h, start_bit, stop_bit ) \
       _ohp_core_lfield_range_RXFB_CFC_FULL_I_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_lfield_range_RXFB_CFC_FULL_I_get( LOG_CALLER_DEFN
                                                                 ohp_core_buffer_t *b,
                                                                 ohp_core_handle_t *h,
                                                                 UINT32 start_bit,
                                                                 UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_lfield_range_RXFB_CFC_FULL_I_get", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_lfield_range_RXFB_CFC_FULL_I_get", stop_bit, 95 );
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00000698 bits 31:0) bits 0:31 use field RXFB_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT0 */
        reg_value = _ohp_core_reg_RXFB_CFC_FULL_INT0_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & OHP_CORE_REG_RXFB_CFC_FULL_INT0_BIT_RXFB_CFC_FULL_I_MSK)
                      >> OHP_CORE_REG_RXFB_CFC_FULL_INT0_BIT_RXFB_CFC_FULL_I_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_RXFB_CFC_FULL_INT0_BIT_RXFB_CFC_FULL_I_MSK, OHP_CORE_REG_RXFB_CFC_FULL_INT0_BIT_RXFB_CFC_FULL_I_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000069c bits 31:0) bits 32:63 use field RXFB_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT1 */
        reg_value = _ohp_core_reg_RXFB_CFC_FULL_INT1_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & OHP_CORE_REG_RXFB_CFC_FULL_INT1_BIT_RXFB_CFC_FULL_I_MSK)
                      >> OHP_CORE_REG_RXFB_CFC_FULL_INT1_BIT_RXFB_CFC_FULL_I_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_RXFB_CFC_FULL_INT1_BIT_RXFB_CFC_FULL_I_MSK, OHP_CORE_REG_RXFB_CFC_FULL_INT1_BIT_RXFB_CFC_FULL_I_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006a0 bits 31:0) bits 64:95 use field RXFB_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT2 */
        reg_value = _ohp_core_reg_RXFB_CFC_FULL_INT2_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & OHP_CORE_REG_RXFB_CFC_FULL_INT2_BIT_RXFB_CFC_FULL_I_MSK)
                      >> OHP_CORE_REG_RXFB_CFC_FULL_INT2_BIT_RXFB_CFC_FULL_I_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_RXFB_CFC_FULL_INT2_BIT_RXFB_CFC_FULL_I_MSK, OHP_CORE_REG_RXFB_CFC_FULL_INT2_BIT_RXFB_CFC_FULL_I_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ohp_core_lfield_range_RXFB_CFC_FULL_I_get", start_bit, stop_bit, value );

    return value;
}

#ifndef ohp_core_lfield_range_RXFB_CFC_FULL_I_poll_bit
#define ohp_core_lfield_range_RXFB_CFC_FULL_I_poll_bit( b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _ohp_core_lfield_range_RXFB_CFC_FULL_I_poll_bit( LOG_CALLER b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _ohp_core_lfield_range_RXFB_CFC_FULL_I_poll_bit( LOG_CALLER_DEFN
                                                                         ohp_core_buffer_t *b,
                                                                         ohp_core_handle_t *h,
                                                                         UINT32 start_bit,
                                                                         UINT32 stop_bit,
                                                                         UINT32 value,
                                                                         UINT32 max_count,
                                                                         UINT32 *num_failed_polls,
                                                                         UINT32 delay_between_polls_in_microseconds )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_lfield_range_RXFB_CFC_FULL_I_poll_bit", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_lfield_range_RXFB_CFC_FULL_I_poll_bit", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ohp_core_lfield_range_RXFB_CFC_FULL_I_poll_bit", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x00000698 bits 31:0) bits 0:31 use field RXFB_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT0 */
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00000698 bits 31:0) bits 0:31 use field RXFB_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT0 */
        return _ohp_core_reg_RXFB_CFC_FULL_INT0_poll_bit( LOG_CALLER_ARGS
                                                          b,
                                                          h,
                                                          subfield_mask << (OHP_CORE_REG_RXFB_CFC_FULL_INT0_BIT_RXFB_CFC_FULL_I_OFF + subfield_offset),
                                                          value << (OHP_CORE_REG_RXFB_CFC_FULL_INT0_BIT_RXFB_CFC_FULL_I_OFF + subfield_offset),
                                                          max_count,
                                                          num_failed_polls,
                                                          delay_between_polls_in_microseconds);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x0000069c bits 31:0) bits 32:63 use field RXFB_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x0000069c bits 31:0) bits 32:63 use field RXFB_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT1 */
        return _ohp_core_reg_RXFB_CFC_FULL_INT1_poll_bit( LOG_CALLER_ARGS
                                                          b,
                                                          h,
                                                          subfield_mask << (OHP_CORE_REG_RXFB_CFC_FULL_INT1_BIT_RXFB_CFC_FULL_I_OFF + subfield_offset),
                                                          value << (OHP_CORE_REG_RXFB_CFC_FULL_INT1_BIT_RXFB_CFC_FULL_I_OFF + subfield_offset),
                                                          max_count,
                                                          num_failed_polls,
                                                          delay_between_polls_in_microseconds);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000006a0 bits 31:0) bits 64:95 use field RXFB_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006a0 bits 31:0) bits 64:95 use field RXFB_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT2 */
        return _ohp_core_reg_RXFB_CFC_FULL_INT2_poll_bit( LOG_CALLER_ARGS
                                                          b,
                                                          h,
                                                          subfield_mask << (OHP_CORE_REG_RXFB_CFC_FULL_INT2_BIT_RXFB_CFC_FULL_I_OFF + subfield_offset),
                                                          value << (OHP_CORE_REG_RXFB_CFC_FULL_INT2_BIT_RXFB_CFC_FULL_I_OFF + subfield_offset),
                                                          max_count,
                                                          num_failed_polls,
                                                          delay_between_polls_in_microseconds);
    }
    return PMC_ERR_INVALID_PARAMETERS;
}


#ifndef ohp_core_lfield_RXFB_CFC_FULL_I_poll_bit
#define ohp_core_lfield_RXFB_CFC_FULL_I_poll_bit( b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _ohp_core_lfield_RXFB_CFC_FULL_I_poll_bit( LOG_CALLER b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _ohp_core_lfield_RXFB_CFC_FULL_I_poll_bit( LOG_CALLER_DEFN
                                                                   ohp_core_buffer_t *b,
                                                                   ohp_core_handle_t *h,
                                                                   UINT32 value[3],
                                                                   UINT32 max_count,
                                                                   UINT32 *num_failed_polls,
                                                                   UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x 0x%08x 0x%08x", "ohp_core_lfield_RXFB_CFC_FULL_I_poll_bit", value[2] , value[1] , value[0] );

    /* (0x00000698 bits 31:0) bits 0:31 use field RXFB_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT0 */
    return _ohp_core_reg_RXFB_CFC_FULL_INT0_poll_bit( LOG_CALLER_ARGS
                                                      b,
                                                      h,
                                                      OHP_CORE_REG_RXFB_CFC_FULL_INT0_BIT_RXFB_CFC_FULL_I_MSK,
                                                      ((value[0] & 0xffffffff)<<OHP_CORE_REG_RXFB_CFC_FULL_INT0_BIT_RXFB_CFC_FULL_I_OFF),
                                                      max_count,
                                                      num_failed_polls,
                                                      delay_between_polls_in_microseconds);

    /* (0x0000069c bits 31:0) bits 32:63 use field RXFB_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT1 */
    return _ohp_core_reg_RXFB_CFC_FULL_INT1_poll_bit( LOG_CALLER_ARGS
                                                      b,
                                                      h,
                                                      OHP_CORE_REG_RXFB_CFC_FULL_INT1_BIT_RXFB_CFC_FULL_I_MSK,
                                                      ((value[1] & 0xffffffff)<<OHP_CORE_REG_RXFB_CFC_FULL_INT1_BIT_RXFB_CFC_FULL_I_OFF),
                                                      max_count,
                                                      num_failed_polls,
                                                      delay_between_polls_in_microseconds);

    /* (0x000006a0 bits 31:0) bits 64:95 use field RXFB_CFC_FULL_I of register PMC_OHP_CORE_REG_RXFB_CFC_FULL_INT2 */
    return _ohp_core_reg_RXFB_CFC_FULL_INT2_poll_bit( LOG_CALLER_ARGS
                                                      b,
                                                      h,
                                                      OHP_CORE_REG_RXFB_CFC_FULL_INT2_BIT_RXFB_CFC_FULL_I_MSK,
                                                      ((value[2] & 0xffffffff)<<OHP_CORE_REG_RXFB_CFC_FULL_INT2_BIT_RXFB_CFC_FULL_I_OFF),
                                                      max_count,
                                                      num_failed_polls,
                                                      delay_between_polls_in_microseconds);
}


#ifndef ohp_core_lfield_RXFA_TXDLY_I_set_to_clear
#define ohp_core_lfield_RXFA_TXDLY_I_set_to_clear( b, h, value ) \
       _ohp_core_lfield_RXFA_TXDLY_I_set_to_clear( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_RXFA_TXDLY_I_set_to_clear( LOG_CALLER_DEFN
                                                               ohp_core_buffer_t *b,
                                                               ohp_core_handle_t *h,
                                                               UINT32 value[3] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x", "ohp_core_lfield_RXFA_TXDLY_I_set_to_clear", value[2] , value[1] , value[0] );

    /* (0x000006b0 bits 31:0) bits 0:31 use field RXFA_TXDLY_I of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT0 */
    _ohp_core_reg_RXFA_TXDLY_INT0_action_on_write_field_set( LOG_CALLER_ARGS
                                                             b,
                                                             h,
                                                             OHP_CORE_REG_RXFA_TXDLY_INT0_BIT_RXFA_TXDLY_I_MSK,
                                                             OHP_CORE_REG_RXFA_TXDLY_INT0_BIT_RXFA_TXDLY_I_OFF,
                                                             (value[0] & 0xffffffff));

    /* (0x000006b4 bits 31:0) bits 32:63 use field RXFA_TXDLY_I of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT1 */
    _ohp_core_reg_RXFA_TXDLY_INT1_action_on_write_field_set( LOG_CALLER_ARGS
                                                             b,
                                                             h,
                                                             OHP_CORE_REG_RXFA_TXDLY_INT1_BIT_RXFA_TXDLY_I_MSK,
                                                             OHP_CORE_REG_RXFA_TXDLY_INT1_BIT_RXFA_TXDLY_I_OFF,
                                                             (value[1] & 0xffffffff));

    /* (0x000006b8 bits 31:0) bits 64:95 use field RXFA_TXDLY_I of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT2 */
    _ohp_core_reg_RXFA_TXDLY_INT2_action_on_write_field_set( LOG_CALLER_ARGS
                                                             b,
                                                             h,
                                                             OHP_CORE_REG_RXFA_TXDLY_INT2_BIT_RXFA_TXDLY_I_MSK,
                                                             OHP_CORE_REG_RXFA_TXDLY_INT2_BIT_RXFA_TXDLY_I_OFF,
                                                             (value[2] & 0xffffffff));
}


#ifndef ohp_core_lfield_RXFA_TXDLY_I_get
#define ohp_core_lfield_RXFA_TXDLY_I_get( b, h, value ) \
       _ohp_core_lfield_RXFA_TXDLY_I_get( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_RXFA_TXDLY_I_get( LOG_CALLER_DEFN
                                                      ohp_core_buffer_t *b,
                                                      ohp_core_handle_t *h,
                                                      UINT32 value[3] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<3;i++)
        value[i] = 0;

    /* (0x000006b0 bits 31:0) bits 0:31 use field RXFA_TXDLY_I of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT0 */
    reg_value = _ohp_core_reg_RXFA_TXDLY_INT0_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_RXFA_TXDLY_INT0_BIT_RXFA_TXDLY_I_MSK) >> OHP_CORE_REG_RXFA_TXDLY_INT0_BIT_RXFA_TXDLY_I_OFF;
    value[0] |= field_value;

    /* (0x000006b4 bits 31:0) bits 32:63 use field RXFA_TXDLY_I of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT1 */
    reg_value = _ohp_core_reg_RXFA_TXDLY_INT1_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_RXFA_TXDLY_INT1_BIT_RXFA_TXDLY_I_MSK) >> OHP_CORE_REG_RXFA_TXDLY_INT1_BIT_RXFA_TXDLY_I_OFF;
    value[1] |= field_value;

    /* (0x000006b8 bits 31:0) bits 64:95 use field RXFA_TXDLY_I of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT2 */
    reg_value = _ohp_core_reg_RXFA_TXDLY_INT2_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_RXFA_TXDLY_INT2_BIT_RXFA_TXDLY_I_MSK) >> OHP_CORE_REG_RXFA_TXDLY_INT2_BIT_RXFA_TXDLY_I_OFF;
    value[2] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x", "ohp_core_lfield_RXFA_TXDLY_I_get", value[2] , value[1] , value[0] );

}

#ifndef ohp_core_lfield_range_RXFA_TXDLY_I_set_to_clear
#define ohp_core_lfield_range_RXFA_TXDLY_I_set_to_clear( b, h, start_bit, stop_bit, value ) \
       _ohp_core_lfield_range_RXFA_TXDLY_I_set_to_clear( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _ohp_core_lfield_range_RXFA_TXDLY_I_set_to_clear( LOG_CALLER_DEFN
                                                                     ohp_core_buffer_t *b,
                                                                     ohp_core_handle_t *h,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_lfield_range_RXFA_TXDLY_I_set_to_clear", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_lfield_range_RXFA_TXDLY_I_set_to_clear", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ohp_core_lfield_range_RXFA_TXDLY_I_set_to_clear", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000006b0 bits 31:0) bits 0:31 use field RXFA_TXDLY_I of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT0 */
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006b0 bits 31:0) bits 0:31 use field RXFA_TXDLY_I of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT0 */
        _ohp_core_reg_RXFA_TXDLY_INT0_action_on_write_field_set( LOG_CALLER_ARGS
                                                                 b,
                                                                 h,
                                                                 subfield_mask << (OHP_CORE_REG_RXFA_TXDLY_INT0_BIT_RXFA_TXDLY_I_OFF + subfield_offset),
                                                                 OHP_CORE_REG_RXFA_TXDLY_INT0_BIT_RXFA_TXDLY_I_OFF + subfield_offset,
                                                                 value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000006b4 bits 31:0) bits 32:63 use field RXFA_TXDLY_I of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006b4 bits 31:0) bits 32:63 use field RXFA_TXDLY_I of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT1 */
        _ohp_core_reg_RXFA_TXDLY_INT1_action_on_write_field_set( LOG_CALLER_ARGS
                                                                 b,
                                                                 h,
                                                                 subfield_mask << (OHP_CORE_REG_RXFA_TXDLY_INT1_BIT_RXFA_TXDLY_I_OFF + subfield_offset),
                                                                 OHP_CORE_REG_RXFA_TXDLY_INT1_BIT_RXFA_TXDLY_I_OFF + subfield_offset,
                                                                 value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000006b8 bits 31:0) bits 64:95 use field RXFA_TXDLY_I of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006b8 bits 31:0) bits 64:95 use field RXFA_TXDLY_I of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT2 */
        _ohp_core_reg_RXFA_TXDLY_INT2_action_on_write_field_set( LOG_CALLER_ARGS
                                                                 b,
                                                                 h,
                                                                 subfield_mask << (OHP_CORE_REG_RXFA_TXDLY_INT2_BIT_RXFA_TXDLY_I_OFF + subfield_offset),
                                                                 OHP_CORE_REG_RXFA_TXDLY_INT2_BIT_RXFA_TXDLY_I_OFF + subfield_offset,
                                                                 value >> subfield_shift);
    }
}


#ifndef ohp_core_lfield_range_RXFA_TXDLY_I_get
#define ohp_core_lfield_range_RXFA_TXDLY_I_get( b, h, start_bit, stop_bit ) \
       _ohp_core_lfield_range_RXFA_TXDLY_I_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_lfield_range_RXFA_TXDLY_I_get( LOG_CALLER_DEFN
                                                              ohp_core_buffer_t *b,
                                                              ohp_core_handle_t *h,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_lfield_range_RXFA_TXDLY_I_get", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_lfield_range_RXFA_TXDLY_I_get", stop_bit, 95 );
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006b0 bits 31:0) bits 0:31 use field RXFA_TXDLY_I of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT0 */
        reg_value = _ohp_core_reg_RXFA_TXDLY_INT0_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & OHP_CORE_REG_RXFA_TXDLY_INT0_BIT_RXFA_TXDLY_I_MSK)
                      >> OHP_CORE_REG_RXFA_TXDLY_INT0_BIT_RXFA_TXDLY_I_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_RXFA_TXDLY_INT0_BIT_RXFA_TXDLY_I_MSK, OHP_CORE_REG_RXFA_TXDLY_INT0_BIT_RXFA_TXDLY_I_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006b4 bits 31:0) bits 32:63 use field RXFA_TXDLY_I of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT1 */
        reg_value = _ohp_core_reg_RXFA_TXDLY_INT1_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & OHP_CORE_REG_RXFA_TXDLY_INT1_BIT_RXFA_TXDLY_I_MSK)
                      >> OHP_CORE_REG_RXFA_TXDLY_INT1_BIT_RXFA_TXDLY_I_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_RXFA_TXDLY_INT1_BIT_RXFA_TXDLY_I_MSK, OHP_CORE_REG_RXFA_TXDLY_INT1_BIT_RXFA_TXDLY_I_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006b8 bits 31:0) bits 64:95 use field RXFA_TXDLY_I of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT2 */
        reg_value = _ohp_core_reg_RXFA_TXDLY_INT2_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & OHP_CORE_REG_RXFA_TXDLY_INT2_BIT_RXFA_TXDLY_I_MSK)
                      >> OHP_CORE_REG_RXFA_TXDLY_INT2_BIT_RXFA_TXDLY_I_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_RXFA_TXDLY_INT2_BIT_RXFA_TXDLY_I_MSK, OHP_CORE_REG_RXFA_TXDLY_INT2_BIT_RXFA_TXDLY_I_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ohp_core_lfield_range_RXFA_TXDLY_I_get", start_bit, stop_bit, value );

    return value;
}

#ifndef ohp_core_lfield_range_RXFA_TXDLY_I_poll_bit
#define ohp_core_lfield_range_RXFA_TXDLY_I_poll_bit( b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _ohp_core_lfield_range_RXFA_TXDLY_I_poll_bit( LOG_CALLER b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _ohp_core_lfield_range_RXFA_TXDLY_I_poll_bit( LOG_CALLER_DEFN
                                                                      ohp_core_buffer_t *b,
                                                                      ohp_core_handle_t *h,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_lfield_range_RXFA_TXDLY_I_poll_bit", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_lfield_range_RXFA_TXDLY_I_poll_bit", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ohp_core_lfield_range_RXFA_TXDLY_I_poll_bit", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000006b0 bits 31:0) bits 0:31 use field RXFA_TXDLY_I of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT0 */
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006b0 bits 31:0) bits 0:31 use field RXFA_TXDLY_I of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT0 */
        return _ohp_core_reg_RXFA_TXDLY_INT0_poll_bit( LOG_CALLER_ARGS
                                                       b,
                                                       h,
                                                       subfield_mask << (OHP_CORE_REG_RXFA_TXDLY_INT0_BIT_RXFA_TXDLY_I_OFF + subfield_offset),
                                                       value << (OHP_CORE_REG_RXFA_TXDLY_INT0_BIT_RXFA_TXDLY_I_OFF + subfield_offset),
                                                       max_count,
                                                       num_failed_polls,
                                                       delay_between_polls_in_microseconds);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000006b4 bits 31:0) bits 32:63 use field RXFA_TXDLY_I of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006b4 bits 31:0) bits 32:63 use field RXFA_TXDLY_I of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT1 */
        return _ohp_core_reg_RXFA_TXDLY_INT1_poll_bit( LOG_CALLER_ARGS
                                                       b,
                                                       h,
                                                       subfield_mask << (OHP_CORE_REG_RXFA_TXDLY_INT1_BIT_RXFA_TXDLY_I_OFF + subfield_offset),
                                                       value << (OHP_CORE_REG_RXFA_TXDLY_INT1_BIT_RXFA_TXDLY_I_OFF + subfield_offset),
                                                       max_count,
                                                       num_failed_polls,
                                                       delay_between_polls_in_microseconds);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000006b8 bits 31:0) bits 64:95 use field RXFA_TXDLY_I of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006b8 bits 31:0) bits 64:95 use field RXFA_TXDLY_I of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT2 */
        return _ohp_core_reg_RXFA_TXDLY_INT2_poll_bit( LOG_CALLER_ARGS
                                                       b,
                                                       h,
                                                       subfield_mask << (OHP_CORE_REG_RXFA_TXDLY_INT2_BIT_RXFA_TXDLY_I_OFF + subfield_offset),
                                                       value << (OHP_CORE_REG_RXFA_TXDLY_INT2_BIT_RXFA_TXDLY_I_OFF + subfield_offset),
                                                       max_count,
                                                       num_failed_polls,
                                                       delay_between_polls_in_microseconds);
    }
    return PMC_ERR_INVALID_PARAMETERS;
}


#ifndef ohp_core_lfield_RXFA_TXDLY_I_poll_bit
#define ohp_core_lfield_RXFA_TXDLY_I_poll_bit( b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _ohp_core_lfield_RXFA_TXDLY_I_poll_bit( LOG_CALLER b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _ohp_core_lfield_RXFA_TXDLY_I_poll_bit( LOG_CALLER_DEFN
                                                                ohp_core_buffer_t *b,
                                                                ohp_core_handle_t *h,
                                                                UINT32 value[3],
                                                                UINT32 max_count,
                                                                UINT32 *num_failed_polls,
                                                                UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x 0x%08x 0x%08x", "ohp_core_lfield_RXFA_TXDLY_I_poll_bit", value[2] , value[1] , value[0] );

    /* (0x000006b0 bits 31:0) bits 0:31 use field RXFA_TXDLY_I of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT0 */
    return _ohp_core_reg_RXFA_TXDLY_INT0_poll_bit( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   OHP_CORE_REG_RXFA_TXDLY_INT0_BIT_RXFA_TXDLY_I_MSK,
                                                   ((value[0] & 0xffffffff)<<OHP_CORE_REG_RXFA_TXDLY_INT0_BIT_RXFA_TXDLY_I_OFF),
                                                   max_count,
                                                   num_failed_polls,
                                                   delay_between_polls_in_microseconds);

    /* (0x000006b4 bits 31:0) bits 32:63 use field RXFA_TXDLY_I of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT1 */
    return _ohp_core_reg_RXFA_TXDLY_INT1_poll_bit( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   OHP_CORE_REG_RXFA_TXDLY_INT1_BIT_RXFA_TXDLY_I_MSK,
                                                   ((value[1] & 0xffffffff)<<OHP_CORE_REG_RXFA_TXDLY_INT1_BIT_RXFA_TXDLY_I_OFF),
                                                   max_count,
                                                   num_failed_polls,
                                                   delay_between_polls_in_microseconds);

    /* (0x000006b8 bits 31:0) bits 64:95 use field RXFA_TXDLY_I of register PMC_OHP_CORE_REG_RXFA_TXDLY_INT2 */
    return _ohp_core_reg_RXFA_TXDLY_INT2_poll_bit( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   OHP_CORE_REG_RXFA_TXDLY_INT2_BIT_RXFA_TXDLY_I_MSK,
                                                   ((value[2] & 0xffffffff)<<OHP_CORE_REG_RXFA_TXDLY_INT2_BIT_RXFA_TXDLY_I_OFF),
                                                   max_count,
                                                   num_failed_polls,
                                                   delay_between_polls_in_microseconds);
}


#ifndef ohp_core_lfield_RXFB_TXDLY_I_set_to_clear
#define ohp_core_lfield_RXFB_TXDLY_I_set_to_clear( b, h, value ) \
       _ohp_core_lfield_RXFB_TXDLY_I_set_to_clear( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_RXFB_TXDLY_I_set_to_clear( LOG_CALLER_DEFN
                                                               ohp_core_buffer_t *b,
                                                               ohp_core_handle_t *h,
                                                               UINT32 value[3] )
{
    IOLOG( "%s <= 0x%08x 0x%08x 0x%08x", "ohp_core_lfield_RXFB_TXDLY_I_set_to_clear", value[2] , value[1] , value[0] );

    /* (0x000006c8 bits 31:0) bits 0:31 use field RXFB_TXDLY_I of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT0 */
    _ohp_core_reg_RXFB_TXDLY_INT0_action_on_write_field_set( LOG_CALLER_ARGS
                                                             b,
                                                             h,
                                                             OHP_CORE_REG_RXFB_TXDLY_INT0_BIT_RXFB_TXDLY_I_MSK,
                                                             OHP_CORE_REG_RXFB_TXDLY_INT0_BIT_RXFB_TXDLY_I_OFF,
                                                             (value[0] & 0xffffffff));

    /* (0x000006cc bits 31:0) bits 32:63 use field RXFB_TXDLY_I of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT1 */
    _ohp_core_reg_RXFB_TXDLY_INT1_action_on_write_field_set( LOG_CALLER_ARGS
                                                             b,
                                                             h,
                                                             OHP_CORE_REG_RXFB_TXDLY_INT1_BIT_RXFB_TXDLY_I_MSK,
                                                             OHP_CORE_REG_RXFB_TXDLY_INT1_BIT_RXFB_TXDLY_I_OFF,
                                                             (value[1] & 0xffffffff));

    /* (0x000006d0 bits 31:0) bits 64:95 use field RXFB_TXDLY_I of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT2 */
    _ohp_core_reg_RXFB_TXDLY_INT2_action_on_write_field_set( LOG_CALLER_ARGS
                                                             b,
                                                             h,
                                                             OHP_CORE_REG_RXFB_TXDLY_INT2_BIT_RXFB_TXDLY_I_MSK,
                                                             OHP_CORE_REG_RXFB_TXDLY_INT2_BIT_RXFB_TXDLY_I_OFF,
                                                             (value[2] & 0xffffffff));
}


#ifndef ohp_core_lfield_RXFB_TXDLY_I_get
#define ohp_core_lfield_RXFB_TXDLY_I_get( b, h, value ) \
       _ohp_core_lfield_RXFB_TXDLY_I_get( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_RXFB_TXDLY_I_get( LOG_CALLER_DEFN
                                                      ohp_core_buffer_t *b,
                                                      ohp_core_handle_t *h,
                                                      UINT32 value[3] )
{
    UINT32 i;
    UINT32 field_value;
    UINT32 reg_value;

    for (i=0;i<3;i++)
        value[i] = 0;

    /* (0x000006c8 bits 31:0) bits 0:31 use field RXFB_TXDLY_I of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT0 */
    reg_value = _ohp_core_reg_RXFB_TXDLY_INT0_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_RXFB_TXDLY_INT0_BIT_RXFB_TXDLY_I_MSK) >> OHP_CORE_REG_RXFB_TXDLY_INT0_BIT_RXFB_TXDLY_I_OFF;
    value[0] |= field_value;

    /* (0x000006cc bits 31:0) bits 32:63 use field RXFB_TXDLY_I of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT1 */
    reg_value = _ohp_core_reg_RXFB_TXDLY_INT1_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_RXFB_TXDLY_INT1_BIT_RXFB_TXDLY_I_MSK) >> OHP_CORE_REG_RXFB_TXDLY_INT1_BIT_RXFB_TXDLY_I_OFF;
    value[1] |= field_value;

    /* (0x000006d0 bits 31:0) bits 64:95 use field RXFB_TXDLY_I of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT2 */
    reg_value = _ohp_core_reg_RXFB_TXDLY_INT2_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_RXFB_TXDLY_INT2_BIT_RXFB_TXDLY_I_MSK) >> OHP_CORE_REG_RXFB_TXDLY_INT2_BIT_RXFB_TXDLY_I_OFF;
    value[2] |= field_value;

    IOLOG( "%s -> 0x%08x 0x%08x 0x%08x", "ohp_core_lfield_RXFB_TXDLY_I_get", value[2] , value[1] , value[0] );

}

#ifndef ohp_core_lfield_range_RXFB_TXDLY_I_set_to_clear
#define ohp_core_lfield_range_RXFB_TXDLY_I_set_to_clear( b, h, start_bit, stop_bit, value ) \
       _ohp_core_lfield_range_RXFB_TXDLY_I_set_to_clear( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _ohp_core_lfield_range_RXFB_TXDLY_I_set_to_clear( LOG_CALLER_DEFN
                                                                     ohp_core_buffer_t *b,
                                                                     ohp_core_handle_t *h,
                                                                     UINT32 start_bit,
                                                                     UINT32 stop_bit,
                                                                     UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_lfield_range_RXFB_TXDLY_I_set_to_clear", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_lfield_range_RXFB_TXDLY_I_set_to_clear", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ohp_core_lfield_range_RXFB_TXDLY_I_set_to_clear", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000006c8 bits 31:0) bits 0:31 use field RXFB_TXDLY_I of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT0 */
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006c8 bits 31:0) bits 0:31 use field RXFB_TXDLY_I of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT0 */
        _ohp_core_reg_RXFB_TXDLY_INT0_action_on_write_field_set( LOG_CALLER_ARGS
                                                                 b,
                                                                 h,
                                                                 subfield_mask << (OHP_CORE_REG_RXFB_TXDLY_INT0_BIT_RXFB_TXDLY_I_OFF + subfield_offset),
                                                                 OHP_CORE_REG_RXFB_TXDLY_INT0_BIT_RXFB_TXDLY_I_OFF + subfield_offset,
                                                                 value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000006cc bits 31:0) bits 32:63 use field RXFB_TXDLY_I of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006cc bits 31:0) bits 32:63 use field RXFB_TXDLY_I of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT1 */
        _ohp_core_reg_RXFB_TXDLY_INT1_action_on_write_field_set( LOG_CALLER_ARGS
                                                                 b,
                                                                 h,
                                                                 subfield_mask << (OHP_CORE_REG_RXFB_TXDLY_INT1_BIT_RXFB_TXDLY_I_OFF + subfield_offset),
                                                                 OHP_CORE_REG_RXFB_TXDLY_INT1_BIT_RXFB_TXDLY_I_OFF + subfield_offset,
                                                                 value >> subfield_shift);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000006d0 bits 31:0) bits 64:95 use field RXFB_TXDLY_I of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006d0 bits 31:0) bits 64:95 use field RXFB_TXDLY_I of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT2 */
        _ohp_core_reg_RXFB_TXDLY_INT2_action_on_write_field_set( LOG_CALLER_ARGS
                                                                 b,
                                                                 h,
                                                                 subfield_mask << (OHP_CORE_REG_RXFB_TXDLY_INT2_BIT_RXFB_TXDLY_I_OFF + subfield_offset),
                                                                 OHP_CORE_REG_RXFB_TXDLY_INT2_BIT_RXFB_TXDLY_I_OFF + subfield_offset,
                                                                 value >> subfield_shift);
    }
}


#ifndef ohp_core_lfield_range_RXFB_TXDLY_I_get
#define ohp_core_lfield_range_RXFB_TXDLY_I_get( b, h, start_bit, stop_bit ) \
       _ohp_core_lfield_range_RXFB_TXDLY_I_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_lfield_range_RXFB_TXDLY_I_get( LOG_CALLER_DEFN
                                                              ohp_core_buffer_t *b,
                                                              ohp_core_handle_t *h,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_lfield_range_RXFB_TXDLY_I_get", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_lfield_range_RXFB_TXDLY_I_get", stop_bit, 95 );
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006c8 bits 31:0) bits 0:31 use field RXFB_TXDLY_I of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT0 */
        reg_value = _ohp_core_reg_RXFB_TXDLY_INT0_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & OHP_CORE_REG_RXFB_TXDLY_INT0_BIT_RXFB_TXDLY_I_MSK)
                      >> OHP_CORE_REG_RXFB_TXDLY_INT0_BIT_RXFB_TXDLY_I_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_RXFB_TXDLY_INT0_BIT_RXFB_TXDLY_I_MSK, OHP_CORE_REG_RXFB_TXDLY_INT0_BIT_RXFB_TXDLY_I_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006cc bits 31:0) bits 32:63 use field RXFB_TXDLY_I of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT1 */
        reg_value = _ohp_core_reg_RXFB_TXDLY_INT1_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & OHP_CORE_REG_RXFB_TXDLY_INT1_BIT_RXFB_TXDLY_I_MSK)
                      >> OHP_CORE_REG_RXFB_TXDLY_INT1_BIT_RXFB_TXDLY_I_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_RXFB_TXDLY_INT1_BIT_RXFB_TXDLY_I_MSK, OHP_CORE_REG_RXFB_TXDLY_INT1_BIT_RXFB_TXDLY_I_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift = 64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x000006d0 bits 31:0) bits 64:95 use field RXFB_TXDLY_I of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT2 */
        reg_value = _ohp_core_reg_RXFB_TXDLY_INT2_read( LOG_CALLER_ARGS b, h);
        field_value = (reg_value & OHP_CORE_REG_RXFB_TXDLY_INT2_BIT_RXFB_TXDLY_I_MSK)
                      >> OHP_CORE_REG_RXFB_TXDLY_INT2_BIT_RXFB_TXDLY_I_OFF;
        IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_RXFB_TXDLY_INT2_BIT_RXFB_TXDLY_I_MSK, OHP_CORE_REG_RXFB_TXDLY_INT2_BIT_RXFB_TXDLY_I_OFF, field_value );
        value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
        IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    }

    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ohp_core_lfield_range_RXFB_TXDLY_I_get", start_bit, stop_bit, value );

    return value;
}

#ifndef ohp_core_lfield_range_RXFB_TXDLY_I_poll_bit
#define ohp_core_lfield_range_RXFB_TXDLY_I_poll_bit( b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _ohp_core_lfield_range_RXFB_TXDLY_I_poll_bit( LOG_CALLER b, h, start_bit, stop_bit, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _ohp_core_lfield_range_RXFB_TXDLY_I_poll_bit( LOG_CALLER_DEFN
                                                                      ohp_core_buffer_t *b,
                                                                      ohp_core_handle_t *h,
                                                                      UINT32 start_bit,
                                                                      UINT32 stop_bit,
                                                                      UINT32 value,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_lfield_range_RXFB_TXDLY_I_poll_bit", stop_bit, start_bit );
    if (stop_bit > 95) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_lfield_range_RXFB_TXDLY_I_poll_bit", stop_bit, 95 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "ohp_core_lfield_range_RXFB_TXDLY_I_poll_bit", start_bit, stop_bit, value );

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000006c8 bits 31:0) bits 0:31 use field RXFB_TXDLY_I of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT0 */
    if ((start_bit <= 31) && (stop_bit >= 0)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006c8 bits 31:0) bits 0:31 use field RXFB_TXDLY_I of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT0 */
        return _ohp_core_reg_RXFB_TXDLY_INT0_poll_bit( LOG_CALLER_ARGS
                                                       b,
                                                       h,
                                                       subfield_mask << (OHP_CORE_REG_RXFB_TXDLY_INT0_BIT_RXFB_TXDLY_I_OFF + subfield_offset),
                                                       value << (OHP_CORE_REG_RXFB_TXDLY_INT0_BIT_RXFB_TXDLY_I_OFF + subfield_offset),
                                                       max_count,
                                                       num_failed_polls,
                                                       delay_between_polls_in_microseconds);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000006cc bits 31:0) bits 32:63 use field RXFB_TXDLY_I of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT1 */
    if ((start_bit <= 63) && (stop_bit >= 32)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 32) {
            subfield_offset = start_bit - 32;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  32 - start_bit;
            subfield_start_bit = 32;
        }
        if (stop_bit < 63) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 63;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006cc bits 31:0) bits 32:63 use field RXFB_TXDLY_I of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT1 */
        return _ohp_core_reg_RXFB_TXDLY_INT1_poll_bit( LOG_CALLER_ARGS
                                                       b,
                                                       h,
                                                       subfield_mask << (OHP_CORE_REG_RXFB_TXDLY_INT1_BIT_RXFB_TXDLY_I_OFF + subfield_offset),
                                                       value << (OHP_CORE_REG_RXFB_TXDLY_INT1_BIT_RXFB_TXDLY_I_OFF + subfield_offset),
                                                       max_count,
                                                       num_failed_polls,
                                                       delay_between_polls_in_microseconds);
    }

    /* don't work hard trying to figure out if this can be changed from a read_modify_write into a pure write */
    if (b != NULL) {
        l1sys_force_read_modify_write( b->coalesce_handle);
    }

    /* (0x000006d0 bits 31:0) bits 64:95 use field RXFB_TXDLY_I of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT2 */
    if ((start_bit <= 95) && (stop_bit >= 64)) {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 64) {
            subfield_offset = start_bit - 64;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  64 - start_bit;
            subfield_start_bit = 64;
        }
        if (stop_bit < 95) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 95;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x000006d0 bits 31:0) bits 64:95 use field RXFB_TXDLY_I of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT2 */
        return _ohp_core_reg_RXFB_TXDLY_INT2_poll_bit( LOG_CALLER_ARGS
                                                       b,
                                                       h,
                                                       subfield_mask << (OHP_CORE_REG_RXFB_TXDLY_INT2_BIT_RXFB_TXDLY_I_OFF + subfield_offset),
                                                       value << (OHP_CORE_REG_RXFB_TXDLY_INT2_BIT_RXFB_TXDLY_I_OFF + subfield_offset),
                                                       max_count,
                                                       num_failed_polls,
                                                       delay_between_polls_in_microseconds);
    }
    return PMC_ERR_INVALID_PARAMETERS;
}


#ifndef ohp_core_lfield_RXFB_TXDLY_I_poll_bit
#define ohp_core_lfield_RXFB_TXDLY_I_poll_bit( b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _ohp_core_lfield_RXFB_TXDLY_I_poll_bit( LOG_CALLER b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _ohp_core_lfield_RXFB_TXDLY_I_poll_bit( LOG_CALLER_DEFN
                                                                ohp_core_buffer_t *b,
                                                                ohp_core_handle_t *h,
                                                                UINT32 value[3],
                                                                UINT32 max_count,
                                                                UINT32 *num_failed_polls,
                                                                UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x 0x%08x 0x%08x", "ohp_core_lfield_RXFB_TXDLY_I_poll_bit", value[2] , value[1] , value[0] );

    /* (0x000006c8 bits 31:0) bits 0:31 use field RXFB_TXDLY_I of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT0 */
    return _ohp_core_reg_RXFB_TXDLY_INT0_poll_bit( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   OHP_CORE_REG_RXFB_TXDLY_INT0_BIT_RXFB_TXDLY_I_MSK,
                                                   ((value[0] & 0xffffffff)<<OHP_CORE_REG_RXFB_TXDLY_INT0_BIT_RXFB_TXDLY_I_OFF),
                                                   max_count,
                                                   num_failed_polls,
                                                   delay_between_polls_in_microseconds);

    /* (0x000006cc bits 31:0) bits 32:63 use field RXFB_TXDLY_I of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT1 */
    return _ohp_core_reg_RXFB_TXDLY_INT1_poll_bit( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   OHP_CORE_REG_RXFB_TXDLY_INT1_BIT_RXFB_TXDLY_I_MSK,
                                                   ((value[1] & 0xffffffff)<<OHP_CORE_REG_RXFB_TXDLY_INT1_BIT_RXFB_TXDLY_I_OFF),
                                                   max_count,
                                                   num_failed_polls,
                                                   delay_between_polls_in_microseconds);

    /* (0x000006d0 bits 31:0) bits 64:95 use field RXFB_TXDLY_I of register PMC_OHP_CORE_REG_RXFB_TXDLY_INT2 */
    return _ohp_core_reg_RXFB_TXDLY_INT2_poll_bit( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   OHP_CORE_REG_RXFB_TXDLY_INT2_BIT_RXFB_TXDLY_I_MSK,
                                                   ((value[2] & 0xffffffff)<<OHP_CORE_REG_RXFB_TXDLY_INT2_BIT_RXFB_TXDLY_I_OFF),
                                                   max_count,
                                                   num_failed_polls,
                                                   delay_between_polls_in_microseconds);
}


#ifndef ohp_core_field_RXMAC_UID_FAIL_I_set_to_clear
#define ohp_core_field_RXMAC_UID_FAIL_I_set_to_clear( b, h, value ) \
       _ohp_core_field_RXMAC_UID_FAIL_I_set_to_clear( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_field_RXMAC_UID_FAIL_I_set_to_clear( LOG_CALLER_DEFN
                                                                  ohp_core_buffer_t *b,
                                                                  ohp_core_handle_t *h,
                                                                  UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ohp_core_field_RXMAC_UID_FAIL_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "ohp_core_field_RXMAC_UID_FAIL_I_set_to_clear", value );

    /* (0x000006e8 bits 0) field RXMAC_UID_FAIL_I of register PMC_OHP_CORE_REG_RXMAC_UID_FAIL_INT */
    _ohp_core_reg_RXMAC_UID_FAIL_INT_action_on_write_field_set( LOG_CALLER_ARGS
                                                                b,
                                                                h,
                                                                OHP_CORE_REG_RXMAC_UID_FAIL_INT_BIT_RXMAC_UID_FAIL_I_MSK,
                                                                OHP_CORE_REG_RXMAC_UID_FAIL_INT_BIT_RXMAC_UID_FAIL_I_OFF,
                                                                value);
}


#ifndef ohp_core_field_RXMAC_UID_FAIL_I_get
#define ohp_core_field_RXMAC_UID_FAIL_I_get( b, h ) \
       _ohp_core_field_RXMAC_UID_FAIL_I_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_RXMAC_UID_FAIL_I_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006e8 bits 0) field RXMAC_UID_FAIL_I of register PMC_OHP_CORE_REG_RXMAC_UID_FAIL_INT */
    reg_value = _ohp_core_reg_RXMAC_UID_FAIL_INT_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_RXMAC_UID_FAIL_INT_BIT_RXMAC_UID_FAIL_I_MSK) >> OHP_CORE_REG_RXMAC_UID_FAIL_INT_BIT_RXMAC_UID_FAIL_I_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_RXMAC_UID_FAIL_I_get", value );

    return value;
}

#ifndef ohp_core_field_RXMAC_UID_FAIL_I_poll_bit
#define ohp_core_field_RXMAC_UID_FAIL_I_poll_bit( b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _ohp_core_field_RXMAC_UID_FAIL_I_poll_bit( LOG_CALLER b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _ohp_core_field_RXMAC_UID_FAIL_I_poll_bit( LOG_CALLER_DEFN
                                                                   ohp_core_buffer_t *b,
                                                                   ohp_core_handle_t *h,
                                                                   UINT32 value,
                                                                   UINT32 max_count,
                                                                   UINT32 *num_failed_polls,
                                                                   UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "ohp_core_field_RXMAC_UID_FAIL_I_poll_bit", value );

    /* (0x000006e8 bits 0) field RXMAC_UID_FAIL_I of register PMC_OHP_CORE_REG_RXMAC_UID_FAIL_INT */
    return _ohp_core_reg_RXMAC_UID_FAIL_INT_poll_bit( LOG_CALLER_ARGS
                                                      b,
                                                      h,
                                                      OHP_CORE_REG_RXMAC_UID_FAIL_INT_BIT_RXMAC_UID_FAIL_I_MSK,
                                                      (value<<OHP_CORE_REG_RXMAC_UID_FAIL_INT_BIT_RXMAC_UID_FAIL_I_OFF),
                                                      max_count,
                                                      num_failed_polls,
                                                      delay_between_polls_in_microseconds);
}


#ifndef ohp_core_field_RXMAC_FRMRID_FAIL_I_set_to_clear
#define ohp_core_field_RXMAC_FRMRID_FAIL_I_set_to_clear( b, h, value ) \
       _ohp_core_field_RXMAC_FRMRID_FAIL_I_set_to_clear( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_field_RXMAC_FRMRID_FAIL_I_set_to_clear( LOG_CALLER_DEFN
                                                                     ohp_core_buffer_t *b,
                                                                     ohp_core_handle_t *h,
                                                                     UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ohp_core_field_RXMAC_FRMRID_FAIL_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "ohp_core_field_RXMAC_FRMRID_FAIL_I_set_to_clear", value );

    /* (0x000006ec bits 0) field RXMAC_FRMRID_FAIL_I of register PMC_OHP_CORE_REG_RXMAC_FRMRID_FAIL_INT */
    _ohp_core_reg_RXMAC_FRMRID_FAIL_INT_action_on_write_field_set( LOG_CALLER_ARGS
                                                                   b,
                                                                   h,
                                                                   OHP_CORE_REG_RXMAC_FRMRID_FAIL_INT_BIT_RXMAC_FRMRID_FAIL_I_MSK,
                                                                   OHP_CORE_REG_RXMAC_FRMRID_FAIL_INT_BIT_RXMAC_FRMRID_FAIL_I_OFF,
                                                                   value);
}


#ifndef ohp_core_field_RXMAC_FRMRID_FAIL_I_get
#define ohp_core_field_RXMAC_FRMRID_FAIL_I_get( b, h ) \
       _ohp_core_field_RXMAC_FRMRID_FAIL_I_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_RXMAC_FRMRID_FAIL_I_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006ec bits 0) field RXMAC_FRMRID_FAIL_I of register PMC_OHP_CORE_REG_RXMAC_FRMRID_FAIL_INT */
    reg_value = _ohp_core_reg_RXMAC_FRMRID_FAIL_INT_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_RXMAC_FRMRID_FAIL_INT_BIT_RXMAC_FRMRID_FAIL_I_MSK) >> OHP_CORE_REG_RXMAC_FRMRID_FAIL_INT_BIT_RXMAC_FRMRID_FAIL_I_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_RXMAC_FRMRID_FAIL_I_get", value );

    return value;
}

#ifndef ohp_core_field_RXMAC_FRMRID_FAIL_I_poll_bit
#define ohp_core_field_RXMAC_FRMRID_FAIL_I_poll_bit( b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _ohp_core_field_RXMAC_FRMRID_FAIL_I_poll_bit( LOG_CALLER b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _ohp_core_field_RXMAC_FRMRID_FAIL_I_poll_bit( LOG_CALLER_DEFN
                                                                      ohp_core_buffer_t *b,
                                                                      ohp_core_handle_t *h,
                                                                      UINT32 value,
                                                                      UINT32 max_count,
                                                                      UINT32 *num_failed_polls,
                                                                      UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "ohp_core_field_RXMAC_FRMRID_FAIL_I_poll_bit", value );

    /* (0x000006ec bits 0) field RXMAC_FRMRID_FAIL_I of register PMC_OHP_CORE_REG_RXMAC_FRMRID_FAIL_INT */
    return _ohp_core_reg_RXMAC_FRMRID_FAIL_INT_poll_bit( LOG_CALLER_ARGS
                                                         b,
                                                         h,
                                                         OHP_CORE_REG_RXMAC_FRMRID_FAIL_INT_BIT_RXMAC_FRMRID_FAIL_I_MSK,
                                                         (value<<OHP_CORE_REG_RXMAC_FRMRID_FAIL_INT_BIT_RXMAC_FRMRID_FAIL_I_OFF),
                                                         max_count,
                                                         num_failed_polls,
                                                         delay_between_polls_in_microseconds);
}


#ifndef ohp_core_field_RXMAC_CHID_FAIL_I_set_to_clear
#define ohp_core_field_RXMAC_CHID_FAIL_I_set_to_clear( b, h, value ) \
       _ohp_core_field_RXMAC_CHID_FAIL_I_set_to_clear( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_field_RXMAC_CHID_FAIL_I_set_to_clear( LOG_CALLER_DEFN
                                                                   ohp_core_buffer_t *b,
                                                                   ohp_core_handle_t *h,
                                                                   UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ohp_core_field_RXMAC_CHID_FAIL_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "ohp_core_field_RXMAC_CHID_FAIL_I_set_to_clear", value );

    /* (0x000006f0 bits 0) field RXMAC_CHID_FAIL_I of register PMC_OHP_CORE_REG_RXMAC_CHID_FAIL_INT */
    _ohp_core_reg_RXMAC_CHID_FAIL_INT_action_on_write_field_set( LOG_CALLER_ARGS
                                                                 b,
                                                                 h,
                                                                 OHP_CORE_REG_RXMAC_CHID_FAIL_INT_BIT_RXMAC_CHID_FAIL_I_MSK,
                                                                 OHP_CORE_REG_RXMAC_CHID_FAIL_INT_BIT_RXMAC_CHID_FAIL_I_OFF,
                                                                 value);
}


#ifndef ohp_core_field_RXMAC_CHID_FAIL_I_get
#define ohp_core_field_RXMAC_CHID_FAIL_I_get( b, h ) \
       _ohp_core_field_RXMAC_CHID_FAIL_I_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_RXMAC_CHID_FAIL_I_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006f0 bits 0) field RXMAC_CHID_FAIL_I of register PMC_OHP_CORE_REG_RXMAC_CHID_FAIL_INT */
    reg_value = _ohp_core_reg_RXMAC_CHID_FAIL_INT_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_RXMAC_CHID_FAIL_INT_BIT_RXMAC_CHID_FAIL_I_MSK) >> OHP_CORE_REG_RXMAC_CHID_FAIL_INT_BIT_RXMAC_CHID_FAIL_I_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_RXMAC_CHID_FAIL_I_get", value );

    return value;
}

#ifndef ohp_core_field_RXMAC_CHID_FAIL_I_poll_bit
#define ohp_core_field_RXMAC_CHID_FAIL_I_poll_bit( b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _ohp_core_field_RXMAC_CHID_FAIL_I_poll_bit( LOG_CALLER b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _ohp_core_field_RXMAC_CHID_FAIL_I_poll_bit( LOG_CALLER_DEFN
                                                                    ohp_core_buffer_t *b,
                                                                    ohp_core_handle_t *h,
                                                                    UINT32 value,
                                                                    UINT32 max_count,
                                                                    UINT32 *num_failed_polls,
                                                                    UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "ohp_core_field_RXMAC_CHID_FAIL_I_poll_bit", value );

    /* (0x000006f0 bits 0) field RXMAC_CHID_FAIL_I of register PMC_OHP_CORE_REG_RXMAC_CHID_FAIL_INT */
    return _ohp_core_reg_RXMAC_CHID_FAIL_INT_poll_bit( LOG_CALLER_ARGS
                                                       b,
                                                       h,
                                                       OHP_CORE_REG_RXMAC_CHID_FAIL_INT_BIT_RXMAC_CHID_FAIL_I_MSK,
                                                       (value<<OHP_CORE_REG_RXMAC_CHID_FAIL_INT_BIT_RXMAC_CHID_FAIL_I_OFF),
                                                       max_count,
                                                       num_failed_polls,
                                                       delay_between_polls_in_microseconds);
}


#ifndef ohp_core_field_RXMAC_PKTERR_I_set_to_clear
#define ohp_core_field_RXMAC_PKTERR_I_set_to_clear( b, h, value ) \
       _ohp_core_field_RXMAC_PKTERR_I_set_to_clear( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_field_RXMAC_PKTERR_I_set_to_clear( LOG_CALLER_DEFN
                                                                ohp_core_buffer_t *b,
                                                                ohp_core_handle_t *h,
                                                                UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ohp_core_field_RXMAC_PKTERR_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "ohp_core_field_RXMAC_PKTERR_I_set_to_clear", value );

    /* (0x000006f4 bits 0) field RXMAC_PKTERR_I of register PMC_OHP_CORE_REG_RXMAC_PKTERR_INT */
    _ohp_core_reg_RXMAC_PKTERR_INT_action_on_write_field_set( LOG_CALLER_ARGS
                                                              b,
                                                              h,
                                                              OHP_CORE_REG_RXMAC_PKTERR_INT_BIT_RXMAC_PKTERR_I_MSK,
                                                              OHP_CORE_REG_RXMAC_PKTERR_INT_BIT_RXMAC_PKTERR_I_OFF,
                                                              value);
}


#ifndef ohp_core_field_RXMAC_PKTERR_I_get
#define ohp_core_field_RXMAC_PKTERR_I_get( b, h ) \
       _ohp_core_field_RXMAC_PKTERR_I_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_RXMAC_PKTERR_I_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006f4 bits 0) field RXMAC_PKTERR_I of register PMC_OHP_CORE_REG_RXMAC_PKTERR_INT */
    reg_value = _ohp_core_reg_RXMAC_PKTERR_INT_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_RXMAC_PKTERR_INT_BIT_RXMAC_PKTERR_I_MSK) >> OHP_CORE_REG_RXMAC_PKTERR_INT_BIT_RXMAC_PKTERR_I_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_RXMAC_PKTERR_I_get", value );

    return value;
}

#ifndef ohp_core_field_RXMAC_PKTERR_I_poll_bit
#define ohp_core_field_RXMAC_PKTERR_I_poll_bit( b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _ohp_core_field_RXMAC_PKTERR_I_poll_bit( LOG_CALLER b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _ohp_core_field_RXMAC_PKTERR_I_poll_bit( LOG_CALLER_DEFN
                                                                 ohp_core_buffer_t *b,
                                                                 ohp_core_handle_t *h,
                                                                 UINT32 value,
                                                                 UINT32 max_count,
                                                                 UINT32 *num_failed_polls,
                                                                 UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "ohp_core_field_RXMAC_PKTERR_I_poll_bit", value );

    /* (0x000006f4 bits 0) field RXMAC_PKTERR_I of register PMC_OHP_CORE_REG_RXMAC_PKTERR_INT */
    return _ohp_core_reg_RXMAC_PKTERR_INT_poll_bit( LOG_CALLER_ARGS
                                                    b,
                                                    h,
                                                    OHP_CORE_REG_RXMAC_PKTERR_INT_BIT_RXMAC_PKTERR_I_MSK,
                                                    (value<<OHP_CORE_REG_RXMAC_PKTERR_INT_BIT_RXMAC_PKTERR_I_OFF),
                                                    max_count,
                                                    num_failed_polls,
                                                    delay_between_polls_in_microseconds);
}


#ifndef ohp_core_field_RXMAC_FIFO_ERR_I_set_to_clear
#define ohp_core_field_RXMAC_FIFO_ERR_I_set_to_clear( b, h, value ) \
       _ohp_core_field_RXMAC_FIFO_ERR_I_set_to_clear( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_field_RXMAC_FIFO_ERR_I_set_to_clear( LOG_CALLER_DEFN
                                                                  ohp_core_buffer_t *b,
                                                                  ohp_core_handle_t *h,
                                                                  UINT32 value )
{
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "ohp_core_field_RXMAC_FIFO_ERR_I_set_to_clear", value, 1);
    IOLOG( "%s <= 0x%08x", "ohp_core_field_RXMAC_FIFO_ERR_I_set_to_clear", value );

    /* (0x000006f8 bits 0) field RXMAC_FIFO_ERR_I of register PMC_OHP_CORE_REG_RXMAC_RXFIFO_ERR_INT */
    _ohp_core_reg_RXMAC_RXFIFO_ERR_INT_action_on_write_field_set( LOG_CALLER_ARGS
                                                                  b,
                                                                  h,
                                                                  OHP_CORE_REG_RXMAC_RXFIFO_ERR_INT_BIT_RXMAC_FIFO_ERR_I_MSK,
                                                                  OHP_CORE_REG_RXMAC_RXFIFO_ERR_INT_BIT_RXMAC_FIFO_ERR_I_OFF,
                                                                  value);
}


#ifndef ohp_core_field_RXMAC_FIFO_ERR_I_get
#define ohp_core_field_RXMAC_FIFO_ERR_I_get( b, h ) \
       _ohp_core_field_RXMAC_FIFO_ERR_I_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_RXMAC_FIFO_ERR_I_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x000006f8 bits 0) field RXMAC_FIFO_ERR_I of register PMC_OHP_CORE_REG_RXMAC_RXFIFO_ERR_INT */
    reg_value = _ohp_core_reg_RXMAC_RXFIFO_ERR_INT_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_RXMAC_RXFIFO_ERR_INT_BIT_RXMAC_FIFO_ERR_I_MSK) >> OHP_CORE_REG_RXMAC_RXFIFO_ERR_INT_BIT_RXMAC_FIFO_ERR_I_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_RXMAC_FIFO_ERR_I_get", value );

    return value;
}

#ifndef ohp_core_field_RXMAC_FIFO_ERR_I_poll_bit
#define ohp_core_field_RXMAC_FIFO_ERR_I_poll_bit( b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds ) \
       _ohp_core_field_RXMAC_FIFO_ERR_I_poll_bit( LOG_CALLER b, h, value, max_count, num_failed_polls, delay_between_polls_in_microseconds )
#endif
static INLINE PMC_ERROR _ohp_core_field_RXMAC_FIFO_ERR_I_poll_bit( LOG_CALLER_DEFN
                                                                   ohp_core_buffer_t *b,
                                                                   ohp_core_handle_t *h,
                                                                   UINT32 value,
                                                                   UINT32 max_count,
                                                                   UINT32 *num_failed_polls,
                                                                   UINT32 delay_between_polls_in_microseconds )
{
    IOLOG( "%s wait until value =  0x%08x", "ohp_core_field_RXMAC_FIFO_ERR_I_poll_bit", value );

    /* (0x000006f8 bits 0) field RXMAC_FIFO_ERR_I of register PMC_OHP_CORE_REG_RXMAC_RXFIFO_ERR_INT */
    return _ohp_core_reg_RXMAC_RXFIFO_ERR_INT_poll_bit( LOG_CALLER_ARGS
                                                        b,
                                                        h,
                                                        OHP_CORE_REG_RXMAC_RXFIFO_ERR_INT_BIT_RXMAC_FIFO_ERR_I_MSK,
                                                        (value<<OHP_CORE_REG_RXMAC_RXFIFO_ERR_INT_BIT_RXMAC_FIFO_ERR_I_OFF),
                                                        max_count,
                                                        num_failed_polls,
                                                        delay_between_polls_in_microseconds);
}


/*
 * ==================================================================================
 *            Parameter Access Functions for Paramset ram_N_burstsize96
 * ==================================================================================
 */

#ifndef ohp_core_lfield_RXFA_EXT_MASK_set
#define ohp_core_lfield_RXFA_EXT_MASK_set( b, h, value ) \
       _ohp_core_lfield_RXFA_EXT_MASK_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_RXFA_EXT_MASK_set( LOG_CALLER_DEFN
                                                       ohp_core_buffer_t *b,
                                                       ohp_core_handle_t *h,
                                                       UINT32 value[96] )
{
    IOLOG( "%s ", "ohp_core_lfield_RXFA_EXT_MASK_set");
    _ohp_core_reg_RXFA_EXT_MASK_array_burst_write( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   0,
                                                   96,
                                                   value);
}


#ifndef ohp_core_lfield_RXFA_EXT_MASK_get
#define ohp_core_lfield_RXFA_EXT_MASK_get( b, h, value ) \
       _ohp_core_lfield_RXFA_EXT_MASK_get( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_RXFA_EXT_MASK_get( LOG_CALLER_DEFN
                                                       ohp_core_buffer_t *b,
                                                       ohp_core_handle_t *h,
                                                       UINT32 value[96] )
{
    IOLOG( "%s ", "ohp_core_lfield_RXFA_EXT_MASK_get");
    _ohp_core_reg_RXFA_EXT_MASK_array_burst_read( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  0,
                                                  96,
                                                  (UINT32 *)value);
}


#ifndef ohp_core_lfield_range_RXFA_EXT_MASK_set
#define ohp_core_lfield_range_RXFA_EXT_MASK_set( b, h, start_bit, stop_bit, value ) \
       _ohp_core_lfield_range_RXFA_EXT_MASK_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _ohp_core_lfield_range_RXFA_EXT_MASK_set( LOG_CALLER_DEFN
                                                             ohp_core_buffer_t *b,
                                                             ohp_core_handle_t *h,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ohp_core_lfield_range_RXFA_EXT_MASK_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ohp_core_lfield_range_RXFA_EXT_MASK_set", start_bit, stop_bit, value);
    _ohp_core_reg_RXFA_EXT_MASK_array_field_set( LOG_CALLER_ARGS
                                                 b,
                                                 h,
                                                 word_number,
                                                 mask,
                                                 field_ofs,
                                                 value);
}


#ifndef ohp_core_lfield_range_RXFA_EXT_MASK_get
#define ohp_core_lfield_range_RXFA_EXT_MASK_get( b, h, start_bit, stop_bit ) \
       _ohp_core_lfield_range_RXFA_EXT_MASK_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_lfield_range_RXFA_EXT_MASK_get( LOG_CALLER_DEFN
                                                               ohp_core_buffer_t *b,
                                                               ohp_core_handle_t *h,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = 0xffffffff >> (32-num_bits);
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ohp_core_lfield_range_RXFA_EXT_MASK_get", start_bit, stop_bit );
    }
    reg_value = _ohp_core_reg_RXFA_EXT_MASK_array_read( LOG_CALLER_ARGS
                                                        b,
                                                        h,
                                                        word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ohp_core_lfield_range_RXFA_EXT_MASK_get", start_bit, stop_bit, value );
    return value;
}


#ifndef ohp_core_lfield_RXFB_EXT_MASK_set
#define ohp_core_lfield_RXFB_EXT_MASK_set( b, h, value ) \
       _ohp_core_lfield_RXFB_EXT_MASK_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_RXFB_EXT_MASK_set( LOG_CALLER_DEFN
                                                       ohp_core_buffer_t *b,
                                                       ohp_core_handle_t *h,
                                                       UINT32 value[96] )
{
    IOLOG( "%s ", "ohp_core_lfield_RXFB_EXT_MASK_set");
    _ohp_core_reg_RXFB_EXT_MASK_array_burst_write( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   0,
                                                   96,
                                                   value);
}


#ifndef ohp_core_lfield_RXFB_EXT_MASK_get
#define ohp_core_lfield_RXFB_EXT_MASK_get( b, h, value ) \
       _ohp_core_lfield_RXFB_EXT_MASK_get( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_RXFB_EXT_MASK_get( LOG_CALLER_DEFN
                                                       ohp_core_buffer_t *b,
                                                       ohp_core_handle_t *h,
                                                       UINT32 value[96] )
{
    IOLOG( "%s ", "ohp_core_lfield_RXFB_EXT_MASK_get");
    _ohp_core_reg_RXFB_EXT_MASK_array_burst_read( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  0,
                                                  96,
                                                  (UINT32 *)value);
}


#ifndef ohp_core_lfield_range_RXFB_EXT_MASK_set
#define ohp_core_lfield_range_RXFB_EXT_MASK_set( b, h, start_bit, stop_bit, value ) \
       _ohp_core_lfield_range_RXFB_EXT_MASK_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _ohp_core_lfield_range_RXFB_EXT_MASK_set( LOG_CALLER_DEFN
                                                             ohp_core_buffer_t *b,
                                                             ohp_core_handle_t *h,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ohp_core_lfield_range_RXFB_EXT_MASK_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ohp_core_lfield_range_RXFB_EXT_MASK_set", start_bit, stop_bit, value);
    _ohp_core_reg_RXFB_EXT_MASK_array_field_set( LOG_CALLER_ARGS
                                                 b,
                                                 h,
                                                 word_number,
                                                 mask,
                                                 field_ofs,
                                                 value);
}


#ifndef ohp_core_lfield_range_RXFB_EXT_MASK_get
#define ohp_core_lfield_range_RXFB_EXT_MASK_get( b, h, start_bit, stop_bit ) \
       _ohp_core_lfield_range_RXFB_EXT_MASK_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_lfield_range_RXFB_EXT_MASK_get( LOG_CALLER_DEFN
                                                               ohp_core_buffer_t *b,
                                                               ohp_core_handle_t *h,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = 0xffffffff >> (32-num_bits);
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ohp_core_lfield_range_RXFB_EXT_MASK_get", start_bit, stop_bit );
    }
    reg_value = _ohp_core_reg_RXFB_EXT_MASK_array_read( LOG_CALLER_ARGS
                                                        b,
                                                        h,
                                                        word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ohp_core_lfield_range_RXFB_EXT_MASK_get", start_bit, stop_bit, value );
    return value;
}


#ifndef ohp_core_lfield_TXFA_INS_MASK_set
#define ohp_core_lfield_TXFA_INS_MASK_set( b, h, value ) \
       _ohp_core_lfield_TXFA_INS_MASK_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_TXFA_INS_MASK_set( LOG_CALLER_DEFN
                                                       ohp_core_buffer_t *b,
                                                       ohp_core_handle_t *h,
                                                       UINT32 value[96] )
{
    IOLOG( "%s ", "ohp_core_lfield_TXFA_INS_MASK_set");
    _ohp_core_reg_TXFA_INS_MASK_array_burst_write( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   0,
                                                   96,
                                                   value);
}


#ifndef ohp_core_lfield_TXFA_INS_MASK_get
#define ohp_core_lfield_TXFA_INS_MASK_get( b, h, value ) \
       _ohp_core_lfield_TXFA_INS_MASK_get( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_TXFA_INS_MASK_get( LOG_CALLER_DEFN
                                                       ohp_core_buffer_t *b,
                                                       ohp_core_handle_t *h,
                                                       UINT32 value[96] )
{
    IOLOG( "%s ", "ohp_core_lfield_TXFA_INS_MASK_get");
    _ohp_core_reg_TXFA_INS_MASK_array_burst_read( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  0,
                                                  96,
                                                  (UINT32 *)value);
}


#ifndef ohp_core_lfield_range_TXFA_INS_MASK_set
#define ohp_core_lfield_range_TXFA_INS_MASK_set( b, h, start_bit, stop_bit, value ) \
       _ohp_core_lfield_range_TXFA_INS_MASK_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _ohp_core_lfield_range_TXFA_INS_MASK_set( LOG_CALLER_DEFN
                                                             ohp_core_buffer_t *b,
                                                             ohp_core_handle_t *h,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ohp_core_lfield_range_TXFA_INS_MASK_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ohp_core_lfield_range_TXFA_INS_MASK_set", start_bit, stop_bit, value);
    _ohp_core_reg_TXFA_INS_MASK_array_field_set( LOG_CALLER_ARGS
                                                 b,
                                                 h,
                                                 word_number,
                                                 mask,
                                                 field_ofs,
                                                 value);
}


#ifndef ohp_core_lfield_range_TXFA_INS_MASK_get
#define ohp_core_lfield_range_TXFA_INS_MASK_get( b, h, start_bit, stop_bit ) \
       _ohp_core_lfield_range_TXFA_INS_MASK_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_lfield_range_TXFA_INS_MASK_get( LOG_CALLER_DEFN
                                                               ohp_core_buffer_t *b,
                                                               ohp_core_handle_t *h,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = 0xffffffff >> (32-num_bits);
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ohp_core_lfield_range_TXFA_INS_MASK_get", start_bit, stop_bit );
    }
    reg_value = _ohp_core_reg_TXFA_INS_MASK_array_read( LOG_CALLER_ARGS
                                                        b,
                                                        h,
                                                        word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ohp_core_lfield_range_TXFA_INS_MASK_get", start_bit, stop_bit, value );
    return value;
}


#ifndef ohp_core_lfield_TXFB_INS_MASK_set
#define ohp_core_lfield_TXFB_INS_MASK_set( b, h, value ) \
       _ohp_core_lfield_TXFB_INS_MASK_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_TXFB_INS_MASK_set( LOG_CALLER_DEFN
                                                       ohp_core_buffer_t *b,
                                                       ohp_core_handle_t *h,
                                                       UINT32 value[96] )
{
    IOLOG( "%s ", "ohp_core_lfield_TXFB_INS_MASK_set");
    _ohp_core_reg_TXFB_INS_MASK_array_burst_write( LOG_CALLER_ARGS
                                                   b,
                                                   h,
                                                   0,
                                                   96,
                                                   value);
}


#ifndef ohp_core_lfield_TXFB_INS_MASK_get
#define ohp_core_lfield_TXFB_INS_MASK_get( b, h, value ) \
       _ohp_core_lfield_TXFB_INS_MASK_get( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_TXFB_INS_MASK_get( LOG_CALLER_DEFN
                                                       ohp_core_buffer_t *b,
                                                       ohp_core_handle_t *h,
                                                       UINT32 value[96] )
{
    IOLOG( "%s ", "ohp_core_lfield_TXFB_INS_MASK_get");
    _ohp_core_reg_TXFB_INS_MASK_array_burst_read( LOG_CALLER_ARGS
                                                  b,
                                                  h,
                                                  0,
                                                  96,
                                                  (UINT32 *)value);
}


#ifndef ohp_core_lfield_range_TXFB_INS_MASK_set
#define ohp_core_lfield_range_TXFB_INS_MASK_set( b, h, start_bit, stop_bit, value ) \
       _ohp_core_lfield_range_TXFB_INS_MASK_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _ohp_core_lfield_range_TXFB_INS_MASK_set( LOG_CALLER_DEFN
                                                             ohp_core_buffer_t *b,
                                                             ohp_core_handle_t *h,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit,
                                                             UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ohp_core_lfield_range_TXFB_INS_MASK_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ohp_core_lfield_range_TXFB_INS_MASK_set", start_bit, stop_bit, value);
    _ohp_core_reg_TXFB_INS_MASK_array_field_set( LOG_CALLER_ARGS
                                                 b,
                                                 h,
                                                 word_number,
                                                 mask,
                                                 field_ofs,
                                                 value);
}


#ifndef ohp_core_lfield_range_TXFB_INS_MASK_get
#define ohp_core_lfield_range_TXFB_INS_MASK_get( b, h, start_bit, stop_bit ) \
       _ohp_core_lfield_range_TXFB_INS_MASK_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_lfield_range_TXFB_INS_MASK_get( LOG_CALLER_DEFN
                                                               ohp_core_buffer_t *b,
                                                               ohp_core_handle_t *h,
                                                               UINT32 start_bit,
                                                               UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = 0xffffffff >> (32-num_bits);
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ohp_core_lfield_range_TXFB_INS_MASK_get", start_bit, stop_bit );
    }
    reg_value = _ohp_core_reg_TXFB_INS_MASK_array_read( LOG_CALLER_ARGS
                                                        b,
                                                        h,
                                                        word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ohp_core_lfield_range_TXFB_INS_MASK_get", start_bit, stop_bit, value );
    return value;
}


#ifndef ohp_core_lfield_SRV_CH_ID_A_set
#define ohp_core_lfield_SRV_CH_ID_A_set( b, h, value ) \
       _ohp_core_lfield_SRV_CH_ID_A_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_SRV_CH_ID_A_set( LOG_CALLER_DEFN
                                                     ohp_core_buffer_t *b,
                                                     ohp_core_handle_t *h,
                                                     UINT32 value[96] )
{
    IOLOG( "%s ", "ohp_core_lfield_SRV_CH_ID_A_set");
    _ohp_core_reg_RXFA_CH_SCHEDULE_array_burst_write( LOG_CALLER_ARGS
                                                      b,
                                                      h,
                                                      0,
                                                      96,
                                                      value);
}


#ifndef ohp_core_lfield_SRV_CH_ID_A_get
#define ohp_core_lfield_SRV_CH_ID_A_get( b, h, value ) \
       _ohp_core_lfield_SRV_CH_ID_A_get( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_SRV_CH_ID_A_get( LOG_CALLER_DEFN
                                                     ohp_core_buffer_t *b,
                                                     ohp_core_handle_t *h,
                                                     UINT32 value[96] )
{
    IOLOG( "%s ", "ohp_core_lfield_SRV_CH_ID_A_get");
    _ohp_core_reg_RXFA_CH_SCHEDULE_array_burst_read( LOG_CALLER_ARGS
                                                     b,
                                                     h,
                                                     0,
                                                     96,
                                                     (UINT32 *)value);
}


#ifndef ohp_core_lfield_range_SRV_CH_ID_A_set
#define ohp_core_lfield_range_SRV_CH_ID_A_set( b, h, start_bit, stop_bit, value ) \
       _ohp_core_lfield_range_SRV_CH_ID_A_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _ohp_core_lfield_range_SRV_CH_ID_A_set( LOG_CALLER_DEFN
                                                           ohp_core_buffer_t *b,
                                                           ohp_core_handle_t *h,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ohp_core_lfield_range_SRV_CH_ID_A_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ohp_core_lfield_range_SRV_CH_ID_A_set", start_bit, stop_bit, value);
    _ohp_core_reg_RXFA_CH_SCHEDULE_array_field_set( LOG_CALLER_ARGS
                                                    b,
                                                    h,
                                                    word_number,
                                                    mask,
                                                    field_ofs,
                                                    value);
}


#ifndef ohp_core_lfield_range_SRV_CH_ID_A_get
#define ohp_core_lfield_range_SRV_CH_ID_A_get( b, h, start_bit, stop_bit ) \
       _ohp_core_lfield_range_SRV_CH_ID_A_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_lfield_range_SRV_CH_ID_A_get( LOG_CALLER_DEFN
                                                             ohp_core_buffer_t *b,
                                                             ohp_core_handle_t *h,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = 0xffffffff >> (32-num_bits);
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ohp_core_lfield_range_SRV_CH_ID_A_get", start_bit, stop_bit );
    }
    reg_value = _ohp_core_reg_RXFA_CH_SCHEDULE_array_read( LOG_CALLER_ARGS
                                                           b,
                                                           h,
                                                           word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ohp_core_lfield_range_SRV_CH_ID_A_get", start_bit, stop_bit, value );
    return value;
}


#ifndef ohp_core_lfield_SRV_CH_ID_B_set
#define ohp_core_lfield_SRV_CH_ID_B_set( b, h, value ) \
       _ohp_core_lfield_SRV_CH_ID_B_set( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_SRV_CH_ID_B_set( LOG_CALLER_DEFN
                                                     ohp_core_buffer_t *b,
                                                     ohp_core_handle_t *h,
                                                     UINT32 value[96] )
{
    IOLOG( "%s ", "ohp_core_lfield_SRV_CH_ID_B_set");
    _ohp_core_reg_RXFB_CH_SCHEDULE_array_burst_write( LOG_CALLER_ARGS
                                                      b,
                                                      h,
                                                      0,
                                                      96,
                                                      value);
}


#ifndef ohp_core_lfield_SRV_CH_ID_B_get
#define ohp_core_lfield_SRV_CH_ID_B_get( b, h, value ) \
       _ohp_core_lfield_SRV_CH_ID_B_get( LOG_CALLER b, h, value )
#endif
static INLINE void _ohp_core_lfield_SRV_CH_ID_B_get( LOG_CALLER_DEFN
                                                     ohp_core_buffer_t *b,
                                                     ohp_core_handle_t *h,
                                                     UINT32 value[96] )
{
    IOLOG( "%s ", "ohp_core_lfield_SRV_CH_ID_B_get");
    _ohp_core_reg_RXFB_CH_SCHEDULE_array_burst_read( LOG_CALLER_ARGS
                                                     b,
                                                     h,
                                                     0,
                                                     96,
                                                     (UINT32 *)value);
}


#ifndef ohp_core_lfield_range_SRV_CH_ID_B_set
#define ohp_core_lfield_range_SRV_CH_ID_B_set( b, h, start_bit, stop_bit, value ) \
       _ohp_core_lfield_range_SRV_CH_ID_B_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _ohp_core_lfield_range_SRV_CH_ID_B_set( LOG_CALLER_DEFN
                                                           ohp_core_buffer_t *b,
                                                           ohp_core_handle_t *h,
                                                           UINT32 start_bit,
                                                           UINT32 stop_bit,
                                                           UINT32 value )
{
    UINT32 word_number;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    num_bits = stop_bit - start_bit + 1;
    mask = (0xffffffff >> (32-num_bits)) << field_ofs;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ohp_core_lfield_range_SRV_CH_ID_B_set", start_bit, stop_bit );
    }
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ohp_core_lfield_range_SRV_CH_ID_B_set", start_bit, stop_bit, value);
    _ohp_core_reg_RXFB_CH_SCHEDULE_array_field_set( LOG_CALLER_ARGS
                                                    b,
                                                    h,
                                                    word_number,
                                                    mask,
                                                    field_ofs,
                                                    value);
}


#ifndef ohp_core_lfield_range_SRV_CH_ID_B_get
#define ohp_core_lfield_range_SRV_CH_ID_B_get( b, h, start_bit, stop_bit ) \
       _ohp_core_lfield_range_SRV_CH_ID_B_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_lfield_range_SRV_CH_ID_B_get( LOG_CALLER_DEFN
                                                             ohp_core_buffer_t *b,
                                                             ohp_core_handle_t *h,
                                                             UINT32 start_bit,
                                                             UINT32 stop_bit )
{
    UINT32 value;
    UINT32 word_number;
    UINT32 reg_value;
    UINT32 field_ofs;
    UINT32 num_bits;
    UINT32 mask;

    num_bits = stop_bit - start_bit + 1;
    mask = 0xffffffff >> (32-num_bits);
    word_number = start_bit / 32;
    field_ofs = start_bit % 32;
    if (stop_bit / 32 != word_number) {
        IOLOG( "BUG: %s does not support ranges that span multiple registers -- fix code generator - start_bit=%d, stop_bit=%d", "ohp_core_lfield_range_SRV_CH_ID_B_get", start_bit, stop_bit );
    }
    reg_value = _ohp_core_reg_RXFB_CH_SCHEDULE_array_read( LOG_CALLER_ARGS
                                                           b,
                                                           h,
                                                           word_number);
    value = (reg_value >> field_ofs) & mask;
    IOLOG( "%s -> start_bit=%d stop_bit=%d value=0x%08x", "ohp_core_lfield_range_SRV_CH_ID_B_get", start_bit, stop_bit, value );
    return value;
}


/*
 * ==================================================================================
 *                  Parameter Access Functions for Paramset status
 * ==================================================================================
 */

#ifndef ohp_core_field_CFC_DBG_RDATA_get
#define ohp_core_field_CFC_DBG_RDATA_get( b, h ) \
       _ohp_core_field_CFC_DBG_RDATA_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _ohp_core_field_CFC_DBG_RDATA_get( LOG_CALLER_DEFN ohp_core_buffer_t *b, ohp_core_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x0000138c bits 31:0) field CFC_DBG_RDATA of register PMC_OHP_CORE_REG_CFC_DEBUG_RDATA */
    reg_value = _ohp_core_reg_CFC_DEBUG_RDATA_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & OHP_CORE_REG_CFC_DEBUG_RDATA_BIT_CFC_DBG_RDATA_MSK) >> OHP_CORE_REG_CFC_DEBUG_RDATA_BIT_CFC_DBG_RDATA_OFF;
    IOLOG( "%s -> 0x%08x", "ohp_core_field_CFC_DBG_RDATA_get", value );

    return value;
}

#ifndef ohp_core_field_range_CFC_DBG_RDATA_get
#define ohp_core_field_range_CFC_DBG_RDATA_get( b, h, start_bit, stop_bit ) \
       _ohp_core_field_range_CFC_DBG_RDATA_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _ohp_core_field_range_CFC_DBG_RDATA_get( LOG_CALLER_DEFN
                                                              ohp_core_buffer_t *b,
                                                              ohp_core_handle_t *h,
                                                              UINT32 start_bit,
                                                              UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "ohp_core_field_range_CFC_DBG_RDATA_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "ohp_core_field_range_CFC_DBG_RDATA_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x0000138c bits 31:0) field CFC_DBG_RDATA of register PMC_OHP_CORE_REG_CFC_DEBUG_RDATA */
    reg_value = _ohp_core_reg_CFC_DEBUG_RDATA_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & OHP_CORE_REG_CFC_DEBUG_RDATA_BIT_CFC_DBG_RDATA_MSK)
                  >> OHP_CORE_REG_CFC_DEBUG_RDATA_BIT_CFC_DBG_RDATA_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, OHP_CORE_REG_CFC_DEBUG_RDATA_BIT_CFC_DBG_RDATA_MSK, OHP_CORE_REG_CFC_DEBUG_RDATA_BIT_CFC_DBG_RDATA_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "ohp_core_field_range_CFC_DBG_RDATA_get", start_bit, stop_bit, value );

    return value;
}

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* _OHP_CORE_IO_INLINE_H */
