/******************************************************************************
 *   COPYRIGHT (C) 2011 PMC-SIERRA, INC. ALL RIGHTS RESERVED.
 * --------------------------------------------------------------------------
 *  This software embodies materials and concepts which are proprietary and
 *  confidential to PMC-Sierra, Inc.
 *  PMC-Sierra distributes this software to its customers pursuant to the
 *  terms and conditions of the Software License Agreement
 *  contained in the text file software.lic that is distributed along with
 *  the software. This software can only be utilized if all
 *  terms and conditions of the Software License Agreement are
 *  accepted. If there are any questions, concerns, or if the
 *  Software License Agreement text file, software.lic, is missing please
 *  contact PMC-Sierra for assistance.
 * -------------------------------------------------------------------------
 *   DESCRIPTION:
 *     contains the inline implementation of all the field accessor functions
 *     and register accessor functions for the tsb2 block
 * 
 *   NOTES:
 *     This file is generated by the script codegen.pm, version 1.1
 *     Do not modify this file.
 * 
 *     The input file is ../src/ioxml/pm1234_map.xml
 *     block_uri "file:../docs/rda/pm1002_reg.xml"
 *     block_part_number "PM1002"
 *     block_mnemonic "TSB2"
 * 
 *****************************************************************************/
#ifndef _TSB2_IO_INLINE_H
#define _TSB2_IO_INLINE_H

#include "pmc_sys.h"
#include "pmc_types.h"
#include "tsb2_regs.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * ==================================================================================
 *                 tsb level structure and access functions for tsb2
 * ==================================================================================
 */
/* if logging is disabled then so is IO_LOGGING */
#ifndef NO_IO_LOGGING
# ifdef LOGGING_DISABLED
#  define NO_IO_LOGGING
# endif
#endif

/* log messages in the generated files log the caller's file/line/function instead of itself.*/
#ifndef IOLOG
# ifdef NO_IO_LOGGING
#  define IOLOG(...)
# else
#  define IOLOG(...) vaLog( LOG_CALLER_ARGS __VA_ARGS__)
# endif
#endif
#ifndef IO_RANGE_CHECK
# ifdef NO_IO_LOGGING
#  define IO_RANGE_CHECK(...)
# else
#  define IO_RANGE_CHECK(...) vaLog( LOG_CALLER_ARGS "** range check ** " __VA_ARGS__)
# endif
#endif
#ifndef IOLOG_DATA
# ifdef NO_IO_LOGGING
#  define IOLOG_DATA(...)
# else
#  define IOLOG_DATA(...) vaLogData( LOG_CALLER_ARGS __VA_ARGS__)
# endif
#endif
typedef struct {
    coalesce_buffer_t coalesce_handle[1]; /* only used if register coalescing is enabled */
    pmc_handle_t * h;
    UINT32 A;
    pmc_sys_handle_t sys_handle;
    const UINT32 base_address;
    /* maybe eventually need to add some fields here per io handle */
} tsb2_buffer_t;

#ifndef tsb2_buffer_init
#define tsb2_buffer_init( b, h, A ) \
       _tsb2_buffer_init( LOG_CALLER b, h, A )
#endif
static INLINE void _tsb2_buffer_init( LOG_CALLER_DEFN
                                      tsb2_buffer_t *b,
                                      pmc_handle_t *h,
                                      UINT32 A )
{
    b->h = h;
    b->A = A;
    b->sys_handle = ((pmc_handle_t *)h)->sys_handle;
    *(UINT32 *)&b->base_address = (((pmc_handle_t *)h)->base_address + ((0)*0x100) );
    /* currently this just checks that the previous function remembered to flush. */
    l1sys_init( b->coalesce_handle, (void**)b->sys_handle );
    IOLOG( "%s A=%d", "tsb2_buffer_init", A);
    
}

#ifndef tsb2_buffer_flush
#define tsb2_buffer_flush( b ) \
       _tsb2_buffer_flush( LOG_CALLER b )
#endif

/*
* flush any changed fields to the register file and invalidate the read cache.
*/
static INLINE void _tsb2_buffer_flush( LOG_CALLER_DEFN tsb2_buffer_t *b )
{
    IOLOG( "tsb2_buffer_flush" );
    l1sys_flush( b->coalesce_handle );
}
static INLINE UINT32 tsb2_reg_read( tsb2_buffer_t *b,
                                    pmc_handle_t *h,
                                    UINT32 A,
                                    UINT32 mem_type,
                                    UINT32 reg )
{
    UINT32 value;
    if (b != NULL)
        value = l1sys_reg_read( b->coalesce_handle,
                                mem_type,
                                (b->base_address + (b->A)*0x100),
                                reg);
    else
        value = l2sys_reg_read( ((pmc_handle_t *)h)->sys_handle,
                                mem_type,
                                (((pmc_handle_t *)h)->base_address + (A)*0x100) + reg);
    return value;
}
static INLINE void tsb2_reg_write( tsb2_buffer_t *b,
                                   pmc_handle_t *h,
                                   UINT32 A,
                                   UINT32 mem_type,
                                   UINT32 reg,
                                   UINT32 value )
{
    if (b != NULL)
        l1sys_reg_write( b->coalesce_handle,
                         mem_type,
                         (b->base_address + (b->A)*0x100),
                         reg,
                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h)->sys_handle,
                         mem_type,
                         (((pmc_handle_t *)h)->base_address + (A)*0x100) + reg,
                         value);
}

static INLINE void tsb2_field_set( tsb2_buffer_t *b,
                                   pmc_handle_t *h,
                                   UINT32 A,
                                   UINT32 mem_type,
                                   UINT32 reg,
                                   UINT32 mask,
                                   UINT32 ofs,
                                   UINT32 value )
{
    if (b != NULL)
        l1sys_field_set( b->coalesce_handle,
                         mem_type,
                         (b->base_address + (b->A)*0x100),
                         reg,
                         mask,
                         ofs,
                         value);
    else
        l2sys_reg_read_modify_write( ((pmc_handle_t *)h)->sys_handle,
                                     mem_type,
                                     (((pmc_handle_t *)h)->base_address + (A)*0x100) + reg,
                                     mask,
                                     value<<ofs);
}

static INLINE void tsb2_action_on_write_field_set( tsb2_buffer_t *b,
                                                   pmc_handle_t *h,
                                                   UINT32 A,
                                                   UINT32 mem_type,
                                                   UINT32 reg,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value )
{
    if (b != NULL)
        l1sys_action_on_write_field_set( b->coalesce_handle,
                                         mem_type,
                                         (b->base_address + (b->A)*0x100),
                                         reg,
                                         mask,
                                         ofs,
                                         value);
    else
        l2sys_reg_read_modify_write( ((pmc_handle_t *)h)->sys_handle,
                                     mem_type,
                                     (((pmc_handle_t *)h)->base_address + (A)*0x100) + reg,
                                     0xffffffff,
                                     value<<ofs);
}

static INLINE void tsb2_burst_read( tsb2_buffer_t *b,
                                    pmc_handle_t *h,
                                    UINT32 A,
                                    UINT32 mem_type,
                                    UINT32 reg,
                                    UINT32 len,
                                    UINT32 *value )
{
    if (b != NULL)
        l1sys_burst_read( b->coalesce_handle,
                          mem_type,
                          (b->base_address + (b->A)*0x100),
                          reg,
                          len,
                          value);
    else
        l2sys_burst_read( ((pmc_handle_t *)h)->sys_handle,
                          mem_type,
                          (((pmc_handle_t *)h)->base_address + (A)*0x100) + reg,
                          len,
                          value);
}

static INLINE void tsb2_burst_write( tsb2_buffer_t *b,
                                     pmc_handle_t *h,
                                     UINT32 A,
                                     UINT32 mem_type,
                                     UINT32 reg,
                                     UINT32 len,
                                     UINT32 *value )
{
    if (b != NULL)
        l1sys_burst_write( b->coalesce_handle,
                           mem_type,
                           (b->base_address + (b->A)*0x100),
                           reg,
                           len,
                           value);
    else
        l2sys_burst_write( ((pmc_handle_t *)h)->sys_handle,
                           mem_type,
                           (((pmc_handle_t *)h)->base_address + (A)*0x100) + reg,
                           len,
                           value);
}

static INLINE PMC_ERROR tsb2_poll_bit( tsb2_buffer_t *b,
                                       pmc_handle_t *h,
                                       UINT32 A,
                                       UINT32 mem_type,
                                       UINT32 reg,
                                       UINT32 mask,
                                       UINT32 value,
                                       UINT32 max_count,
                                       UINT32 *num_failed_polls,
                                       UINT32 delay_between_polls_in_microseconds )
{
    if (b != NULL)
        return l1sys_poll_bit( b->coalesce_handle,
                               mem_type,
                               (b->base_address + (b->A)*0x100),
                               reg,
                               mask,
                               value,
                               max_count,
                               num_failed_polls,
                               delay_between_polls_in_microseconds);
    else
        return l2sys_poll_bit( ((pmc_handle_t *)h)->sys_handle,
                               mem_type,
                               (((pmc_handle_t *)h)->base_address + (A)*0x100) + reg,
                               mask,
                               value,
                               max_count,
                               num_failed_polls,
                               delay_between_polls_in_microseconds);
}

/*
 * ==================================================================================
 *                        register access functions for tsb2
 * ==================================================================================
 */

/**
 * accessor functions for register PMC_TSB2_REG_CONFIG
 *
 * Register: Configuration
 * Offset: 0x00020100 CONFIG
 * 
 *
 * bits 0   default 0  CFG_A
 *     Testing
 *
 * bits 1   default 0  CFG_B
 *     Testing
 *
 * bits 3:2 default 00 CFG_C
 *     Testing
 *
 * bits 7:4 default 00 CFG_D
 *     Testing
 */

#ifndef tsb2_reg_CONFIG_write
#define tsb2_reg_CONFIG_write( b, h, A, value ) \
       _tsb2_reg_CONFIG_write( LOG_CALLER b, h, A, value )
#endif
static INLINE void _tsb2_reg_CONFIG_write( LOG_CALLER_DEFN
                                           tsb2_buffer_t *b,
                                           pmc_handle_t *h,
                                           UINT32 A,
                                           UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "tsb2_reg_CONFIG_write", value );
    tsb2_reg_write( b,
                    h,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_TSB2_REG_CONFIG,
                    value);
}


#ifndef tsb2_reg_CONFIG_field_set
#define tsb2_reg_CONFIG_field_set( b, h, A, mask, ofs, value ) \
       _tsb2_reg_CONFIG_field_set( LOG_CALLER b, h, A, mask, ofs, value )
#endif
static INLINE void _tsb2_reg_CONFIG_field_set( LOG_CALLER_DEFN
                                               tsb2_buffer_t *b,
                                               pmc_handle_t *h,
                                               UINT32 A,
                                               UINT32 mask,
                                               UINT32 ofs,
                                               UINT32 value )
{
    IOLOG( "%s <- A=%d mask=0x%08x ofs=%d value=0x%08x", "tsb2_reg_CONFIG_field_set", A, mask, ofs, value );
    tsb2_field_set( b,
                    h,
                    A,
                    MEM_TYPE_CONFIG,
                    PMC_TSB2_REG_CONFIG,
                    mask,
                    ofs,
                    value);

}


#ifndef tsb2_reg_CONFIG_read
#define tsb2_reg_CONFIG_read( b, h, A ) \
       _tsb2_reg_CONFIG_read( LOG_CALLER b, h, A )
#endif
static INLINE UINT32 _tsb2_reg_CONFIG_read( LOG_CALLER_DEFN
                                            tsb2_buffer_t *b,
                                            pmc_handle_t *h,
                                            UINT32 A )
{
    UINT32 reg_value;

    reg_value = tsb2_reg_read( b,
                               h,
                               A,
                               MEM_TYPE_CONFIG,
                               PMC_TSB2_REG_CONFIG);

    IOLOG( "%s -> 0x%08x; A=%d", "tsb2_reg_CONFIG_read", reg_value, A);
    return reg_value;
}

/**
 * accessor functions for register PMC_TSB2_REG_STATUS
 *
 * Register: Status
 * Offset: 0x00020104 STATUS
 * 
 *
 * bits 0   default 0  STS_A
 *     Testing
 *
 * bits 1   default 0  STS_B
 *     Testing
 *
 * bits 3:2 default 00 STS_C
 *     Testing
 *
 * bits 7:4 default 00 STS_D
 *     Testing
 */

#ifndef tsb2_reg_STATUS_read
#define tsb2_reg_STATUS_read( b, h, A ) \
       _tsb2_reg_STATUS_read( LOG_CALLER b, h, A )
#endif
static INLINE UINT32 _tsb2_reg_STATUS_read( LOG_CALLER_DEFN
                                            tsb2_buffer_t *b,
                                            pmc_handle_t *h,
                                            UINT32 A )
{
    UINT32 reg_value;

    reg_value = tsb2_reg_read( b,
                               h,
                               A,
                               MEM_TYPE_STATUS,
                               PMC_TSB2_REG_STATUS);

    IOLOG( "%s -> 0x%08x; A=%d", "tsb2_reg_STATUS_read", reg_value, A);
    return reg_value;
}

/*
 * ==================================================================================
 *               Parameter Access Functions for Paramset tsb2_config
 * ==================================================================================
 */

#ifndef tsb2_field_CFG_A_set
#define tsb2_field_CFG_A_set( b, h, A, value ) \
       _tsb2_field_CFG_A_set( LOG_CALLER b, h, A, value )
#endif
static INLINE void _tsb2_field_CFG_A_set( LOG_CALLER_DEFN
                                          tsb2_buffer_t *b,
                                          pmc_handle_t *h,
                                          UINT32 A,
                                          UINT32 value )
{
    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "tsb2_field_CFG_A_set", A, 3);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "tsb2_field_CFG_A_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "tsb2_field_CFG_A_set", A, value );

    /* (0x00020100 bits 0) field CFG_A of register PMC_TSB2_REG_CONFIG */
    _tsb2_reg_CONFIG_field_set( LOG_CALLER_ARGS
                                b,
                                h,
                                A,
                                TSB2_REG_CONFIG_BIT_CFG_A_MSK,
                                TSB2_REG_CONFIG_BIT_CFG_A_OFF,
                                value);
}


#ifndef tsb2_field_CFG_A_get
#define tsb2_field_CFG_A_get( b, h, A ) \
       _tsb2_field_CFG_A_get( LOG_CALLER b, h, A )
#endif
static INLINE UINT32 _tsb2_field_CFG_A_get( LOG_CALLER_DEFN
                                            tsb2_buffer_t *b,
                                            pmc_handle_t *h,
                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "tsb2_field_CFG_A_get", A, 3);
    /* (0x00020100 bits 0) field CFG_A of register PMC_TSB2_REG_CONFIG */
    reg_value = _tsb2_reg_CONFIG_read( LOG_CALLER_ARGS b, h, A);
    value = (reg_value & TSB2_REG_CONFIG_BIT_CFG_A_MSK) >> TSB2_REG_CONFIG_BIT_CFG_A_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "tsb2_field_CFG_A_get", A, value );

    return value;
}

#ifndef tsb2_field_CFG_B_set
#define tsb2_field_CFG_B_set( b, h, A, value ) \
       _tsb2_field_CFG_B_set( LOG_CALLER b, h, A, value )
#endif
static INLINE void _tsb2_field_CFG_B_set( LOG_CALLER_DEFN
                                          tsb2_buffer_t *b,
                                          pmc_handle_t *h,
                                          UINT32 A,
                                          UINT32 value )
{
    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "tsb2_field_CFG_B_set", A, 3);
    if (value > 1)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "tsb2_field_CFG_B_set", value, 1);
    IOLOG( "%s <= A=%d 0x%08x", "tsb2_field_CFG_B_set", A, value );

    /* (0x00020100 bits 1) field CFG_B of register PMC_TSB2_REG_CONFIG */
    _tsb2_reg_CONFIG_field_set( LOG_CALLER_ARGS
                                b,
                                h,
                                A,
                                TSB2_REG_CONFIG_BIT_CFG_B_MSK,
                                TSB2_REG_CONFIG_BIT_CFG_B_OFF,
                                value);
}


#ifndef tsb2_field_CFG_B_get
#define tsb2_field_CFG_B_get( b, h, A ) \
       _tsb2_field_CFG_B_get( LOG_CALLER b, h, A )
#endif
static INLINE UINT32 _tsb2_field_CFG_B_get( LOG_CALLER_DEFN
                                            tsb2_buffer_t *b,
                                            pmc_handle_t *h,
                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "tsb2_field_CFG_B_get", A, 3);
    /* (0x00020100 bits 1) field CFG_B of register PMC_TSB2_REG_CONFIG */
    reg_value = _tsb2_reg_CONFIG_read( LOG_CALLER_ARGS b, h, A);
    value = (reg_value & TSB2_REG_CONFIG_BIT_CFG_B_MSK) >> TSB2_REG_CONFIG_BIT_CFG_B_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "tsb2_field_CFG_B_get", A, value );

    return value;
}

#ifndef tsb2_field_CFG_C_set
#define tsb2_field_CFG_C_set( b, h, A, value ) \
       _tsb2_field_CFG_C_set( LOG_CALLER b, h, A, value )
#endif
static INLINE void _tsb2_field_CFG_C_set( LOG_CALLER_DEFN
                                          tsb2_buffer_t *b,
                                          pmc_handle_t *h,
                                          UINT32 A,
                                          UINT32 value )
{
    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "tsb2_field_CFG_C_set", A, 3);
    if (value > 3)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "tsb2_field_CFG_C_set", value, 3);
    IOLOG( "%s <= A=%d 0x%08x", "tsb2_field_CFG_C_set", A, value );

    /* (0x00020100 bits 3:2) field CFG_C of register PMC_TSB2_REG_CONFIG */
    _tsb2_reg_CONFIG_field_set( LOG_CALLER_ARGS
                                b,
                                h,
                                A,
                                TSB2_REG_CONFIG_BIT_CFG_C_MSK,
                                TSB2_REG_CONFIG_BIT_CFG_C_OFF,
                                value);
}


#ifndef tsb2_field_CFG_C_get
#define tsb2_field_CFG_C_get( b, h, A ) \
       _tsb2_field_CFG_C_get( LOG_CALLER b, h, A )
#endif
static INLINE UINT32 _tsb2_field_CFG_C_get( LOG_CALLER_DEFN
                                            tsb2_buffer_t *b,
                                            pmc_handle_t *h,
                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "tsb2_field_CFG_C_get", A, 3);
    /* (0x00020100 bits 3:2) field CFG_C of register PMC_TSB2_REG_CONFIG */
    reg_value = _tsb2_reg_CONFIG_read( LOG_CALLER_ARGS b, h, A);
    value = (reg_value & TSB2_REG_CONFIG_BIT_CFG_C_MSK) >> TSB2_REG_CONFIG_BIT_CFG_C_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "tsb2_field_CFG_C_get", A, value );

    return value;
}

#ifndef tsb2_field_range_CFG_C_set
#define tsb2_field_range_CFG_C_set( b, h, A, start_bit, stop_bit, value ) \
       _tsb2_field_range_CFG_C_set( LOG_CALLER b, h, A, start_bit, stop_bit, value )
#endif
static INLINE void _tsb2_field_range_CFG_C_set( LOG_CALLER_DEFN
                                                tsb2_buffer_t *b,
                                                pmc_handle_t *h,
                                                UINT32 A,
                                                UINT32 start_bit,
                                                UINT32 stop_bit,
                                                UINT32 value )
{
    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "tsb2_field_range_CFG_C_set", A, 3);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "tsb2_field_range_CFG_C_set", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "tsb2_field_range_CFG_C_set", stop_bit, 1 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "tsb2_field_range_CFG_C_set", A, start_bit, stop_bit, value );

    /* (0x00020100 bits 3:2) field CFG_C of register PMC_TSB2_REG_CONFIG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 2) {
            subfield_offset = start_bit - 2;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  2 - start_bit;
            subfield_start_bit = 2;
        }
        if (stop_bit < 3) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 3;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00020100 bits 3:2) field CFG_C of register PMC_TSB2_REG_CONFIG */
        _tsb2_reg_CONFIG_field_set( LOG_CALLER_ARGS
                                    b,
                                    h,
                                    A,
                                    subfield_mask << (TSB2_REG_CONFIG_BIT_CFG_C_OFF + subfield_offset),
                                    TSB2_REG_CONFIG_BIT_CFG_C_OFF + subfield_offset,
                                    value >> subfield_shift);
    }
}


#ifndef tsb2_field_range_CFG_C_get
#define tsb2_field_range_CFG_C_get( b, h, A, start_bit, stop_bit ) \
       _tsb2_field_range_CFG_C_get( LOG_CALLER b, h, A, start_bit, stop_bit )
#endif
static INLINE UINT32 _tsb2_field_range_CFG_C_get( LOG_CALLER_DEFN
                                                  tsb2_buffer_t *b,
                                                  pmc_handle_t *h,
                                                  UINT32 A,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "tsb2_field_range_CFG_C_get", A, 3);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "tsb2_field_range_CFG_C_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "tsb2_field_range_CFG_C_get", stop_bit, 1 );
    if (start_bit > 2) {
        subfield_offset = start_bit - 2;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 2 - start_bit;
        subfield_start_bit = 2;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00020100 bits 3:2) field CFG_C of register PMC_TSB2_REG_CONFIG */
    reg_value = _tsb2_reg_CONFIG_read( LOG_CALLER_ARGS b, h, A);
    field_value = (reg_value & TSB2_REG_CONFIG_BIT_CFG_C_MSK)
                  >> TSB2_REG_CONFIG_BIT_CFG_C_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, TSB2_REG_CONFIG_BIT_CFG_C_MSK, TSB2_REG_CONFIG_BIT_CFG_C_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "tsb2_field_range_CFG_C_get", A, start_bit, stop_bit, value );

    return value;
}

#ifndef tsb2_field_CFG_D_set
#define tsb2_field_CFG_D_set( b, h, A, value ) \
       _tsb2_field_CFG_D_set( LOG_CALLER b, h, A, value )
#endif
static INLINE void _tsb2_field_CFG_D_set( LOG_CALLER_DEFN
                                          tsb2_buffer_t *b,
                                          pmc_handle_t *h,
                                          UINT32 A,
                                          UINT32 value )
{
    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "tsb2_field_CFG_D_set", A, 3);
    if (value > 15)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "tsb2_field_CFG_D_set", value, 15);
    IOLOG( "%s <= A=%d 0x%08x", "tsb2_field_CFG_D_set", A, value );

    /* (0x00020100 bits 7:4) field CFG_D of register PMC_TSB2_REG_CONFIG */
    _tsb2_reg_CONFIG_field_set( LOG_CALLER_ARGS
                                b,
                                h,
                                A,
                                TSB2_REG_CONFIG_BIT_CFG_D_MSK,
                                TSB2_REG_CONFIG_BIT_CFG_D_OFF,
                                value);
}


#ifndef tsb2_field_CFG_D_get
#define tsb2_field_CFG_D_get( b, h, A ) \
       _tsb2_field_CFG_D_get( LOG_CALLER b, h, A )
#endif
static INLINE UINT32 _tsb2_field_CFG_D_get( LOG_CALLER_DEFN
                                            tsb2_buffer_t *b,
                                            pmc_handle_t *h,
                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "tsb2_field_CFG_D_get", A, 3);
    /* (0x00020100 bits 7:4) field CFG_D of register PMC_TSB2_REG_CONFIG */
    reg_value = _tsb2_reg_CONFIG_read( LOG_CALLER_ARGS b, h, A);
    value = (reg_value & TSB2_REG_CONFIG_BIT_CFG_D_MSK) >> TSB2_REG_CONFIG_BIT_CFG_D_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "tsb2_field_CFG_D_get", A, value );

    return value;
}

#ifndef tsb2_field_range_CFG_D_set
#define tsb2_field_range_CFG_D_set( b, h, A, start_bit, stop_bit, value ) \
       _tsb2_field_range_CFG_D_set( LOG_CALLER b, h, A, start_bit, stop_bit, value )
#endif
static INLINE void _tsb2_field_range_CFG_D_set( LOG_CALLER_DEFN
                                                tsb2_buffer_t *b,
                                                pmc_handle_t *h,
                                                UINT32 A,
                                                UINT32 start_bit,
                                                UINT32 stop_bit,
                                                UINT32 value )
{
    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "tsb2_field_range_CFG_D_set", A, 3);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "tsb2_field_range_CFG_D_set", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "tsb2_field_range_CFG_D_set", stop_bit, 3 );
    IOLOG( "%s <= A=%d start_bit=%d stop_bit=%d 0x%08x", "tsb2_field_range_CFG_D_set", A, start_bit, stop_bit, value );

    /* (0x00020100 bits 7:4) field CFG_D of register PMC_TSB2_REG_CONFIG */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 4) {
            subfield_offset = start_bit - 4;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  4 - start_bit;
            subfield_start_bit = 4;
        }
        if (stop_bit < 7) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 7;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00020100 bits 7:4) field CFG_D of register PMC_TSB2_REG_CONFIG */
        _tsb2_reg_CONFIG_field_set( LOG_CALLER_ARGS
                                    b,
                                    h,
                                    A,
                                    subfield_mask << (TSB2_REG_CONFIG_BIT_CFG_D_OFF + subfield_offset),
                                    TSB2_REG_CONFIG_BIT_CFG_D_OFF + subfield_offset,
                                    value >> subfield_shift);
    }
}


#ifndef tsb2_field_range_CFG_D_get
#define tsb2_field_range_CFG_D_get( b, h, A, start_bit, stop_bit ) \
       _tsb2_field_range_CFG_D_get( LOG_CALLER b, h, A, start_bit, stop_bit )
#endif
static INLINE UINT32 _tsb2_field_range_CFG_D_get( LOG_CALLER_DEFN
                                                  tsb2_buffer_t *b,
                                                  pmc_handle_t *h,
                                                  UINT32 A,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "tsb2_field_range_CFG_D_get", A, 3);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "tsb2_field_range_CFG_D_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "tsb2_field_range_CFG_D_get", stop_bit, 3 );
    if (start_bit > 4) {
        subfield_offset = start_bit - 4;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 4 - start_bit;
        subfield_start_bit = 4;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00020100 bits 7:4) field CFG_D of register PMC_TSB2_REG_CONFIG */
    reg_value = _tsb2_reg_CONFIG_read( LOG_CALLER_ARGS b, h, A);
    field_value = (reg_value & TSB2_REG_CONFIG_BIT_CFG_D_MSK)
                  >> TSB2_REG_CONFIG_BIT_CFG_D_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, TSB2_REG_CONFIG_BIT_CFG_D_MSK, TSB2_REG_CONFIG_BIT_CFG_D_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "tsb2_field_range_CFG_D_get", A, start_bit, stop_bit, value );

    return value;
}

/*
 * ==================================================================================
 *               Parameter Access Functions for Paramset tsb2_status
 * ==================================================================================
 */

#ifndef tsb2_field_STS_A_get
#define tsb2_field_STS_A_get( b, h, A ) \
       _tsb2_field_STS_A_get( LOG_CALLER b, h, A )
#endif
static INLINE UINT32 _tsb2_field_STS_A_get( LOG_CALLER_DEFN
                                            tsb2_buffer_t *b,
                                            pmc_handle_t *h,
                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "tsb2_field_STS_A_get", A, 3);
    /* (0x00020104 bits 0) field STS_A of register PMC_TSB2_REG_STATUS */
    reg_value = _tsb2_reg_STATUS_read( LOG_CALLER_ARGS b, h, A);
    value = (reg_value & TSB2_REG_STATUS_BIT_STS_A_MSK) >> TSB2_REG_STATUS_BIT_STS_A_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "tsb2_field_STS_A_get", A, value );

    return value;
}

#ifndef tsb2_field_STS_B_get
#define tsb2_field_STS_B_get( b, h, A ) \
       _tsb2_field_STS_B_get( LOG_CALLER b, h, A )
#endif
static INLINE UINT32 _tsb2_field_STS_B_get( LOG_CALLER_DEFN
                                            tsb2_buffer_t *b,
                                            pmc_handle_t *h,
                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "tsb2_field_STS_B_get", A, 3);
    /* (0x00020104 bits 1) field STS_B of register PMC_TSB2_REG_STATUS */
    reg_value = _tsb2_reg_STATUS_read( LOG_CALLER_ARGS b, h, A);
    value = (reg_value & TSB2_REG_STATUS_BIT_STS_B_MSK) >> TSB2_REG_STATUS_BIT_STS_B_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "tsb2_field_STS_B_get", A, value );

    return value;
}

#ifndef tsb2_field_STS_C_get
#define tsb2_field_STS_C_get( b, h, A ) \
       _tsb2_field_STS_C_get( LOG_CALLER b, h, A )
#endif
static INLINE UINT32 _tsb2_field_STS_C_get( LOG_CALLER_DEFN
                                            tsb2_buffer_t *b,
                                            pmc_handle_t *h,
                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "tsb2_field_STS_C_get", A, 3);
    /* (0x00020104 bits 3:2) field STS_C of register PMC_TSB2_REG_STATUS */
    reg_value = _tsb2_reg_STATUS_read( LOG_CALLER_ARGS b, h, A);
    value = (reg_value & TSB2_REG_STATUS_BIT_STS_C_MSK) >> TSB2_REG_STATUS_BIT_STS_C_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "tsb2_field_STS_C_get", A, value );

    return value;
}

#ifndef tsb2_field_range_STS_C_get
#define tsb2_field_range_STS_C_get( b, h, A, start_bit, stop_bit ) \
       _tsb2_field_range_STS_C_get( LOG_CALLER b, h, A, start_bit, stop_bit )
#endif
static INLINE UINT32 _tsb2_field_range_STS_C_get( LOG_CALLER_DEFN
                                                  tsb2_buffer_t *b,
                                                  pmc_handle_t *h,
                                                  UINT32 A,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "tsb2_field_range_STS_C_get", A, 3);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "tsb2_field_range_STS_C_get", stop_bit, start_bit );
    if (stop_bit > 1) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "tsb2_field_range_STS_C_get", stop_bit, 1 );
    if (start_bit > 2) {
        subfield_offset = start_bit - 2;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 2 - start_bit;
        subfield_start_bit = 2;
    }
    if (stop_bit < 3) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 3;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00020104 bits 3:2) field STS_C of register PMC_TSB2_REG_STATUS */
    reg_value = _tsb2_reg_STATUS_read( LOG_CALLER_ARGS b, h, A);
    field_value = (reg_value & TSB2_REG_STATUS_BIT_STS_C_MSK)
                  >> TSB2_REG_STATUS_BIT_STS_C_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, TSB2_REG_STATUS_BIT_STS_C_MSK, TSB2_REG_STATUS_BIT_STS_C_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "tsb2_field_range_STS_C_get", A, start_bit, stop_bit, value );

    return value;
}

#ifndef tsb2_field_STS_D_get
#define tsb2_field_STS_D_get( b, h, A ) \
       _tsb2_field_STS_D_get( LOG_CALLER b, h, A )
#endif
static INLINE UINT32 _tsb2_field_STS_D_get( LOG_CALLER_DEFN
                                            tsb2_buffer_t *b,
                                            pmc_handle_t *h,
                                            UINT32 A )
{
    UINT32 value = 0;
    UINT32 reg_value;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "tsb2_field_STS_D_get", A, 3);
    /* (0x00020104 bits 7:4) field STS_D of register PMC_TSB2_REG_STATUS */
    reg_value = _tsb2_reg_STATUS_read( LOG_CALLER_ARGS b, h, A);
    value = (reg_value & TSB2_REG_STATUS_BIT_STS_D_MSK) >> TSB2_REG_STATUS_BIT_STS_D_OFF;
    IOLOG( "%s -> A=%d 0x%08x", "tsb2_field_STS_D_get", A, value );

    return value;
}

#ifndef tsb2_field_range_STS_D_get
#define tsb2_field_range_STS_D_get( b, h, A, start_bit, stop_bit ) \
       _tsb2_field_range_STS_D_get( LOG_CALLER b, h, A, start_bit, stop_bit )
#endif
static INLINE UINT32 _tsb2_field_range_STS_D_get( LOG_CALLER_DEFN
                                                  tsb2_buffer_t *b,
                                                  pmc_handle_t *h,
                                                  UINT32 A,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (A > 3)
        IO_RANGE_CHECK("%s A is %d but max is %d", "tsb2_field_range_STS_D_get", A, 3);
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "tsb2_field_range_STS_D_get", stop_bit, start_bit );
    if (stop_bit > 3) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "tsb2_field_range_STS_D_get", stop_bit, 3 );
    if (start_bit > 4) {
        subfield_offset = start_bit - 4;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 4 - start_bit;
        subfield_start_bit = 4;
    }
    if (stop_bit < 7) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 7;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00020104 bits 7:4) field STS_D of register PMC_TSB2_REG_STATUS */
    reg_value = _tsb2_reg_STATUS_read( LOG_CALLER_ARGS b, h, A);
    field_value = (reg_value & TSB2_REG_STATUS_BIT_STS_D_MSK)
                  >> TSB2_REG_STATUS_BIT_STS_D_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, TSB2_REG_STATUS_BIT_STS_D_MSK, TSB2_REG_STATUS_BIT_STS_D_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> A=%d start_bit=%d stop_bit=%d 0x%08x", "tsb2_field_range_STS_D_get", A, start_bit, stop_bit, value );

    return value;
}

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* _TSB2_IO_INLINE_H */
