/******************************************************************************
 *   COPYRIGHT (C) 2011 PMC-SIERRA, INC. ALL RIGHTS RESERVED.
 * --------------------------------------------------------------------------
 *  This software embodies materials and concepts which are proprietary and
 *  confidential to PMC-Sierra, Inc.
 *  PMC-Sierra distributes this software to its customers pursuant to the
 *  terms and conditions of the Software License Agreement
 *  contained in the text file software.lic that is distributed along with
 *  the software. This software can only be utilized if all
 *  terms and conditions of the Software License Agreement are
 *  accepted. If there are any questions, concerns, or if the
 *  Software License Agreement text file, software.lic, is missing please
 *  contact PMC-Sierra for assistance.
 * -------------------------------------------------------------------------
 *   DESCRIPTION:
 *     contains the inline implementation of all the field accessor functions
 *     and register accessor functions for the tsb1 block
 * 
 *   NOTES:
 *     This file is generated by the script codegen.pm, version 1.1
 *     Do not modify this file.
 * 
 *     The input file is ../src/ioxml/pm1234_map.xml
 *     block_uri "file:../docs/rda/pm1001_reg.xml"
 *     block_part_number "PM1001"
 *     block_mnemonic "TSB1"
 * 
 *****************************************************************************/
#ifndef _TSB1_IO_INLINE_H
#define _TSB1_IO_INLINE_H

#include "pmc_sys.h"
#include "pmc_types.h"
#include "tsb1_regs.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
 * ==================================================================================
 *                 tsb level structure and access functions for tsb1
 * ==================================================================================
 */
/* if logging is disabled then so is IO_LOGGING */
#ifndef NO_IO_LOGGING
# ifdef LOGGING_DISABLED
#  define NO_IO_LOGGING
# endif
#endif

/* log messages in the generated files log the caller's file/line/function instead of itself.*/
#ifndef IOLOG
# ifdef NO_IO_LOGGING
#  define IOLOG(...)
# else
#  define IOLOG(...) vaLog( LOG_CALLER_ARGS __VA_ARGS__)
# endif
#endif
#ifndef IO_RANGE_CHECK
# ifdef NO_IO_LOGGING
#  define IO_RANGE_CHECK(...)
# else
#  define IO_RANGE_CHECK(...) vaLog( LOG_CALLER_ARGS "** range check ** " __VA_ARGS__)
# endif
#endif
#ifndef IOLOG_DATA
# ifdef NO_IO_LOGGING
#  define IOLOG_DATA(...)
# else
#  define IOLOG_DATA(...) vaLogData( LOG_CALLER_ARGS __VA_ARGS__)
# endif
#endif
typedef struct {
    coalesce_buffer_t coalesce_handle[1]; /* only used if register coalescing is enabled */
    pmc_handle_t * h;
    pmc_sys_handle_t sys_handle;
    const UINT32 base_address;
    /* maybe eventually need to add some fields here per io handle */
} tsb1_buffer_t;

#ifndef tsb1_buffer_init
#define tsb1_buffer_init( b, h ) \
       _tsb1_buffer_init( LOG_CALLER b, h )
#endif
static INLINE void _tsb1_buffer_init( LOG_CALLER_DEFN tsb1_buffer_t *b, pmc_handle_t *h )
{
    b->h = h;
    b->sys_handle = ((pmc_handle_t *)h)->sys_handle;
    *(UINT32 *)&b->base_address = ((pmc_handle_t *)h)->base_address;
    /* currently this just checks that the previous function remembered to flush. */
    l1sys_init( b->coalesce_handle, (void**)b->sys_handle );
    IOLOG( "%s", "tsb1_buffer_init");
    
}

#ifndef tsb1_buffer_flush
#define tsb1_buffer_flush( b ) \
       _tsb1_buffer_flush( LOG_CALLER b )
#endif

/*
* flush any changed fields to the register file and invalidate the read cache.
*/
static INLINE void _tsb1_buffer_flush( LOG_CALLER_DEFN tsb1_buffer_t *b )
{
    IOLOG( "tsb1_buffer_flush" );
    l1sys_flush( b->coalesce_handle );
}
static INLINE UINT32 tsb1_reg_read( tsb1_buffer_t *b,
                                    pmc_handle_t *h,
                                    UINT32 mem_type,
                                    UINT32 reg )
{
    UINT32 value;
    if (b != NULL)
        value = l1sys_reg_read( b->coalesce_handle,
                                mem_type,
                                b->base_address,
                                reg);
    else
        value = l2sys_reg_read( ((pmc_handle_t *)h)->sys_handle,
                                mem_type,
                                ((pmc_handle_t *)h)->base_address + reg);
    return value;
}
static INLINE void tsb1_reg_write( tsb1_buffer_t *b,
                                   pmc_handle_t *h,
                                   UINT32 mem_type,
                                   UINT32 reg,
                                   UINT32 value )
{
    if (b != NULL)
        l1sys_reg_write( b->coalesce_handle,
                         mem_type,
                         b->base_address,
                         reg,
                         value);
    else
        l2sys_reg_write( ((pmc_handle_t *)h)->sys_handle,
                         mem_type,
                         ((pmc_handle_t *)h)->base_address + reg,
                         value);
}

static INLINE void tsb1_field_set( tsb1_buffer_t *b,
                                   pmc_handle_t *h,
                                   UINT32 mem_type,
                                   UINT32 reg,
                                   UINT32 mask,
                                   UINT32 ofs,
                                   UINT32 value )
{
    if (b != NULL)
        l1sys_field_set( b->coalesce_handle,
                         mem_type,
                         b->base_address,
                         reg,
                         mask,
                         ofs,
                         value);
    else
        l2sys_reg_read_modify_write( ((pmc_handle_t *)h)->sys_handle,
                                     mem_type,
                                     ((pmc_handle_t *)h)->base_address + reg,
                                     mask,
                                     value<<ofs);
}

static INLINE void tsb1_action_on_write_field_set( tsb1_buffer_t *b,
                                                   pmc_handle_t *h,
                                                   UINT32 mem_type,
                                                   UINT32 reg,
                                                   UINT32 mask,
                                                   UINT32 ofs,
                                                   UINT32 value )
{
    if (b != NULL)
        l1sys_action_on_write_field_set( b->coalesce_handle,
                                         mem_type,
                                         b->base_address,
                                         reg,
                                         mask,
                                         ofs,
                                         value);
    else
        l2sys_reg_read_modify_write( ((pmc_handle_t *)h)->sys_handle,
                                     mem_type,
                                     ((pmc_handle_t *)h)->base_address + reg,
                                     0xffffffff,
                                     value<<ofs);
}

static INLINE void tsb1_burst_read( tsb1_buffer_t *b,
                                    pmc_handle_t *h,
                                    UINT32 mem_type,
                                    UINT32 reg,
                                    UINT32 len,
                                    UINT32 *value )
{
    if (b != NULL)
        l1sys_burst_read( b->coalesce_handle,
                          mem_type,
                          b->base_address,
                          reg,
                          len,
                          value);
    else
        l2sys_burst_read( ((pmc_handle_t *)h)->sys_handle,
                          mem_type,
                          ((pmc_handle_t *)h)->base_address + reg,
                          len,
                          value);
}

static INLINE void tsb1_burst_write( tsb1_buffer_t *b,
                                     pmc_handle_t *h,
                                     UINT32 mem_type,
                                     UINT32 reg,
                                     UINT32 len,
                                     UINT32 *value )
{
    if (b != NULL)
        l1sys_burst_write( b->coalesce_handle,
                           mem_type,
                           b->base_address,
                           reg,
                           len,
                           value);
    else
        l2sys_burst_write( ((pmc_handle_t *)h)->sys_handle,
                           mem_type,
                           ((pmc_handle_t *)h)->base_address + reg,
                           len,
                           value);
}

static INLINE PMC_ERROR tsb1_poll_bit( tsb1_buffer_t *b,
                                       pmc_handle_t *h,
                                       UINT32 mem_type,
                                       UINT32 reg,
                                       UINT32 mask,
                                       UINT32 value,
                                       UINT32 max_count,
                                       UINT32 *num_failed_polls,
                                       UINT32 delay_between_polls_in_microseconds )
{
    if (b != NULL)
        return l1sys_poll_bit( b->coalesce_handle,
                               mem_type,
                               b->base_address,
                               reg,
                               mask,
                               value,
                               max_count,
                               num_failed_polls,
                               delay_between_polls_in_microseconds);
    else
        return l2sys_poll_bit( ((pmc_handle_t *)h)->sys_handle,
                               mem_type,
                               ((pmc_handle_t *)h)->base_address + reg,
                               mask,
                               value,
                               max_count,
                               num_failed_polls,
                               delay_between_polls_in_microseconds);
}

/*
 * ==================================================================================
 *                        register access functions for tsb1
 * ==================================================================================
 */

/**
 * accessor functions for register PMC_TSB1_REG_CONFIG0
 *
 * Register: Configuration 0
 * Offset: 0x00020000 CONFIG0
 * 
 *
 * bits 31:0 default 00000000000000000000000000000000 REGFLD1
 *     Testing
 */

#ifndef tsb1_reg_CONFIG0_write
#define tsb1_reg_CONFIG0_write( b, h, value ) \
       _tsb1_reg_CONFIG0_write( LOG_CALLER b, h, value )
#endif
static INLINE void _tsb1_reg_CONFIG0_write( LOG_CALLER_DEFN
                                            tsb1_buffer_t *b,
                                            pmc_handle_t *h,
                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "tsb1_reg_CONFIG0_write", value );
    tsb1_reg_write( b,
                    h,
                    MEM_TYPE_CONFIG,
                    PMC_TSB1_REG_CONFIG0,
                    value);
}


#ifndef tsb1_reg_CONFIG0_field_set
#define tsb1_reg_CONFIG0_field_set( b, h, mask, ofs, value ) \
       _tsb1_reg_CONFIG0_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _tsb1_reg_CONFIG0_field_set( LOG_CALLER_DEFN
                                                tsb1_buffer_t *b,
                                                pmc_handle_t *h,
                                                UINT32 mask,
                                                UINT32 ofs,
                                                UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "tsb1_reg_CONFIG0_field_set", mask, ofs, value );
    tsb1_field_set( b,
                    h,
                    MEM_TYPE_CONFIG,
                    PMC_TSB1_REG_CONFIG0,
                    mask,
                    ofs,
                    value);

}


#ifndef tsb1_reg_CONFIG0_read
#define tsb1_reg_CONFIG0_read( b, h ) \
       _tsb1_reg_CONFIG0_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _tsb1_reg_CONFIG0_read( LOG_CALLER_DEFN tsb1_buffer_t *b, pmc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = tsb1_reg_read( b,
                               h,
                               MEM_TYPE_CONFIG,
                               PMC_TSB1_REG_CONFIG0);

    IOLOG( "%s -> 0x%08x;", "tsb1_reg_CONFIG0_read", reg_value);
    return reg_value;
}

/**
 * accessor functions for register PMC_TSB1_REG_CONFIG1
 *
 * Register: Configuration 1
 * Offset: 0x00020004 CONFIG1
 * 
 *
 * bits 15:0  default 0000000000000000 REGFLD2
 *     Testing
 *
 * bits 31:16 default 0000000000000000 REGFLD3
 *     Testing
 */

#ifndef tsb1_reg_CONFIG1_write
#define tsb1_reg_CONFIG1_write( b, h, value ) \
       _tsb1_reg_CONFIG1_write( LOG_CALLER b, h, value )
#endif
static INLINE void _tsb1_reg_CONFIG1_write( LOG_CALLER_DEFN
                                            tsb1_buffer_t *b,
                                            pmc_handle_t *h,
                                            UINT32 value )
{
    IOLOG( "%s <- 0x%08x", "tsb1_reg_CONFIG1_write", value );
    tsb1_reg_write( b,
                    h,
                    MEM_TYPE_CONFIG,
                    PMC_TSB1_REG_CONFIG1,
                    value);
}


#ifndef tsb1_reg_CONFIG1_field_set
#define tsb1_reg_CONFIG1_field_set( b, h, mask, ofs, value ) \
       _tsb1_reg_CONFIG1_field_set( LOG_CALLER b, h, mask, ofs, value )
#endif
static INLINE void _tsb1_reg_CONFIG1_field_set( LOG_CALLER_DEFN
                                                tsb1_buffer_t *b,
                                                pmc_handle_t *h,
                                                UINT32 mask,
                                                UINT32 ofs,
                                                UINT32 value )
{
    IOLOG( "%s <- mask=0x%08x ofs=%d value=0x%08x", "tsb1_reg_CONFIG1_field_set", mask, ofs, value );
    tsb1_field_set( b,
                    h,
                    MEM_TYPE_CONFIG,
                    PMC_TSB1_REG_CONFIG1,
                    mask,
                    ofs,
                    value);

}


#ifndef tsb1_reg_CONFIG1_read
#define tsb1_reg_CONFIG1_read( b, h ) \
       _tsb1_reg_CONFIG1_read( LOG_CALLER b, h )
#endif
static INLINE UINT32 _tsb1_reg_CONFIG1_read( LOG_CALLER_DEFN tsb1_buffer_t *b, pmc_handle_t *h )
{
    UINT32 reg_value;

    reg_value = tsb1_reg_read( b,
                               h,
                               MEM_TYPE_CONFIG,
                               PMC_TSB1_REG_CONFIG1);

    IOLOG( "%s -> 0x%08x;", "tsb1_reg_CONFIG1_read", reg_value);
    return reg_value;
}

/*
 * ==================================================================================
 *               Parameter Access Functions for Paramset tsb1_config
 * ==================================================================================
 */

#ifndef tsb1_field_REGFLD1_set
#define tsb1_field_REGFLD1_set( b, h, value ) \
       _tsb1_field_REGFLD1_set( LOG_CALLER b, h, value )
#endif
static INLINE void _tsb1_field_REGFLD1_set( LOG_CALLER_DEFN
                                            tsb1_buffer_t *b,
                                            pmc_handle_t *h,
                                            UINT32 value )
{
    IOLOG( "%s <= 0x%08x", "tsb1_field_REGFLD1_set", value );

    /* (0x00020000 bits 31:0) field REGFLD1 of register PMC_TSB1_REG_CONFIG0 */
    _tsb1_reg_CONFIG0_field_set( LOG_CALLER_ARGS
                                 b,
                                 h,
                                 TSB1_REG_CONFIG0_BIT_REGFLD1_MSK,
                                 TSB1_REG_CONFIG0_BIT_REGFLD1_OFF,
                                 value);
}


#ifndef tsb1_field_REGFLD1_get
#define tsb1_field_REGFLD1_get( b, h ) \
       _tsb1_field_REGFLD1_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _tsb1_field_REGFLD1_get( LOG_CALLER_DEFN tsb1_buffer_t *b, pmc_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00020000 bits 31:0) field REGFLD1 of register PMC_TSB1_REG_CONFIG0 */
    reg_value = _tsb1_reg_CONFIG0_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & TSB1_REG_CONFIG0_BIT_REGFLD1_MSK) >> TSB1_REG_CONFIG0_BIT_REGFLD1_OFF;
    IOLOG( "%s -> 0x%08x", "tsb1_field_REGFLD1_get", value );

    return value;
}

#ifndef tsb1_field_range_REGFLD1_set
#define tsb1_field_range_REGFLD1_set( b, h, start_bit, stop_bit, value ) \
       _tsb1_field_range_REGFLD1_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _tsb1_field_range_REGFLD1_set( LOG_CALLER_DEFN
                                                  tsb1_buffer_t *b,
                                                  pmc_handle_t *h,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit,
                                                  UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "tsb1_field_range_REGFLD1_set", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "tsb1_field_range_REGFLD1_set", stop_bit, 31 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "tsb1_field_range_REGFLD1_set", start_bit, stop_bit, value );

    /* (0x00020000 bits 31:0) field REGFLD1 of register PMC_TSB1_REG_CONFIG0 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00020000 bits 31:0) field REGFLD1 of register PMC_TSB1_REG_CONFIG0 */
        _tsb1_reg_CONFIG0_field_set( LOG_CALLER_ARGS
                                     b,
                                     h,
                                     subfield_mask << (TSB1_REG_CONFIG0_BIT_REGFLD1_OFF + subfield_offset),
                                     TSB1_REG_CONFIG0_BIT_REGFLD1_OFF + subfield_offset,
                                     value >> subfield_shift);
    }
}


#ifndef tsb1_field_range_REGFLD1_get
#define tsb1_field_range_REGFLD1_get( b, h, start_bit, stop_bit ) \
       _tsb1_field_range_REGFLD1_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _tsb1_field_range_REGFLD1_get( LOG_CALLER_DEFN
                                                    tsb1_buffer_t *b,
                                                    pmc_handle_t *h,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "tsb1_field_range_REGFLD1_get", stop_bit, start_bit );
    if (stop_bit > 31) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "tsb1_field_range_REGFLD1_get", stop_bit, 31 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00020000 bits 31:0) field REGFLD1 of register PMC_TSB1_REG_CONFIG0 */
    reg_value = _tsb1_reg_CONFIG0_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & TSB1_REG_CONFIG0_BIT_REGFLD1_MSK)
                  >> TSB1_REG_CONFIG0_BIT_REGFLD1_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, TSB1_REG_CONFIG0_BIT_REGFLD1_MSK, TSB1_REG_CONFIG0_BIT_REGFLD1_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "tsb1_field_range_REGFLD1_get", start_bit, stop_bit, value );

    return value;
}

#ifndef tsb1_field_REGFLD2_set
#define tsb1_field_REGFLD2_set( b, h, value ) \
       _tsb1_field_REGFLD2_set( LOG_CALLER b, h, value )
#endif
static INLINE void _tsb1_field_REGFLD2_set( LOG_CALLER_DEFN
                                            tsb1_buffer_t *b,
                                            pmc_handle_t *h,
                                            UINT32 value )
{
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "tsb1_field_REGFLD2_set", value, 65535);
    IOLOG( "%s <= 0x%08x", "tsb1_field_REGFLD2_set", value );

    /* (0x00020004 bits 15:0) field REGFLD2 of register PMC_TSB1_REG_CONFIG1 */
    _tsb1_reg_CONFIG1_field_set( LOG_CALLER_ARGS
                                 b,
                                 h,
                                 TSB1_REG_CONFIG1_BIT_REGFLD2_MSK,
                                 TSB1_REG_CONFIG1_BIT_REGFLD2_OFF,
                                 value);
}


#ifndef tsb1_field_REGFLD2_get
#define tsb1_field_REGFLD2_get( b, h ) \
       _tsb1_field_REGFLD2_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _tsb1_field_REGFLD2_get( LOG_CALLER_DEFN tsb1_buffer_t *b, pmc_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00020004 bits 15:0) field REGFLD2 of register PMC_TSB1_REG_CONFIG1 */
    reg_value = _tsb1_reg_CONFIG1_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & TSB1_REG_CONFIG1_BIT_REGFLD2_MSK) >> TSB1_REG_CONFIG1_BIT_REGFLD2_OFF;
    IOLOG( "%s -> 0x%08x", "tsb1_field_REGFLD2_get", value );

    return value;
}

#ifndef tsb1_field_range_REGFLD2_set
#define tsb1_field_range_REGFLD2_set( b, h, start_bit, stop_bit, value ) \
       _tsb1_field_range_REGFLD2_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _tsb1_field_range_REGFLD2_set( LOG_CALLER_DEFN
                                                  tsb1_buffer_t *b,
                                                  pmc_handle_t *h,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit,
                                                  UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "tsb1_field_range_REGFLD2_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "tsb1_field_range_REGFLD2_set", stop_bit, 15 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "tsb1_field_range_REGFLD2_set", start_bit, stop_bit, value );

    /* (0x00020004 bits 15:0) field REGFLD2 of register PMC_TSB1_REG_CONFIG1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 0) {
            subfield_offset = start_bit - 0;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  0 - start_bit;
            subfield_start_bit = 0;
        }
        if (stop_bit < 15) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 15;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00020004 bits 15:0) field REGFLD2 of register PMC_TSB1_REG_CONFIG1 */
        _tsb1_reg_CONFIG1_field_set( LOG_CALLER_ARGS
                                     b,
                                     h,
                                     subfield_mask << (TSB1_REG_CONFIG1_BIT_REGFLD2_OFF + subfield_offset),
                                     TSB1_REG_CONFIG1_BIT_REGFLD2_OFF + subfield_offset,
                                     value >> subfield_shift);
    }
}


#ifndef tsb1_field_range_REGFLD2_get
#define tsb1_field_range_REGFLD2_get( b, h, start_bit, stop_bit ) \
       _tsb1_field_range_REGFLD2_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _tsb1_field_range_REGFLD2_get( LOG_CALLER_DEFN
                                                    tsb1_buffer_t *b,
                                                    pmc_handle_t *h,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "tsb1_field_range_REGFLD2_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "tsb1_field_range_REGFLD2_get", stop_bit, 15 );
    if (start_bit > 0) {
        subfield_offset = start_bit - 0;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 0 - start_bit;
        subfield_start_bit = 0;
    }
    if (stop_bit < 15) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 15;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00020004 bits 15:0) field REGFLD2 of register PMC_TSB1_REG_CONFIG1 */
    reg_value = _tsb1_reg_CONFIG1_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & TSB1_REG_CONFIG1_BIT_REGFLD2_MSK)
                  >> TSB1_REG_CONFIG1_BIT_REGFLD2_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, TSB1_REG_CONFIG1_BIT_REGFLD2_MSK, TSB1_REG_CONFIG1_BIT_REGFLD2_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "tsb1_field_range_REGFLD2_get", start_bit, stop_bit, value );

    return value;
}

#ifndef tsb1_field_REGFLD3_set
#define tsb1_field_REGFLD3_set( b, h, value ) \
       _tsb1_field_REGFLD3_set( LOG_CALLER b, h, value )
#endif
static INLINE void _tsb1_field_REGFLD3_set( LOG_CALLER_DEFN
                                            tsb1_buffer_t *b,
                                            pmc_handle_t *h,
                                            UINT32 value )
{
    if (value > 65535)
        IO_RANGE_CHECK("%s value is 0x%08x but max is 0x%08x", "tsb1_field_REGFLD3_set", value, 65535);
    IOLOG( "%s <= 0x%08x", "tsb1_field_REGFLD3_set", value );

    /* (0x00020004 bits 31:16) field REGFLD3 of register PMC_TSB1_REG_CONFIG1 */
    _tsb1_reg_CONFIG1_field_set( LOG_CALLER_ARGS
                                 b,
                                 h,
                                 TSB1_REG_CONFIG1_BIT_REGFLD3_MSK,
                                 TSB1_REG_CONFIG1_BIT_REGFLD3_OFF,
                                 value);
}


#ifndef tsb1_field_REGFLD3_get
#define tsb1_field_REGFLD3_get( b, h ) \
       _tsb1_field_REGFLD3_get( LOG_CALLER b, h )
#endif
static INLINE UINT32 _tsb1_field_REGFLD3_get( LOG_CALLER_DEFN tsb1_buffer_t *b, pmc_handle_t *h )
{
    UINT32 value = 0;
    UINT32 reg_value;

    /* (0x00020004 bits 31:16) field REGFLD3 of register PMC_TSB1_REG_CONFIG1 */
    reg_value = _tsb1_reg_CONFIG1_read( LOG_CALLER_ARGS b, h);
    value = (reg_value & TSB1_REG_CONFIG1_BIT_REGFLD3_MSK) >> TSB1_REG_CONFIG1_BIT_REGFLD3_OFF;
    IOLOG( "%s -> 0x%08x", "tsb1_field_REGFLD3_get", value );

    return value;
}

#ifndef tsb1_field_range_REGFLD3_set
#define tsb1_field_range_REGFLD3_set( b, h, start_bit, stop_bit, value ) \
       _tsb1_field_range_REGFLD3_set( LOG_CALLER b, h, start_bit, stop_bit, value )
#endif
static INLINE void _tsb1_field_range_REGFLD3_set( LOG_CALLER_DEFN
                                                  tsb1_buffer_t *b,
                                                  pmc_handle_t *h,
                                                  UINT32 start_bit,
                                                  UINT32 stop_bit,
                                                  UINT32 value )
{
    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "tsb1_field_range_REGFLD3_set", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "tsb1_field_range_REGFLD3_set", stop_bit, 15 );
    IOLOG( "%s <= start_bit=%d stop_bit=%d 0x%08x", "tsb1_field_range_REGFLD3_set", start_bit, stop_bit, value );

    /* (0x00020004 bits 31:16) field REGFLD3 of register PMC_TSB1_REG_CONFIG1 */
    {
        UINT32 subfield_start_bit;
        UINT32 subfield_stop_bit;
        UINT32 subfield_offset;
        UINT32 subfield_shift;
        UINT32 subfield_num_bits;
        UINT32 subfield_mask;

        if (start_bit > 16) {
            subfield_offset = start_bit - 16;
            subfield_shift = 0;
            subfield_start_bit = start_bit;
        } else {
            subfield_offset = 0;
            subfield_shift =  16 - start_bit;
            subfield_start_bit = 16;
        }
        if (stop_bit < 31) {
            subfield_stop_bit = stop_bit;
        } else {
            subfield_stop_bit = 31;
        }
        subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
        subfield_mask = 0xffffffff >> (32-subfield_num_bits);
        /* (0x00020004 bits 31:16) field REGFLD3 of register PMC_TSB1_REG_CONFIG1 */
        _tsb1_reg_CONFIG1_field_set( LOG_CALLER_ARGS
                                     b,
                                     h,
                                     subfield_mask << (TSB1_REG_CONFIG1_BIT_REGFLD3_OFF + subfield_offset),
                                     TSB1_REG_CONFIG1_BIT_REGFLD3_OFF + subfield_offset,
                                     value >> subfield_shift);
    }
}


#ifndef tsb1_field_range_REGFLD3_get
#define tsb1_field_range_REGFLD3_get( b, h, start_bit, stop_bit ) \
       _tsb1_field_range_REGFLD3_get( LOG_CALLER b, h, start_bit, stop_bit )
#endif
static INLINE UINT32 _tsb1_field_range_REGFLD3_get( LOG_CALLER_DEFN
                                                    tsb1_buffer_t *b,
                                                    pmc_handle_t *h,
                                                    UINT32 start_bit,
                                                    UINT32 stop_bit )
{
    UINT32 value = 0;
    UINT32 field_value;
    UINT32 reg_value;
    UINT32 subfield_start_bit;
    UINT32 subfield_stop_bit;
    UINT32 subfield_offset;
    UINT32 subfield_shift;
    UINT32 subfield_num_bits;
    UINT32 subfield_mask;

    if (start_bit > stop_bit) IO_RANGE_CHECK("%s error: stop_bit:%d > start_bit:%d", "tsb1_field_range_REGFLD3_get", stop_bit, start_bit );
    if (stop_bit > 15) IO_RANGE_CHECK("%s error: stop_bit:%d > %d", "tsb1_field_range_REGFLD3_get", stop_bit, 15 );
    if (start_bit > 16) {
        subfield_offset = start_bit - 16;
        subfield_shift = 0;
        subfield_start_bit = start_bit;
    } else {
        subfield_offset = 0;
        subfield_shift = 16 - start_bit;
        subfield_start_bit = 16;
    }
    if (stop_bit < 31) {
        subfield_stop_bit = stop_bit;
    } else {
        subfield_stop_bit = 31;
    }
    subfield_num_bits = subfield_stop_bit - subfield_start_bit + 1;
    subfield_mask = 0xffffffff >> (32-subfield_num_bits);
    /* (0x00020004 bits 31:16) field REGFLD3 of register PMC_TSB1_REG_CONFIG1 */
    reg_value = _tsb1_reg_CONFIG1_read( LOG_CALLER_ARGS b, h);
    field_value = (reg_value & TSB1_REG_CONFIG1_BIT_REGFLD3_MSK)
                  >> TSB1_REG_CONFIG1_BIT_REGFLD3_OFF;
    IOLOG(  "field_value = (%08x & 0x%x) >> %d; // (%08x)", reg_value, TSB1_REG_CONFIG1_BIT_REGFLD3_MSK, TSB1_REG_CONFIG1_BIT_REGFLD3_OFF, field_value );
    value |= ((field_value >> subfield_offset) & subfield_mask) << subfield_shift;
    IOLOG(  "value |= ((%08x >> %d) & 0x%x << %d); // (%08x)", field_value, subfield_offset, subfield_mask, subfield_shift, ((field_value >> subfield_offset) & subfield_mask) << subfield_shift );
    IOLOG( "%s -> start_bit=%d stop_bit=%d 0x%08x", "tsb1_field_range_REGFLD3_get", start_bit, stop_bit, value );

    return value;
}

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* _TSB1_IO_INLINE_H */
